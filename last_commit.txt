Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2019-03-22T22:51:01+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/efdf2920d856b579f2615f9bd6832eff20c443b4

Only use the new feature for keeping an already uploaded image when it is a POST request.

Fixes auto csrf error in site-controlpanel (https://github.com/plone/Products.CMFPlone/issues/2628)
and personal-information (https://github.com/plone/Products.CMFPlone/issues/2709) page.

Files changed:
A news/2628.bugfix
M plone/formwidget/namedfile/widget.py

b'diff --git a/news/2628.bugfix b/news/2628.bugfix\nnew file mode 100644\nindex 0000000..56c8302\n--- /dev/null\n+++ b/news/2628.bugfix\n@@ -0,0 +1,4 @@\n+Only use the new feature for keeping an already uploaded image when it is a POST request.\n+Fixes auto csrf error in `site-controlpanel <https://github.com/plone/Products.CMFPlone/issues/2628>`_\n+and `personal-information <https://github.com/plone/Products.CMFPlone/issues/2709>`_ page.\n+[maurits]\n\\ No newline at end of file\ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 2bc21d4..d7c2566 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -98,7 +98,21 @@ def file_upload_id(self):\n         """Temporary store the uploaded file contents with a file_upload_id key.\n         In case of form validation errors the already uploaded image can then\n         be reused.\n+\n+        This is only useful on a POST request:\n+        forms should not be using GET,\n+        especially when you save something to the database.\n+\n+        Note that if we want this on a GET request,\n+        we should add a safeWrite call in the code below:\n+        plone.protect.utils.safeWrite(up.upload_map, self.request)\n+        Otherwise plone.protect auto csrf will complain for example\n+        when getting @@site-controlpanel or @@personal-information\n+        See https://github.com/plone/Products.CMFPlone/issues/2628\n+        and https://github.com/plone/Products.CMFPlone/issues/2709\n         """\n+        if self.request.method != \'POST\':\n+            return \'\'\n         if self._file_upload_id:\n             # cache this property for multiple calls within one request.\n             # This avoids storing a file upload multiple times.\n@@ -270,7 +284,8 @@ def extract(self, default=NOVALUE):\n                 data = fileinfo.get(\'data\')\n \n                 if filename or data:\n-                    filename = safe_basename(filename)\n+                    if filename:\n+                        filename = safe_basename(filename)\n                     if (\n                             filename is not None\n                             and not isinstance(filename, six.text_type)\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2019-03-25T14:10:32+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/b77b76e70344d183493749cfe144dec16f941f7a

Add more test isolation to widgets.rst.

With a new request, we should instantiate a new widget and call update and extract on it.
Otherwise for example a file_upload_id can linger from a previous call.

Files changed:
M plone/formwidget/namedfile/widget.rst

b'diff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex 6253aa1..9a497b1 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -31,20 +31,31 @@ There are also more specific interfaces for each widget::\n The widgets can be instantiated only using the request::\n \n   >>> from z3c.form.testing import TestRequest\n+  >>> def make_get_request(**kwargs):\n+  ...     # GET is actually the default.\n+  ...     # return TestRequest(**kwargs)\n+  ...     req = TestRequest(**kwargs)\n+  ...     req.method = \'GET\'\n+  ...     return req\n   >>> def make_request(**kwargs):\n-  ...     return TestRequest(**kwargs)\n+  ...     req = TestRequest(**kwargs)\n+  ...     req.method = \'POST\'\n+  ...     return req\n   >>> request = make_request()\n-\n-  >>> file_widget = NamedFileWidget(request)\n-  >>> image_widget = NamedImageWidget(request)\n-\n-Before rendering a widget, one has to set the name and id of the widget::\n-\n-  >>> file_widget.id = \'widget.id.file\'\n-  >>> file_widget.name = \'widget.name.file\'\n-\n-  >>> image_widget.id = \'widget.id.image\'\n-  >>> image_widget.name = \'widget.name.image\'\n+  >>> def make_file_widget(request):\n+  ...     file_widget = NamedFileWidget(request)\n+  ...     # In some versions, before rendering a widget, one has to set the name and id of the widget:\n+  ...     file_widget.id = \'widget.id.file\'\n+  ...     file_widget.name = \'widget.name.file\'\n+  ...     return file_widget\n+  >>> def make_image_widget(request):\n+  ...     image_widget = NamedImageWidget(request)\n+  ...     # In some versions, before rendering a widget, one has to set the name and id of the widget:\n+  ...     image_widget.id = \'widget.id.image\'\n+  ...     image_widget.name = \'widget.name.image\'\n+  ...     return image_widget\n+  >>> file_widget = make_file_widget(request)\n+  >>> image_widget = make_image_widget(request)\n \n We also need to register the templates for the widgets::\n \n@@ -89,24 +100,24 @@ We can extract simple file data from the widget like this::\n   >>> import six\n   >>> myfile = six.BytesIO(b\'My file contents.\')\n \n-  >>> file_widget.request = make_request(form={\'widget.name.file\': myfile})\n+  >>> file_widget = make_file_widget(make_request(form={\'widget.name.file\': myfile}))\n   >>> file_widget.update()\n   >>> file_widget.extract()\n   <...IO object at ...>\n \n-  >>> image_widget.request = make_request(form={\'widget.name.image\': myfile})\n+  >>> image_widget = make_image_widget(make_request(form={\'widget.name.image\': myfile}))\n   >>> image_widget.update()\n   >>> image_widget.extract()\n   <...IO object at ...>\n \n If nothing is found in the request, the default is returned::\n \n-  >>> file_widget.request = make_request()\n+  >>> file_widget = make_file_widget(make_request())\n   >>> file_widget.update()\n   >>> file_widget.extract()\n   <NO_VALUE>\n \n-  >>> image_widget.request = make_request()\n+  >>> image_widget = make_image_widget(make_request())\n   >>> image_widget.update()\n   >>> image_widget.extract()\n   <NO_VALUE>\n@@ -130,17 +141,45 @@ Now build a FileUpload::\n   >>> aFieldStorage = FieldStorageStub(myfile)\n   >>> myUpload = FileUpload(aFieldStorage)\n \n-  >>> file_widget.request = make_request(form={\'widget.name.file\': myUpload})\n+First use a GET request::\n+\n+  >>> file_widget = make_file_widget(make_get_request(form={\'widget.name.file\': myUpload}))\n   >>> file_widget.update()\n   >>> file_widget.extract()\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> image_widget.request = make_request(form={\'widget.name.image\': myUpload})\n+  >>> image_widget = make_image_widget(make_get_request(form={\'widget.name.image\': myUpload}))\n+  >>> image_widget.update()\n+  >>> image_widget.extract()\n+  <ZPublisher.HTTPRequest.FileUpload ...>\n+\n+The rendering is unchanged:\n+\n+  >>> print(file_widget.render())\n+  <span id="widget.id.file" class="named-file-widget">\n+      <input type="file" id="widget.id.file-input"\n+             name="widget.name.file" />\n+  </span>\n+\n+  >>> print(image_widget.render())\n+  <span id="widget.id.image" class="named-image-widget">\n+      <input type="file" id="widget.id.image-input"\n+             name="widget.name.image" />\n+  </span>\n+\n+Now use a POST request (the default in our make_request helper function)::\n+\n+  >>> file_widget = make_file_widget(make_request(form={\'widget.name.file\': myUpload}))\n+  >>> file_widget.update()\n+  >>> file_widget.extract()\n+  <ZPublisher.HTTPRequest.FileUpload ...>\n+\n+  >>> image_widget = make_image_widget(make_request(form={\'widget.name.image\': myUpload}))\n   >>> image_widget.update()\n   >>> image_widget.extract()\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-The rendering is unchanged::\n+The rendering contains data about the file upload id::\n \n   >>> print(file_widget.render())\n   <span id="widget.id.file" class="named-file-widget">\n@@ -170,12 +209,12 @@ Empty, unnamed FileUploads are treated as having no value::\n   >>> aFieldStorage = FieldStorageStub(emptyfile, filename=\'\')\n   >>> myEmptyUpload = FileUpload(aFieldStorage)\n \n-  >>> file_widget.request = make_request(form={\'widget.name.file\': myEmptyUpload})\n+  >>> file_widget = make_file_widget(make_request(form={\'widget.name.file\': myEmptyUpload}))\n   >>> file_widget.update()\n   >>> file_widget.extract()\n   <NO_VALUE>\n \n-  >>> image_widget.request = make_request(form={\'widget.name.image\': myEmptyUpload})\n+  >>> image_widget = make_image_widget(make_request(form={\'widget.name.image\': myEmptyUpload}))\n   >>> image_widget.update()\n   >>> image_widget.extract()\n   <NO_VALUE>\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2019-03-25T14:46:37+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/39755889acf85442854b97ec5a5de88a84d3b7e5

Fixed Py23DocChecker.

There was a small mistake on Python 2: we basically set 'got = want', which meant the doctests always passed...

Files changed:
M plone/formwidget/namedfile/tests.py
M plone/formwidget/namedfile/widget.rst

b'diff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex 8f800b0..315f068 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -11,8 +11,19 @@\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            got = re.sub(\'zope.publisher.interfaces.NotFound\', \'NotFound\', got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            got = re.sub(\'NotFound\', \'zope.publisher.interfaces.NotFound\', got)\n+            got = re.sub(\'InvalidState\', \'plone.formwidget.namedfile.validator.InvalidState\', got)\n+            got = re.sub(\'RequiredMissing\', \'zope.schema._bootstrapinterfaces.RequiredMissing\', got)\n+            got = re.sub(\'IOError: cannot identify image file\', \'OSError: cannot identify image file\', got)\n+            got = re.sub(\'IO instance\', \'IO object\', got)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            got = re.sub(\'u"(.*?)"\', \'"\\\\1"\', got)\n+            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n+            got = re.sub(\'b"(.*?)"\', \'"\\\\1"\', got)\n+            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub(\'b"(.*?)"\', \'"\\\\1"\', want)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex 9a497b1..369552e 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -495,7 +495,7 @@ content type::\n   >>> file_obj = file_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> file_obj.data\n   b\'File upload contents.\'\n-  >>> print(file_obj.filename.encode(\'utf8\'))\n+  >>> file_obj.filename.encode(\'utf8\')\n   b\'rand\\xc3\\xb8m.txt\'\n \n Content type from headers sent by browser should be ignored::\n@@ -731,7 +731,7 @@ Check that we have a good image that PIL can handle::\n \n   >>> content.image_field = bytes_image_converter.toFieldValue(uploaded)\n   >>> content.image_field\n-  b\'filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\n+  b\'filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\'\n \n Note that PIL cannot open this bytes image, so we cannot scale it::\n \n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2019-03-26T12:43:01+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/846f5f44f3292592763f0e676d5c282acefb633d

Merge pull request #38 from plone/maurits-issue-2813-plone-protect

Only keep already uploaded image when it is a POST request

Files changed:
A news/2628.bugfix
M plone/formwidget/namedfile/tests.py
M plone/formwidget/namedfile/widget.py
M plone/formwidget/namedfile/widget.rst

b'diff --git a/news/2628.bugfix b/news/2628.bugfix\nnew file mode 100644\nindex 0000000..56c8302\n--- /dev/null\n+++ b/news/2628.bugfix\n@@ -0,0 +1,4 @@\n+Only use the new feature for keeping an already uploaded image when it is a POST request.\n+Fixes auto csrf error in `site-controlpanel <https://github.com/plone/Products.CMFPlone/issues/2628>`_\n+and `personal-information <https://github.com/plone/Products.CMFPlone/issues/2709>`_ page.\n+[maurits]\n\\ No newline at end of file\ndiff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex 8f800b0..315f068 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -11,8 +11,19 @@\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            got = re.sub(\'zope.publisher.interfaces.NotFound\', \'NotFound\', got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            got = re.sub(\'NotFound\', \'zope.publisher.interfaces.NotFound\', got)\n+            got = re.sub(\'InvalidState\', \'plone.formwidget.namedfile.validator.InvalidState\', got)\n+            got = re.sub(\'RequiredMissing\', \'zope.schema._bootstrapinterfaces.RequiredMissing\', got)\n+            got = re.sub(\'IOError: cannot identify image file\', \'OSError: cannot identify image file\', got)\n+            got = re.sub(\'IO instance\', \'IO object\', got)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            got = re.sub(\'u"(.*?)"\', \'"\\\\1"\', got)\n+            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n+            got = re.sub(\'b"(.*?)"\', \'"\\\\1"\', got)\n+            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub(\'b"(.*?)"\', \'"\\\\1"\', want)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 2bc21d4..d7c2566 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -98,7 +98,21 @@ def file_upload_id(self):\n         """Temporary store the uploaded file contents with a file_upload_id key.\n         In case of form validation errors the already uploaded image can then\n         be reused.\n+\n+        This is only useful on a POST request:\n+        forms should not be using GET,\n+        especially when you save something to the database.\n+\n+        Note that if we want this on a GET request,\n+        we should add a safeWrite call in the code below:\n+        plone.protect.utils.safeWrite(up.upload_map, self.request)\n+        Otherwise plone.protect auto csrf will complain for example\n+        when getting @@site-controlpanel or @@personal-information\n+        See https://github.com/plone/Products.CMFPlone/issues/2628\n+        and https://github.com/plone/Products.CMFPlone/issues/2709\n         """\n+        if self.request.method != \'POST\':\n+            return \'\'\n         if self._file_upload_id:\n             # cache this property for multiple calls within one request.\n             # This avoids storing a file upload multiple times.\n@@ -270,7 +284,8 @@ def extract(self, default=NOVALUE):\n                 data = fileinfo.get(\'data\')\n \n                 if filename or data:\n-                    filename = safe_basename(filename)\n+                    if filename:\n+                        filename = safe_basename(filename)\n                     if (\n                             filename is not None\n                             and not isinstance(filename, six.text_type)\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex 6253aa1..369552e 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -31,20 +31,31 @@ There are also more specific interfaces for each widget::\n The widgets can be instantiated only using the request::\n \n   >>> from z3c.form.testing import TestRequest\n+  >>> def make_get_request(**kwargs):\n+  ...     # GET is actually the default.\n+  ...     # return TestRequest(**kwargs)\n+  ...     req = TestRequest(**kwargs)\n+  ...     req.method = \'GET\'\n+  ...     return req\n   >>> def make_request(**kwargs):\n-  ...     return TestRequest(**kwargs)\n+  ...     req = TestRequest(**kwargs)\n+  ...     req.method = \'POST\'\n+  ...     return req\n   >>> request = make_request()\n-\n-  >>> file_widget = NamedFileWidget(request)\n-  >>> image_widget = NamedImageWidget(request)\n-\n-Before rendering a widget, one has to set the name and id of the widget::\n-\n-  >>> file_widget.id = \'widget.id.file\'\n-  >>> file_widget.name = \'widget.name.file\'\n-\n-  >>> image_widget.id = \'widget.id.image\'\n-  >>> image_widget.name = \'widget.name.image\'\n+  >>> def make_file_widget(request):\n+  ...     file_widget = NamedFileWidget(request)\n+  ...     # In some versions, before rendering a widget, one has to set the name and id of the widget:\n+  ...     file_widget.id = \'widget.id.file\'\n+  ...     file_widget.name = \'widget.name.file\'\n+  ...     return file_widget\n+  >>> def make_image_widget(request):\n+  ...     image_widget = NamedImageWidget(request)\n+  ...     # In some versions, before rendering a widget, one has to set the name and id of the widget:\n+  ...     image_widget.id = \'widget.id.image\'\n+  ...     image_widget.name = \'widget.name.image\'\n+  ...     return image_widget\n+  >>> file_widget = make_file_widget(request)\n+  >>> image_widget = make_image_widget(request)\n \n We also need to register the templates for the widgets::\n \n@@ -89,24 +100,24 @@ We can extract simple file data from the widget like this::\n   >>> import six\n   >>> myfile = six.BytesIO(b\'My file contents.\')\n \n-  >>> file_widget.request = make_request(form={\'widget.name.file\': myfile})\n+  >>> file_widget = make_file_widget(make_request(form={\'widget.name.file\': myfile}))\n   >>> file_widget.update()\n   >>> file_widget.extract()\n   <...IO object at ...>\n \n-  >>> image_widget.request = make_request(form={\'widget.name.image\': myfile})\n+  >>> image_widget = make_image_widget(make_request(form={\'widget.name.image\': myfile}))\n   >>> image_widget.update()\n   >>> image_widget.extract()\n   <...IO object at ...>\n \n If nothing is found in the request, the default is returned::\n \n-  >>> file_widget.request = make_request()\n+  >>> file_widget = make_file_widget(make_request())\n   >>> file_widget.update()\n   >>> file_widget.extract()\n   <NO_VALUE>\n \n-  >>> image_widget.request = make_request()\n+  >>> image_widget = make_image_widget(make_request())\n   >>> image_widget.update()\n   >>> image_widget.extract()\n   <NO_VALUE>\n@@ -130,17 +141,45 @@ Now build a FileUpload::\n   >>> aFieldStorage = FieldStorageStub(myfile)\n   >>> myUpload = FileUpload(aFieldStorage)\n \n-  >>> file_widget.request = make_request(form={\'widget.name.file\': myUpload})\n+First use a GET request::\n+\n+  >>> file_widget = make_file_widget(make_get_request(form={\'widget.name.file\': myUpload}))\n   >>> file_widget.update()\n   >>> file_widget.extract()\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> image_widget.request = make_request(form={\'widget.name.image\': myUpload})\n+  >>> image_widget = make_image_widget(make_get_request(form={\'widget.name.image\': myUpload}))\n+  >>> image_widget.update()\n+  >>> image_widget.extract()\n+  <ZPublisher.HTTPRequest.FileUpload ...>\n+\n+The rendering is unchanged:\n+\n+  >>> print(file_widget.render())\n+  <span id="widget.id.file" class="named-file-widget">\n+      <input type="file" id="widget.id.file-input"\n+             name="widget.name.file" />\n+  </span>\n+\n+  >>> print(image_widget.render())\n+  <span id="widget.id.image" class="named-image-widget">\n+      <input type="file" id="widget.id.image-input"\n+             name="widget.name.image" />\n+  </span>\n+\n+Now use a POST request (the default in our make_request helper function)::\n+\n+  >>> file_widget = make_file_widget(make_request(form={\'widget.name.file\': myUpload}))\n+  >>> file_widget.update()\n+  >>> file_widget.extract()\n+  <ZPublisher.HTTPRequest.FileUpload ...>\n+\n+  >>> image_widget = make_image_widget(make_request(form={\'widget.name.image\': myUpload}))\n   >>> image_widget.update()\n   >>> image_widget.extract()\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-The rendering is unchanged::\n+The rendering contains data about the file upload id::\n \n   >>> print(file_widget.render())\n   <span id="widget.id.file" class="named-file-widget">\n@@ -170,12 +209,12 @@ Empty, unnamed FileUploads are treated as having no value::\n   >>> aFieldStorage = FieldStorageStub(emptyfile, filename=\'\')\n   >>> myEmptyUpload = FileUpload(aFieldStorage)\n \n-  >>> file_widget.request = make_request(form={\'widget.name.file\': myEmptyUpload})\n+  >>> file_widget = make_file_widget(make_request(form={\'widget.name.file\': myEmptyUpload}))\n   >>> file_widget.update()\n   >>> file_widget.extract()\n   <NO_VALUE>\n \n-  >>> image_widget.request = make_request(form={\'widget.name.image\': myEmptyUpload})\n+  >>> image_widget = make_image_widget(make_request(form={\'widget.name.image\': myEmptyUpload}))\n   >>> image_widget.update()\n   >>> image_widget.extract()\n   <NO_VALUE>\n@@ -456,7 +495,7 @@ content type::\n   >>> file_obj = file_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> file_obj.data\n   b\'File upload contents.\'\n-  >>> print(file_obj.filename.encode(\'utf8\'))\n+  >>> file_obj.filename.encode(\'utf8\')\n   b\'rand\\xc3\\xb8m.txt\'\n \n Content type from headers sent by browser should be ignored::\n@@ -692,7 +731,7 @@ Check that we have a good image that PIL can handle::\n \n   >>> content.image_field = bytes_image_converter.toFieldValue(uploaded)\n   >>> content.image_field\n-  b\'filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\n+  b\'filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\'\n \n Note that PIL cannot open this bytes image, so we cannot scale it::\n \n'

