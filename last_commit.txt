Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2019-02-07T14:25:36+01:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/038ab41c3659240d4222d069b4808c366aba5ed9

Work in progress: fix for #38
If a behavior that provides a NamedBlob field was renamed, the following will fail:
- editing the current version of the content item
- viewing a previous version (from the history)
- reverting to a previous version
This code is a proof of concept that fetches the blob from the stored history
under its old name.
It currently uses a hard-coded mapping that allows a lookup from old to new
interface name. This needs to be turned into a utility lookup.

Files changed:
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/modifiers.py

b'diff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py\nindex 1c9d952..cca77bc 100644\n--- a/plone/app/versioningbehavior/browser.py\n+++ b/plone/app/versioningbehavior/browser.py\n@@ -1,4 +1,7 @@\n # -*- coding: utf-8 -*-\n+from plone.app.versioningbehavior.modifiers import fetch_blob_from_history\n+from plone.namedfile.interfaces import INamedBlobFile\n+from plone.namedfile.interfaces import INamedBlobImage\n from plone.namedfile.utils import set_headers, stream_data\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n@@ -118,6 +121,19 @@ def __call__(self):\n         if file_ is None:\n             raise NotFound(self, filename, self.request)\n \n+        # Make sure that we are really dealing with a file\n+        if not (\n+            INamedBlobFile.providedBy(file_) or\n+            INamedBlobImage.providedBy(file_)\n+        ):\n+            return\n+\n+        if not file_._blob:\n+            blob = fetch_blob_from_history(old_obj, field_id, version_id)\n+            if not blob:\n+                raise NotFound(self, filename, self.request)\n+            file_._blob = blob\n+\n         set_headers(file_, self.request.response, filename=filename)\n \n         if do_not_stream:\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 1be71f4..fa129d5 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n-from plone.dexterity.utils import iterSchemata, resolveDottedName\n+from Acquisition import aq_base\n from plone.dexterity.interfaces import IDexterityContent\n+from plone.dexterity.utils import iterSchemata, resolveDottedName\n from plone.namedfile.interfaces import INamedBlobFileField\n from plone.namedfile.interfaces import INamedBlobImageField\n from Products.CMFCore.utils import getToolByName\n@@ -11,15 +11,24 @@\n from Products.CMFEditions.interfaces.IModifier import ICloneModifier\n from Products.CMFEditions.interfaces.IModifier import ISaveRetrieveModifier\n from Products.CMFEditions.Modifiers import ConditionalTalesModifier\n+from Products.CMFEditions.utilities import dereference\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n+from z3c.relationfield.interfaces import IRelationChoice, IRelationList\n from ZODB.blob import Blob\n from zope.interface import implementer\n from zope.schema import getFields\n-from z3c.relationfield.interfaces import IRelationChoice, IRelationList\n+\n \n import os\n import six\n \n+# XXX needs to become some kind of util lookup...\n+BEHAVIOR_LOOKUP = {\n+    \'plone.app.contenttypes.behaviors.leadimage.ILeadImage\':\n+        \'plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior\'\n+\n+}\n+\n \n manage_CloneNamedFileBlobsAddForm =  \\\n     PageTemplateFile(\n@@ -91,6 +100,33 @@ def manage_addSkipRelations(self, id, title=None, REQUEST=None):\n         REQUEST[\'RESPONSE\'].redirect(self.absolute_url() + \'/manage_main\')\n \n \n+def fetch_blob_from_history(obj, field_name, version_id=None):\n+    # For some reason, the blob cannot be retrieved from the actual\n+    # object any more. A common reason can be that the behavior that provides\n+    # the field was renamed.\n+    # In this case, take the appropriate version from the history storage and\n+    # try to retrieve the blob directly.\n+    archivist_tool = getToolByName(obj, \'portal_archivist\')\n+    item, history_id = dereference(obj, zodb_hook=archivist_tool)\n+    storage = getToolByName(obj, \'portal_historiesstorage\')\n+    version_data = storage.retrieve(history_id, version_id)\n+    # We know that the blob will be stored under a key that starts with our\n+    # class name, and that ends with the field name.\n+    # Now look up the (XXX utility) mapping of changed behavior names.\n+    # If the interface name of the key is found in the mapping, meaning we\n+    # know that it was an interface that has now been renamed,\n+    # return the blob stored under that key.\n+    for key in version_data.referenced_data.keys():\n+        if not key.startswith(\'CloneNamedFileBlobs\'):\n+            continue\n+        name = key.split(\'/\')[-1]\n+        iface_name, f_name = name.rsplit(\'.\', 1)\n+        if f_name == field_name and iface_name in BEHAVIOR_LOOKUP:\n+            blob = version_data.referenced_data[key]\n+            if blob:\n+                return blob\n+\n+\n @implementer(IAttributeModifier, ICloneModifier)\n class CloneNamedFileBlobs:\n     """Modifier to save an un-cloned reference to the blob to avoid it being\n@@ -127,7 +163,18 @@ def getReferencedAttributes(self, obj):\n                         field_value = None\n                     if field_value is None:\n                         continue\n-                    blob_file = field_value.open()\n+\n+                    if not field_value._blob:\n+                        # Get the current version, don\'t pass version_id\n+                        actual_field_blob = fetch_blob_from_history(obj, name)\n+                    else:\n+                        actual_field_blob = field_value._blob\n+\n+                    # The blob is simply not there. We can\'t do anything more.\n+                    if not actual_field_blob:\n+                        continue\n+\n+                    blob_file = actual_field_blob.open()\n                     save_new = True\n                     dotted_name = \'.\'.join([schemata.__identifier__, name])\n \n@@ -135,7 +182,19 @@ def getReferencedAttributes(self, obj):\n                         prior_obj = prior_rev.object\n                         prior_blob = field.get(field.interface(prior_obj))\n                         if prior_blob is not None:\n-                            prior_file = prior_blob.open()\n+\n+                            if not prior_blob._blob:\n+                                # Get the appropriate older version\n+                                actual_prior_blob = fetch_blob_from_history(\n+                                    obj, name, prior_rev.version_id)\n+                            else:\n+                                actual_prior_blob = prior_blob._blob\n+\n+                            # The blob is simply not there. Continue...\n+                            if not actual_prior_blob:\n+                                continue\n+\n+                            prior_file = actual_prior_blob.open()\n \n                             # Check for file size differences\n                             if (os.fstat(prior_file.fileno()).st_size ==\n@@ -167,9 +226,13 @@ def getReferencedAttributes(self, obj):\n     def reattachReferencedAttributes(self, obj, attrs_dict):\n         obj = aq_base(obj)\n         for name, blob in six.iteritems(attrs_dict):\n-            iface = resolveDottedName(\'.\'.join(name.split(\'.\')[:-1]))\n-            fname = name.split(\'.\')[-1]\n-            field = iface.get(fname)\n+            iface_name, f_name = name.rsplit(\'.\', 1)\n+            # Look up if the interface might have changed\n+            # XXX make this a utility lookup...\n+            if iface_name in BEHAVIOR_LOOKUP:\n+                iface_name = BEHAVIOR_LOOKUP[iface_name]\n+            iface = resolveDottedName(iface_name)\n+            field = iface.get(f_name)\n             if field is not None:  # Field may have been removed from schema\n                 adapted_field = field.get(iface(obj))\n                 if adapted_field:\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2019-02-07T18:05:27+01:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/59a9a018e74ac621b1ec9a52437418f453171f55

We can actually throw away lots of code again, since reattachReferencedAttributes
is called in all our uses cases. So if we fix that method to find the correct
blob, we can handle all cases of changed dotted interface names.

This commit depends on plone/plone.behavior#19

Files changed:
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/modifiers.py

b'diff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py\nindex cca77bc..1c9d952 100644\n--- a/plone/app/versioningbehavior/browser.py\n+++ b/plone/app/versioningbehavior/browser.py\n@@ -1,7 +1,4 @@\n # -*- coding: utf-8 -*-\n-from plone.app.versioningbehavior.modifiers import fetch_blob_from_history\n-from plone.namedfile.interfaces import INamedBlobFile\n-from plone.namedfile.interfaces import INamedBlobImage\n from plone.namedfile.utils import set_headers, stream_data\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n@@ -121,19 +118,6 @@ def __call__(self):\n         if file_ is None:\n             raise NotFound(self, filename, self.request)\n \n-        # Make sure that we are really dealing with a file\n-        if not (\n-            INamedBlobFile.providedBy(file_) or\n-            INamedBlobImage.providedBy(file_)\n-        ):\n-            return\n-\n-        if not file_._blob:\n-            blob = fetch_blob_from_history(old_obj, field_id, version_id)\n-            if not blob:\n-                raise NotFound(self, filename, self.request)\n-            file_._blob = blob\n-\n         set_headers(file_, self.request.response, filename=filename)\n \n         if do_not_stream:\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex fa129d5..386ac6d 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n+from plone.behavior.registration import BehaviorRegistrationNotFound\n+from plone.behavior.registration import lookup_behavior_registration\n from plone.dexterity.interfaces import IDexterityContent\n-from plone.dexterity.utils import iterSchemata, resolveDottedName\n+from plone.dexterity.utils import iterSchemata\n from plone.namedfile.interfaces import INamedBlobFileField\n from plone.namedfile.interfaces import INamedBlobImageField\n from Products.CMFCore.utils import getToolByName\n@@ -11,24 +13,15 @@\n from Products.CMFEditions.interfaces.IModifier import ICloneModifier\n from Products.CMFEditions.interfaces.IModifier import ISaveRetrieveModifier\n from Products.CMFEditions.Modifiers import ConditionalTalesModifier\n-from Products.CMFEditions.utilities import dereference\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from z3c.relationfield.interfaces import IRelationChoice, IRelationList\n from ZODB.blob import Blob\n from zope.interface import implementer\n from zope.schema import getFields\n \n-\n import os\n import six\n \n-# XXX needs to become some kind of util lookup...\n-BEHAVIOR_LOOKUP = {\n-    \'plone.app.contenttypes.behaviors.leadimage.ILeadImage\':\n-        \'plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior\'\n-\n-}\n-\n \n manage_CloneNamedFileBlobsAddForm =  \\\n     PageTemplateFile(\n@@ -100,33 +93,6 @@ def manage_addSkipRelations(self, id, title=None, REQUEST=None):\n         REQUEST[\'RESPONSE\'].redirect(self.absolute_url() + \'/manage_main\')\n \n \n-def fetch_blob_from_history(obj, field_name, version_id=None):\n-    # For some reason, the blob cannot be retrieved from the actual\n-    # object any more. A common reason can be that the behavior that provides\n-    # the field was renamed.\n-    # In this case, take the appropriate version from the history storage and\n-    # try to retrieve the blob directly.\n-    archivist_tool = getToolByName(obj, \'portal_archivist\')\n-    item, history_id = dereference(obj, zodb_hook=archivist_tool)\n-    storage = getToolByName(obj, \'portal_historiesstorage\')\n-    version_data = storage.retrieve(history_id, version_id)\n-    # We know that the blob will be stored under a key that starts with our\n-    # class name, and that ends with the field name.\n-    # Now look up the (XXX utility) mapping of changed behavior names.\n-    # If the interface name of the key is found in the mapping, meaning we\n-    # know that it was an interface that has now been renamed,\n-    # return the blob stored under that key.\n-    for key in version_data.referenced_data.keys():\n-        if not key.startswith(\'CloneNamedFileBlobs\'):\n-            continue\n-        name = key.split(\'/\')[-1]\n-        iface_name, f_name = name.rsplit(\'.\', 1)\n-        if f_name == field_name and iface_name in BEHAVIOR_LOOKUP:\n-            blob = version_data.referenced_data[key]\n-            if blob:\n-                return blob\n-\n-\n @implementer(IAttributeModifier, ICloneModifier)\n class CloneNamedFileBlobs:\n     """Modifier to save an un-cloned reference to the blob to avoid it being\n@@ -163,18 +129,7 @@ def getReferencedAttributes(self, obj):\n                         field_value = None\n                     if field_value is None:\n                         continue\n-\n-                    if not field_value._blob:\n-                        # Get the current version, don\'t pass version_id\n-                        actual_field_blob = fetch_blob_from_history(obj, name)\n-                    else:\n-                        actual_field_blob = field_value._blob\n-\n-                    # The blob is simply not there. We can\'t do anything more.\n-                    if not actual_field_blob:\n-                        continue\n-\n-                    blob_file = actual_field_blob.open()\n+                    blob_file = field_value.open()\n                     save_new = True\n                     dotted_name = \'.\'.join([schemata.__identifier__, name])\n \n@@ -182,19 +137,7 @@ def getReferencedAttributes(self, obj):\n                         prior_obj = prior_rev.object\n                         prior_blob = field.get(field.interface(prior_obj))\n                         if prior_blob is not None:\n-\n-                            if not prior_blob._blob:\n-                                # Get the appropriate older version\n-                                actual_prior_blob = fetch_blob_from_history(\n-                                    obj, name, prior_rev.version_id)\n-                            else:\n-                                actual_prior_blob = prior_blob._blob\n-\n-                            # The blob is simply not there. Continue...\n-                            if not actual_prior_blob:\n-                                continue\n-\n-                            prior_file = actual_prior_blob.open()\n+                            prior_file = prior_blob.open()\n \n                             # Check for file size differences\n                             if (os.fstat(prior_file.fileno()).st_size ==\n@@ -227,11 +170,17 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n         obj = aq_base(obj)\n         for name, blob in six.iteritems(attrs_dict):\n             iface_name, f_name = name.rsplit(\'.\', 1)\n-            # Look up if the interface might have changed\n-            # XXX make this a utility lookup...\n-            if iface_name in BEHAVIOR_LOOKUP:\n-                iface_name = BEHAVIOR_LOOKUP[iface_name]\n-            iface = resolveDottedName(iface_name)\n+            # Look up the behavior via dotted name.\n+            # If the behavior\'s dotted name was changed, we might still have\n+            # the old name in our attrs_dict.\n+            # Use the fallback of plone.behavior, provided via the field\n+            # former_dotted_names, so that the correct behavior can still\n+            # be found.\n+            try:\n+                behavior = lookup_behavior_registration(iface_name)\n+            except BehaviorRegistrationNotFound:\n+                return\n+            iface = behavior.interface\n             field = iface.get(f_name)\n             if field is not None:  # Field may have been removed from schema\n                 adapted_field = field.get(iface(obj))\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2019-02-07T18:19:05+01:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/1c0098a386350634f1749e5b4371216fc926c570

add changelog entry

Files changed:
M CHANGES.rst

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex dcf5f83..411ffa8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,10 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- If a behavior that provides a NamedBlobFile was renamed, we can now still find the\n+  blob file, provided that the old behavior's dotted name was properly registered.\n+  Refs: #45\n+  [pysailor]\n \n \n 1.3.6 (2018-12-10)\n"

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2019-02-08T01:01:12+01:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/fed688631e6d2ca1ea48ece1f0a2f7959c036e24

Not all named file fields are provided via a behavior...

Files changed:
M plone/app/versioningbehavior/modifiers.py

b"diff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 386ac6d..4b76369 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -5,6 +5,7 @@\n from plone.behavior.registration import lookup_behavior_registration\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import iterSchemata\n+from plone.dexterity.utils import resolveDottedName\n from plone.namedfile.interfaces import INamedBlobFileField\n from plone.namedfile.interfaces import INamedBlobImageField\n from Products.CMFCore.utils import getToolByName\n@@ -170,6 +171,7 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n         obj = aq_base(obj)\n         for name, blob in six.iteritems(attrs_dict):\n             iface_name, f_name = name.rsplit('.', 1)\n+            # In case the field is provided via a behavior:\n             # Look up the behavior via dotted name.\n             # If the behavior's dotted name was changed, we might still have\n             # the old name in our attrs_dict.\n@@ -178,9 +180,10 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n             # be found.\n             try:\n                 behavior = lookup_behavior_registration(iface_name)\n+                iface = behavior.interface\n             except BehaviorRegistrationNotFound:\n-                return\n-            iface = behavior.interface\n+                # Not a behavior - fetch the interface directly\n+                iface = resolveDottedName(iface_name)\n             field = iface.get(f_name)\n             if field is not None:  # Field may have been removed from schema\n                 adapted_field = field.get(iface(obj))\n"

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2019-02-09T11:17:17+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/132871638634ff2ee97a42ad4a9e607b1d342ef2

Merge pull request #45 from plone/pysailor-namedfile

Recover from renamed behavior

Files changed:
M CHANGES.rst
M plone/app/versioningbehavior/modifiers.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex dcf5f83..411ffa8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,10 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- If a behavior that provides a NamedBlobFile was renamed, we can now still find the\n+  blob file, provided that the old behavior's dotted name was properly registered.\n+  Refs: #45\n+  [pysailor]\n \n \n 1.3.6 (2018-12-10)\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 1be71f4..4b76369 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -1,8 +1,11 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n-from plone.dexterity.utils import iterSchemata, resolveDottedName\n+from Acquisition import aq_base\n+from plone.behavior.registration import BehaviorRegistrationNotFound\n+from plone.behavior.registration import lookup_behavior_registration\n from plone.dexterity.interfaces import IDexterityContent\n+from plone.dexterity.utils import iterSchemata\n+from plone.dexterity.utils import resolveDottedName\n from plone.namedfile.interfaces import INamedBlobFileField\n from plone.namedfile.interfaces import INamedBlobImageField\n from Products.CMFCore.utils import getToolByName\n@@ -12,10 +15,10 @@\n from Products.CMFEditions.interfaces.IModifier import ISaveRetrieveModifier\n from Products.CMFEditions.Modifiers import ConditionalTalesModifier\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n+from z3c.relationfield.interfaces import IRelationChoice, IRelationList\n from ZODB.blob import Blob\n from zope.interface import implementer\n from zope.schema import getFields\n-from z3c.relationfield.interfaces import IRelationChoice, IRelationList\n \n import os\n import six\n@@ -167,9 +170,21 @@ def getReferencedAttributes(self, obj):\n     def reattachReferencedAttributes(self, obj, attrs_dict):\n         obj = aq_base(obj)\n         for name, blob in six.iteritems(attrs_dict):\n-            iface = resolveDottedName('.'.join(name.split('.')[:-1]))\n-            fname = name.split('.')[-1]\n-            field = iface.get(fname)\n+            iface_name, f_name = name.rsplit('.', 1)\n+            # In case the field is provided via a behavior:\n+            # Look up the behavior via dotted name.\n+            # If the behavior's dotted name was changed, we might still have\n+            # the old name in our attrs_dict.\n+            # Use the fallback of plone.behavior, provided via the field\n+            # former_dotted_names, so that the correct behavior can still\n+            # be found.\n+            try:\n+                behavior = lookup_behavior_registration(iface_name)\n+                iface = behavior.interface\n+            except BehaviorRegistrationNotFound:\n+                # Not a behavior - fetch the interface directly\n+                iface = resolveDottedName(iface_name)\n+            field = iface.get(f_name)\n             if field is not None:  # Field may have been removed from schema\n                 adapted_field = field.get(iface(obj))\n                 if adapted_field:\n"

