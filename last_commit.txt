Repository: plone.folder


Branch: refs/heads/master
Date: 2018-05-18T14:09:56+02:00
Author: Jan Mevissen (jmevissen) <mevissen@interaktiv.de>
Commit: https://github.com/plone/plone.folder/commit/9aaae726cac0cfade8daf1e743f086d8a8307d55

move gopipindex from plone.app.folder to plone.folder https://github.com/plone/Products.CMFPlone/issues/2422

Files changed:
A src/plone/folder/dtml/addGopipIndex.dtml
A src/plone/folder/nogopip.py

b'diff --git a/src/plone/folder/dtml/addGopipIndex.dtml b/src/plone/folder/dtml/addGopipIndex.dtml\nnew file mode 100644\nindex 0000000..154f03d\n--- /dev/null\n+++ b/src/plone/folder/dtml/addGopipIndex.dtml\n@@ -0,0 +1,44 @@\n+<dtml-var manage_page_header>\n+<dtml-var "manage_form_title(this(), _, form_title=\'Add GopipIndex\')">\n+\n+<p class="form-help">\n+  A <em>GopipIndex</em> fakes the formerly used "getObjPositionInParent" index\n+  by retrieving the necessary information directly from the search results\'\n+  containers.  It works as a drop-in replacement and makes expensive indexing\n+  of each item\'s position unnecessary.\n+</p>\n+\n+<form action="manage_addGopipIndex" method="post" enctype="multipart/form-data">\n+  <table cellspacing="0" cellpadding="2" border="0">\n+    <tr>\n+      <td align="left" valign="top">\n+        <div class="form-label">\n+          Id\n+        </div>\n+      </td>\n+      <td align="left" valign="top">\n+        <input type="text" name="identifier" size="40">\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left" valign="top">\n+        <div class="form-optional">\n+          Type\n+        </div>\n+      </td>\n+      <td align="left" valign="top">\n+        GopipIndex\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left" valign="top"></td>\n+      <td align="left" valign="top">\n+        <div class="form-element">\n+          <input class="form-element" type="submit" name="submit" value=" Add ">\n+        </div>\n+      </td>\n+    </tr>\n+  </table>\n+</form>\n+\n+<dtml-var manage_page_footer>\ndiff --git a/src/plone/folder/nogopip.py b/src/plone/folder/nogopip.py\nnew file mode 100644\nindex 0000000..6affabf\n--- /dev/null\n+++ b/src/plone/folder/nogopip.py\n@@ -0,0 +1,123 @@\n+# -*- coding: utf-8 -*-\n+from Acquisition import aq_base\n+from App.special_dtml import DTMLFile\n+from OFS.SimpleItem import SimpleItem\n+from Products.CMFCore.interfaces import ISiteRoot\n+from Products.PluginIndexes.interfaces import IPluggableIndex, ISortIndex\n+from inspect import currentframe\n+from logging import getLogger\n+from zope.component import getUtility\n+from zope.interface import implementer\n+\n+logger = getLogger(__name__)\n+\n+\n+@implementer(IPluggableIndex)\n+class StubIndex(SimpleItem):\n+    """ stub catalog index doing nothing """\n+\n+    def __init__(self, id, *args, **kw):\n+        self.id = id\n+\n+    def getId(self):\n+        return self.id\n+\n+    def getEntryForObject(self, *args, **kw):\n+        return []\n+\n+    def getIndexSourceNames(self):\n+        return [self.id]\n+\n+    def index_object(self, *args, **kw):\n+        return 0\n+\n+    def unindex_object(self, *args, **kw):\n+        pass\n+\n+    def _apply_index(self, *args, **kw):\n+        return None\n+\n+    def numObjects(self):\n+        return 0\n+\n+    def clear(self):\n+        pass\n+\n+\n+@implementer(ISortIndex)\n+class GopipIndex(StubIndex):\n+    """ fake index for sorting against `getObjPositionInParent` """\n+\n+    meta_type = \'GopipIndex\'\n+    manage_options = dict(label=\'Settings\', action=\'manage_main\'),\n+\n+    keyForDocument = 42\n+\n+    def __init__(self, id, extra=None, caller=None):\n+        super(GopipIndex, self).__init__(id)\n+        self.catalog = aq_base(caller._catalog)\n+\n+    def __len__(self):\n+        # with python 2.4 returning `sys.maxint` gives:\n+        # OverflowError: __len__() should return 0 <= outcome < 2**31\n+        # so...\n+        return 2**31 - 1\n+\n+    def documentToKeyMap(self):\n+        # we need to get the containers in order to get the respective\n+        # positions of the search results, but before that we need those\n+        # results themselves.  luckily this is only ever called from\n+        # `sortResults`, so we can get it form there.  oh, and lurker\n+        # says this won\'t work in jython, though! :)\n+        rs = currentframe().f_back.f_locals[\'rs\']\n+        rids = {}\n+        items = []\n+        containers = {}\n+        getpath = self.catalog.paths.get\n+        traverse = getUtility(ISiteRoot).unrestrictedTraverse\n+        for rid in rs:\n+            path = getpath(rid)\n+            parent, id = path.rsplit(\'/\', 1)\n+            container = containers.get(parent)\n+            if container is None:\n+                containers[parent] = container = traverse(parent)\n+            rids[id] = rid              # remember in case of single folder\n+            items.append((rid, container, id))  # or else for deferred lookup\n+        pos = {}\n+        if len(containers) == 1:\n+            # the usual "all from one folder" case can be optimized\n+            folder = list(containers.values())[0]\n+            if getattr(aq_base(folder), \'getOrdering\', None):\n+                ids = folder.getOrdering().idsInOrder()\n+            else:\n+                # site root or old folders\n+                ids = folder.objectIds()\n+            for idx, id in enumerate(ids):\n+                rid = rids.get(id)\n+                if rid:\n+                    pos[rid] = idx\n+            return pos\n+        else:\n+            # otherwise the entire map needs to be constructed...\n+            for rid, container, id in items:\n+                if getattr(aq_base(container), \'getObjectPosition\', None):\n+                    pos[rid] = container.getObjectPosition(id)\n+                else:\n+                    # fallback for unordered folders\n+                    pos[rid] = 0\n+            return pos\n+\n+\n+manage_addGopipForm = DTMLFile(\'dtml/addGopipIndex\', globals())\n+\n+\n+def manage_addGopipIndex(self, identifier, REQUEST=None, RESPONSE=None,\n+    URL3=None):\n+    """ add a fake gopip index """\n+    return self.manage_addIndex(\n+        identifier,\n+        \'GopipIndex\',\n+        REQUEST=REQUEST,\n+        RESPONSE=RESPONSE,\n+        URL1=URL3\n+    )\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2018-10-01T17:57:36+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.folder/commit/0a2d5565ef802bb862bd875cdbf13db2663390ef

add changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ace364a..ca4ef34 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,6 +10,9 @@ Breaking changes:\n - Drop support for Python 2.6/ Plone 4.3\n   [jensens]\n \n+- move GopipIndex from `plone.app.folder` to `plone.folder`\n+  [jmevissen, petschki]\n+\n New features:\n \n - *add item here*\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2018-10-01T22:59:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.folder/commit/f3540c8499450e1256f6bce7aa416e51c9f84999

Merge pull request #8 from plone/move_gopipindex

move gopipindex from plone.app.folder to plone.folder

Files changed:
A src/plone/folder/dtml/addGopipIndex.dtml
A src/plone/folder/nogopip.py
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ec5ca9d..2ddc6c9 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,9 @@ Breaking changes:\n \n - *add item here*\n \n+- move GopipIndex from `plone.app.folder` to `plone.folder`\n+  [jmevissen, petschki]\n+\n New features:\n \n - *add item here*\ndiff --git a/src/plone/folder/dtml/addGopipIndex.dtml b/src/plone/folder/dtml/addGopipIndex.dtml\nnew file mode 100644\nindex 0000000..154f03d\n--- /dev/null\n+++ b/src/plone/folder/dtml/addGopipIndex.dtml\n@@ -0,0 +1,44 @@\n+<dtml-var manage_page_header>\n+<dtml-var "manage_form_title(this(), _, form_title=\'Add GopipIndex\')">\n+\n+<p class="form-help">\n+  A <em>GopipIndex</em> fakes the formerly used "getObjPositionInParent" index\n+  by retrieving the necessary information directly from the search results\'\n+  containers.  It works as a drop-in replacement and makes expensive indexing\n+  of each item\'s position unnecessary.\n+</p>\n+\n+<form action="manage_addGopipIndex" method="post" enctype="multipart/form-data">\n+  <table cellspacing="0" cellpadding="2" border="0">\n+    <tr>\n+      <td align="left" valign="top">\n+        <div class="form-label">\n+          Id\n+        </div>\n+      </td>\n+      <td align="left" valign="top">\n+        <input type="text" name="identifier" size="40">\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left" valign="top">\n+        <div class="form-optional">\n+          Type\n+        </div>\n+      </td>\n+      <td align="left" valign="top">\n+        GopipIndex\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left" valign="top"></td>\n+      <td align="left" valign="top">\n+        <div class="form-element">\n+          <input class="form-element" type="submit" name="submit" value=" Add ">\n+        </div>\n+      </td>\n+    </tr>\n+  </table>\n+</form>\n+\n+<dtml-var manage_page_footer>\ndiff --git a/src/plone/folder/nogopip.py b/src/plone/folder/nogopip.py\nnew file mode 100644\nindex 0000000..6affabf\n--- /dev/null\n+++ b/src/plone/folder/nogopip.py\n@@ -0,0 +1,123 @@\n+# -*- coding: utf-8 -*-\n+from Acquisition import aq_base\n+from App.special_dtml import DTMLFile\n+from OFS.SimpleItem import SimpleItem\n+from Products.CMFCore.interfaces import ISiteRoot\n+from Products.PluginIndexes.interfaces import IPluggableIndex, ISortIndex\n+from inspect import currentframe\n+from logging import getLogger\n+from zope.component import getUtility\n+from zope.interface import implementer\n+\n+logger = getLogger(__name__)\n+\n+\n+@implementer(IPluggableIndex)\n+class StubIndex(SimpleItem):\n+    """ stub catalog index doing nothing """\n+\n+    def __init__(self, id, *args, **kw):\n+        self.id = id\n+\n+    def getId(self):\n+        return self.id\n+\n+    def getEntryForObject(self, *args, **kw):\n+        return []\n+\n+    def getIndexSourceNames(self):\n+        return [self.id]\n+\n+    def index_object(self, *args, **kw):\n+        return 0\n+\n+    def unindex_object(self, *args, **kw):\n+        pass\n+\n+    def _apply_index(self, *args, **kw):\n+        return None\n+\n+    def numObjects(self):\n+        return 0\n+\n+    def clear(self):\n+        pass\n+\n+\n+@implementer(ISortIndex)\n+class GopipIndex(StubIndex):\n+    """ fake index for sorting against `getObjPositionInParent` """\n+\n+    meta_type = \'GopipIndex\'\n+    manage_options = dict(label=\'Settings\', action=\'manage_main\'),\n+\n+    keyForDocument = 42\n+\n+    def __init__(self, id, extra=None, caller=None):\n+        super(GopipIndex, self).__init__(id)\n+        self.catalog = aq_base(caller._catalog)\n+\n+    def __len__(self):\n+        # with python 2.4 returning `sys.maxint` gives:\n+        # OverflowError: __len__() should return 0 <= outcome < 2**31\n+        # so...\n+        return 2**31 - 1\n+\n+    def documentToKeyMap(self):\n+        # we need to get the containers in order to get the respective\n+        # positions of the search results, but before that we need those\n+        # results themselves.  luckily this is only ever called from\n+        # `sortResults`, so we can get it form there.  oh, and lurker\n+        # says this won\'t work in jython, though! :)\n+        rs = currentframe().f_back.f_locals[\'rs\']\n+        rids = {}\n+        items = []\n+        containers = {}\n+        getpath = self.catalog.paths.get\n+        traverse = getUtility(ISiteRoot).unrestrictedTraverse\n+        for rid in rs:\n+            path = getpath(rid)\n+            parent, id = path.rsplit(\'/\', 1)\n+            container = containers.get(parent)\n+            if container is None:\n+                containers[parent] = container = traverse(parent)\n+            rids[id] = rid              # remember in case of single folder\n+            items.append((rid, container, id))  # or else for deferred lookup\n+        pos = {}\n+        if len(containers) == 1:\n+            # the usual "all from one folder" case can be optimized\n+            folder = list(containers.values())[0]\n+            if getattr(aq_base(folder), \'getOrdering\', None):\n+                ids = folder.getOrdering().idsInOrder()\n+            else:\n+                # site root or old folders\n+                ids = folder.objectIds()\n+            for idx, id in enumerate(ids):\n+                rid = rids.get(id)\n+                if rid:\n+                    pos[rid] = idx\n+            return pos\n+        else:\n+            # otherwise the entire map needs to be constructed...\n+            for rid, container, id in items:\n+                if getattr(aq_base(container), \'getObjectPosition\', None):\n+                    pos[rid] = container.getObjectPosition(id)\n+                else:\n+                    # fallback for unordered folders\n+                    pos[rid] = 0\n+            return pos\n+\n+\n+manage_addGopipForm = DTMLFile(\'dtml/addGopipIndex\', globals())\n+\n+\n+def manage_addGopipIndex(self, identifier, REQUEST=None, RESPONSE=None,\n+    URL3=None):\n+    """ add a fake gopip index """\n+    return self.manage_addIndex(\n+        identifier,\n+        \'GopipIndex\',\n+        REQUEST=REQUEST,\n+        RESPONSE=RESPONSE,\n+        URL1=URL3\n+    )\n'

