Repository: plone.api


Branch: refs/heads/master
Date: 2020-02-14T00:47:05+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/fdd157eca143e2ad2e180dd3c4f6d4a55fd197d5

In tests, use stronger password.

Otherwise the tests in test_env.py fail during setup when the January 2020 hotfix is merged to CMFPlone.
The password strength is tested in more places then.

Files changed:
A 3021.bugfix
M src/plone/api/tests/test_env.py

b"diff --git a/3021.bugfix b/3021.bugfix\nnew file mode 100644\nindex 0000000..68f5946\n--- /dev/null\n+++ b/3021.bugfix\n@@ -0,0 +1 @@\n+In tests, use stronger password.  [maurits]\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 49d5cc9..db1f2dd 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -92,7 +92,7 @@ def setUp(self):\n         api.user.create(\n             username='boss',\n             email='important_person@example.com',\n-            password='123',\n+            password='123456',\n             roles=('Member', 'VIP'),\n         )\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2020-02-14T00:53:24+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/83655ed6cc7f1510dbacab79d02bdb9202417b26

Travis: do not start xvfb.

We have no robot browser tests, so setting up X Windows is useless.
Travis failed immediately because of this.

Files changed:
M .travis.yml

b'diff --git a/.travis.yml b/.travis.yml\nindex 7195292..e84bae6 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -32,10 +32,6 @@ before_install:\n install:\n   - travis_retry pip install -U setuptools==33.1.1 tox coveralls coverage\n \n-before_script:\n-  - export DISPLAY=:99.0\n-  - sh -e /etc/init.d/xvfb start\n-\n script:\n     - travis_retry tox\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2020-02-14T08:55:35+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/e420eaa664810e9734f6a4cb8ab149af47baf7a8

Removed inline doctest for content.find that was not tested.

Well, it was tested by 'tox -e docs' and that completely failed.
The function is tested just fine in content.rst.
Fixes https://github.com/plone/plone.api/issues/437

Files changed:
M src/plone/api/content.py

b'diff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 9931599..a5706dc 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -619,55 +619,6 @@ def find(context=None, depth=None, **kwargs):\n     :rtype: List\n     :Example: :ref:`content_find_example`\n \n-    Find works alike catalog(). Indexes are passing in as arguments with the\n-    search query as the values.\n-\n-    Specify indexes as arguments:\n-    >>> find(portal_type=\'Document\')\n-\n-    or combinations of indexes.\n-    >>> find(portal_type=\'Document\', SearchableText=\'Team\')\n-\n-\n-    Differences to using the catalog directly are:\n-\n-    The context argument allows passing in an context object, instead\n-    of path=\'/\'.join(context.getPhysicalPath().\n-\n-    >>> find(context=context)\n-    - or -\n-    >>> find(context=context, portal_type=\'Document\')\n-\n-    Specifing the search depth is supported using the `depth` argument.\n-    >>> find(depth=1)\n-\n-    Using `depth` needs a context for it\'s path. If no context and no\n-    path is passed, the portal root is used.\n-    >>> find(context=portal, depth=1, portal_type=\'Document\')\n-    - or -\n-    >>> find(depth=1, path=\'/plone/folder\', portal_type=\'Document\')\n-    - or -\n-    >>> find(depth=1, portal_type=\'Document\')\n-\n-    The path can be queried directly, too:\n-    >>> find(path={\'query\': \'/plone/about/team\', \'depth\': 1})\n-\n-    The `object_provides` index/argument allows Interface objects as well as\n-    identifiers. It also supports querying multiple interfaces combined with\n-    `and` or `or`.\n-    >>> find(object_provides=IATDocument)\n-    - or -\n-    >>> find(object_provides=IATDocument.__identifier__)\n-    - or -\n-    >>> find(object_provides={\n-    ...     \'query\': [IATFolder, INavigationRoot],\n-    ...     \'operator\': \'and\',\n-    ... })\n-\n-\n-    An empty resultset is returned if no valid indexes are queried.\n-    >>> len(find())\n-    >>> 0\n     """\n     query = {}\n     query.update(**kwargs)\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2020-02-14T08:57:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/675d5e718becf005c353cce021302be3875738e4

Added news snippets.

Files changed:
A news/436.bugfix
A news/437.bugfix

b'diff --git a/news/436.bugfix b/news/436.bugfix\nnew file mode 100644\nindex 0000000..101a1e8\n--- /dev/null\n+++ b/news/436.bugfix\n@@ -0,0 +1,2 @@\n+In tests, use stronger password.\n+[maurits]\ndiff --git a/news/437.bugfix b/news/437.bugfix\nnew file mode 100644\nindex 0000000..93ca415\n--- /dev/null\n+++ b/news/437.bugfix\n@@ -0,0 +1,2 @@\n+Removed duplicate and failing inline doctest for content.find.\n+[maurits]\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2020-02-14T11:23:28+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/693c2afedc1288f4e7c8441da5e7eb468a56f83d

Oops, put news snippet in right place.

Files changed:
A news/3021.bugfix
D 3021.bugfix

b'diff --git a/3021.bugfix b/news/3021.bugfix\nsimilarity index 100%\nrename from 3021.bugfix\nrename to news/3021.bugfix\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2020-02-18T16:40:59+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.api/commit/d5c08ae873f6b1080b1f78d0270e12b21bd38260

Merge pull request #436 from plone/maurits-password-strength-fixes

In tests, use stronger password.

Files changed:
A news/3021.bugfix
A news/436.bugfix
A news/437.bugfix
M .travis.yml
M src/plone/api/content.py
M src/plone/api/tests/test_env.py

b'diff --git a/.travis.yml b/.travis.yml\nindex 7195292..e84bae6 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -32,10 +32,6 @@ before_install:\n install:\n   - travis_retry pip install -U setuptools==33.1.1 tox coveralls coverage\n \n-before_script:\n-  - export DISPLAY=:99.0\n-  - sh -e /etc/init.d/xvfb start\n-\n script:\n     - travis_retry tox\n \ndiff --git a/news/3021.bugfix b/news/3021.bugfix\nnew file mode 100644\nindex 0000000..68f5946\n--- /dev/null\n+++ b/news/3021.bugfix\n@@ -0,0 +1 @@\n+In tests, use stronger password.  [maurits]\ndiff --git a/news/436.bugfix b/news/436.bugfix\nnew file mode 100644\nindex 0000000..101a1e8\n--- /dev/null\n+++ b/news/436.bugfix\n@@ -0,0 +1,2 @@\n+In tests, use stronger password.\n+[maurits]\ndiff --git a/news/437.bugfix b/news/437.bugfix\nnew file mode 100644\nindex 0000000..93ca415\n--- /dev/null\n+++ b/news/437.bugfix\n@@ -0,0 +1,2 @@\n+Removed duplicate and failing inline doctest for content.find.\n+[maurits]\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 9931599..a5706dc 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -619,55 +619,6 @@ def find(context=None, depth=None, **kwargs):\n     :rtype: List\n     :Example: :ref:`content_find_example`\n \n-    Find works alike catalog(). Indexes are passing in as arguments with the\n-    search query as the values.\n-\n-    Specify indexes as arguments:\n-    >>> find(portal_type=\'Document\')\n-\n-    or combinations of indexes.\n-    >>> find(portal_type=\'Document\', SearchableText=\'Team\')\n-\n-\n-    Differences to using the catalog directly are:\n-\n-    The context argument allows passing in an context object, instead\n-    of path=\'/\'.join(context.getPhysicalPath().\n-\n-    >>> find(context=context)\n-    - or -\n-    >>> find(context=context, portal_type=\'Document\')\n-\n-    Specifing the search depth is supported using the `depth` argument.\n-    >>> find(depth=1)\n-\n-    Using `depth` needs a context for it\'s path. If no context and no\n-    path is passed, the portal root is used.\n-    >>> find(context=portal, depth=1, portal_type=\'Document\')\n-    - or -\n-    >>> find(depth=1, path=\'/plone/folder\', portal_type=\'Document\')\n-    - or -\n-    >>> find(depth=1, portal_type=\'Document\')\n-\n-    The path can be queried directly, too:\n-    >>> find(path={\'query\': \'/plone/about/team\', \'depth\': 1})\n-\n-    The `object_provides` index/argument allows Interface objects as well as\n-    identifiers. It also supports querying multiple interfaces combined with\n-    `and` or `or`.\n-    >>> find(object_provides=IATDocument)\n-    - or -\n-    >>> find(object_provides=IATDocument.__identifier__)\n-    - or -\n-    >>> find(object_provides={\n-    ...     \'query\': [IATFolder, INavigationRoot],\n-    ...     \'operator\': \'and\',\n-    ... })\n-\n-\n-    An empty resultset is returned if no valid indexes are queried.\n-    >>> len(find())\n-    >>> 0\n     """\n     query = {}\n     query.update(**kwargs)\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 49d5cc9..db1f2dd 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -92,7 +92,7 @@ def setUp(self):\n         api.user.create(\n             username=\'boss\',\n             email=\'important_person@example.com\',\n-            password=\'123\',\n+            password=\'123456\',\n             roles=(\'Member\', \'VIP\'),\n         )\n \n'

