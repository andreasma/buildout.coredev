Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2018-10-20T00:38:18+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.PortalTransforms/commit/e1682c7106c1d04ed06938d679d9be9e30406d5f

Fix transform output type

It should be usually a native string, except when we deal with
transforms that return images and files

Fixes #37

Files changed:
A news/37.bugfix
M Products/PortalTransforms/TransformEngine.py
M Products/PortalTransforms/data.py
M Products/PortalTransforms/interfaces.py
M Products/PortalTransforms/libtransforms/retransform.py
M Products/PortalTransforms/libtransforms/utils.py
M Products/PortalTransforms/setuphandlers.py
M Products/PortalTransforms/tests/base.py
M Products/PortalTransforms/tests/test_transforms.py
M Products/PortalTransforms/tests/utils.py
M Products/PortalTransforms/transforms/markdown_to_html.py
M Products/PortalTransforms/transforms/python.py
M Products/PortalTransforms/transforms/text_to_html.py
M Products/PortalTransforms/unsafe_transforms/xml.py
M Products/PortalTransforms/utils.py

b'diff --git a/Products/PortalTransforms/TransformEngine.py b/Products/PortalTransforms/TransformEngine.py\nindex 40a8b7e..db47feb 100644\n--- a/Products/PortalTransforms/TransformEngine.py\n+++ b/Products/PortalTransforms/TransformEngine.py\n@@ -84,7 +84,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,\n                   usedby=None, context=None, **kwargs):\n         """Convert orig to a given mimetype\n \n-        * orig is an encoded string\n+        * orig is a native string\n \n         * data an optional IDataStream object. If None a new datastream will be\n         created and returned\ndiff --git a/Products/PortalTransforms/data.py b/Products/PortalTransforms/data.py\nindex 39c21ae..f964717 100644\n--- a/Products/PortalTransforms/data.py\n+++ b/Products/PortalTransforms/data.py\n@@ -24,11 +24,13 @@ def name(self):\n         return self.__name__\n \n     def setData(self, value):\n-        """set the main data produced by a transform, i.e. usually a string"""\n+        """set the main data produced by a transform,\n+        i.e. usually a native string"""\n         self._data = value\n \n     def getData(self):\n-        """provide access to the transformed data object, i.e. usually a string\n+        """provide access to the transformed data object,\n+        i.e. usually a native string\n         This data may references subobjects.\n         """\n         if callable(self._data):\ndiff --git a/Products/PortalTransforms/interfaces.py b/Products/PortalTransforms/interfaces.py\nindex 42d4c58..fd8f7d2 100644\n--- a/Products/PortalTransforms/interfaces.py\n+++ b/Products/PortalTransforms/interfaces.py\n@@ -9,10 +9,12 @@ class IDataStream(Interface):\n     """data stream, is the result of a transform"""\n \n     def setData(value):\n-        """set the main data produced by a transform, i.e. usually a string"""\n+        """set the main data produced by a transform,\n+        i.e. usually a native string"""\n \n     def getData():\n-        """provide access to the transformed data object, i.e. usually a string\n+        """provide access to the transformed data object,\n+        i.e. usually a native string\n         This data may references subobjects.\n         """\n \n@@ -87,7 +89,7 @@ def convertTo(mimetype, orig, data=None, object=None, context=None,\n                   **kwargs):\n         """Convert orig to a given mimetype\n \n-        * orig is an encoded string\n+        * orig is a native string\n \n         * data an optional idatastream object. If None a new datastream will be\n         created and returned\n@@ -121,6 +123,7 @@ def __call__(name, orig, data=None, context=None, **kwargs):\n         see convert docstring for more info on additional arguments.\n         """\n \n+\n # BBB\n idatastream = IDataStream\n ichain = IChain\ndiff --git a/Products/PortalTransforms/libtransforms/retransform.py b/Products/PortalTransforms/libtransforms/retransform.py\nindex aae9eba..d2ac55f 100644\n--- a/Products/PortalTransforms/libtransforms/retransform.py\n+++ b/Products/PortalTransforms/libtransforms/retransform.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n+from Products.PortalTransforms.utils import safe_nativestring\n from Products.PortalTransforms.interfaces import ITransform\n from zope.interface import implementer\n \n@@ -26,7 +26,7 @@ def addRegex(self, pat, repl):\n         self.regexes.append((r, repl))\n \n     def convert(self, orig, data, **kwargs):\n-        orig = safe_unicode(orig)\n+        orig = safe_nativestring(orig)\n         for r, repl in self.regexes:\n             orig = r.sub(repl, orig)\n         data.setData(orig)\ndiff --git a/Products/PortalTransforms/libtransforms/utils.py b/Products/PortalTransforms/libtransforms/utils.py\nindex 8272130..75879d1 100644\n--- a/Products/PortalTransforms/libtransforms/utils.py\n+++ b/Products/PortalTransforms/libtransforms/utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.utils import log\n+from Products.PortalTransforms.utils import safe_nativestring\n \n import os\n import sys\n@@ -79,7 +79,7 @@ def bodyfinder(text):\n     Always use html_headcheck() first.\n     Accepts bytes or text. Returns text.\n     """\n-    text = safe_unicode(text)\n+    text = safe_nativestring(text)\n     lowertext = text.lower()\n     bodystart = lowertext.find(\'<body\')\n     if bodystart == -1:\ndiff --git a/Products/PortalTransforms/setuphandlers.py b/Products/PortalTransforms/setuphandlers.py\nindex 02b9e2d..9566c34 100644\n--- a/Products/PortalTransforms/setuphandlers.py\n+++ b/Products/PortalTransforms/setuphandlers.py\n@@ -3,8 +3,7 @@\n """\n from __future__ import print_function\n from Products.CMFCore.utils import getToolByName\n-\n-from six import StringIO\n+from six import StringIO as NativeStringIO\n \n \n def correctMapping(out, portal):\n@@ -53,7 +52,7 @@ def updateTransform(out, portal, transform_id):\n \n \n def installPortalTransforms(portal):\n-    out = StringIO()\n+    out = NativeStringIO()\n \n     updateTransform(out, portal, \'safe_html\')\n     updateTransform(out, portal, \'markdown_to_html\')\ndiff --git a/Products/PortalTransforms/tests/base.py b/Products/PortalTransforms/tests/base.py\nindex af30eb7..9506543 100644\n--- a/Products/PortalTransforms/tests/base.py\n+++ b/Products/PortalTransforms/tests/base.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n import unittest\n \n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.testing import PRODUCTS_PORTALTRANSFORMS_INTEGRATION_TESTING  # noqa\n \n \n@@ -9,14 +8,8 @@ class TransformTestCase(unittest.TestCase):\n \n     layer = PRODUCTS_PORTALTRANSFORMS_INTEGRATION_TESTING\n \n+    allowed_types = str\n+\n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n         self.transforms = self.portal.portal_transforms\n-\n-    def _baseAssertEqual(self, first, second, msg=None):\n-        return unittest.TestCase._baseAssertEqual(\n-            self, safe_unicode(first), safe_unicode(second), msg)\n-\n-    def assertMultiLineEqual(self, first, second, msg=None):\n-        return unittest.TestCase.assertMultiLineEqual(\n-            self, safe_unicode(first), safe_unicode(second), msg)\ndiff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py\nindex 7cbfed0..5239609 100644\n--- a/Products/PortalTransforms/tests/test_transforms.py\n+++ b/Products/PortalTransforms/tests/test_transforms.py\n@@ -2,7 +2,6 @@\n from __future__ import print_function\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IFilterSchema\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.data import datastream\n from Products.PortalTransforms.interfaces import IDataStream\n from Products.PortalTransforms.libtransforms.utils import MissingBinary\n@@ -41,6 +40,8 @@\n \n class TransformTest(TransformTestCase):\n \n+    allowed_types = str\n+\n     def setUp(self):\n         super(TransformTest, self).setUp()\n         self.request = self.layer[\'request\']\n@@ -64,23 +65,21 @@ def do_convert(self, filename=None):\n         res_data = self.transform.convert(orig, data, filename=filename)\n         self.assertTrue(IDataStream.providedBy(res_data))\n         got = res_data.getData()\n-        expected = \'\'\n+\n+        self.assertIsInstance(got, self.allowed_types)\n         try:\n-            expected = read_file_data(self.output, \'rb\')\n+            expected = read_file_data(self.output)\n         except IOError:\n+            expected = \'\'\n             import sys\n             print(\'No output file found.\', file=sys.stderr)\n             print(\n                 \'File {0} created, check it !\'.format(self.output),\n                 file=sys.stderr)\n-            with open(output, \'wb\') as fd:\n+            with open(output, \'w\') as fd:\n                 fd.write(got)\n             self.assertTrue(0)\n \n-        if six.PY3 and isinstance(expected, six.binary_type):\n-            got = safe_unicode(got)\n-            expected = safe_unicode(expected)\n-\n         if self.normalize is not None:\n             got = self.normalize(got)\n             expected = self.normalize(expected)\n@@ -197,38 +196,50 @@ def test_kill_nasty_tags_which_are_not_valid(self):\n         orig = \'<p><script>foo</script></p>\'\n         data_out = \'<p/>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n         self.assertTrue(\'h1\' in self.settings.nasty_tags)\n         self.assertFalse(\'h1\' in self.settings.valid_tags)\n         orig = \'<p><h1>foo</h1></p>\'\n         data_out = \'<p/>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n     def test_entityiref_attributes(self):\n         orig = \'<a href="&uuml;">foo</a>\'\n         data_out = \'<a href="&#xFC;">foo</a>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n     def test_charref_attributes(self):\n         orig = \'<a href="&#0109;">foo</a>\'\n         data_out = \'<a href="m">foo</a>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n     def test_entityiref_data(self):\n         orig = \'<p>foo &uuml; bar</p>\'\n         data_out = \'<p>foo {} bar</p>\'.format(html5entity(\'uuml;\'))\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n     def test_charref_data(self):\n         orig = \'<p>bar &#0109; foo</p>\'\n         data_out = \'<p>bar m foo</p>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n \n class SafeHtmlTransformsWithScriptTest(TransformTestCase):\n@@ -250,7 +261,9 @@ def test_entities_outside_script(self):\n         orig = "<code>a > 0 && b < 1</code>"\n         escaped = \'<code>a &gt; 0 &amp;&amp; b &lt; 1</code>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), escaped)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, escaped)\n \n     def test_script_and_entities_and_unicode(self):\n         _all = (\n@@ -274,8 +287,10 @@ def test_script_and_entities_and_unicode(self):\n                 target_mimetype=\'text/x-html-safe\',\n                 orig=orig\n             )\n+            got = data.getData()\n+            self.assertIsInstance(got, self.allowed_types)\n             self.assertEqual(\n-                unescape(data.getData()),\n+                unescape(got),\n                 orig.replace(\'&nbsp;\', nbsp))\n \n     def test_script_with_all_entities_and_unicode(self):\n@@ -303,8 +318,9 @@ def test_script_with_all_entities_and_unicode(self):\n                 target_mimetype=\'text/x-html-safe\',\n                 orig=orig\n             )\n-\n-            self.assertEqual(unescape(data.getData()), escaped)\n+            got = data.getData()\n+            self.assertIsInstance(got, self.allowed_types)\n+            self.assertEqual(unescape(got), escaped)\n \n \n class WordTransformsTest(TransformTestCase):\n@@ -348,58 +364,58 @@ def test_invalid_tags(self):\n \n TRANSFORMS_TESTINFO = (\n     (\'Products.PortalTransforms.transforms.pdf_to_html\',\n-     "demo1.pdf", "demo1.html", normalize_html, 0,\n+     "demo1.pdf", "demo1.html", normalize_html, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.word_to_html\',\n-     "test.doc", "test_word.html", normalize_html, 0,\n+     "test.doc", "test_word.html", normalize_html, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.lynx_dump\',\n-     "test_lynx.html", "test_lynx.txt", None, 0,\n+     "test_lynx.html", "test_lynx.txt", None, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.html_to_text\',\n-     "test_lynx.html", "test_html_to_text.txt", None, 0,\n+     "test_lynx.html", "test_html_to_text.txt", None, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.identity\',\n-     "rest1.rst", "rest1.rst", None, 0,\n+     "rest1.rst", "rest1.rst", None, 0, (six.binary_type, six.text_type),\n      ),\n     (\'Products.PortalTransforms.transforms.text_to_html\',\n-     "rest1.rst", "rest1.html", None, 0,\n+     "rest1.rst", "rest1.html", None, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.safe_html\',\n-     "test_safehtml.html", "test_safe.html", None, 0,\n+     "test_safehtml.html", "test_safe.html", None, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_bmp\',\n-     "logo.jpg", "logo.bmp", None, 0,\n+     "logo.jpg", "logo.bmp", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_gif\',\n-     "logo.bmp", "logo.gif", None, 0,\n+     "logo.bmp", "logo.gif", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_jpeg\',\n-     "logo.gif", "logo.jpg", None, 0,\n+     "logo.gif", "logo.jpg", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_png\',\n-     "logo.bmp", "logo.png", None, 0,\n+     "logo.bmp", "logo.png", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_ppm\',\n-     "logo.gif", "logo.ppm", None, 0,\n+     "logo.gif", "logo.ppm", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_tiff\',\n-     "logo.png", "logo.tiff", None, 0,\n+     "logo.png", "logo.tiff", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_pcx\',\n-     "logo.png", "logo.pcx", None, 0,\n+     "logo.png", "logo.pcx", None, 0, six.binary_type,\n      ),\n )\n if HAS_MARKDOWN:\n     TRANSFORMS_TESTINFO = TRANSFORMS_TESTINFO + (\n         (\'Products.PortalTransforms.transforms.markdown_to_html\',\n-         "markdown.txt", "markdown.html", None, 0,\n+         "markdown.txt", "markdown.html", None, 0, str,\n          ),\n     )\n if HAS_TEXTILE:\n     TRANSFORMS_TESTINFO = TRANSFORMS_TESTINFO + (\n         (\'Products.PortalTransforms.transforms.textile_to_html\',\n-         "input.textile", "textile.html", None, 0,\n+         "input.textile", "textile.html", None, 0, str,\n          ),\n     )\n \n@@ -408,7 +424,9 @@ def initialise(transform, normalize, pattern):\n     global TRANSFORMS_TESTINFO\n     for fname in matching_inputs(pattern):\n         outname = \'%s.out\' % fname.split(\'.\')[0]\n-        TRANSFORMS_TESTINFO += ((transform, fname, outname, normalize, 0),)\n+        TRANSFORMS_TESTINFO += (\n+            (transform, fname, outname, normalize, 0, str,),\n+        )\n \n \n # ReST test cases\n@@ -429,7 +447,14 @@ def make_tests(test_descr=TRANSFORMS_TESTINFO):\n     return the list of generated test classes\n     """\n     tests = []\n-    for _transform, tr_input, tr_output, _normalize, _subobjects in test_descr:\n+    for (\n+        _transform,\n+        tr_input,\n+        tr_output,\n+        _normalize,\n+        _subobjects,\n+        _allowed_types,\n+    ) in test_descr:\n         # load transform if necessary\n         if isinstance(_transform, type(\'\')):\n             try:\n@@ -447,6 +472,7 @@ def make_tests(test_descr=TRANSFORMS_TESTINFO):\n             continue\n \n         class TransformTestSubclass(TransformTest):\n+            allowed_types = _allowed_types\n             input = input_file_path(tr_input)\n             output = output_file_path(tr_output)\n             transform = _transform\ndiff --git a/Products/PortalTransforms/tests/utils.py b/Products/PortalTransforms/tests/utils.py\nindex 4d02b68..333a0be 100644\n--- a/Products/PortalTransforms/tests/utils.py\n+++ b/Products/PortalTransforms/tests/utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.transforms.safe_html import html5entities\n+from Products.PortalTransforms.utils import safe_nativestring\n from os.path import abspath\n from os.path import basename\n from os.path import dirname\n@@ -14,8 +14,7 @@\n \n \n def normalize_html(s):\n-    if six.PY3 and isinstance(s, six.binary_type):\n-        s = safe_unicode(s)\n+    s = safe_nativestring(s)\n     s = re.sub(r"&nbsp;", " ", s)\n     s = re.sub(r"&#160;", " ", s)\n     s = re.sub(r"\\s+", " ", s)\ndiff --git a/Products/PortalTransforms/transforms/markdown_to_html.py b/Products/PortalTransforms/transforms/markdown_to_html.py\nindex 7277367..0bac966 100644\n--- a/Products/PortalTransforms/transforms/markdown_to_html.py\n+++ b/Products/PortalTransforms/transforms/markdown_to_html.py\n@@ -5,14 +5,13 @@\n Author: Tom Lazar <tom@tomster.org> at the archipelago sprint 2006\n """\n \n+from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.interfaces import ITransform\n from Products.PortalTransforms.utils import log\n+from Products.PortalTransforms.utils import safe_nativestring\n from zope.interface import implementer\n \n \n-import six\n-\n-\n try:\n     import markdown as markdown_transformer\n except ImportError:\n@@ -58,15 +57,14 @@ def __getattr__(self, attr):\n     def convert(self, orig, data, **kwargs):\n         if HAS_MARKDOWN:\n             # markdown expects unicode input:\n-            orig = six.text_type(orig.decode(\'utf-8\'))\n-            # PortalTransforms, however expects a string as result,\n-            # so we encode the unicode result back to UTF8:\n-            html = markdown_transformer \\\n-                .markdown(orig, extensions=self.config.get(\'enabled_extensions\', [])) \\\n-                .encode(\'utf-8\')\n+            html = markdown_transformer.markdown(\n+                safe_unicode(orig),\n+                extensions=self.config.get(\'enabled_extensions\', [])\n+            )\n         else:\n             html = orig\n-        data.setData(html)\n+\n+        data.setData(safe_nativestring(html))\n         return data\n \n \ndiff --git a/Products/PortalTransforms/transforms/python.py b/Products/PortalTransforms/transforms/python.py\nindex 676403b..207dfa1 100644\n--- a/Products/PortalTransforms/transforms/python.py\n+++ b/Products/PortalTransforms/transforms/python.py\n@@ -16,8 +16,9 @@\n """\n \n from DocumentTemplate.DT_Util import html_quote\n+from io import BytesIO\n from Products.PortalTransforms.interfaces import ITransform\n-from six import BytesIO\n+from Products.PortalTransforms.utils import safe_nativestring\n from zope.interface import implementer\n \n import keyword\n@@ -71,7 +72,7 @@ def __call__(self):\n             self.out.write(b"<h5 class=\'error>\'ERROR: %s%s</h5>" % (\n                 msg, self.raw[self.lines[line]:]))\n         self.out.write(b\'\\n</pre>\\n\')\n-        return self.out.getvalue()\n+        return safe_nativestring(self.out.getvalue())\n \n     def format_tokenizer(self, toktype, toktext, sx, ex, line):\n         """ Token handler.\ndiff --git a/Products/PortalTransforms/transforms/text_to_html.py b/Products/PortalTransforms/transforms/text_to_html.py\nindex 97135ba..8528836 100644\n--- a/Products/PortalTransforms/transforms/text_to_html.py\n+++ b/Products/PortalTransforms/transforms/text_to_html.py\n@@ -1,9 +1,7 @@\n # -*- coding: utf-8 -*-\n-import six\n-\n from DocumentTemplate.DT_Util import html_quote\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.interfaces import ITransform\n+from Products.PortalTransforms.utils import safe_nativestring\n from zope.interface import implementer\n \n \n@@ -36,9 +34,7 @@ def __getattr__(self, attr):\n         raise AttributeError(attr)\n \n     def convert(self, orig, data, **kwargs):\n-        orig = safe_unicode(orig)\n-        if six.PY2:\n-            orig = orig.encode(kwargs.get(\'encoding\', \'utf-8\'))\n+        orig = safe_nativestring(orig)\n         # Replaces all line breaks with a br tag, and wraps it in a p tag.\n         data.setData(\'<p>%s</p>\' %\n                      html_quote(orig.strip()).replace(\'\\n\', \'<br />\'))\ndiff --git a/Products/PortalTransforms/unsafe_transforms/xml.py b/Products/PortalTransforms/unsafe_transforms/xml.py\nindex 3679c80..9352cc7 100644\n--- a/Products/PortalTransforms/unsafe_transforms/xml.py\n+++ b/Products/PortalTransforms/unsafe_transforms/xml.py\n@@ -17,7 +17,7 @@\n import re\n \n \n-from six.moves import cStringIO as StringIO\n+from six import StringIO as NativeStringIO\n \n \n @implementer(ITransform)\n@@ -154,7 +154,7 @@ def get_doctype(data):\n     """ return the public id for the doctype given some raw xml data\n     """\n     if not hasattr(data, \'readlines\'):\n-        data = StringIO(data)\n+        data = NativeStringIO(data)\n     for line in data.readlines():\n         line = line.strip()\n         if not line:\n@@ -172,7 +172,7 @@ def get_dtd(data):\n     """ return the public id for the doctype given some raw xml data\n     """\n     if not hasattr(data, \'readlines\'):\n-        data = StringIO(data)\n+        data = NativeStringIO(data)\n     for line in data.readlines():\n         line = line.strip()\n         if not line:\ndiff --git a/Products/PortalTransforms/utils.py b/Products/PortalTransforms/utils.py\nindex a993959..a0fc8c0 100644\n--- a/Products/PortalTransforms/utils.py\n+++ b/Products/PortalTransforms/utils.py\n@@ -3,11 +3,29 @@\n # directory where template for the ZMI are located\n import logging\n import os.path\n+import six\n+\n+try:\n+    from Products.CMFPlone.utils import safe_nativestring\n+except ImportError:\n+    # Not needed for Products.CMFPlone >= 5.2a1\n+    from Products.CMFPlone.utils import safe_encode\n+    from Products.CMFPlone.utils import safe_unicode\n+\n+    def safe_nativestring(value, encoding=\'utf-8\'):\n+        """Convert a value to str in py2 and to text in py3\n+        """\n+        if six.PY2 and isinstance(value, six.text_type):\n+            value = safe_encode(value, encoding)\n+        if not six.PY2 and isinstance(value, six.binary_type):\n+            value = safe_unicode(value, encoding)\n+        return value\n \n \n class TransformException(Exception):\n     pass\n \n+\n FB_REGISTRY = None\n \n # logging function\n@@ -17,6 +35,7 @@ class TransformException(Exception):\n def log(message, severity=logging.DEBUG):\n     logger.log(severity, message)\n \n+\n _www = os.path.join(os.path.dirname(__file__), \'www\')\n \n \ndiff --git a/news/37.bugfix b/news/37.bugfix\nnew file mode 100644\nindex 0000000..93ddde2\n--- /dev/null\n+++ b/news/37.bugfix\n@@ -0,0 +1 @@\n+Some transform were returning unicode instead of strings in Python 2\n'

Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2018-10-20T08:01:31+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PortalTransforms/commit/b739daa3a34d2803e82db2baf2f2c8e9ca8374b7

Merge pull request #38 from plone/37-nativestring

Fix transform output type

Files changed:
A news/37.bugfix
M Products/PortalTransforms/TransformEngine.py
M Products/PortalTransforms/data.py
M Products/PortalTransforms/interfaces.py
M Products/PortalTransforms/libtransforms/retransform.py
M Products/PortalTransforms/libtransforms/utils.py
M Products/PortalTransforms/setuphandlers.py
M Products/PortalTransforms/tests/base.py
M Products/PortalTransforms/tests/test_transforms.py
M Products/PortalTransforms/tests/utils.py
M Products/PortalTransforms/transforms/markdown_to_html.py
M Products/PortalTransforms/transforms/python.py
M Products/PortalTransforms/transforms/text_to_html.py
M Products/PortalTransforms/unsafe_transforms/xml.py
M Products/PortalTransforms/utils.py

b'diff --git a/Products/PortalTransforms/TransformEngine.py b/Products/PortalTransforms/TransformEngine.py\nindex 40a8b7e..db47feb 100644\n--- a/Products/PortalTransforms/TransformEngine.py\n+++ b/Products/PortalTransforms/TransformEngine.py\n@@ -84,7 +84,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,\n                   usedby=None, context=None, **kwargs):\n         """Convert orig to a given mimetype\n \n-        * orig is an encoded string\n+        * orig is a native string\n \n         * data an optional IDataStream object. If None a new datastream will be\n         created and returned\ndiff --git a/Products/PortalTransforms/data.py b/Products/PortalTransforms/data.py\nindex 39c21ae..f964717 100644\n--- a/Products/PortalTransforms/data.py\n+++ b/Products/PortalTransforms/data.py\n@@ -24,11 +24,13 @@ def name(self):\n         return self.__name__\n \n     def setData(self, value):\n-        """set the main data produced by a transform, i.e. usually a string"""\n+        """set the main data produced by a transform,\n+        i.e. usually a native string"""\n         self._data = value\n \n     def getData(self):\n-        """provide access to the transformed data object, i.e. usually a string\n+        """provide access to the transformed data object,\n+        i.e. usually a native string\n         This data may references subobjects.\n         """\n         if callable(self._data):\ndiff --git a/Products/PortalTransforms/interfaces.py b/Products/PortalTransforms/interfaces.py\nindex 42d4c58..fd8f7d2 100644\n--- a/Products/PortalTransforms/interfaces.py\n+++ b/Products/PortalTransforms/interfaces.py\n@@ -9,10 +9,12 @@ class IDataStream(Interface):\n     """data stream, is the result of a transform"""\n \n     def setData(value):\n-        """set the main data produced by a transform, i.e. usually a string"""\n+        """set the main data produced by a transform,\n+        i.e. usually a native string"""\n \n     def getData():\n-        """provide access to the transformed data object, i.e. usually a string\n+        """provide access to the transformed data object,\n+        i.e. usually a native string\n         This data may references subobjects.\n         """\n \n@@ -87,7 +89,7 @@ def convertTo(mimetype, orig, data=None, object=None, context=None,\n                   **kwargs):\n         """Convert orig to a given mimetype\n \n-        * orig is an encoded string\n+        * orig is a native string\n \n         * data an optional idatastream object. If None a new datastream will be\n         created and returned\n@@ -121,6 +123,7 @@ def __call__(name, orig, data=None, context=None, **kwargs):\n         see convert docstring for more info on additional arguments.\n         """\n \n+\n # BBB\n idatastream = IDataStream\n ichain = IChain\ndiff --git a/Products/PortalTransforms/libtransforms/retransform.py b/Products/PortalTransforms/libtransforms/retransform.py\nindex aae9eba..d2ac55f 100644\n--- a/Products/PortalTransforms/libtransforms/retransform.py\n+++ b/Products/PortalTransforms/libtransforms/retransform.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n+from Products.PortalTransforms.utils import safe_nativestring\n from Products.PortalTransforms.interfaces import ITransform\n from zope.interface import implementer\n \n@@ -26,7 +26,7 @@ def addRegex(self, pat, repl):\n         self.regexes.append((r, repl))\n \n     def convert(self, orig, data, **kwargs):\n-        orig = safe_unicode(orig)\n+        orig = safe_nativestring(orig)\n         for r, repl in self.regexes:\n             orig = r.sub(repl, orig)\n         data.setData(orig)\ndiff --git a/Products/PortalTransforms/libtransforms/utils.py b/Products/PortalTransforms/libtransforms/utils.py\nindex 8272130..75879d1 100644\n--- a/Products/PortalTransforms/libtransforms/utils.py\n+++ b/Products/PortalTransforms/libtransforms/utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.utils import log\n+from Products.PortalTransforms.utils import safe_nativestring\n \n import os\n import sys\n@@ -79,7 +79,7 @@ def bodyfinder(text):\n     Always use html_headcheck() first.\n     Accepts bytes or text. Returns text.\n     """\n-    text = safe_unicode(text)\n+    text = safe_nativestring(text)\n     lowertext = text.lower()\n     bodystart = lowertext.find(\'<body\')\n     if bodystart == -1:\ndiff --git a/Products/PortalTransforms/setuphandlers.py b/Products/PortalTransforms/setuphandlers.py\nindex 02b9e2d..9566c34 100644\n--- a/Products/PortalTransforms/setuphandlers.py\n+++ b/Products/PortalTransforms/setuphandlers.py\n@@ -3,8 +3,7 @@\n """\n from __future__ import print_function\n from Products.CMFCore.utils import getToolByName\n-\n-from six import StringIO\n+from six import StringIO as NativeStringIO\n \n \n def correctMapping(out, portal):\n@@ -53,7 +52,7 @@ def updateTransform(out, portal, transform_id):\n \n \n def installPortalTransforms(portal):\n-    out = StringIO()\n+    out = NativeStringIO()\n \n     updateTransform(out, portal, \'safe_html\')\n     updateTransform(out, portal, \'markdown_to_html\')\ndiff --git a/Products/PortalTransforms/tests/base.py b/Products/PortalTransforms/tests/base.py\nindex af30eb7..9506543 100644\n--- a/Products/PortalTransforms/tests/base.py\n+++ b/Products/PortalTransforms/tests/base.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n import unittest\n \n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.testing import PRODUCTS_PORTALTRANSFORMS_INTEGRATION_TESTING  # noqa\n \n \n@@ -9,14 +8,8 @@ class TransformTestCase(unittest.TestCase):\n \n     layer = PRODUCTS_PORTALTRANSFORMS_INTEGRATION_TESTING\n \n+    allowed_types = str\n+\n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n         self.transforms = self.portal.portal_transforms\n-\n-    def _baseAssertEqual(self, first, second, msg=None):\n-        return unittest.TestCase._baseAssertEqual(\n-            self, safe_unicode(first), safe_unicode(second), msg)\n-\n-    def assertMultiLineEqual(self, first, second, msg=None):\n-        return unittest.TestCase.assertMultiLineEqual(\n-            self, safe_unicode(first), safe_unicode(second), msg)\ndiff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py\nindex 7cbfed0..5239609 100644\n--- a/Products/PortalTransforms/tests/test_transforms.py\n+++ b/Products/PortalTransforms/tests/test_transforms.py\n@@ -2,7 +2,6 @@\n from __future__ import print_function\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IFilterSchema\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.data import datastream\n from Products.PortalTransforms.interfaces import IDataStream\n from Products.PortalTransforms.libtransforms.utils import MissingBinary\n@@ -41,6 +40,8 @@\n \n class TransformTest(TransformTestCase):\n \n+    allowed_types = str\n+\n     def setUp(self):\n         super(TransformTest, self).setUp()\n         self.request = self.layer[\'request\']\n@@ -64,23 +65,21 @@ def do_convert(self, filename=None):\n         res_data = self.transform.convert(orig, data, filename=filename)\n         self.assertTrue(IDataStream.providedBy(res_data))\n         got = res_data.getData()\n-        expected = \'\'\n+\n+        self.assertIsInstance(got, self.allowed_types)\n         try:\n-            expected = read_file_data(self.output, \'rb\')\n+            expected = read_file_data(self.output)\n         except IOError:\n+            expected = \'\'\n             import sys\n             print(\'No output file found.\', file=sys.stderr)\n             print(\n                 \'File {0} created, check it !\'.format(self.output),\n                 file=sys.stderr)\n-            with open(output, \'wb\') as fd:\n+            with open(output, \'w\') as fd:\n                 fd.write(got)\n             self.assertTrue(0)\n \n-        if six.PY3 and isinstance(expected, six.binary_type):\n-            got = safe_unicode(got)\n-            expected = safe_unicode(expected)\n-\n         if self.normalize is not None:\n             got = self.normalize(got)\n             expected = self.normalize(expected)\n@@ -197,38 +196,50 @@ def test_kill_nasty_tags_which_are_not_valid(self):\n         orig = \'<p><script>foo</script></p>\'\n         data_out = \'<p/>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n         self.assertTrue(\'h1\' in self.settings.nasty_tags)\n         self.assertFalse(\'h1\' in self.settings.valid_tags)\n         orig = \'<p><h1>foo</h1></p>\'\n         data_out = \'<p/>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n     def test_entityiref_attributes(self):\n         orig = \'<a href="&uuml;">foo</a>\'\n         data_out = \'<a href="&#xFC;">foo</a>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n     def test_charref_attributes(self):\n         orig = \'<a href="&#0109;">foo</a>\'\n         data_out = \'<a href="m">foo</a>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n     def test_entityiref_data(self):\n         orig = \'<p>foo &uuml; bar</p>\'\n         data_out = \'<p>foo {} bar</p>\'.format(html5entity(\'uuml;\'))\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n     def test_charref_data(self):\n         orig = \'<p>bar &#0109; foo</p>\'\n         data_out = \'<p>bar m foo</p>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), data_out)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, data_out)\n \n \n class SafeHtmlTransformsWithScriptTest(TransformTestCase):\n@@ -250,7 +261,9 @@ def test_entities_outside_script(self):\n         orig = "<code>a > 0 && b < 1</code>"\n         escaped = \'<code>a &gt; 0 &amp;&amp; b &lt; 1</code>\'\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n-        self.assertEqual(data.getData(), escaped)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, escaped)\n \n     def test_script_and_entities_and_unicode(self):\n         _all = (\n@@ -274,8 +287,10 @@ def test_script_and_entities_and_unicode(self):\n                 target_mimetype=\'text/x-html-safe\',\n                 orig=orig\n             )\n+            got = data.getData()\n+            self.assertIsInstance(got, self.allowed_types)\n             self.assertEqual(\n-                unescape(data.getData()),\n+                unescape(got),\n                 orig.replace(\'&nbsp;\', nbsp))\n \n     def test_script_with_all_entities_and_unicode(self):\n@@ -303,8 +318,9 @@ def test_script_with_all_entities_and_unicode(self):\n                 target_mimetype=\'text/x-html-safe\',\n                 orig=orig\n             )\n-\n-            self.assertEqual(unescape(data.getData()), escaped)\n+            got = data.getData()\n+            self.assertIsInstance(got, self.allowed_types)\n+            self.assertEqual(unescape(got), escaped)\n \n \n class WordTransformsTest(TransformTestCase):\n@@ -348,58 +364,58 @@ def test_invalid_tags(self):\n \n TRANSFORMS_TESTINFO = (\n     (\'Products.PortalTransforms.transforms.pdf_to_html\',\n-     "demo1.pdf", "demo1.html", normalize_html, 0,\n+     "demo1.pdf", "demo1.html", normalize_html, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.word_to_html\',\n-     "test.doc", "test_word.html", normalize_html, 0,\n+     "test.doc", "test_word.html", normalize_html, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.lynx_dump\',\n-     "test_lynx.html", "test_lynx.txt", None, 0,\n+     "test_lynx.html", "test_lynx.txt", None, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.html_to_text\',\n-     "test_lynx.html", "test_html_to_text.txt", None, 0,\n+     "test_lynx.html", "test_html_to_text.txt", None, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.identity\',\n-     "rest1.rst", "rest1.rst", None, 0,\n+     "rest1.rst", "rest1.rst", None, 0, (six.binary_type, six.text_type),\n      ),\n     (\'Products.PortalTransforms.transforms.text_to_html\',\n-     "rest1.rst", "rest1.html", None, 0,\n+     "rest1.rst", "rest1.html", None, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.safe_html\',\n-     "test_safehtml.html", "test_safe.html", None, 0,\n+     "test_safehtml.html", "test_safe.html", None, 0, str,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_bmp\',\n-     "logo.jpg", "logo.bmp", None, 0,\n+     "logo.jpg", "logo.bmp", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_gif\',\n-     "logo.bmp", "logo.gif", None, 0,\n+     "logo.bmp", "logo.gif", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_jpeg\',\n-     "logo.gif", "logo.jpg", None, 0,\n+     "logo.gif", "logo.jpg", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_png\',\n-     "logo.bmp", "logo.png", None, 0,\n+     "logo.bmp", "logo.png", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_ppm\',\n-     "logo.gif", "logo.ppm", None, 0,\n+     "logo.gif", "logo.ppm", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_tiff\',\n-     "logo.png", "logo.tiff", None, 0,\n+     "logo.png", "logo.tiff", None, 0, six.binary_type,\n      ),\n     (\'Products.PortalTransforms.transforms.image_to_pcx\',\n-     "logo.png", "logo.pcx", None, 0,\n+     "logo.png", "logo.pcx", None, 0, six.binary_type,\n      ),\n )\n if HAS_MARKDOWN:\n     TRANSFORMS_TESTINFO = TRANSFORMS_TESTINFO + (\n         (\'Products.PortalTransforms.transforms.markdown_to_html\',\n-         "markdown.txt", "markdown.html", None, 0,\n+         "markdown.txt", "markdown.html", None, 0, str,\n          ),\n     )\n if HAS_TEXTILE:\n     TRANSFORMS_TESTINFO = TRANSFORMS_TESTINFO + (\n         (\'Products.PortalTransforms.transforms.textile_to_html\',\n-         "input.textile", "textile.html", None, 0,\n+         "input.textile", "textile.html", None, 0, str,\n          ),\n     )\n \n@@ -408,7 +424,9 @@ def initialise(transform, normalize, pattern):\n     global TRANSFORMS_TESTINFO\n     for fname in matching_inputs(pattern):\n         outname = \'%s.out\' % fname.split(\'.\')[0]\n-        TRANSFORMS_TESTINFO += ((transform, fname, outname, normalize, 0),)\n+        TRANSFORMS_TESTINFO += (\n+            (transform, fname, outname, normalize, 0, str,),\n+        )\n \n \n # ReST test cases\n@@ -429,7 +447,14 @@ def make_tests(test_descr=TRANSFORMS_TESTINFO):\n     return the list of generated test classes\n     """\n     tests = []\n-    for _transform, tr_input, tr_output, _normalize, _subobjects in test_descr:\n+    for (\n+        _transform,\n+        tr_input,\n+        tr_output,\n+        _normalize,\n+        _subobjects,\n+        _allowed_types,\n+    ) in test_descr:\n         # load transform if necessary\n         if isinstance(_transform, type(\'\')):\n             try:\n@@ -447,6 +472,7 @@ def make_tests(test_descr=TRANSFORMS_TESTINFO):\n             continue\n \n         class TransformTestSubclass(TransformTest):\n+            allowed_types = _allowed_types\n             input = input_file_path(tr_input)\n             output = output_file_path(tr_output)\n             transform = _transform\ndiff --git a/Products/PortalTransforms/tests/utils.py b/Products/PortalTransforms/tests/utils.py\nindex 4d02b68..333a0be 100644\n--- a/Products/PortalTransforms/tests/utils.py\n+++ b/Products/PortalTransforms/tests/utils.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.transforms.safe_html import html5entities\n+from Products.PortalTransforms.utils import safe_nativestring\n from os.path import abspath\n from os.path import basename\n from os.path import dirname\n@@ -14,8 +14,7 @@\n \n \n def normalize_html(s):\n-    if six.PY3 and isinstance(s, six.binary_type):\n-        s = safe_unicode(s)\n+    s = safe_nativestring(s)\n     s = re.sub(r"&nbsp;", " ", s)\n     s = re.sub(r"&#160;", " ", s)\n     s = re.sub(r"\\s+", " ", s)\ndiff --git a/Products/PortalTransforms/transforms/markdown_to_html.py b/Products/PortalTransforms/transforms/markdown_to_html.py\nindex 7277367..0bac966 100644\n--- a/Products/PortalTransforms/transforms/markdown_to_html.py\n+++ b/Products/PortalTransforms/transforms/markdown_to_html.py\n@@ -5,14 +5,13 @@\n Author: Tom Lazar <tom@tomster.org> at the archipelago sprint 2006\n """\n \n+from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.interfaces import ITransform\n from Products.PortalTransforms.utils import log\n+from Products.PortalTransforms.utils import safe_nativestring\n from zope.interface import implementer\n \n \n-import six\n-\n-\n try:\n     import markdown as markdown_transformer\n except ImportError:\n@@ -58,15 +57,14 @@ def __getattr__(self, attr):\n     def convert(self, orig, data, **kwargs):\n         if HAS_MARKDOWN:\n             # markdown expects unicode input:\n-            orig = six.text_type(orig.decode(\'utf-8\'))\n-            # PortalTransforms, however expects a string as result,\n-            # so we encode the unicode result back to UTF8:\n-            html = markdown_transformer \\\n-                .markdown(orig, extensions=self.config.get(\'enabled_extensions\', [])) \\\n-                .encode(\'utf-8\')\n+            html = markdown_transformer.markdown(\n+                safe_unicode(orig),\n+                extensions=self.config.get(\'enabled_extensions\', [])\n+            )\n         else:\n             html = orig\n-        data.setData(html)\n+\n+        data.setData(safe_nativestring(html))\n         return data\n \n \ndiff --git a/Products/PortalTransforms/transforms/python.py b/Products/PortalTransforms/transforms/python.py\nindex 676403b..207dfa1 100644\n--- a/Products/PortalTransforms/transforms/python.py\n+++ b/Products/PortalTransforms/transforms/python.py\n@@ -16,8 +16,9 @@\n """\n \n from DocumentTemplate.DT_Util import html_quote\n+from io import BytesIO\n from Products.PortalTransforms.interfaces import ITransform\n-from six import BytesIO\n+from Products.PortalTransforms.utils import safe_nativestring\n from zope.interface import implementer\n \n import keyword\n@@ -71,7 +72,7 @@ def __call__(self):\n             self.out.write(b"<h5 class=\'error>\'ERROR: %s%s</h5>" % (\n                 msg, self.raw[self.lines[line]:]))\n         self.out.write(b\'\\n</pre>\\n\')\n-        return self.out.getvalue()\n+        return safe_nativestring(self.out.getvalue())\n \n     def format_tokenizer(self, toktype, toktext, sx, ex, line):\n         """ Token handler.\ndiff --git a/Products/PortalTransforms/transforms/text_to_html.py b/Products/PortalTransforms/transforms/text_to_html.py\nindex 97135ba..8528836 100644\n--- a/Products/PortalTransforms/transforms/text_to_html.py\n+++ b/Products/PortalTransforms/transforms/text_to_html.py\n@@ -1,9 +1,7 @@\n # -*- coding: utf-8 -*-\n-import six\n-\n from DocumentTemplate.DT_Util import html_quote\n-from Products.CMFPlone.utils import safe_unicode\n from Products.PortalTransforms.interfaces import ITransform\n+from Products.PortalTransforms.utils import safe_nativestring\n from zope.interface import implementer\n \n \n@@ -36,9 +34,7 @@ def __getattr__(self, attr):\n         raise AttributeError(attr)\n \n     def convert(self, orig, data, **kwargs):\n-        orig = safe_unicode(orig)\n-        if six.PY2:\n-            orig = orig.encode(kwargs.get(\'encoding\', \'utf-8\'))\n+        orig = safe_nativestring(orig)\n         # Replaces all line breaks with a br tag, and wraps it in a p tag.\n         data.setData(\'<p>%s</p>\' %\n                      html_quote(orig.strip()).replace(\'\\n\', \'<br />\'))\ndiff --git a/Products/PortalTransforms/unsafe_transforms/xml.py b/Products/PortalTransforms/unsafe_transforms/xml.py\nindex 3679c80..9352cc7 100644\n--- a/Products/PortalTransforms/unsafe_transforms/xml.py\n+++ b/Products/PortalTransforms/unsafe_transforms/xml.py\n@@ -17,7 +17,7 @@\n import re\n \n \n-from six.moves import cStringIO as StringIO\n+from six import StringIO as NativeStringIO\n \n \n @implementer(ITransform)\n@@ -154,7 +154,7 @@ def get_doctype(data):\n     """ return the public id for the doctype given some raw xml data\n     """\n     if not hasattr(data, \'readlines\'):\n-        data = StringIO(data)\n+        data = NativeStringIO(data)\n     for line in data.readlines():\n         line = line.strip()\n         if not line:\n@@ -172,7 +172,7 @@ def get_dtd(data):\n     """ return the public id for the doctype given some raw xml data\n     """\n     if not hasattr(data, \'readlines\'):\n-        data = StringIO(data)\n+        data = NativeStringIO(data)\n     for line in data.readlines():\n         line = line.strip()\n         if not line:\ndiff --git a/Products/PortalTransforms/utils.py b/Products/PortalTransforms/utils.py\nindex a993959..a0fc8c0 100644\n--- a/Products/PortalTransforms/utils.py\n+++ b/Products/PortalTransforms/utils.py\n@@ -3,11 +3,29 @@\n # directory where template for the ZMI are located\n import logging\n import os.path\n+import six\n+\n+try:\n+    from Products.CMFPlone.utils import safe_nativestring\n+except ImportError:\n+    # Not needed for Products.CMFPlone >= 5.2a1\n+    from Products.CMFPlone.utils import safe_encode\n+    from Products.CMFPlone.utils import safe_unicode\n+\n+    def safe_nativestring(value, encoding=\'utf-8\'):\n+        """Convert a value to str in py2 and to text in py3\n+        """\n+        if six.PY2 and isinstance(value, six.text_type):\n+            value = safe_encode(value, encoding)\n+        if not six.PY2 and isinstance(value, six.binary_type):\n+            value = safe_unicode(value, encoding)\n+        return value\n \n \n class TransformException(Exception):\n     pass\n \n+\n FB_REGISTRY = None\n \n # logging function\n@@ -17,6 +35,7 @@ class TransformException(Exception):\n def log(message, severity=logging.DEBUG):\n     logger.log(severity, message)\n \n+\n _www = os.path.join(os.path.dirname(__file__), \'www\')\n \n \ndiff --git a/news/37.bugfix b/news/37.bugfix\nnew file mode 100644\nindex 0000000..93ddde2\n--- /dev/null\n+++ b/news/37.bugfix\n@@ -0,0 +1 @@\n+Some transform were returning unicode instead of strings in Python 2\n'

