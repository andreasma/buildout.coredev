Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2018-11-20T15:42:14-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/fff04037f8033d5399c6f8fca5e8421b81430300

fix meta bundle resource ordering

Co-authored-by: Wildcard Corp. &lt;corporate@wildcardcorp.com&gt;

Files changed:
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/tests/test_metabundles.py

b'diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 98d4adfa0..749031382 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -1,17 +1,18 @@\n-from Acquisition import aq_base\n+import logging\n+import re\n+from collections import OrderedDict\n from datetime import datetime\n+from StringIO import StringIO\n+\n+from Acquisition import aq_base\n from plone.registry.interfaces import IRegistry\n from plone.resource.file import FilesystemFile\n from plone.resource.interfaces import IResourceDirectory\n from Products.CMFPlone.interfaces import IBundleRegistry\n-from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa\n-from StringIO import StringIO\n+from Products.CMFPlone.interfaces.resources import \\\n+    OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa\n from zExceptions import NotFound\n-from zope.component import getUtility\n-from zope.component import queryUtility\n-\n-import logging\n-import re\n+from zope.component import getUtility, queryUtility\n \n PRODUCTION_RESOURCE_DIRECTORY = "production"\n logger = logging.getLogger(__name__)\n@@ -60,48 +61,75 @@ def get_resource(context, path):\n             return resource()\n \n \n-def write_js(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    # default resources\n-    if meta_bundle == \'default\' and registry.records.get(\n-        \'plone.resources/jquery.js\'\n-    ):\n-        resources.append(get_resource(context,\n-            registry.records[\'plone.resources/jquery.js\'].value))\n-        resources.append(get_resource(context,\n-            registry.records[\'plone.resources.requirejs\'].value))\n-        resources.append(get_resource(context,\n-            registry.records[\'plone.resources.configjs\'].value))\n-\n-    # bundles\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry, prefix="plone.bundles", check=False)\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.jscompilation:\n-            resource = get_resource(context, bundle.jscompilation)\n+class MetaBundleWriter(object):\n+\n+    def __init__(self, context, folder, name):\n+        self.context = context\n+        self.folder = folder\n+        self.name = name\n+        self.js_resources = OrderedDict()\n+        self.css_resources = OrderedDict()\n+        self.registry = getUtility(IRegistry)\n+        self.bundles = self.registry.collectionOfInterface(\n+            IBundleRegistry, prefix="plone.bundles", check=False)\n+\n+    def write_js(self):\n+\n+        # default resources\n+        if self.name == \'default\' and self.registry.records.get(\n+            \'plone.resources/jquery.js\'\n+        ):\n+            self.js_resources[\'_jquery\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources/jquery.js\'].value)\n+            self.js_resources[\'_requirejs\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources.requirejs\'].value)\n+            self.js_resources[\'_configjs\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources.configjs\'].value)\n+\n+        # bundles\n+        for name, bundle in self.bundles.items():\n+            if bundle.merge_with == self.name:\n+                self.load_js_bundle(name, bundle)\n+\n+        self._write_out(self.js_resources, \'.js\')\n+\n+    def load_js_bundle(self, name, bundle):\n+        if bundle.jscompilation:\n+            if bundle.depends and bundle.depends in self.bundles:\n+                self.load_js_bundle(\n+                    bundle.depends, self.bundles[bundle.depends])\n+            if name in self.js_resources:\n+                return\n+            resource = get_resource(self.context, bundle.jscompilation)\n             if not resource:\n-                continue\n-            resources.append(resource)\n-\n-    fi = StringIO()\n-    for script in resources:\n-        fi.write(script + \'\\n\')\n-    folder.writeFile(meta_bundle + ".js", fi)\n-\n-\n-def write_css(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry, prefix="plone.bundles", check=False)\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.csscompilation:\n-            css = get_resource(context, bundle.csscompilation)\n+                return\n+            self.js_resources[name] = resource\n+\n+    def _write_out(self, resources, postfix):\n+        fi = StringIO()\n+        for bname, script in resources.items():\n+            fi.write(\'\'\'\n+// Start Bundle: {0}\n+{1}\n+// End Bundle: {2}\n+\'\'\'.format(bname, script, bname))\n+        self.folder.writeFile(self.name + postfix, fi)\n+        resources.clear()\n+\n+    def load_css_bundle(self, name, bundle):\n+        if bundle.csscompilation:\n+            if bundle.depends and bundle.depends in self.bundles:\n+                self.load_css_bundle(\n+                    bundle.depends, self.bundles[bundle.depends])\n+            if name in self.css_resources:\n+                return\n+\n+            css = get_resource(self.context, bundle.csscompilation)\n             if not css:\n-                continue\n+                return\n             (path, sep, filename) = bundle.csscompilation.rpartition(\'/\')\n             # Process relative urls:\n             # we prefix with current resource path any url not starting with\n@@ -110,12 +138,14 @@ def write_css(context, folder, meta_bundle):\n                 r"""(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))""",\n                 r\'\\1%s/\' % path,\n                 css)\n-            resources.append(css)\n+            self.css_resources[name] = css\n \n-    fi = StringIO()\n-    for script in resources:\n-        fi.write(script + \'\\n\')\n-    folder.writeFile(meta_bundle + ".css", fi)\n+    def write_css(self):\n+        for name, bundle in self.bundles.items():\n+            if bundle.merge_with == self.name:\n+                self.load_css_bundle(name, bundle)\n+\n+        self._write_out(self.css_resources, \'.css\')\n \n \n def get_override_directory(context):\n@@ -139,7 +169,11 @@ def combine_bundles(context):\n     production_folder.writeFile("timestamp.txt", fi)\n \n     # generate new combined bundles\n-    write_js(context, production_folder, \'default\')\n-    write_js(context, production_folder, \'logged-in\')\n-    write_css(context, production_folder, \'default\')\n-    write_css(context, production_folder, \'logged-in\')\n+    default_writer = MetaBundleWriter(\n+        context, production_folder, \'default\')\n+    default_writer.write_js()\n+    logged_in_writer = MetaBundleWriter(\n+        context, production_folder, \'logged-in\')\n+    logged_in_writer.write_js()\n+    default_writer.write_css()\n+    logged_in_writer.write_css()\ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 3b29e6c63..944553968 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -9,6 +9,8 @@\n from Products.CMFPlone.resources.browser.combine import (\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n+    get_override_directory,\n+    MetaBundleWriter\n )\n \n \n@@ -51,3 +53,8 @@ def test_overrides(self):\n             \'alert("Overrided legacy!");\',\n             self.production_folder.readFile(\'default.js\')\n         )\n+\n+    def test_ordering_with_depends(self):\n+        writer = MetaBundleWriter(\n+            get_override_directory(self.portal),\n+            self.production_folder, \'logged-in\')\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2018-11-20T16:08:51-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/c469eb35b3978715b66c4d7b1a2b57d885241099

add test and changelo

Co-authored-by: Wildcard Corp. &lt;corporate@wildcardcorp.com&gt;

Files changed:
A news/2632.bugfix
M Products/CMFPlone/tests/test_metabundles.py

b"diff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 944553968..be0610967 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -9,11 +9,20 @@\n from Products.CMFPlone.resources.browser.combine import (\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n-    get_override_directory,\n     MetaBundleWriter\n )\n \n \n+class FakeBundleRegistryRecord(object):\n+\n+    def __init__(self, merge_with=None, jscompilation=None,\n+                 depends=None, csscompilation=None):\n+        self.merge_with = merge_with\n+        self.jscompilation = jscompilation\n+        self.depends = depends\n+        self.csscompilation = csscompilation\n+\n+\n class ProductsCMFPloneSetupTest(PloneTestCase):\n \n     def afterSetUp(self):\n@@ -56,5 +65,25 @@ def test_overrides(self):\n \n     def test_ordering_with_depends(self):\n         writer = MetaBundleWriter(\n-            get_override_directory(self.portal),\n-            self.production_folder, 'logged-in')\n+            self.portal, self.production_folder, 'logged-in')\n+\n+        # add in some fake bundles so we can test correct\n+        # ordering\n+        writer.bundles['foobar-1'] = FakeBundleRegistryRecord(\n+            merge_with='logged-in', depends='plone',\n+            jscompilation=writer.bundles['plone'].jscompilation,\n+            csscompilation=writer.bundles['plone'].csscompilation\n+        )\n+        writer.bundles['foobar-2'] = FakeBundleRegistryRecord(\n+            merge_with='logged-in', depends='foobar-1',\n+            jscompilation=writer.bundles['plone'].jscompilation,\n+            csscompilation=writer.bundles['plone'].csscompilation\n+        )\n+        writer.write_js()\n+        data = self.production_folder.readFile('logged-in.js')\n+        self.assertTrue(\n+            data.index('Start Bundle: plone') < data.index('Start Bundle: foobar-1')  # noqa\n+        )\n+        self.assertTrue(\n+            data.index('Start Bundle: foobar-1') < data.index('Start Bundle: foobar-2')  # noqa\n+        )\ndiff --git a/news/2632.bugfix b/news/2632.bugfix\nnew file mode 100644\nindex 000000000..cdc948ca8\n--- /dev/null\n+++ b/news/2632.bugfix\n@@ -0,0 +1,2 @@\n+Fix metabundle resource ordering to pay attention to depends setting\n+[vangheem]\n\\ No newline at end of file\n"

Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2018-11-20T17:09:47-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/c338586a596c55ef4120346fcf026bfa0ef22442

merge_with + depends only work with same meta bundle

Co-authored-by: Wildcard Corp. &lt;corporate@wildcardcorp.com&gt;

Files changed:
M Products/CMFPlone/resources/browser/combine.py

b"diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 749031382..37de07e14 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -91,12 +91,13 @@ def write_js(self):\n \n         # bundles\n         for name, bundle in self.bundles.items():\n-            if bundle.merge_with == self.name:\n-                self.load_js_bundle(name, bundle)\n+            self.load_js_bundle(name, bundle)\n \n         self._write_out(self.js_resources, '.js')\n \n     def load_js_bundle(self, name, bundle):\n+        if bundle.merge_with != self.name:\n+            return\n         if bundle.jscompilation:\n             if bundle.depends and bundle.depends in self.bundles:\n                 self.load_js_bundle(\n@@ -120,6 +121,9 @@ def _write_out(self, resources, postfix):\n         resources.clear()\n \n     def load_css_bundle(self, name, bundle):\n+        if bundle.merge_with != self.name:\n+            return\n+\n         if bundle.csscompilation:\n             if bundle.depends and bundle.depends in self.bundles:\n                 self.load_css_bundle(\n@@ -142,8 +146,7 @@ def load_css_bundle(self, name, bundle):\n \n     def write_css(self):\n         for name, bundle in self.bundles.items():\n-            if bundle.merge_with == self.name:\n-                self.load_css_bundle(name, bundle)\n+            self.load_css_bundle(name, bundle)\n \n         self._write_out(self.css_resources, '.css')\n \n"

Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2018-11-20T17:18:18-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/37b4dae90f54c153dd8fc676e2c0c7f26e696a03

prevent recursion errors

Co-authored-by: Wildcard Corp. &lt;corporate@wildcardcorp.com&gt;

Files changed:
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/tests/test_metabundles.py

b"diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 37de07e14..d45b7b3dd 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -95,13 +95,16 @@ def write_js(self):\n \n         self._write_out(self.js_resources, '.js')\n \n-    def load_js_bundle(self, name, bundle):\n+    def load_js_bundle(self, name, bundle, depth=0):\n+        if depth > 10:\n+            # recursion detection\n+            return\n         if bundle.merge_with != self.name:\n             return\n         if bundle.jscompilation:\n             if bundle.depends and bundle.depends in self.bundles:\n                 self.load_js_bundle(\n-                    bundle.depends, self.bundles[bundle.depends])\n+                    bundle.depends, self.bundles[bundle.depends], depth + 1)\n             if name in self.js_resources:\n                 return\n             resource = get_resource(self.context, bundle.jscompilation)\n@@ -120,14 +123,18 @@ def _write_out(self, resources, postfix):\n         self.folder.writeFile(self.name + postfix, fi)\n         resources.clear()\n \n-    def load_css_bundle(self, name, bundle):\n+    def load_css_bundle(self, name, bundle, depth=0):\n+        if depth > 10:\n+            # recursion detection\n+            return\n+\n         if bundle.merge_with != self.name:\n             return\n \n         if bundle.csscompilation:\n             if bundle.depends and bundle.depends in self.bundles:\n                 self.load_css_bundle(\n-                    bundle.depends, self.bundles[bundle.depends])\n+                    bundle.depends, self.bundles[bundle.depends], depth + 1)\n             if name in self.css_resources:\n                 return\n \ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex be0610967..d08d14444 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -87,3 +87,22 @@ def test_ordering_with_depends(self):\n         self.assertTrue(\n             data.index('Start Bundle: foobar-1') < data.index('Start Bundle: foobar-2')  # noqa\n         )\n+\n+    def test_prevent_circular_depends_error(self):\n+        writer = MetaBundleWriter(\n+            self.portal, self.production_folder, 'logged-in')\n+\n+        # add in some fake bundles so we can test correct\n+        # ordering\n+        writer.bundles['foobar-1'] = FakeBundleRegistryRecord(\n+            merge_with='logged-in', depends='foobar-2',\n+            jscompilation=writer.bundles['plone'].jscompilation,\n+            csscompilation=writer.bundles['plone'].csscompilation\n+        )\n+        writer.bundles['foobar-2'] = FakeBundleRegistryRecord(\n+            merge_with='logged-in', depends='foobar-1',\n+            jscompilation=writer.bundles['plone'].jscompilation,\n+            csscompilation=writer.bundles['plone'].csscompilation\n+        )\n+        writer.write_js()\n+        writer.write_css()\n"

Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2018-11-20T19:25:06-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/2bf2be5767ba749b949ab792ff9b861cf33128e4

fix test

Co-authored-by: Wildcard Corp. &lt;corporate@wildcardcorp.com&gt;

Files changed:
M Products/CMFPlone/tests/test_metabundles.py

b"diff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex d08d14444..57852f7d5 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -70,7 +70,7 @@ def test_ordering_with_depends(self):\n         # add in some fake bundles so we can test correct\n         # ordering\n         writer.bundles['foobar-1'] = FakeBundleRegistryRecord(\n-            merge_with='logged-in', depends='plone',\n+            merge_with='logged-in', depends='plone-logged-in',\n             jscompilation=writer.bundles['plone'].jscompilation,\n             csscompilation=writer.bundles['plone'].csscompilation\n         )\n"

Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2018-11-28T09:09:43+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/a1d25e177e1910531075b1f3fe197ea920f65111

Merge pull request #2632 from plone/meta-bundle-ordering-5.0

Meta bundle ordering(5.0)

Files changed:
A news/2632.bugfix
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/tests/test_metabundles.py

b'diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 98d4adfa0..d45b7b3dd 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -1,17 +1,18 @@\n-from Acquisition import aq_base\n+import logging\n+import re\n+from collections import OrderedDict\n from datetime import datetime\n+from StringIO import StringIO\n+\n+from Acquisition import aq_base\n from plone.registry.interfaces import IRegistry\n from plone.resource.file import FilesystemFile\n from plone.resource.interfaces import IResourceDirectory\n from Products.CMFPlone.interfaces import IBundleRegistry\n-from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa\n-from StringIO import StringIO\n+from Products.CMFPlone.interfaces.resources import \\\n+    OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa\n from zExceptions import NotFound\n-from zope.component import getUtility\n-from zope.component import queryUtility\n-\n-import logging\n-import re\n+from zope.component import getUtility, queryUtility\n \n PRODUCTION_RESOURCE_DIRECTORY = "production"\n logger = logging.getLogger(__name__)\n@@ -60,48 +61,86 @@ def get_resource(context, path):\n             return resource()\n \n \n-def write_js(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    # default resources\n-    if meta_bundle == \'default\' and registry.records.get(\n-        \'plone.resources/jquery.js\'\n-    ):\n-        resources.append(get_resource(context,\n-            registry.records[\'plone.resources/jquery.js\'].value))\n-        resources.append(get_resource(context,\n-            registry.records[\'plone.resources.requirejs\'].value))\n-        resources.append(get_resource(context,\n-            registry.records[\'plone.resources.configjs\'].value))\n-\n-    # bundles\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry, prefix="plone.bundles", check=False)\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.jscompilation:\n-            resource = get_resource(context, bundle.jscompilation)\n+class MetaBundleWriter(object):\n+\n+    def __init__(self, context, folder, name):\n+        self.context = context\n+        self.folder = folder\n+        self.name = name\n+        self.js_resources = OrderedDict()\n+        self.css_resources = OrderedDict()\n+        self.registry = getUtility(IRegistry)\n+        self.bundles = self.registry.collectionOfInterface(\n+            IBundleRegistry, prefix="plone.bundles", check=False)\n+\n+    def write_js(self):\n+\n+        # default resources\n+        if self.name == \'default\' and self.registry.records.get(\n+            \'plone.resources/jquery.js\'\n+        ):\n+            self.js_resources[\'_jquery\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources/jquery.js\'].value)\n+            self.js_resources[\'_requirejs\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources.requirejs\'].value)\n+            self.js_resources[\'_configjs\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources.configjs\'].value)\n+\n+        # bundles\n+        for name, bundle in self.bundles.items():\n+            self.load_js_bundle(name, bundle)\n+\n+        self._write_out(self.js_resources, \'.js\')\n+\n+    def load_js_bundle(self, name, bundle, depth=0):\n+        if depth > 10:\n+            # recursion detection\n+            return\n+        if bundle.merge_with != self.name:\n+            return\n+        if bundle.jscompilation:\n+            if bundle.depends and bundle.depends in self.bundles:\n+                self.load_js_bundle(\n+                    bundle.depends, self.bundles[bundle.depends], depth + 1)\n+            if name in self.js_resources:\n+                return\n+            resource = get_resource(self.context, bundle.jscompilation)\n             if not resource:\n-                continue\n-            resources.append(resource)\n-\n-    fi = StringIO()\n-    for script in resources:\n-        fi.write(script + \'\\n\')\n-    folder.writeFile(meta_bundle + ".js", fi)\n-\n-\n-def write_css(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry, prefix="plone.bundles", check=False)\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.csscompilation:\n-            css = get_resource(context, bundle.csscompilation)\n+                return\n+            self.js_resources[name] = resource\n+\n+    def _write_out(self, resources, postfix):\n+        fi = StringIO()\n+        for bname, script in resources.items():\n+            fi.write(\'\'\'\n+// Start Bundle: {0}\n+{1}\n+// End Bundle: {2}\n+\'\'\'.format(bname, script, bname))\n+        self.folder.writeFile(self.name + postfix, fi)\n+        resources.clear()\n+\n+    def load_css_bundle(self, name, bundle, depth=0):\n+        if depth > 10:\n+            # recursion detection\n+            return\n+\n+        if bundle.merge_with != self.name:\n+            return\n+\n+        if bundle.csscompilation:\n+            if bundle.depends and bundle.depends in self.bundles:\n+                self.load_css_bundle(\n+                    bundle.depends, self.bundles[bundle.depends], depth + 1)\n+            if name in self.css_resources:\n+                return\n+\n+            css = get_resource(self.context, bundle.csscompilation)\n             if not css:\n-                continue\n+                return\n             (path, sep, filename) = bundle.csscompilation.rpartition(\'/\')\n             # Process relative urls:\n             # we prefix with current resource path any url not starting with\n@@ -110,12 +149,13 @@ def write_css(context, folder, meta_bundle):\n                 r"""(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))""",\n                 r\'\\1%s/\' % path,\n                 css)\n-            resources.append(css)\n+            self.css_resources[name] = css\n \n-    fi = StringIO()\n-    for script in resources:\n-        fi.write(script + \'\\n\')\n-    folder.writeFile(meta_bundle + ".css", fi)\n+    def write_css(self):\n+        for name, bundle in self.bundles.items():\n+            self.load_css_bundle(name, bundle)\n+\n+        self._write_out(self.css_resources, \'.css\')\n \n \n def get_override_directory(context):\n@@ -139,7 +179,11 @@ def combine_bundles(context):\n     production_folder.writeFile("timestamp.txt", fi)\n \n     # generate new combined bundles\n-    write_js(context, production_folder, \'default\')\n-    write_js(context, production_folder, \'logged-in\')\n-    write_css(context, production_folder, \'default\')\n-    write_css(context, production_folder, \'logged-in\')\n+    default_writer = MetaBundleWriter(\n+        context, production_folder, \'default\')\n+    default_writer.write_js()\n+    logged_in_writer = MetaBundleWriter(\n+        context, production_folder, \'logged-in\')\n+    logged_in_writer.write_js()\n+    default_writer.write_css()\n+    logged_in_writer.write_css()\ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 3b29e6c63..57852f7d5 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -9,9 +9,20 @@\n from Products.CMFPlone.resources.browser.combine import (\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n+    MetaBundleWriter\n )\n \n \n+class FakeBundleRegistryRecord(object):\n+\n+    def __init__(self, merge_with=None, jscompilation=None,\n+                 depends=None, csscompilation=None):\n+        self.merge_with = merge_with\n+        self.jscompilation = jscompilation\n+        self.depends = depends\n+        self.csscompilation = csscompilation\n+\n+\n class ProductsCMFPloneSetupTest(PloneTestCase):\n \n     def afterSetUp(self):\n@@ -51,3 +62,47 @@ def test_overrides(self):\n             \'alert("Overrided legacy!");\',\n             self.production_folder.readFile(\'default.js\')\n         )\n+\n+    def test_ordering_with_depends(self):\n+        writer = MetaBundleWriter(\n+            self.portal, self.production_folder, \'logged-in\')\n+\n+        # add in some fake bundles so we can test correct\n+        # ordering\n+        writer.bundles[\'foobar-1\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'plone-logged-in\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.bundles[\'foobar-2\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-1\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.write_js()\n+        data = self.production_folder.readFile(\'logged-in.js\')\n+        self.assertTrue(\n+            data.index(\'Start Bundle: plone\') < data.index(\'Start Bundle: foobar-1\')  # noqa\n+        )\n+        self.assertTrue(\n+            data.index(\'Start Bundle: foobar-1\') < data.index(\'Start Bundle: foobar-2\')  # noqa\n+        )\n+\n+    def test_prevent_circular_depends_error(self):\n+        writer = MetaBundleWriter(\n+            self.portal, self.production_folder, \'logged-in\')\n+\n+        # add in some fake bundles so we can test correct\n+        # ordering\n+        writer.bundles[\'foobar-1\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-2\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.bundles[\'foobar-2\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-1\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.write_js()\n+        writer.write_css()\ndiff --git a/news/2632.bugfix b/news/2632.bugfix\nnew file mode 100644\nindex 000000000..cdc948ca8\n--- /dev/null\n+++ b/news/2632.bugfix\n@@ -0,0 +1,2 @@\n+Fix metabundle resource ordering to pay attention to depends setting\n+[vangheem]\n\\ No newline at end of file\n'

