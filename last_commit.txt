Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2018-04-09T04:50:10+10:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/001b2ac4728d7bc3e99ba14e6bd5a701dd5f11f7

Allow resolving of links with absolute path

Files changed:
M CHANGES.rst
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dfef1a5..ba8e350 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Allow resolving of links with absolute path
+  [tomgross]
 
 
 3.0.4 (2018-02-02)
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 18da6c7..41ebd6f 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -333,7 +333,7 @@ def unknown_starttag(self, tag, attrs):
             if (tag == 'a' or tag == 'area') and 'href' in attributes:
                 href = attributes['href']
                 scheme = urlsplit(href)[0]
-                if not scheme and not href.startswith('/') \
+                if not scheme \
                         and not href.startswith('mailto<') \
                         and not href.startswith('mailto:') \
                         and not href.startswith('tel:') \
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index f9b43f1..7e7f769 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -160,6 +160,11 @@ def test_resolve_uids_relative_link(self):
         text_out = """<a href="http://nohost/plone/image.jpg">foo</a>"""
         self._assertTransformsTo(text_in, text_out)
 
+    def test_resolve_uids_abs_path(self):
+        text_in = """<a href="/resolveuid/%s">foo</a>""" % self.UID
+        text_out = """<a href="http://nohost/plone/image.jpg">foo</a>"""
+        self._assertTransformsTo(text_in, text_out)
+
     def test_resolve_relative_links_to_absolute(self):
         # relative URLs are bad, b/c the text may be getting fetched to be
         # rendered in some other context. so they should get absolutized


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2018-04-11T16:21:30+10:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/aa59bba34f178429ad15f1d78fa717fdd9f61162

Fix condition and make plone.namedfile a hard testing dependency

Files changed:
M CHANGES.rst
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ba8e350..2519b7e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,9 @@ Bug fixes:
 - Allow resolving of links with absolute path
   [tomgross]
 
+- Make plone.namedfile hard testing dependency
+  [tomgross]
+
 
 3.0.4 (2018-02-02)
 ------------------
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 41ebd6f..a1a3658 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -344,7 +344,8 @@ def unknown_starttag(self, tag, attrs):
                         if subpath:
                             href += '/' + subpath
                         href += appendix
-                    elif resolveuid_re.match(href) is None:
+                    elif resolveuid_re.match(href) is None \
+                            and not href.startswith('/'):
                         # absolutize relative URIs; this text isn't necessarily
                         # being rendered in the context where it was stored
                         relative_root = self.context
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 7e7f769..223b710 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -8,30 +8,18 @@
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing.bbb import PloneTestCase
+from plone.namedfile.file import NamedBlobImage
+from plone.namedfile.file import NamedImage
+from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent
 from plone.outputfilters.filters.resolveuid_and_caption import ResolveUIDAndCaptionFilter  # noqa
 from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING
 from Products.PortalTransforms.tests.utils import normalize_html
 
-import pkg_resources
-
-
-# plone.namedfile is not part of coredev (yet) as such
-# it is not hard dependency
-try:
-    pkg_resources.get_distribution('plone.namedfile')
-except pkg_resources.DistributionNotFound:
-    HAS_NAMEDFILE = False
-else:
-    from plone.namedfile.file import NamedImage
-    from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent  # noqa
-    HAS_NAMEDFILE = True
-
 
 PREFIX = abspath(dirname(__file__))
 
 
 def dummy_image():
-    from plone.namedfile.file import NamedBlobImage
     filename = join(PREFIX, u'image.jpg')
     data = open(filename, 'rb').read()
     return NamedBlobImage(data=data, filename=filename)
@@ -62,23 +50,21 @@ def UID(self):
 
             allowedRolesAndUsers = ('Anonymous',)
 
-        if HAS_NAMEDFILE:
-            class DummyContent2(NFDummyContent):
-                id = __name__ = title = 'foo2'
+        class DummyContent2(NFDummyContent):
+            id = __name__ = title = 'foo2'
 
-                def UID(self):
-                    return 'foo2'
+            def UID(self):
+                return 'foo2'
 
         dummy = DummyContent('foo')
         self.portal._setObject('foo', dummy)
         self.portal.portal_catalog.catalog_object(self.portal.foo)
 
-        if HAS_NAMEDFILE:
-            dummy2 = DummyContent2('foo2')
-            data = open(join(PREFIX, self.image_id), 'rb').read()
-            dummy2.image = NamedImage(data, 'image/jpeg', u'image.jpeg')
-            self.portal._setObject('foo2', dummy2)
-            self.portal.portal_catalog.catalog_object(self.portal.foo2)
+        dummy2 = DummyContent2('foo2')
+        data = open(join(PREFIX, self.image_id), 'rb').read()
+        dummy2.image = NamedImage(data, 'image/jpeg', u'image.jpeg')
+        self.portal._setObject('foo2', dummy2)
+        self.portal.portal_catalog.catalog_object(self.portal.foo2)
 
     def _assertTransformsTo(self, input, expected):
         # compare two chunks of HTML ignoring whitespace differences,
@@ -356,8 +342,6 @@ def test_image_captioning_resolveuid_new_scale(self):
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):
-        if not HAS_NAMEDFILE:
-            return
         self._makeDummyContent()
         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""
         text_out = """<img src="http://nohost/plone/foo2/@@images/....jpeg" alt="foo2" class="captioned" title="foo2" />"""
@@ -372,8 +356,6 @@ def test_image_captioning_resolveuid_no_scale(self):
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):
-        if not HAS_NAMEDFILE:
-            return
         self._makeDummyContent()
         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""
         text_out = """<img src="http://nohost/plone/foo2/@@images/....jpeg" alt="foo2" class="captioned" title="foo2" />"""
diff --git a/setup.py b/setup.py
index d784892..5727c14 100644
--- a/setup.py
+++ b/setup.py
@@ -49,6 +49,7 @@
               'plone.app.contenttypes',
               'plone.app.testing',
               'plone.app.robotframework',
+              'plone.namedfile',
           ],
       },
       entry_points="""


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2018-04-11T10:49:27+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/ae7cc240e0b1c20ee10ba75057870e8fba3ac98c

Merge pull request #28 from plone/absolute_path

Allow resolving of links with absolute path

Files changed:
M CHANGES.rst
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dfef1a5..2519b7e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,11 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Allow resolving of links with absolute path
+  [tomgross]
+
+- Make plone.namedfile hard testing dependency
+  [tomgross]
 
 
 3.0.4 (2018-02-02)
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 18da6c7..a1a3658 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -333,7 +333,7 @@ def unknown_starttag(self, tag, attrs):
             if (tag == 'a' or tag == 'area') and 'href' in attributes:
                 href = attributes['href']
                 scheme = urlsplit(href)[0]
-                if not scheme and not href.startswith('/') \
+                if not scheme \
                         and not href.startswith('mailto<') \
                         and not href.startswith('mailto:') \
                         and not href.startswith('tel:') \
@@ -344,7 +344,8 @@ def unknown_starttag(self, tag, attrs):
                         if subpath:
                             href += '/' + subpath
                         href += appendix
-                    elif resolveuid_re.match(href) is None:
+                    elif resolveuid_re.match(href) is None \
+                            and not href.startswith('/'):
                         # absolutize relative URIs; this text isn't necessarily
                         # being rendered in the context where it was stored
                         relative_root = self.context
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index f9b43f1..223b710 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -8,30 +8,18 @@
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing.bbb import PloneTestCase
+from plone.namedfile.file import NamedBlobImage
+from plone.namedfile.file import NamedImage
+from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent
 from plone.outputfilters.filters.resolveuid_and_caption import ResolveUIDAndCaptionFilter  # noqa
 from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING
 from Products.PortalTransforms.tests.utils import normalize_html
 
-import pkg_resources
-
-
-# plone.namedfile is not part of coredev (yet) as such
-# it is not hard dependency
-try:
-    pkg_resources.get_distribution('plone.namedfile')
-except pkg_resources.DistributionNotFound:
-    HAS_NAMEDFILE = False
-else:
-    from plone.namedfile.file import NamedImage
-    from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent  # noqa
-    HAS_NAMEDFILE = True
-
 
 PREFIX = abspath(dirname(__file__))
 
 
 def dummy_image():
-    from plone.namedfile.file import NamedBlobImage
     filename = join(PREFIX, u'image.jpg')
     data = open(filename, 'rb').read()
     return NamedBlobImage(data=data, filename=filename)
@@ -62,23 +50,21 @@ def UID(self):
 
             allowedRolesAndUsers = ('Anonymous',)
 
-        if HAS_NAMEDFILE:
-            class DummyContent2(NFDummyContent):
-                id = __name__ = title = 'foo2'
+        class DummyContent2(NFDummyContent):
+            id = __name__ = title = 'foo2'
 
-                def UID(self):
-                    return 'foo2'
+            def UID(self):
+                return 'foo2'
 
         dummy = DummyContent('foo')
         self.portal._setObject('foo', dummy)
         self.portal.portal_catalog.catalog_object(self.portal.foo)
 
-        if HAS_NAMEDFILE:
-            dummy2 = DummyContent2('foo2')
-            data = open(join(PREFIX, self.image_id), 'rb').read()
-            dummy2.image = NamedImage(data, 'image/jpeg', u'image.jpeg')
-            self.portal._setObject('foo2', dummy2)
-            self.portal.portal_catalog.catalog_object(self.portal.foo2)
+        dummy2 = DummyContent2('foo2')
+        data = open(join(PREFIX, self.image_id), 'rb').read()
+        dummy2.image = NamedImage(data, 'image/jpeg', u'image.jpeg')
+        self.portal._setObject('foo2', dummy2)
+        self.portal.portal_catalog.catalog_object(self.portal.foo2)
 
     def _assertTransformsTo(self, input, expected):
         # compare two chunks of HTML ignoring whitespace differences,
@@ -160,6 +146,11 @@ def test_resolve_uids_relative_link(self):
         text_out = """<a href="http://nohost/plone/image.jpg">foo</a>"""
         self._assertTransformsTo(text_in, text_out)
 
+    def test_resolve_uids_abs_path(self):
+        text_in = """<a href="/resolveuid/%s">foo</a>""" % self.UID
+        text_out = """<a href="http://nohost/plone/image.jpg">foo</a>"""
+        self._assertTransformsTo(text_in, text_out)
+
     def test_resolve_relative_links_to_absolute(self):
         # relative URLs are bad, b/c the text may be getting fetched to be
         # rendered in some other context. so they should get absolutized
@@ -351,8 +342,6 @@ def test_image_captioning_resolveuid_new_scale(self):
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):
-        if not HAS_NAMEDFILE:
-            return
         self._makeDummyContent()
         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""
         text_out = """<img src="http://nohost/plone/foo2/@@images/....jpeg" alt="foo2" class="captioned" title="foo2" />"""
@@ -367,8 +356,6 @@ def test_image_captioning_resolveuid_no_scale(self):
         self._assertTransformsTo(text_in, text_out)
 
     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):
-        if not HAS_NAMEDFILE:
-            return
         self._makeDummyContent()
         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""
         text_out = """<img src="http://nohost/plone/foo2/@@images/....jpeg" alt="foo2" class="captioned" title="foo2" />"""
diff --git a/setup.py b/setup.py
index d784892..5727c14 100644
--- a/setup.py
+++ b/setup.py
@@ -49,6 +49,7 @@
               'plone.app.contenttypes',
               'plone.app.testing',
               'plone.app.robotframework',
+              'plone.namedfile',
           ],
       },
       entry_points="""


