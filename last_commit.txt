Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T11:02:25+02:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/28c562bf101ff31cebc1b03bfe6ffcee00ec10c6

Make sure to include the 'Content-Length' header for ical exports

Files changed:
M CHANGES.rst
M plone/app/event/browser/event_listing.py
M plone/app/event/ical/exporter.py
M plone/app/event/tests/test_event_listing.py
M plone/app/event/tests/test_icalendar.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 919f1c7a..8d8b2de2 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,9 @@ New features:\n \n Bug fixes:\n \n+- Make sure to include the \'Content-Length\' header for ical exports\n+  [frapell]\n+\n - Update plone.app.event resources. Requires plonetheme.barceloneta >= 1.9.\n   [agitator]\n \ndiff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py\nindex 09058dbc..3c49bf03 100644\n--- a/plone/app/event/browser/event_listing.py\n+++ b/plone/app/event/browser/event_listing.py\n@@ -188,12 +188,14 @@ def ical(self):\n                              batch=False)\n         cal = construct_icalendar(self.context, events)\n         name = \'%s.ics\' % self.context.getId()\n+        contents = cal.to_ical()\n         self.request.response.setHeader(\'Content-Type\', \'text/calendar\')\n         self.request.response.setHeader(\n             \'Content-Disposition\',\n             \'attachment; filename="%s"\' % name\n         )\n-        self.request.response.write(cal.to_ical())\n+        self.request.response.setHeader(\'Content-Length\', len(contents))\n+        self.request.response.write(contents)\n \n     @property\n     def ical_url(self):\ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex 70e5d43e..defdfa8e 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -423,6 +423,6 @@ def __call__(self):\n             \'Content-Disposition\',\n             \'attachment; filename="{0}"\'.format(name)\n         )\n-        self.request.response.setHeader(\'Content-Length\', len(ical))\n         self.request.response.setHeader(\'Pragma\', \'no-cache\')\n+        self.request.response.setHeader(\'Content-Length\', len(ical))\n         self.request.response.write(ical)\ndiff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py\nindex 5f3c6b05..147bf397 100644\n--- a/plone/app/event/tests/test_event_listing.py\n+++ b/plone/app/event/tests/test_event_listing.py\n@@ -49,8 +49,9 @@ def test_events_listing_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = self._listing_view(name=\'@@event_listing_ical\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Long Event\' in icalstr)\n \ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex da7f122b..e24b3ae4 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -44,6 +44,7 @@ def test_event_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n \n         self.checkOrder(\n@@ -94,6 +95,7 @@ def test_event_occurrence_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Now Event\' in icalstr)\n         self.assertTrue(\'RRULE\' not in icalstr)\n@@ -104,6 +106,7 @@ def test_portal_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n \n         # No occurrences in export. Otherwise count would be 8.\n@@ -195,8 +198,9 @@ def test_event_listing_ical_portal(self):\n         )\n         view.mode = \'all\'\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         # No occurrences in export. Otherwise count would be 8.\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n@@ -213,8 +217,9 @@ def test_event_listing_ical_portal__specific_date(self):\n         view.mode = \'day\'\n         view._date = \'2013-04-27\'\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 2)\n         self.assertTrue(\'Past Event\' in icalstr)\n@@ -231,6 +236,7 @@ def test_collection_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \n@@ -252,6 +258,7 @@ def test_collection_all_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T11:09:40+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/4d3eda8c06e035f6c6cf9220ee4b7e435d3c5011

Merge pull request #286 from plone/frapell-ical

Make sure to include the 'Content-Length' header for ical exports

Files changed:
M CHANGES.rst
M plone/app/event/browser/event_listing.py
M plone/app/event/ical/exporter.py
M plone/app/event/tests/test_event_listing.py
M plone/app/event/tests/test_icalendar.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 919f1c7a..8d8b2de2 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,9 @@ New features:\n \n Bug fixes:\n \n+- Make sure to include the \'Content-Length\' header for ical exports\n+  [frapell]\n+\n - Update plone.app.event resources. Requires plonetheme.barceloneta >= 1.9.\n   [agitator]\n \ndiff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py\nindex 09058dbc..3c49bf03 100644\n--- a/plone/app/event/browser/event_listing.py\n+++ b/plone/app/event/browser/event_listing.py\n@@ -188,12 +188,14 @@ def ical(self):\n                              batch=False)\n         cal = construct_icalendar(self.context, events)\n         name = \'%s.ics\' % self.context.getId()\n+        contents = cal.to_ical()\n         self.request.response.setHeader(\'Content-Type\', \'text/calendar\')\n         self.request.response.setHeader(\n             \'Content-Disposition\',\n             \'attachment; filename="%s"\' % name\n         )\n-        self.request.response.write(cal.to_ical())\n+        self.request.response.setHeader(\'Content-Length\', len(contents))\n+        self.request.response.write(contents)\n \n     @property\n     def ical_url(self):\ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex 70e5d43e..defdfa8e 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -423,6 +423,6 @@ def __call__(self):\n             \'Content-Disposition\',\n             \'attachment; filename="{0}"\'.format(name)\n         )\n-        self.request.response.setHeader(\'Content-Length\', len(ical))\n         self.request.response.setHeader(\'Pragma\', \'no-cache\')\n+        self.request.response.setHeader(\'Content-Length\', len(ical))\n         self.request.response.write(ical)\ndiff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py\nindex 5f3c6b05..147bf397 100644\n--- a/plone/app/event/tests/test_event_listing.py\n+++ b/plone/app/event/tests/test_event_listing.py\n@@ -49,8 +49,9 @@ def test_events_listing_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = self._listing_view(name=\'@@event_listing_ical\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Long Event\' in icalstr)\n \ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex da7f122b..e24b3ae4 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -44,6 +44,7 @@ def test_event_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n \n         self.checkOrder(\n@@ -94,6 +95,7 @@ def test_event_occurrence_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Now Event\' in icalstr)\n         self.assertTrue(\'RRULE\' not in icalstr)\n@@ -104,6 +106,7 @@ def test_portal_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n \n         # No occurrences in export. Otherwise count would be 8.\n@@ -195,8 +198,9 @@ def test_event_listing_ical_portal(self):\n         )\n         view.mode = \'all\'\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         # No occurrences in export. Otherwise count would be 8.\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n@@ -213,8 +217,9 @@ def test_event_listing_ical_portal__specific_date(self):\n         view.mode = \'day\'\n         view._date = \'2013-04-27\'\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 2)\n         self.assertTrue(\'Past Event\' in icalstr)\n@@ -231,6 +236,7 @@ def test_collection_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \n@@ -252,6 +258,7 @@ def test_collection_all_ical(self):\n         view()\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \n'

