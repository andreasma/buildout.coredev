Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-02-08T18:31:01+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/deddd0209260be95eff5e9a62232e438a79950b8

Improve tests for the workflow tool method listWFStatesByTitle

Refs #3032

Files changed:
A news/3032.bugfix
M Products/CMFPlone/tests/testWorkflowTool.py

b'diff --git a/Products/CMFPlone/tests/testWorkflowTool.py b/Products/CMFPlone/tests/testWorkflowTool.py\nindex 64df3c1ef5..a7081b229f 100644\n--- a/Products/CMFPlone/tests/testWorkflowTool.py\n+++ b/Products/CMFPlone/tests/testWorkflowTool.py\n@@ -14,26 +14,6 @@ class IDocument(Interface):\n     """ Dummy document interface\n     """\n \n-# INFO - Ugh...Rather than use and update ambiguous numbers,\n-# we maintain a mapping of the various workflows to states\n-# though there are some obvious downsides to this, it\'s better than just\n-# asserting that there are X published states in all workflows, etc.\n-workflow_dict = {\n-    \'folder_workflow\': (\'private\', \'published\', \'visible\',),\n-    \'intranet_folder_workflow\': (\'internal\', \'private\',),\n-    \'intranet_workflow\': (\'internal\', \'internally_published\', \'pending\',\n-                          \'private\', \'external\',),\n-    \'one_state_workflow\': (\'published\',),\n-    \'plone_workflow\': (\'pending\', \'private\', \'published\', \'visible\',),\n-    \'simple_publication_workflow\': (\'private\', \'published\', \'pending\',),\n-    \'comment_one_state_workflow\': (\'published\',),\n-    \'comment_review_workflow\': (\'pending\', \'published\',)\n-}\n-# then we join all states into one master list\n-all_states = []\n-for states in workflow_dict.values():\n-    all_states += list(states)\n-\n \n class TestWorkflowTool(PloneTestCase.PloneTestCase):\n \n@@ -111,25 +91,57 @@ def testGetTitleForTransitionOnTypeSucceedsWithNonString(self):\n         self.assertEqual(state_title, state_id)\n \n     def testListWFStatesByTitle(self):\n-        states = self.workflow.listWFStatesByTitle()\n-        self.assertEqual(len(states), len(all_states))\n-        pub_states = [s for s in states if s[1] == \'published\']\n-        priv_states = [s for s in states if s[1] == \'private\']\n-        pend_states = [s for s in states if s[1] == \'pending\']\n-        vis_states = [s for s in states if s[1] == \'visible\']\n-        external_states = [s for s in states if s[1] == \'external\']\n-        internal_states = [s for s in states if s[1] == \'internal\']\n-        internal_pub_states = [s for s in states\n-                               if s[1] == \'internally_published\']\n-\n-        self.assertEqual(len(pub_states), all_states.count(\'published\'))\n-        self.assertEqual(len(priv_states), all_states.count(\'private\'))\n-        self.assertEqual(len(pend_states), all_states.count(\'pending\'))\n-        self.assertEqual(len(vis_states), all_states.count(\'visible\'))\n-        self.assertEqual(len(external_states), all_states.count(\'external\'))\n-        self.assertEqual(len(internal_states), all_states.count(\'internal\'))\n-        self.assertEqual(len(internal_pub_states),\n-                         all_states.count(\'internally_published\'))\n+        from Products.CMFPlone.WorkflowTool import WorkflowTool\n+        from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition\n+        from Products.DCWorkflow.States import StateDefinition\n+\n+        tool = WorkflowTool()\n+\n+        # Test without workflows\n+        self.assertListEqual(tool.listWFStatesByTitle(), [])\n+        self.assertListEqual(tool.listWFStatesByTitle(filter_similar=True), [])\n+\n+        # Test with an empty workflow\n+        tool["foo"] = DCWorkflowDefinition("foo")\n+\n+        self.assertListEqual(tool.listWFStatesByTitle(), [])\n+        self.assertListEqual(tool.listWFStatesByTitle(filter_similar=True), [])\n+\n+        # Test with dummy states\n+        tool["foo"].states["private"] = StateDefinition("private")\n+        tool["foo"].states["published"] = StateDefinition("published")\n+\n+        expected = [("", "private",), ("", "published")]\n+        self.assertListEqual(tool.listWFStatesByTitle(), expected)\n+        self.assertListEqual(\n+            tool.listWFStatesByTitle(filter_similar=True), expected\n+        )\n+\n+        # Test with concurrent states\n+        tool["bar"] = DCWorkflowDefinition("bar")\n+        tool["bar"].states["private"] = StateDefinition("private")\n+        tool["bar"].states["pending"] = StateDefinition("pending")\n+        tool["bar"].states["published"] = StateDefinition("published")\n+        tool["bar"].states["published"].setProperties(title="Published")\n+        expected = [\n+            ("", "private",),\n+            ("", "published"),\n+            ("", "private",),\n+            ("", "pending"),\n+            ("Published", "published"),\n+        ]\n+        self.assertListEqual(tool.listWFStatesByTitle(), expected)\n+        expected = [\n+            ("", "private",),\n+            ("", "published"),\n+            ("", "pending"),\n+            ("Published", "published"),\n+        ]\n+        self.assertListEqual(\n+            tool.listWFStatesByTitle(filter_similar=True), expected\n+        )\n+\n+\n \n     def testAdaptationBasedWorkflowOverride(self):\n         # We take a piece of dummy content and register a dummy\ndiff --git a/news/3032.bugfix b/news/3032.bugfix\nnew file mode 100644\nindex 0000000000..b39fbdbd46\n--- /dev/null\n+++ b/news/3032.bugfix\n@@ -0,0 +1 @@\n+Improve tests for the workflow tool method listWFStatesByTitle\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-02-09T11:58:09+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/fd05fe4c9fd8937a235ae18ac90cfe10ce4b268b

Dicts are not sorted on py2

Files changed:
M Products/CMFPlone/tests/testWorkflowTool.py

b'diff --git a/Products/CMFPlone/tests/testWorkflowTool.py b/Products/CMFPlone/tests/testWorkflowTool.py\nindex a7081b229f..78c09a03b6 100644\n--- a/Products/CMFPlone/tests/testWorkflowTool.py\n+++ b/Products/CMFPlone/tests/testWorkflowTool.py\n@@ -6,6 +6,7 @@\n from Products.CMFPlone.tests.dummy import Dummy, DummyWorkflowChainAdapter\n from Products.CMFCore.interfaces import IWorkflowTool\n \n+import six\n \n default_user = PloneTestCase.default_user\n \n@@ -130,16 +131,27 @@ def testListWFStatesByTitle(self):\n             ("", "pending"),\n             ("Published", "published"),\n         ]\n-        self.assertListEqual(tool.listWFStatesByTitle(), expected)\n+        if six.PY2:\n+            self.assertListEqual(\n+                sorted(tool.listWFStatesByTitle()), sorted(expected)\n+            )\n+        else:\n+            self.assertListEqual(tool.listWFStatesByTitle(), expected)\n         expected = [\n             ("", "private",),\n             ("", "published"),\n             ("", "pending"),\n             ("Published", "published"),\n         ]\n-        self.assertListEqual(\n-            tool.listWFStatesByTitle(filter_similar=True), expected\n-        )\n+        if six.PY2:\n+            self.assertListEqual(\n+                sorted(tool.listWFStatesByTitle(filter_similar=True)),\n+                sorted(expected),\n+            )\n+        else:\n+            self.assertListEqual(\n+                tool.listWFStatesByTitle(filter_similar=True), expected\n+            )\n \n \n \n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-02-13T09:04:07+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/Products.CMFPlone/commit/ba0e4def60449c67b78d6fb5765efb1aeedd8412

Merge pull request #3036 from plone/3032-fix-tests

[5.2] Improve tests for the workflow tool method listWFStatesByTitle

Files changed:
A news/3032.bugfix
M Products/CMFPlone/tests/testWorkflowTool.py

b'diff --git a/Products/CMFPlone/tests/testWorkflowTool.py b/Products/CMFPlone/tests/testWorkflowTool.py\nindex 64df3c1ef5..78c09a03b6 100644\n--- a/Products/CMFPlone/tests/testWorkflowTool.py\n+++ b/Products/CMFPlone/tests/testWorkflowTool.py\n@@ -6,6 +6,7 @@\n from Products.CMFPlone.tests.dummy import Dummy, DummyWorkflowChainAdapter\n from Products.CMFCore.interfaces import IWorkflowTool\n \n+import six\n \n default_user = PloneTestCase.default_user\n \n@@ -14,26 +15,6 @@ class IDocument(Interface):\n     """ Dummy document interface\n     """\n \n-# INFO - Ugh...Rather than use and update ambiguous numbers,\n-# we maintain a mapping of the various workflows to states\n-# though there are some obvious downsides to this, it\'s better than just\n-# asserting that there are X published states in all workflows, etc.\n-workflow_dict = {\n-    \'folder_workflow\': (\'private\', \'published\', \'visible\',),\n-    \'intranet_folder_workflow\': (\'internal\', \'private\',),\n-    \'intranet_workflow\': (\'internal\', \'internally_published\', \'pending\',\n-                          \'private\', \'external\',),\n-    \'one_state_workflow\': (\'published\',),\n-    \'plone_workflow\': (\'pending\', \'private\', \'published\', \'visible\',),\n-    \'simple_publication_workflow\': (\'private\', \'published\', \'pending\',),\n-    \'comment_one_state_workflow\': (\'published\',),\n-    \'comment_review_workflow\': (\'pending\', \'published\',)\n-}\n-# then we join all states into one master list\n-all_states = []\n-for states in workflow_dict.values():\n-    all_states += list(states)\n-\n \n class TestWorkflowTool(PloneTestCase.PloneTestCase):\n \n@@ -111,25 +92,68 @@ def testGetTitleForTransitionOnTypeSucceedsWithNonString(self):\n         self.assertEqual(state_title, state_id)\n \n     def testListWFStatesByTitle(self):\n-        states = self.workflow.listWFStatesByTitle()\n-        self.assertEqual(len(states), len(all_states))\n-        pub_states = [s for s in states if s[1] == \'published\']\n-        priv_states = [s for s in states if s[1] == \'private\']\n-        pend_states = [s for s in states if s[1] == \'pending\']\n-        vis_states = [s for s in states if s[1] == \'visible\']\n-        external_states = [s for s in states if s[1] == \'external\']\n-        internal_states = [s for s in states if s[1] == \'internal\']\n-        internal_pub_states = [s for s in states\n-                               if s[1] == \'internally_published\']\n-\n-        self.assertEqual(len(pub_states), all_states.count(\'published\'))\n-        self.assertEqual(len(priv_states), all_states.count(\'private\'))\n-        self.assertEqual(len(pend_states), all_states.count(\'pending\'))\n-        self.assertEqual(len(vis_states), all_states.count(\'visible\'))\n-        self.assertEqual(len(external_states), all_states.count(\'external\'))\n-        self.assertEqual(len(internal_states), all_states.count(\'internal\'))\n-        self.assertEqual(len(internal_pub_states),\n-                         all_states.count(\'internally_published\'))\n+        from Products.CMFPlone.WorkflowTool import WorkflowTool\n+        from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition\n+        from Products.DCWorkflow.States import StateDefinition\n+\n+        tool = WorkflowTool()\n+\n+        # Test without workflows\n+        self.assertListEqual(tool.listWFStatesByTitle(), [])\n+        self.assertListEqual(tool.listWFStatesByTitle(filter_similar=True), [])\n+\n+        # Test with an empty workflow\n+        tool["foo"] = DCWorkflowDefinition("foo")\n+\n+        self.assertListEqual(tool.listWFStatesByTitle(), [])\n+        self.assertListEqual(tool.listWFStatesByTitle(filter_similar=True), [])\n+\n+        # Test with dummy states\n+        tool["foo"].states["private"] = StateDefinition("private")\n+        tool["foo"].states["published"] = StateDefinition("published")\n+\n+        expected = [("", "private",), ("", "published")]\n+        self.assertListEqual(tool.listWFStatesByTitle(), expected)\n+        self.assertListEqual(\n+            tool.listWFStatesByTitle(filter_similar=True), expected\n+        )\n+\n+        # Test with concurrent states\n+        tool["bar"] = DCWorkflowDefinition("bar")\n+        tool["bar"].states["private"] = StateDefinition("private")\n+        tool["bar"].states["pending"] = StateDefinition("pending")\n+        tool["bar"].states["published"] = StateDefinition("published")\n+        tool["bar"].states["published"].setProperties(title="Published")\n+        expected = [\n+            ("", "private",),\n+            ("", "published"),\n+            ("", "private",),\n+            ("", "pending"),\n+            ("Published", "published"),\n+        ]\n+        if six.PY2:\n+            self.assertListEqual(\n+                sorted(tool.listWFStatesByTitle()), sorted(expected)\n+            )\n+        else:\n+            self.assertListEqual(tool.listWFStatesByTitle(), expected)\n+        expected = [\n+            ("", "private",),\n+            ("", "published"),\n+            ("", "pending"),\n+            ("Published", "published"),\n+        ]\n+        if six.PY2:\n+            self.assertListEqual(\n+                sorted(tool.listWFStatesByTitle(filter_similar=True)),\n+                sorted(expected),\n+            )\n+        else:\n+            self.assertListEqual(\n+                tool.listWFStatesByTitle(filter_similar=True), expected\n+            )\n+\n+\n \n     def testAdaptationBasedWorkflowOverride(self):\n         # We take a piece of dummy content and register a dummy\ndiff --git a/news/3032.bugfix b/news/3032.bugfix\nnew file mode 100644\nindex 0000000000..b39fbdbd46\n--- /dev/null\n+++ b/news/3032.bugfix\n@@ -0,0 +1 @@\n+Improve tests for the workflow tool method listWFStatesByTitle\n'

