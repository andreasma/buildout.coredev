Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-06-13T12:34:33+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/13783b87a604371b488466aaebb10b8083583dc3

fix diff and tests in py3

Files changed:
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/testATCompoundDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_choicediff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_install.py

b'diff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 73ad310..a6bcc07 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -8,6 +8,7 @@\n from zope.component.hooks import getSite\n \n import difflib\n+import six\n \n \n class TextDiff(FieldDiff):\n@@ -33,11 +34,17 @@ def _parseField(self, value, filename=None):\n \n     def unified_diff(self):\n         """Return a unified diff"""\n-        a = [safe_utf8(i) for i in\n-             self._parseField(self.oldValue, filename=self.oldFilename)]\n-        b = [safe_utf8(i) for i in\n-             self._parseField(self.newValue, filename=self.newFilename)]\n-        return linesep.join(difflib.unified_diff(a, b, self.id1, self.id2))\n+        a = self._parseField(self.oldValue, filename=self.oldFilename)\n+        b = self._parseField(self.newValue, filename=self.newFilename)\n+        if six.PY2:\n+            a = [safe_utf8(i) for i in a]\n+            b = [safe_utf8(i) for i in b]\n+        # in py3 unified_diff does not accept None for ids (id1 and id2)\n+        # But TextDiff() sets None as default. We overwrite this here so the\n+        # default of unified_diff (\'\') can be used .\n+        cleanargs = [a, b, self.id1, self.id2]\n+        cleanargs = [i for i in cleanargs if i]\n+        return linesep.join(difflib.unified_diff(*cleanargs))\n \n     def html_diff(self, context=True, wrapcolumn=40):\n         """Return an HTML table showing differences"""\n@@ -48,10 +55,14 @@ def html_diff(self, context=True, wrapcolumn=40):\n         b = [safe_unicode(i) for i in\n              self._parseField(self.newValue, filename=self.newFilename)]\n         vis_diff = difflib.HtmlDiff(wrapcolumn=wrapcolumn)\n-        diff = safe_utf8(vis_diff.make_table(a, b,\n-                                             safe_unicode(self.id1),\n-                                             safe_unicode(self.id2),\n-                                             context=context))\n+        diff = vis_diff.make_table(\n+            a,\n+            b,\n+            safe_unicode(self.id1),\n+            safe_unicode(self.id2),\n+            context=context)\n+        if six.PY2:\n+            diff = safe_utf8(diff)\n         return diff\n \n     def inline_diff(self):\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex 7878067..f909170 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -2,7 +2,6 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import PloneSandboxLayer\n-from plone.app.testing.bbb import PTC_FIXTURE\n from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.utils import getToolByName\n from zope.component import getSiteManager\n@@ -10,6 +9,8 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n+import six\n+\n \n TEST_CONTENT_TYPE_ID = \'TestContentType\'\n \n@@ -89,24 +90,25 @@ def setUpPloneSite(self, portal):\n \n PACKAGE_DX_FIXTURE = DXLayer()\n \n+if six.PY2:\n+    from plone.app.testing.bbb import PTC_FIXTURE\n+\n+    class ATLayer(PloneSandboxLayer):\n \n-class ATLayer(PloneSandboxLayer):\n+        defaultBases = (PTC_FIXTURE, )\n \n-    defaultBases = (PTC_FIXTURE, )\n+        def setUpZope(self, app, configurationContext):\n+            # setup schema extender if available\n+            try:\n+                from archetypes import schemaextender\n+                self.loadZCML(package=schemaextender)\n+            except ImportError:\n+                pass\n \n-    def setUpZope(self, app, configurationContext):\n-        # setup schema extender if available\n-        try:\n-            from archetypes import schemaextender\n-            self.loadZCML(package=schemaextender)\n-        except ImportError:\n-            pass\n+    PACKAGE_AT_FIXTURE = ATLayer()\n+    CMFDiffToolATLayer = FunctionalTesting(\n+        bases=(PACKAGE_AT_FIXTURE, ), name=\'Products.CMFDiffTool.AT:functional\')\n \n-PACKAGE_AT_FIXTURE = ATLayer()\n \n-CMFDiffToolLayer = FunctionalTesting(\n-    bases=(PTC_FIXTURE, ), name=\'Products.CMFDiffTool:functional\')\n CMFDiffToolDXLayer = FunctionalTesting(\n     bases=(PACKAGE_DX_FIXTURE, ), name=\'Products.CMFDiffTool.DX:functional\')\n-CMFDiffToolATLayer = FunctionalTesting(\n-    bases=(PACKAGE_AT_FIXTURE, ), name=\'Products.CMFDiffTool.AT:functional\')\ndiff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py\nindex 0691b63..4ee11dc 100644\n--- a/Products/CMFDiffTool/tests/BaseTestCase.py\n+++ b/Products/CMFDiffTool/tests/BaseTestCase.py\n@@ -1,34 +1,30 @@\n # -*- coding: utf-8 -*-\n-# BaseTestCase\n-\n-from plone.app.testing.bbb import PloneTestCase\n-from Products.CMFDiffTool.testing import CMFDiffToolATLayer\n from Products.CMFDiffTool.testing import CMFDiffToolDXLayer\n-from Products.CMFDiffTool.testing import CMFDiffToolLayer\n+\n+import six\n+import unittest\n \n \n-class BaseTestCase(PloneTestCase):\n+class BaseDXTestCase(unittest.TestCase):\n     """ A base testing class for CMFDiffTool\n \n         It includes a layer which installes the product\n         and some testing dependencies in a Plone site.\n     """\n-    layer = CMFDiffToolLayer\n+    layer = CMFDiffToolDXLayer\n \n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n \n-class BaseATTestCase(PloneTestCase):\n-    """ A base testing class for CMFDiffTool\n \n-        It includes a layer which installes the product\n-        and some testing dependencies in a Plone site.\n-    """\n-    layer = CMFDiffToolATLayer\n+if six.PY2:\n+    from plone.app.testing.bbb import PloneTestCase\n+    from Products.CMFDiffTool.testing import CMFDiffToolATLayer\n \n+    class BaseATTestCase(PloneTestCase):\n+        """ A base testing class for CMFDiffTool\n \n-class BaseDXTestCase(PloneTestCase):\n-    """ A base testing class for CMFDiffTool\n-\n-        It includes a layer which installes the product\n-        and some testing dependencies in a Plone site.\n-    """\n-    layer = CMFDiffToolDXLayer\n+            It includes a layer which installes the product\n+            and some testing dependencies in a Plone site.\n+        """\n+        layer = CMFDiffToolATLayer\ndiff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py\nindex 6827501..5742ac5 100644\n--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py\n+++ b/Products/CMFDiffTool/tests/testATCompoundDiff.py\n@@ -1,92 +1,103 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseATTestCase\n-from Products.Archetypes import atapi\n-from Products.ATContentTypes.content.document import ATDocument\n-from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff\n-from zope.component import adapts\n-from zope.component import provideAdapter\n-from zope.interface import alsoProvides\n-from zope.interface import noLongerProvides\n+import six\n \n+if six.PY2:\n+    from .BaseTestCase import BaseATTestCase\n+    from Products.Archetypes import atapi\n+    from Products.ATContentTypes.content.document import ATDocument\n+    from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff\n+    from zope.component import adapts\n+    from zope.component import provideAdapter\n+    from zope.interface import alsoProvides\n+    from zope.interface import noLongerProvides\n \n-class TestATCompoundDiff(BaseATTestCase):\n-    """Test the portal_diff tool"""\n \n-    def testCompoundDiff(self):\n-        first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n-        first = self.folder[first]\n-        second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n-        second = self.folder[second]\n-        # Change a value\n-        first.setText(\'<p>Body1</p>\', mimetype=\'text/html\')\n-        second.setText(\'<p>Body2</p>\', mimetype=\'text/html\')\n-        fd = ATCompoundDiff(first, second, None)\n-        # There should be some fields\n-        self.assertTrue(len(fd))\n-        for field in fd:\n-            # We\'ve changed the body\n-            if field.label == \'label_body_text\':\n-                # We have the correct values\n-                self.assertEqual(field.oldValue, \'<p>Body1</p>\')\n-                self.assertEqual(field.newValue, \'<p>Body2</p>\')\n-                # And the correctly assigned diff type\n-                self.assertEqual(field.meta_type, \'HTML Diff\')\n-            # We\'ve also changed the id\n-            elif field.label == \'label_short_name\':\n-                self.assertEqual(field.oldValue, \'extended-document\')\n-                self.assertEqual(field.newValue, \'extended-document2\')\n-                self.assertEqual(field.meta_type, \'Lines Diff\')\n-            # The dates will be different, but everything else should\n-            # be the same\n-            elif field.label not in (\'label_creation_date\',\n-                                     \'label_modification_date\'):\n-                self.assertEqual(field.oldValue, field.newValue)\n+    class TestATCompoundDiff(BaseATTestCase):\n+        """Test the portal_diff tool"""\n \n-    def testAdaptedObjects(self):\n-        # Add a schema extended field to an ATDocument and test that\n-        # the compound diff can read it\n-        from archetypes.schemaextender.field import ExtensionField\n-        from archetypes.schemaextender.tests.mocks import Extender\n-        from archetypes.schemaextender.tests.mocks import IHighlighted\n+        def testCompoundDiff(self):\n+            first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n+            first = self.folder[first]\n+            second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n+            second = self.folder[second]\n+            # Change a value\n+            first.setText(\'<p>Body1</p>\', mimetype=\'text/html\')\n+            second.setText(\'<p>Body2</p>\', mimetype=\'text/html\')\n+            fd = ATCompoundDiff(first, second, None)\n+            # There should be some fields\n+            self.assertTrue(len(fd))\n+            for field in fd:\n+                # We\'ve changed the body\n+                if field.label == \'label_body_text\':\n+                    # We have the correct values\n+                    self.assertEqual(field.oldValue, \'<p>Body1</p>\')\n+                    self.assertEqual(field.newValue, \'<p>Body2</p>\')\n+                    # And the correctly assigned diff type\n+                    self.assertEqual(field.meta_type, \'HTML Diff\')\n+                # We\'ve also changed the id\n+                elif field.label == \'label_short_name\':\n+                    self.assertEqual(field.oldValue, \'extended-document\')\n+                    self.assertEqual(field.newValue, \'extended-document2\')\n+                    self.assertEqual(field.meta_type, \'Lines Diff\')\n+                # The dates will be different, but everything else should\n+                # be the same\n+                elif field.label not in (\'label_creation_date\',\n+                                         \'label_modification_date\'):\n+                    self.assertEqual(field.oldValue, field.newValue)\n \n-        # custom field class which does not set attributes directly on the\n-        # content\n-        class HighlightedField(ExtensionField, atapi.StringField):\n-            def get(self, instance, **kwargs):\n-                return IHighlighted.providedBy(instance)\n+        def testAdaptedObjects(self):\n+            # Add a schema extended field to an ATDocument and test that\n+            # the compound diff can read it\n+            from archetypes.schemaextender.field import ExtensionField\n+            from archetypes.schemaextender.tests.mocks import Extender\n+            from archetypes.schemaextender.tests.mocks import IHighlighted\n \n-            def getRaw(self, instance, **kwargs):\n-                return self.get(instance, **kwargs)\n+            # custom field class which does not set attributes directly on the\n+            # content\n+            class HighlightedField(ExtensionField, atapi.StringField):\n+                def get(self, instance, **kwargs):\n+                    return IHighlighted.providedBy(instance)\n \n-            def set(self, instance, value, **kwargs):\n-                if value and not IHighlighted.providedBy(instance):\n-                    alsoProvides(instance, IHighlighted)\n-                elif not value and IHighlighted.providedBy(instance):\n-                    noLongerProvides(instance, IHighlighted)\n+                def getRaw(self, instance, **kwargs):\n+                    return self.get(instance, **kwargs)\n \n-        class TestSchemaExtender(Extender):\n-            adapts(ATDocument)\n-            fields = [\n-                HighlightedField(\'schemaextender_test\',\n-                                 schemata=\'settings\',\n-                                 widget=atapi.BooleanWidget(\n-                                     label=\'Extended\',\n-                                     description=\'\'),\n-                                 ),\n-            ]\n+                def set(self, instance, value, **kwargs):\n+                    if value and not IHighlighted.providedBy(instance):\n+                        alsoProvides(instance, IHighlighted)\n+                    elif not value and IHighlighted.providedBy(instance):\n+                        noLongerProvides(instance, IHighlighted)\n \n-        """Ensure that tool instances implement the portal_diff interface"""\n-        provideAdapter(TestSchemaExtender,\n-                       name=u"archetypes.schemaextender.tests")\n+            class TestSchemaExtender(Extender):\n+                adapts(ATDocument)\n+                fields = [\n+                    HighlightedField(\'schemaextender_test\',\n+                                     schemata=\'settings\',\n+                                     widget=atapi.BooleanWidget(\n+                                         label=\'Extended\',\n+                                         description=\'\'),\n+                                     ),\n+                ]\n \n-        first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n-        first = self.folder[first]\n-        second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n-        second = self.folder[second]\n-        # Change the value\n-        alsoProvides(second, IHighlighted)\n-        fd = ATCompoundDiff(first, second, None)\n-        field = fd[-1]\n-        self.assertEqual(field.oldValue, False)\n-        self.assertEqual(field.newValue, True)\n-        self.assertEqual(field.label, \'Extended\')\n+            """Ensure that tool instances implement the portal_diff interface"""\n+            provideAdapter(TestSchemaExtender,\n+                           name=u"archetypes.schemaextender.tests")\n+\n+            first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n+            first = self.folder[first]\n+            second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n+            second = self.folder[second]\n+            # Change the value\n+            alsoProvides(second, IHighlighted)\n+            fd = ATCompoundDiff(first, second, None)\n+            field = fd[-1]\n+            self.assertEqual(field.oldValue, False)\n+            self.assertEqual(field.newValue, True)\n+            self.assertEqual(field.label, \'Extended\')\n+\n+else:\n+    import unittest\n+\n+    class TestDummy(unittest.TestCase):\n+\n+        def test_dummy(self):\n+            return\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex a8c72a6..542d263 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -5,7 +5,7 @@\n from Products.CMFDiffTool.TextDiff import TextDiff\n from unittest import TestCase\n \n-import sys\n+import six\n \n \n _marker = []\n@@ -93,25 +93,16 @@ def testUnifiedDiff(self):\n         """Test text diff output with different value"""\n         a = A()\n         b = B()\n-        if sys.version_info[:2] >= (2, 7):\n-            expected = """--- None\n \n-+++ None\n+        expected = """--- version1\n \n-@@ -1 +1 @@\n-\n--\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\n-+\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"""\n-        else:\n-            expected = """--- None\n++++ version2\n \n-+++ None\n-\n-@@ -1,1 +1,1 @@\n+@@ -1 +1 @@\n \n -\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\n +\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"""\n-        fd = TextDiff(a, b, \'attribute\')\n+        fd = TextDiff(a, b, \'attribute\', \'version1\', \'version2\')\n         self.assertEqual(fd.unified_diff(), expected)\n \n     def testHTMLDiff(self):\ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex 06e01d7..51bff32 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -1,15 +1,18 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseDXTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.namedfile.file import NamedFile\n from Products.CMFDiffTool import namedfile\n from Products.CMFDiffTool import testing\n from Products.CMFDiffTool.interfaces import IDifference\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n \n class BinaryDiffTestCase(BaseDXTestCase):\n \n     def test_should_detect_different_filename(self):\n-        self.loginAsPortalOwner()\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n@@ -29,7 +32,7 @@ def test_should_detect_different_filename(self):\n         self.assertFalse(diff.same)\n \n     def test_should_detect_different_data(self):\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n@@ -49,7 +52,7 @@ def test_should_detect_different_data(self):\n         self.assertFalse(diff.same)\n \n     def test_should_detect_same_data_and_filename(self):\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\ndiff --git a/Products/CMFDiffTool/tests/test_choicediff.py b/Products/CMFDiffTool/tests/test_choicediff.py\nindex d6f7ae0..63d5b45 100644\n--- a/Products/CMFDiffTool/tests/test_choicediff.py\n+++ b/Products/CMFDiffTool/tests/test_choicediff.py\n@@ -1,15 +1,18 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseDXTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from Products.CMFDiffTool import testing\n from Products.CMFDiffTool.choicediff import ChoiceDiff\n from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.interfaces import IDifference\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n \n class ChoiceDiffTestCase(BaseDXTestCase):\n \n-    def afterSetUp(self):\n-        self.loginAsPortalOwner()\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\ndiff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py\nindex 7cb9e1c..61a15f6 100644\n--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py\n+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py\n@@ -1,20 +1,24 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseDXTestCase\n from datetime import date\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.namedfile import NamedFile\n from Products.CMFDiffTool import testing\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n from Products.CMFDiffTool.dexteritydiff import EXCLUDED_FIELDS\n from Products.CMFDiffTool.interfaces import IDifference\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n from z3c.relationfield.relation import RelationValue\n from zope.component import getUtility\n from zope.intid.interfaces import IIntIds\n \n \n+\n class DexterityDiffTestCase(BaseDXTestCase):\n \n-    def afterSetUp(self):\n-        self.loginAsPortalOwner()\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n     def test_should_diff(self):\n         self.portal.invokeFactory(\ndiff --git a/Products/CMFDiffTool/tests/test_install.py b/Products/CMFDiffTool/tests/test_install.py\nindex 909b9d0..fadc602 100644\n--- a/Products/CMFDiffTool/tests/test_install.py\n+++ b/Products/CMFDiffTool/tests/test_install.py\n@@ -1,10 +1,10 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseTestCase\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n \n-class InstallTestCase(BaseTestCase):\n+class InstallTestCase(BaseDXTestCase):\n \n     def test_compound_diff_type_should_be_registered(self):\n         diff_tool = getToolByName(self.portal, \'portal_diff\')\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-06-26T23:57:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/a49319abfebbab350ee6a601ed45596aa2e7868c

InitializeClass was moved to AccessControl.class_init

Files changed:
M Products/CMFDiffTool/ATCompoundDiff.py
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/namedfile.py

b'diff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py\nindex b3a6973..dbfd605 100644\n--- a/Products/CMFDiffTool/ATCompoundDiff.py\n+++ b/Products/CMFDiffTool/ATCompoundDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff\n from Products.CMFDiffTool.FieldDiff import FieldDiff\ndiff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex f600192..e951c7a 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -5,7 +5,7 @@\n """\n \n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.interfaces import IDifference\ndiff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex 535f72e..c4a5e1e 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from os import linesep\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.FieldDiff import FieldDiff\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 4db02d3..45dde7f 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.libs import htmldiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n \ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex 46eb218..4f0d192 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -5,7 +5,7 @@\n """\n from AccessControl import ClassSecurityInfo\n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import registerToolInterface\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 5341cd0..2a7691f 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.BaseDiff import BaseDiff\n from six.moves import range\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex 706a8f3..edfa344 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n from six.moves import range\n \ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex a6bcc07..7494f44 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from os import linesep\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.FieldDiff import FieldDiff\ndiff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py\nindex cf8a852..1a25410 100644\n--- a/Products/CMFDiffTool/choicediff.py\n+++ b/Products/CMFDiffTool/choicediff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\n from Products.CMFDiffTool.TextDiff import AsTextDiff\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex fec38dd..4666ef5 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from plone.namedfile import NamedFile\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n from Products.CMFDiffTool.ListDiff import ListDiff\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-07-25T12:16:21-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/49f376b0d087e35d369687ee3e622c7c8fdb572b

Fix dict-keys-not-iterating

Files changed:
M Products/CMFDiffTool/CMFDiffTool.py

b'diff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex 4f0d192..7b2f05f 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -88,7 +88,7 @@ def setDiffField(self, pt_name, field, diff):\n \n     def listDiffTypes(self):\n         """List the names of the registered difference types"""\n-        return self._difftypes.keys()\n+        return list(self._difftypes)\n \n     security.declareProtected(ManagePortal, \'getDiffType\')  # NOQA\n \n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-07-25T12:18:48-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/531415f362e7acec1ecd3cfc66a747a720c4f666

Fix print-statement

Files changed:
M Products/CMFDiffTool/libs/htmldiff.py

b'diff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py\nindex b595c30..6605433 100644\n--- a/Products/CMFDiffTool/libs/htmldiff.py\n+++ b/Products/CMFDiffTool/libs/htmldiff.py\n@@ -11,7 +11,7 @@\n \n Better results if you use mxTidy first.  The output is HTML.\n """\n-\n+from __future__ import print_function\n from difflib import SequenceMatcher\n from six import StringIO\n \n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-09-21T08:54:31+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/711e5774522e0637f84845887a93828bd9b79db9

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3944473..d245fcd 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix diff and tests in py3\n+  [pbauer, hverlarde, jensens]\n \n \n 3.2.0 (2018-04-03)\n@@ -45,7 +46,7 @@ Bug fixes:\n \n New features:\n \n-- Add Python 2 / 3 compatibility [davilima6] \n+- Add Python 2 / 3 compatibility [davilima6]\n \n \n 3.1.4 (2017-03-23)\ndiff --git a/setup.py b/setup.py\nindex cf02c3c..5b2112e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -12,6 +12,8 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.1",\n         "Framework :: Plone :: 5.2",\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-09-21T10:04:57+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/d12d109458559998b1bce6bff966e63672222542

Merge pull request #33 from plone/python3

fix diff and tests in py3

Files changed:
M CHANGES.rst
M Products/CMFDiffTool/ATCompoundDiff.py
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/testATCompoundDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_choicediff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_install.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3944473..d245fcd 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix diff and tests in py3\n+  [pbauer, hverlarde, jensens]\n \n \n 3.2.0 (2018-04-03)\n@@ -45,7 +46,7 @@ Bug fixes:\n \n New features:\n \n-- Add Python 2 / 3 compatibility [davilima6] \n+- Add Python 2 / 3 compatibility [davilima6]\n \n \n 3.1.4 (2017-03-23)\ndiff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py\nindex b3a6973..dbfd605 100644\n--- a/Products/CMFDiffTool/ATCompoundDiff.py\n+++ b/Products/CMFDiffTool/ATCompoundDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff\n from Products.CMFDiffTool.FieldDiff import FieldDiff\ndiff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex f600192..e951c7a 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -5,7 +5,7 @@\n """\n \n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.interfaces import IDifference\ndiff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex 535f72e..c4a5e1e 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from os import linesep\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.FieldDiff import FieldDiff\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 4db02d3..45dde7f 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.libs import htmldiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n \ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex 46eb218..7b2f05f 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -5,7 +5,7 @@\n """\n from AccessControl import ClassSecurityInfo\n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import registerToolInterface\n@@ -88,7 +88,7 @@ def setDiffField(self, pt_name, field, diff):\n \n     def listDiffTypes(self):\n         """List the names of the registered difference types"""\n-        return self._difftypes.keys()\n+        return list(self._difftypes)\n \n     security.declareProtected(ManagePortal, \'getDiffType\')  # NOQA\n \ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 5341cd0..2a7691f 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.BaseDiff import BaseDiff\n from six.moves import range\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex 706a8f3..edfa344 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n from six.moves import range\n \ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 73ad310..7494f44 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from os import linesep\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n@@ -8,6 +8,7 @@\n from zope.component.hooks import getSite\n \n import difflib\n+import six\n \n \n class TextDiff(FieldDiff):\n@@ -33,11 +34,17 @@ def _parseField(self, value, filename=None):\n \n     def unified_diff(self):\n         """Return a unified diff"""\n-        a = [safe_utf8(i) for i in\n-             self._parseField(self.oldValue, filename=self.oldFilename)]\n-        b = [safe_utf8(i) for i in\n-             self._parseField(self.newValue, filename=self.newFilename)]\n-        return linesep.join(difflib.unified_diff(a, b, self.id1, self.id2))\n+        a = self._parseField(self.oldValue, filename=self.oldFilename)\n+        b = self._parseField(self.newValue, filename=self.newFilename)\n+        if six.PY2:\n+            a = [safe_utf8(i) for i in a]\n+            b = [safe_utf8(i) for i in b]\n+        # in py3 unified_diff does not accept None for ids (id1 and id2)\n+        # But TextDiff() sets None as default. We overwrite this here so the\n+        # default of unified_diff (\'\') can be used .\n+        cleanargs = [a, b, self.id1, self.id2]\n+        cleanargs = [i for i in cleanargs if i]\n+        return linesep.join(difflib.unified_diff(*cleanargs))\n \n     def html_diff(self, context=True, wrapcolumn=40):\n         """Return an HTML table showing differences"""\n@@ -48,10 +55,14 @@ def html_diff(self, context=True, wrapcolumn=40):\n         b = [safe_unicode(i) for i in\n              self._parseField(self.newValue, filename=self.newFilename)]\n         vis_diff = difflib.HtmlDiff(wrapcolumn=wrapcolumn)\n-        diff = safe_utf8(vis_diff.make_table(a, b,\n-                                             safe_unicode(self.id1),\n-                                             safe_unicode(self.id2),\n-                                             context=context))\n+        diff = vis_diff.make_table(\n+            a,\n+            b,\n+            safe_unicode(self.id1),\n+            safe_unicode(self.id2),\n+            context=context)\n+        if six.PY2:\n+            diff = safe_utf8(diff)\n         return diff\n \n     def inline_diff(self):\ndiff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py\nindex cf8a852..1a25410 100644\n--- a/Products/CMFDiffTool/choicediff.py\n+++ b/Products/CMFDiffTool/choicediff.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\n from Products.CMFDiffTool.TextDiff import AsTextDiff\ndiff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py\nindex b595c30..6605433 100644\n--- a/Products/CMFDiffTool/libs/htmldiff.py\n+++ b/Products/CMFDiffTool/libs/htmldiff.py\n@@ -11,7 +11,7 @@\n \n Better results if you use mxTidy first.  The output is HTML.\n """\n-\n+from __future__ import print_function\n from difflib import SequenceMatcher\n from six import StringIO\n \ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex fec38dd..4666ef5 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from plone.namedfile import NamedFile\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n from Products.CMFDiffTool.ListDiff import ListDiff\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex 7878067..f909170 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -2,7 +2,6 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import PloneSandboxLayer\n-from plone.app.testing.bbb import PTC_FIXTURE\n from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.utils import getToolByName\n from zope.component import getSiteManager\n@@ -10,6 +9,8 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n+import six\n+\n \n TEST_CONTENT_TYPE_ID = \'TestContentType\'\n \n@@ -89,24 +90,25 @@ def setUpPloneSite(self, portal):\n \n PACKAGE_DX_FIXTURE = DXLayer()\n \n+if six.PY2:\n+    from plone.app.testing.bbb import PTC_FIXTURE\n+\n+    class ATLayer(PloneSandboxLayer):\n \n-class ATLayer(PloneSandboxLayer):\n+        defaultBases = (PTC_FIXTURE, )\n \n-    defaultBases = (PTC_FIXTURE, )\n+        def setUpZope(self, app, configurationContext):\n+            # setup schema extender if available\n+            try:\n+                from archetypes import schemaextender\n+                self.loadZCML(package=schemaextender)\n+            except ImportError:\n+                pass\n \n-    def setUpZope(self, app, configurationContext):\n-        # setup schema extender if available\n-        try:\n-            from archetypes import schemaextender\n-            self.loadZCML(package=schemaextender)\n-        except ImportError:\n-            pass\n+    PACKAGE_AT_FIXTURE = ATLayer()\n+    CMFDiffToolATLayer = FunctionalTesting(\n+        bases=(PACKAGE_AT_FIXTURE, ), name=\'Products.CMFDiffTool.AT:functional\')\n \n-PACKAGE_AT_FIXTURE = ATLayer()\n \n-CMFDiffToolLayer = FunctionalTesting(\n-    bases=(PTC_FIXTURE, ), name=\'Products.CMFDiffTool:functional\')\n CMFDiffToolDXLayer = FunctionalTesting(\n     bases=(PACKAGE_DX_FIXTURE, ), name=\'Products.CMFDiffTool.DX:functional\')\n-CMFDiffToolATLayer = FunctionalTesting(\n-    bases=(PACKAGE_AT_FIXTURE, ), name=\'Products.CMFDiffTool.AT:functional\')\ndiff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py\nindex 0691b63..4ee11dc 100644\n--- a/Products/CMFDiffTool/tests/BaseTestCase.py\n+++ b/Products/CMFDiffTool/tests/BaseTestCase.py\n@@ -1,34 +1,30 @@\n # -*- coding: utf-8 -*-\n-# BaseTestCase\n-\n-from plone.app.testing.bbb import PloneTestCase\n-from Products.CMFDiffTool.testing import CMFDiffToolATLayer\n from Products.CMFDiffTool.testing import CMFDiffToolDXLayer\n-from Products.CMFDiffTool.testing import CMFDiffToolLayer\n+\n+import six\n+import unittest\n \n \n-class BaseTestCase(PloneTestCase):\n+class BaseDXTestCase(unittest.TestCase):\n     """ A base testing class for CMFDiffTool\n \n         It includes a layer which installes the product\n         and some testing dependencies in a Plone site.\n     """\n-    layer = CMFDiffToolLayer\n+    layer = CMFDiffToolDXLayer\n \n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n \n-class BaseATTestCase(PloneTestCase):\n-    """ A base testing class for CMFDiffTool\n \n-        It includes a layer which installes the product\n-        and some testing dependencies in a Plone site.\n-    """\n-    layer = CMFDiffToolATLayer\n+if six.PY2:\n+    from plone.app.testing.bbb import PloneTestCase\n+    from Products.CMFDiffTool.testing import CMFDiffToolATLayer\n \n+    class BaseATTestCase(PloneTestCase):\n+        """ A base testing class for CMFDiffTool\n \n-class BaseDXTestCase(PloneTestCase):\n-    """ A base testing class for CMFDiffTool\n-\n-        It includes a layer which installes the product\n-        and some testing dependencies in a Plone site.\n-    """\n-    layer = CMFDiffToolDXLayer\n+            It includes a layer which installes the product\n+            and some testing dependencies in a Plone site.\n+        """\n+        layer = CMFDiffToolATLayer\ndiff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py\nindex 6827501..5742ac5 100644\n--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py\n+++ b/Products/CMFDiffTool/tests/testATCompoundDiff.py\n@@ -1,92 +1,103 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseATTestCase\n-from Products.Archetypes import atapi\n-from Products.ATContentTypes.content.document import ATDocument\n-from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff\n-from zope.component import adapts\n-from zope.component import provideAdapter\n-from zope.interface import alsoProvides\n-from zope.interface import noLongerProvides\n+import six\n \n+if six.PY2:\n+    from .BaseTestCase import BaseATTestCase\n+    from Products.Archetypes import atapi\n+    from Products.ATContentTypes.content.document import ATDocument\n+    from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff\n+    from zope.component import adapts\n+    from zope.component import provideAdapter\n+    from zope.interface import alsoProvides\n+    from zope.interface import noLongerProvides\n \n-class TestATCompoundDiff(BaseATTestCase):\n-    """Test the portal_diff tool"""\n \n-    def testCompoundDiff(self):\n-        first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n-        first = self.folder[first]\n-        second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n-        second = self.folder[second]\n-        # Change a value\n-        first.setText(\'<p>Body1</p>\', mimetype=\'text/html\')\n-        second.setText(\'<p>Body2</p>\', mimetype=\'text/html\')\n-        fd = ATCompoundDiff(first, second, None)\n-        # There should be some fields\n-        self.assertTrue(len(fd))\n-        for field in fd:\n-            # We\'ve changed the body\n-            if field.label == \'label_body_text\':\n-                # We have the correct values\n-                self.assertEqual(field.oldValue, \'<p>Body1</p>\')\n-                self.assertEqual(field.newValue, \'<p>Body2</p>\')\n-                # And the correctly assigned diff type\n-                self.assertEqual(field.meta_type, \'HTML Diff\')\n-            # We\'ve also changed the id\n-            elif field.label == \'label_short_name\':\n-                self.assertEqual(field.oldValue, \'extended-document\')\n-                self.assertEqual(field.newValue, \'extended-document2\')\n-                self.assertEqual(field.meta_type, \'Lines Diff\')\n-            # The dates will be different, but everything else should\n-            # be the same\n-            elif field.label not in (\'label_creation_date\',\n-                                     \'label_modification_date\'):\n-                self.assertEqual(field.oldValue, field.newValue)\n+    class TestATCompoundDiff(BaseATTestCase):\n+        """Test the portal_diff tool"""\n \n-    def testAdaptedObjects(self):\n-        # Add a schema extended field to an ATDocument and test that\n-        # the compound diff can read it\n-        from archetypes.schemaextender.field import ExtensionField\n-        from archetypes.schemaextender.tests.mocks import Extender\n-        from archetypes.schemaextender.tests.mocks import IHighlighted\n+        def testCompoundDiff(self):\n+            first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n+            first = self.folder[first]\n+            second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n+            second = self.folder[second]\n+            # Change a value\n+            first.setText(\'<p>Body1</p>\', mimetype=\'text/html\')\n+            second.setText(\'<p>Body2</p>\', mimetype=\'text/html\')\n+            fd = ATCompoundDiff(first, second, None)\n+            # There should be some fields\n+            self.assertTrue(len(fd))\n+            for field in fd:\n+                # We\'ve changed the body\n+                if field.label == \'label_body_text\':\n+                    # We have the correct values\n+                    self.assertEqual(field.oldValue, \'<p>Body1</p>\')\n+                    self.assertEqual(field.newValue, \'<p>Body2</p>\')\n+                    # And the correctly assigned diff type\n+                    self.assertEqual(field.meta_type, \'HTML Diff\')\n+                # We\'ve also changed the id\n+                elif field.label == \'label_short_name\':\n+                    self.assertEqual(field.oldValue, \'extended-document\')\n+                    self.assertEqual(field.newValue, \'extended-document2\')\n+                    self.assertEqual(field.meta_type, \'Lines Diff\')\n+                # The dates will be different, but everything else should\n+                # be the same\n+                elif field.label not in (\'label_creation_date\',\n+                                         \'label_modification_date\'):\n+                    self.assertEqual(field.oldValue, field.newValue)\n \n-        # custom field class which does not set attributes directly on the\n-        # content\n-        class HighlightedField(ExtensionField, atapi.StringField):\n-            def get(self, instance, **kwargs):\n-                return IHighlighted.providedBy(instance)\n+        def testAdaptedObjects(self):\n+            # Add a schema extended field to an ATDocument and test that\n+            # the compound diff can read it\n+            from archetypes.schemaextender.field import ExtensionField\n+            from archetypes.schemaextender.tests.mocks import Extender\n+            from archetypes.schemaextender.tests.mocks import IHighlighted\n \n-            def getRaw(self, instance, **kwargs):\n-                return self.get(instance, **kwargs)\n+            # custom field class which does not set attributes directly on the\n+            # content\n+            class HighlightedField(ExtensionField, atapi.StringField):\n+                def get(self, instance, **kwargs):\n+                    return IHighlighted.providedBy(instance)\n \n-            def set(self, instance, value, **kwargs):\n-                if value and not IHighlighted.providedBy(instance):\n-                    alsoProvides(instance, IHighlighted)\n-                elif not value and IHighlighted.providedBy(instance):\n-                    noLongerProvides(instance, IHighlighted)\n+                def getRaw(self, instance, **kwargs):\n+                    return self.get(instance, **kwargs)\n \n-        class TestSchemaExtender(Extender):\n-            adapts(ATDocument)\n-            fields = [\n-                HighlightedField(\'schemaextender_test\',\n-                                 schemata=\'settings\',\n-                                 widget=atapi.BooleanWidget(\n-                                     label=\'Extended\',\n-                                     description=\'\'),\n-                                 ),\n-            ]\n+                def set(self, instance, value, **kwargs):\n+                    if value and not IHighlighted.providedBy(instance):\n+                        alsoProvides(instance, IHighlighted)\n+                    elif not value and IHighlighted.providedBy(instance):\n+                        noLongerProvides(instance, IHighlighted)\n \n-        """Ensure that tool instances implement the portal_diff interface"""\n-        provideAdapter(TestSchemaExtender,\n-                       name=u"archetypes.schemaextender.tests")\n+            class TestSchemaExtender(Extender):\n+                adapts(ATDocument)\n+                fields = [\n+                    HighlightedField(\'schemaextender_test\',\n+                                     schemata=\'settings\',\n+                                     widget=atapi.BooleanWidget(\n+                                         label=\'Extended\',\n+                                         description=\'\'),\n+                                     ),\n+                ]\n \n-        first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n-        first = self.folder[first]\n-        second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n-        second = self.folder[second]\n-        # Change the value\n-        alsoProvides(second, IHighlighted)\n-        fd = ATCompoundDiff(first, second, None)\n-        field = fd[-1]\n-        self.assertEqual(field.oldValue, False)\n-        self.assertEqual(field.newValue, True)\n-        self.assertEqual(field.label, \'Extended\')\n+            """Ensure that tool instances implement the portal_diff interface"""\n+            provideAdapter(TestSchemaExtender,\n+                           name=u"archetypes.schemaextender.tests")\n+\n+            first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n+            first = self.folder[first]\n+            second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n+            second = self.folder[second]\n+            # Change the value\n+            alsoProvides(second, IHighlighted)\n+            fd = ATCompoundDiff(first, second, None)\n+            field = fd[-1]\n+            self.assertEqual(field.oldValue, False)\n+            self.assertEqual(field.newValue, True)\n+            self.assertEqual(field.label, \'Extended\')\n+\n+else:\n+    import unittest\n+\n+    class TestDummy(unittest.TestCase):\n+\n+        def test_dummy(self):\n+            return\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex a8c72a6..542d263 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -5,7 +5,7 @@\n from Products.CMFDiffTool.TextDiff import TextDiff\n from unittest import TestCase\n \n-import sys\n+import six\n \n \n _marker = []\n@@ -93,25 +93,16 @@ def testUnifiedDiff(self):\n         """Test text diff output with different value"""\n         a = A()\n         b = B()\n-        if sys.version_info[:2] >= (2, 7):\n-            expected = """--- None\n \n-+++ None\n+        expected = """--- version1\n \n-@@ -1 +1 @@\n-\n--\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\n-+\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"""\n-        else:\n-            expected = """--- None\n++++ version2\n \n-+++ None\n-\n-@@ -1,1 +1,1 @@\n+@@ -1 +1 @@\n \n -\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa4\xb8\xe0\xa5\x82\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xb0\n +\xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb"""\n-        fd = TextDiff(a, b, \'attribute\')\n+        fd = TextDiff(a, b, \'attribute\', \'version1\', \'version2\')\n         self.assertEqual(fd.unified_diff(), expected)\n \n     def testHTMLDiff(self):\ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex 06e01d7..51bff32 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -1,15 +1,18 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseDXTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.namedfile.file import NamedFile\n from Products.CMFDiffTool import namedfile\n from Products.CMFDiffTool import testing\n from Products.CMFDiffTool.interfaces import IDifference\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n \n class BinaryDiffTestCase(BaseDXTestCase):\n \n     def test_should_detect_different_filename(self):\n-        self.loginAsPortalOwner()\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n@@ -29,7 +32,7 @@ def test_should_detect_different_filename(self):\n         self.assertFalse(diff.same)\n \n     def test_should_detect_different_data(self):\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n@@ -49,7 +52,7 @@ def test_should_detect_different_data(self):\n         self.assertFalse(diff.same)\n \n     def test_should_detect_same_data_and_filename(self):\n-        self.loginAsPortalOwner()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\ndiff --git a/Products/CMFDiffTool/tests/test_choicediff.py b/Products/CMFDiffTool/tests/test_choicediff.py\nindex d6f7ae0..63d5b45 100644\n--- a/Products/CMFDiffTool/tests/test_choicediff.py\n+++ b/Products/CMFDiffTool/tests/test_choicediff.py\n@@ -1,15 +1,18 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseDXTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from Products.CMFDiffTool import testing\n from Products.CMFDiffTool.choicediff import ChoiceDiff\n from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.interfaces import IDifference\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n \n class ChoiceDiffTestCase(BaseDXTestCase):\n \n-    def afterSetUp(self):\n-        self.loginAsPortalOwner()\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\ndiff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py\nindex 7cb9e1c..61a15f6 100644\n--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py\n+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py\n@@ -1,20 +1,24 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseDXTestCase\n from datetime import date\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.namedfile import NamedFile\n from Products.CMFDiffTool import testing\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n from Products.CMFDiffTool.dexteritydiff import EXCLUDED_FIELDS\n from Products.CMFDiffTool.interfaces import IDifference\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n from z3c.relationfield.relation import RelationValue\n from zope.component import getUtility\n from zope.intid.interfaces import IIntIds\n \n \n+\n class DexterityDiffTestCase(BaseDXTestCase):\n \n-    def afterSetUp(self):\n-        self.loginAsPortalOwner()\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n     def test_should_diff(self):\n         self.portal.invokeFactory(\ndiff --git a/Products/CMFDiffTool/tests/test_install.py b/Products/CMFDiffTool/tests/test_install.py\nindex 909b9d0..fadc602 100644\n--- a/Products/CMFDiffTool/tests/test_install.py\n+++ b/Products/CMFDiffTool/tests/test_install.py\n@@ -1,10 +1,10 @@\n # -*- coding: utf-8 -*-\n-from .BaseTestCase import BaseTestCase\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n \n-class InstallTestCase(BaseTestCase):\n+class InstallTestCase(BaseDXTestCase):\n \n     def test_compound_diff_type_should_be_registered(self):\n         diff_tool = getToolByName(self.portal, \'portal_diff\')\ndiff --git a/setup.py b/setup.py\nindex cf02c3c..5b2112e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -12,6 +12,8 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.1",\n         "Framework :: Plone :: 5.2",\n'

