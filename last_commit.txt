Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2019-12-03T18:22:48+01:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/ba1c7cbaee3323ce70f7dfba6bba3f7301331075

Correctly fire events when user auto login after the password has been reset (#2994)

* Test if events fired after auto login have the correct principal

* At this point the user is not logged in yet, so we get it from the membership_tool.

* Update changelog

* Remove adapter registration for IUserLoggedInEvent

* Fix unregistering of adapter

* Deal with cases where username/email were not the userid

Files changed:
A news/2993.bugfix
M Products/CMFPlone/browser/login/password_reset.py
M Products/CMFPlone/tests/pwreset_browser.rst

b'diff --git a/Products/CMFPlone/browser/login/password_reset.py b/Products/CMFPlone/browser/login/password_reset.py\nindex c56810c85..54610c2f2 100644\n--- a/Products/CMFPlone/browser/login/password_reset.py\n+++ b/Products/CMFPlone/browser/login/password_reset.py\n@@ -10,6 +10,7 @@\n from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n+from Products.CMFPlone.RegistrationTool import get_member_by_login_name\n from Products.CMFPlone.utils import safe_unicode\n from Products.CMFPlone.utils import safeToInt\n from Products.Five import BrowserView\n@@ -89,7 +90,8 @@ class PasswordResetView(BrowserView):\n     subpath = None\n \n     def _auto_login(self, userid, password):\n-        aclu = getToolByName(self.context, \'acl_users\')\n+        context = self.context\n+        aclu = getToolByName(context, \'acl_users\')\n         for name, plugin in aclu.plugins.listPlugins(ICredentialsUpdatePlugin):\n             plugin.updateCredentials(\n                 self.request,\n@@ -97,7 +99,16 @@ def _auto_login(self, userid, password):\n                 userid,\n                 password\n             )\n-        user = getSecurityManager().getUser()\n+\n+        member = get_member_by_login_name(context, userid, False)\n+\n+        if member:\n+            user = member.getUser()\n+        else:\n+            # Fallback in case we cannot find a user\n+            # with the given userid\n+            user = getSecurityManager().getUser()\n+\n         login_time = user.getProperty(\'login_time\', None)\n         if login_time is None:\n             notify(UserInitialLoginInEvent(user))\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex 922468f08..65bd1d131 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -343,6 +343,19 @@ What we do here is quite similiar to 1A, but instead of typing in the\n password ourselves, we will be sent an e-mail with the URL to set our\n password.\n \n+We will setup an adapter to capture IUserLoggedInEvent events:\n+\n+  >>> from zope.component import adapter\n+  >>> from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent\n+  >>> from zope.component import getGlobalSiteManager\n+  >>> events_fired = []\n+  >>> @adapter(IUserLoggedInEvent)\n+  ... def got_user_logged_in_event(event):\n+  ...     events_fired.append(event)\n+  >>> gsm = getGlobalSiteManager()\n+  >>> gsm.registerHandler(got_user_logged_in_event)\n+\n+\n First off, we need to set ``validate_mail`` to False:\n \n   >>> browser.open(\'http://nohost/plone/login\')\n@@ -389,6 +402,10 @@ We should have received an e-mail at this point:\n   3\n   >>> msg = str(mailhost.messages[-1])\n \n+Let\'s clear the events storage:\n+\n+  >>> events_fired = []\n+\n Now that we have the message, we want to look at its contents, and\n then we extract the address that lets us reset our password:\n \n@@ -415,12 +432,24 @@ Now that we have the address, we will reset our password:\n   >>> "Password reset successful, you are logged in now!" in browser.contents\n   True\n \n+User is logged in, let\'s check the event fired for the correct user:\n+\n+  >>> len(events_fired) == 1\n+  True\n+  >>> events_fired[0].principal\n+  <PloneUser \'bsmith\'>\n+\n Log out again:\n \n   >>> browser.getLink(\'Log out\').click()\n   >>> "You are now logged out" in browser.contents\n   True\n \n+Remove got_user_logged_in_event registration:\n+\n+  >>> gsm.unregisterHandler(got_user_logged_in_event)\n+  True\n+\n \n 2B. Administrator adds user with email validation enabled\n ---------------------------------------------------------\ndiff --git a/news/2993.bugfix b/news/2993.bugfix\nnew file mode 100644\nindex 000000000..f4be72869\n--- /dev/null\n+++ b/news/2993.bugfix\n@@ -0,0 +1,2 @@\n+Correctly fire events when user autologin after the password has been reset.\n+[ericof]\n'

