Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T10:00:03+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/8166c0d600df755d29254bb8775d66f9937c81f3

fix depecation warnings

Files changed:
M CHANGES.rst
M plone/portlets/events.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5708b6f..5d36223 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fixed some deprecation warnings.\n+  [jensens]\n+\n \n \n 2.3 (2016-11-01)\ndiff --git a/plone/portlets/events.py b/plone/portlets/events.py\nindex 30efba9..81dec96 100644\n--- a/plone/portlets/events.py\n+++ b/plone/portlets/events.py\n@@ -1,10 +1,10 @@\n import zope.component\n \n from zope.interface import Interface\n-from zope.component.interfaces import IUtilityRegistration\n-from zope.component.interfaces import IRegistrationEvent\n-from zope.component.interfaces import IRegistered\n-from zope.component.interfaces import IUnregistered\n+from zope.interface.interfaces import IUtilityRegistration\n+from zope.interface.interfaces import IRegistrationEvent\n+from zope.interface.interfaces import IRegistered\n+from zope.interface.interfaces import IUnregistered\n \n from zope.publisher.interfaces.browser import IBrowserRequest\n from zope.publisher.interfaces.browser import IBrowserView\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T10:02:37+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/3279f0740fd67f3dfd2568cbda08d599cbb83f75

isort

Files changed:
M CHANGES.rst
M plone/portlets/__init__.py
M plone/portlets/assignable.py
M plone/portlets/events.py
M plone/portlets/interfaces.py
M plone/portlets/manager.py
M plone/portlets/registration.py
M plone/portlets/retriever.py
M plone/portlets/settings.py
M plone/portlets/storage.py
M plone/portlets/tests.py
M plone/portlets/utils.py
M setup.cfg
M setup.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5d36223..b7d19a6 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,6 +17,8 @@ Bug fixes:\n - Fixed some deprecation warnings.\n   [jensens]\n \n+- Code style: black, isort\n+  [jensens]\n \n \n 2.3 (2016-11-01)\ndiff --git a/plone/portlets/__init__.py b/plone/portlets/__init__.py\nindex 8fa2136..792d600 100644\n--- a/plone/portlets/__init__.py\n+++ b/plone/portlets/__init__.py\n@@ -1,2 +1 @@\n #\n-\ndiff --git a/plone/portlets/assignable.py b/plone/portlets/assignable.py\nindex 4b8612a..3d5ea7d 100644\n--- a/plone/portlets/assignable.py\n+++ b/plone/portlets/assignable.py\n@@ -1,24 +1,19 @@\n+from BTrees.OOBTree import OOBTree\n from persistent.dict import PersistentDict\n-\n-from zope.interface import implementer\n-from zope.interface import implementer\n-from zope.component import adapter\n-from zope.component import adapts\n-from zope.component import queryAdapter\n-from zope.annotation.interfaces import IAnnotations\n-\n+from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n+from plone.portlets.constants import CONTEXT_BLACKLIST_STATUS_KEY\n+from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.interfaces import IBlockingPortletManager\n+from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.portlets.interfaces import IPortletManager\n-\n from plone.portlets.storage import PortletAssignmentMapping\n-from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n-from plone.portlets.constants import CONTEXT_BLACKLIST_STATUS_KEY\n-from plone.portlets.constants import CONTEXT_CATEGORY\n-\n-from BTrees.OOBTree import OOBTree\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.component import adapts\n+from zope.component import queryAdapter\n+from zope.interface import implementer\n \n \n @adapter(ILocalPortletAssignable, IPortletManager)\ndiff --git a/plone/portlets/events.py b/plone/portlets/events.py\nindex 81dec96..3883e91 100644\n--- a/plone/portlets/events.py\n+++ b/plone/portlets/events.py\n@@ -1,16 +1,14 @@\n-import zope.component\n-\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletManagerRenderer\n from zope.interface import Interface\n-from zope.interface.interfaces import IUtilityRegistration\n-from zope.interface.interfaces import IRegistrationEvent\n from zope.interface.interfaces import IRegistered\n+from zope.interface.interfaces import IRegistrationEvent\n from zope.interface.interfaces import IUnregistered\n-\n+from zope.interface.interfaces import IUtilityRegistration\n from zope.publisher.interfaces.browser import IBrowserRequest\n from zope.publisher.interfaces.browser import IBrowserView\n \n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletManagerRenderer\n+import zope.component\n \n \n @zope.component.adapter(IUtilityRegistration, IRegistrationEvent)\ndiff --git a/plone/portlets/interfaces.py b/plone/portlets/interfaces.py\nindex a196340..30a526b 100644\n--- a/plone/portlets/interfaces.py\n+++ b/plone/portlets/interfaces.py\n@@ -1,15 +1,14 @@\n-from zope.interface import Interface, Attribute\n from zope import schema\n-\n from zope.annotation.interfaces import IAttributeAnnotatable\n-\n+from zope.container.constraints import contains\n from zope.container.interfaces import IContained\n from zope.container.interfaces import IContainer\n-from zope.container.interfaces import IOrderedContainer\n from zope.container.interfaces import IContainerNamesContainer\n-\n-from zope.container.constraints import contains\n+from zope.container.interfaces import IOrderedContainer\n from zope.contentprovider.interfaces import IContentProvider\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n \n # Context - the application layer must provide these\n \ndiff --git a/plone/portlets/manager.py b/plone/portlets/manager.py\nindex 656a199..a521663 100644\n--- a/plone/portlets/manager.py\n+++ b/plone/portlets/manager.py\n@@ -1,23 +1,23 @@\n-import logging\n-\n from plone.memoize.view import memoize\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletManagerRenderer\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletRetriever\n+from plone.portlets.interfaces import IPortletType\n+from plone.portlets.storage import PortletStorage\n+from plone.portlets.utils import hashPortletInfo\n+from ZODB.POSException import ConflictError\n from zope.component import adapts\n from zope.component import getMultiAdapter\n from zope.component import getUtilitiesFor\n from zope.contentprovider.interfaces import UpdateNotCalled\n from zope.interface import implementer\n from zope.interface import Interface\n-from zope.publisher.interfaces.browser import IBrowserView\n from zope.publisher.interfaces.browser import IBrowserRequest\n-from ZODB.POSException import ConflictError\n+from zope.publisher.interfaces.browser import IBrowserView\n+\n+import logging\n \n-from plone.portlets.interfaces import IPortletRetriever\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletManagerRenderer\n-from plone.portlets.interfaces import IPortletRenderer\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.storage import PortletStorage\n-from plone.portlets.utils import hashPortletInfo\n \n logger = logging.getLogger('portlets')\n \ndiff --git a/plone/portlets/registration.py b/plone/portlets/registration.py\nindex 2d58162..b53bd6e 100644\n--- a/plone/portlets/registration.py\n+++ b/plone/portlets/registration.py\n@@ -1,7 +1,6 @@\n-from zope.interface import implementer\n from persistent import Persistent\n-\n from plone.portlets.interfaces import IPortletType\n+from zope.interface import implementer\n \n \n @implementer(IPortletType)\ndiff --git a/plone/portlets/retriever.py b/plone/portlets/retriever.py\nindex da79d35..23f827a 100644\n--- a/plone/portlets/retriever.py\n+++ b/plone/portlets/retriever.py\n@@ -1,19 +1,18 @@\n-from zope.interface import implementer, Interface\n-from zope.component import adapts\n-from zope.component import getMultiAdapter\n-from zope.component import queryAdapter\n-from zope.annotation.interfaces import IAnnotations\n-\n-from plone.portlets.interfaces import IPortletContext\n+from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n+from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPlacelessPortletManager\n-from plone.portlets.interfaces import IPortletRetriever\n from plone.portlets.interfaces import IPortletAssignmentSettings\n-\n-from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n-from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.interfaces import IPortletContext\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRetriever\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n+from zope.component import queryAdapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n @implementer(IPortletRetriever)\ndiff --git a/plone/portlets/settings.py b/plone/portlets/settings.py\nindex d483950..e80699d 100644\n--- a/plone/portlets/settings.py\n+++ b/plone/portlets/settings.py\n@@ -1,10 +1,12 @@\n-from zope.interface import implementer, implementer\n-from zope.component import adapter, queryAdapter\n-from zope.container.contained import Contained\n-from plone.portlets.interfaces import IPortletAssignment, IPortletAssignmentSettings\n from persistent.dict import PersistentDict\n-from zope.annotation import IAnnotations\n from plone.portlets.constants import ASSIGNMENT_SETTINGS_KEY\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletAssignmentSettings\n+from zope.annotation import IAnnotations\n+from zope.component import adapter\n+from zope.component import queryAdapter\n+from zope.container.contained import Contained\n+from zope.interface import implementer\n \n \n @implementer(IPortletAssignmentSettings)\ndiff --git a/plone/portlets/storage.py b/plone/portlets/storage.py\nindex 7ea9984..8f31f72 100644\n--- a/plone/portlets/storage.py\n+++ b/plone/portlets/storage.py\n@@ -6,9 +6,11 @@\n from zope.container.contained import Contained\n from zope.container.ordered import OrderedContainer\n from zope.interface import implementer\n+\n import logging\n import sys\n \n+\n # XXX: We coerce all mapping keys (things like user and group ids)\n # to unicode, because the OOBTree that we store them in will fall over with\n # mixed encoded-str and unicode keys. It may be better to store byte strings\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 7803355..e41df89 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -1,10 +1,10 @@\n-import doctest\n-import unittest\n+from zope.component.testing import setUp\n+from zope.component.testing import tearDown\n+from zope.configuration.xmlconfig import XMLConfig\n \n+import doctest\n import plone.portlets\n-\n-from zope.component.testing import setUp, tearDown\n-from zope.configuration.xmlconfig import XMLConfig\n+import unittest\n \n \n optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\ndiff --git a/plone/portlets/utils.py b/plone/portlets/utils.py\nindex 1091408..35a4d41 100644\n--- a/plone/portlets/utils.py\n+++ b/plone/portlets/utils.py\n@@ -1,7 +1,8 @@\n-from zope.component import getSiteManager\n-from zope.interface import Interface\n from plone.portlets.interfaces import IPortletType\n from plone.portlets.registration import PortletType\n+from zope.component import getSiteManager\n+from zope.interface import Interface\n+\n import binascii\n \n \ndiff --git a/setup.cfg b/setup.cfg\nindex 1e18f49..43b4d21 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -8,3 +8,12 @@ create-wheel = yes\n # When Python 2-3 compatible:\n # [bdist_wheel]\n # universal = 1\n+\n+[isort]\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 79\n+not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\ndiff --git a/setup.py b/setup.py\nindex 688c034..108edd0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,6 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = '2.3.1.dev0'\n \n"

Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T10:10:46+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/306947af451e3ae357e7f1d90ea301c1d4931d19

black code formatting

Files changed:
A pyproject.toml
M plone/__init__.py
M plone/portlets/assignable.py
M plone/portlets/constants.py
M plone/portlets/events.py
M plone/portlets/interfaces.py
M plone/portlets/manager.py
M plone/portlets/retriever.py
M plone/portlets/settings.py
M plone/portlets/tests.py
M plone/portlets/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5d74e30 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -3,4 +3,5 @@\n     __import__(\'pkg_resources\').declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/portlets/assignable.py b/plone/portlets/assignable.py\nindex 3d5ea7d..b044f7b 100644\n--- a/plone/portlets/assignable.py\n+++ b/plone/portlets/assignable.py\n@@ -32,8 +32,9 @@ def localPortletAssignmentMappingAdapter(context, manager):\n         local = annotations[CONTEXT_ASSIGNMENT_KEY] = OOBTree()\n     portlets = local.get(manager.__name__, None)\n     if portlets is None:\n-        portlets = local[manager.__name__] = PortletAssignmentMapping(manager=manager.__name__,\n-                                                                      category=CONTEXT_CATEGORY)\n+        portlets = local[manager.__name__] = PortletAssignmentMapping(\n+            manager=manager.__name__, category=CONTEXT_CATEGORY\n+        )\n     return portlets\n \n \n@@ -42,6 +43,7 @@ class LocalPortletAssignmentManager(object):\n     """Default implementation of ILocalPortletAssignmentManager which stores\n     information in an annotation.\n     """\n+\n     adapts(ILocalPortletAssignable, IPortletManager)\n \n     def __init__(self, context, manager):\n@@ -66,7 +68,9 @@ def _getBlacklist(self, create=False):\n         local = annotations.get(CONTEXT_BLACKLIST_STATUS_KEY, None)\n         if local is None:\n             if create:\n-                local = annotations[CONTEXT_BLACKLIST_STATUS_KEY] = PersistentDict()\n+                local = annotations[\n+                    CONTEXT_BLACKLIST_STATUS_KEY\n+                ] = PersistentDict()\n             else:\n                 return None\n         blacklist = local.get(self.manager.__name__, None)\n@@ -82,10 +86,13 @@ class BlockingLocalPortletAssignmentManager(LocalPortletAssignmentManager):\n     """Implementation of ILocalPortletAssignmentManager which by default blocks\n     parent contextual portlets.\n     """\n+\n     adapts(ILocalPortletAssignable, IBlockingPortletManager)\n \n     def getBlacklistStatus(self, category):\n-        value = super(BlockingLocalPortletAssignmentManager, self).getBlacklistStatus(category)\n+        value = super(\n+            BlockingLocalPortletAssignmentManager, self\n+        ).getBlacklistStatus(category)\n         if category is CONTEXT_CATEGORY and value is None:\n             return True\n         return value\ndiff --git a/plone/portlets/constants.py b/plone/portlets/constants.py\nindex 440538b..708418e 100644\n--- a/plone/portlets/constants.py\n+++ b/plone/portlets/constants.py\n@@ -1,4 +1,3 @@\n-\n # Annotation keys\n \n CONTEXT_ASSIGNMENT_KEY = \'plone.portlets.contextassignments\'\ndiff --git a/plone/portlets/events.py b/plone/portlets/events.py\nindex 3883e91..74b90a4 100644\n--- a/plone/portlets/events.py\n+++ b/plone/portlets/events.py\n@@ -16,9 +16,11 @@ def dispatchToComponent(registration, event):\n     """When a utility is registered, dispatch to an event handler registered for\n     the particular component registered, the registration and the event.\n     """\n-    handlers = zope.component.subscribers((registration.component, registration, event), None)\n+    handlers = zope.component.subscribers(\n+        (registration.component, registration, event), None\n+    )\n     for handler in handlers:\n-        pass # getting them does the work\n+        pass  # getting them does the work\n \n \n @zope.component.adapter(IPortletManager, IUtilityRegistration, IRegistered)\n@@ -31,10 +33,12 @@ def registerPortletManagerRenderer(manager, registration, event):\n     """\n     manager.__name__ = registration.name\n     registry = registration.registry\n-    registry.registerAdapter(factory=manager,\n-                             required=(Interface, IBrowserRequest, IBrowserView),\n-                             provided=IPortletManagerRenderer,\n-                             name=registration.name)\n+    registry.registerAdapter(\n+        factory=manager,\n+        required=(Interface, IBrowserRequest, IBrowserView),\n+        provided=IPortletManagerRenderer,\n+        name=registration.name,\n+    )\n \n \n @zope.component.adapter(IPortletManager, IUtilityRegistration, IUnregistered)\n@@ -43,7 +47,9 @@ def unregisterPortletManagerRenderer(manager, registration, event):\n     IPortletManagerRenderer.\n     """\n     registry = registration.registry\n-    registry.unregisterAdapter(factory=manager,\n-                               required=(Interface, IBrowserRequest, IBrowserView),\n-                               provided=IPortletManagerRenderer,\n-                               name=registration.name)\n+    registry.unregisterAdapter(\n+        factory=manager,\n+        required=(Interface, IBrowserRequest, IBrowserView),\n+        provided=IPortletManagerRenderer,\n+        name=registration.name,\n+    )\ndiff --git a/plone/portlets/interfaces.py b/plone/portlets/interfaces.py\nindex 30a526b..2e3edfe 100644\n--- a/plone/portlets/interfaces.py\n+++ b/plone/portlets/interfaces.py\n@@ -27,8 +27,9 @@ class IPortletContext(Interface):\n     render portlets.\n     """\n \n-    uid = schema.TextLine(title=u"A unique id or path for this specific context",\n-                          required=True)\n+    uid = schema.TextLine(\n+        title=u"A unique id or path for this specific context", required=True\n+    )\n \n     def getParent():\n         """Get the portlet parent of the current context.\n@@ -82,21 +83,20 @@ class IPortletType(Interface):\n     providing IPortletType, so that UI can find them.\n     """\n \n-    title = schema.TextLine(\n-        title = u\'Title\',\n-        required = True)\n+    title = schema.TextLine(title=u\'Title\', required=True)\n \n-    description = schema.Text(\n-        title = u\'Description\',\n-        required = False)\n+    description = schema.Text(title=u\'Description\', required=False)\n \n     addview = schema.TextLine(\n-        title = u\'Add view\',\n-        description = u\'The name of the add view for assignments for this portlet type\',\n-        required = True)\n+        title=u\'Add view\',\n+        description=u\'The name of the add view for assignments for this portlet type\',\n+        required=True,\n+    )\n \n-    for_ = Attribute(\'An interface a portlet manager must have to allow this type of portlet. \' \\\n-                      \'May be None if there are no restrictions.\')\n+    for_ = Attribute(\n+        \'An interface a portlet manager must have to allow this type of portlet. \'\n+        \'May be None if there are no restrictions.\'\n+    )\n \n \n # Generic marker interface - a portlet may reference one of these\n@@ -136,14 +136,18 @@ class IPortletAssignment(IContained, IAttributeAnnotatable):\n     IPortletStorages.\n     """\n \n-    title = schema.Bool(title=u\'Title\',\n-                        description=u\'The title of this assignment as displayed to the user\',\n-                        required=True)\n+    title = schema.Bool(\n+        title=u\'Title\',\n+        description=u\'The title of this assignment as displayed to the user\',\n+        required=True,\n+    )\n \n-    available = schema.Bool(title=u\'Available\',\n-                            description=u\'Whether or not this portlet should be rendered\',\n-                            required=True,\n-                            readonly=True)\n+    available = schema.Bool(\n+        title=u\'Available\',\n+        description=u\'Whether or not this portlet should be rendered\',\n+        required=True,\n+        readonly=True,\n+    )\n \n     data = Attribute(u\'Portlet data object\')\n \n@@ -163,18 +167,20 @@ class IPortletRenderer(IContentProvider):\n     """\n \n     __portlet_metadata__ = schema.Dict(\n-            title=u"Metadata",\n-            description=u"Information about the portlet set during portlet retrieval",\n-            required=True,\n-            readonly=True,\n-            key_type=schema.ASCIILine(),\n-            value_type=schema.TextLine(),\n-        )\n-\n-    available = schema.Bool(title=u\'Available\',\n-                            description=u\'Whether or not this portlet shuld be rendered\',\n-                            required=True,\n-                            readonly=True)\n+        title=u"Metadata",\n+        description=u"Information about the portlet set during portlet retrieval",\n+        required=True,\n+        readonly=True,\n+        key_type=schema.ASCIILine(),\n+        value_type=schema.TextLine(),\n+    )\n+\n+    available = schema.Bool(\n+        title=u\'Available\',\n+        description=u\'Whether or not this portlet shuld be rendered\',\n+        required=True,\n+        readonly=True,\n+    )\n \n \n # Discovery of portlets\n@@ -208,6 +214,7 @@ class IPortletStorage(IContainer):\n \n     Some common keys are found in plone.portlets.constants.\n     """\n+\n     contains(\'plone.portlets.interfaces.IPortletCategoryMapping\')\n \n \n@@ -219,10 +226,13 @@ class IPortletCategoryMapping(IContainer, IContained):\n     if this is the \'user\' category, the keys could be user ids, each of\n     which would be given a particular IPortletAssignmentMapping.\n     """\n+\n     contains(\'plone.portlets.interfaces.IPortletAssignmentMapping\')\n \n \n-class IPortletAssignmentMapping(IOrderedContainer, IContainerNamesContainer, IContained):\n+class IPortletAssignmentMapping(\n+    IOrderedContainer, IContainerNamesContainer, IContained\n+):\n     """A storage for portlet assignments.\n \n     An IPortletCategoryMapping manages one of these for each category of\n@@ -231,10 +241,15 @@ class IPortletAssignmentMapping(IOrderedContainer, IContainerNamesContainer, ICo\n     ILocalPortletAssignable and IPortletManager will be able to obtain the\n     appropriate container.\n     """\n+\n     contains(\'plone.portlets.interfaces.IPortletAssignment\')\n \n-    __manager__ = schema.TextLine(title=u"Name of the portlet manager this mapping belongs to")\n-    __category__ = schema.TextLine(title=u\'Name of the category this mapping belongs to\')\n+    __manager__ = schema.TextLine(\n+        title=u"Name of the portlet manager this mapping belongs to"\n+    )\n+    __category__ = schema.TextLine(\n+        title=u\'Name of the category this mapping belongs to\'\n+    )\n \n \n class ILocalPortletAssignmentManager(Interface):\n@@ -325,12 +340,15 @@ class IPortletManagerRenderer(IContentProvider):\n \n         If not set, the renderers will simply be called one by one, and their\n         output will be concatenated, separated by newlines.\n-        """)\n-\n-    visible = schema.Bool(title=u\'Visible\',\n-                          description=u\'Whether or not this portlet manager (column) will be rendered at all\',\n-                          required=True,\n-                          default=True)\n+        """\n+    )\n+\n+    visible = schema.Bool(\n+        title=u\'Visible\',\n+        description=u\'Whether or not this portlet manager (column) will be rendered at all\',\n+        required=True,\n+        default=True,\n+    )\n \n     def filter(portlets):\n         """Return a list of portlets to display that is a subset of\ndiff --git a/plone/portlets/manager.py b/plone/portlets/manager.py\nindex a521663..97e488b 100644\n--- a/plone/portlets/manager.py\n+++ b/plone/portlets/manager.py\n@@ -31,6 +31,7 @@ class PortletManagerRenderer(object):\n     instance of this class, by doing an adapter lookup for (context, request,\n     view, manager).\n     """\n+\n     adapts(Interface, IBrowserRequest, IBrowserView, IPortletManager)\n \n     template = None\n@@ -38,7 +39,7 @@ class PortletManagerRenderer(object):\n \n     def __init__(self, context, request, view, manager):\n         self.__parent__ = view\n-        self.manager = manager # part of interface\n+        self.manager = manager  # part of interface\n         self.context = context\n         self.request = request\n         self.__updated = False\n@@ -59,8 +60,9 @@ def filter(self, portlets):\n             except Exception as e:\n                 logger.exception(\n                     "Error while determining assignment availability of "\n-                    "portlet (%r %r %r): %s" % (\n-                    p[\'category\'], p[\'key\'], p[\'name\'], str(e)))\n+                    "portlet (%r %r %r): %s"\n+                    % (p[\'category\'], p[\'key\'], p[\'name\'], str(e))\n+                )\n         return filtered\n \n     def portletsToShow(self):\n@@ -90,7 +92,7 @@ def safe_render(self, portlet_renderer):\n         except ConflictError:\n             raise\n         except Exception:\n-            logger.exception(\'Error while rendering %r\' % (self, ))\n+            logger.exception(\'Error while rendering %r\' % (self,))\n             return self.error_message()\n \n     # Note: By passing in a parameter that\'s different for each portlet\n@@ -121,8 +123,9 @@ def _lazyLoadPortlets(self, manager):\n                 isAvailable = False\n                 logger.exception(\n                     "Error while determining renderer availability of portlet "\n-                    "(%r %r %r): %s" % (\n-                    p[\'category\'], p[\'key\'], p[\'name\'], str(e)))\n+                    "(%r %r %r): %s"\n+                    % (p[\'category\'], p[\'key\'], p[\'name\'], str(e))\n+                )\n \n             info[\'available\'] = isAvailable\n             items.append(info)\n@@ -133,8 +136,10 @@ def _dataToPortlet(self, data):\n         """Helper method to get the correct IPortletRenderer for the given\n         data object.\n         """\n-        return getMultiAdapter((self.context, self.request, self.__parent__,\n-                                self.manager, data, ), IPortletRenderer)\n+        return getMultiAdapter(\n+            (self.context, self.request, self.__parent__, self.manager, data),\n+            IPortletRenderer,\n+        )\n \n \n @implementer(IPortletManager)\n@@ -148,22 +153,25 @@ class PortletManager(PortletStorage):\n     __name__ = __parent__ = None\n \n     def __call__(self, context, request, view):\n-        return getMultiAdapter((context, request, view, self),\n-                               IPortletManagerRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, self), IPortletManagerRenderer\n+        )\n \n     def getAddablePortletTypes(self):\n         addable = []\n         for p in getUtilitiesFor(IPortletType):\n             # BBB - first condition, because starting with Plone 3.1\n-            #every p[1].for_ should be a list\n+            # every p[1].for_ should be a list\n             if not isinstance(p[1].for_, list):\n-                logger.warning("Deprecation Warning Portlet type %s is using "\n+                logger.warning(\n+                    "Deprecation Warning Portlet type %s is using "\n                     "a deprecated format for storing interfaces of portlet "\n                     "managers where it is addable. Its for_ attribute should "\n                     "be a list of portlet manager interfaces, using "\n                     "[zope.interface.Interface] for the portlet type to be "\n                     "addable anywhere. The old format will be unsupported in "\n-                    " Plone 4.0." % p[1].addview)\n+                    " Plone 4.0." % p[1].addview\n+                )\n                 if p[1].for_ is None or p[1].for_.providedBy(self):\n                     addable.append(p[1])\n             elif [i for i in p[1].for_ if i.providedBy(self)]:\ndiff --git a/plone/portlets/retriever.py b/plone/portlets/retriever.py\nindex 23f827a..4f45dbf 100644\n--- a/plone/portlets/retriever.py\n+++ b/plone/portlets/retriever.py\n@@ -22,6 +22,7 @@ class PortletRetriever(object):\n     This will examine the context and its parents for contextual portlets,\n     provided they provide ILocalPortletAssignable.\n     """\n+\n     adapts(Interface, IPortletManager)\n \n     def __init__(self, context, storage):\n@@ -94,9 +95,16 @@ def getPortlets(self):\n                     if local is not None:\n                         localManager = local.get(manager, None)\n                         if localManager is not None:\n-                            categories.extend([(CONTEXT_CATEGORY, currentpc.uid, a) for a in localManager.values()])\n-\n-                lpam = getMultiAdapter((assignable, self.storage), ILocalPortletAssignmentManager)\n+                            categories.extend(\n+                                [\n+                                    (CONTEXT_CATEGORY, currentpc.uid, a)\n+                                    for a in localManager.values()\n+                                ]\n+                            )\n+\n+                lpam = getMultiAdapter(\n+                    (assignable, self.storage), ILocalPortletAssignmentManager\n+                )\n                 if lpam.getBlacklistStatus(CONTEXT_CATEGORY):\n                     parentsBlocked = True\n                 for cat, cat_status in blacklisted.items():\n@@ -127,7 +135,7 @@ def getPortlets(self):\n                 mapping = self.storage.get(category, None)\n                 if mapping is not None:\n                     for a in mapping.get(key, {}).values():\n-                        categories.append((category, key, a, ))\n+                        categories.append((category, key, a))\n \n         assignments = []\n         for category, key, assignment in categories:\n@@ -138,11 +146,14 @@ def getPortlets(self):\n             except TypeError:\n                 # Portlet does not exist any longer\n                 continue\n-            assignments.append({\'category\': category,\n-                                \'key\': key,\n-                                \'name\': str(assignment.__name__),\n-                                \'assignment\': assignment\n-                                })\n+            assignments.append(\n+                {\n+                    \'category\': category,\n+                    \'key\': key,\n+                    \'name\': str(assignment.__name__),\n+                    \'assignment\': assignment,\n+                }\n+            )\n         return assignments\n \n \n@@ -152,6 +163,7 @@ class PlacelessPortletRetriever(PortletRetriever):\n \n     This will aggregate user portlets, then group portlets.\n     """\n+\n     adapts(Interface, IPlacelessPortletManager)\n \n     def __init__(self, context, storage):\n@@ -181,10 +193,13 @@ def getPortlets(self):\n                         if not settings.get(\'visible\', True):\n                             continue\n \n-                    assignments.append({\'category\': category,\n-                                        \'key\': key,\n-                                        \'name\': assignment.__name__,\n-                                        \'assignment\': assignment\n-                                        })\n+                    assignments.append(\n+                        {\n+                            \'category\': category,\n+                            \'key\': key,\n+                            \'name\': assignment.__name__,\n+                            \'assignment\': assignment,\n+                        }\n+                    )\n \n         return assignments\ndiff --git a/plone/portlets/settings.py b/plone/portlets/settings.py\nindex e80699d..14680de 100644\n--- a/plone/portlets/settings.py\n+++ b/plone/portlets/settings.py\n@@ -11,7 +11,6 @@\n \n @implementer(IPortletAssignmentSettings)\n class PortletAssignmentSettings(Contained):\n-\n     def __init__(self):\n         self.data = PersistentDict()\n \n@@ -35,6 +34,8 @@ def portletAssignmentSettingsFactory(context):\n     settings = annotations.get(ASSIGNMENT_SETTINGS_KEY, None)\n \n     if settings is None:\n-        settings = annotations[ASSIGNMENT_SETTINGS_KEY] = PortletAssignmentSettings()\n+        settings = annotations[\n+            ASSIGNMENT_SETTINGS_KEY\n+        ] = PortletAssignmentSettings()\n \n     return settings\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex e41df89..66daa5f 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -172,20 +172,26 @@ def test_portlet_metadata_availability():\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        doctest.DocFileSuite(\n-            \'README.txt\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags),\n-        doctest.DocFileSuite(\n-            \'uisupport.txt\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags),\n-        doctest.DocFileSuite(\n-            \'utils.txt\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags),\n-        doctest.DocTestSuite()))\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocFileSuite(\n+                \'README.txt\',\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n+            ),\n+            doctest.DocFileSuite(\n+                \'uisupport.txt\',\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n+            ),\n+            doctest.DocFileSuite(\n+                \'utils.txt\',\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n+            ),\n+            doctest.DocTestSuite(),\n+        )\n+    )\ndiff --git a/plone/portlets/utils.py b/plone/portlets/utils.py\nindex 35a4d41..91d3574 100644\n--- a/plone/portlets/utils.py\n+++ b/plone/portlets/utils.py\n@@ -66,5 +66,7 @@ def unhashPortletInfo(hash):\n     """\n     concat_txt = binascii.a2b_hex(hash).decode()\n     manager, category, key, name = concat_txt.splitlines()\n-    info = dict(manager=manager, category=category, key=key, name=name, hash=hash)\n+    info = dict(\n+        manager=manager, category=category, key=key, name=name, hash=hash\n+    )\n     return info\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..a825550\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,4 @@\n+[tool.black]\n+line-length = 79\n+skip-string-normalization = true\n+\ndiff --git a/setup.py b/setup.py\nindex 108edd0..4be5259 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,8 +8,9 @@\n     name=\'plone.portlets\',\n     version=version,\n     description="An extension of zope.viewlet to support dynamic portlets",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(\n+        open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n+    ),\n     classifiers=[\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n@@ -41,19 +42,19 @@\n             \'zope.configuration\',\n             \'zope.location\',\n             \'zope.security\',\n-        ],\n+        ]\n     ),\n     install_requires=[\n-      \'setuptools\',\n-      \'ZODB3\',\n-      \'plone.memoize\',\n-      \'zope.annotation\',\n-      \'zope.component\',\n-      \'zope.container\',\n-      \'zope.contentprovider\',\n-      \'zope.interface\',\n-      \'zope.publisher\',\n-      \'zope.schema\',\n-      \'zope.site\',\n+        \'setuptools\',\n+        \'ZODB3\',\n+        \'plone.memoize\',\n+        \'zope.annotation\',\n+        \'zope.component\',\n+        \'zope.container\',\n+        \'zope.contentprovider\',\n+        \'zope.interface\',\n+        \'zope.publisher\',\n+        \'zope.schema\',\n+        \'zope.site\',\n     ],\n-    )\n+)\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T10:20:55+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/9a0343d89e63b5520387f07eaa595bce2ad2315a

try to fix travis

Files changed:
M plone/portlets/tests.py
M setup.py
M tox.ini

b'diff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 66daa5f..0bc1464 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -3,7 +3,6 @@\n from zope.configuration.xmlconfig import XMLConfig\n \n import doctest\n-import plone.portlets\n import unittest\n \n \n@@ -18,6 +17,8 @@ def configurationSetUp(test):\n     import zope.container\n     import zope.contentprovider\n     import zope.security\n+    import plone.memoize\n+    import plone.portlets\n \n     XMLConfig(\'meta.zcml\', zope.security)()\n     XMLConfig(\'meta.zcml\', zope.component)()\n@@ -27,6 +28,7 @@ def configurationSetUp(test):\n     XMLConfig(\'configure.zcml\', zope.security)()\n     XMLConfig(\'configure.zcml\', zope.container)()\n     XMLConfig(\'configure.zcml\', zope.contentprovider)()\n+    XMLConfig(\'configure.zcml\', plone.memoize)()\n \n     XMLConfig(\'configure.zcml\', plone.portlets)()\n \ndiff --git a/setup.py b/setup.py\nindex 4be5259..1a5eb5f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,7 +22,6 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.6",\n         "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\ndiff --git a/tox.ini b/tox.ini\nindex a413b63..da4024c 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,6 +1,6 @@\n [tox]\n envlist =\n-    py27,py34,py35\n+    py27,py36,py37\n \n [testenv]\n deps =\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T10:25:05+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/71e807cd40a27660a253b0f47bbe29520ea90520

also fix travis

Files changed:
M .travis.yml

b'diff --git a/.travis.yml b/.travis.yml\nindex e5805d5..e6bd8ed 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -2,8 +2,8 @@ language: python\n sudo: false\n python:\n     - 2.7\n-    - 3.4\n-    - 3.5\n+    - 3.6\n+    - 3.7\n install:\n     - pip install tox-travis\n script:\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T12:11:24+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/4f17d362871c97b97901b7e56dd94427c67a7a36

fix tests and remove deprecations in tests

Files changed:
M CHANGES.rst
M plone/portlets/README.txt
M plone/portlets/tests.py
M plone/portlets/uisupport.txt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b7d19a6..eaffe59 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -20,6 +20,9 @@ Bug fixes:\n - Code style: black, isort\n   [jensens]\n \n+- Fix tests, also do not leave closed files.\n+  [jensens]\n+\n \n 2.3 (2016-11-01)\n ----------------\ndiff --git a/plone/portlets/README.txt b/plone/portlets/README.txt\nindex 873358f..823acdc 100644\n--- a/plone/portlets/README.txt\n+++ b/plone/portlets/README.txt\n@@ -197,7 +197,7 @@ registrations on it.\n   >>> ISite.providedBy(rootFolder)\n   True\n \n-  >>> from zope.site.hooks import setSite, setHooks\n+  >>> from zope.component.hooks import setSite, setHooks\n   >>> setSite(rootFolder)\n   >>> setHooks()\n \n@@ -227,7 +227,8 @@ We should now be able to get this via a provider: expression:\n   >>> import os, tempfile\n   >>> tempDir = tempfile.mkdtemp()\n   >>> templateFileName = os.path.join(tempDir, \'template.pt\')\n-  >>> _ = open(templateFileName, \'w\').write("""\n+  >>> with open(templateFileName, \'w\') as tpl:\n+  ...     output = tpl.write("""\n   ... <html>\n   ...   <body>\n   ...     <div class="left-column">\n@@ -924,7 +925,8 @@ placeless behaviour.\n   ...                    name=\'columns.dashboard\')\n \n   >>> dashboardFileName = os.path.join(tempDir, \'dashboard.pt\')\n-  >>> _ = open(dashboardFileName, \'w\').write("""\n+  >>> with open(dashboardFileName, \'w\') as dash:\n+  ...     output = dash.write("""\n   ... <html>\n   ...   <body>\n   ...     <div class="dashboard">\n@@ -933,6 +935,7 @@ placeless behaviour.\n   ...   </body>\n   ... </html>\n   ... """)\n+  <BLANKLINE>\n \n   >>> @adapter(Interface, IBrowserRequest)\n   ... class DashboardPage(BrowserPage):\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 0bc1464..887ebaf 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -9,7 +9,7 @@\n optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\n \n \n-def configurationSetUp(test):\n+def configurationSetUp(test=None):\n     setUp()\n \n     import zope.browserpage\n@@ -33,7 +33,7 @@ def configurationSetUp(test):\n     XMLConfig(\'configure.zcml\', plone.portlets)()\n \n \n-def configurationTearDown(test):\n+def configurationTearDown(test=None):\n     tearDown()\n \n \n@@ -68,109 +68,107 @@ def test_safe_render():\n \n \n def test_portlet_metadata_availability():\n-    r"""\n-    Check that the __portlet_metadata__ field is available when\n-    the PortletManagerRenderer checks for the availability of\n-    the PortletRenderers\n-\n-      >>> from zope.component import adapter\n-      >>> from zope.component import provideAdapter\n-      >>> from zope.interface import directlyProvides\n-      >>> from zope.interface import implementer\n-      >>> from zope.interface import Interface\n-\n-    Define a dummy PortletManager\n-\n-      >>> from plone.portlets.interfaces import IPortletManager\n-\n-      >>> class IDummyPortletManager(IPortletManager):\n-      ...     "Dummy portlet manager"\n-\n-      >>> @implementer(IDummyPortletManager)\n-      ... class DummyPortletManager:\n-      ...     __name__ = None\n-\n-    Define a dummy PortletRenderer that is only available in case\n-    it has __portlet_metadata__\n-\n-      >>> from plone.portlets.interfaces import IPortletRenderer\n-      >>> @implementer(IPortletRenderer)\n-      ... class DummyPortletRenderer:\n-      ...\n-      ...     @property\n-      ...     def available(self):\n-      ...         return getattr(self, \'__portlet_metadata__\', False)\n-      ...\n-      ...     def render(self):\n-      ...         return u\'dummy portlet renderer\'\n-      ...\n-      ...     def update(self):\n-      ...         pass\n+    # Check that the __portlet_metadata__ field is available when\n+    # the PortletManagerRenderer checks for the availability of\n+    # the PortletRenderers\n \n-    Define a dummy portlet retriever that adapts our dummy portlet manager\n-    and returns in its getPortlets a mock dictinary with a dummy\n-    PortletRenderer as p[\'assignment\'].data. For that, we need a class\n-    where we can set an attribute \'data\'\n+    from zope.component import adapter\n+    from zope.component import provideAdapter\n+    from zope.interface import implementer\n+    from zope.interface import Interface\n \n-      >>> class Obj(object):\n-      ...     pass\n+    # Define a dummy PortletManager\n \n-      >>> from plone.portlets.constants import CONTEXT_CATEGORY\n-      >>> from plone.portlets.interfaces import IPortletRetriever\n-      >>> from plone.portlets.retriever import PortletRetriever\n+    from plone.portlets.interfaces import IPortletManager\n \n-      >>> @implementer(IPortletRetriever)\n-      ... @adapter(Interface, IDummyPortletManager)\n-      ... class DummyPortletRetriever(PortletRetriever):\n-      ...\n-      ...     def getPortlets(self):\n-      ...         p = dict()\n-      ...         p[\'category\'] = CONTEXT_CATEGORY\n-      ...         p[\'key\'] = p[\'name\'] = u\'dummy\'\n-      ...         p[\'assignment\'] = obj = Obj()\n-      ...         obj.data = DummyPortletRenderer()\n-      ...         obj.available = True\n-      ...         return (p, )\n+    class IDummyPortletManager(IPortletManager):\n+        "Dummy portlet manager"\n \n-      >>> provideAdapter(DummyPortletRetriever)\n+    @implementer(IDummyPortletManager)\n+    class DummyPortletManager:\n+        __name__ = None\n \n-    For instantiating a PortletManagerRenderer, we need a TestRequest\n+    # Define a dummy PortletRenderer that is only available in case\n+    # it has __portlet_metadata__\n \n-      >>> from zope.publisher.browser import TestRequest\n+    from plone.portlets.interfaces import IPortletRenderer\n \n-    For our memoized views to work, we need to make the request annotatable\n+    @implementer(IPortletRenderer)\n+    class DummyPortletRenderer:\n+        @property\n+        def available(self):\n+            return getattr(self, \'__portlet_metadata__\', False)\n \n-      >>> from zope.annotation.attribute import AttributeAnnotations\n-      >>> from zope.annotation.interfaces import IAttributeAnnotatable\n-      >>> from zope.interface import classImplements\n+        def render(self):\n+            return u\'dummy portlet renderer\'\n \n-      >>> classImplements(TestRequest, IAttributeAnnotatable)\n-      >>> provideAdapter(AttributeAnnotations)\n+        def update(self):\n+            pass\n \n-    We need a dummy context that implements Interface\n+    # Define a dummy portlet retriever that adapts our dummy portlet manager\n+    # and returns in its getPortlets a mock dictinary with a dummy\n+    # PortletRenderer as p[\'assignment\'].data. For that, we need a class\n+    # where we can set an attribute \'data\'\n \n-      >>> @implementer(Interface)\n-      ... class DummyContext(object):\n-      ...     pass\n+    class Obj(object):\n+        pass\n \n-    We now test the PortletManagerRenderer. We override the _dataToPortlet\n-    method since our data is already our correct (dummy) IPortletRenderer\n+    from plone.portlets.constants import CONTEXT_CATEGORY\n+    from plone.portlets.interfaces import IPortletRetriever\n+    from plone.portlets.retriever import PortletRetriever\n \n-      >>> from plone.portlets.manager import PortletManagerRenderer\n-      >>> def _dataToPortlet(self, data):\n-      ...     return data\n-      >>> PortletManagerRenderer._dataToPortlet = _dataToPortlet\n-\n-    Check that a PortletManagerRenderer is capable of rendering our\n-    dummy PortletRenderer\n-\n-      >>> renderer = PortletManagerRenderer(DummyContext(),\n-      ...                                   TestRequest(),\n-      ...                                   None, DummyPortletManager())\n-      >>> renderer.update()\n-      >>> print(renderer.render())\n-      dummy portlet renderer\n-    """\n+    @implementer(IPortletRetriever)\n+    @adapter(Interface, IDummyPortletManager)\n+    class DummyPortletRetriever(PortletRetriever):\n+        def getPortlets(self):\n+            p = dict()\n+            p[\'category\'] = CONTEXT_CATEGORY\n+            p[\'key\'] = p[\'name\'] = u\'dummy\'\n+            p[\'assignment\'] = obj = Obj()\n+            obj.data = DummyPortletRenderer()\n+            obj.available = True\n+            return (p,)\n+\n+    provideAdapter(DummyPortletRetriever)\n+\n+    # For instantiating a PortletManagerRenderer, we need a TestRequest\n+\n+    from zope.publisher.browser import TestRequest\n+\n+    # For our memoized views to work, we need to make the request annotatable\n+\n+    from zope.annotation.interfaces import IAttributeAnnotatable\n+    from zope.annotation.attribute import AttributeAnnotations\n+    from zope.interface import classImplements\n+\n+    classImplements(TestRequest, IAttributeAnnotatable)\n+    provideAdapter(AttributeAnnotations)\n+\n+    # We need a dummy context that implements Interface\n+\n+    @implementer(Interface)\n+    class DummyContext(object):\n+        pass\n+\n+    # We now test the PortletManagerRenderer. We override the _dataToPortlet\n+    # method since our data is already our correct (dummy) IPortletRenderer\n+\n+    from plone.portlets.manager import PortletManagerRenderer\n+\n+    def _dataToPortlet(self, data):\n+        return data\n+\n+    PortletManagerRenderer._dataToPortlet = _dataToPortlet\n+\n+    # Check that a PortletManagerRenderer is capable of rendering our\n+    # dummy PortletRenderer\n+\n+    renderer = PortletManagerRenderer(\n+        DummyContext(), TestRequest(), None, DummyPortletManager()\n+    )\n+    renderer.update()\n+\n+    assert renderer.render() == "dummy portlet renderer"\n \n \n def test_suite():\n@@ -195,5 +193,10 @@ def test_suite():\n                 optionflags=optionflags,\n             ),\n             doctest.DocTestSuite(),\n+            unittest.FunctionTestCase(\n+                test_portlet_metadata_availability,\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+            ),\n         )\n     )\ndiff --git a/plone/portlets/uisupport.txt b/plone/portlets/uisupport.txt\nindex e4ae5ae..088ffef 100644\n--- a/plone/portlets/uisupport.txt\n+++ b/plone/portlets/uisupport.txt\n@@ -33,7 +33,7 @@ First, we must create a local site manager at a fictional root folder.\n   >>> ISite.providedBy(rootFolder)\n   True\n \n-  >>> from zope.site.hooks import setSite, setHooks\n+  >>> from zope.component.hooks import setSite, setHooks\n   >>> setSite(rootFolder)\n   >>> setHooks()\n \n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T16:00:47+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/7cf7ddb95bfe0d4f63abadf6a9828ab234dfb918

travis not needed here, we have jenkins, also refactred a test

Files changed:
M plone/portlets/manager.py
M plone/portlets/tests.py
M pyproject.toml
D .travis.yml
D tox.ini

b'diff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex e6bd8ed..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-language: python\n-sudo: false\n-python:\n-    - 2.7\n-    - 3.6\n-    - 3.7\n-install:\n-    - pip install tox-travis\n-script:\n-    - tox\n-notifications:\n-    email: false\ndiff --git a/plone/portlets/manager.py b/plone/portlets/manager.py\nindex 97e488b..2fe16a9 100644\n--- a/plone/portlets/manager.py\n+++ b/plone/portlets/manager.py\n@@ -7,7 +7,7 @@\n from plone.portlets.storage import PortletStorage\n from plone.portlets.utils import hashPortletInfo\n from ZODB.POSException import ConflictError\n-from zope.component import adapts\n+from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtilitiesFor\n from zope.contentprovider.interfaces import UpdateNotCalled\n@@ -23,7 +23,9 @@\n \n \n @implementer(IPortletManagerRenderer)\n+@adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager)\n class PortletManagerRenderer(object):\n+\n     """Default renderer for portlet managers.\n \n     When the zope.contentprovider handler for the provider: expression looks up\n@@ -32,8 +34,6 @@ class PortletManagerRenderer(object):\n     view, manager).\n     """\n \n-    adapts(Interface, IBrowserRequest, IBrowserView, IPortletManager)\n-\n     template = None\n     error_message = None\n \ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 887ebaf..604d7c9 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -12,6 +12,7 @@\n def configurationSetUp(test=None):\n     setUp()\n \n+    import zope.annotation\n     import zope.browserpage\n     import zope.component\n     import zope.container\n@@ -24,6 +25,7 @@ def configurationSetUp(test=None):\n     XMLConfig(\'meta.zcml\', zope.component)()\n     XMLConfig(\'meta.zcml\', zope.browserpage)()\n \n+    XMLConfig(\'configure.zcml\', zope.annotation)()\n     XMLConfig(\'configure.zcml\', zope.component)()\n     XMLConfig(\'configure.zcml\', zope.security)()\n     XMLConfig(\'configure.zcml\', zope.container)()\n@@ -131,19 +133,6 @@ def getPortlets(self):\n \n     provideAdapter(DummyPortletRetriever)\n \n-    # For instantiating a PortletManagerRenderer, we need a TestRequest\n-\n-    from zope.publisher.browser import TestRequest\n-\n-    # For our memoized views to work, we need to make the request annotatable\n-\n-    from zope.annotation.interfaces import IAttributeAnnotatable\n-    from zope.annotation.attribute import AttributeAnnotations\n-    from zope.interface import classImplements\n-\n-    classImplements(TestRequest, IAttributeAnnotatable)\n-    provideAdapter(AttributeAnnotations)\n-\n     # We need a dummy context that implements Interface\n \n     @implementer(Interface)\n@@ -160,11 +149,20 @@ def _dataToPortlet(self, data):\n \n     PortletManagerRenderer._dataToPortlet = _dataToPortlet\n \n+    # prepare a memoizeable test request\n+\n+    from zope.publisher.browser import TestRequest\n+    request = TestRequest()\n+\n+    from zope.interface import alsoProvides\n+    from zope.annotation.interfaces import IAttributeAnnotatable\n+    alsoProvides(request, IAttributeAnnotatable)\n+\n     # Check that a PortletManagerRenderer is capable of rendering our\n     # dummy PortletRenderer\n \n     renderer = PortletManagerRenderer(\n-        DummyContext(), TestRequest(), None, DummyPortletManager()\n+        DummyContext(), request, None, DummyPortletManager()\n     )\n     renderer.update()\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex a825550..d3728ba 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,4 +1,3 @@\n [tool.black]\n line-length = 79\n skip-string-normalization = true\n-\ndiff --git a/tox.ini b/tox.ini\ndeleted file mode 100644\nindex da4024c..0000000\n--- a/tox.ini\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-[tox]\n-envlist =\n-    py27,py36,py37\n-\n-[testenv]\n-deps =\n-    zope.testrunner\n-    .[test]\n-commands =\n-    zope-testrunner --test-path=. {posargs:-pvc}\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T16:01:45+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/070aed012bcbd14a865561969af389f91d0671e0

Merge branch 'master' into rm-deprecations

Files changed:
M setup.cfg
M setup.py

b'diff --git a/setup.cfg b/setup.cfg\nindex 43b4d21..4f43707 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,14 +1,3 @@\n-[check-manifest]\n-ignore =\n-    tox.ini\n-\n-[zest.releaser]\n-create-wheel = yes\n-\n-# When Python 2-3 compatible:\n-# [bdist_wheel]\n-# universal = 1\n-\n [isort]\n force_alphabetical_sort = True\n force_single_line = True\n@@ -17,3 +6,6 @@ line_length = 79\n not_skip = __init__.py\n use_parentheses = True\n multi_line_output = 3\n+\n+[bdist_wheel]\n+universal = 1\ndiff --git a/setup.py b/setup.py\nindex 1a5eb5f..8474c13 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -19,6 +19,7 @@\n         "Framework :: Plone :: 5.1",\n         "Framework :: Plone :: 5.2",\n         "Framework :: Zope2",\n+        "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2019-02-06T20:45:17+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/a922a393b001c4938529cb66fa8688ecb349ca25

Merge pull request #4 from plone/rm-deprecations

Rm deprecations

Files changed:
A pyproject.toml
M CHANGES.rst
M plone/__init__.py
M plone/portlets/README.txt
M plone/portlets/__init__.py
M plone/portlets/assignable.py
M plone/portlets/constants.py
M plone/portlets/events.py
M plone/portlets/interfaces.py
M plone/portlets/manager.py
M plone/portlets/registration.py
M plone/portlets/retriever.py
M plone/portlets/settings.py
M plone/portlets/storage.py
M plone/portlets/tests.py
M plone/portlets/uisupport.txt
M plone/portlets/utils.py
M setup.cfg
M setup.py
D .travis.yml
D tox.ini

b'diff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex e5805d5..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-language: python\n-sudo: false\n-python:\n-    - 2.7\n-    - 3.4\n-    - 3.5\n-install:\n-    - pip install tox-travis\n-script:\n-    - tox\n-notifications:\n-    email: false\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 5708b6f..eaffe59 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,14 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fixed some deprecation warnings.\n+  [jensens]\n+\n+- Code style: black, isort\n+  [jensens]\n+\n+- Fix tests, also do not leave closed files.\n+  [jensens]\n \n \n 2.3 (2016-11-01)\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..5d74e30 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -3,4 +3,5 @@\n     __import__(\'pkg_resources\').declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/portlets/README.txt b/plone/portlets/README.txt\nindex 873358f..823acdc 100644\n--- a/plone/portlets/README.txt\n+++ b/plone/portlets/README.txt\n@@ -197,7 +197,7 @@ registrations on it.\n   >>> ISite.providedBy(rootFolder)\n   True\n \n-  >>> from zope.site.hooks import setSite, setHooks\n+  >>> from zope.component.hooks import setSite, setHooks\n   >>> setSite(rootFolder)\n   >>> setHooks()\n \n@@ -227,7 +227,8 @@ We should now be able to get this via a provider: expression:\n   >>> import os, tempfile\n   >>> tempDir = tempfile.mkdtemp()\n   >>> templateFileName = os.path.join(tempDir, \'template.pt\')\n-  >>> _ = open(templateFileName, \'w\').write("""\n+  >>> with open(templateFileName, \'w\') as tpl:\n+  ...     output = tpl.write("""\n   ... <html>\n   ...   <body>\n   ...     <div class="left-column">\n@@ -924,7 +925,8 @@ placeless behaviour.\n   ...                    name=\'columns.dashboard\')\n \n   >>> dashboardFileName = os.path.join(tempDir, \'dashboard.pt\')\n-  >>> _ = open(dashboardFileName, \'w\').write("""\n+  >>> with open(dashboardFileName, \'w\') as dash:\n+  ...     output = dash.write("""\n   ... <html>\n   ...   <body>\n   ...     <div class="dashboard">\n@@ -933,6 +935,7 @@ placeless behaviour.\n   ...   </body>\n   ... </html>\n   ... """)\n+  <BLANKLINE>\n \n   >>> @adapter(Interface, IBrowserRequest)\n   ... class DashboardPage(BrowserPage):\ndiff --git a/plone/portlets/__init__.py b/plone/portlets/__init__.py\nindex 8fa2136..792d600 100644\n--- a/plone/portlets/__init__.py\n+++ b/plone/portlets/__init__.py\n@@ -1,2 +1 @@\n #\n-\ndiff --git a/plone/portlets/assignable.py b/plone/portlets/assignable.py\nindex 4b8612a..b044f7b 100644\n--- a/plone/portlets/assignable.py\n+++ b/plone/portlets/assignable.py\n@@ -1,24 +1,19 @@\n+from BTrees.OOBTree import OOBTree\n from persistent.dict import PersistentDict\n-\n-from zope.interface import implementer\n-from zope.interface import implementer\n-from zope.component import adapter\n-from zope.component import adapts\n-from zope.component import queryAdapter\n-from zope.annotation.interfaces import IAnnotations\n-\n+from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n+from plone.portlets.constants import CONTEXT_BLACKLIST_STATUS_KEY\n+from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.interfaces import IBlockingPortletManager\n+from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.portlets.interfaces import IPortletManager\n-\n from plone.portlets.storage import PortletAssignmentMapping\n-from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n-from plone.portlets.constants import CONTEXT_BLACKLIST_STATUS_KEY\n-from plone.portlets.constants import CONTEXT_CATEGORY\n-\n-from BTrees.OOBTree import OOBTree\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.component import adapts\n+from zope.component import queryAdapter\n+from zope.interface import implementer\n \n \n @adapter(ILocalPortletAssignable, IPortletManager)\n@@ -37,8 +32,9 @@ def localPortletAssignmentMappingAdapter(context, manager):\n         local = annotations[CONTEXT_ASSIGNMENT_KEY] = OOBTree()\n     portlets = local.get(manager.__name__, None)\n     if portlets is None:\n-        portlets = local[manager.__name__] = PortletAssignmentMapping(manager=manager.__name__,\n-                                                                      category=CONTEXT_CATEGORY)\n+        portlets = local[manager.__name__] = PortletAssignmentMapping(\n+            manager=manager.__name__, category=CONTEXT_CATEGORY\n+        )\n     return portlets\n \n \n@@ -47,6 +43,7 @@ class LocalPortletAssignmentManager(object):\n     """Default implementation of ILocalPortletAssignmentManager which stores\n     information in an annotation.\n     """\n+\n     adapts(ILocalPortletAssignable, IPortletManager)\n \n     def __init__(self, context, manager):\n@@ -71,7 +68,9 @@ def _getBlacklist(self, create=False):\n         local = annotations.get(CONTEXT_BLACKLIST_STATUS_KEY, None)\n         if local is None:\n             if create:\n-                local = annotations[CONTEXT_BLACKLIST_STATUS_KEY] = PersistentDict()\n+                local = annotations[\n+                    CONTEXT_BLACKLIST_STATUS_KEY\n+                ] = PersistentDict()\n             else:\n                 return None\n         blacklist = local.get(self.manager.__name__, None)\n@@ -87,10 +86,13 @@ class BlockingLocalPortletAssignmentManager(LocalPortletAssignmentManager):\n     """Implementation of ILocalPortletAssignmentManager which by default blocks\n     parent contextual portlets.\n     """\n+\n     adapts(ILocalPortletAssignable, IBlockingPortletManager)\n \n     def getBlacklistStatus(self, category):\n-        value = super(BlockingLocalPortletAssignmentManager, self).getBlacklistStatus(category)\n+        value = super(\n+            BlockingLocalPortletAssignmentManager, self\n+        ).getBlacklistStatus(category)\n         if category is CONTEXT_CATEGORY and value is None:\n             return True\n         return value\ndiff --git a/plone/portlets/constants.py b/plone/portlets/constants.py\nindex 440538b..708418e 100644\n--- a/plone/portlets/constants.py\n+++ b/plone/portlets/constants.py\n@@ -1,4 +1,3 @@\n-\n # Annotation keys\n \n CONTEXT_ASSIGNMENT_KEY = \'plone.portlets.contextassignments\'\ndiff --git a/plone/portlets/events.py b/plone/portlets/events.py\nindex 30efba9..74b90a4 100644\n--- a/plone/portlets/events.py\n+++ b/plone/portlets/events.py\n@@ -1,16 +1,14 @@\n-import zope.component\n-\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletManagerRenderer\n from zope.interface import Interface\n-from zope.component.interfaces import IUtilityRegistration\n-from zope.component.interfaces import IRegistrationEvent\n-from zope.component.interfaces import IRegistered\n-from zope.component.interfaces import IUnregistered\n-\n+from zope.interface.interfaces import IRegistered\n+from zope.interface.interfaces import IRegistrationEvent\n+from zope.interface.interfaces import IUnregistered\n+from zope.interface.interfaces import IUtilityRegistration\n from zope.publisher.interfaces.browser import IBrowserRequest\n from zope.publisher.interfaces.browser import IBrowserView\n \n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletManagerRenderer\n+import zope.component\n \n \n @zope.component.adapter(IUtilityRegistration, IRegistrationEvent)\n@@ -18,9 +16,11 @@ def dispatchToComponent(registration, event):\n     """When a utility is registered, dispatch to an event handler registered for\n     the particular component registered, the registration and the event.\n     """\n-    handlers = zope.component.subscribers((registration.component, registration, event), None)\n+    handlers = zope.component.subscribers(\n+        (registration.component, registration, event), None\n+    )\n     for handler in handlers:\n-        pass # getting them does the work\n+        pass  # getting them does the work\n \n \n @zope.component.adapter(IPortletManager, IUtilityRegistration, IRegistered)\n@@ -33,10 +33,12 @@ def registerPortletManagerRenderer(manager, registration, event):\n     """\n     manager.__name__ = registration.name\n     registry = registration.registry\n-    registry.registerAdapter(factory=manager,\n-                             required=(Interface, IBrowserRequest, IBrowserView),\n-                             provided=IPortletManagerRenderer,\n-                             name=registration.name)\n+    registry.registerAdapter(\n+        factory=manager,\n+        required=(Interface, IBrowserRequest, IBrowserView),\n+        provided=IPortletManagerRenderer,\n+        name=registration.name,\n+    )\n \n \n @zope.component.adapter(IPortletManager, IUtilityRegistration, IUnregistered)\n@@ -45,7 +47,9 @@ def unregisterPortletManagerRenderer(manager, registration, event):\n     IPortletManagerRenderer.\n     """\n     registry = registration.registry\n-    registry.unregisterAdapter(factory=manager,\n-                               required=(Interface, IBrowserRequest, IBrowserView),\n-                               provided=IPortletManagerRenderer,\n-                               name=registration.name)\n+    registry.unregisterAdapter(\n+        factory=manager,\n+        required=(Interface, IBrowserRequest, IBrowserView),\n+        provided=IPortletManagerRenderer,\n+        name=registration.name,\n+    )\ndiff --git a/plone/portlets/interfaces.py b/plone/portlets/interfaces.py\nindex a196340..2e3edfe 100644\n--- a/plone/portlets/interfaces.py\n+++ b/plone/portlets/interfaces.py\n@@ -1,15 +1,14 @@\n-from zope.interface import Interface, Attribute\n from zope import schema\n-\n from zope.annotation.interfaces import IAttributeAnnotatable\n-\n+from zope.container.constraints import contains\n from zope.container.interfaces import IContained\n from zope.container.interfaces import IContainer\n-from zope.container.interfaces import IOrderedContainer\n from zope.container.interfaces import IContainerNamesContainer\n-\n-from zope.container.constraints import contains\n+from zope.container.interfaces import IOrderedContainer\n from zope.contentprovider.interfaces import IContentProvider\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n \n # Context - the application layer must provide these\n \n@@ -28,8 +27,9 @@ class IPortletContext(Interface):\n     render portlets.\n     """\n \n-    uid = schema.TextLine(title=u"A unique id or path for this specific context",\n-                          required=True)\n+    uid = schema.TextLine(\n+        title=u"A unique id or path for this specific context", required=True\n+    )\n \n     def getParent():\n         """Get the portlet parent of the current context.\n@@ -83,21 +83,20 @@ class IPortletType(Interface):\n     providing IPortletType, so that UI can find them.\n     """\n \n-    title = schema.TextLine(\n-        title = u\'Title\',\n-        required = True)\n+    title = schema.TextLine(title=u\'Title\', required=True)\n \n-    description = schema.Text(\n-        title = u\'Description\',\n-        required = False)\n+    description = schema.Text(title=u\'Description\', required=False)\n \n     addview = schema.TextLine(\n-        title = u\'Add view\',\n-        description = u\'The name of the add view for assignments for this portlet type\',\n-        required = True)\n+        title=u\'Add view\',\n+        description=u\'The name of the add view for assignments for this portlet type\',\n+        required=True,\n+    )\n \n-    for_ = Attribute(\'An interface a portlet manager must have to allow this type of portlet. \' \\\n-                      \'May be None if there are no restrictions.\')\n+    for_ = Attribute(\n+        \'An interface a portlet manager must have to allow this type of portlet. \'\n+        \'May be None if there are no restrictions.\'\n+    )\n \n \n # Generic marker interface - a portlet may reference one of these\n@@ -137,14 +136,18 @@ class IPortletAssignment(IContained, IAttributeAnnotatable):\n     IPortletStorages.\n     """\n \n-    title = schema.Bool(title=u\'Title\',\n-                        description=u\'The title of this assignment as displayed to the user\',\n-                        required=True)\n+    title = schema.Bool(\n+        title=u\'Title\',\n+        description=u\'The title of this assignment as displayed to the user\',\n+        required=True,\n+    )\n \n-    available = schema.Bool(title=u\'Available\',\n-                            description=u\'Whether or not this portlet should be rendered\',\n-                            required=True,\n-                            readonly=True)\n+    available = schema.Bool(\n+        title=u\'Available\',\n+        description=u\'Whether or not this portlet should be rendered\',\n+        required=True,\n+        readonly=True,\n+    )\n \n     data = Attribute(u\'Portlet data object\')\n \n@@ -164,18 +167,20 @@ class IPortletRenderer(IContentProvider):\n     """\n \n     __portlet_metadata__ = schema.Dict(\n-            title=u"Metadata",\n-            description=u"Information about the portlet set during portlet retrieval",\n-            required=True,\n-            readonly=True,\n-            key_type=schema.ASCIILine(),\n-            value_type=schema.TextLine(),\n-        )\n-\n-    available = schema.Bool(title=u\'Available\',\n-                            description=u\'Whether or not this portlet shuld be rendered\',\n-                            required=True,\n-                            readonly=True)\n+        title=u"Metadata",\n+        description=u"Information about the portlet set during portlet retrieval",\n+        required=True,\n+        readonly=True,\n+        key_type=schema.ASCIILine(),\n+        value_type=schema.TextLine(),\n+    )\n+\n+    available = schema.Bool(\n+        title=u\'Available\',\n+        description=u\'Whether or not this portlet shuld be rendered\',\n+        required=True,\n+        readonly=True,\n+    )\n \n \n # Discovery of portlets\n@@ -209,6 +214,7 @@ class IPortletStorage(IContainer):\n \n     Some common keys are found in plone.portlets.constants.\n     """\n+\n     contains(\'plone.portlets.interfaces.IPortletCategoryMapping\')\n \n \n@@ -220,10 +226,13 @@ class IPortletCategoryMapping(IContainer, IContained):\n     if this is the \'user\' category, the keys could be user ids, each of\n     which would be given a particular IPortletAssignmentMapping.\n     """\n+\n     contains(\'plone.portlets.interfaces.IPortletAssignmentMapping\')\n \n \n-class IPortletAssignmentMapping(IOrderedContainer, IContainerNamesContainer, IContained):\n+class IPortletAssignmentMapping(\n+    IOrderedContainer, IContainerNamesContainer, IContained\n+):\n     """A storage for portlet assignments.\n \n     An IPortletCategoryMapping manages one of these for each category of\n@@ -232,10 +241,15 @@ class IPortletAssignmentMapping(IOrderedContainer, IContainerNamesContainer, ICo\n     ILocalPortletAssignable and IPortletManager will be able to obtain the\n     appropriate container.\n     """\n+\n     contains(\'plone.portlets.interfaces.IPortletAssignment\')\n \n-    __manager__ = schema.TextLine(title=u"Name of the portlet manager this mapping belongs to")\n-    __category__ = schema.TextLine(title=u\'Name of the category this mapping belongs to\')\n+    __manager__ = schema.TextLine(\n+        title=u"Name of the portlet manager this mapping belongs to"\n+    )\n+    __category__ = schema.TextLine(\n+        title=u\'Name of the category this mapping belongs to\'\n+    )\n \n \n class ILocalPortletAssignmentManager(Interface):\n@@ -326,12 +340,15 @@ class IPortletManagerRenderer(IContentProvider):\n \n         If not set, the renderers will simply be called one by one, and their\n         output will be concatenated, separated by newlines.\n-        """)\n-\n-    visible = schema.Bool(title=u\'Visible\',\n-                          description=u\'Whether or not this portlet manager (column) will be rendered at all\',\n-                          required=True,\n-                          default=True)\n+        """\n+    )\n+\n+    visible = schema.Bool(\n+        title=u\'Visible\',\n+        description=u\'Whether or not this portlet manager (column) will be rendered at all\',\n+        required=True,\n+        default=True,\n+    )\n \n     def filter(portlets):\n         """Return a list of portlets to display that is a subset of\ndiff --git a/plone/portlets/manager.py b/plone/portlets/manager.py\nindex 656a199..2fe16a9 100644\n--- a/plone/portlets/manager.py\n+++ b/plone/portlets/manager.py\n@@ -1,29 +1,31 @@\n-import logging\n-\n from plone.memoize.view import memoize\n-from zope.component import adapts\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletManagerRenderer\n+from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletRetriever\n+from plone.portlets.interfaces import IPortletType\n+from plone.portlets.storage import PortletStorage\n+from plone.portlets.utils import hashPortletInfo\n+from ZODB.POSException import ConflictError\n+from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtilitiesFor\n from zope.contentprovider.interfaces import UpdateNotCalled\n from zope.interface import implementer\n from zope.interface import Interface\n-from zope.publisher.interfaces.browser import IBrowserView\n from zope.publisher.interfaces.browser import IBrowserRequest\n-from ZODB.POSException import ConflictError\n+from zope.publisher.interfaces.browser import IBrowserView\n+\n+import logging\n \n-from plone.portlets.interfaces import IPortletRetriever\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import IPortletManagerRenderer\n-from plone.portlets.interfaces import IPortletRenderer\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.storage import PortletStorage\n-from plone.portlets.utils import hashPortletInfo\n \n logger = logging.getLogger(\'portlets\')\n \n \n @implementer(IPortletManagerRenderer)\n+@adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager)\n class PortletManagerRenderer(object):\n+\n     """Default renderer for portlet managers.\n \n     When the zope.contentprovider handler for the provider: expression looks up\n@@ -31,14 +33,13 @@ class PortletManagerRenderer(object):\n     instance of this class, by doing an adapter lookup for (context, request,\n     view, manager).\n     """\n-    adapts(Interface, IBrowserRequest, IBrowserView, IPortletManager)\n \n     template = None\n     error_message = None\n \n     def __init__(self, context, request, view, manager):\n         self.__parent__ = view\n-        self.manager = manager # part of interface\n+        self.manager = manager  # part of interface\n         self.context = context\n         self.request = request\n         self.__updated = False\n@@ -59,8 +60,9 @@ def filter(self, portlets):\n             except Exception as e:\n                 logger.exception(\n                     "Error while determining assignment availability of "\n-                    "portlet (%r %r %r): %s" % (\n-                    p[\'category\'], p[\'key\'], p[\'name\'], str(e)))\n+                    "portlet (%r %r %r): %s"\n+                    % (p[\'category\'], p[\'key\'], p[\'name\'], str(e))\n+                )\n         return filtered\n \n     def portletsToShow(self):\n@@ -90,7 +92,7 @@ def safe_render(self, portlet_renderer):\n         except ConflictError:\n             raise\n         except Exception:\n-            logger.exception(\'Error while rendering %r\' % (self, ))\n+            logger.exception(\'Error while rendering %r\' % (self,))\n             return self.error_message()\n \n     # Note: By passing in a parameter that\'s different for each portlet\n@@ -121,8 +123,9 @@ def _lazyLoadPortlets(self, manager):\n                 isAvailable = False\n                 logger.exception(\n                     "Error while determining renderer availability of portlet "\n-                    "(%r %r %r): %s" % (\n-                    p[\'category\'], p[\'key\'], p[\'name\'], str(e)))\n+                    "(%r %r %r): %s"\n+                    % (p[\'category\'], p[\'key\'], p[\'name\'], str(e))\n+                )\n \n             info[\'available\'] = isAvailable\n             items.append(info)\n@@ -133,8 +136,10 @@ def _dataToPortlet(self, data):\n         """Helper method to get the correct IPortletRenderer for the given\n         data object.\n         """\n-        return getMultiAdapter((self.context, self.request, self.__parent__,\n-                                self.manager, data, ), IPortletRenderer)\n+        return getMultiAdapter(\n+            (self.context, self.request, self.__parent__, self.manager, data),\n+            IPortletRenderer,\n+        )\n \n \n @implementer(IPortletManager)\n@@ -148,22 +153,25 @@ class PortletManager(PortletStorage):\n     __name__ = __parent__ = None\n \n     def __call__(self, context, request, view):\n-        return getMultiAdapter((context, request, view, self),\n-                               IPortletManagerRenderer)\n+        return getMultiAdapter(\n+            (context, request, view, self), IPortletManagerRenderer\n+        )\n \n     def getAddablePortletTypes(self):\n         addable = []\n         for p in getUtilitiesFor(IPortletType):\n             # BBB - first condition, because starting with Plone 3.1\n-            #every p[1].for_ should be a list\n+            # every p[1].for_ should be a list\n             if not isinstance(p[1].for_, list):\n-                logger.warning("Deprecation Warning Portlet type %s is using "\n+                logger.warning(\n+                    "Deprecation Warning Portlet type %s is using "\n                     "a deprecated format for storing interfaces of portlet "\n                     "managers where it is addable. Its for_ attribute should "\n                     "be a list of portlet manager interfaces, using "\n                     "[zope.interface.Interface] for the portlet type to be "\n                     "addable anywhere. The old format will be unsupported in "\n-                    " Plone 4.0." % p[1].addview)\n+                    " Plone 4.0." % p[1].addview\n+                )\n                 if p[1].for_ is None or p[1].for_.providedBy(self):\n                     addable.append(p[1])\n             elif [i for i in p[1].for_ if i.providedBy(self)]:\ndiff --git a/plone/portlets/registration.py b/plone/portlets/registration.py\nindex 2d58162..b53bd6e 100644\n--- a/plone/portlets/registration.py\n+++ b/plone/portlets/registration.py\n@@ -1,7 +1,6 @@\n-from zope.interface import implementer\n from persistent import Persistent\n-\n from plone.portlets.interfaces import IPortletType\n+from zope.interface import implementer\n \n \n @implementer(IPortletType)\ndiff --git a/plone/portlets/retriever.py b/plone/portlets/retriever.py\nindex da79d35..4f45dbf 100644\n--- a/plone/portlets/retriever.py\n+++ b/plone/portlets/retriever.py\n@@ -1,19 +1,18 @@\n-from zope.interface import implementer, Interface\n-from zope.component import adapts\n-from zope.component import getMultiAdapter\n-from zope.component import queryAdapter\n-from zope.annotation.interfaces import IAnnotations\n-\n-from plone.portlets.interfaces import IPortletContext\n+from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n+from plone.portlets.constants import CONTEXT_CATEGORY\n from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPlacelessPortletManager\n-from plone.portlets.interfaces import IPortletRetriever\n from plone.portlets.interfaces import IPortletAssignmentSettings\n-\n-from plone.portlets.constants import CONTEXT_ASSIGNMENT_KEY\n-from plone.portlets.constants import CONTEXT_CATEGORY\n+from plone.portlets.interfaces import IPortletContext\n+from plone.portlets.interfaces import IPortletManager\n+from plone.portlets.interfaces import IPortletRetriever\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n+from zope.component import queryAdapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n @implementer(IPortletRetriever)\n@@ -23,6 +22,7 @@ class PortletRetriever(object):\n     This will examine the context and its parents for contextual portlets,\n     provided they provide ILocalPortletAssignable.\n     """\n+\n     adapts(Interface, IPortletManager)\n \n     def __init__(self, context, storage):\n@@ -95,9 +95,16 @@ def getPortlets(self):\n                     if local is not None:\n                         localManager = local.get(manager, None)\n                         if localManager is not None:\n-                            categories.extend([(CONTEXT_CATEGORY, currentpc.uid, a) for a in localManager.values()])\n-\n-                lpam = getMultiAdapter((assignable, self.storage), ILocalPortletAssignmentManager)\n+                            categories.extend(\n+                                [\n+                                    (CONTEXT_CATEGORY, currentpc.uid, a)\n+                                    for a in localManager.values()\n+                                ]\n+                            )\n+\n+                lpam = getMultiAdapter(\n+                    (assignable, self.storage), ILocalPortletAssignmentManager\n+                )\n                 if lpam.getBlacklistStatus(CONTEXT_CATEGORY):\n                     parentsBlocked = True\n                 for cat, cat_status in blacklisted.items():\n@@ -128,7 +135,7 @@ def getPortlets(self):\n                 mapping = self.storage.get(category, None)\n                 if mapping is not None:\n                     for a in mapping.get(key, {}).values():\n-                        categories.append((category, key, a, ))\n+                        categories.append((category, key, a))\n \n         assignments = []\n         for category, key, assignment in categories:\n@@ -139,11 +146,14 @@ def getPortlets(self):\n             except TypeError:\n                 # Portlet does not exist any longer\n                 continue\n-            assignments.append({\'category\': category,\n-                                \'key\': key,\n-                                \'name\': str(assignment.__name__),\n-                                \'assignment\': assignment\n-                                })\n+            assignments.append(\n+                {\n+                    \'category\': category,\n+                    \'key\': key,\n+                    \'name\': str(assignment.__name__),\n+                    \'assignment\': assignment,\n+                }\n+            )\n         return assignments\n \n \n@@ -153,6 +163,7 @@ class PlacelessPortletRetriever(PortletRetriever):\n \n     This will aggregate user portlets, then group portlets.\n     """\n+\n     adapts(Interface, IPlacelessPortletManager)\n \n     def __init__(self, context, storage):\n@@ -182,10 +193,13 @@ def getPortlets(self):\n                         if not settings.get(\'visible\', True):\n                             continue\n \n-                    assignments.append({\'category\': category,\n-                                        \'key\': key,\n-                                        \'name\': assignment.__name__,\n-                                        \'assignment\': assignment\n-                                        })\n+                    assignments.append(\n+                        {\n+                            \'category\': category,\n+                            \'key\': key,\n+                            \'name\': assignment.__name__,\n+                            \'assignment\': assignment,\n+                        }\n+                    )\n \n         return assignments\ndiff --git a/plone/portlets/settings.py b/plone/portlets/settings.py\nindex d483950..14680de 100644\n--- a/plone/portlets/settings.py\n+++ b/plone/portlets/settings.py\n@@ -1,15 +1,16 @@\n-from zope.interface import implementer, implementer\n-from zope.component import adapter, queryAdapter\n-from zope.container.contained import Contained\n-from plone.portlets.interfaces import IPortletAssignment, IPortletAssignmentSettings\n from persistent.dict import PersistentDict\n-from zope.annotation import IAnnotations\n from plone.portlets.constants import ASSIGNMENT_SETTINGS_KEY\n+from plone.portlets.interfaces import IPortletAssignment\n+from plone.portlets.interfaces import IPortletAssignmentSettings\n+from zope.annotation import IAnnotations\n+from zope.component import adapter\n+from zope.component import queryAdapter\n+from zope.container.contained import Contained\n+from zope.interface import implementer\n \n \n @implementer(IPortletAssignmentSettings)\n class PortletAssignmentSettings(Contained):\n-\n     def __init__(self):\n         self.data = PersistentDict()\n \n@@ -33,6 +34,8 @@ def portletAssignmentSettingsFactory(context):\n     settings = annotations.get(ASSIGNMENT_SETTINGS_KEY, None)\n \n     if settings is None:\n-        settings = annotations[ASSIGNMENT_SETTINGS_KEY] = PortletAssignmentSettings()\n+        settings = annotations[\n+            ASSIGNMENT_SETTINGS_KEY\n+        ] = PortletAssignmentSettings()\n \n     return settings\ndiff --git a/plone/portlets/storage.py b/plone/portlets/storage.py\nindex 7ea9984..8f31f72 100644\n--- a/plone/portlets/storage.py\n+++ b/plone/portlets/storage.py\n@@ -6,9 +6,11 @@\n from zope.container.contained import Contained\n from zope.container.ordered import OrderedContainer\n from zope.interface import implementer\n+\n import logging\n import sys\n \n+\n # XXX: We coerce all mapping keys (things like user and group ids)\n # to unicode, because the OOBTree that we store them in will fall over with\n # mixed encoded-str and unicode keys. It may be better to store byte strings\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 7803355..604d7c9 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -1,37 +1,41 @@\n+from zope.component.testing import setUp\n+from zope.component.testing import tearDown\n+from zope.configuration.xmlconfig import XMLConfig\n+\n import doctest\n import unittest\n \n-import plone.portlets\n-\n-from zope.component.testing import setUp, tearDown\n-from zope.configuration.xmlconfig import XMLConfig\n-\n \n optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\n \n \n-def configurationSetUp(test):\n+def configurationSetUp(test=None):\n     setUp()\n \n+    import zope.annotation\n     import zope.browserpage\n     import zope.component\n     import zope.container\n     import zope.contentprovider\n     import zope.security\n+    import plone.memoize\n+    import plone.portlets\n \n     XMLConfig(\'meta.zcml\', zope.security)()\n     XMLConfig(\'meta.zcml\', zope.component)()\n     XMLConfig(\'meta.zcml\', zope.browserpage)()\n \n+    XMLConfig(\'configure.zcml\', zope.annotation)()\n     XMLConfig(\'configure.zcml\', zope.component)()\n     XMLConfig(\'configure.zcml\', zope.security)()\n     XMLConfig(\'configure.zcml\', zope.container)()\n     XMLConfig(\'configure.zcml\', zope.contentprovider)()\n+    XMLConfig(\'configure.zcml\', plone.memoize)()\n \n     XMLConfig(\'configure.zcml\', plone.portlets)()\n \n \n-def configurationTearDown(test):\n+def configurationTearDown(test=None):\n     tearDown()\n \n \n@@ -66,126 +70,131 @@ def test_safe_render():\n \n \n def test_portlet_metadata_availability():\n-    r"""\n-    Check that the __portlet_metadata__ field is available when\n-    the PortletManagerRenderer checks for the availability of\n-    the PortletRenderers\n-\n-      >>> from zope.component import adapter\n-      >>> from zope.component import provideAdapter\n-      >>> from zope.interface import directlyProvides\n-      >>> from zope.interface import implementer\n-      >>> from zope.interface import Interface\n-\n-    Define a dummy PortletManager\n-\n-      >>> from plone.portlets.interfaces import IPortletManager\n-\n-      >>> class IDummyPortletManager(IPortletManager):\n-      ...     "Dummy portlet manager"\n-\n-      >>> @implementer(IDummyPortletManager)\n-      ... class DummyPortletManager:\n-      ...     __name__ = None\n-\n-    Define a dummy PortletRenderer that is only available in case\n-    it has __portlet_metadata__\n-\n-      >>> from plone.portlets.interfaces import IPortletRenderer\n-      >>> @implementer(IPortletRenderer)\n-      ... class DummyPortletRenderer:\n-      ...\n-      ...     @property\n-      ...     def available(self):\n-      ...         return getattr(self, \'__portlet_metadata__\', False)\n-      ...\n-      ...     def render(self):\n-      ...         return u\'dummy portlet renderer\'\n-      ...\n-      ...     def update(self):\n-      ...         pass\n+    # Check that the __portlet_metadata__ field is available when\n+    # the PortletManagerRenderer checks for the availability of\n+    # the PortletRenderers\n \n-    Define a dummy portlet retriever that adapts our dummy portlet manager\n-    and returns in its getPortlets a mock dictinary with a dummy\n-    PortletRenderer as p[\'assignment\'].data. For that, we need a class\n-    where we can set an attribute \'data\'\n+    from zope.component import adapter\n+    from zope.component import provideAdapter\n+    from zope.interface import implementer\n+    from zope.interface import Interface\n \n-      >>> class Obj(object):\n-      ...     pass\n+    # Define a dummy PortletManager\n \n-      >>> from plone.portlets.constants import CONTEXT_CATEGORY\n-      >>> from plone.portlets.interfaces import IPortletRetriever\n-      >>> from plone.portlets.retriever import PortletRetriever\n+    from plone.portlets.interfaces import IPortletManager\n \n-      >>> @implementer(IPortletRetriever)\n-      ... @adapter(Interface, IDummyPortletManager)\n-      ... class DummyPortletRetriever(PortletRetriever):\n-      ...\n-      ...     def getPortlets(self):\n-      ...         p = dict()\n-      ...         p[\'category\'] = CONTEXT_CATEGORY\n-      ...         p[\'key\'] = p[\'name\'] = u\'dummy\'\n-      ...         p[\'assignment\'] = obj = Obj()\n-      ...         obj.data = DummyPortletRenderer()\n-      ...         obj.available = True\n-      ...         return (p, )\n+    class IDummyPortletManager(IPortletManager):\n+        "Dummy portlet manager"\n \n-      >>> provideAdapter(DummyPortletRetriever)\n+    @implementer(IDummyPortletManager)\n+    class DummyPortletManager:\n+        __name__ = None\n \n-    For instantiating a PortletManagerRenderer, we need a TestRequest\n+    # Define a dummy PortletRenderer that is only available in case\n+    # it has __portlet_metadata__\n \n-      >>> from zope.publisher.browser import TestRequest\n+    from plone.portlets.interfaces import IPortletRenderer\n \n-    For our memoized views to work, we need to make the request annotatable\n+    @implementer(IPortletRenderer)\n+    class DummyPortletRenderer:\n+        @property\n+        def available(self):\n+            return getattr(self, \'__portlet_metadata__\', False)\n \n-      >>> from zope.annotation.attribute import AttributeAnnotations\n-      >>> from zope.annotation.interfaces import IAttributeAnnotatable\n-      >>> from zope.interface import classImplements\n+        def render(self):\n+            return u\'dummy portlet renderer\'\n \n-      >>> classImplements(TestRequest, IAttributeAnnotatable)\n-      >>> provideAdapter(AttributeAnnotations)\n+        def update(self):\n+            pass\n \n-    We need a dummy context that implements Interface\n+    # Define a dummy portlet retriever that adapts our dummy portlet manager\n+    # and returns in its getPortlets a mock dictinary with a dummy\n+    # PortletRenderer as p[\'assignment\'].data. For that, we need a class\n+    # where we can set an attribute \'data\'\n \n-      >>> @implementer(Interface)\n-      ... class DummyContext(object):\n-      ...     pass\n+    class Obj(object):\n+        pass\n \n-    We now test the PortletManagerRenderer. We override the _dataToPortlet\n-    method since our data is already our correct (dummy) IPortletRenderer\n+    from plone.portlets.constants import CONTEXT_CATEGORY\n+    from plone.portlets.interfaces import IPortletRetriever\n+    from plone.portlets.retriever import PortletRetriever\n \n-      >>> from plone.portlets.manager import PortletManagerRenderer\n-      >>> def _dataToPortlet(self, data):\n-      ...     return data\n-      >>> PortletManagerRenderer._dataToPortlet = _dataToPortlet\n-\n-    Check that a PortletManagerRenderer is capable of rendering our\n-    dummy PortletRenderer\n-\n-      >>> renderer = PortletManagerRenderer(DummyContext(),\n-      ...                                   TestRequest(),\n-      ...                                   None, DummyPortletManager())\n-      >>> renderer.update()\n-      >>> print(renderer.render())\n-      dummy portlet renderer\n-    """\n+    @implementer(IPortletRetriever)\n+    @adapter(Interface, IDummyPortletManager)\n+    class DummyPortletRetriever(PortletRetriever):\n+        def getPortlets(self):\n+            p = dict()\n+            p[\'category\'] = CONTEXT_CATEGORY\n+            p[\'key\'] = p[\'name\'] = u\'dummy\'\n+            p[\'assignment\'] = obj = Obj()\n+            obj.data = DummyPortletRenderer()\n+            obj.available = True\n+            return (p,)\n+\n+    provideAdapter(DummyPortletRetriever)\n+\n+    # We need a dummy context that implements Interface\n+\n+    @implementer(Interface)\n+    class DummyContext(object):\n+        pass\n+\n+    # We now test the PortletManagerRenderer. We override the _dataToPortlet\n+    # method since our data is already our correct (dummy) IPortletRenderer\n+\n+    from plone.portlets.manager import PortletManagerRenderer\n+\n+    def _dataToPortlet(self, data):\n+        return data\n+\n+    PortletManagerRenderer._dataToPortlet = _dataToPortlet\n+\n+    # prepare a memoizeable test request\n+\n+    from zope.publisher.browser import TestRequest\n+    request = TestRequest()\n+\n+    from zope.interface import alsoProvides\n+    from zope.annotation.interfaces import IAttributeAnnotatable\n+    alsoProvides(request, IAttributeAnnotatable)\n+\n+    # Check that a PortletManagerRenderer is capable of rendering our\n+    # dummy PortletRenderer\n+\n+    renderer = PortletManagerRenderer(\n+        DummyContext(), request, None, DummyPortletManager()\n+    )\n+    renderer.update()\n+\n+    assert renderer.render() == "dummy portlet renderer"\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        doctest.DocFileSuite(\n-            \'README.txt\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags),\n-        doctest.DocFileSuite(\n-            \'uisupport.txt\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags),\n-        doctest.DocFileSuite(\n-            \'utils.txt\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags),\n-        doctest.DocTestSuite()))\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocFileSuite(\n+                \'README.txt\',\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n+            ),\n+            doctest.DocFileSuite(\n+                \'uisupport.txt\',\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n+            ),\n+            doctest.DocFileSuite(\n+                \'utils.txt\',\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n+            ),\n+            doctest.DocTestSuite(),\n+            unittest.FunctionTestCase(\n+                test_portlet_metadata_availability,\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+            ),\n+        )\n+    )\ndiff --git a/plone/portlets/uisupport.txt b/plone/portlets/uisupport.txt\nindex e4ae5ae..088ffef 100644\n--- a/plone/portlets/uisupport.txt\n+++ b/plone/portlets/uisupport.txt\n@@ -33,7 +33,7 @@ First, we must create a local site manager at a fictional root folder.\n   >>> ISite.providedBy(rootFolder)\n   True\n \n-  >>> from zope.site.hooks import setSite, setHooks\n+  >>> from zope.component.hooks import setSite, setHooks\n   >>> setSite(rootFolder)\n   >>> setHooks()\n \ndiff --git a/plone/portlets/utils.py b/plone/portlets/utils.py\nindex 1091408..91d3574 100644\n--- a/plone/portlets/utils.py\n+++ b/plone/portlets/utils.py\n@@ -1,7 +1,8 @@\n-from zope.component import getSiteManager\n-from zope.interface import Interface\n from plone.portlets.interfaces import IPortletType\n from plone.portlets.registration import PortletType\n+from zope.component import getSiteManager\n+from zope.interface import Interface\n+\n import binascii\n \n \n@@ -65,5 +66,7 @@ def unhashPortletInfo(hash):\n     """\n     concat_txt = binascii.a2b_hex(hash).decode()\n     manager, category, key, name = concat_txt.splitlines()\n-    info = dict(manager=manager, category=category, key=key, name=name, hash=hash)\n+    info = dict(\n+        manager=manager, category=category, key=key, name=name, hash=hash\n+    )\n     return info\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..d3728ba\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,3 @@\n+[tool.black]\n+line-length = 79\n+skip-string-normalization = true\ndiff --git a/setup.cfg b/setup.cfg\nindex 64d953a..4f43707 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,11 @@\n-[check-manifest]\n-ignore =\n-    tox.ini\n-\n-\n+[isort]\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 79\n+not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\n \n [bdist_wheel]\n universal = 1\ndiff --git a/setup.py b/setup.py\nindex cd91d52..8474c13 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,6 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = \'2.3.1.dev0\'\n \n@@ -6,8 +8,9 @@\n     name=\'plone.portlets\',\n     version=version,\n     description="An extension of zope.viewlet to support dynamic portlets",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(\n+        open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n+    ),\n     classifiers=[\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n@@ -20,7 +23,6 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.6",\n         "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n@@ -40,19 +42,19 @@\n             \'zope.configuration\',\n             \'zope.location\',\n             \'zope.security\',\n-        ],\n+        ]\n     ),\n     install_requires=[\n-      \'setuptools\',\n-      \'ZODB3\',\n-      \'plone.memoize\',\n-      \'zope.annotation\',\n-      \'zope.component\',\n-      \'zope.container\',\n-      \'zope.contentprovider\',\n-      \'zope.interface\',\n-      \'zope.publisher\',\n-      \'zope.schema\',\n-      \'zope.site\',\n+        \'setuptools\',\n+        \'ZODB3\',\n+        \'plone.memoize\',\n+        \'zope.annotation\',\n+        \'zope.component\',\n+        \'zope.container\',\n+        \'zope.contentprovider\',\n+        \'zope.interface\',\n+        \'zope.publisher\',\n+        \'zope.schema\',\n+        \'zope.site\',\n     ],\n-    )\n+)\ndiff --git a/tox.ini b/tox.ini\ndeleted file mode 100644\nindex a413b63..0000000\n--- a/tox.ini\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-[tox]\n-envlist =\n-    py27,py34,py35\n-\n-[testenv]\n-deps =\n-    zope.testrunner\n-    .[test]\n-commands =\n-    zope-testrunner --test-path=. {posargs:-pvc}\n'

