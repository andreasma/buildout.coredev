Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2018-07-30T16:00:21+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.statusmessages/commit/649cb3916a2d719e45959eabed584c9a5c8d485a

use umlaut Ã¤ in order to check for https://github.com/plone/Products.CMFPlone/issues/2478

Files changed:
M CHANGES.rst
M Products/statusmessages/message.py
M Products/statusmessages/tests/test_adapter.py
M Products/statusmessages/tests/test_encoding.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 91fa417..d15acce 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Use Umlaut \xc3\xa4 in tests in order to check string/bytes handling.\n+  [jensens]\n \n \n 5.0.3 (2018-06-21)\ndiff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex 6af7b25..bea018a 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -20,7 +20,7 @@ def _unicode(value):\n \n \n @implementer(IMessage)\n-class Message:\n+class Message(object):\n     """A single status message.\n \n     Let\'s make sure that this implementation actually fulfills the\ndiff --git a/Products/statusmessages/tests/test_adapter.py b/Products/statusmessages/tests/test_adapter.py\nindex 1679433..5420ef8 100644\n--- a/Products/statusmessages/tests/test_adapter.py\n+++ b/Products/statusmessages/tests/test_adapter.py\n@@ -1,7 +1,5 @@\n # -*- coding: UTF-8 -*-\n """ StatusMessage adapter tests. """\n-\n-import six\n import unittest\n \n \n@@ -59,7 +57,7 @@ def test_directives(self):\n \n         Add one message\n \n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n \n         Now check the results\n \n@@ -68,7 +66,7 @@ def test_directives(self):\n           1\n \n           >>> messages[0].message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> messages[0].type\n           u\'info\'\n@@ -90,7 +88,7 @@ def test_directives(self):\n \n         Add one message\n \n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n \n         Publish the request\n \n@@ -103,7 +101,7 @@ def test_directives(self):\n           1\n \n           >>> messages[0].message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> messages[0].type\n           u\'info\'\n@@ -115,8 +113,8 @@ def test_directives(self):\n \n         Add two messages (without publishing)\n \n-          >>> status.add(u\'test\', type=u\'info\')\n-          >>> status.add(u\'test1\', u\'warn\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st1\', u\'warn\')\n \n         And check the results again\n \n@@ -127,7 +125,7 @@ def test_directives(self):\n           >>> test = messages[1]\n \n           >>> test.message\n-          u\'test1\'\n+          u\'t\xc3\xa4st1\'\n \n           >>> test.type\n           u\'warn\'\n@@ -139,7 +137,7 @@ def test_directives(self):\n \n         Add two messages (with publishing)\n \n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n           >>> fakePublish(request)\n           >>> status.add(u\'test1\', u\'warn\')\n \n@@ -165,8 +163,8 @@ def test_directives(self):\n \n         Add two identical messages\n \n-          >>> status.add(u\'test\', type=u\'info\')\n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n \n         And check the results again\n \n@@ -178,7 +176,7 @@ def test_directives(self):\n           >>> test = messages[0]\n \n           >>> test.message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> test.type\n           u\'info\'\n@@ -210,7 +208,7 @@ def test_directives(self):\n         Messages are stored as base64-ed cookie values, so we must make sure we\n         create proper header values; all ascii characters, and no newlines:\n \n-          >>> status.add(u\'test\' * 40, type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\' * 40, type=u\'info\')\n           >>> cookies = [c[\'value\'] for c in request.response.cookies.values()]\n           >>> cookies = \'\'.join(cookies)\n           >>> cookies == six.text_type(cookies).encode(\'ASCII\')\n@@ -263,7 +261,7 @@ def test_301(self):\n \n         Add one message\n \n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n \n         Publish a redirect response that also happened to call show().\n         This could happen if the redirect (unnecessarily)\n@@ -275,7 +273,7 @@ def test_301(self):\n           1\n \n           >>> messages[0].message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> messages[0].type\n           u\'info\'\n@@ -295,7 +293,7 @@ def test_301(self):\n           1\n \n           >>> messages[0].message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> messages[0].type\n           u\'info\'\ndiff --git a/Products/statusmessages/tests/test_encoding.py b/Products/statusmessages/tests/test_encoding.py\nindex 9690677..599aa26 100644\n--- a/Products/statusmessages/tests/test_encoding.py\n+++ b/Products/statusmessages/tests/test_encoding.py\n@@ -15,16 +15,16 @@ def test_encoding(self):\n           >>> from Products.statusmessages.message import Message\n           >>> from Products.statusmessages.message import decode\n \n-          >>> m = Message(u\'spam\', u\'eggs\')\n+          >>> m = Message(u\'sp\xc3\xa4m\', u\'eggs\')\n           >>> m.encode()\n           \'\\x00\\x84spameggs\'\n \n           >>> decode(m.encode())[0] == m\n           True\n \n-          >>> m = Message(u\'spam\')\n+          >>> m = Message(u\'sp\xc3\xa4m\')\n           >>> m.encode()\n-          \'\\x00\\x80spam\'\n+          \'\\x00\\xa0sp\\xc3\\xa4m\'\n \n           >>> decode(m.encode())[0] == m\n           True\n@@ -39,9 +39,9 @@ def test_decoding(self):\n \n         Craft a wrong value:\n \n-          >>> m, rem = decode(\'\\x01\\x84spameggs\')\n+          >>> m, rem = decode(\'\\x00\\x84spameggs\')\n           >>> m.message, m.type\n-          (u\'spameggs\', u\'\')\n+          (u\'sp\xc3\xa4meggs\', u\'\')\n \n           >>> rem\n           \'\'\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2018-07-30T16:36:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.statusmessages/commit/ae004f6d012f451f65cb1bc51aff0112969d6d5b

convert doc to unittest

Files changed:
M CHANGES.rst
M Products/statusmessages/adapter.py
M Products/statusmessages/tests/test_encoding.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d15acce..5c24cb6 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,6 +15,7 @@ New features:\n Bug fixes:\n \n - Use Umlaut \xc3\xa4 in tests in order to check string/bytes handling.\n+  Refactor test_encoding to unittest.\n   [jensens]\n \n \ndiff --git a/Products/statusmessages/adapter.py b/Products/statusmessages/adapter.py\nindex 2917820..6d490ad 100644\n--- a/Products/statusmessages/adapter.py\n+++ b/Products/statusmessages/adapter.py\n@@ -19,11 +19,11 @@ class StatusMessage(object):\n     """Adapter for the BrowserRequest to handle status messages.\n \n     Let\'s make sure that this implementation actually fulfills the\n-    \'IStatusMessage\' API.\n+    \'IStatusMessage\' API::\n \n-      >>> from zope.interface.verify import verifyClass\n-      >>> verifyClass(IStatusMessage, StatusMessage)\n-      True\n+        >>> from zope.interface.verify import verifyClass\n+        >>> verifyClass(IStatusMessage, StatusMessage)\n+        True\n     """\n \n     def __init__(self, context):\ndiff --git a/Products/statusmessages/tests/test_encoding.py b/Products/statusmessages/tests/test_encoding.py\nindex 599aa26..8472104 100644\n--- a/Products/statusmessages/tests/test_encoding.py\n+++ b/Products/statusmessages/tests/test_encoding.py\n@@ -1,72 +1,75 @@\n # -*- coding: UTF-8 -*-\n-"""\n-    Encoding tests.\n-"""\n-\n import unittest\n \n-\n class TestEncoding(unittest.TestCase):\n \n-    def test_encoding(self):\n-        r"""\n-        Test message encoding:\n-\n-          >>> from Products.statusmessages.message import Message\n-          >>> from Products.statusmessages.message import decode\n-\n-          >>> m = Message(u\'sp\xc3\xa4m\', u\'eggs\')\n-          >>> m.encode()\n-          \'\\x00\\x84spameggs\'\n-\n-          >>> decode(m.encode())[0] == m\n-          True\n-\n-          >>> m = Message(u\'sp\xc3\xa4m\')\n-          >>> m.encode()\n-          \'\\x00\\xa0sp\\xc3\\xa4m\'\n-\n-          >>> decode(m.encode())[0] == m\n-          True\n+    def test_encoding_msg_with_type(self):\n+        """Test message encoding:\n         """\n+        from Products.statusmessages.message import Message\n+        from Products.statusmessages.message import decode\n+        m = Message(u\'sp\xc3\xa4m\', u\'eggs\')\n+        self.assertEqual(\n+            m.encode(),\n+            \'\\x00\\xa4sp\\xc3\\xa4meggs\'\n+        )\n+        self.assertEqual(decode(m.encode())[0], m)\n+\n+    def test_encoding_msg_without_type(self):\n+        from Products.statusmessages.message import Message\n+        from Products.statusmessages.message import decode\n+        m = Message(u\'sp\xc3\xa4m\')\n+        self.assertEqual(\n+            m,\n+            Message(u\'sp\xc3\xa4m\'),\n+        )\n+        self.assertEqual(m.encode(), \'\\x00\\xa0sp\\xc3\\xa4m\')\n+        self.assertEqual(decode(m.encode())[0], m)\n \n     def test_decoding(self):\n-        r"""\n-        Test message decoding:\n-\n-          >>> from Products.statusmessages.message import Message\n-          >>> from Products.statusmessages.message import decode\n-\n-        Craft a wrong value:\n-\n-          >>> m, rem = decode(\'\\x00\\x84spameggs\')\n-          >>> m.message, m.type\n-          (u\'sp\xc3\xa4meggs\', u\'\')\n-\n-          >>> rem\n-          \'\'\n-\n-        Craft another wrong value:\n-\n-          >>> m, rem = decode(\'\\x00\\x24spameggs\')\n-          >>> m.message, m.type\n-          (u\'s\', u\'pame\')\n-\n-          >>> rem\n-          \'ggs\'\n-\n-        And another wrong value:\n-\n-          >>> m, rem = decode(\'\\x00spameggs\')\n-          >>> m.message, m.type\n-          (u\'pam\', u\'eggs\')\n-\n-          >>> rem\n-          \'\'\n-\n-        And yet another wrong value:\n-\n-          >>> m, rem = decode(\'\')\n-          >>> m is None, rem is \'\'\n-          (True, True)\n+        """Test message decoding:\n         """\n+        from Products.statusmessages.message import Message\n+        from Products.statusmessages.message import decode\n+\n+        # Craft a wrong value:\n+        m, rem = decode(\'\\x01\\x84spameggs\')\n+        self.assertEqual(\n+            m.message,\n+            u\'spameggs\',\n+        )\n+        self.assertEqual(\n+          m.type,\n+          u\'\',\n+        )\n+        self.assertEqual(rem, \'\')\n+\n+        # Craft another wrong value:\n+        m, rem = decode(\'\\x00\\x24spameggs\')\n+        self.assertEqual(\n+            m.message,\n+            u\'s\',\n+        )\n+        self.assertEqual(\n+          m.type,\n+          u\'pame\',\n+        )\n+        self.assertEqual(rem, \'ggs\')\n+\n+        # And another wrong value:\n+        m, rem = decode(\'\\x00spameggs\')\n+        self.assertEqual(\n+            m.message,\n+            u\'pam\',\n+        )\n+        self.assertEqual(\n+          m.type,\n+          u\'eggs\',\n+        )\n+        self.assertEqual(rem, \'\')\n+\n+        # And yet another wrong value:\n+        m, rem = decode(\'\')\n+\n+        self.assertIs(m, None)\n+        self.assertEqual(rem , \'\')\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2018-07-30T17:13:57+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.statusmessages/commit/7d27726e2b056be9abcd81c1b98f27bda40b506c

fixes plone/Products.CMFPlone#2478

Files changed:
M Products/statusmessages/message.py

b'diff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex bea018a..99c150b 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -79,14 +79,17 @@ def encode(self):\n         message length and 5 bits for the type length followed by two values.\n         """\n         message = _utf8(self.message)[:0x3FF]  # we can store 2^11 bytes\n-        type = _utf8(self.type)[:0x1F]         # we can store 2^5 bytes\n+        type_ = _utf8(self.type)[:0x1F]         # we can store 2^5 bytes\n         size = (len(message) << 5) + (len(type) & 31)  # pack into 16 bits\n \n         return struct.pack(\n-            \'!H{0}s{1}s\'.format(len(message), len(type)),\n+            b\'!H{0}s{1}s\'.format(\n+                len(message),\n+                len(type_)\n+            ),\n             size,\n             message,\n-            type,\n+            type_,\n         )\n \n \n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2018-07-30T17:20:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.statusmessages/commit/2da458219ce61ec5e43be32480564b183ad176c6

one more masked type

Files changed:
M Products/statusmessages/message.py

b'diff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex 99c150b..9daca84 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -80,7 +80,7 @@ def encode(self):\n         """\n         message = _utf8(self.message)[:0x3FF]  # we can store 2^11 bytes\n         type_ = _utf8(self.type)[:0x1F]         # we can store 2^5 bytes\n-        size = (len(message) << 5) + (len(type) & 31)  # pack into 16 bits\n+        size = (len(message) << 5) + (len(type_) & 31)  # pack into 16 bits\n \n         return struct.pack(\n             b\'!H{0}s{1}s\'.format(\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2018-07-30T18:26:06+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.statusmessages/commit/784c8de14bd30832509ef06a5a4874652b7a48f4

fix for Python 2/3

Files changed:
M Products/statusmessages/message.py
M Products/statusmessages/tests/test_encoding.py
M setup.py

b'diff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex 9daca84..3c8b592 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -12,7 +12,7 @@ def _utf8(value):\n         return value.encode(\'utf-8\')\n     elif isinstance(value, six.binary_type):\n         return value\n-    return \'\'\n+    return b\'\'\n \n \n def _unicode(value):\n@@ -78,19 +78,16 @@ def encode(self):\n         The format consists of a two bytes length header of 11 bits for the\n         message length and 5 bits for the type length followed by two values.\n         """\n+\n+        if six.PY3:\n+            fmt_tpl = \'!H{0}s{1}s\'\n+        else:\n+            fmt_tpl = b\'!H{0}s{1}s\'\n         message = _utf8(self.message)[:0x3FF]  # we can store 2^11 bytes\n-        type_ = _utf8(self.type)[:0x1F]         # we can store 2^5 bytes\n+        type_ = _utf8(self.type)[:0x1F]  # we can store 2^5 bytes\n         size = (len(message) << 5) + (len(type_) & 31)  # pack into 16 bits\n-\n-        return struct.pack(\n-            b\'!H{0}s{1}s\'.format(\n-                len(message),\n-                len(type_)\n-            ),\n-            size,\n-            message,\n-            type_,\n-        )\n+        fmt = fmt_tpl.format(len(message), len(type_))\n+        return struct.pack(fmt, size, message, type_)\n \n \n def decode(value):\n@@ -98,7 +95,7 @@ def decode(value):\n     Decode messages from a cookie\n \n     We return the decoded message object, and the remainder of the cookie\n-    value (it can contain further messages).\n+    value as bytes (it can contain further messages).\n \n     We expect at least 2 bytes (size information).\n     """\n@@ -110,4 +107,4 @@ def decode(value):\n             _unicode(value[msize + 2:msize + tsize + 2]),\n         )\n         return message, value[msize + tsize + 2:]\n-    return None, \'\'\n+    return None, b\'\'\ndiff --git a/Products/statusmessages/tests/test_encoding.py b/Products/statusmessages/tests/test_encoding.py\nindex 8472104..1af3325 100644\n--- a/Products/statusmessages/tests/test_encoding.py\n+++ b/Products/statusmessages/tests/test_encoding.py\n@@ -1,6 +1,9 @@\n # -*- coding: UTF-8 -*-\n+from __future__ import unicode_literals\n+\n import unittest\n \n+\n class TestEncoding(unittest.TestCase):\n \n     def test_encoding_msg_with_type(self):\n@@ -8,68 +11,67 @@ def test_encoding_msg_with_type(self):\n         """\n         from Products.statusmessages.message import Message\n         from Products.statusmessages.message import decode\n-        m = Message(u\'sp\xc3\xa4m\', u\'eggs\')\n+        m = Message(\'sp\xc3\xa4m\', \'eggs\')\n         self.assertEqual(\n             m.encode(),\n-            \'\\x00\\xa4sp\\xc3\\xa4meggs\'\n+            b\'\\x00\\xa4sp\\xc3\\xa4meggs\',\n         )\n         self.assertEqual(decode(m.encode())[0], m)\n \n     def test_encoding_msg_without_type(self):\n         from Products.statusmessages.message import Message\n         from Products.statusmessages.message import decode\n-        m = Message(u\'sp\xc3\xa4m\')\n+        m = Message(\'sp\xc3\xa4m\')\n         self.assertEqual(\n             m,\n-            Message(u\'sp\xc3\xa4m\'),\n+            Message(\'sp\xc3\xa4m\'),\n         )\n-        self.assertEqual(m.encode(), \'\\x00\\xa0sp\\xc3\\xa4m\')\n+        self.assertEqual(m.encode(), b\'\\x00\\xa0sp\\xc3\\xa4m\')\n         self.assertEqual(decode(m.encode())[0], m)\n \n     def test_decoding(self):\n         """Test message decoding:\n         """\n-        from Products.statusmessages.message import Message\n         from Products.statusmessages.message import decode\n \n         # Craft a wrong value:\n-        m, rem = decode(\'\\x01\\x84spameggs\')\n+        m, rem = decode(b\'\\x01\\x84spameggs\')\n         self.assertEqual(\n             m.message,\n-            u\'spameggs\',\n+            \'spameggs\',\n         )\n         self.assertEqual(\n-          m.type,\n-          u\'\',\n+            m.type,\n+            \'\',\n         )\n-        self.assertEqual(rem, \'\')\n+        self.assertEqual(rem, b\'\')\n \n         # Craft another wrong value:\n-        m, rem = decode(\'\\x00\\x24spameggs\')\n+        m, rem = decode(b\'\\x00\\x24spameggs\')\n         self.assertEqual(\n             m.message,\n-            u\'s\',\n+            \'s\',\n         )\n         self.assertEqual(\n-          m.type,\n-          u\'pame\',\n+            m.type,\n+            \'pame\',\n         )\n-        self.assertEqual(rem, \'ggs\')\n+        self.assertEqual(rem, b\'ggs\')\n \n         # And another wrong value:\n-        m, rem = decode(\'\\x00spameggs\')\n+        m, rem = decode(b\'\\x00spameggs\')\n         self.assertEqual(\n             m.message,\n-            u\'pam\',\n+            \'pam\',\n         )\n         self.assertEqual(\n-          m.type,\n-          u\'eggs\',\n+            m.type,\n+            \'eggs\',\n         )\n-        self.assertEqual(rem, \'\')\n+        self.assertEqual(rem, b\'\')\n \n         # And yet another wrong value:\n         m, rem = decode(\'\')\n \n         self.assertIs(m, None)\n-        self.assertEqual(rem , \'\')\n+        self.assertEqual(rem, b\'\')\ndiff --git a/setup.py b/setup.py\nindex 53a426c..232bdba 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,6 +2,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = \'5.0.4.dev0\'\n \n setup(\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2018-07-30T20:57:51+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/Products.statusmessages/commit/9e63e42778e48520d313dcd06f049b4483cd1afc

Merge pull request #10 from plone/fix-plone-Products-CMFPlone-issues-2478

Fix plone products cmf plone issues 2478

Files changed:
M CHANGES.rst
M Products/statusmessages/adapter.py
M Products/statusmessages/message.py
M Products/statusmessages/tests/test_adapter.py
M Products/statusmessages/tests/test_encoding.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 91fa417..5c24cb6 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Use Umlaut \xc3\xa4 in tests in order to check string/bytes handling.\n+  Refactor test_encoding to unittest.\n+  [jensens]\n \n \n 5.0.3 (2018-06-21)\ndiff --git a/Products/statusmessages/adapter.py b/Products/statusmessages/adapter.py\nindex 2917820..6d490ad 100644\n--- a/Products/statusmessages/adapter.py\n+++ b/Products/statusmessages/adapter.py\n@@ -19,11 +19,11 @@ class StatusMessage(object):\n     """Adapter for the BrowserRequest to handle status messages.\n \n     Let\'s make sure that this implementation actually fulfills the\n-    \'IStatusMessage\' API.\n+    \'IStatusMessage\' API::\n \n-      >>> from zope.interface.verify import verifyClass\n-      >>> verifyClass(IStatusMessage, StatusMessage)\n-      True\n+        >>> from zope.interface.verify import verifyClass\n+        >>> verifyClass(IStatusMessage, StatusMessage)\n+        True\n     """\n \n     def __init__(self, context):\ndiff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex 6af7b25..3c8b592 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -12,7 +12,7 @@ def _utf8(value):\n         return value.encode(\'utf-8\')\n     elif isinstance(value, six.binary_type):\n         return value\n-    return \'\'\n+    return b\'\'\n \n \n def _unicode(value):\n@@ -20,7 +20,7 @@ def _unicode(value):\n \n \n @implementer(IMessage)\n-class Message:\n+class Message(object):\n     """A single status message.\n \n     Let\'s make sure that this implementation actually fulfills the\n@@ -78,16 +78,16 @@ def encode(self):\n         The format consists of a two bytes length header of 11 bits for the\n         message length and 5 bits for the type length followed by two values.\n         """\n+\n+        if six.PY3:\n+            fmt_tpl = \'!H{0}s{1}s\'\n+        else:\n+            fmt_tpl = b\'!H{0}s{1}s\'\n         message = _utf8(self.message)[:0x3FF]  # we can store 2^11 bytes\n-        type = _utf8(self.type)[:0x1F]         # we can store 2^5 bytes\n-        size = (len(message) << 5) + (len(type) & 31)  # pack into 16 bits\n-\n-        return struct.pack(\n-            \'!H{0}s{1}s\'.format(len(message), len(type)),\n-            size,\n-            message,\n-            type,\n-        )\n+        type_ = _utf8(self.type)[:0x1F]  # we can store 2^5 bytes\n+        size = (len(message) << 5) + (len(type_) & 31)  # pack into 16 bits\n+        fmt = fmt_tpl.format(len(message), len(type_))\n+        return struct.pack(fmt, size, message, type_)\n \n \n def decode(value):\n@@ -95,7 +95,7 @@ def decode(value):\n     Decode messages from a cookie\n \n     We return the decoded message object, and the remainder of the cookie\n-    value (it can contain further messages).\n+    value as bytes (it can contain further messages).\n \n     We expect at least 2 bytes (size information).\n     """\n@@ -107,4 +107,4 @@ def decode(value):\n             _unicode(value[msize + 2:msize + tsize + 2]),\n         )\n         return message, value[msize + tsize + 2:]\n-    return None, \'\'\n+    return None, b\'\'\ndiff --git a/Products/statusmessages/tests/test_adapter.py b/Products/statusmessages/tests/test_adapter.py\nindex 1679433..5420ef8 100644\n--- a/Products/statusmessages/tests/test_adapter.py\n+++ b/Products/statusmessages/tests/test_adapter.py\n@@ -1,7 +1,5 @@\n # -*- coding: UTF-8 -*-\n """ StatusMessage adapter tests. """\n-\n-import six\n import unittest\n \n \n@@ -59,7 +57,7 @@ def test_directives(self):\n \n         Add one message\n \n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n \n         Now check the results\n \n@@ -68,7 +66,7 @@ def test_directives(self):\n           1\n \n           >>> messages[0].message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> messages[0].type\n           u\'info\'\n@@ -90,7 +88,7 @@ def test_directives(self):\n \n         Add one message\n \n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n \n         Publish the request\n \n@@ -103,7 +101,7 @@ def test_directives(self):\n           1\n \n           >>> messages[0].message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> messages[0].type\n           u\'info\'\n@@ -115,8 +113,8 @@ def test_directives(self):\n \n         Add two messages (without publishing)\n \n-          >>> status.add(u\'test\', type=u\'info\')\n-          >>> status.add(u\'test1\', u\'warn\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st1\', u\'warn\')\n \n         And check the results again\n \n@@ -127,7 +125,7 @@ def test_directives(self):\n           >>> test = messages[1]\n \n           >>> test.message\n-          u\'test1\'\n+          u\'t\xc3\xa4st1\'\n \n           >>> test.type\n           u\'warn\'\n@@ -139,7 +137,7 @@ def test_directives(self):\n \n         Add two messages (with publishing)\n \n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n           >>> fakePublish(request)\n           >>> status.add(u\'test1\', u\'warn\')\n \n@@ -165,8 +163,8 @@ def test_directives(self):\n \n         Add two identical messages\n \n-          >>> status.add(u\'test\', type=u\'info\')\n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n \n         And check the results again\n \n@@ -178,7 +176,7 @@ def test_directives(self):\n           >>> test = messages[0]\n \n           >>> test.message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> test.type\n           u\'info\'\n@@ -210,7 +208,7 @@ def test_directives(self):\n         Messages are stored as base64-ed cookie values, so we must make sure we\n         create proper header values; all ascii characters, and no newlines:\n \n-          >>> status.add(u\'test\' * 40, type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\' * 40, type=u\'info\')\n           >>> cookies = [c[\'value\'] for c in request.response.cookies.values()]\n           >>> cookies = \'\'.join(cookies)\n           >>> cookies == six.text_type(cookies).encode(\'ASCII\')\n@@ -263,7 +261,7 @@ def test_301(self):\n \n         Add one message\n \n-          >>> status.add(u\'test\', type=u\'info\')\n+          >>> status.add(u\'t\xc3\xa4st\', type=u\'info\')\n \n         Publish a redirect response that also happened to call show().\n         This could happen if the redirect (unnecessarily)\n@@ -275,7 +273,7 @@ def test_301(self):\n           1\n \n           >>> messages[0].message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> messages[0].type\n           u\'info\'\n@@ -295,7 +293,7 @@ def test_301(self):\n           1\n \n           >>> messages[0].message\n-          u\'test\'\n+          u\'t\xc3\xa4st\'\n \n           >>> messages[0].type\n           u\'info\'\ndiff --git a/Products/statusmessages/tests/test_encoding.py b/Products/statusmessages/tests/test_encoding.py\nindex 9690677..1af3325 100644\n--- a/Products/statusmessages/tests/test_encoding.py\n+++ b/Products/statusmessages/tests/test_encoding.py\n@@ -1,72 +1,77 @@\n # -*- coding: UTF-8 -*-\n-"""\n-    Encoding tests.\n-"""\n+from __future__ import unicode_literals\n \n import unittest\n \n \n class TestEncoding(unittest.TestCase):\n \n-    def test_encoding(self):\n-        r"""\n-        Test message encoding:\n-\n-          >>> from Products.statusmessages.message import Message\n-          >>> from Products.statusmessages.message import decode\n-\n-          >>> m = Message(u\'spam\', u\'eggs\')\n-          >>> m.encode()\n-          \'\\x00\\x84spameggs\'\n-\n-          >>> decode(m.encode())[0] == m\n-          True\n-\n-          >>> m = Message(u\'spam\')\n-          >>> m.encode()\n-          \'\\x00\\x80spam\'\n-\n-          >>> decode(m.encode())[0] == m\n-          True\n+    def test_encoding_msg_with_type(self):\n+        """Test message encoding:\n         """\n+        from Products.statusmessages.message import Message\n+        from Products.statusmessages.message import decode\n+        m = Message(\'sp\xc3\xa4m\', \'eggs\')\n+        self.assertEqual(\n+            m.encode(),\n+            b\'\\x00\\xa4sp\\xc3\\xa4meggs\',\n+        )\n+        self.assertEqual(decode(m.encode())[0], m)\n+\n+    def test_encoding_msg_without_type(self):\n+        from Products.statusmessages.message import Message\n+        from Products.statusmessages.message import decode\n+        m = Message(\'sp\xc3\xa4m\')\n+        self.assertEqual(\n+            m,\n+            Message(\'sp\xc3\xa4m\'),\n+        )\n+        self.assertEqual(m.encode(), b\'\\x00\\xa0sp\\xc3\\xa4m\')\n+        self.assertEqual(decode(m.encode())[0], m)\n \n     def test_decoding(self):\n-        r"""\n-        Test message decoding:\n-\n-          >>> from Products.statusmessages.message import Message\n-          >>> from Products.statusmessages.message import decode\n-\n-        Craft a wrong value:\n-\n-          >>> m, rem = decode(\'\\x01\\x84spameggs\')\n-          >>> m.message, m.type\n-          (u\'spameggs\', u\'\')\n-\n-          >>> rem\n-          \'\'\n-\n-        Craft another wrong value:\n-\n-          >>> m, rem = decode(\'\\x00\\x24spameggs\')\n-          >>> m.message, m.type\n-          (u\'s\', u\'pame\')\n-\n-          >>> rem\n-          \'ggs\'\n-\n-        And another wrong value:\n-\n-          >>> m, rem = decode(\'\\x00spameggs\')\n-          >>> m.message, m.type\n-          (u\'pam\', u\'eggs\')\n-\n-          >>> rem\n-          \'\'\n-\n-        And yet another wrong value:\n-\n-          >>> m, rem = decode(\'\')\n-          >>> m is None, rem is \'\'\n-          (True, True)\n+        """Test message decoding:\n         """\n+        from Products.statusmessages.message import decode\n+\n+        # Craft a wrong value:\n+        m, rem = decode(b\'\\x01\\x84spameggs\')\n+        self.assertEqual(\n+            m.message,\n+            \'spameggs\',\n+        )\n+        self.assertEqual(\n+            m.type,\n+            \'\',\n+        )\n+        self.assertEqual(rem, b\'\')\n+\n+        # Craft another wrong value:\n+        m, rem = decode(b\'\\x00\\x24spameggs\')\n+        self.assertEqual(\n+            m.message,\n+            \'s\',\n+        )\n+        self.assertEqual(\n+            m.type,\n+            \'pame\',\n+        )\n+        self.assertEqual(rem, b\'ggs\')\n+\n+        # And another wrong value:\n+        m, rem = decode(b\'\\x00spameggs\')\n+        self.assertEqual(\n+            m.message,\n+            \'pam\',\n+        )\n+        self.assertEqual(\n+            m.type,\n+            \'eggs\',\n+        )\n+        self.assertEqual(rem, b\'\')\n+\n+        # And yet another wrong value:\n+        m, rem = decode(\'\')\n+\n+        self.assertIs(m, None)\n+        self.assertEqual(rem, b\'\')\ndiff --git a/setup.py b/setup.py\nindex 53a426c..232bdba 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,6 +2,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = \'5.0.4.dev0\'\n \n setup(\n'

