Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-03-05T23:45:31+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/071475a7f294bad0de4539bdb30c35d7279a49af

In folder listings, when a content object has no title show it's id instead of an empty title.

Files changed:
M CHANGES.rst
M plone/app/contenttypes/browser/templates/listing.pt
M plone/app/contenttypes/browser/templates/listing_tabular.pt
M plone/app/contenttypes/tests/test_folder.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7ea7fc7f..223e57e8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- In folder listings, when a content object has no title show it's id instead of an empty title.
+  [thet]
 
 1.4.9 (2018-02-11)
 ------------------
diff --git a/plone/app/contenttypes/browser/templates/listing.pt b/plone/app/contenttypes/browser/templates/listing.pt
index 1933a24c..ec1c7bb8 100644
--- a/plone/app/contenttypes/browser/templates/listing.pt
+++ b/plone/app/contenttypes/browser/templates/listing.pt
@@ -34,6 +34,7 @@
                 item_url item/getURL;
                 item_id item/getId;
                 item_title item/Title;
+                item_title python:item_title or item_id;
                 item_description item/Description;
                 item_type item/PortalType;
                 item_modified item/ModificationDate;
diff --git a/plone/app/contenttypes/browser/templates/listing_tabular.pt b/plone/app/contenttypes/browser/templates/listing_tabular.pt
index 9758f11d..064062cf 100644
--- a/plone/app/contenttypes/browser/templates/listing_tabular.pt
+++ b/plone/app/contenttypes/browser/templates/listing_tabular.pt
@@ -44,7 +44,9 @@
                              image_scale portal/@@image_scale">
             <tal:entries tal:repeat="item batch">
               <tal:block tal:define="item_url item/getURL;
+                                     item_id item/getId;
                                      item_title item/Title;
+                                     item_title python:item_title or item_id;
                                      item_description item/Description;
                                      item_type item/PortalType;
                                      item_type_class python:'contenttype-' + view.normalizeString(item_type) if showicons else '';
diff --git a/plone/app/contenttypes/tests/test_folder.py b/plone/app/contenttypes/tests/test_folder.py
index 54fc5287..fa3717a4 100644
--- a/plone/app/contenttypes/tests/test_folder.py
+++ b/plone/app/contenttypes/tests/test_folder.py
@@ -193,3 +193,18 @@ def test_folder_album_view(self):
         self.assertIn(
             '<img src="http://nohost/plone/folder/image1/@@images',
             self.browser.contents)
+
+    def test_list_item_wout_title(self):
+        """In content listings, if a content object has no title use it's id.
+        """
+        self.folder.invokeFactory('Document', id='doc_wout_title')
+        import transaction
+        transaction.commit()
+
+        # Document should be shown in listing view (and it's siblings)
+        self.browser.open(self.folder_url + "/listing_view")
+        self.assertIn('doc_wout_title', self.browser.contents)
+
+        # And also in tabular view
+        self.browser.open(self.folder_url + "/tabular_view")
+        self.assertIn('doc_wout_title', self.browser.contents)


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-03-06T14:47:45+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/0b1d57800cd91dbe9cf79a74beefefbb00d977fe

Delete layout and set it
Rework parts where the layout is set by always setting the layout.
Try to delete the layout attribute before setting the layout.

Files changed:
M CHANGES.rst
M plone/app/contenttypes/migration/migration.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 223e57e8..7d2fa45d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,10 @@ New features:
 
 Bug fixes:
 
+- Try to delete the layout attribute before setting the layout.
+  Rework parts where the layout is set by always setting the layout.
+  [thet]
+
 - In folder listings, when a content object has no title show it's id instead of an empty title.
   [thet]
 
diff --git a/plone/app/contenttypes/migration/migration.py b/plone/app/contenttypes/migration/migration.py
index 0649f111..88cabcfb 100644
--- a/plone/app/contenttypes/migration/migration.py
+++ b/plone/app/contenttypes/migration/migration.py
@@ -205,10 +205,15 @@ def last_migrate_layout(self):
         migrate_properties.
         """
         old_layout = self.old.getLayout() or getattr(self.old, 'layout', None)
-        if old_layout in LISTING_VIEW_MAPPING.keys():
+        if old_layout:
             default_page = self.old.getDefaultPage() or \
                 getattr(self.old, 'default_page', None)
-            self.new.setLayout(LISTING_VIEW_MAPPING[old_layout])
+            try:
+                # Delete old-style layout attribute.
+                del self.new.layout
+            except AttributeError:
+                pass
+            self.new.setLayout(LISTING_VIEW_MAPPING.get(old_layout, old_layout))  # noqa
             if default_page:
                 # any defaultPage is switched of by setLayout
                 # and needs to set again
@@ -343,10 +348,6 @@ class FolderMigrator(ATCTFolderMigrator):
     dst_portal_type = 'Folder'
     dst_meta_type = None  # not used
 
-    def beforeChange_migrate_layout(self):
-        if self.old.getLayout() == 'atct_album_view':
-            self.old.setLayout('album_view')
-
 
 def migrate_folders(portal):
     return migrate(portal, FolderMigrator)
@@ -381,8 +382,13 @@ def last_migrate_layout(self):
         by a later call to migrate_properties.
         """
         old_layout = self.old.getLayout() or getattr(self.old, 'layout', None)
-        if old_layout in LISTING_VIEW_MAPPING:
-            self.new.setLayout(LISTING_VIEW_MAPPING[old_layout])
+        if old_layout:
+            try:
+                # Delete old-style layout attribute.
+                del self.new.layout
+            except AttributeError:
+                pass
+            self.new.setLayout(LISTING_VIEW_MAPPING.get(old_layout, old_layout))  # noqa
 
 
 def migrate_collections(portal):


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-03-07T14:07:07+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/aee5af36109082f8a792728459541433594e1801

Set the ``plone.app.contenttypes_migration_running`` key while running a migration.
Other addons can check for that and handle accordingly.

Files changed:
M CHANGES.rst
M plone/app/contenttypes/migration/browser.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7d2fa45d..28e090b0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Set the ``plone.app.contenttypes_migration_running`` key while running a migration.
+  Other addons can check for that and handle accordingly.
+  [thet]
 
 Bug fixes:
 
diff --git a/plone/app/contenttypes/migration/browser.py b/plone/app/contenttypes/migration/browser.py
index 62b8b233..a39eb5cb 100644
--- a/plone/app/contenttypes/migration/browser.py
+++ b/plone/app/contenttypes/migration/browser.py
@@ -137,6 +137,8 @@ def __call__(self,
         stats_before = self.stats()
         starttime = datetime.now()
 
+        self.request['plone.app.contenttypes_migration_running'] = True
+
         msg = 'Starting Migration\n\n'
         msg += '\n-----------------------------\n'
         msg += 'Content statictics:\n'


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-03-07T15:10:18+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/d6e280b80320654d3766c06359b5d1d82853cc5b

Handle ignore catalog errors where a brain can't find it's object.

Files changed:
M CHANGES.rst
M plone/app/contenttypes/migration/browser.py
M plone/app/contenttypes/migration/custom_migration.py
M plone/app/contenttypes/migration/dxmigration.py
M plone/app/contenttypes/migration/migration.py
M plone/app/contenttypes/migration/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 28e090b0..5a116d6e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -16,8 +16,10 @@ New features:
 
 Bug fixes:
 
-- Try to delete the layout attribute before setting the layout.
-  Rework parts where the layout is set by always setting the layout.
+- Migrations:
+  - Handle ignore catalog errors where a brain can't find it's object.
+  - Try to delete the layout attribute before setting the layout.
+    Rework parts where the layout is set by always setting the layout.
   [thet]
 
 - In folder listings, when a content object has no title show it's id instead of an empty title.
diff --git a/plone/app/contenttypes/migration/browser.py b/plone/app/contenttypes/migration/browser.py
index a39eb5cb..b5a3b2ce 100644
--- a/plone/app/contenttypes/migration/browser.py
+++ b/plone/app/contenttypes/migration/browser.py
@@ -9,13 +9,13 @@
 from plone.app.contenttypes.content import NewsItem
 from plone.app.contenttypes.migration import dxmigration
 from plone.app.contenttypes.migration import migration
+from plone.app.contenttypes.migration.patches import patch_before_migration
+from plone.app.contenttypes.migration.patches import undo_patch_after_migration
 from plone.app.contenttypes.migration.utils import installTypeIfNeeded
 from plone.app.contenttypes.migration.utils import isSchemaExtended
 from plone.app.contenttypes.migration.utils import restore_references
 from plone.app.contenttypes.migration.utils import store_references
 from plone.app.contenttypes.migration.vocabularies import ATCT_LIST
-from plone.app.contenttypes.migration.patches import patch_before_migration
-from plone.app.contenttypes.migration.patches import undo_patch_after_migration
 from plone.app.contenttypes.upgrades import use_new_view_names
 from plone.app.contenttypes.utils import DEFAULT_TYPES
 from plone.browserlayer.interfaces import ILocalBrowserLayerType
@@ -34,6 +34,7 @@
 from z3c.form import form
 from z3c.form.browser.checkbox import CheckBoxFieldWidget
 from z3c.form.interfaces import HIDDEN_MODE
+from zExceptions import NotFound
 from zope import schema
 from zope.component import getMultiAdapter
 from zope.component import queryUtility
@@ -80,7 +81,10 @@ def __call__(self):
             query['portal_type'] = portal_type
             results = catalog(query)
             for brain in results:
-                obj = brain.getObject()
+                try:
+                    obj = brain.getObject()
+                except (KeyError, NotFound):
+                    continue
                 if IDexterityContent.providedBy(obj):
                     object_class_name = obj.__class__.__name__
                     target_class_name = portal_type_class.__name__
@@ -262,7 +266,10 @@ def stats(self):
         results = {}
         catalog = self.context.portal_catalog
         for brain in catalog():
-            classname = brain.getObject().__class__.__name__
+            try:
+                classname = brain.getObject().__class__.__name__
+            except (KeyError, NotFound):
+                continue
             results[classname] = results.get(classname, 0) + 1
         return results
 
@@ -431,7 +438,10 @@ def handle_migrate(self, action):
         migrated = []
         not_migrated = []
         for brain in catalog():
-            obj = brain.getObject()
+            try:
+                obj = brain.getObject()
+            except (KeyError, NotFound):
+                continue
             old_class_name = dxmigration.get_old_class_name_string(obj)
             if old_class_name in changed_base_classes:
                 if dxmigration.migrate_base_class_to_new_class(
diff --git a/plone/app/contenttypes/migration/custom_migration.py b/plone/app/contenttypes/migration/custom_migration.py
index 4b04ffa1..2cfdabb1 100644
--- a/plone/app/contenttypes/migration/custom_migration.py
+++ b/plone/app/contenttypes/migration/custom_migration.py
@@ -4,13 +4,14 @@
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.dexterity.utils import iterSchemataForType
-from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.Archetypes.interfaces import IBaseObject
+from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
+from zExceptions import NotFound
 from zope.i18n import translate
 
 import json
@@ -110,7 +111,10 @@ def getATTypesWithoutFTI(self):
         for meta_type in catalog.uniqueValuesFor('meta_type'):
             # querying for meta_type will only return at-types
             brain = catalog(meta_type=meta_type, sort_limit=1)[0]
-            obj = brain.getObject()
+            try:
+                obj = brain.getObject()
+            except (KeyError, NotFound):
+                continue
             if IDexterityContent.providedBy(obj):
                 continue
             if not IBaseObject.providedBy(obj):
@@ -182,7 +186,10 @@ def getFieldsForATTypeWithoutFTI(self, typename):
         brains = catalog(portal_type=typename, sort_limit=1)
         if not brains:
             return results
-        obj = brains[0].getObject()
+        try:
+            obj = brains[0].getObject()
+        except (KeyError, NotFound):
+            return results
         for field_name in obj.schema._fields:
             field = obj.schema._fields[field_name]
             if not field.getName() in self.at_metadata_fields:
diff --git a/plone/app/contenttypes/migration/dxmigration.py b/plone/app/contenttypes/migration/dxmigration.py
index 33c6908d..c0a87d55 100644
--- a/plone/app/contenttypes/migration/dxmigration.py
+++ b/plone/app/contenttypes/migration/dxmigration.py
@@ -174,7 +174,7 @@ def list_of_objects_with_changed_base_class(context):
     for brain in catalog(object_provides=IDexterityContent.__identifier__):
         try:
             obj = brain.getObject()
-        except NotFound:
+        except (KeyError, NotFound):
             logger.warn('Object {0} not found'.format(brain.getPath()))
             continue
         if get_portal_type_name_string(obj) != get_old_class_name_string(obj):
diff --git a/plone/app/contenttypes/migration/migration.py b/plone/app/contenttypes/migration/migration.py
index 88cabcfb..df6d66b0 100644
--- a/plone/app/contenttypes/migration/migration.py
+++ b/plone/app/contenttypes/migration/migration.py
@@ -32,6 +32,7 @@
 from Products.contentmigration.basemigrator.migrator import CMFItemMigrator
 from Products.contentmigration.basemigrator.walker import CatalogWalker
 from Products.contentmigration.walker import CustomQueryWalker
+from zExceptions import NotFound
 from zope.component import adapter
 from zope.component import getAdapters
 from zope.component import getMultiAdapter
@@ -508,7 +509,13 @@ def migrateCustomAT(fields_mapping,
             is_folderish = False
             src_meta_type = src_type
         else:
-            src_obj = brains[0].getObject()
+            try:
+                src_obj = brains[0].getObject()
+            except (KeyError, NotFound):
+                logger.error(
+                    'Could not find the object for brain at %s',
+                    brains[0].getURL())
+                return
             if IDexterityContent.providedBy(src_obj):
                 logger.error(
                     '%s should not be dexterity object!',
diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index e3fde687..af6ce598 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -34,6 +34,7 @@
 from Products.GenericSetup.utils import importObjects
 from z3c.relationfield import RelationValue
 from zc.relation.interfaces import ICatalog
+from zExceptions import NotFound
 from zope.annotation.interfaces import IAnnotations
 from zope.component import getGlobalSiteManager
 from zope.component import getMultiAdapter
@@ -72,7 +73,10 @@ def _compareSchemata(interface):
         if not brain.meta_type or 'dexterity' in brain.meta_type.lower():
             # There might be DX types with same iface and meta_type than AT
             continue
-        obj = brain.getObject()
+        try:
+            obj = brain.getObject()
+        except (KeyError, NotFound):
+            continue
         real_fields = set(obj.Schema()._names)
         orig_fields = set(obj.schema._names)
         diff = [i for i in real_fields.difference(orig_fields)]


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-03-19T15:27:07+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/02df9cbf1215eddebb4179ac7f0853613ef0980c

Merge branch 'master' into thet-fixes

Files changed:
M CHANGES.rst
M plone/app/contenttypes/__init__.py
M plone/app/contenttypes/upgrades.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5a116d6e..6106f1fd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -25,6 +25,10 @@ Bug fixes:
 - In folder listings, when a content object has no title show it's id instead of an empty title.
   [thet]
 
+- Fix upgrades steps when the catalog is inconsistent
+  [ale-rt]
+
+
 1.4.9 (2018-02-11)
 ------------------
 
diff --git a/plone/app/contenttypes/__init__.py b/plone/app/contenttypes/__init__.py
index 24ad3219..de99613f 100644
--- a/plone/app/contenttypes/__init__.py
+++ b/plone/app/contenttypes/__init__.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from zope.i18nmessageid import MessageFactory
 
-import permissions  # noqa
+from . import permissions
 
 
 permissions  # pyflakes
diff --git a/plone/app/contenttypes/upgrades.py b/plone/app/contenttypes/upgrades.py
index 4110264b..26b8fa81 100644
--- a/plone/app/contenttypes/upgrades.py
+++ b/plone/app/contenttypes/upgrades.py
@@ -27,6 +27,22 @@
 }
 
 
+def _brains2objs(brains):
+    ''' Generator that takes a brains lazy map and:
+    - yields the objects that can be resolved
+    - logs the brain that cannot be resolved
+    '''
+    for brain in brains:
+        obj = brain.getObject()
+        if obj:
+            yield obj
+        else:
+            logger.warning(
+                'Cannot resolve brain %s',
+                brain.getPath(),
+            )
+
+
 def update_fti(context):
     """ Schema-files moved into their own folder after 1.0b1
     """
@@ -204,8 +220,9 @@ def _fixup(obj, view_map):
     catalog = getToolByName(portal, 'portal_catalog')
     search = catalog.unrestrictedSearchResults
     for portal_type in types_to_fix:
-        for brain in search(portal_type=portal_type):
-            obj = brain.getObject()
+        brains = search(portal_type=portal_type)
+        objs = _brains2objs(brains)
+        for obj in objs:
             _fixup(obj, LISTING_VIEW_MAPPING)
         if portal_type == 'Plone Site':
             _fixup(context, LISTING_VIEW_MAPPING)
@@ -215,8 +232,9 @@ def searchabletext_collections(context):
     """Reindex Collections for SearchableText."""
     catalog = getToolByName(context, 'portal_catalog')
     search = catalog.unrestrictedSearchResults
-    for brain in search(portal_type='Collection'):
-        obj = brain.getObject()
+    brains = search(portal_type='Collection')
+    objs = _brains2objs(brains)
+    for obj in objs:
         obj.reindexObject(idxs=['SearchableText'])
 
 
@@ -232,6 +250,7 @@ def searchabletext_richtext(context):
     """
     catalog = getToolByName(context, 'portal_catalog')
     search = catalog.unrestrictedSearchResults
-    for brain in search(portal_type=['Collection', 'Document', 'News Item']):
-        obj = brain.getObject()
+    brains = search(portal_type=['Collection', 'Document', 'News Item'])
+    objs = _brains2objs(brains)
+    for obj in objs:
         obj.reindexObject(idxs=['SearchableText'])


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-03-19T15:28:50+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/42679223bf5054744861bab62c7f50c7ebab473b

ignore but log exception

Files changed:
M plone/app/contenttypes/migration/browser.py

diff --git a/plone/app/contenttypes/migration/browser.py b/plone/app/contenttypes/migration/browser.py
index b5a3b2ce..b02ed140 100644
--- a/plone/app/contenttypes/migration/browser.py
+++ b/plone/app/contenttypes/migration/browser.py
@@ -84,6 +84,7 @@ def __call__(self):
                 try:
                     obj = brain.getObject()
                 except (KeyError, NotFound):
+                    logger.exception('Can not resolve object from brain.')
                     continue
                 if IDexterityContent.providedBy(obj):
                     object_class_name = obj.__class__.__name__


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-03-27T15:14:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/c0fea05ba7359ef0f0b17b223e4580cc407a7aae

Merge pull request #455 from plone/thet-fixes

title_or_id fix, layout setting fixes

Files changed:
M CHANGES.rst
M plone/app/contenttypes/browser/templates/listing.pt
M plone/app/contenttypes/browser/templates/listing_tabular.pt
M plone/app/contenttypes/migration/browser.py
M plone/app/contenttypes/migration/custom_migration.py
M plone/app/contenttypes/migration/dxmigration.py
M plone/app/contenttypes/migration/migration.py
M plone/app/contenttypes/migration/utils.py
M plone/app/contenttypes/tests/test_folder.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 84c8e173..6106f1fd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,13 +10,25 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Set the ``plone.app.contenttypes_migration_running`` key while running a migration.
+  Other addons can check for that and handle accordingly.
+  [thet]
 
 Bug fixes:
 
+- Migrations:
+  - Handle ignore catalog errors where a brain can't find it's object.
+  - Try to delete the layout attribute before setting the layout.
+    Rework parts where the layout is set by always setting the layout.
+  [thet]
+
+- In folder listings, when a content object has no title show it's id instead of an empty title.
+  [thet]
+
 - Fix upgrades steps when the catalog is inconsistent
   [ale-rt]
 
+
 1.4.9 (2018-02-11)
 ------------------
 
diff --git a/plone/app/contenttypes/browser/templates/listing.pt b/plone/app/contenttypes/browser/templates/listing.pt
index 1933a24c..ec1c7bb8 100644
--- a/plone/app/contenttypes/browser/templates/listing.pt
+++ b/plone/app/contenttypes/browser/templates/listing.pt
@@ -34,6 +34,7 @@
                 item_url item/getURL;
                 item_id item/getId;
                 item_title item/Title;
+                item_title python:item_title or item_id;
                 item_description item/Description;
                 item_type item/PortalType;
                 item_modified item/ModificationDate;
diff --git a/plone/app/contenttypes/browser/templates/listing_tabular.pt b/plone/app/contenttypes/browser/templates/listing_tabular.pt
index 9758f11d..064062cf 100644
--- a/plone/app/contenttypes/browser/templates/listing_tabular.pt
+++ b/plone/app/contenttypes/browser/templates/listing_tabular.pt
@@ -44,7 +44,9 @@
                              image_scale portal/@@image_scale">
             <tal:entries tal:repeat="item batch">
               <tal:block tal:define="item_url item/getURL;
+                                     item_id item/getId;
                                      item_title item/Title;
+                                     item_title python:item_title or item_id;
                                      item_description item/Description;
                                      item_type item/PortalType;
                                      item_type_class python:'contenttype-' + view.normalizeString(item_type) if showicons else '';
diff --git a/plone/app/contenttypes/migration/browser.py b/plone/app/contenttypes/migration/browser.py
index 62b8b233..b02ed140 100644
--- a/plone/app/contenttypes/migration/browser.py
+++ b/plone/app/contenttypes/migration/browser.py
@@ -9,13 +9,13 @@
 from plone.app.contenttypes.content import NewsItem
 from plone.app.contenttypes.migration import dxmigration
 from plone.app.contenttypes.migration import migration
+from plone.app.contenttypes.migration.patches import patch_before_migration
+from plone.app.contenttypes.migration.patches import undo_patch_after_migration
 from plone.app.contenttypes.migration.utils import installTypeIfNeeded
 from plone.app.contenttypes.migration.utils import isSchemaExtended
 from plone.app.contenttypes.migration.utils import restore_references
 from plone.app.contenttypes.migration.utils import store_references
 from plone.app.contenttypes.migration.vocabularies import ATCT_LIST
-from plone.app.contenttypes.migration.patches import patch_before_migration
-from plone.app.contenttypes.migration.patches import undo_patch_after_migration
 from plone.app.contenttypes.upgrades import use_new_view_names
 from plone.app.contenttypes.utils import DEFAULT_TYPES
 from plone.browserlayer.interfaces import ILocalBrowserLayerType
@@ -34,6 +34,7 @@
 from z3c.form import form
 from z3c.form.browser.checkbox import CheckBoxFieldWidget
 from z3c.form.interfaces import HIDDEN_MODE
+from zExceptions import NotFound
 from zope import schema
 from zope.component import getMultiAdapter
 from zope.component import queryUtility
@@ -80,7 +81,11 @@ def __call__(self):
             query['portal_type'] = portal_type
             results = catalog(query)
             for brain in results:
-                obj = brain.getObject()
+                try:
+                    obj = brain.getObject()
+                except (KeyError, NotFound):
+                    logger.exception('Can not resolve object from brain.')
+                    continue
                 if IDexterityContent.providedBy(obj):
                     object_class_name = obj.__class__.__name__
                     target_class_name = portal_type_class.__name__
@@ -137,6 +142,8 @@ def __call__(self,
         stats_before = self.stats()
         starttime = datetime.now()
 
+        self.request['plone.app.contenttypes_migration_running'] = True
+
         msg = 'Starting Migration\n\n'
         msg += '\n-----------------------------\n'
         msg += 'Content statictics:\n'
@@ -260,7 +267,10 @@ def stats(self):
         results = {}
         catalog = self.context.portal_catalog
         for brain in catalog():
-            classname = brain.getObject().__class__.__name__
+            try:
+                classname = brain.getObject().__class__.__name__
+            except (KeyError, NotFound):
+                continue
             results[classname] = results.get(classname, 0) + 1
         return results
 
@@ -429,7 +439,10 @@ def handle_migrate(self, action):
         migrated = []
         not_migrated = []
         for brain in catalog():
-            obj = brain.getObject()
+            try:
+                obj = brain.getObject()
+            except (KeyError, NotFound):
+                continue
             old_class_name = dxmigration.get_old_class_name_string(obj)
             if old_class_name in changed_base_classes:
                 if dxmigration.migrate_base_class_to_new_class(
diff --git a/plone/app/contenttypes/migration/custom_migration.py b/plone/app/contenttypes/migration/custom_migration.py
index 4b04ffa1..2cfdabb1 100644
--- a/plone/app/contenttypes/migration/custom_migration.py
+++ b/plone/app/contenttypes/migration/custom_migration.py
@@ -4,13 +4,14 @@
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.dexterity.utils import iterSchemataForType
-from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.Archetypes.interfaces import IBaseObject
+from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
+from zExceptions import NotFound
 from zope.i18n import translate
 
 import json
@@ -110,7 +111,10 @@ def getATTypesWithoutFTI(self):
         for meta_type in catalog.uniqueValuesFor('meta_type'):
             # querying for meta_type will only return at-types
             brain = catalog(meta_type=meta_type, sort_limit=1)[0]
-            obj = brain.getObject()
+            try:
+                obj = brain.getObject()
+            except (KeyError, NotFound):
+                continue
             if IDexterityContent.providedBy(obj):
                 continue
             if not IBaseObject.providedBy(obj):
@@ -182,7 +186,10 @@ def getFieldsForATTypeWithoutFTI(self, typename):
         brains = catalog(portal_type=typename, sort_limit=1)
         if not brains:
             return results
-        obj = brains[0].getObject()
+        try:
+            obj = brains[0].getObject()
+        except (KeyError, NotFound):
+            return results
         for field_name in obj.schema._fields:
             field = obj.schema._fields[field_name]
             if not field.getName() in self.at_metadata_fields:
diff --git a/plone/app/contenttypes/migration/dxmigration.py b/plone/app/contenttypes/migration/dxmigration.py
index 33c6908d..c0a87d55 100644
--- a/plone/app/contenttypes/migration/dxmigration.py
+++ b/plone/app/contenttypes/migration/dxmigration.py
@@ -174,7 +174,7 @@ def list_of_objects_with_changed_base_class(context):
     for brain in catalog(object_provides=IDexterityContent.__identifier__):
         try:
             obj = brain.getObject()
-        except NotFound:
+        except (KeyError, NotFound):
             logger.warn('Object {0} not found'.format(brain.getPath()))
             continue
         if get_portal_type_name_string(obj) != get_old_class_name_string(obj):
diff --git a/plone/app/contenttypes/migration/migration.py b/plone/app/contenttypes/migration/migration.py
index 0649f111..df6d66b0 100644
--- a/plone/app/contenttypes/migration/migration.py
+++ b/plone/app/contenttypes/migration/migration.py
@@ -32,6 +32,7 @@
 from Products.contentmigration.basemigrator.migrator import CMFItemMigrator
 from Products.contentmigration.basemigrator.walker import CatalogWalker
 from Products.contentmigration.walker import CustomQueryWalker
+from zExceptions import NotFound
 from zope.component import adapter
 from zope.component import getAdapters
 from zope.component import getMultiAdapter
@@ -205,10 +206,15 @@ def last_migrate_layout(self):
         migrate_properties.
         """
         old_layout = self.old.getLayout() or getattr(self.old, 'layout', None)
-        if old_layout in LISTING_VIEW_MAPPING.keys():
+        if old_layout:
             default_page = self.old.getDefaultPage() or \
                 getattr(self.old, 'default_page', None)
-            self.new.setLayout(LISTING_VIEW_MAPPING[old_layout])
+            try:
+                # Delete old-style layout attribute.
+                del self.new.layout
+            except AttributeError:
+                pass
+            self.new.setLayout(LISTING_VIEW_MAPPING.get(old_layout, old_layout))  # noqa
             if default_page:
                 # any defaultPage is switched of by setLayout
                 # and needs to set again
@@ -343,10 +349,6 @@ class FolderMigrator(ATCTFolderMigrator):
     dst_portal_type = 'Folder'
     dst_meta_type = None  # not used
 
-    def beforeChange_migrate_layout(self):
-        if self.old.getLayout() == 'atct_album_view':
-            self.old.setLayout('album_view')
-
 
 def migrate_folders(portal):
     return migrate(portal, FolderMigrator)
@@ -381,8 +383,13 @@ def last_migrate_layout(self):
         by a later call to migrate_properties.
         """
         old_layout = self.old.getLayout() or getattr(self.old, 'layout', None)
-        if old_layout in LISTING_VIEW_MAPPING:
-            self.new.setLayout(LISTING_VIEW_MAPPING[old_layout])
+        if old_layout:
+            try:
+                # Delete old-style layout attribute.
+                del self.new.layout
+            except AttributeError:
+                pass
+            self.new.setLayout(LISTING_VIEW_MAPPING.get(old_layout, old_layout))  # noqa
 
 
 def migrate_collections(portal):
@@ -502,7 +509,13 @@ def migrateCustomAT(fields_mapping,
             is_folderish = False
             src_meta_type = src_type
         else:
-            src_obj = brains[0].getObject()
+            try:
+                src_obj = brains[0].getObject()
+            except (KeyError, NotFound):
+                logger.error(
+                    'Could not find the object for brain at %s',
+                    brains[0].getURL())
+                return
             if IDexterityContent.providedBy(src_obj):
                 logger.error(
                     '%s should not be dexterity object!',
diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index e3fde687..af6ce598 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -34,6 +34,7 @@
 from Products.GenericSetup.utils import importObjects
 from z3c.relationfield import RelationValue
 from zc.relation.interfaces import ICatalog
+from zExceptions import NotFound
 from zope.annotation.interfaces import IAnnotations
 from zope.component import getGlobalSiteManager
 from zope.component import getMultiAdapter
@@ -72,7 +73,10 @@ def _compareSchemata(interface):
         if not brain.meta_type or 'dexterity' in brain.meta_type.lower():
             # There might be DX types with same iface and meta_type than AT
             continue
-        obj = brain.getObject()
+        try:
+            obj = brain.getObject()
+        except (KeyError, NotFound):
+            continue
         real_fields = set(obj.Schema()._names)
         orig_fields = set(obj.schema._names)
         diff = [i for i in real_fields.difference(orig_fields)]
diff --git a/plone/app/contenttypes/tests/test_folder.py b/plone/app/contenttypes/tests/test_folder.py
index 54fc5287..fa3717a4 100644
--- a/plone/app/contenttypes/tests/test_folder.py
+++ b/plone/app/contenttypes/tests/test_folder.py
@@ -193,3 +193,18 @@ def test_folder_album_view(self):
         self.assertIn(
             '<img src="http://nohost/plone/folder/image1/@@images',
             self.browser.contents)
+
+    def test_list_item_wout_title(self):
+        """In content listings, if a content object has no title use it's id.
+        """
+        self.folder.invokeFactory('Document', id='doc_wout_title')
+        import transaction
+        transaction.commit()
+
+        # Document should be shown in listing view (and it's siblings)
+        self.browser.open(self.folder_url + "/listing_view")
+        self.assertIn('doc_wout_title', self.browser.contents)
+
+        # And also in tabular view
+        self.browser.open(self.folder_url + "/tabular_view")
+        self.assertIn('doc_wout_title', self.browser.contents)


