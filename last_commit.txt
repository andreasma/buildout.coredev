Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2018-09-19T09:13:11+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.schemaeditor/commit/596b110e1863958f9d36a5581c0c30560e3dff91

fix init in py3

Files changed:
M plone/schemaeditor/browser/schema/traversal.py

b"diff --git a/plone/schemaeditor/browser/schema/traversal.py b/plone/schemaeditor/browser/schema/traversal.py\nindex effefff..666fb78 100644\n--- a/plone/schemaeditor/browser/schema/traversal.py\n+++ b/plone/schemaeditor/browser/schema/traversal.py\n@@ -6,6 +6,8 @@\n from zope.publisher.interfaces.browser import IBrowserPublisher\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n+import six\n+\n \n @implementer(ISchemaContext, IBrowserPublisher)\n class SchemaContext(SimpleItem):\n@@ -21,7 +23,10 @@ class SchemaContext(SimpleItem):\n     enableFieldsets = True\n \n     def __init__(self, context, request, name=u'schema', title=None):\n-        super(SchemaContext, self).__init__(context, request)\n+        if six.PY2:\n+            super(SchemaContext, self).__init__(context, request)\n+        else:\n+            super().__init__()\n         self.schema = context\n         self.request = request\n \n"

Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2018-09-19T09:13:11+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.schemaeditor/commit/b1c3e6fdd0188bea4df85eb74da8a78767121c3a

remove obsolete and broken object.__init__()

Files changed:
M plone/schemaeditor/browser/schema/traversal.py

b"diff --git a/plone/schemaeditor/browser/schema/traversal.py b/plone/schemaeditor/browser/schema/traversal.py\nindex 666fb78..ebf87a5 100644\n--- a/plone/schemaeditor/browser/schema/traversal.py\n+++ b/plone/schemaeditor/browser/schema/traversal.py\n@@ -23,10 +23,6 @@ class SchemaContext(SimpleItem):\n     enableFieldsets = True\n \n     def __init__(self, context, request, name=u'schema', title=None):\n-        if six.PY2:\n-            super(SchemaContext, self).__init__(context, request)\n-        else:\n-            super().__init__()\n         self.schema = context\n         self.request = request\n \n"

Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2018-09-19T09:13:11+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.schemaeditor/commit/28174f5153c842f747a17a8404e3f501bad7ad99

prevent dictionary changed size during iteration in py3

Files changed:
M plone/schemaeditor/browser/schema/add_field.py

b"diff --git a/plone/schemaeditor/browser/schema/add_field.py b/plone/schemaeditor/browser/schema/add_field.py\nindex bcaff20..679f2ea 100644\n--- a/plone/schemaeditor/browser/schema/add_field.py\n+++ b/plone/schemaeditor/browser/schema/add_field.py\n@@ -46,7 +46,7 @@ def create(self, data):\n         factory = data.pop('factory')\n \n         # split regular attributes and extra ones\n-        for key in data.keys():\n+        for key in list(data.keys()):\n             if key not in self._schema:\n                 extra[key] = data[key]\n                 data.pop(key)\n"

Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2018-09-19T09:13:11+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.schemaeditor/commit/4e008cba10035c65f6c1207da0b27891033ee564

fix tests

Files changed:
M plone/schemaeditor/tests/choice.rst
M plone/schemaeditor/tests/editing.rst
M plone/schemaeditor/tests/extending.rst
M plone/schemaeditor/tests/tests.py

b'diff --git a/plone/schemaeditor/tests/choice.rst b/plone/schemaeditor/tests/choice.rst\nindex d2d665e..d3c2a07 100644\n--- a/plone/schemaeditor/tests/choice.rst\n+++ b/plone/schemaeditor/tests/choice.rst\n@@ -58,7 +58,7 @@ If duplicate values are entered an error is raised.\n     ...     [\'Alaska\', \'Russia\', \'United States\', \'United States\',\n     ...      \'Other\'])\n     >>> browser.getControl(\'Save\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n       <div class="error">The \'United States\' vocabulary value conflicts with \'United States\'.</div>\n     ...\n@@ -118,7 +118,7 @@ We can\'t set a vocabulary name AND values.\n     >>> browser.getLink(url=\'country\').click()\n     >>> browser.getControl(\'values\').value = "oups"\n     >>> browser.getControl(\'Save\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n       <div class="error">You can not set a vocabulary name AND vocabulary values....\n     ...\n@@ -166,7 +166,7 @@ If duplicate values are entered an error is raised.\n     >>> ctl.value = \'\\n\'.join(\n     ...     [\'Lisp\', \'Plone\', \'Python\', \'Lisp\'])\n     >>> browser.getControl(\'Save\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n       <div class="error">The \'Lisp\' vocabulary value conflicts with \'Lisp\'.</div>\n     ...\n@@ -210,7 +210,7 @@ Back to the edit form, vocabulary name is selected.\n \n     >>> browser.open(portal_url + \'/@@schemaeditor\')\n     >>> browser.getLink(url=\'categories\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n     ... selected>plone.schemaeditor.test.Categories</option...\n     ...\ndiff --git a/plone/schemaeditor/tests/editing.rst b/plone/schemaeditor/tests/editing.rst\nindex 9d230b7..b9849a9 100644\n--- a/plone/schemaeditor/tests/editing.rst\n+++ b/plone/schemaeditor/tests/editing.rst\n@@ -20,7 +20,7 @@ error::\n     >>> browser.open(portal_url + \'/@@schemaeditor\')\n     Traceback (most recent call last):\n     ...\n-    Unauthorized: ...You are not authorized to access this resource...\n+    zExceptions.unauthorized.Unauthorized: ...You are not authorized to access this resource...\n \n We need to log in as a manager, because by default only managers get the \'Manage Schemata\' permission::\n \n@@ -62,11 +62,11 @@ normalized form of the title)::\n     >>> isinstance(IDummySchema[\'favorite_color\'], TextLine)\n     True\n     >>> IDummySchema[\'favorite_color\'].title\n-    u\'Favorite Color\'\n+    \'Favorite Color\'\n     >>> IDummySchema[\'favorite_color\'].required\n     True\n     >>> IDummySchema[\'favorite_color\'].description\n-    u\'Select your favorite color\'\n+    \'Select your favorite color\'\n \n \n Editing a schema field attribute\n@@ -98,7 +98,7 @@ of schema fields, which should reflect the change::\n Let\'s confirm that the new default value was correctly saved to the actual schema::\n \n     >>> IDummySchema[\'favorite_color\'].description\n-    u\'Enter your favorite color.\'\n+    \'Enter your favorite color.\'\n \n If the schema is edited to have internationalized attributes::\n \n@@ -130,11 +130,11 @@ value was set::\n     >>> type(IDummySchema[\'favorite_color\'].description)\n     <... \'zope.i18nmessageid.message.Message\'>\n     >>> IDummySchema[\'favorite_color\'].description\n-    u\'favorite_color\'\n+    \'favorite_color\'\n     >>> IDummySchema[\'favorite_color\'].description.domain\n     \'plone\'\n     >>> IDummySchema[\'favorite_color\'].description.default\n-    u\'Enter your favorite color.\'\n+    \'Enter your favorite color.\'\n \n Let\'s also check that the support for editing i18n Message values does not\n persist its marker interface::\n@@ -193,7 +193,7 @@ testbrowser doesn\'t support Javascript)::\n     [event: ContainerModifiedEvent on InterfaceClass]\n     [event: SchemaModifiedEvent on DummySchemaContext]\n     >>> browser.contents\n-    \'\'\n+    b\'\'\n \n Now the field should be the third field of the schema::\n \n@@ -220,7 +220,7 @@ They are moved to the end of the new fieldset::\n     [event: ContainerModifiedEvent on InterfaceClass]\n     [event: SchemaModifiedEvent on DummySchemaContext]\n     >>> browser.contents\n-    \'\'\n+    b\'\'\n \n Now the field should be the seventh field of the schema::\n \n@@ -236,7 +236,7 @@ They can be ordered into a fieldset::\n     [event: ContainerModifiedEvent on InterfaceClass]\n     [event: SchemaModifiedEvent on DummySchemaContext]\n     >>> browser.contents\n-    \'\'\n+    b\'\'\n     >>> get_field_fieldset(IDummySchema, \'favorite_color\')\n     <Fieldset \'alpha\'...of favorite_color, fieldA>\n \n@@ -301,7 +301,7 @@ move it into an other fieldset and remove it::\n     [event: ContainerModifiedEvent on InterfaceClass]\n     [event: SchemaModifiedEvent on DummySchemaContext]\n     >>> browser.contents\n-    \'\'\n+    b\'\'\n     >>> browser.open(\'http://nohost/@@schemaeditor\')\n     >>> browser.getLink(url=\'other_set/@@delete\').click()\n     [event: ObjectRemovedEvent on TextLine]\ndiff --git a/plone/schemaeditor/tests/extending.rst b/plone/schemaeditor/tests/extending.rst\nindex a9f1825..8685e92 100644\n--- a/plone/schemaeditor/tests/extending.rst\n+++ b/plone/schemaeditor/tests/extending.rst\n@@ -76,4 +76,4 @@ We can save a color and confirm that it ends up in the schema\'s tagged values::\n   [event: SchemaModifiedEvent on DummySchemaContext]\n   >>> from plone.schemaeditor.tests.fixtures import IDummySchema\n   >>> IDummySchema.getTaggedValue(\'color\')\n-  {\'field1\': u\'green\'}\n+  {\'field1\': \'green\'}\ndiff --git a/plone/schemaeditor/tests/tests.py b/plone/schemaeditor/tests/tests.py\nindex 3d4fc82..ba806a2 100644\n--- a/plone/schemaeditor/tests/tests.py\n+++ b/plone/schemaeditor/tests/tests.py\n@@ -11,6 +11,8 @@\n import doctest\n import os\n import plone.schemaeditor\n+import re\n+import six\n import unittest\n \n \n@@ -34,6 +36,15 @@ def tearDown(self):\n     classImplements(implementedBy(BaseRequest) - ITestLayer)\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub(\'zExceptions.unauthorized.Unauthorized\', \'Unauthorized\', got)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     return unittest.TestSuite([\n \n@@ -45,7 +56,8 @@ def test_suite():\n             \'minmax.rst\',\n             setUp=setUp,\n             tearDown=tearDown,\n-            optionflags=optionflags\n+            optionflags=optionflags,\n+            checker=Py23DocChecker(),\n         ),\n \n     ])\n'

Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2018-09-19T09:13:11+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.schemaeditor/commit/88158945d1b16eb03e0562a509db531d7b23c672

fix Py23DocChecker

Files changed:
M plone/schemaeditor/tests/tests.py

b'diff --git a/plone/schemaeditor/tests/tests.py b/plone/schemaeditor/tests/tests.py\nindex ba806a2..e43aba1 100644\n--- a/plone/schemaeditor/tests/tests.py\n+++ b/plone/schemaeditor/tests/tests.py\n@@ -39,8 +39,8 @@ def tearDown(self):\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            got = re.sub(\'zExceptions.unauthorized.Unauthorized\', \'Unauthorized\', got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub(\'zExceptions.unauthorized.Unauthorized\', \'Unauthorized\', want)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n             want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n'

Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2018-09-19T09:15:45+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.schemaeditor/commit/9f03f1f88f04ff568aa276443c5b2c7b8361a0f2

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e690b5b..3b05f7e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -21,6 +21,9 @@ Bug fixes:\n - Allow defaults to be set on dexterity type fields via the web UI (@@fields)\n   [ezvirtual]\n \n+- Fix tests in py3 and some py3 issues.\n+  [pbauer]\n+\n \n 2.0.19 (2018-02-02)\n -------------------\ndiff --git a/setup.py b/setup.py\nindex 067f12c..7cf34ec 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -16,8 +16,11 @@\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.0",\n         "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n'

Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2018-09-19T13:30:21+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.schemaeditor/commit/7100ceec28ecc512dc699739d3d30b0e699a44b4

Merge pull request #60 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/schemaeditor/browser/schema/add_field.py
M plone/schemaeditor/browser/schema/traversal.py
M plone/schemaeditor/tests/choice.rst
M plone/schemaeditor/tests/editing.rst
M plone/schemaeditor/tests/extending.rst
M plone/schemaeditor/tests/tests.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e690b5b..3b05f7e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -21,6 +21,9 @@ Bug fixes:\n - Allow defaults to be set on dexterity type fields via the web UI (@@fields)\n   [ezvirtual]\n \n+- Fix tests in py3 and some py3 issues.\n+  [pbauer]\n+\n \n 2.0.19 (2018-02-02)\n -------------------\ndiff --git a/plone/schemaeditor/browser/schema/add_field.py b/plone/schemaeditor/browser/schema/add_field.py\nindex bcaff20..679f2ea 100644\n--- a/plone/schemaeditor/browser/schema/add_field.py\n+++ b/plone/schemaeditor/browser/schema/add_field.py\n@@ -46,7 +46,7 @@ def create(self, data):\n         factory = data.pop(\'factory\')\n \n         # split regular attributes and extra ones\n-        for key in data.keys():\n+        for key in list(data.keys()):\n             if key not in self._schema:\n                 extra[key] = data[key]\n                 data.pop(key)\ndiff --git a/plone/schemaeditor/browser/schema/traversal.py b/plone/schemaeditor/browser/schema/traversal.py\nindex effefff..ebf87a5 100644\n--- a/plone/schemaeditor/browser/schema/traversal.py\n+++ b/plone/schemaeditor/browser/schema/traversal.py\n@@ -6,6 +6,8 @@\n from zope.publisher.interfaces.browser import IBrowserPublisher\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n+import six\n+\n \n @implementer(ISchemaContext, IBrowserPublisher)\n class SchemaContext(SimpleItem):\n@@ -21,7 +23,6 @@ class SchemaContext(SimpleItem):\n     enableFieldsets = True\n \n     def __init__(self, context, request, name=u\'schema\', title=None):\n-        super(SchemaContext, self).__init__(context, request)\n         self.schema = context\n         self.request = request\n \ndiff --git a/plone/schemaeditor/tests/choice.rst b/plone/schemaeditor/tests/choice.rst\nindex d2d665e..d3c2a07 100644\n--- a/plone/schemaeditor/tests/choice.rst\n+++ b/plone/schemaeditor/tests/choice.rst\n@@ -58,7 +58,7 @@ If duplicate values are entered an error is raised.\n     ...     [\'Alaska\', \'Russia\', \'United States\', \'United States\',\n     ...      \'Other\'])\n     >>> browser.getControl(\'Save\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n       <div class="error">The \'United States\' vocabulary value conflicts with \'United States\'.</div>\n     ...\n@@ -118,7 +118,7 @@ We can\'t set a vocabulary name AND values.\n     >>> browser.getLink(url=\'country\').click()\n     >>> browser.getControl(\'values\').value = "oups"\n     >>> browser.getControl(\'Save\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n       <div class="error">You can not set a vocabulary name AND vocabulary values....\n     ...\n@@ -166,7 +166,7 @@ If duplicate values are entered an error is raised.\n     >>> ctl.value = \'\\n\'.join(\n     ...     [\'Lisp\', \'Plone\', \'Python\', \'Lisp\'])\n     >>> browser.getControl(\'Save\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n       <div class="error">The \'Lisp\' vocabulary value conflicts with \'Lisp\'.</div>\n     ...\n@@ -210,7 +210,7 @@ Back to the edit form, vocabulary name is selected.\n \n     >>> browser.open(portal_url + \'/@@schemaeditor\')\n     >>> browser.getLink(url=\'categories\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n     ... selected>plone.schemaeditor.test.Categories</option...\n     ...\ndiff --git a/plone/schemaeditor/tests/editing.rst b/plone/schemaeditor/tests/editing.rst\nindex 9d230b7..b9849a9 100644\n--- a/plone/schemaeditor/tests/editing.rst\n+++ b/plone/schemaeditor/tests/editing.rst\n@@ -20,7 +20,7 @@ error::\n     >>> browser.open(portal_url + \'/@@schemaeditor\')\n     Traceback (most recent call last):\n     ...\n-    Unauthorized: ...You are not authorized to access this resource...\n+    zExceptions.unauthorized.Unauthorized: ...You are not authorized to access this resource...\n \n We need to log in as a manager, because by default only managers get the \'Manage Schemata\' permission::\n \n@@ -62,11 +62,11 @@ normalized form of the title)::\n     >>> isinstance(IDummySchema[\'favorite_color\'], TextLine)\n     True\n     >>> IDummySchema[\'favorite_color\'].title\n-    u\'Favorite Color\'\n+    \'Favorite Color\'\n     >>> IDummySchema[\'favorite_color\'].required\n     True\n     >>> IDummySchema[\'favorite_color\'].description\n-    u\'Select your favorite color\'\n+    \'Select your favorite color\'\n \n \n Editing a schema field attribute\n@@ -98,7 +98,7 @@ of schema fields, which should reflect the change::\n Let\'s confirm that the new default value was correctly saved to the actual schema::\n \n     >>> IDummySchema[\'favorite_color\'].description\n-    u\'Enter your favorite color.\'\n+    \'Enter your favorite color.\'\n \n If the schema is edited to have internationalized attributes::\n \n@@ -130,11 +130,11 @@ value was set::\n     >>> type(IDummySchema[\'favorite_color\'].description)\n     <... \'zope.i18nmessageid.message.Message\'>\n     >>> IDummySchema[\'favorite_color\'].description\n-    u\'favorite_color\'\n+    \'favorite_color\'\n     >>> IDummySchema[\'favorite_color\'].description.domain\n     \'plone\'\n     >>> IDummySchema[\'favorite_color\'].description.default\n-    u\'Enter your favorite color.\'\n+    \'Enter your favorite color.\'\n \n Let\'s also check that the support for editing i18n Message values does not\n persist its marker interface::\n@@ -193,7 +193,7 @@ testbrowser doesn\'t support Javascript)::\n     [event: ContainerModifiedEvent on InterfaceClass]\n     [event: SchemaModifiedEvent on DummySchemaContext]\n     >>> browser.contents\n-    \'\'\n+    b\'\'\n \n Now the field should be the third field of the schema::\n \n@@ -220,7 +220,7 @@ They are moved to the end of the new fieldset::\n     [event: ContainerModifiedEvent on InterfaceClass]\n     [event: SchemaModifiedEvent on DummySchemaContext]\n     >>> browser.contents\n-    \'\'\n+    b\'\'\n \n Now the field should be the seventh field of the schema::\n \n@@ -236,7 +236,7 @@ They can be ordered into a fieldset::\n     [event: ContainerModifiedEvent on InterfaceClass]\n     [event: SchemaModifiedEvent on DummySchemaContext]\n     >>> browser.contents\n-    \'\'\n+    b\'\'\n     >>> get_field_fieldset(IDummySchema, \'favorite_color\')\n     <Fieldset \'alpha\'...of favorite_color, fieldA>\n \n@@ -301,7 +301,7 @@ move it into an other fieldset and remove it::\n     [event: ContainerModifiedEvent on InterfaceClass]\n     [event: SchemaModifiedEvent on DummySchemaContext]\n     >>> browser.contents\n-    \'\'\n+    b\'\'\n     >>> browser.open(\'http://nohost/@@schemaeditor\')\n     >>> browser.getLink(url=\'other_set/@@delete\').click()\n     [event: ObjectRemovedEvent on TextLine]\ndiff --git a/plone/schemaeditor/tests/extending.rst b/plone/schemaeditor/tests/extending.rst\nindex a9f1825..8685e92 100644\n--- a/plone/schemaeditor/tests/extending.rst\n+++ b/plone/schemaeditor/tests/extending.rst\n@@ -76,4 +76,4 @@ We can save a color and confirm that it ends up in the schema\'s tagged values::\n   [event: SchemaModifiedEvent on DummySchemaContext]\n   >>> from plone.schemaeditor.tests.fixtures import IDummySchema\n   >>> IDummySchema.getTaggedValue(\'color\')\n-  {\'field1\': u\'green\'}\n+  {\'field1\': \'green\'}\ndiff --git a/plone/schemaeditor/tests/tests.py b/plone/schemaeditor/tests/tests.py\nindex 3d4fc82..e43aba1 100644\n--- a/plone/schemaeditor/tests/tests.py\n+++ b/plone/schemaeditor/tests/tests.py\n@@ -11,6 +11,8 @@\n import doctest\n import os\n import plone.schemaeditor\n+import re\n+import six\n import unittest\n \n \n@@ -34,6 +36,15 @@ def tearDown(self):\n     classImplements(implementedBy(BaseRequest) - ITestLayer)\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            want = re.sub(\'zExceptions.unauthorized.Unauthorized\', \'Unauthorized\', want)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     return unittest.TestSuite([\n \n@@ -45,7 +56,8 @@ def test_suite():\n             \'minmax.rst\',\n             setUp=setUp,\n             tearDown=tearDown,\n-            optionflags=optionflags\n+            optionflags=optionflags,\n+            checker=Py23DocChecker(),\n         ),\n \n     ])\ndiff --git a/setup.py b/setup.py\nindex 067f12c..7cf34ec 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -16,8 +16,11 @@\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.0",\n         "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n'

