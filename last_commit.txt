Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2019-12-05T15:48:42+01:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/2e3b37606c38e2d390d6e3028c71b7a9fd2c4638

Remove the 'set_language' parameter when 'always_set_cookie' is enabled in language control panel.

Files changed:
A news/362.feature
M src/plone/app/multilingual/browser/selector.py
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/news/362.feature b/news/362.feature\nnew file mode 100644\nindex 00000000..6eea1d4c\n--- /dev/null\n+++ b/news/362.feature\n@@ -0,0 +1,2 @@\n+Remove the \'set_language\' parameter when \'always_set_cookie\' is enabled in language control panel. See #362\n+[erral]\ndiff --git a/src/plone/app/multilingual/browser/selector.py b/src/plone/app/multilingual/browser/selector.py\nindex 4335ae08..0bd6167e 100644\n--- a/src/plone/app/multilingual/browser/selector.py\n+++ b/src/plone/app/multilingual/browser/selector.py\n@@ -2,6 +2,9 @@\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import NOTG\n+from plone.i18n.interfaces import ILanguageSchema\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n from zope.component import queryAdapter\n from zope.component.hooks import getSite\n from ZTUtils import make_query\n@@ -79,16 +82,21 @@ class LanguageSelectorViewlet(LanguageSelector):\n     def languages(self):\n         languages_info = super(LanguageSelectorViewlet, self).languages()\n         results = []\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         translation_group = queryAdapter(self.context, ITG)\n         if translation_group is None:\n             translation_group = NOTG\n+\n         for lang_info in languages_info:\n             # Avoid to modify the original language dict\n             data = lang_info.copy()\n             data[\'translated\'] = True\n-            query_extras = {\n-                \'set_language\': data[\'code\'],\n-            }\n+            query_extras = {}\n+            if not settings.set_cookie_always:\n+                query_extras.update({\n+                    \'set_language\': data[\'code\'],\n+                })\n             post_path = getPostPath(self.context, self.request)\n             if post_path:\n                 query_extras[\'post_path\'] = post_path\ndiff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 515bc7da..12edcb4f 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -11,7 +11,9 @@\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING\n+from plone.app.multilingual.testing import PAM_INTEGRATION_PRESET_TESTING\n from plone.dexterity.utils import createContentInContainer\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n@@ -930,3 +932,142 @@ def assertUrlsEqual(self, url1, url2):\n         self.assertEqual(parsed_url_1[2], parsed_url_2[2])\n         self.assertEqual(parsed_url_1[3], parsed_url_2[3])\n         self.assertEqual(parse_qs_1, parse_qs_2)\n+\n+\n+class TestLanguageSelectorSetLanguage(unittest.TestCase):\n+    layer = PAM_INTEGRATION_PRESET_TESTING\n+\n+    def setUp(self):\n+        # Set test variables\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.request = self.layer[\'request\']\n+        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+\n+        registry = getUtility(IRegistry)\n+        self.settings = registry.forInterface(ILanguageSchema, prefix="plone")\n+\n+    def test_set_language_is_present(self):\n+        """ test the presence of set_language parameter in the urls created in the language selector"""\n+\n+        self.settings.set_cookie_always = False\n+        self.selector_viewlet = LanguageSelectorViewlet(\n+            self.portal[\'en\'], self.request, None, None\n+        )\n+        self.selector_viewlet.update()\n+\n+        selector_languages = self.selector_viewlet.languages()\n+        tg = ITG(self.portal[\'en\'])\n+\n+        self.assertListEqual(\n+            selector_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'en\',\n+                        \'query\': \'?set_language=en\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'ca\',\n+                        \'query\': \'?set_language=ca\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'es\',\n+                        \'query\': \'?set_language=es\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n+\n+    def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n+        """ test the absence of set_language parameter in the urls created in the language selector"""\n+        self.settings.set_cookie_always = True\n+        self.selector_viewlet = LanguageSelectorViewlet(\n+            self.portal[\'en\'], self.request, None, None\n+        )\n+        self.selector_viewlet.update()\n+\n+        selector_languages = self.selector_viewlet.languages()\n+        tg = ITG(self.portal[\'en\'])\n+\n+        self.assertListEqual(\n+            selector_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'en\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'ca\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'es\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2019-12-06T01:54:44+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/34c08b43689938054fd845abd49c3a4e32e22239

Merge pull request #363 from plone/erral-issue-362

Remove the 'set_language' parameter when 'always_set_cookie' is enabled (master)

Files changed:
A news/362.feature
M src/plone/app/multilingual/browser/selector.py
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/news/362.feature b/news/362.feature\nnew file mode 100644\nindex 00000000..6eea1d4c\n--- /dev/null\n+++ b/news/362.feature\n@@ -0,0 +1,2 @@\n+Remove the \'set_language\' parameter when \'always_set_cookie\' is enabled in language control panel. See #362\n+[erral]\ndiff --git a/src/plone/app/multilingual/browser/selector.py b/src/plone/app/multilingual/browser/selector.py\nindex 4335ae08..0bd6167e 100644\n--- a/src/plone/app/multilingual/browser/selector.py\n+++ b/src/plone/app/multilingual/browser/selector.py\n@@ -2,6 +2,9 @@\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import NOTG\n+from plone.i18n.interfaces import ILanguageSchema\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n from zope.component import queryAdapter\n from zope.component.hooks import getSite\n from ZTUtils import make_query\n@@ -79,16 +82,21 @@ class LanguageSelectorViewlet(LanguageSelector):\n     def languages(self):\n         languages_info = super(LanguageSelectorViewlet, self).languages()\n         results = []\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         translation_group = queryAdapter(self.context, ITG)\n         if translation_group is None:\n             translation_group = NOTG\n+\n         for lang_info in languages_info:\n             # Avoid to modify the original language dict\n             data = lang_info.copy()\n             data[\'translated\'] = True\n-            query_extras = {\n-                \'set_language\': data[\'code\'],\n-            }\n+            query_extras = {}\n+            if not settings.set_cookie_always:\n+                query_extras.update({\n+                    \'set_language\': data[\'code\'],\n+                })\n             post_path = getPostPath(self.context, self.request)\n             if post_path:\n                 query_extras[\'post_path\'] = post_path\ndiff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 515bc7da..12edcb4f 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -11,7 +11,9 @@\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING\n+from plone.app.multilingual.testing import PAM_INTEGRATION_PRESET_TESTING\n from plone.dexterity.utils import createContentInContainer\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n@@ -930,3 +932,142 @@ def assertUrlsEqual(self, url1, url2):\n         self.assertEqual(parsed_url_1[2], parsed_url_2[2])\n         self.assertEqual(parsed_url_1[3], parsed_url_2[3])\n         self.assertEqual(parse_qs_1, parse_qs_2)\n+\n+\n+class TestLanguageSelectorSetLanguage(unittest.TestCase):\n+    layer = PAM_INTEGRATION_PRESET_TESTING\n+\n+    def setUp(self):\n+        # Set test variables\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.request = self.layer[\'request\']\n+        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+\n+        registry = getUtility(IRegistry)\n+        self.settings = registry.forInterface(ILanguageSchema, prefix="plone")\n+\n+    def test_set_language_is_present(self):\n+        """ test the presence of set_language parameter in the urls created in the language selector"""\n+\n+        self.settings.set_cookie_always = False\n+        self.selector_viewlet = LanguageSelectorViewlet(\n+            self.portal[\'en\'], self.request, None, None\n+        )\n+        self.selector_viewlet.update()\n+\n+        selector_languages = self.selector_viewlet.languages()\n+        tg = ITG(self.portal[\'en\'])\n+\n+        self.assertListEqual(\n+            selector_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'en\',\n+                        \'query\': \'?set_language=en\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'ca\',\n+                        \'query\': \'?set_language=ca\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'es\',\n+                        \'query\': \'?set_language=es\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n+\n+    def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n+        """ test the absence of set_language parameter in the urls created in the language selector"""\n+        self.settings.set_cookie_always = True\n+        self.selector_viewlet = LanguageSelectorViewlet(\n+            self.portal[\'en\'], self.request, None, None\n+        )\n+        self.selector_viewlet.update()\n+\n+        selector_languages = self.selector_viewlet.languages()\n+        tg = ITG(self.portal[\'en\'])\n+\n+        self.assertListEqual(\n+            selector_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'en\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'ca\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'es\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n'

