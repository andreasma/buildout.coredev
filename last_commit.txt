Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2018-04-13T12:55:33+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/d6bf9065018e25b99af1e97c0757e9b2ad3eb5b5

Resolve UIDs with host

Files changed:
M CHANGES.rst
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2519b7e..84dcdc6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Allow resolving of links with absolute path
+- Allow resolving of links with absolute path and host
   [tomgross]
 
 - Make plone.namedfile hard testing dependency
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index a1a3658..fbe0b85 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -13,6 +13,7 @@
 from six.moves.urllib.parse import unquote
 from six.moves.urllib.parse import urljoin
 from six.moves.urllib.parse import urlsplit
+from six.moves.urllib.parse import urlunsplit
 from unidecode import unidecode
 from zExceptions import NotFound
 from ZODB.POSException import ConflictError
@@ -333,18 +334,22 @@ def unknown_starttag(self, tag, attrs):
             if (tag == 'a' or tag == 'area') and 'href' in attributes:
                 href = attributes['href']
                 scheme = urlsplit(href)[0]
-                if not scheme \
-                        and not href.startswith('mailto<') \
+                url_parts = urlsplit(href)
+                scheme = url_parts[0]
+                # we are only interested in path and beyond /foo/bar?x=2#abc
+                path_parts = urlunsplit(['', ''] + list(url_parts[2:]))
+                if not href.startswith('mailto<') \
                         and not href.startswith('mailto:') \
                         and not href.startswith('tel:') \
                         and not href.startswith('#'):
-                    obj, subpath, appendix = self.resolve_link(href)
+                    obj, subpath, appendix = self.resolve_link(path_parts)
                     if obj is not None:
                         href = obj.absolute_url()
                         if subpath:
                             href += '/' + subpath
                         href += appendix
                     elif resolveuid_re.match(href) is None \
+                            and not scheme \
                             and not href.startswith('/'):
                         # absolutize relative URIs; this text isn't necessarily
                         # being rendered in the context where it was stored
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 223b710..0de8bf5 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -136,10 +136,9 @@ def test_resolve_uids_in_links(self):
     <a class="internal-link" href="resolveuid/%s#named-anchor">Some anchored link</a>
   </body>
 </html>""" % (self.UID, self.UID)
-        res = self.parser(text)
-        self.assertTrue('href="http://nohost/plone/image.jpg"' in str(res))
-        self.assertTrue('href="http://nohost/plone/image.jpg#named-anchor"'
-                        in str(res))
+        res = str(self.parser(text))
+        self.assertIn('href="http://nohost/plone/image.jpg"', res)
+        self.assertIn('href="http://nohost/plone/image.jpg#named-anchor"', res)
 
     def test_resolve_uids_relative_link(self):
         text_in = """<a href="../resolveuid/%s">foo</a>""" % self.UID
@@ -203,7 +202,7 @@ def test_resolve_uids_handles_junk(self):
         self._assertTransformsTo(text_in, text_in)
 
     def test_resolve_uids_entities(self):
-        text_in = """<a class="external-link" href="http://www.example.org/foo?a=1&amp;b=2">example.org</a>"""
+        text_in = """<a href="http://www.example.org/foo?a=1&amp;b=2" class="external-link">example.org</a>"""
         self._assertTransformsTo(text_in, text_in)
 
     def test_resolveuid_view(self):


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2018-04-24T07:17:18Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.outputfilters/commit/b3d1512539250497d28699161801bea878e799a3

Remove redundant code

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index fbe0b85..ed2d69d 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -333,7 +333,6 @@ def unknown_starttag(self, tag, attrs):
                 self.in_link = True
             if (tag == 'a' or tag == 'area') and 'href' in attributes:
                 href = attributes['href']
-                scheme = urlsplit(href)[0]
                 url_parts = urlsplit(href)
                 scheme = url_parts[0]
                 # we are only interested in path and beyond /foo/bar?x=2#abc


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2018-05-02T16:33:26+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/1dfb70a5c97112ce33942def098c172e3a6cbb05

Merge pull request #29 from plone/tg_resolve_host_uids

Resolve UIDs with host

Files changed:
M CHANGES.rst
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2519b7e..84dcdc6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Allow resolving of links with absolute path
+- Allow resolving of links with absolute path and host
   [tomgross]
 
 - Make plone.namedfile hard testing dependency
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index a1a3658..ed2d69d 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -13,6 +13,7 @@
 from six.moves.urllib.parse import unquote
 from six.moves.urllib.parse import urljoin
 from six.moves.urllib.parse import urlsplit
+from six.moves.urllib.parse import urlunsplit
 from unidecode import unidecode
 from zExceptions import NotFound
 from ZODB.POSException import ConflictError
@@ -332,19 +333,22 @@ def unknown_starttag(self, tag, attrs):
                 self.in_link = True
             if (tag == 'a' or tag == 'area') and 'href' in attributes:
                 href = attributes['href']
-                scheme = urlsplit(href)[0]
-                if not scheme \
-                        and not href.startswith('mailto<') \
+                url_parts = urlsplit(href)
+                scheme = url_parts[0]
+                # we are only interested in path and beyond /foo/bar?x=2#abc
+                path_parts = urlunsplit(['', ''] + list(url_parts[2:]))
+                if not href.startswith('mailto<') \
                         and not href.startswith('mailto:') \
                         and not href.startswith('tel:') \
                         and not href.startswith('#'):
-                    obj, subpath, appendix = self.resolve_link(href)
+                    obj, subpath, appendix = self.resolve_link(path_parts)
                     if obj is not None:
                         href = obj.absolute_url()
                         if subpath:
                             href += '/' + subpath
                         href += appendix
                     elif resolveuid_re.match(href) is None \
+                            and not scheme \
                             and not href.startswith('/'):
                         # absolutize relative URIs; this text isn't necessarily
                         # being rendered in the context where it was stored
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 223b710..0de8bf5 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -136,10 +136,9 @@ def test_resolve_uids_in_links(self):
     <a class="internal-link" href="resolveuid/%s#named-anchor">Some anchored link</a>
   </body>
 </html>""" % (self.UID, self.UID)
-        res = self.parser(text)
-        self.assertTrue('href="http://nohost/plone/image.jpg"' in str(res))
-        self.assertTrue('href="http://nohost/plone/image.jpg#named-anchor"'
-                        in str(res))
+        res = str(self.parser(text))
+        self.assertIn('href="http://nohost/plone/image.jpg"', res)
+        self.assertIn('href="http://nohost/plone/image.jpg#named-anchor"', res)
 
     def test_resolve_uids_relative_link(self):
         text_in = """<a href="../resolveuid/%s">foo</a>""" % self.UID
@@ -203,7 +202,7 @@ def test_resolve_uids_handles_junk(self):
         self._assertTransformsTo(text_in, text_in)
 
     def test_resolve_uids_entities(self):
-        text_in = """<a class="external-link" href="http://www.example.org/foo?a=1&amp;b=2">example.org</a>"""
+        text_in = """<a href="http://www.example.org/foo?a=1&amp;b=2" class="external-link">example.org</a>"""
         self._assertTransformsTo(text_in, text_in)
 
     def test_resolveuid_view(self):


