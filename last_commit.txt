Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2018-09-18T15:37:34+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.querystring/commit/ce9ac91721b8a04dbba2d960549f69969b24bf81

fix query_index_modifiers and tests with py3

Files changed:
M plone/app/querystring/indexmodifiers/query_index_modifiers.py
M plone/app/querystring/testing.py
M plone/app/querystring/tests/testRegistryReader.py

b'diff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\nindex 7b591de..e36de01 100644\n--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n@@ -24,7 +24,7 @@ class Subject(object):\n     def __call__(self, value):\n         query = value[\'query\']\n         # query can be a unicode string or a list of unicode strings.\n-        if isinstance(query, six.text_type):\n+        if six.PY2 and isinstance(query, six.text_type):\n             query = query.encode("utf-8")\n         elif isinstance(query, list):\n             # We do not want to change the collections\' own query string,\n@@ -34,7 +34,7 @@ def __call__(self, value):\n             # unicode strings\n             i = 0\n             for item in copy_of_query:\n-                if isinstance(item, six.text_type):\n+                if six.PY2 and isinstance(item, six.text_type):\n                     copy_of_query[i] = item.encode("utf-8")\n                 i += 1\n             query = copy_of_query\n@@ -55,7 +55,7 @@ def __call__(self, value):\n         def _normalize(val):\n             """Encode value, parse dates.\n             """\n-            if isinstance(val, six.text_type):\n+            if six.PY2 and isinstance(val, six.text_type):\n                 val = val.encode("utf-8")\n \n             if isinstance(val, six.string_types):\ndiff --git a/plone/app/querystring/testing.py b/plone/app/querystring/testing.py\nindex 44c37ef..ee6929f 100644\n--- a/plone/app/querystring/testing.py\n+++ b/plone/app/querystring/testing.py\n@@ -1,37 +1,25 @@\n # -*- coding: utf-8 -*-\n-\n-from zope.configuration import xmlconfig\n-\n-from plone.testing import z2\n-\n-from plone.app.testing import PloneSandboxLayer\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n+from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.app.testing.layers import IntegrationTesting\n-\n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-    PLONE50 = True\n-except ImportError:\n-    PLONE50 = False\n+from plone.testing import z2\n+from zope.configuration import xmlconfig\n \n \n class PloneAppQuerystringTestProfileLayer(PloneSandboxLayer):\n \n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n     def setUpZope(self, app, configurationContext):\n-        import Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-        z2.installProduct(app, \'Products.Archetypes\')\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n         import plone.app.querystring.tests\n         self.loadZCML(\'configure.zcml\', package=plone.app.querystring.tests)\n \n     def setUpPloneSite(self, portal):\n-        if PLONE50:\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n         applyProfile(portal, \'plone.app.querystring.tests:registry\')\n         setRoles(portal, TEST_USER_ID, [\'Manager\'])\n         login(portal, TEST_USER_NAME)\ndiff --git a/plone/app/querystring/tests/testRegistryReader.py b/plone/app/querystring/tests/testRegistryReader.py\nindex 1966a1a..b400c84 100644\n--- a/plone/app/querystring/tests/testRegistryReader.py\n+++ b/plone/app/querystring/tests/testRegistryReader.py\n@@ -134,4 +134,4 @@ def test_registry_adapter(self):\n         registry = self.createRegistry(td.minimal_correct_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader()\n-        self.assertEqual(result.keys(), [\'sortable_indexes\', \'indexes\'])\n+        self.assertEqual(list(result.keys()), [\'sortable_indexes\', \'indexes\'])\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2018-09-18T15:37:34+02:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.querystring/commit/d8f717d5ccb28d42a54412cca600de2ae6cd17a0

Make comparison stable

Files changed:
M plone/app/querystring/tests/testRegistryReader.py

b"diff --git a/plone/app/querystring/tests/testRegistryReader.py b/plone/app/querystring/tests/testRegistryReader.py\nindex b400c84..4f8ea15 100644\n--- a/plone/app/querystring/tests/testRegistryReader.py\n+++ b/plone/app/querystring/tests/testRegistryReader.py\n@@ -134,4 +134,7 @@ def test_registry_adapter(self):\n         registry = self.createRegistry(td.minimal_correct_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader()\n-        self.assertEqual(list(result.keys()), ['sortable_indexes', 'indexes'])\n+        self.assertEqual(\n+            sorted(list(result.keys())),\n+            ['indexes', 'sortable_indexes'],\n+        )\n"

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2018-09-18T15:40:52+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.querystring/commit/f221586dd33c7a3477ad95c2608d276e7d9b7a84

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 05b897b..acfc74d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,9 @@ Bug fixes:\n - Fix a case, where objects id starts with roots id\n   [eikichi18]\n \n+- Fix query_index_modifiers and tests with py3\n+  [pbauer, gforcada]\n+\n \n 1.4.8 (2018-02-05)\n ------------------\ndiff --git a/setup.py b/setup.py\nindex d99a900..97e3a1a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -17,9 +17,12 @@\n     classifiers=[\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'collection queries\',\n     author=\'Plone Foundation\',\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2018-10-05T19:26:45Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.querystring/commit/0d32fb1a10c4026ee904e182c354cdba9125d387

Merge branch 'master' into python3

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex acfc74d..1d089bf 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,24 @@\n Changelog\n =========\n \n-1.4.9 (unreleased)\n+1.4.10 (unreleased)\n+-------------------\n+\n+Breaking changes:\n+\n+- *add item here*\n+\n+New features:\n+\n+- *add item here*\n+\n+Bug fixes:\n+\n+- Fix query_index_modifiers and tests with py3\n+  [pbauer, gforcada]\n+\n+\n+1.4.9 (2018-09-28)\n ------------------\n \n Bug fixes:\n@@ -9,9 +26,6 @@ Bug fixes:\n - Fix a case, where objects id starts with roots id\n   [eikichi18]\n \n-- Fix query_index_modifiers and tests with py3\n-  [pbauer, gforcada]\n-\n \n 1.4.8 (2018-02-05)\n ------------------\ndiff --git a/setup.py b/setup.py\nindex 97e3a1a..16b4a7e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from setuptools import setup, find_packages\n \n-version = \'1.4.9.dev0\'\n+version = \'1.4.10.dev0\'\n \n long_description = open("README.rst").read() + "\\n"\n long_description += open("CHANGES.rst").read()\n@@ -27,9 +27,9 @@\n     keywords=\'collection queries\',\n     author=\'Plone Foundation\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.python.org/pypi/plone.app.querystring\',\n+    url=\'https://pypi.org/project/plone.app.querystring\',\n     license=\'GPL version 2\',\n-    packages=find_packages(exclude=[\'ez_setup\']),\n+    packages=find_packages(),\n     namespace_packages=[\'plone\', \'plone.app\'],\n     include_package_data=True,\n     zip_safe=False,\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2018-10-12T22:39:59-04:00
Author: David Glick (davisagli) <dglick@salesforce.com>
Commit: https://github.com/plone/plone.app.querystring/commit/98f4857336d38fc8154a1ad1d6033f24f54bb13c

Merge pull request #89 from plone/python3

fix query_index_modifiers and tests with py3

Files changed:
M CHANGES.rst
M plone/app/querystring/indexmodifiers/query_index_modifiers.py
M plone/app/querystring/testing.py
M plone/app/querystring/tests/testRegistryReader.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0bbb0ca..1d089bf 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix query_index_modifiers and tests with py3\n+  [pbauer, gforcada]\n \n \n 1.4.9 (2018-09-28)\ndiff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\nindex 7b591de..e36de01 100644\n--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py\n@@ -24,7 +24,7 @@ class Subject(object):\n     def __call__(self, value):\n         query = value[\'query\']\n         # query can be a unicode string or a list of unicode strings.\n-        if isinstance(query, six.text_type):\n+        if six.PY2 and isinstance(query, six.text_type):\n             query = query.encode("utf-8")\n         elif isinstance(query, list):\n             # We do not want to change the collections\' own query string,\n@@ -34,7 +34,7 @@ def __call__(self, value):\n             # unicode strings\n             i = 0\n             for item in copy_of_query:\n-                if isinstance(item, six.text_type):\n+                if six.PY2 and isinstance(item, six.text_type):\n                     copy_of_query[i] = item.encode("utf-8")\n                 i += 1\n             query = copy_of_query\n@@ -55,7 +55,7 @@ def __call__(self, value):\n         def _normalize(val):\n             """Encode value, parse dates.\n             """\n-            if isinstance(val, six.text_type):\n+            if six.PY2 and isinstance(val, six.text_type):\n                 val = val.encode("utf-8")\n \n             if isinstance(val, six.string_types):\ndiff --git a/plone/app/querystring/testing.py b/plone/app/querystring/testing.py\nindex 44c37ef..ee6929f 100644\n--- a/plone/app/querystring/testing.py\n+++ b/plone/app/querystring/testing.py\n@@ -1,37 +1,25 @@\n # -*- coding: utf-8 -*-\n-\n-from zope.configuration import xmlconfig\n-\n-from plone.testing import z2\n-\n-from plone.app.testing import PloneSandboxLayer\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n+from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.app.testing.layers import IntegrationTesting\n-\n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-    PLONE50 = True\n-except ImportError:\n-    PLONE50 = False\n+from plone.testing import z2\n+from zope.configuration import xmlconfig\n \n \n class PloneAppQuerystringTestProfileLayer(PloneSandboxLayer):\n \n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n     def setUpZope(self, app, configurationContext):\n-        import Products.ATContentTypes\n-        self.loadZCML(package=Products.ATContentTypes)\n-        z2.installProduct(app, \'Products.Archetypes\')\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n         import plone.app.querystring.tests\n         self.loadZCML(\'configure.zcml\', package=plone.app.querystring.tests)\n \n     def setUpPloneSite(self, portal):\n-        if PLONE50:\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n         applyProfile(portal, \'plone.app.querystring.tests:registry\')\n         setRoles(portal, TEST_USER_ID, [\'Manager\'])\n         login(portal, TEST_USER_NAME)\ndiff --git a/plone/app/querystring/tests/testRegistryReader.py b/plone/app/querystring/tests/testRegistryReader.py\nindex 1966a1a..4f8ea15 100644\n--- a/plone/app/querystring/tests/testRegistryReader.py\n+++ b/plone/app/querystring/tests/testRegistryReader.py\n@@ -134,4 +134,7 @@ def test_registry_adapter(self):\n         registry = self.createRegistry(td.minimal_correct_xml)\n         reader = IQuerystringRegistryReader(registry)\n         result = reader()\n-        self.assertEqual(result.keys(), [\'sortable_indexes\', \'indexes\'])\n+        self.assertEqual(\n+            sorted(list(result.keys())),\n+            [\'indexes\', \'sortable_indexes\'],\n+        )\ndiff --git a/setup.py b/setup.py\nindex 0925c9d..16b4a7e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -21,6 +21,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'collection queries\',\n     author=\'Plone Foundation\',\n'

