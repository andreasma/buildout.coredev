Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-06-26T20:19:43+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/02b6fcbd3dc7baabe8e1d9438ee26e57881a63fd

skip 2 test that are obsolete on py3

Files changed:
M plone/app/dexterity/behaviors/tests/test_metadata.py

b"diff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py\nindex 562dd99..a1c698e 100644\n--- a/plone/app/dexterity/behaviors/tests/test_metadata.py\n+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py\n@@ -9,6 +9,7 @@\n from zope.component import getUtility\n from zope.schema.interfaces import ConstraintNotSatisfied\n \n+import six\n import unittest\n \n \n@@ -26,9 +27,11 @@ def test_title_setter(self):\n         b.title = u'foo'\n         self.assertEqual(u'foo', b.context.title)\n \n+    @unittest.skipUnless(six.PY2, 'Only for py2')\n     def test_title_setter_rejects_bytestrings(self):\n         b = self._makeOne()\n-        self.assertRaises(ValueError, setattr, b, 'title', 'f\xc3\xb8\xc3\xb8')\n+        with self.assertRaises(ValueError):\n+            setattr(b, 'title', 'f\xc3\xb8\xc3\xb8')\n \n     def test_title_getter(self):\n         b = self._makeOne()\n@@ -40,9 +43,11 @@ def test_description_setter(self):\n         b.description = u'foo'\n         self.assertEqual(u'foo', b.context.description)\n \n+    @unittest.skipUnless(six.PY2, 'Only for py2')\n     def test_description_setter_rejects_bytestrings(self):\n         b = self._makeOne()\n-        self.assertRaises(ValueError, setattr, b, 'description', 'f\xc3\xb8\xc3\xb8')\n+        with self.assertRaises(ValueError):\n+            setattr(b, 'description', 'f\xc3\xb8\xc3\xb8')\n \n     def test_description_getter(self):\n         b = self._makeOne()\n"

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-06-26T20:19:43+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/0999b300439fd0fb6540d29283d349b6db0a1845

fix image-upload for py3

Files changed:
M plone/app/dexterity/factories.py

b"diff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py\nindex df26350..2734819 100644\n--- a/plone/app/dexterity/factories.py\n+++ b/plone/app/dexterity/factories.py\n@@ -28,7 +28,7 @@ def __call__(self, name, content_type, data):\n         ctr = getToolByName(self.context, 'content_type_registry')\n         type_ = ctr.findTypeName(name.lower(), content_type, data) or 'File'\n \n-        name = name.decode('utf8')\n+        name = ploneutils.safe_unicode(name)\n \n         chooser = INameChooser(self.context)\n \n@@ -44,7 +44,7 @@ def __call__(self, name, content_type, data):\n             # its type name\n             # XXX heuristics are harmful behavior, here a better implemenation\n             #     is needed\n-            filename = ploneutils.safe_unicode(name)\n+            filename = name\n             if 'Image' in type_:\n                 image = NamedBlobImage(\n                     data=data,\n"

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-06-26T20:19:43+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/13b3248155a0c33884118586c118b664205359fc

fix export and import of type-profiles

Files changed:
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/modeleditor.py

b'diff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py\nindex 1b925bc..80ca225 100644\n--- a/plone/app/dexterity/browser/export.py\n+++ b/plone/app/dexterity/browser/export.py\n@@ -5,10 +5,12 @@\n from lxml import etree\n from plone.supermodel import serializeModel\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_encode\n+from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.context import TarballExportContext\n-from six import StringIO\n+from six import BytesIO\n from zipfile import ZipFile\n \n import time\n@@ -29,7 +31,7 @@ def __init__(self, tool, typelist, encoding=None, base_name=\'setup_tool\'):\n         self._archive_filename = (base_name + \'-%4d%02d%02d%02d%02d%02d.zip\'\n                                   % timestamp[:6])\n \n-        self._archive_stream = StringIO()\n+        self._archive_stream = BytesIO()\n         self._archive = ZipFile(self._archive_stream, \'w\')\n \n     def writeDataFile(self, filename, text, content_type, subdir=None):\n@@ -51,11 +53,12 @@ def writeDataFile(self, filename, text, content_type, subdir=None):\n             # Add a marker for ZopeSkel additions\n             root.append(etree.Comment(\' -*- extra stuff goes here -*- \'))\n             # minor prettifying\n-            text = \'<?xml version="1.0"?>\\n{0}\'.format(etree.tostring(root))\n+            root_str = safe_unicode(etree.tostring(root))\n+            text = \'<?xml version="1.0"?>\\n{0}\'.format(root_str)\n             text = text.replace(\'<!--\', \' <!--\')\n             text = text.replace(\'-->\', \'-->\\n\')\n \n-        self._archive.writestr(filename, text)\n+        self._archive.writestr(filename, safe_encode(text))\n \n \n class TypesExport(BrowserView):\n@@ -116,7 +119,7 @@ def __call__(self):\n             archive_filename = (\'dexterity_models-%4d%02d%02d%02d%02d%02d.zip\'\n                                 % timestamp[:6])\n \n-            archive_stream = StringIO()\n+            archive_stream = BytesIO()\n             archive = ZipFile(archive_stream, \'w\')\n \n             for item in items:\ndiff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py\nindex 01f061b..5f60237 100644\n--- a/plone/app/dexterity/browser/import_types.py\n+++ b/plone/app/dexterity/browser/import_types.py\n@@ -146,7 +146,7 @@ def readDataFile(self, filename, subdir=None):\n             filename = \'/\'.join((subdir, filename))\n \n         try:\n-            file = self._archive.open(filename, \'rU\')\n+            file = self._archive.open(filename, \'r\')\n         except KeyError:\n             return None\n \ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex ee109d6..57939f6 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -4,6 +4,7 @@\n from plone.app.dexterity import _\n from plone.supermodel.parser import SupermodelParseError\n from Products.Five import BrowserView\n+from Products.CMFPlone.utils import safe_unicode\n from zope.component import queryMultiAdapter\n \n import json\n@@ -47,7 +48,7 @@ def __call__(self):\n                 return json.dumps({\n                     \'success\': False,\n                     \'message\': \'XMLSyntaxError: {0}\'.format(\n-                        e.message.encode(\'utf8\')\n+                        safe_unicode(e.args[0])\n                     )\n                 })\n \n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-06-26T20:19:43+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/9600a7ef31773030e6c538f4b4648d72675e234f

fix most tests

Files changed:
M plone/app/dexterity/tests/editing.txt
M plone/app/dexterity/tests/metadata.txt
M plone/app/dexterity/tests/nextprevious.txt
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/tests/test_import.py

b'diff --git a/plone/app/dexterity/tests/editing.txt b/plone/app/dexterity/tests/editing.txt\nindex cb9cb37..1d8e261 100644\n--- a/plone/app/dexterity/tests/editing.txt\n+++ b/plone/app/dexterity/tests/editing.txt\n@@ -199,32 +199,32 @@ First, prove this won\'t work without an authenticator\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something\')\n   Traceback (most recent call last):\n   ...\n-  Unauthorized: Unauthorized()\n+  AccessControl.unauthorized.Unauthorized: Unauthorized()\n \n Check rejection of bad XML "something"::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something&_authenticator=%s\' % authenticator)\n-  >>> print browser.contents\n+  >>> print(browser.contents)\n   {"message": "XMLSyntaxError: Start tag expected, \'<\' not found, line 1, column 1", "success": false}\n \n We should refuse source that doesn\'t have `model` for the root tag::\n \n   >>> bad_source = model_source.replace(\'model\', \'mode\')\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> print browser.contents\n+  >>> print(browser.contents)\n   {"message": "Error: root tag must be \'model\'", "success": false}\n \n Likewise, only `schema` tags are allowed inside the model::\n \n   >>> bad_source = model_source.replace(\'schema>\', \'scheme>\')\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> print browser.contents\n+  >>> print(browser.contents)\n   {"message": "Error: all model elements must be \'schema\'", "success": false}\n \n Should work with real XML\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n-  >>> print browser.contents\n+  >>> print(browser.contents)\n   {"message": "Saved", "success": true}\n \n That response should have a JSON content type::\n@@ -428,7 +428,7 @@ Now only the allowed types may be added::\n   >>> browser.getLink(url=\'Folder\')\n   Traceback (most recent call last):\n   ...\n-  LinkNotFound...\n+  zope.testbrowser.browser.LinkNotFoundError...\n \n   >>> browser.getLink(url=\'Document\').click()\n   >>> browser.getControl(\'Title\').value = \'Foo Plonista Page\'\n@@ -459,7 +459,7 @@ But actually trying to view the type will now cause an error, as expected::\n   >>> browser.open(\'http://nohost/plone/martin-aspeli/view\')\n   Traceback (most recent call last):\n   ...\n-  ComponentLookupError...\n+  zope.interface.interfaces.ComponentLookupError...\n \n \n Dexterity Types Export\n@@ -482,16 +482,17 @@ zip archive containing files ready to drop into our profile::\n     >>> browser.headers[\'content-disposition\']\n     \'attachment; filename=dexterity_export-....zip\'\n \n-    >>> import StringIO, zipfile\n-    >>> fd = StringIO.StringIO(browser.contents)\n+    >>> import zipfile\n+    >>> import six\n+    >>> fd = six.BytesIO(browser.contents)\n     >>> archive = zipfile.ZipFile(fd, mode=\'r\')\n     >>> archive.namelist()\n     [\'types.xml\', \'types/plonista2.xml\', \'types/plonista-folder.xml\']\n \n     >>> types_xml = archive.read(\'types.xml\')\n-    >>> \'<object name="plonista2" meta_type="Dexterity FTI"/>\' in types_xml\n+    >>> b\'<object name="plonista2" meta_type="Dexterity FTI"/>\' in types_xml\n     True\n-    >>> \'<object name="plonista-folder" meta_type="Dexterity FTI"/>\' in types_xml\n+    >>> b\'<object name="plonista-folder" meta_type="Dexterity FTI"/>\' in types_xml\n     True\n \n Try out the models export button. We should be able to select our types from\n@@ -511,13 +512,15 @@ zip archive containing supermodel xml files::\n     >>> browser.headers[\'content-disposition\']\n     \'attachment; filename=dexterity_models-....zip\'\n \n-    >>> import StringIO, zipfile\n-    >>> fd = StringIO.StringIO(browser.contents)\n+    >>> import zipfile\n+    >>> import six\n+    >>> fd = six.BytesIO(browser.contents)\n     >>> archive = zipfile.ZipFile(fd, mode=\'r\')\n     >>> archive.namelist()\n     [\'models/plonista2.xml\', \'models/plonista-folder.xml\']\n \n-    >>> print archive.read(\'models/plonista2.xml\')\n+    >>> from Products.CMFPlone.utils import safe_unicode\n+    >>> print(safe_unicode(archive.read(\'models/plonista2.xml\')))\n     <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>\n       <schema>\n       ...\n@@ -539,7 +542,7 @@ file::\n     >>> browser.headers[\'content-disposition\']\n     \'attachment; filename=plonista2.xml\'\n \n-    >>> print browser.contents\n+    >>> print(safe_unicode(browser.contents))\n     <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>\n       <schema>\n       ...\ndiff --git a/plone/app/dexterity/tests/metadata.txt b/plone/app/dexterity/tests/metadata.txt\nindex ee78901..3376a21 100644\n--- a/plone/app/dexterity/tests/metadata.txt\n+++ b/plone/app/dexterity/tests/metadata.txt\n@@ -58,8 +58,8 @@ should be able to set same value without a validation error::\n \n     >>> from zope.schema import getFields\n     >>> from plone.dexterity.utils import getAdditionalSchemata\n-    >>> schema = getAdditionalSchemata(context=md).next()\n+    >>> schema = next(getAdditionalSchemata(context=md))\n     >>> field = getFields(schema)[\'creators\']\n     >>> field.get(field.interface(md))\n-    (u\'test_user_1_\',)\n+    (\'test_user_1_\',)\n     >>> field.set(field.interface(md), (u\'test_user_1_\',))\ndiff --git a/plone/app/dexterity/tests/nextprevious.txt b/plone/app/dexterity/tests/nextprevious.txt\nindex 1e7591e..6f3e0e6 100644\n--- a/plone/app/dexterity/tests/nextprevious.txt\n+++ b/plone/app/dexterity/tests/nextprevious.txt\n@@ -94,4 +94,4 @@ link disappear::\n   >>> next = browser.getLink(\'Next\')\n   Traceback (most recent call last):\n   ...\n-  LinkNotFoundError\n+  zope.testbrowser.browser.LinkNotFoundError\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex fdd6fe4..648b28e 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -4,7 +4,8 @@\n \n import doctest\n import unittest\n-\n+import re\n+import six\n \n tests = (\n     \'discussion.txt\',\n@@ -17,9 +18,30 @@\n )\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n+            got = re.sub(\'zope.interface.interfaces.ComponentLookupError\', \'ComponentLookupError\', got)\n+            got = re.sub(\'zope.testbrowser.browser.LinkNotFoundError\', \'LinkNotFoundError\', got)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n-    return unittest.TestSuite(\n-        [layered(doctest.DocFileSuite(f, optionflags=doctest.ELLIPSIS),\n-                 layer=DEXTERITY_FUNCTIONAL_TESTING)\n-            for f in tests]\n-    )\n+    suite = unittest.TestSuite()\n+    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+    for testfile in tests:\n+        suite.addTest(\n+            layered(\n+                doctest.DocFileSuite(\n+                    testfile,\n+                    optionflags=OPTIONFLAGS,\n+                    # package=\'plone.app.dexterity.tests\',\n+                    checker=Py23DocChecker(),\n+                ),\n+                layer=DEXTERITY_FUNCTIONAL_TESTING\n+            )\n+        )\n+    return suite\ndiff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py\nindex f4554c4..3d150ce 100644\n--- a/plone/app/dexterity/tests/test_export.py\n+++ b/plone/app/dexterity/tests/test_export.py\n@@ -34,7 +34,8 @@ def test_exported_XML_valid_for_GS(self):\n             (dexterity_control_panel, self.request), name=\'types-export\')\n \n         # export the \'item\' type and try to parse all XMLs\n-        fd = six.StringIO(types_export_view.__call__())\n+        output = types_export_view.__call__()\n+        fd = six.BytesIO(output)\n         archive = zipfile.ZipFile(fd, mode=\'r\')\n         filenames = archive.namelist()\n         for filename in filenames:\n@@ -45,7 +46,7 @@ def test_exported_XML_valid_for_GS(self):\n                 parseString(file_xml)\n             except ExpatError as e:\n                 msg = \'Parsing XML failed with ExpatError: {0}\'\n-                self.fail(msg.format(e.message))\n+                self.fail(msg.format(e.args[0]))\n \n \n def test_suite():\ndiff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py\nindex 754f088..d0f427c 100644\n--- a/plone/app/dexterity/tests/test_import.py\n+++ b/plone/app/dexterity/tests/test_import.py\n@@ -27,7 +27,7 @@ def testZipFileImportContext(self):\n             \'import\',\n             \'dexterity_export.zip\',\n         )\n-        f = open(zname, \'r\')\n+        f = open(zname, \'rb\')\n         icontext = ZipFileImportContext(types_tool, f)\n \n         types_xml = icontext.readDataFile(\'types.xml\')\n@@ -74,7 +74,7 @@ def testSampleImportStep(self):\n             \'import\',\n             \'dexterity_export.zip\'\n         )\n-        with open(zname, \'r\') as f:\n+        with open(zname, \'rb\') as f:\n             icontext = ZipFileImportContext(types_tool, f)\n             handler(icontext)\n \n@@ -88,7 +88,7 @@ def testSampleImportStep(self):\n         # it would be importing existing types.\n         # This is tested in an invariant.\n         data = TypeProfileImport(profile_file=plone.namedfile.NamedFile())\n-        with open(zname, \'r\') as f:\n+        with open(zname, \'rb\') as f:\n             data.profile_file.data = f.read()\n         self.assertRaises(\n             zope.interface.Invalid,\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-06-26T20:19:43+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/969646bbb2af65c9854b4e2ccfc46520dc0cb979

fix Py23DocChecker

Files changed:
M plone/app/dexterity/tests/editing.txt
M plone/app/dexterity/tests/test_doctests.py

b'diff --git a/plone/app/dexterity/tests/editing.txt b/plone/app/dexterity/tests/editing.txt\nindex 1d8e261..2137dd6 100644\n--- a/plone/app/dexterity/tests/editing.txt\n+++ b/plone/app/dexterity/tests/editing.txt\n@@ -199,7 +199,7 @@ First, prove this won\'t work without an authenticator\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something\')\n   Traceback (most recent call last):\n   ...\n-  AccessControl.unauthorized.Unauthorized: Unauthorized()\n+  AccessControl.unauthorized.Unauthorized: ...\n \n Check rejection of bad XML "something"::\n \ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex 648b28e..bd9f569 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -21,10 +21,11 @@\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            got = re.sub(\'zExceptions.NotFound\', \'NotFound\', got)\n-            got = re.sub(\'zope.interface.interfaces.ComponentLookupError\', \'ComponentLookupError\', got)\n-            got = re.sub(\'zope.testbrowser.browser.LinkNotFoundError\', \'LinkNotFoundError\', got)\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub(\'zExceptions.NotFound\', \'NotFound\', want)\n+            want = re.sub(\'zope.interface.interfaces.ComponentLookupError\', \'ComponentLookupError\', want)\n+            want = re.sub(\'zope.testbrowser.browser.LinkNotFoundError\', \'LinkNotFoundError\', want)\n+            want = re.sub(\'AccessControl.unauthorized.Unauthorized\', \'Unauthorized\', want)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n             want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-06-26T20:59:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/82ae47ed7336e5f803e8ca1fc8700a00fafa4760

python 3 fixes

Files changed:
A plone/app/dexterity/tests/editing.rst
M CHANGES.rst
M docs/advanced/validators.rst
M docs/conf.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/permissions.py
M plone/app/dexterity/tests/test_doctests.py
D plone/app/dexterity/tests/editing.txt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 82bf02e..3162883 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Python 3 fixes.\n+  [jensens]\n \n \n 2.5.0 (2018-06-24)\ndiff --git a/docs/advanced/validators.rst b/docs/advanced/validators.rst\nindex 63147fb..0f5b0db 100644\n--- a/docs/advanced/validators.rst\n+++ b/docs/advanced/validators.rst\n@@ -49,7 +49,7 @@ should return a boolean ``True`` or ``False``.\n \n    Hint: The constraint function does not have access to the context, but\n    if you need to acquire a tool, you can use the\n-   ``zope.app.component.hooks.getSite()`` method to obtain the site root.\n+   ``zope.component.hooks.getSite()`` method to obtain the site root.\n \n To use the constraint, pass the function as the ``constraint`` argument to\n the field constructor, e.g.::\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 5fe5c6b..95a2bec 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -11,7 +11,9 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n+import os\n+import sys\n+\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\ndiff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py\nindex 743511b..b4961de 100644\n--- a/plone/app/dexterity/behaviors/metadata.py\n+++ b/plone/app/dexterity/behaviors/metadata.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n-from DateTime import DateTime\n from datetime import datetime\n+from DateTime import DateTime\n from plone.app.dexterity import _\n from plone.app.z3cform.widget import AjaxSelectFieldWidget\n from plone.app.z3cform.widget import DatetimeFieldWidget\n@@ -13,6 +13,7 @@\n from plone.supermodel import model\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n+from six.moves import map\n from z3c.form.interfaces import IAddForm\n from z3c.form.interfaces import IEditForm\n from z3c.form.widget import ComputedWidgetAttribute\n@@ -26,7 +27,6 @@\n from zope.schema.interfaces import ISequence\n from zope.schema.interfaces import IText\n \n-from six.moves import map\n import six\n \n \ndiff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py\nindex 726c0dc..14401e3 100644\n--- a/plone/app/dexterity/browser/behaviors.py\n+++ b/plone/app/dexterity/browser/behaviors.py\n@@ -18,7 +18,6 @@\n from zope.component import getUtilitiesFor\n from zope.lifecycleevent import modified\n \n-\n import six\n \n \ndiff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py\nindex 5f60237..31d8c9d 100644\n--- a/plone/app/dexterity/browser/import_types.py\n+++ b/plone/app/dexterity/browser/import_types.py\n@@ -15,11 +15,11 @@\n from z3c.form import form\n from zipfile import BadZipfile\n from zipfile import ZipFile\n+from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.interface import Invalid\n from zope.interface import invariant\n-from zope.site.hooks import getSite\n \n import os.path\n import zope.schema\ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex 57939f6..21ecc39 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -3,8 +3,8 @@\n from lxml import etree\n from plone.app.dexterity import _\n from plone.supermodel.parser import SupermodelParseError\n-from Products.Five import BrowserView\n from Products.CMFPlone.utils import safe_unicode\n+from Products.Five import BrowserView\n from zope.component import queryMultiAdapter\n \n import json\ndiff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py\nindex fa06227..4e3355a 100644\n--- a/plone/app/dexterity/permissions.py\n+++ b/plone/app/dexterity/permissions.py\n@@ -18,7 +18,6 @@\n from zope.publisher.browser import TestRequest\n from zope.security.interfaces import IPermission\n \n-\n import six\n \n \ndiff --git a/plone/app/dexterity/tests/editing.txt b/plone/app/dexterity/tests/editing.rst\nsimilarity index 95%\nrename from plone/app/dexterity/tests/editing.txt\nrename to plone/app/dexterity/tests/editing.rst\nindex 2137dd6..936bf6f 100644\n--- a/plone/app/dexterity/tests/editing.txt\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -57,7 +57,7 @@ The new type should have the dublin core behavior assigned by default::\n   >>> \'document_icon\' in plonista.getIconExprObject().text\n   True\n \n-The listing needs to not break if a type description was stored encoded.\n+The listing needs to not break if a type description was stored encoded::\n \n   >>> plonista.description = \'\\xc3\\xbc\'\n   >>> transaction.commit()\n@@ -67,7 +67,7 @@ The listing needs to not break if a type description was stored encoded.\n \n The listing should also feature a CSS class for display in the listing\n using the short name. Add a new content type to ensure the short name\n-is present on the page:\n+is present on the page::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types\')\n   >>> browser.getLink(\'Add New Content Type\').click()\n@@ -110,7 +110,7 @@ schema for the \'plonista\' type we just created::\n   \'http://nohost/plone/dexterity-types/plonista/@@fields\'\n \n Demonstrate that all the registered field types can be added edited\n-and saved.\n+and saved::\n \n   >>> from zope import component\n   >>> from plone.i18n.normalizer.interfaces import IIDNormalizer\n@@ -148,10 +148,10 @@ Editing the XML model directly\n Much of what the XML model editor does is happening in JavaScript, but we can\n still test the Zope side.\n \n-Get some tools.\n+Get some tools::\n \n   >>> from cgi import escape\n-  >>> from urllib import quote_plus\n+  >>> from six.moves.urllib.parse import quote_plus\n \n We should be able to navigate to the modeleditor view by clicking a\n button on the field list form::\n@@ -204,28 +204,34 @@ First, prove this won\'t work without an authenticator\n Check rejection of bad XML "something"::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something&_authenticator=%s\' % authenticator)\n-  >>> print(browser.contents)\n-  {"message": "XMLSyntaxError: Start tag expected, \'<\' not found, line 1, column 1", "success": false}\n+  >>> from pprint import pprint\n+  >>> import json\n+  >>> pprint(json.loads(browser.contents))\n+  {\'message\': "XMLSyntaxError: Start tag expected, \'<\' not found, line 1, column "\n+                  \'1\',\n+       \'success\': False}\n \n We should refuse source that doesn\'t have `model` for the root tag::\n \n   >>> bad_source = model_source.replace(\'model\', \'mode\')\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> print(browser.contents)\n-  {"message": "Error: root tag must be \'model\'", "success": false}\n+  >>> pprint(json.loads(browser.contents))\n+  {\'message\': "Error: root tag must be \'model\'", \'success\': False}\n \n Likewise, only `schema` tags are allowed inside the model::\n \n   >>> bad_source = model_source.replace(\'schema>\', \'scheme>\')\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> print(browser.contents)\n-  {"message": "Error: all model elements must be \'schema\'", "success": false}\n+  >>> pprint(json.loads(browser.contents))\n+  {\'message\': "Error: all model elements must be \'schema\'", \'success\': False}\n \n Should work with real XML\n \n+::\n+\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n-  >>> print(browser.contents)\n-  {"message": "Saved", "success": true}\n+  >>> pprint(json.loads(browser.contents))\n+  {\'message\': \'Saved\', \'success\': True}\n \n That response should have a JSON content type::\n \n@@ -265,6 +271,8 @@ If a type\'s schema is not stored as XML in its FTI\'s schema property, it cannot\n currently be edited through the web.  However, the fields of the schema can at\n least be listed.\n \n+::\n+\n   >>> from zope.interface import Interface\n   >>> from zope import schema\n   >>> import plone.app.dexterity.tests\n@@ -288,7 +296,7 @@ We should not be offering the \'Edit XML\' button::\n Cloning a content type\n ----------------------\n \n-A content type can be cloned.\n+A content type can be cloned::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types\')\n   >>> browser.getControl(name=\'crud-edit.plonista.widgets.select:list\').controls[0].selected = True\n@@ -314,7 +322,7 @@ Validation to prevent duplicate content types\n ---------------------------------------------\n \n A new content type cannot be created if its name is the same as an existing\n-content type.\n+content type::\n \n   >>> browser.getLink(\'Add New Content Type\').click()\n   >>> browser.getControl(\'Type Name\').value = \'foobar\'\n@@ -325,7 +333,7 @@ content type.\n   >>> "There is already a content type named \'plonista\'" in browser.contents\n   True\n \n-To avoid confusion, the title must also be unique.\n+To avoid confusion, the title must also be unique::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types\')\n   >>> browser.getLink(\'Add New Content Type\').click()\n@@ -337,7 +345,7 @@ To avoid confusion, the title must also be unique.\n   >>> "There is already a content type named \'Plonista\'" in browser.contents\n   True\n \n-Similar checks are performed when cloning.\n+Similar checks are performed when cloning::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types\')\n   >>> browser.getControl(name=\'crud-edit.plonista.widgets.select:list\').controls[0].selected = True\n@@ -392,7 +400,7 @@ We can configure the plonista-folder to allow contained content types::\n   >>> browser.getControl(\'All content types\').click()\n   >>> browser.getControl(\'Apply\').click()\n \n-If we add a plonista-folder, we can then add other content items inside it.\n+If we add a plonista-folder, we can then add other content items inside it::\n \n   >>> browser.open(\'http://nohost/plone\')\n   >>> browser.getLink(\'Plonista Folder\').click()\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex bd9f569..9b128c3 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -3,13 +3,14 @@\n from plone.testing import layered\n \n import doctest\n-import unittest\n import re\n import six\n+import unittest\n+\n \n tests = (\n     \'discussion.txt\',\n-    \'editing.txt\',\n+    \'editing.rst\',\n     \'namefromtitle.txt\',\n     \'metadata.txt\',\n     \'nextprevious.txt\',\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-06-27T09:36:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/21ea4ceed30de1d6e83cecb39830ef77c7ef9598

Remove bbb for MessageFactory import.

Files changed:
M CHANGES.rst
M plone/app/dexterity/__init__.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3162883..1bbed97 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,9 @@ New features:\n \n Bug fixes:\n \n+- Remove bbb for MessageFactory import.\n+  [jensens]\n+\n - Python 3 fixes.\n   [jensens]\n \ndiff --git a/plone/app/dexterity/__init__.py b/plone/app/dexterity/__init__.py\nindex 1ed2a07..458e068 100644\n--- a/plone/app/dexterity/__init__.py\n+++ b/plone/app/dexterity/__init__.py\n@@ -6,10 +6,3 @@\n \n _ = ZMessageFactory(\'plone\')\n \n-\n-def MessageFactory(*args, **kwargs):\n-    # BBB Remove in Plone 5.2\n-    warnings.warn(\n-        "Name clash, now use \'_\' as usual. Will be removed in Plone 5.2",\n-        DeprecationWarning)\n-    return _(*args, **kwargs)\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-09-19T16:49:06+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/70fd03057f0599620ead936f7c91cf7a3400aadb

fix tests with py2

Files changed:
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/tests/editing.rst

b'diff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py\nindex 31d8c9d..434af41 100644\n--- a/plone/app/dexterity/browser/import_types.py\n+++ b/plone/app/dexterity/browser/import_types.py\n@@ -10,7 +10,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.interfaces import IImportContext\n-from six.moves import cStringIO as StringIO\n+from six import BytesIO\n from z3c.form import field\n from z3c.form import form\n from zipfile import BadZipfile\n@@ -41,7 +41,7 @@ def isGoodImportFile(data):\n             # let required validator handle this\n             return None\n         try:\n-            archive = ZipFile(StringIO(data.profile_file.data), \'r\')\n+            archive = ZipFile(BytesIO(data.profile_file.data), \'r\')\n         except BadZipfile:\n             raise Invalid(\n                 _(u"Error: The file submitted must be a zip archive."),\n@@ -58,7 +58,7 @@ def isGoodImportFile(data):\n                 )\n \n         # check XML for basic integrity\n-        with archive.open(\'types.xml\', \'rU\') as f:\n+        with archive.open(\'types.xml\', \'r\') as f:\n             source = f.read()\n             root = etree.fromstring(source)\n             if root.tag != \'object\':\ndiff --git a/plone/app/dexterity/tests/editing.rst b/plone/app/dexterity/tests/editing.rst\nindex 936bf6f..2a83c48 100644\n--- a/plone/app/dexterity/tests/editing.rst\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -204,26 +204,27 @@ First, prove this won\'t work without an authenticator\n Check rejection of bad XML "something"::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something&_authenticator=%s\' % authenticator)\n-  >>> from pprint import pprint\n   >>> import json\n-  >>> pprint(json.loads(browser.contents))\n-  {\'message\': "XMLSyntaxError: Start tag expected, \'<\' not found, line 1, column "\n-                  \'1\',\n-       \'success\': False}\n+  >>> result = json.loads(browser.contents)\n+  >>> u"XMLSyntaxError: Start tag expected" in result[\'message\']\n+  True\n \n We should refuse source that doesn\'t have `model` for the root tag::\n \n   >>> bad_source = model_source.replace(\'model\', \'mode\')\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> pprint(json.loads(browser.contents))\n-  {\'message\': "Error: root tag must be \'model\'", \'success\': False}\n+  >>> from pprint import pprint\n+  >>> result = json.loads(browser.contents)\n+  >>> u"Error: root tag must be \'model\'" in result[\'message\']\n+  True\n \n Likewise, only `schema` tags are allowed inside the model::\n \n   >>> bad_source = model_source.replace(\'schema>\', \'scheme>\')\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> pprint(json.loads(browser.contents))\n-  {\'message\': "Error: all model elements must be \'schema\'", \'success\': False}\n+  >>> result = json.loads(browser.contents)\n+  >>> u"Error: all model elements must be \'schema\'" in result[\'message\']\n+  True\n \n Should work with real XML\n \n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-09-20T09:39:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/b656dfad44d79e0d02b2893d779c10cf92e56973

doc changes, troove classifiers

Files changed:
M CHANGES.rst
M setup.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1bbed97..efb5a08 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -18,7 +18,7 @@ Bug fixes:\n   [jensens]\n \n - Python 3 fixes.\n-  [jensens]\n+  [jensens, pbauer]\n \n \n 2.5.0 (2018-06-24)\ndiff --git a/setup.py b/setup.py\nindex d5d7186..f3c80ea 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,9 +25,12 @@\n     classifiers=[\n         'Framework :: Plone',\n         'Framework :: Plone :: 5.1',\n+        'Framework :: Plone :: 5.2',\n         'License :: OSI Approved :: GNU General Public License (GPL)',\n         'Programming Language :: Python',\n         'Programming Language :: Python :: 2.7',\n+        'Programming Language :: Python :: 3.6',\n+        'Programming Language :: Python :: 3.7',\n         'Topic :: Software Development :: Libraries :: Python Modules',\n         'Development Status :: 5 - Production/Stable',\n     ],\n"

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-09-20T09:40:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/2462d9290417aed8c61e188646c8a6bfd56dff1e

Merge pull request #274 from plone/python3

Python3

Files changed:
A plone/app/dexterity/tests/editing.rst
M CHANGES.rst
M docs/advanced/validators.rst
M docs/conf.py
M plone/app/dexterity/__init__.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/behaviors/tests/test_metadata.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/factories.py
M plone/app/dexterity/permissions.py
M plone/app/dexterity/tests/metadata.txt
M plone/app/dexterity/tests/nextprevious.txt
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/tests/test_import.py
M setup.py
D plone/app/dexterity/tests/editing.txt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 82bf02e..efb5a08 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,11 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Remove bbb for MessageFactory import.\n+  [jensens]\n+\n+- Python 3 fixes.\n+  [jensens, pbauer]\n \n \n 2.5.0 (2018-06-24)\ndiff --git a/docs/advanced/validators.rst b/docs/advanced/validators.rst\nindex 63147fb..0f5b0db 100644\n--- a/docs/advanced/validators.rst\n+++ b/docs/advanced/validators.rst\n@@ -49,7 +49,7 @@ should return a boolean ``True`` or ``False``.\n \n    Hint: The constraint function does not have access to the context, but\n    if you need to acquire a tool, you can use the\n-   ``zope.app.component.hooks.getSite()`` method to obtain the site root.\n+   ``zope.component.hooks.getSite()`` method to obtain the site root.\n \n To use the constraint, pass the function as the ``constraint`` argument to\n the field constructor, e.g.::\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 5fe5c6b..95a2bec 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -11,7 +11,9 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n-import sys, os\n+import os\n+import sys\n+\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\ndiff --git a/plone/app/dexterity/__init__.py b/plone/app/dexterity/__init__.py\nindex 1ed2a07..458e068 100644\n--- a/plone/app/dexterity/__init__.py\n+++ b/plone/app/dexterity/__init__.py\n@@ -6,10 +6,3 @@\n \n _ = ZMessageFactory(\'plone\')\n \n-\n-def MessageFactory(*args, **kwargs):\n-    # BBB Remove in Plone 5.2\n-    warnings.warn(\n-        "Name clash, now use \'_\' as usual. Will be removed in Plone 5.2",\n-        DeprecationWarning)\n-    return _(*args, **kwargs)\ndiff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py\nindex 743511b..b4961de 100644\n--- a/plone/app/dexterity/behaviors/metadata.py\n+++ b/plone/app/dexterity/behaviors/metadata.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n-from DateTime import DateTime\n from datetime import datetime\n+from DateTime import DateTime\n from plone.app.dexterity import _\n from plone.app.z3cform.widget import AjaxSelectFieldWidget\n from plone.app.z3cform.widget import DatetimeFieldWidget\n@@ -13,6 +13,7 @@\n from plone.supermodel import model\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n+from six.moves import map\n from z3c.form.interfaces import IAddForm\n from z3c.form.interfaces import IEditForm\n from z3c.form.widget import ComputedWidgetAttribute\n@@ -26,7 +27,6 @@\n from zope.schema.interfaces import ISequence\n from zope.schema.interfaces import IText\n \n-from six.moves import map\n import six\n \n \ndiff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py\nindex 562dd99..a1c698e 100644\n--- a/plone/app/dexterity/behaviors/tests/test_metadata.py\n+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py\n@@ -9,6 +9,7 @@\n from zope.component import getUtility\n from zope.schema.interfaces import ConstraintNotSatisfied\n \n+import six\n import unittest\n \n \n@@ -26,9 +27,11 @@ def test_title_setter(self):\n         b.title = u\'foo\'\n         self.assertEqual(u\'foo\', b.context.title)\n \n+    @unittest.skipUnless(six.PY2, \'Only for py2\')\n     def test_title_setter_rejects_bytestrings(self):\n         b = self._makeOne()\n-        self.assertRaises(ValueError, setattr, b, \'title\', \'f\xc3\xb8\xc3\xb8\')\n+        with self.assertRaises(ValueError):\n+            setattr(b, \'title\', \'f\xc3\xb8\xc3\xb8\')\n \n     def test_title_getter(self):\n         b = self._makeOne()\n@@ -40,9 +43,11 @@ def test_description_setter(self):\n         b.description = u\'foo\'\n         self.assertEqual(u\'foo\', b.context.description)\n \n+    @unittest.skipUnless(six.PY2, \'Only for py2\')\n     def test_description_setter_rejects_bytestrings(self):\n         b = self._makeOne()\n-        self.assertRaises(ValueError, setattr, b, \'description\', \'f\xc3\xb8\xc3\xb8\')\n+        with self.assertRaises(ValueError):\n+            setattr(b, \'description\', \'f\xc3\xb8\xc3\xb8\')\n \n     def test_description_getter(self):\n         b = self._makeOne()\ndiff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py\nindex 726c0dc..14401e3 100644\n--- a/plone/app/dexterity/browser/behaviors.py\n+++ b/plone/app/dexterity/browser/behaviors.py\n@@ -18,7 +18,6 @@\n from zope.component import getUtilitiesFor\n from zope.lifecycleevent import modified\n \n-\n import six\n \n \ndiff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py\nindex 1b925bc..80ca225 100644\n--- a/plone/app/dexterity/browser/export.py\n+++ b/plone/app/dexterity/browser/export.py\n@@ -5,10 +5,12 @@\n from lxml import etree\n from plone.supermodel import serializeModel\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_encode\n+from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.context import TarballExportContext\n-from six import StringIO\n+from six import BytesIO\n from zipfile import ZipFile\n \n import time\n@@ -29,7 +31,7 @@ def __init__(self, tool, typelist, encoding=None, base_name=\'setup_tool\'):\n         self._archive_filename = (base_name + \'-%4d%02d%02d%02d%02d%02d.zip\'\n                                   % timestamp[:6])\n \n-        self._archive_stream = StringIO()\n+        self._archive_stream = BytesIO()\n         self._archive = ZipFile(self._archive_stream, \'w\')\n \n     def writeDataFile(self, filename, text, content_type, subdir=None):\n@@ -51,11 +53,12 @@ def writeDataFile(self, filename, text, content_type, subdir=None):\n             # Add a marker for ZopeSkel additions\n             root.append(etree.Comment(\' -*- extra stuff goes here -*- \'))\n             # minor prettifying\n-            text = \'<?xml version="1.0"?>\\n{0}\'.format(etree.tostring(root))\n+            root_str = safe_unicode(etree.tostring(root))\n+            text = \'<?xml version="1.0"?>\\n{0}\'.format(root_str)\n             text = text.replace(\'<!--\', \' <!--\')\n             text = text.replace(\'-->\', \'-->\\n\')\n \n-        self._archive.writestr(filename, text)\n+        self._archive.writestr(filename, safe_encode(text))\n \n \n class TypesExport(BrowserView):\n@@ -116,7 +119,7 @@ def __call__(self):\n             archive_filename = (\'dexterity_models-%4d%02d%02d%02d%02d%02d.zip\'\n                                 % timestamp[:6])\n \n-            archive_stream = StringIO()\n+            archive_stream = BytesIO()\n             archive = ZipFile(archive_stream, \'w\')\n \n             for item in items:\ndiff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py\nindex 01f061b..434af41 100644\n--- a/plone/app/dexterity/browser/import_types.py\n+++ b/plone/app/dexterity/browser/import_types.py\n@@ -10,16 +10,16 @@\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.context import BaseContext\n from Products.GenericSetup.interfaces import IImportContext\n-from six.moves import cStringIO as StringIO\n+from six import BytesIO\n from z3c.form import field\n from z3c.form import form\n from zipfile import BadZipfile\n from zipfile import ZipFile\n+from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.interface import Invalid\n from zope.interface import invariant\n-from zope.site.hooks import getSite\n \n import os.path\n import zope.schema\n@@ -41,7 +41,7 @@ def isGoodImportFile(data):\n             # let required validator handle this\n             return None\n         try:\n-            archive = ZipFile(StringIO(data.profile_file.data), \'r\')\n+            archive = ZipFile(BytesIO(data.profile_file.data), \'r\')\n         except BadZipfile:\n             raise Invalid(\n                 _(u"Error: The file submitted must be a zip archive."),\n@@ -58,7 +58,7 @@ def isGoodImportFile(data):\n                 )\n \n         # check XML for basic integrity\n-        with archive.open(\'types.xml\', \'rU\') as f:\n+        with archive.open(\'types.xml\', \'r\') as f:\n             source = f.read()\n             root = etree.fromstring(source)\n             if root.tag != \'object\':\n@@ -146,7 +146,7 @@ def readDataFile(self, filename, subdir=None):\n             filename = \'/\'.join((subdir, filename))\n \n         try:\n-            file = self._archive.open(filename, \'rU\')\n+            file = self._archive.open(filename, \'r\')\n         except KeyError:\n             return None\n \ndiff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py\nindex ee109d6..21ecc39 100644\n--- a/plone/app/dexterity/browser/modeleditor.py\n+++ b/plone/app/dexterity/browser/modeleditor.py\n@@ -3,6 +3,7 @@\n from lxml import etree\n from plone.app.dexterity import _\n from plone.supermodel.parser import SupermodelParseError\n+from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n from zope.component import queryMultiAdapter\n \n@@ -47,7 +48,7 @@ def __call__(self):\n                 return json.dumps({\n                     \'success\': False,\n                     \'message\': \'XMLSyntaxError: {0}\'.format(\n-                        e.message.encode(\'utf8\')\n+                        safe_unicode(e.args[0])\n                     )\n                 })\n \ndiff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py\nindex df26350..2734819 100644\n--- a/plone/app/dexterity/factories.py\n+++ b/plone/app/dexterity/factories.py\n@@ -28,7 +28,7 @@ def __call__(self, name, content_type, data):\n         ctr = getToolByName(self.context, \'content_type_registry\')\n         type_ = ctr.findTypeName(name.lower(), content_type, data) or \'File\'\n \n-        name = name.decode(\'utf8\')\n+        name = ploneutils.safe_unicode(name)\n \n         chooser = INameChooser(self.context)\n \n@@ -44,7 +44,7 @@ def __call__(self, name, content_type, data):\n             # its type name\n             # XXX heuristics are harmful behavior, here a better implemenation\n             #     is needed\n-            filename = ploneutils.safe_unicode(name)\n+            filename = name\n             if \'Image\' in type_:\n                 image = NamedBlobImage(\n                     data=data,\ndiff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py\nindex fa06227..4e3355a 100644\n--- a/plone/app/dexterity/permissions.py\n+++ b/plone/app/dexterity/permissions.py\n@@ -18,7 +18,6 @@\n from zope.publisher.browser import TestRequest\n from zope.security.interfaces import IPermission\n \n-\n import six\n \n \ndiff --git a/plone/app/dexterity/tests/editing.txt b/plone/app/dexterity/tests/editing.rst\nsimilarity index 93%\nrename from plone/app/dexterity/tests/editing.txt\nrename to plone/app/dexterity/tests/editing.rst\nindex cb9cb37..2a83c48 100644\n--- a/plone/app/dexterity/tests/editing.txt\n+++ b/plone/app/dexterity/tests/editing.rst\n@@ -57,7 +57,7 @@ The new type should have the dublin core behavior assigned by default::\n   >>> \'document_icon\' in plonista.getIconExprObject().text\n   True\n \n-The listing needs to not break if a type description was stored encoded.\n+The listing needs to not break if a type description was stored encoded::\n \n   >>> plonista.description = \'\\xc3\\xbc\'\n   >>> transaction.commit()\n@@ -67,7 +67,7 @@ The listing needs to not break if a type description was stored encoded.\n \n The listing should also feature a CSS class for display in the listing\n using the short name. Add a new content type to ensure the short name\n-is present on the page:\n+is present on the page::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types\')\n   >>> browser.getLink(\'Add New Content Type\').click()\n@@ -110,7 +110,7 @@ schema for the \'plonista\' type we just created::\n   \'http://nohost/plone/dexterity-types/plonista/@@fields\'\n \n Demonstrate that all the registered field types can be added edited\n-and saved.\n+and saved::\n \n   >>> from zope import component\n   >>> from plone.i18n.normalizer.interfaces import IIDNormalizer\n@@ -148,10 +148,10 @@ Editing the XML model directly\n Much of what the XML model editor does is happening in JavaScript, but we can\n still test the Zope side.\n \n-Get some tools.\n+Get some tools::\n \n   >>> from cgi import escape\n-  >>> from urllib import quote_plus\n+  >>> from six.moves.urllib.parse import quote_plus\n \n We should be able to navigate to the modeleditor view by clicking a\n button on the field list form::\n@@ -199,33 +199,40 @@ First, prove this won\'t work without an authenticator\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something\')\n   Traceback (most recent call last):\n   ...\n-  Unauthorized: Unauthorized()\n+  AccessControl.unauthorized.Unauthorized: ...\n \n Check rejection of bad XML "something"::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=something&_authenticator=%s\' % authenticator)\n-  >>> print browser.contents\n-  {"message": "XMLSyntaxError: Start tag expected, \'<\' not found, line 1, column 1", "success": false}\n+  >>> import json\n+  >>> result = json.loads(browser.contents)\n+  >>> u"XMLSyntaxError: Start tag expected" in result[\'message\']\n+  True\n \n We should refuse source that doesn\'t have `model` for the root tag::\n \n   >>> bad_source = model_source.replace(\'model\', \'mode\')\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> print browser.contents\n-  {"message": "Error: root tag must be \'model\'", "success": false}\n+  >>> from pprint import pprint\n+  >>> result = json.loads(browser.contents)\n+  >>> u"Error: root tag must be \'model\'" in result[\'message\']\n+  True\n \n Likewise, only `schema` tags are allowed inside the model::\n \n   >>> bad_source = model_source.replace(\'schema>\', \'scheme>\')\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(bad_source), authenticator))\n-  >>> print browser.contents\n-  {"message": "Error: all model elements must be \'schema\'", "success": false}\n+  >>> result = json.loads(browser.contents)\n+  >>> u"Error: all model elements must be \'schema\'" in result[\'message\']\n+  True\n \n Should work with real XML\n \n+::\n+\n   >>> browser.open(\'http://nohost/plone/dexterity-types/plonista/@@model-edit-save?source=%s&_authenticator=%s\' % (quote_plus(model_source), authenticator))\n-  >>> print browser.contents\n-  {"message": "Saved", "success": true}\n+  >>> pprint(json.loads(browser.contents))\n+  {\'message\': \'Saved\', \'success\': True}\n \n That response should have a JSON content type::\n \n@@ -265,6 +272,8 @@ If a type\'s schema is not stored as XML in its FTI\'s schema property, it cannot\n currently be edited through the web.  However, the fields of the schema can at\n least be listed.\n \n+::\n+\n   >>> from zope.interface import Interface\n   >>> from zope import schema\n   >>> import plone.app.dexterity.tests\n@@ -288,7 +297,7 @@ We should not be offering the \'Edit XML\' button::\n Cloning a content type\n ----------------------\n \n-A content type can be cloned.\n+A content type can be cloned::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types\')\n   >>> browser.getControl(name=\'crud-edit.plonista.widgets.select:list\').controls[0].selected = True\n@@ -314,7 +323,7 @@ Validation to prevent duplicate content types\n ---------------------------------------------\n \n A new content type cannot be created if its name is the same as an existing\n-content type.\n+content type::\n \n   >>> browser.getLink(\'Add New Content Type\').click()\n   >>> browser.getControl(\'Type Name\').value = \'foobar\'\n@@ -325,7 +334,7 @@ content type.\n   >>> "There is already a content type named \'plonista\'" in browser.contents\n   True\n \n-To avoid confusion, the title must also be unique.\n+To avoid confusion, the title must also be unique::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types\')\n   >>> browser.getLink(\'Add New Content Type\').click()\n@@ -337,7 +346,7 @@ To avoid confusion, the title must also be unique.\n   >>> "There is already a content type named \'Plonista\'" in browser.contents\n   True\n \n-Similar checks are performed when cloning.\n+Similar checks are performed when cloning::\n \n   >>> browser.open(\'http://nohost/plone/dexterity-types\')\n   >>> browser.getControl(name=\'crud-edit.plonista.widgets.select:list\').controls[0].selected = True\n@@ -392,7 +401,7 @@ We can configure the plonista-folder to allow contained content types::\n   >>> browser.getControl(\'All content types\').click()\n   >>> browser.getControl(\'Apply\').click()\n \n-If we add a plonista-folder, we can then add other content items inside it.\n+If we add a plonista-folder, we can then add other content items inside it::\n \n   >>> browser.open(\'http://nohost/plone\')\n   >>> browser.getLink(\'Plonista Folder\').click()\n@@ -428,7 +437,7 @@ Now only the allowed types may be added::\n   >>> browser.getLink(url=\'Folder\')\n   Traceback (most recent call last):\n   ...\n-  LinkNotFound...\n+  zope.testbrowser.browser.LinkNotFoundError...\n \n   >>> browser.getLink(url=\'Document\').click()\n   >>> browser.getControl(\'Title\').value = \'Foo Plonista Page\'\n@@ -459,7 +468,7 @@ But actually trying to view the type will now cause an error, as expected::\n   >>> browser.open(\'http://nohost/plone/martin-aspeli/view\')\n   Traceback (most recent call last):\n   ...\n-  ComponentLookupError...\n+  zope.interface.interfaces.ComponentLookupError...\n \n \n Dexterity Types Export\n@@ -482,16 +491,17 @@ zip archive containing files ready to drop into our profile::\n     >>> browser.headers[\'content-disposition\']\n     \'attachment; filename=dexterity_export-....zip\'\n \n-    >>> import StringIO, zipfile\n-    >>> fd = StringIO.StringIO(browser.contents)\n+    >>> import zipfile\n+    >>> import six\n+    >>> fd = six.BytesIO(browser.contents)\n     >>> archive = zipfile.ZipFile(fd, mode=\'r\')\n     >>> archive.namelist()\n     [\'types.xml\', \'types/plonista2.xml\', \'types/plonista-folder.xml\']\n \n     >>> types_xml = archive.read(\'types.xml\')\n-    >>> \'<object name="plonista2" meta_type="Dexterity FTI"/>\' in types_xml\n+    >>> b\'<object name="plonista2" meta_type="Dexterity FTI"/>\' in types_xml\n     True\n-    >>> \'<object name="plonista-folder" meta_type="Dexterity FTI"/>\' in types_xml\n+    >>> b\'<object name="plonista-folder" meta_type="Dexterity FTI"/>\' in types_xml\n     True\n \n Try out the models export button. We should be able to select our types from\n@@ -511,13 +521,15 @@ zip archive containing supermodel xml files::\n     >>> browser.headers[\'content-disposition\']\n     \'attachment; filename=dexterity_models-....zip\'\n \n-    >>> import StringIO, zipfile\n-    >>> fd = StringIO.StringIO(browser.contents)\n+    >>> import zipfile\n+    >>> import six\n+    >>> fd = six.BytesIO(browser.contents)\n     >>> archive = zipfile.ZipFile(fd, mode=\'r\')\n     >>> archive.namelist()\n     [\'models/plonista2.xml\', \'models/plonista-folder.xml\']\n \n-    >>> print archive.read(\'models/plonista2.xml\')\n+    >>> from Products.CMFPlone.utils import safe_unicode\n+    >>> print(safe_unicode(archive.read(\'models/plonista2.xml\')))\n     <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>\n       <schema>\n       ...\n@@ -539,7 +551,7 @@ file::\n     >>> browser.headers[\'content-disposition\']\n     \'attachment; filename=plonista2.xml\'\n \n-    >>> print browser.contents\n+    >>> print(safe_unicode(browser.contents))\n     <model...xmlns="http://namespaces.plone.org/supermodel/schema"...>\n       <schema>\n       ...\ndiff --git a/plone/app/dexterity/tests/metadata.txt b/plone/app/dexterity/tests/metadata.txt\nindex ee78901..3376a21 100644\n--- a/plone/app/dexterity/tests/metadata.txt\n+++ b/plone/app/dexterity/tests/metadata.txt\n@@ -58,8 +58,8 @@ should be able to set same value without a validation error::\n \n     >>> from zope.schema import getFields\n     >>> from plone.dexterity.utils import getAdditionalSchemata\n-    >>> schema = getAdditionalSchemata(context=md).next()\n+    >>> schema = next(getAdditionalSchemata(context=md))\n     >>> field = getFields(schema)[\'creators\']\n     >>> field.get(field.interface(md))\n-    (u\'test_user_1_\',)\n+    (\'test_user_1_\',)\n     >>> field.set(field.interface(md), (u\'test_user_1_\',))\ndiff --git a/plone/app/dexterity/tests/nextprevious.txt b/plone/app/dexterity/tests/nextprevious.txt\nindex 1e7591e..6f3e0e6 100644\n--- a/plone/app/dexterity/tests/nextprevious.txt\n+++ b/plone/app/dexterity/tests/nextprevious.txt\n@@ -94,4 +94,4 @@ link disappear::\n   >>> next = browser.getLink(\'Next\')\n   Traceback (most recent call last):\n   ...\n-  LinkNotFoundError\n+  zope.testbrowser.browser.LinkNotFoundError\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex fdd6fe4..9b128c3 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -3,12 +3,14 @@\n from plone.testing import layered\n \n import doctest\n+import re\n+import six\n import unittest\n \n \n tests = (\n     \'discussion.txt\',\n-    \'editing.txt\',\n+    \'editing.rst\',\n     \'namefromtitle.txt\',\n     \'metadata.txt\',\n     \'nextprevious.txt\',\n@@ -17,9 +19,31 @@\n )\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            want = re.sub(\'zExceptions.NotFound\', \'NotFound\', want)\n+            want = re.sub(\'zope.interface.interfaces.ComponentLookupError\', \'ComponentLookupError\', want)\n+            want = re.sub(\'zope.testbrowser.browser.LinkNotFoundError\', \'LinkNotFoundError\', want)\n+            want = re.sub(\'AccessControl.unauthorized.Unauthorized\', \'Unauthorized\', want)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n-    return unittest.TestSuite(\n-        [layered(doctest.DocFileSuite(f, optionflags=doctest.ELLIPSIS),\n-                 layer=DEXTERITY_FUNCTIONAL_TESTING)\n-            for f in tests]\n-    )\n+    suite = unittest.TestSuite()\n+    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+    for testfile in tests:\n+        suite.addTest(\n+            layered(\n+                doctest.DocFileSuite(\n+                    testfile,\n+                    optionflags=OPTIONFLAGS,\n+                    # package=\'plone.app.dexterity.tests\',\n+                    checker=Py23DocChecker(),\n+                ),\n+                layer=DEXTERITY_FUNCTIONAL_TESTING\n+            )\n+        )\n+    return suite\ndiff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py\nindex f4554c4..3d150ce 100644\n--- a/plone/app/dexterity/tests/test_export.py\n+++ b/plone/app/dexterity/tests/test_export.py\n@@ -34,7 +34,8 @@ def test_exported_XML_valid_for_GS(self):\n             (dexterity_control_panel, self.request), name=\'types-export\')\n \n         # export the \'item\' type and try to parse all XMLs\n-        fd = six.StringIO(types_export_view.__call__())\n+        output = types_export_view.__call__()\n+        fd = six.BytesIO(output)\n         archive = zipfile.ZipFile(fd, mode=\'r\')\n         filenames = archive.namelist()\n         for filename in filenames:\n@@ -45,7 +46,7 @@ def test_exported_XML_valid_for_GS(self):\n                 parseString(file_xml)\n             except ExpatError as e:\n                 msg = \'Parsing XML failed with ExpatError: {0}\'\n-                self.fail(msg.format(e.message))\n+                self.fail(msg.format(e.args[0]))\n \n \n def test_suite():\ndiff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py\nindex 754f088..d0f427c 100644\n--- a/plone/app/dexterity/tests/test_import.py\n+++ b/plone/app/dexterity/tests/test_import.py\n@@ -27,7 +27,7 @@ def testZipFileImportContext(self):\n             \'import\',\n             \'dexterity_export.zip\',\n         )\n-        f = open(zname, \'r\')\n+        f = open(zname, \'rb\')\n         icontext = ZipFileImportContext(types_tool, f)\n \n         types_xml = icontext.readDataFile(\'types.xml\')\n@@ -74,7 +74,7 @@ def testSampleImportStep(self):\n             \'import\',\n             \'dexterity_export.zip\'\n         )\n-        with open(zname, \'r\') as f:\n+        with open(zname, \'rb\') as f:\n             icontext = ZipFileImportContext(types_tool, f)\n             handler(icontext)\n \n@@ -88,7 +88,7 @@ def testSampleImportStep(self):\n         # it would be importing existing types.\n         # This is tested in an invariant.\n         data = TypeProfileImport(profile_file=plone.namedfile.NamedFile())\n-        with open(zname, \'r\') as f:\n+        with open(zname, \'rb\') as f:\n             data.profile_file.data = f.read()\n         self.assertRaises(\n             zope.interface.Invalid,\ndiff --git a/setup.py b/setup.py\nindex d5d7186..f3c80ea 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,9 +25,12 @@\n     classifiers=[\n         \'Framework :: Plone\',\n         \'Framework :: Plone :: 5.1\',\n+        \'Framework :: Plone :: 5.2\',\n         \'License :: OSI Approved :: GNU General Public License (GPL)\',\n         \'Programming Language :: Python\',\n         \'Programming Language :: Python :: 2.7\',\n+        \'Programming Language :: Python :: 3.6\',\n+        \'Programming Language :: Python :: 3.7\',\n         \'Topic :: Software Development :: Libraries :: Python Modules\',\n         \'Development Status :: 5 - Production/Stable\',\n     ],\n'

