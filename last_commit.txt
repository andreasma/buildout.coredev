Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2018-06-22T08:42:18+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/f1708605c27ade9b38c42589d6785d0f8420e3f4

path is text in py3

Files changed:
M plone/app/linkintegrity/handlers.py

b"diff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py\nindex 573e6e3..80771b0 100644\n--- a/plone/app/linkintegrity/handlers.py\n+++ b/plone/app/linkintegrity/handlers.py\n@@ -83,7 +83,7 @@ def getObjectsFromLinks(base, links):\n         # relative or local url\n         if (not s and not h) or (s == scheme and h == host):\n             # Paths should always be strings\n-            if isinstance(path, six.text_type):\n+            if six.PY2 and isinstance(path, six.text_type):\n                 path = path.encode('utf-8')\n \n             obj, extra = findObject(base, path)\n"

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2018-06-22T08:42:18+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/657304b2253988ff112bc547f6aed87e1f4f21df

fix tests in python3

Files changed:
M plone/app/linkintegrity/testing.py
M plone/app/linkintegrity/tests/base.py
M plone/app/linkintegrity/tests/test_circular.py
M plone/app/linkintegrity/tests/test_functional.py
M plone/app/linkintegrity/tests/test_handlers.py
M plone/app/linkintegrity/tests/test_imagescales.py
M plone/app/linkintegrity/tests/test_references.py
M plone/app/linkintegrity/tests/test_upgrade.py

b'diff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py\nindex b34a960..bd1cd96 100644\n--- a/plone/app/linkintegrity/testing.py\n+++ b/plone/app/linkintegrity/testing.py\n@@ -12,14 +12,14 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.namedfile.file import NamedImage\n from plone.testing import z2\n-from Products.Archetypes.interfaces import IBaseObject\n from Products.CMFCore.utils import getToolByName\n-from six import StringIO\n from zope.configuration import xmlconfig\n \n+import six\n \n-B64_DATA = \'R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\'\n-GIF = StringIO(decodestring(B64_DATA))\n+\n+B64_DATA = b\'R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\'\n+GIF = six.BytesIO(decodestring(B64_DATA))\n GIF.filename = \'sample.gif\'\n GIF.contentType = \'image/gif\'\n GIF._width = 1\n@@ -36,8 +36,10 @@ def create(container, type_name, **kwargs):\n \n     # Archetypes specific code was taken from ``plone.api``\n     # Switch when api has been merged into core.\n-    if IBaseObject.providedBy(content):\n-        content.processForm()\n+    if six.PY2:\n+        from Products.Archetypes.interfaces import IBaseObject\n+        if IBaseObject.providedBy(content):\n+            content.processForm()\n \n     return content\n \n@@ -139,21 +141,23 @@ def setUpContent(self):\n \n PLONE_APP_LINKINTEGRITY_DX_FIXTURE = LinkIntegrityDXLayer()\n \n-PLONE_APP_LINKINTEGRITY_AT_INTEGRATION_TESTING = layers.IntegrationTesting(\n-    bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n-    name=\'plone.app.linkintegrity:AT:Integration\'\n-)\n-\n PLONE_APP_LINKINTEGRITY_DX_INTEGRATION_TESTING = layers.IntegrationTesting(\n     bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n     name=\'plone.app.linkintegrity:DX:Integration\'\n )\n \n-PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n-    bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n-    name=\'plone.app.linkintegrity:AT:Functional\'\n-)\n PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n     bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n     name=\'plone.app.linkintegrity:DX:Functional\'\n )\n+\n+if six.PY2:\n+    PLONE_APP_LINKINTEGRITY_AT_INTEGRATION_TESTING = layers.IntegrationTesting(\n+        bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n+        name=\'plone.app.linkintegrity:AT:Integration\'\n+    )\n+\n+    PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n+        bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n+        name=\'plone.app.linkintegrity:AT:Functional\'\n+    )\ndiff --git a/plone/app/linkintegrity/tests/base.py b/plone/app/linkintegrity/tests/base.py\nindex c9e0f85..55e05f2 100644\n--- a/plone/app/linkintegrity/tests/base.py\n+++ b/plone/app/linkintegrity/tests/base.py\n@@ -12,6 +12,7 @@\n from zope.interface import alsoProvides\n from zope.lifecycleevent import modified\n \n+import six\n import unittest\n \n \n@@ -63,23 +64,24 @@ def _get_related_items(self, obj):\n         return obj.relatedItems\n \n \n-class ATBaseTestCase(BaseTestCase):\n-    """Base testcase for testing Archetypes content types"""\n+if six.PY2:\n+    class ATBaseTestCase(BaseTestCase):\n+        """Base testcase for testing Archetypes content types"""\n \n-    layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\n+        layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\n \n-    def _set_text(self, obj, text):\n-        obj.setText(text, mimetype=\'text/html\')\n-        modified(obj)\n+        def _set_text(self, obj, text):\n+            obj.setText(text, mimetype=\'text/html\')\n+            modified(obj)\n \n-    def _get_text(self, obj):\n-        # This is the equivalent to obj.text in dexterity. No transforms,\n-        # no rewritten relative urls\n-        return obj.getText(raw=1).raw\n+        def _get_text(self, obj):\n+            # This is the equivalent to obj.text in dexterity. No transforms,\n+            # no rewritten relative urls\n+            return obj.getText(raw=1).raw\n \n-    def _set_related_items(self, obj, items):\n-        obj.setRelatedItems(items)\n-        modified(obj)\n+        def _set_related_items(self, obj, items):\n+            obj.setRelatedItems(items)\n+            modified(obj)\n \n-    def _get_related_items(self, obj):\n-        return obj.getRelatedItems()\n+        def _get_related_items(self, obj):\n+            return obj.getRelatedItems()\ndiff --git a/plone/app/linkintegrity/tests/test_circular.py b/plone/app/linkintegrity/tests/test_circular.py\nindex 3ac6284..9f869e7 100644\n--- a/plone/app/linkintegrity/tests/test_circular.py\n+++ b/plone/app/linkintegrity/tests/test_circular.py\n@@ -1,11 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity.browser.info import DeleteConfirmationInfo\n from plone.app.linkintegrity.testing import create\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasIncomingLinks\n \n+import six\n+\n \n class CircularReferencesTestCase:\n \n@@ -86,6 +87,7 @@ def test_internal_breaches_are_dropped(self):\n class CircularReferencesDXTestCase(DXBaseTestCase, CircularReferencesTestCase):\n     """Circular reference testcase for dx content types"""\n \n-\n-class CircularReferencesATTestCase(ATBaseTestCase, CircularReferencesTestCase):\n-    """Circular reference testcase for dx content types"""\n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n+    class CircularReferencesATTestCase(ATBaseTestCase, CircularReferencesTestCase):\n+        """Circular reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_functional.py b/plone/app/linkintegrity/tests/test_functional.py\nindex 2bef8af..2b68e7c 100644\n--- a/plone/app/linkintegrity/tests/test_functional.py\n+++ b/plone/app/linkintegrity/tests/test_functional.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n # from plone.app.linkintegrity.utils import hasIncomingLinks\n from plone.app.linkintegrity.utils import getIncomingLinks\n@@ -14,6 +13,7 @@\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n \n+import six\n import transaction\n import unittest\n \n@@ -387,7 +387,10 @@ class FunctionalReferenceDXTestCase(DXBaseTestCase, ReferenceTestCase):\n     layer = testing.PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING\n \n \n-class FunctionalReferenceATTestCase(ATBaseTestCase, ReferenceTestCase):\n-    """Functional reference testcase for dx content types"""\n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n+\n+    class FunctionalReferenceATTestCase(ATBaseTestCase, ReferenceTestCase):\n+        """Functional reference testcase for dx content types"""\n \n-    layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\n+        layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\ndiff --git a/plone/app/linkintegrity/tests/test_handlers.py b/plone/app/linkintegrity/tests/test_handlers.py\nindex 090fc21..b4ec594 100644\n--- a/plone/app/linkintegrity/tests/test_handlers.py\n+++ b/plone/app/linkintegrity/tests/test_handlers.py\n@@ -1,8 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity.handlers import findObject\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n \n+import six\n+\n \n class FindObjectTests:\n     """ testing the handlers.findObject function """\n@@ -34,6 +35,8 @@ def test_webserver_rewrites_portal_name(self):\n class ReferenceGenerationDXTestCase(DXBaseTestCase, FindObjectTests):\n     """findObject testcase for dx content types"""\n \n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n \n-class ReferenceGenerationATTestCase(ATBaseTestCase, FindObjectTests):\n-    """findObject testcase for at content types"""\n+    class ReferenceGenerationATTestCase(ATBaseTestCase, FindObjectTests):\n+        """findObject testcase for at content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_imagescales.py b/plone/app/linkintegrity/tests/test_imagescales.py\nindex fc5efb7..b934934 100644\n--- a/plone/app/linkintegrity/tests/test_imagescales.py\n+++ b/plone/app/linkintegrity/tests/test_imagescales.py\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.uuid.interfaces import IUUID\n \n+import six\n+\n \n class ImageReferenceTestCase:\n \n@@ -65,6 +66,8 @@ def test_image_resolveuid_reference_creation(self):\n class ImageReferenceDXTestCase(DXBaseTestCase, ImageReferenceTestCase):\n     """Image reference testcase for dx content types"""\n \n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n \n-class ImageReferenceATTestCase(ATBaseTestCase, ImageReferenceTestCase):\n-    """Image reference testcase for dx content types"""\n+    class ImageReferenceATTestCase(ATBaseTestCase, ImageReferenceTestCase):\n+        """Image reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex 8dbd930..f69e903 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n from plone.app.linkintegrity.parser import extractLinks\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n@@ -136,8 +135,8 @@ def test_unicode_links(self):\n         # be any references added.\n         self._set_text(\n             doc1,\n-            six.text_type(\'<a href="\xc3\xb6?foo=bar&baz=bam">bug</a>\', \'utf-8\'),\n-        )\n+            \'<a href="\xc3\xb6?foo=bar&baz=bam">bug</a>\')\n+\n         self.assertEqual([l for l in getOutgoingLinks(doc1)], [])\n \n     def test_reference_orthogonality(self):\n@@ -205,9 +204,11 @@ class ReferenceGenerationDXTestCase(\n ):\n     """Reference generation testcase for dx content types"""\n \n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n \n-class ReferenceGenerationATTestCase(\n-    ATBaseTestCase,\n-    ReferenceGenerationTestCase,\n-):\n-    """Reference generation testcase for at content types"""\n+    class ReferenceGenerationATTestCase(\n+        ATBaseTestCase,\n+        ReferenceGenerationTestCase,\n+    ):\n+        """Reference generation testcase for at content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_upgrade.py b/plone/app/linkintegrity/tests/test_upgrade.py\nindex 9cef657..c363339 100644\n--- a/plone/app/linkintegrity/tests/test_upgrade.py\n+++ b/plone/app/linkintegrity/tests/test_upgrade.py\n@@ -1,29 +1,37 @@\n # -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.upgrades import migrate_linkintegrity_relations\n from plone.app.linkintegrity.utils import hasIncomingLinks\n from plone.app.linkintegrity.utils import referencedRelationship\n try:\n     from Products.Archetypes.interfaces import IReferenceable\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n     HAS_AT = True\n except ImportError:\n     HAS_AT = False\n import unittest\n \n \n-class ReferenceMigrationATTestCase(ATBaseTestCase):\n-    """Reference migration testcase for at content types"""\n+if HAS_AT:\n+    class ReferenceMigrationATTestCase(ATBaseTestCase):\n+        """Reference migration testcase for at content types"""\n \n-    @unittest.skipUnless(\n-        HAS_AT, \'Archetypes are not installed. Skipping migration tests\')\n-    def test_upgrade(self):\n-        doc3 = self.portal[\'doc3\']\n-        doc1 = self.portal[\'doc1\']\n-        self.assertTrue(IReferenceable.providedBy(doc3))\n-        doc3.setText(\'<a href="doc1">doc1</a>\', mimetype=\'text/html\')\n-        doc3.addReference(doc1, relationship=referencedRelationship)\n-        self.assertFalse(hasIncomingLinks(doc1))\n-        self.assertFalse(hasIncomingLinks(doc3))\n-        migrate_linkintegrity_relations(self.portal)\n-        self.assertTrue(hasIncomingLinks(doc1))\n-        self.assertFalse(hasIncomingLinks(doc3))\n+        @unittest.skipUnless(\n+            HAS_AT, \'Archetypes are not installed. Skipping migration tests\')\n+        def test_upgrade(self):\n+            doc3 = self.portal[\'doc3\']\n+            doc1 = self.portal[\'doc1\']\n+            self.assertTrue(IReferenceable.providedBy(doc3))\n+            doc3.setText(\'<a href="doc1">doc1</a>\', mimetype=\'text/html\')\n+            doc3.addReference(doc1, relationship=referencedRelationship)\n+            self.assertFalse(hasIncomingLinks(doc1))\n+            self.assertFalse(hasIncomingLinks(doc3))\n+            migrate_linkintegrity_relations(self.portal)\n+            self.assertTrue(hasIncomingLinks(doc1))\n+            self.assertFalse(hasIncomingLinks(doc3))\n+\n+else:\n+\n+    class TestDummy(unittest.TestCase):\n+\n+        def test_dummy(self):\n+            pass\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2018-09-18T08:38:32+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/d6e29d13cd1cb8a7000570dba7c304586dfa6724

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b2eb2b1..96f7fb3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix tests in Python 3\n+  [pbauer]\n \n \n 3.3.6 (2018-06-19)\ndiff --git a/setup.py b/setup.py\nindex 3380394..3dede05 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -26,6 +26,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking",\n     ],\n     keywords=\'link integrity plone\',\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2018-09-18T10:47:00+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/7a1bfbb74e9de7b97759c6801eef48478fc6eab6

Merge pull request #66 from plone/python3

Fix tests in Python 3

Files changed:
M CHANGES.rst
M plone/app/linkintegrity/handlers.py
M plone/app/linkintegrity/testing.py
M plone/app/linkintegrity/tests/base.py
M plone/app/linkintegrity/tests/test_circular.py
M plone/app/linkintegrity/tests/test_functional.py
M plone/app/linkintegrity/tests/test_handlers.py
M plone/app/linkintegrity/tests/test_imagescales.py
M plone/app/linkintegrity/tests/test_references.py
M plone/app/linkintegrity/tests/test_upgrade.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b2eb2b1..96f7fb3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix tests in Python 3\n+  [pbauer]\n \n \n 3.3.6 (2018-06-19)\ndiff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py\nindex 573e6e3..80771b0 100644\n--- a/plone/app/linkintegrity/handlers.py\n+++ b/plone/app/linkintegrity/handlers.py\n@@ -83,7 +83,7 @@ def getObjectsFromLinks(base, links):\n         # relative or local url\n         if (not s and not h) or (s == scheme and h == host):\n             # Paths should always be strings\n-            if isinstance(path, six.text_type):\n+            if six.PY2 and isinstance(path, six.text_type):\n                 path = path.encode(\'utf-8\')\n \n             obj, extra = findObject(base, path)\ndiff --git a/plone/app/linkintegrity/testing.py b/plone/app/linkintegrity/testing.py\nindex b34a960..bd1cd96 100644\n--- a/plone/app/linkintegrity/testing.py\n+++ b/plone/app/linkintegrity/testing.py\n@@ -12,14 +12,14 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.namedfile.file import NamedImage\n from plone.testing import z2\n-from Products.Archetypes.interfaces import IBaseObject\n from Products.CMFCore.utils import getToolByName\n-from six import StringIO\n from zope.configuration import xmlconfig\n \n+import six\n \n-B64_DATA = \'R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\'\n-GIF = StringIO(decodestring(B64_DATA))\n+\n+B64_DATA = b\'R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=\'\n+GIF = six.BytesIO(decodestring(B64_DATA))\n GIF.filename = \'sample.gif\'\n GIF.contentType = \'image/gif\'\n GIF._width = 1\n@@ -36,8 +36,10 @@ def create(container, type_name, **kwargs):\n \n     # Archetypes specific code was taken from ``plone.api``\n     # Switch when api has been merged into core.\n-    if IBaseObject.providedBy(content):\n-        content.processForm()\n+    if six.PY2:\n+        from Products.Archetypes.interfaces import IBaseObject\n+        if IBaseObject.providedBy(content):\n+            content.processForm()\n \n     return content\n \n@@ -139,21 +141,23 @@ def setUpContent(self):\n \n PLONE_APP_LINKINTEGRITY_DX_FIXTURE = LinkIntegrityDXLayer()\n \n-PLONE_APP_LINKINTEGRITY_AT_INTEGRATION_TESTING = layers.IntegrationTesting(\n-    bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n-    name=\'plone.app.linkintegrity:AT:Integration\'\n-)\n-\n PLONE_APP_LINKINTEGRITY_DX_INTEGRATION_TESTING = layers.IntegrationTesting(\n     bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n     name=\'plone.app.linkintegrity:DX:Integration\'\n )\n \n-PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n-    bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n-    name=\'plone.app.linkintegrity:AT:Functional\'\n-)\n PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n     bases=(PLONE_APP_LINKINTEGRITY_DX_FIXTURE, ),\n     name=\'plone.app.linkintegrity:DX:Functional\'\n )\n+\n+if six.PY2:\n+    PLONE_APP_LINKINTEGRITY_AT_INTEGRATION_TESTING = layers.IntegrationTesting(\n+        bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n+        name=\'plone.app.linkintegrity:AT:Integration\'\n+    )\n+\n+    PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING = layers.FunctionalTesting(\n+        bases=(PLONE_APP_LINKINTEGRITY_AT_FIXTURE, ),\n+        name=\'plone.app.linkintegrity:AT:Functional\'\n+    )\ndiff --git a/plone/app/linkintegrity/tests/base.py b/plone/app/linkintegrity/tests/base.py\nindex c9e0f85..55e05f2 100644\n--- a/plone/app/linkintegrity/tests/base.py\n+++ b/plone/app/linkintegrity/tests/base.py\n@@ -12,6 +12,7 @@\n from zope.interface import alsoProvides\n from zope.lifecycleevent import modified\n \n+import six\n import unittest\n \n \n@@ -63,23 +64,24 @@ def _get_related_items(self, obj):\n         return obj.relatedItems\n \n \n-class ATBaseTestCase(BaseTestCase):\n-    """Base testcase for testing Archetypes content types"""\n+if six.PY2:\n+    class ATBaseTestCase(BaseTestCase):\n+        """Base testcase for testing Archetypes content types"""\n \n-    layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\n+        layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\n \n-    def _set_text(self, obj, text):\n-        obj.setText(text, mimetype=\'text/html\')\n-        modified(obj)\n+        def _set_text(self, obj, text):\n+            obj.setText(text, mimetype=\'text/html\')\n+            modified(obj)\n \n-    def _get_text(self, obj):\n-        # This is the equivalent to obj.text in dexterity. No transforms,\n-        # no rewritten relative urls\n-        return obj.getText(raw=1).raw\n+        def _get_text(self, obj):\n+            # This is the equivalent to obj.text in dexterity. No transforms,\n+            # no rewritten relative urls\n+            return obj.getText(raw=1).raw\n \n-    def _set_related_items(self, obj, items):\n-        obj.setRelatedItems(items)\n-        modified(obj)\n+        def _set_related_items(self, obj, items):\n+            obj.setRelatedItems(items)\n+            modified(obj)\n \n-    def _get_related_items(self, obj):\n-        return obj.getRelatedItems()\n+        def _get_related_items(self, obj):\n+            return obj.getRelatedItems()\ndiff --git a/plone/app/linkintegrity/tests/test_circular.py b/plone/app/linkintegrity/tests/test_circular.py\nindex 3ac6284..9f869e7 100644\n--- a/plone/app/linkintegrity/tests/test_circular.py\n+++ b/plone/app/linkintegrity/tests/test_circular.py\n@@ -1,11 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity.browser.info import DeleteConfirmationInfo\n from plone.app.linkintegrity.testing import create\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.app.linkintegrity.utils import hasIncomingLinks\n \n+import six\n+\n \n class CircularReferencesTestCase:\n \n@@ -86,6 +87,7 @@ def test_internal_breaches_are_dropped(self):\n class CircularReferencesDXTestCase(DXBaseTestCase, CircularReferencesTestCase):\n     """Circular reference testcase for dx content types"""\n \n-\n-class CircularReferencesATTestCase(ATBaseTestCase, CircularReferencesTestCase):\n-    """Circular reference testcase for dx content types"""\n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n+    class CircularReferencesATTestCase(ATBaseTestCase, CircularReferencesTestCase):\n+        """Circular reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_functional.py b/plone/app/linkintegrity/tests/test_functional.py\nindex 2bef8af..2b68e7c 100644\n--- a/plone/app/linkintegrity/tests/test_functional.py\n+++ b/plone/app/linkintegrity/tests/test_functional.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n # from plone.app.linkintegrity.utils import hasIncomingLinks\n from plone.app.linkintegrity.utils import getIncomingLinks\n@@ -14,6 +13,7 @@\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n \n+import six\n import transaction\n import unittest\n \n@@ -387,7 +387,10 @@ class FunctionalReferenceDXTestCase(DXBaseTestCase, ReferenceTestCase):\n     layer = testing.PLONE_APP_LINKINTEGRITY_DX_FUNCTIONAL_TESTING\n \n \n-class FunctionalReferenceATTestCase(ATBaseTestCase, ReferenceTestCase):\n-    """Functional reference testcase for dx content types"""\n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n+\n+    class FunctionalReferenceATTestCase(ATBaseTestCase, ReferenceTestCase):\n+        """Functional reference testcase for dx content types"""\n \n-    layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\n+        layer = testing.PLONE_APP_LINKINTEGRITY_AT_FUNCTIONAL_TESTING\ndiff --git a/plone/app/linkintegrity/tests/test_handlers.py b/plone/app/linkintegrity/tests/test_handlers.py\nindex 090fc21..b4ec594 100644\n--- a/plone/app/linkintegrity/tests/test_handlers.py\n+++ b/plone/app/linkintegrity/tests/test_handlers.py\n@@ -1,8 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity.handlers import findObject\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n \n+import six\n+\n \n class FindObjectTests:\n     """ testing the handlers.findObject function """\n@@ -34,6 +35,8 @@ def test_webserver_rewrites_portal_name(self):\n class ReferenceGenerationDXTestCase(DXBaseTestCase, FindObjectTests):\n     """findObject testcase for dx content types"""\n \n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n \n-class ReferenceGenerationATTestCase(ATBaseTestCase, FindObjectTests):\n-    """findObject testcase for at content types"""\n+    class ReferenceGenerationATTestCase(ATBaseTestCase, FindObjectTests):\n+        """findObject testcase for at content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_imagescales.py b/plone/app/linkintegrity/tests/test_imagescales.py\nindex fc5efb7..b934934 100644\n--- a/plone/app/linkintegrity/tests/test_imagescales.py\n+++ b/plone/app/linkintegrity/tests/test_imagescales.py\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n from plone.uuid.interfaces import IUUID\n \n+import six\n+\n \n class ImageReferenceTestCase:\n \n@@ -65,6 +66,8 @@ def test_image_resolveuid_reference_creation(self):\n class ImageReferenceDXTestCase(DXBaseTestCase, ImageReferenceTestCase):\n     """Image reference testcase for dx content types"""\n \n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n \n-class ImageReferenceATTestCase(ATBaseTestCase, ImageReferenceTestCase):\n-    """Image reference testcase for dx content types"""\n+    class ImageReferenceATTestCase(ATBaseTestCase, ImageReferenceTestCase):\n+        """Image reference testcase for dx content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex 8dbd930..f69e903 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity import testing\n from plone.app.linkintegrity.parser import extractLinks\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n from plone.app.linkintegrity.utils import getIncomingLinks\n from plone.app.linkintegrity.utils import getOutgoingLinks\n@@ -136,8 +135,8 @@ def test_unicode_links(self):\n         # be any references added.\n         self._set_text(\n             doc1,\n-            six.text_type(\'<a href="\xc3\xb6?foo=bar&baz=bam">bug</a>\', \'utf-8\'),\n-        )\n+            \'<a href="\xc3\xb6?foo=bar&baz=bam">bug</a>\')\n+\n         self.assertEqual([l for l in getOutgoingLinks(doc1)], [])\n \n     def test_reference_orthogonality(self):\n@@ -205,9 +204,11 @@ class ReferenceGenerationDXTestCase(\n ):\n     """Reference generation testcase for dx content types"""\n \n+if six.PY2:\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n \n-class ReferenceGenerationATTestCase(\n-    ATBaseTestCase,\n-    ReferenceGenerationTestCase,\n-):\n-    """Reference generation testcase for at content types"""\n+    class ReferenceGenerationATTestCase(\n+        ATBaseTestCase,\n+        ReferenceGenerationTestCase,\n+    ):\n+        """Reference generation testcase for at content types"""\ndiff --git a/plone/app/linkintegrity/tests/test_upgrade.py b/plone/app/linkintegrity/tests/test_upgrade.py\nindex 9cef657..c363339 100644\n--- a/plone/app/linkintegrity/tests/test_upgrade.py\n+++ b/plone/app/linkintegrity/tests/test_upgrade.py\n@@ -1,29 +1,37 @@\n # -*- coding: utf-8 -*-\n-from plone.app.linkintegrity.tests.base import ATBaseTestCase\n from plone.app.linkintegrity.upgrades import migrate_linkintegrity_relations\n from plone.app.linkintegrity.utils import hasIncomingLinks\n from plone.app.linkintegrity.utils import referencedRelationship\n try:\n     from Products.Archetypes.interfaces import IReferenceable\n+    from plone.app.linkintegrity.tests.base import ATBaseTestCase\n     HAS_AT = True\n except ImportError:\n     HAS_AT = False\n import unittest\n \n \n-class ReferenceMigrationATTestCase(ATBaseTestCase):\n-    """Reference migration testcase for at content types"""\n+if HAS_AT:\n+    class ReferenceMigrationATTestCase(ATBaseTestCase):\n+        """Reference migration testcase for at content types"""\n \n-    @unittest.skipUnless(\n-        HAS_AT, \'Archetypes are not installed. Skipping migration tests\')\n-    def test_upgrade(self):\n-        doc3 = self.portal[\'doc3\']\n-        doc1 = self.portal[\'doc1\']\n-        self.assertTrue(IReferenceable.providedBy(doc3))\n-        doc3.setText(\'<a href="doc1">doc1</a>\', mimetype=\'text/html\')\n-        doc3.addReference(doc1, relationship=referencedRelationship)\n-        self.assertFalse(hasIncomingLinks(doc1))\n-        self.assertFalse(hasIncomingLinks(doc3))\n-        migrate_linkintegrity_relations(self.portal)\n-        self.assertTrue(hasIncomingLinks(doc1))\n-        self.assertFalse(hasIncomingLinks(doc3))\n+        @unittest.skipUnless(\n+            HAS_AT, \'Archetypes are not installed. Skipping migration tests\')\n+        def test_upgrade(self):\n+            doc3 = self.portal[\'doc3\']\n+            doc1 = self.portal[\'doc1\']\n+            self.assertTrue(IReferenceable.providedBy(doc3))\n+            doc3.setText(\'<a href="doc1">doc1</a>\', mimetype=\'text/html\')\n+            doc3.addReference(doc1, relationship=referencedRelationship)\n+            self.assertFalse(hasIncomingLinks(doc1))\n+            self.assertFalse(hasIncomingLinks(doc3))\n+            migrate_linkintegrity_relations(self.portal)\n+            self.assertTrue(hasIncomingLinks(doc1))\n+            self.assertFalse(hasIncomingLinks(doc3))\n+\n+else:\n+\n+    class TestDummy(unittest.TestCase):\n+\n+        def test_dummy(self):\n+            pass\ndiff --git a/setup.py b/setup.py\nindex 3380394..3dede05 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -26,6 +26,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking",\n     ],\n     keywords=\'link integrity plone\',\n'

