Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-10-26T08:12:23+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/bc6cf5dad7a25ee9f891fe09034ecebc9ace81e5

Rename Tiles to Blocks.

Files changed:
M src/plone/restapi/behaviors.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/profiles/tiles/types/Document.xml
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_behaviors.py
M src/plone/restapi/tests/test_profile_tiles.py
M src/plone/restapi/tests/test_services_tiles.py

b'diff --git a/src/plone/restapi/behaviors.py b/src/plone/restapi/behaviors.py\nindex 49308135..e2911e1a 100644\n--- a/src/plone/restapi/behaviors.py\n+++ b/src/plone/restapi/behaviors.py\n@@ -8,7 +8,7 @@\n import json\n \n \n-TILES_SCHEMA = json.dumps({"type": "object", "properties": {}})\n+BLOCKS_SCHEMA = json.dumps({"type": "object", "properties": {}})\n \n LAYOUT_SCHEMA = json.dumps(\n     {\n@@ -19,21 +19,21 @@\n \n \n @provider(IFormFieldProvider)\n-class ITiles(model.Schema):\n+class IBlocks(model.Schema):\n \n-    model.fieldset("layout", label=_(u"Layout"), fields=["tiles", "tiles_layout"])\n+    model.fieldset("layout", label=_(u"Layout"), fields=["blocks", "blocks_layout"])\n \n-    tiles = JSONField(\n-        title=u"Tiles",\n-        description=u"The JSON representation of the object tiles information. Must be a JSON object.",  # noqa\n-        schema=TILES_SCHEMA,\n+    blocks = JSONField(\n+        title=u"Blocks",\n+        description=u"The JSON representation of the object blocks information. Must be a JSON object.",  # noqa\n+        schema=BLOCKS_SCHEMA,\n         default={},\n         required=False,\n     )\n \n-    tiles_layout = JSONField(\n-        title=u"Tiles Layout",\n-        description=u"The JSON representation of the object tiles layout. Must be a JSON array.",  # noqa\n+    blocks_layout = JSONField(\n+        title=u"Blocks Layout",\n+        description=u"The JSON representation of the object blocks layout. Must be a JSON array.",  # noqa\n         schema=LAYOUT_SCHEMA,\n         default={"items": []},\n         required=False,\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 1fc318a1..435a589c 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -86,7 +86,7 @@\n         name="plone.tiles"\n         title="Tiles"\n         description="Existing tiles on the object and their layout"\n-        provides=".behaviors.ITiles"\n+        provides=".behaviors.IBlocks"\n         for="plone.dexterity.interfaces.IDexterityContent"\n       />\n \ndiff --git a/src/plone/restapi/profiles/tiles/types/Document.xml b/src/plone/restapi/profiles/tiles/types/Document.xml\nindex 02a410d1..9ee0e772 100644\n--- a/src/plone/restapi/profiles/tiles/types/Document.xml\n+++ b/src/plone/restapi/profiles/tiles/types/Document.xml\n@@ -2,7 +2,7 @@\n <object name="Document" meta_type="Dexterity FTI" i18n:domain="plone"\n    xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n  <property name="behaviors" purge="false">\n-  <element value="plone.restapi.behaviors.ITiles" />\n+  <element value="plone.restapi.behaviors.IBlocks" />\n  </property>\n \n </object>\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 0486eb17..93ec7037 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -299,7 +299,7 @@ def setUpPloneSite(self, portal):\n     PLONE_RESTAPI_AT_FUNCTIONAL_TESTING = PLONE_FIXTURE\n \n \n-class PloneRestApiTilesLayer(PloneSandboxLayer):\n+class PloneRestApIBlocksLayer(PloneSandboxLayer):\n \n     defaultBases = (PLONE_RESTAPI_DX_FIXTURE,)\n \n@@ -307,13 +307,13 @@ def setUpPloneSite(self, portal):\n         applyProfile(portal, "plone.restapi:tiles")\n \n \n-PLONE_RESTAPI_TILES_FIXTURE = PloneRestApiTilesLayer()\n+PLONE_RESTAPI_TILES_FIXTURE = PloneRestApIBlocksLayer()\n PLONE_RESTAPI_TILES_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_TILES_FIXTURE,), name="PloneRestApiTilesLayer:Integration"\n+    bases=(PLONE_RESTAPI_TILES_FIXTURE,), name="PloneRestApIBlocksLayer:Integration"\n )\n PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneRestApiTilesLayer:Functional",\n+    name="PloneRestApIBlocksLayer:Functional",\n )\n \n \ndiff --git a/src/plone/restapi/tests/test_behaviors.py b/src/plone/restapi/tests/test_behaviors.py\nindex 1367c401..c6d51352 100644\n--- a/src/plone/restapi/tests/test_behaviors.py\n+++ b/src/plone/restapi/tests/test_behaviors.py\n@@ -4,7 +4,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.dexterity.fti import DexterityFTI\n-from plone.restapi.behaviors import ITiles\n+from plone.restapi.behaviors import IBlocks\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from zope.interface import alsoProvides\n \n@@ -25,7 +25,7 @@ def setUp(self):\n         fti.klass = "plone.dexterity.content.Container"\n         fti.behaviors = ("plone.tiles",)\n         self.fti = fti\n-        alsoProvides(self.request, ITiles)\n+        alsoProvides(self.request, IBlocks)\n \n     def test_basic_fields(self):\n         self.portal.invokeFactory(\n@@ -47,4 +47,4 @@ def test_behavior_provides(self):\n             "tiledfolder", id="tiledfolder", title=u"Folder with tiles"\n         )\n \n-        ITiles.providedBy(self.portal["tiledfolder"])\n+        IBlocks.providedBy(self.portal["tiledfolder"])\ndiff --git a/src/plone/restapi/tests/test_profile_tiles.py b/src/plone/restapi/tests/test_profile_tiles.py\nindex 22748ff3..b0412081 100644\n--- a/src/plone/restapi/tests/test_profile_tiles.py\n+++ b/src/plone/restapi/tests/test_profile_tiles.py\n@@ -3,7 +3,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import TEST_USER_ID\n-from plone.restapi.behaviors import ITiles\n+from plone.restapi.behaviors import IBlocks\n from plone.restapi.testing import PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n from Products.CMFCore.utils import getToolByName\n \n@@ -25,7 +25,7 @@ def test_document_type_has_tiles_behavior_enabled(self):\n         self.portal.invokeFactory(\n             "Document", id="tileddoc", title="Document with Tiles"\n         )\n-        ITiles.providedBy(self.portal["tileddoc"])\n+        IBlocks.providedBy(self.portal["tileddoc"])\n \n     def test_plone_restapi_base_profile_applied(self):\n         uf = getToolByName(self.portal, "acl_users")\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 514d27ff..86a823af 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -98,7 +98,7 @@ def test_patch_tiles_list(self):\n         response = self.api_session.patch(\n             "/doc",\n             json={\n-                "tiles": {\n+                "blocks": {\n                     "uuid1": {"@type": "title"},\n                     "uuid2": {"@type": "description"},\n                 }\n@@ -111,13 +111,13 @@ def test_patch_tiles_list(self):\n         response = response.json()\n \n         self.assertEqual(\n-            response["tiles"],\n+            response["blocks"],\n             {"uuid1": {"@type": "title"}, "uuid2": {"@type": "description"}},\n         )\n \n-    def test_patch_tiles_layout(self):\n+    def test_patch_blocks_layout(self):\n         response = self.api_session.patch(\n-            "/doc", json={"tiles_layout": {"items": ["#uuid1", "#uuid2"]}}\n+            "/doc", json={"blocks_layout": {"items": ["#uuid1", "#uuid2"]}}\n         )\n \n         self.assertEqual(response.status_code, 204)\n@@ -125,7 +125,7 @@ def test_patch_tiles_layout(self):\n         response = self.api_session.get("/doc")\n         response = response.json()\n \n-        self.assertEqual(response["tiles_layout"], {"items": ["#uuid1", "#uuid2"]})\n+        self.assertEqual(response["blocks_layout"], {"items": ["#uuid1", "#uuid2"]})\n \n     def test_get_tiles_layout_schema(self):\n         response = self.api_session.get("/@types/Document")\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-10-27T17:14:04+01:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/0b68389a0a763e63b37bca866d6cc1f1b476d80b

Merge branch 'master' of github.com:plone/plone.restapi

Files changed:
A news/690.bugfix
M src/plone/restapi/deserializer/atfields.py
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/serializer/atfields.py
M src/plone/restapi/serializer/configure.zcml

b'diff --git a/news/690.bugfix b/news/690.bugfix\nnew file mode 100644\nindex 00000000..43f2e776\n--- /dev/null\n+++ b/news/690.bugfix\n@@ -0,0 +1,2 @@\n+Fixed startup error when Archetypes is there, but ``plone.app.blob`` or ``plone.app.collection`` not.\n+[maurits]\ndiff --git a/src/plone/restapi/deserializer/atfields.py b/src/plone/restapi/deserializer/atfields.py\nindex 4e322be0..d743697c 100644\n--- a/src/plone/restapi/deserializer/atfields.py\n+++ b/src/plone/restapi/deserializer/atfields.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from plone.app.blob.interfaces import IBlobField\n from plone.restapi.interfaces import IFieldDeserializer\n from plone.restapi.services.content.tus import TUSUpload\n from Products.Archetypes.interfaces import IBaseObject\n@@ -11,6 +10,16 @@\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n+import pkg_resources\n+\n+try:\n+    pkg_resources.get_distribution("plone.app.blob")\n+except pkg_resources.DistributionNotFound:\n+    HAS_BLOB = False\n+else:\n+    HAS_BLOB = True\n+    from plone.app.blob.interfaces import IBlobField\n+\n \n @implementer(IFieldDeserializer)\n @adapter(IField, IBaseObject, IBrowserRequest)\n@@ -49,10 +58,11 @@ def __call__(self, value):\n         return value, kwargs\n \n \n-@implementer(IFieldDeserializer)\n-@adapter(IBlobField, IBaseObject, IBrowserRequest)\n-class BlobFieldDeserializer(FileFieldDeserializer):\n-    pass\n+if HAS_BLOB:\n+    @implementer(IFieldDeserializer)\n+    @adapter(IBlobField, IBaseObject, IBrowserRequest)\n+    class BlobFieldDeserializer(FileFieldDeserializer):\n+        pass\n \n \n @implementer(IFieldDeserializer)\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 9c89af2e..1e06627a 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -26,7 +26,9 @@\n \n   <configure zcml:condition="installed Products.Archetypes">\n     <adapter factory=".atcontent.DeserializeFromJson" />\n-    <adapter factory=".atfields.BlobFieldDeserializer" />\n+    <configure zcml:condition="installed plone.app.blob">\n+        <adapter factory=".atfields.BlobFieldDeserializer" />\n+    </configure>\n     <adapter factory=".atfields.DefaultFieldDeserializer" />\n     <adapter factory=".atfields.FileFieldDeserializer" />\n     <adapter factory=".atfields.ReferenceFieldDeserializer" />\ndiff --git a/src/plone/restapi/serializer/atfields.py b/src/plone/restapi/serializer/atfields.py\nindex 4a12f013..c6a4b366 100644\n--- a/src/plone/restapi/serializer/atfields.py\n+++ b/src/plone/restapi/serializer/atfields.py\n@@ -1,6 +1,4 @@\n # -*- coding: utf-8 -*-\n-from plone.app.blob.interfaces import IBlobField\n-from plone.app.blob.interfaces import IBlobImageField\n from plone.restapi.imaging import get_original_image_url\n from plone.restapi.imaging import get_scales\n from plone.restapi.interfaces import IFieldSerializer\n@@ -17,13 +15,30 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n+import pkg_resources\n \n+\n+# When we have plone.app.collection, we need a serializer for IQueryField.\n+# On Plone 5 it comes from p.a.collection.\n+# On Plone 4 we also have p.a.collection, but the field is in archetypes.querywidget.\n try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    from archetypes.querywidget.interfaces import IQueryField\n+    pkg_resources.get_distribution("plone.app.collection")\n+except pkg_resources.DistributionNotFound:\n+    IQueryField = None\n else:\n-    from plone.app.collection.field import IQueryField\n+    try:\n+        from plone.app.collection.field import IQueryField\n+    except ImportError:\n+        from archetypes.querywidget.interfaces import IQueryField\n+\n+try:\n+    pkg_resources.get_distribution("plone.app.blob")\n+except pkg_resources.DistributionNotFound:\n+    HAS_BLOB = False\n+else:\n+    HAS_BLOB = True\n+    from plone.app.blob.interfaces import IBlobField\n+    from plone.app.blob.interfaces import IBlobImageField\n \n \n @adapter(IField, IBaseObject, Interface)\n@@ -91,16 +106,16 @@ def __call__(self):\n         return json_compatible(result)\n \n \n-@adapter(IBlobField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class BlobFieldSerializer(FileFieldSerializer):\n-    pass\n+if HAS_BLOB:\n+    @adapter(IBlobField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class BlobFieldSerializer(FileFieldSerializer):\n+        pass\n \n-\n-@adapter(IBlobImageField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class BlobImageFieldSerializer(ImageFieldSerializer):\n-    pass\n+    @adapter(IBlobImageField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class BlobImageFieldSerializer(ImageFieldSerializer):\n+        pass\n \n \n @adapter(IReferenceField, IBaseObject, Interface)\n@@ -117,9 +132,10 @@ def __call__(self):\n             return json_compatible(refs.absolute_url())\n \n \n-@adapter(IQueryField, IBaseObject, Interface)\n-@implementer(IFieldSerializer)\n-class QueryFieldSerializer(DefaultFieldSerializer):\n-    def __call__(self):\n-        raw_value = self.field.getRaw(self.context)\n-        return json_compatible(list(map(dict, raw_value)))\n+if IQueryField is not None:\n+    @adapter(IQueryField, IBaseObject, Interface)\n+    @implementer(IFieldSerializer)\n+    class QueryFieldSerializer(DefaultFieldSerializer):\n+        def __call__(self):\n+            raw_value = self.field.getRaw(self.context)\n+            return json_compatible(list(map(dict, raw_value)))\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex bc9dcbc7..8a1f6af6 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -24,15 +24,19 @@\n     <configure zcml:condition="installed Products.Archetypes">\n         <adapter factory=".atcontent.SerializeToJson" />\n         <adapter factory=".atcontent.SerializeFolderToJson" />\n-        <adapter factory=".atfields.BlobFieldSerializer" />\n-        <adapter factory=".atfields.BlobImageFieldSerializer" />\n+        <configure zcml:condition="installed plone.app.blob">\n+            <adapter factory=".atfields.BlobFieldSerializer" />\n+            <adapter factory=".atfields.BlobImageFieldSerializer" />\n+        </configure>\n         <adapter factory=".atfields.DefaultFieldSerializer" />\n         <adapter factory=".atfields.FileFieldSerializer" />\n         <adapter factory=".atfields.ImageFieldSerializer" />\n         <adapter factory=".atfields.ReferenceFieldSerializer" />\n         <adapter factory=".atfields.TextFieldSerializer" />\n-        <adapter factory=".atfields.QueryFieldSerializer" />\n-        <adapter factory=".atcollection.SerializeCollectionToJson" />\n+        <configure zcml:condition="installed plone.app.collection">\n+            <adapter factory=".atfields.QueryFieldSerializer" />\n+            <adapter factory=".atcollection.SerializeCollectionToJson" />\n+        </configure>\n     </configure>\n \n     <adapter factory=".converters.date_converter" />\n'

