Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-01-10T15:51:28+01:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/c084e89966f2d35a538f873f6cbf1a14ab1732ce

Implement ?fullobjects support for DX collections (#850)

* implement ?fullobjects support for DX collections

* document the use of ?fullobjects in collections

* changelog

Files changed:
A news/848.feature
A src/plone/restapi/tests/http-examples/collection_fullobjects.req
A src/plone/restapi/tests/http-examples/collection_fullobjects.resp
M docs/source/plone-content.rst
M src/plone/restapi/serializer/collection.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_serializer.py

b'diff --git a/docs/source/plone-content.rst b/docs/source/plone-content.rst\nindex d179dc98..5b49e769 100644\n--- a/docs/source/plone-content.rst\n+++ b/docs/source/plone-content.rst\n@@ -110,3 +110,13 @@ Collection:\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/collection.resp\n    :language: http\n+\n+\n+You can also get all the data of each of the items of a collection, appending the `?fullobjects`\n+parameter to the query:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/collection_fullobjects.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n+   :language: http\ndiff --git a/news/848.feature b/news/848.feature\nnew file mode 100644\nindex 00000000..cc3a180b\n--- /dev/null\n+++ b/news/848.feature\n@@ -0,0 +1,2 @@\n+Make ?fullobjects work in Dexterity Collections to get the full JSON representation of the items\n+[erral]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/serializer/collection.py b/src/plone/restapi/serializer/collection.py\nindex fd514276..42f30ba2 100644\n--- a/src/plone/restapi/serializer/collection.py\n+++ b/src/plone/restapi/serializer/collection.py\n@@ -27,8 +27,14 @@ def __call__(self, version=None, include_items=True):\n         if batch.links:\n             results["batching"] = batch.links\n \n-        results["items"] = [\n-            getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n-            for brain in batch\n-        ]\n+        if "fullobjects" in list(self.request.form):\n+            results["items"] = [\n+                getMultiAdapter((brain.getObject(), self.request), ISerializeToJson)()\n+                for brain in batch\n+            ]\n+        else:\n+            results["items"] = [\n+                getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+                for brain in batch\n+            ]\n         return results\ndiff --git a/src/plone/restapi/tests/http-examples/collection_fullobjects.req b/src/plone/restapi/tests/http-examples/collection_fullobjects.req\nnew file mode 100644\nindex 00000000..f7acbcd4\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/collection_fullobjects.req\n@@ -0,0 +1,3 @@\n+GET /plone/collection?fullobjects HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\nnew file mode 100644\nindex 00000000..5f7a24d6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n@@ -0,0 +1,248 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@components": {\n+    "actions": {\n+      "@id": "http://localhost:55001/plone/collection/@actions"\n+    }, \n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n+    }, \n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/collection/@navigation"\n+    }, \n+    "types": {\n+      "@id": "http://localhost:55001/plone/collection/@types"\n+    }, \n+    "workflow": {\n+      "@id": "http://localhost:55001/plone/collection/@workflow"\n+    }\n+  }, \n+  "@id": "http://localhost:55001/plone/collection", \n+  "@type": "Collection", \n+  "UID": "SomeUUID000000000000000000000002", \n+  "allow_discussion": false, \n+  "contributors": [], \n+  "created": "1995-07-31T13:45:00", \n+  "creators": [\n+    "test_user_1_"\n+  ], \n+  "customViewFields": [\n+    {\n+      "title": "Title", \n+      "token": "Title"\n+    }, \n+    {\n+      "title": "Creator", \n+      "token": "Creator"\n+    }, \n+    {\n+      "title": "Type", \n+      "token": "Type"\n+    }, \n+    {\n+      "title": "ModificationDate", \n+      "token": "ModificationDate"\n+    }\n+  ], \n+  "description": "This is a collection with two documents", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "collection", \n+  "is_folderish": false, \n+  "item_count": 30, \n+  "items": [\n+    {\n+      "@components": {\n+        "actions": {\n+          "@id": "http://localhost:55001/plone/front-page/@actions"\n+        }, \n+        "breadcrumbs": {\n+          "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n+        }, \n+        "navigation": {\n+          "@id": "http://localhost:55001/plone/front-page/@navigation"\n+        }, \n+        "types": {\n+          "@id": "http://localhost:55001/plone/front-page/@types"\n+        }, \n+        "workflow": {\n+          "@id": "http://localhost:55001/plone/front-page/@workflow"\n+        }\n+      }, \n+      "@id": "http://localhost:55001/plone/front-page", \n+      "@type": "Document", \n+      "UID": "SomeUUID000000000000000000000001", \n+      "allow_discussion": false, \n+      "changeNote": "", \n+      "contributors": [], \n+      "created": "1995-07-31T13:45:00", \n+      "creators": [\n+        "test_user_1_"\n+      ], \n+      "description": "Congratulations! You have successfully installed Plone.", \n+      "effective": null, \n+      "exclude_from_nav": false, \n+      "expires": null, \n+      "id": "front-page", \n+      "is_folderish": false, \n+      "language": "", \n+      "layout": "document_view", \n+      "modified": "1995-07-31T17:30:00", \n+      "parent": {\n+        "@id": "http://localhost:55001/plone", \n+        "@type": "Plone Site", \n+        "description": "", \n+        "title": "Plone site"\n+      }, \n+      "relatedItems": [], \n+      "review_state": "private", \n+      "rights": "", \n+      "subjects": [], \n+      "table_of_contents": null, \n+      "text": {\n+        "content-type": "text/plain", \n+        "data": "<p>If you&#x27;re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone mailing lists about this.</p>", \n+        "encoding": "utf-8"\n+      }, \n+      "title": "Welcome to Plone", \n+      "version": "current", \n+      "versioning_enabled": true\n+    }, \n+    {\n+      "@components": {\n+        "actions": {\n+          "@id": "http://localhost:55001/plone/doc1/@actions"\n+        }, \n+        "breadcrumbs": {\n+          "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n+        }, \n+        "navigation": {\n+          "@id": "http://localhost:55001/plone/doc1/@navigation"\n+        }, \n+        "types": {\n+          "@id": "http://localhost:55001/plone/doc1/@types"\n+        }, \n+        "workflow": {\n+          "@id": "http://localhost:55001/plone/doc1/@workflow"\n+        }\n+      }, \n+      "@id": "http://localhost:55001/plone/doc1", \n+      "@type": "Document", \n+      "UID": "SomeUUID000000000000000000000003", \n+      "allow_discussion": false, \n+      "changeNote": "", \n+      "contributors": [], \n+      "created": "1995-07-31T13:45:00", \n+      "creators": [\n+        "test_user_1_"\n+      ], \n+      "description": "", \n+      "effective": null, \n+      "exclude_from_nav": false, \n+      "expires": null, \n+      "id": "doc1", \n+      "is_folderish": false, \n+      "language": "", \n+      "layout": "document_view", \n+      "modified": "1995-07-31T17:30:00", \n+      "parent": {\n+        "@id": "http://localhost:55001/plone", \n+        "@type": "Plone Site", \n+        "description": "", \n+        "title": "Plone site"\n+      }, \n+      "relatedItems": [], \n+      "review_state": "private", \n+      "rights": "", \n+      "subjects": [], \n+      "table_of_contents": null, \n+      "text": null, \n+      "title": "Document 1", \n+      "version": "current", \n+      "versioning_enabled": true\n+    }, \n+    {\n+      "@components": {\n+        "actions": {\n+          "@id": "http://localhost:55001/plone/doc2/@actions"\n+        }, \n+        "breadcrumbs": {\n+          "@id": "http://localhost:55001/plone/doc2/@breadcrumbs"\n+        }, \n+        "navigation": {\n+          "@id": "http://localhost:55001/plone/doc2/@navigation"\n+        }, \n+        "types": {\n+          "@id": "http://localhost:55001/plone/doc2/@types"\n+        }, \n+        "workflow": {\n+          "@id": "http://localhost:55001/plone/doc2/@workflow"\n+        }\n+      }, \n+      "@id": "http://localhost:55001/plone/doc2", \n+      "@type": "Document", \n+      "UID": "SomeUUID000000000000000000000004", \n+      "allow_discussion": false, \n+      "changeNote": "", \n+      "contributors": [], \n+      "created": "1995-07-31T13:45:00", \n+      "creators": [\n+        "test_user_1_"\n+      ], \n+      "description": "", \n+      "effective": null, \n+      "exclude_from_nav": false, \n+      "expires": null, \n+      "id": "doc2", \n+      "is_folderish": false, \n+      "language": "", \n+      "layout": "document_view", \n+      "modified": "1995-07-31T17:30:00", \n+      "parent": {\n+        "@id": "http://localhost:55001/plone", \n+        "@type": "Plone Site", \n+        "description": "", \n+        "title": "Plone site"\n+      }, \n+      "relatedItems": [], \n+      "review_state": "private", \n+      "rights": "", \n+      "subjects": [], \n+      "table_of_contents": null, \n+      "text": null, \n+      "title": "Document 2", \n+      "version": "current", \n+      "versioning_enabled": true\n+    }\n+  ], \n+  "items_total": 3, \n+  "language": "", \n+  "layout": "listing_view", \n+  "limit": 1000, \n+  "modified": "1995-07-31T17:30:00", \n+  "parent": {\n+    "@id": "http://localhost:55001/plone", \n+    "@type": "Plone Site", \n+    "description": "", \n+    "title": "Plone site"\n+  }, \n+  "query": [\n+    {\n+      "i": "portal_type", \n+      "o": "plone.app.querystring.operation.string.is", \n+      "v": "Document"\n+    }\n+  ], \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "sort_on": null, \n+  "sort_reversed": null, \n+  "subjects": [], \n+  "text": null, \n+  "title": "My Collection", \n+  "version": "current"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 9c1d828b..bd770be0 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -361,6 +361,25 @@ def test_documentation_collection(self):\n         response = self.api_session.get(self.portal.collection.absolute_url())\n         save_request_and_response_for_docs("collection", response)\n \n+    def test_documentation_collection_fullobjects(self):\n+        self.portal.invokeFactory("Collection", id="collection")\n+        self.portal.collection.title = "My Collection"\n+        self.portal.collection.description = u"This is a collection with two documents"\n+        self.portal.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n+        self.portal.invokeFactory("Document", id="doc1", title="Document 1")\n+        self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n+        transaction.commit()\n+        response = self.api_session.get(\n+            self.portal.collection.absolute_url() + "?fullobjects"\n+        )\n+        save_request_and_response_for_docs("collection_fullobjects", response)\n+\n     def test_documentation_siteroot(self):\n         response = self.api_session.get(self.portal.absolute_url())\n         save_request_and_response_for_docs("siteroot", response)\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 3c6875ea..a4bbf258 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -32,7 +32,10 @@ def setUp(self):\n             "DXTestDocument", id="dxdoc", title="DX Test Document"\n         )\n \n-    def serialize(self, obj):\n+    def serialize(self, obj, fullobjects=False):\n+        if fullobjects:\n+            self.request.form["fullobjects"] = 1\n+\n         serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n@@ -326,6 +329,35 @@ def test_serialize_to_json_collection(self):\n             self.serialize(self.portal.collection1).get("items"),\n         )\n \n+    def test_serialize_to_json_collection_fullobjects(self):\n+        self.portal.invokeFactory("Collection", id="collection1")\n+        self.portal.collection1.title = "My Collection"\n+        self.portal.collection1.description = u"This is a collection with two documents"\n+        self.portal.collection1.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Document",\n+            }\n+        ]\n+        self.portal.invokeFactory("Document", id="doc2", title="Document 2")\n+        self.portal.doc1.reindexObject()\n+        self.portal.doc2.reindexObject()\n+\n+        self.assertEqual(\n+            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+        )\n+        self.assertEqual(\n+            u"Collection", self.serialize(self.portal.collection1).get("@type")\n+        )\n+\n+        items = self.serialize(self.portal.collection1, fullobjects=True).get("items")\n+        self.assertIn("UID", items[0])\n+        self.assertEquals(items[0]["id"], self.portal.doc1.getId())\n+\n+        self.assertIn("UID", items[1])\n+        self.assertEquals(items[1]["id"], self.portal.doc2.getId())\n+\n     def test_serialize_returns_site_root_common(self):\n         self.assertIn("title", self.serialize(self.portal))\n         self.assertIn("description", self.serialize(self.portal))\n'

