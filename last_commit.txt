Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2018-05-07T17:14:03-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFEditions/commit/38132be03b076826ebd5cd194b23e8ab396e70a6

Test against plone.app.contenttypes instead of ATContentTypes

Files changed:
M CHANGES.rst
M Products/CMFEditions/tests/base.py
M Products/CMFEditions/tests/test_ATContentTypes.py
M Products/CMFEditions/tests/test_ATReferences.py
M Products/CMFEditions/tests/test_ContentTypes.py
M Products/CMFEditions/tests/test_IntegrationTests.py
M Products/CMFEditions/tests/test_ModifierRegistryTool.py
M Products/CMFEditions/tests/test_versions_history_form.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 22a1af0..2f16dab 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Test against plone.app.contenttypes instead of ATContentTypes.
+  [davisagli]
+
 - *add item here*
 
 
diff --git a/Products/CMFEditions/tests/base.py b/Products/CMFEditions/tests/base.py
index a3005ca..5958a76 100644
--- a/Products/CMFEditions/tests/base.py
+++ b/Products/CMFEditions/tests/base.py
@@ -1,4 +1,33 @@
+from plone.app.testing import IntegrationTesting
+from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.bbb import PloneTestCase
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+
+
+class CMFEditionsFixture(PloneSandboxLayer):
+
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)
+
+    def setUpPloneSite(self, portal):
+        # Disable automatic versioning of core content types
+        for name in ('Document', 'Event', 'Link', 'News Item'):
+            fti = portal.portal_types[name]
+            behaviors = list(fti.behaviors)
+            behaviors.remove('plone.app.versioningbehavior.behaviors.IVersionable')
+            fti.behaviors = tuple(behaviors)
+
+
+CMFEDITIONS_FIXTURE = CMFEditionsFixture()
+CMFEDITIONS_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(CMFEDITIONS_FIXTURE,),
+    name="CMFEditions:Integration",
+)
+
 
 class CMFEditionsBaseTestCase(PloneTestCase):
     """ A base class for Products.CMFEditions testing """
+    layer = CMFEDITIONS_INTEGRATION_TESTING
+
+
+class CMFEditionsATBaseTestCase(PloneTestCase):
+    """A base class for testing CMFEditions with Archetypes"""
diff --git a/Products/CMFEditions/tests/test_ATContentTypes.py b/Products/CMFEditions/tests/test_ATContentTypes.py
index 3cf32b8..9a39608 100644
--- a/Products/CMFEditions/tests/test_ATContentTypes.py
+++ b/Products/CMFEditions/tests/test_ATContentTypes.py
@@ -20,15 +20,13 @@
 # along with CMFEditions; if not, write to the Free Software
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
-"""Test the ATContentTypes content
-"""
-import os
 
 from Products.CMFEditions import PACKAGE_HOME
-from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
+from Products.CMFEditions.tests.base import CMFEditionsATBaseTestCase
+import os
 
 
-class TestATContents(CMFEditionsBaseTestCase):
+class TestATContents(CMFEditionsATBaseTestCase):
 
     def afterSetUp(self):
         self.membership = self.portal.portal_membership
diff --git a/Products/CMFEditions/tests/test_ATReferences.py b/Products/CMFEditions/tests/test_ATReferences.py
index dec1f66..f62d3c5 100644
--- a/Products/CMFEditions/tests/test_ATReferences.py
+++ b/Products/CMFEditions/tests/test_ATReferences.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-#
 
-from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
+from Products.CMFEditions.tests.base import CMFEditionsATBaseTestCase
 
-class TestATReferences(CMFEditionsBaseTestCase):
+
+class TestATReferences(CMFEditionsATBaseTestCase):
 
     def afterSetUp(self):
         # we need to have the Manager role to be able to add things
diff --git a/Products/CMFEditions/tests/test_ContentTypes.py b/Products/CMFEditions/tests/test_ContentTypes.py
index 4d6755d..3eab925 100644
--- a/Products/CMFEditions/tests/test_ContentTypes.py
+++ b/Products/CMFEditions/tests/test_ContentTypes.py
@@ -1,10 +1,13 @@
 # -*- coding: utf-8 -*-
-#
 
+from plone.app.textfield.value import RichTextValue
+from plone.namedfile.file import NamedBlobFile
+from plone.namedfile.file import NamedBlobImage
+from Products.CMFEditions import PACKAGE_HOME
 from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
-
+from Products.CMFPlone.utils import _createObjectByType
 import os
-from Products.CMFEditions import PACKAGE_HOME
+
 
 class TestPloneContents(CMFEditionsBaseTestCase):
 
@@ -14,6 +17,8 @@ def afterSetUp(self):
         self.workflow = self.portal.portal_workflow
         self.portal_repository = self.portal.portal_repository
         self.portal_archivist = self.portal.portal_archivist
+        _createObjectByType('Folder', self.portal, id='folder')
+        self.folder = self.portal.folder
 
     def getPermissionsOfRole(self, role):
         perms = self.portal.permissionsOfRole(role)
@@ -39,68 +44,60 @@ def testDocument(self):
         self.folder.invokeFactory('Document', id='doc')
         portal_repository = self.portal_repository
         content = self.folder.doc
-        content.edit('text/plain','text v1')
-        content.editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='text/plain',
-                              language='content',
-                              rights='content',
-                              )
+        content.text = RichTextValue(u'text v1', 'text/plain', 'text/plain')
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content.edit('text/plain','text v2')
-        content.editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='text/plain',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.text = RichTextValue(u'text v2', 'text/plain', 'text/plain')
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
-        self.assertEqual(obj.EditableBody(), 'text v1')
+        self.assertEqual(obj.text.raw, 'text v1')
         self.metadata_test_one(obj)
         obj = portal_repository.retrieve(content, 1).object
-        self.assertEqual(obj.EditableBody(), 'text v2')
+        self.assertEqual(obj.text.raw, 'text v2')
         self.metadata_test_two(obj)
         portal_repository.revert(content, 0)
-        self.assertEqual(content.EditableBody(), 'text v1')
+        self.assertEqual(content.text.raw, 'text v1')
         self.metadata_test_one(content)
 
     def testNewsItem(self):
         self.folder.invokeFactory('News Item', id='news_one')
         portal_repository = self.portal_repository
         content = self.folder.news_one
-        content.edit('text v1', text_format='text/plain')
-        content.editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='text/plain',
-                              language='content',
-                              rights='content',
-                              )
+        content.text = RichTextValue(u'text v1', 'text/plain', 'text/plain')
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content.edit('text v2', text_format='text/plain')
-        content.editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='text/plain',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.text = RichTextValue(u'text v2', 'text/plain', 'text/plain')
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
-        self.assertEqual(obj.EditableBody(), 'text v1')
+        self.assertEqual(obj.text.raw, 'text v1')
         self.metadata_test_one(obj)
         obj = portal_repository.retrieve(content, 1).object
-        self.assertEqual(obj.EditableBody(), 'text v2')
+        self.assertEqual(obj.text.raw, 'text v2')
         self.metadata_test_two(obj)
         portal_repository.revert(content, 0)
-        self.assertEqual(content.EditableBody(), 'text v1')
+        self.assertEqual(content.text.raw, 'text v1')
         self.metadata_test_one(content)
 
     def testImage(self):
@@ -109,34 +106,30 @@ def testImage(self):
         img1 = open(os.path.join(PACKAGE_HOME, 'tests/images/img1.png'), 'rb').read()
         img2 = open(os.path.join(PACKAGE_HOME, 'tests/images/img2.png'), 'rb').read()
         content = self.folder.image
-        content.edit(file=img1)
-        content.editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='image/png',
-                              language='content',
-                              rights='content',
-                              )
+        content.image = NamedBlobImage(img1, u'img1.png', u'image/png')
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content.edit(file=img2)
-        content.editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='image/png',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.image = NamedBlobImage(img2, u'img2.png', u'image/png')
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
-        self.assertEqual(obj.data, img1)
+        self.assertEqual(obj.image.data, img1)
         self.metadata_test_one(obj)
         obj = portal_repository.retrieve(content, 1).object
-        self.assertEqual(obj.data, img2)
+        self.assertEqual(obj.image.data, img2)
         self.metadata_test_two(obj)
         portal_repository.revert(content, 0)
-        self.assertEqual(content.data, img1)
+        self.assertEqual(content.image.data, img1)
         self.metadata_test_one(content)
 
     def testFile(self):
@@ -145,59 +138,49 @@ def testFile(self):
         file2 = open(os.path.join(PACKAGE_HOME, 'tests/images/img2.png'), 'rb').read()
         portal_repository = self.portal_repository
         content = self.folder.file
-        content.edit(file=file1)
-        content.editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='image/png',
-                              language='content',
-                              rights='content',
-                              )
+        content.file = NamedBlobFile(file1, u'img1.png', u'image/png')
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content.edit(file=file2)
-        content.editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='image/png',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.file = NamedBlobImage(file2, u'img2.png', u'image/png')
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
-        self.assertEqual(obj.data, file1)
+        self.assertEqual(obj.file.data, file1)
         self.metadata_test_one(obj)
         obj = portal_repository.retrieve(content, 1).object
-        self.assertEqual(obj.data, file2)
+        self.assertEqual(obj.file.data, file2)
         self.metadata_test_two(obj)
         portal_repository.revert(content, 0)
-        self.assertEqual(content.data, file1)
+        self.assertEqual(content.file.data, file1)
         self.metadata_test_one(content)
 
     def testFolder(self):
         self.folder.invokeFactory('Image', id='folder')
         portal_repository = self.portal_repository
         content = self.folder.folder
-        # Use private method because webDAV locking is tripping this up
-        # using the public method and ATCT
-        content._editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='image/png',
-                              language='content',
-                              rights='content',
-                              )
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content._editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='image/png',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
         self.metadata_test_one(obj)
diff --git a/Products/CMFEditions/tests/test_IntegrationTests.py b/Products/CMFEditions/tests/test_IntegrationTests.py
index 9e42abe..fbc967c 100644
--- a/Products/CMFEditions/tests/test_IntegrationTests.py
+++ b/Products/CMFEditions/tests/test_IntegrationTests.py
@@ -24,6 +24,7 @@
 
 """
 from Acquisition import aq_base
+from plone.app.textfield.value import RichTextValue
 from Products.CMFCore.indexing import processQueue
 from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
 from ZODB import broken
@@ -407,9 +408,9 @@ def test13_revertUpdatesCatalog(self):
         cat = self.portal.portal_catalog
         doc = self.portal.doc
 
-        doc.edit(text='Plain text')
+        doc.text = RichTextValue(u'Plain text', 'text/plain', 'text/plain')
         portal_repo.applyVersionControl(doc)
-        doc.edit(text='blahblah')
+        doc.text = RichTextValue(u'blahblah', 'text/plain', 'text/plain')
         portal_repo.save(doc)
         # Test that catalog has current value
         results = cat(SearchableText='Plain Text')
@@ -421,7 +422,7 @@ def test13_revertUpdatesCatalog(self):
         retrieved_data = portal_repo.retrieve(
             doc, 0, preserve=['_Access_contents_information_Permission'])
         retrieved_doc = retrieved_data.object
-        self.assertTrue('Plain text' in retrieved_doc.getText())
+        self.assertTrue('Plain text' in retrieved_doc.text.raw)
         # Test that basic retrieval did not alter the catalog
         results = cat(SearchableText='Plain Text')
         self.assertEqual(len(results), 0)
@@ -435,7 +436,7 @@ def test13_revertUpdatesCatalog(self):
         self.assertEqual(len(results), 0)
         results = cat(SearchableText='Plain Text')
         self.assertEqual(len(results), 1)
-        self.assertEqual(results[0].getObject().getRawText(), 'Plain text')
+        self.assertEqual(results[0].getObject().text.raw, 'Plain text')
 
     def test14_retrieveFolderWithAddedOrDeletedObjects(self):
         portal_repo = self.portal.portal_repository
diff --git a/Products/CMFEditions/tests/test_ModifierRegistryTool.py b/Products/CMFEditions/tests/test_ModifierRegistryTool.py
index 287d31c..22959c2 100644
--- a/Products/CMFEditions/tests/test_ModifierRegistryTool.py
+++ b/Products/CMFEditions/tests/test_ModifierRegistryTool.py
@@ -240,6 +240,8 @@ def test05_registerANonModifier(self):
 
     def test06_modifierAddedToTheCorrectPosition(self):
         portal_modifier = self.portal.portal_modifier
+        for id in list(portal_modifier.objectIds()):
+            portal_modifier.unregister(id)
 
         m1 = SimpleModifier1()
         m2 = SimpleModifier2()
@@ -254,6 +256,8 @@ def test06_modifierAddedToTheCorrectPosition(self):
 
     def test07_unregisterModifer(self):
         portal_modifier = self.portal.portal_modifier
+        for id in list(portal_modifier.objectIds()):
+            portal_modifier.unregister(id)
 
         m1 = SimpleModifier1()
         m2 = SimpleModifier2()
@@ -315,6 +319,8 @@ def test09_conditionContextSetUpCorretcly(self):
     def test10_callingOrder(self):
         global mlog
         portal_modifier = self.portal.portal_modifier
+        for id in list(portal_modifier.objectIds()):
+            portal_modifier.unregister(id)
         doc = self.portal.doc
         doc_copy = deepcopy(aq_base(doc))
 
diff --git a/Products/CMFEditions/tests/test_versions_history_form.py b/Products/CMFEditions/tests/test_versions_history_form.py
index 6cd114f..d4b89b4 100644
--- a/Products/CMFEditions/tests/test_versions_history_form.py
+++ b/Products/CMFEditions/tests/test_versions_history_form.py
@@ -24,13 +24,14 @@
 
 from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
 
+from plone.app.textfield.value import RichTextValue
 from zope.component import provideAdapter
 from zope.interface import Interface
 from zope.publisher.interfaces.browser import IBrowserView
 from Products.Five.browser import BrowserView
 
-_TEXT_INITIAL = 'Initial text.'
-_TEXT_NEW = 'New text.'
+_TEXT_INITIAL = u'Initial text.'
+_TEXT_NEW = u'New text.'
 
 
 class TestVersionsHistoryForm(CMFEditionsBaseTestCase):
@@ -44,7 +45,7 @@ def afterSetUp(self):
             'Document',
             'doc',
             title='Document 1',
-            text=_TEXT_INITIAL,
+            text=RichTextValue(_TEXT_INITIAL, 'text/plain', 'text/plain'),
         )
         self.doc = self.portal.doc
         self.portal_repository.applyVersionControl(
@@ -54,7 +55,7 @@ def afterSetUp(self):
         self.request = self.portal.REQUEST
 
     def test_versions_history_form(self):
-        self.doc.setText(_TEXT_NEW)
+        self.doc.text = RichTextValue(_TEXT_NEW, 'text/plain', 'text/plain')
         self.portal_repository.save(self.doc, comment='save version 1')
 
         html = self._render_versions_history_form(item=self.doc, version_id='0')
diff --git a/setup.py b/setup.py
index 077c0f2..780a420 100644
--- a/setup.py
+++ b/setup.py
@@ -32,10 +32,12 @@
         test=[
             'zope.testing',
             'Products.CMFPlone',
-            'Products.Archetypes',
             'Products.CMFDynamicViewFTI',
             'plone.app.testing',
         ],
+        archetypes=[
+            'Products.Archetypes',
+        ]
     ),
     install_requires=[
         'setuptools',


Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2018-05-08T08:34:08-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFEditions/commit/bbff662bf552818e6d91631f754cae628c31cd08

Add dependency declaration

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index 780a420..38cf3fc 100644
--- a/setup.py
+++ b/setup.py
@@ -30,10 +30,11 @@
     zip_safe=False,
     extras_require=dict(
         test=[
-            'zope.testing',
+            'plone.app.testing',
+            'plone.app.textfield',
             'Products.CMFPlone',
             'Products.CMFDynamicViewFTI',
-            'plone.app.testing',
+            'zope.testing',
         ],
         archetypes=[
             'Products.Archetypes',


Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2018-05-08T08:35:06-04:00
Author: David Glick (davisagli) <david.glick@plone.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/7a3550a587e403f7ceffeb3c67208c1d3eabdf9e

Merge pull request #56 from plone/no-at

Test against plone.app.contenttypes instead of ATContentTypes

Files changed:
M CHANGES.rst
M Products/CMFEditions/tests/base.py
M Products/CMFEditions/tests/test_ATContentTypes.py
M Products/CMFEditions/tests/test_ATReferences.py
M Products/CMFEditions/tests/test_ContentTypes.py
M Products/CMFEditions/tests/test_IntegrationTests.py
M Products/CMFEditions/tests/test_ModifierRegistryTool.py
M Products/CMFEditions/tests/test_versions_history_form.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 22a1af0..2f16dab 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Test against plone.app.contenttypes instead of ATContentTypes.
+  [davisagli]
+
 - *add item here*
 
 
diff --git a/Products/CMFEditions/tests/base.py b/Products/CMFEditions/tests/base.py
index a3005ca..5958a76 100644
--- a/Products/CMFEditions/tests/base.py
+++ b/Products/CMFEditions/tests/base.py
@@ -1,4 +1,33 @@
+from plone.app.testing import IntegrationTesting
+from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.bbb import PloneTestCase
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+
+
+class CMFEditionsFixture(PloneSandboxLayer):
+
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)
+
+    def setUpPloneSite(self, portal):
+        # Disable automatic versioning of core content types
+        for name in ('Document', 'Event', 'Link', 'News Item'):
+            fti = portal.portal_types[name]
+            behaviors = list(fti.behaviors)
+            behaviors.remove('plone.app.versioningbehavior.behaviors.IVersionable')
+            fti.behaviors = tuple(behaviors)
+
+
+CMFEDITIONS_FIXTURE = CMFEditionsFixture()
+CMFEDITIONS_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(CMFEDITIONS_FIXTURE,),
+    name="CMFEditions:Integration",
+)
+
 
 class CMFEditionsBaseTestCase(PloneTestCase):
     """ A base class for Products.CMFEditions testing """
+    layer = CMFEDITIONS_INTEGRATION_TESTING
+
+
+class CMFEditionsATBaseTestCase(PloneTestCase):
+    """A base class for testing CMFEditions with Archetypes"""
diff --git a/Products/CMFEditions/tests/test_ATContentTypes.py b/Products/CMFEditions/tests/test_ATContentTypes.py
index 3cf32b8..9a39608 100644
--- a/Products/CMFEditions/tests/test_ATContentTypes.py
+++ b/Products/CMFEditions/tests/test_ATContentTypes.py
@@ -20,15 +20,13 @@
 # along with CMFEditions; if not, write to the Free Software
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
-"""Test the ATContentTypes content
-"""
-import os
 
 from Products.CMFEditions import PACKAGE_HOME
-from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
+from Products.CMFEditions.tests.base import CMFEditionsATBaseTestCase
+import os
 
 
-class TestATContents(CMFEditionsBaseTestCase):
+class TestATContents(CMFEditionsATBaseTestCase):
 
     def afterSetUp(self):
         self.membership = self.portal.portal_membership
diff --git a/Products/CMFEditions/tests/test_ATReferences.py b/Products/CMFEditions/tests/test_ATReferences.py
index dec1f66..f62d3c5 100644
--- a/Products/CMFEditions/tests/test_ATReferences.py
+++ b/Products/CMFEditions/tests/test_ATReferences.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-#
 
-from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
+from Products.CMFEditions.tests.base import CMFEditionsATBaseTestCase
 
-class TestATReferences(CMFEditionsBaseTestCase):
+
+class TestATReferences(CMFEditionsATBaseTestCase):
 
     def afterSetUp(self):
         # we need to have the Manager role to be able to add things
diff --git a/Products/CMFEditions/tests/test_ContentTypes.py b/Products/CMFEditions/tests/test_ContentTypes.py
index 4d6755d..3eab925 100644
--- a/Products/CMFEditions/tests/test_ContentTypes.py
+++ b/Products/CMFEditions/tests/test_ContentTypes.py
@@ -1,10 +1,13 @@
 # -*- coding: utf-8 -*-
-#
 
+from plone.app.textfield.value import RichTextValue
+from plone.namedfile.file import NamedBlobFile
+from plone.namedfile.file import NamedBlobImage
+from Products.CMFEditions import PACKAGE_HOME
 from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
-
+from Products.CMFPlone.utils import _createObjectByType
 import os
-from Products.CMFEditions import PACKAGE_HOME
+
 
 class TestPloneContents(CMFEditionsBaseTestCase):
 
@@ -14,6 +17,8 @@ def afterSetUp(self):
         self.workflow = self.portal.portal_workflow
         self.portal_repository = self.portal.portal_repository
         self.portal_archivist = self.portal.portal_archivist
+        _createObjectByType('Folder', self.portal, id='folder')
+        self.folder = self.portal.folder
 
     def getPermissionsOfRole(self, role):
         perms = self.portal.permissionsOfRole(role)
@@ -39,68 +44,60 @@ def testDocument(self):
         self.folder.invokeFactory('Document', id='doc')
         portal_repository = self.portal_repository
         content = self.folder.doc
-        content.edit('text/plain','text v1')
-        content.editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='text/plain',
-                              language='content',
-                              rights='content',
-                              )
+        content.text = RichTextValue(u'text v1', 'text/plain', 'text/plain')
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content.edit('text/plain','text v2')
-        content.editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='text/plain',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.text = RichTextValue(u'text v2', 'text/plain', 'text/plain')
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
-        self.assertEqual(obj.EditableBody(), 'text v1')
+        self.assertEqual(obj.text.raw, 'text v1')
         self.metadata_test_one(obj)
         obj = portal_repository.retrieve(content, 1).object
-        self.assertEqual(obj.EditableBody(), 'text v2')
+        self.assertEqual(obj.text.raw, 'text v2')
         self.metadata_test_two(obj)
         portal_repository.revert(content, 0)
-        self.assertEqual(content.EditableBody(), 'text v1')
+        self.assertEqual(content.text.raw, 'text v1')
         self.metadata_test_one(content)
 
     def testNewsItem(self):
         self.folder.invokeFactory('News Item', id='news_one')
         portal_repository = self.portal_repository
         content = self.folder.news_one
-        content.edit('text v1', text_format='text/plain')
-        content.editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='text/plain',
-                              language='content',
-                              rights='content',
-                              )
+        content.text = RichTextValue(u'text v1', 'text/plain', 'text/plain')
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content.edit('text v2', text_format='text/plain')
-        content.editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='text/plain',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.text = RichTextValue(u'text v2', 'text/plain', 'text/plain')
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
-        self.assertEqual(obj.EditableBody(), 'text v1')
+        self.assertEqual(obj.text.raw, 'text v1')
         self.metadata_test_one(obj)
         obj = portal_repository.retrieve(content, 1).object
-        self.assertEqual(obj.EditableBody(), 'text v2')
+        self.assertEqual(obj.text.raw, 'text v2')
         self.metadata_test_two(obj)
         portal_repository.revert(content, 0)
-        self.assertEqual(content.EditableBody(), 'text v1')
+        self.assertEqual(content.text.raw, 'text v1')
         self.metadata_test_one(content)
 
     def testImage(self):
@@ -109,34 +106,30 @@ def testImage(self):
         img1 = open(os.path.join(PACKAGE_HOME, 'tests/images/img1.png'), 'rb').read()
         img2 = open(os.path.join(PACKAGE_HOME, 'tests/images/img2.png'), 'rb').read()
         content = self.folder.image
-        content.edit(file=img1)
-        content.editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='image/png',
-                              language='content',
-                              rights='content',
-                              )
+        content.image = NamedBlobImage(img1, u'img1.png', u'image/png')
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content.edit(file=img2)
-        content.editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='image/png',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.image = NamedBlobImage(img2, u'img2.png', u'image/png')
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
-        self.assertEqual(obj.data, img1)
+        self.assertEqual(obj.image.data, img1)
         self.metadata_test_one(obj)
         obj = portal_repository.retrieve(content, 1).object
-        self.assertEqual(obj.data, img2)
+        self.assertEqual(obj.image.data, img2)
         self.metadata_test_two(obj)
         portal_repository.revert(content, 0)
-        self.assertEqual(content.data, img1)
+        self.assertEqual(content.image.data, img1)
         self.metadata_test_one(content)
 
     def testFile(self):
@@ -145,59 +138,49 @@ def testFile(self):
         file2 = open(os.path.join(PACKAGE_HOME, 'tests/images/img2.png'), 'rb').read()
         portal_repository = self.portal_repository
         content = self.folder.file
-        content.edit(file=file1)
-        content.editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='image/png',
-                              language='content',
-                              rights='content',
-                              )
+        content.file = NamedBlobFile(file1, u'img1.png', u'image/png')
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content.edit(file=file2)
-        content.editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='image/png',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.file = NamedBlobImage(file2, u'img2.png', u'image/png')
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
-        self.assertEqual(obj.data, file1)
+        self.assertEqual(obj.file.data, file1)
         self.metadata_test_one(obj)
         obj = portal_repository.retrieve(content, 1).object
-        self.assertEqual(obj.data, file2)
+        self.assertEqual(obj.file.data, file2)
         self.metadata_test_two(obj)
         portal_repository.revert(content, 0)
-        self.assertEqual(content.data, file1)
+        self.assertEqual(content.file.data, file1)
         self.metadata_test_one(content)
 
     def testFolder(self):
         self.folder.invokeFactory('Image', id='folder')
         portal_repository = self.portal_repository
         content = self.folder.folder
-        # Use private method because webDAV locking is tripping this up
-        # using the public method and ATCT
-        content._editMetadata(title='content',
-                              subject=['content'],
-                              description='content',
-                              contributors='content',
-                              format='image/png',
-                              language='content',
-                              rights='content',
-                              )
+        content.title = u'content'
+        content.subject = [u'content']
+        content.description = u'content'
+        content.contributors = [u'content']
+        content.language = 'content'
+        content.rights = u'content'
         portal_repository.applyVersionControl(content, comment='save no 1')
-        content._editMetadata(title='contentOK',
-                              subject=['contentOK'],
-                              description='contentOK',
-                              contributors='contentOK',
-                              format='image/png',
-                              language='contentOK',
-                              rights='contentOK',
-                              )
+        content.title = u'contentOK'
+        content.subject = [u'contentOK']
+        content.description = u'contentOK'
+        content.contributors = [u'contentOK']
+        content.language = 'contentOK'
+        content.rights = u'contentOK'
         portal_repository.save(content, comment='save no 2')
         obj = portal_repository.retrieve(content, 0).object
         self.metadata_test_one(obj)
diff --git a/Products/CMFEditions/tests/test_IntegrationTests.py b/Products/CMFEditions/tests/test_IntegrationTests.py
index 9e42abe..fbc967c 100644
--- a/Products/CMFEditions/tests/test_IntegrationTests.py
+++ b/Products/CMFEditions/tests/test_IntegrationTests.py
@@ -24,6 +24,7 @@
 
 """
 from Acquisition import aq_base
+from plone.app.textfield.value import RichTextValue
 from Products.CMFCore.indexing import processQueue
 from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
 from ZODB import broken
@@ -407,9 +408,9 @@ def test13_revertUpdatesCatalog(self):
         cat = self.portal.portal_catalog
         doc = self.portal.doc
 
-        doc.edit(text='Plain text')
+        doc.text = RichTextValue(u'Plain text', 'text/plain', 'text/plain')
         portal_repo.applyVersionControl(doc)
-        doc.edit(text='blahblah')
+        doc.text = RichTextValue(u'blahblah', 'text/plain', 'text/plain')
         portal_repo.save(doc)
         # Test that catalog has current value
         results = cat(SearchableText='Plain Text')
@@ -421,7 +422,7 @@ def test13_revertUpdatesCatalog(self):
         retrieved_data = portal_repo.retrieve(
             doc, 0, preserve=['_Access_contents_information_Permission'])
         retrieved_doc = retrieved_data.object
-        self.assertTrue('Plain text' in retrieved_doc.getText())
+        self.assertTrue('Plain text' in retrieved_doc.text.raw)
         # Test that basic retrieval did not alter the catalog
         results = cat(SearchableText='Plain Text')
         self.assertEqual(len(results), 0)
@@ -435,7 +436,7 @@ def test13_revertUpdatesCatalog(self):
         self.assertEqual(len(results), 0)
         results = cat(SearchableText='Plain Text')
         self.assertEqual(len(results), 1)
-        self.assertEqual(results[0].getObject().getRawText(), 'Plain text')
+        self.assertEqual(results[0].getObject().text.raw, 'Plain text')
 
     def test14_retrieveFolderWithAddedOrDeletedObjects(self):
         portal_repo = self.portal.portal_repository
diff --git a/Products/CMFEditions/tests/test_ModifierRegistryTool.py b/Products/CMFEditions/tests/test_ModifierRegistryTool.py
index 287d31c..22959c2 100644
--- a/Products/CMFEditions/tests/test_ModifierRegistryTool.py
+++ b/Products/CMFEditions/tests/test_ModifierRegistryTool.py
@@ -240,6 +240,8 @@ def test05_registerANonModifier(self):
 
     def test06_modifierAddedToTheCorrectPosition(self):
         portal_modifier = self.portal.portal_modifier
+        for id in list(portal_modifier.objectIds()):
+            portal_modifier.unregister(id)
 
         m1 = SimpleModifier1()
         m2 = SimpleModifier2()
@@ -254,6 +256,8 @@ def test06_modifierAddedToTheCorrectPosition(self):
 
     def test07_unregisterModifer(self):
         portal_modifier = self.portal.portal_modifier
+        for id in list(portal_modifier.objectIds()):
+            portal_modifier.unregister(id)
 
         m1 = SimpleModifier1()
         m2 = SimpleModifier2()
@@ -315,6 +319,8 @@ def test09_conditionContextSetUpCorretcly(self):
     def test10_callingOrder(self):
         global mlog
         portal_modifier = self.portal.portal_modifier
+        for id in list(portal_modifier.objectIds()):
+            portal_modifier.unregister(id)
         doc = self.portal.doc
         doc_copy = deepcopy(aq_base(doc))
 
diff --git a/Products/CMFEditions/tests/test_versions_history_form.py b/Products/CMFEditions/tests/test_versions_history_form.py
index 6cd114f..d4b89b4 100644
--- a/Products/CMFEditions/tests/test_versions_history_form.py
+++ b/Products/CMFEditions/tests/test_versions_history_form.py
@@ -24,13 +24,14 @@
 
 from Products.CMFEditions.tests.base import CMFEditionsBaseTestCase
 
+from plone.app.textfield.value import RichTextValue
 from zope.component import provideAdapter
 from zope.interface import Interface
 from zope.publisher.interfaces.browser import IBrowserView
 from Products.Five.browser import BrowserView
 
-_TEXT_INITIAL = 'Initial text.'
-_TEXT_NEW = 'New text.'
+_TEXT_INITIAL = u'Initial text.'
+_TEXT_NEW = u'New text.'
 
 
 class TestVersionsHistoryForm(CMFEditionsBaseTestCase):
@@ -44,7 +45,7 @@ def afterSetUp(self):
             'Document',
             'doc',
             title='Document 1',
-            text=_TEXT_INITIAL,
+            text=RichTextValue(_TEXT_INITIAL, 'text/plain', 'text/plain'),
         )
         self.doc = self.portal.doc
         self.portal_repository.applyVersionControl(
@@ -54,7 +55,7 @@ def afterSetUp(self):
         self.request = self.portal.REQUEST
 
     def test_versions_history_form(self):
-        self.doc.setText(_TEXT_NEW)
+        self.doc.text = RichTextValue(_TEXT_NEW, 'text/plain', 'text/plain')
         self.portal_repository.save(self.doc, comment='save version 1')
 
         html = self._render_versions_history_form(item=self.doc, version_id='0')
diff --git a/setup.py b/setup.py
index 077c0f2..38cf3fc 100644
--- a/setup.py
+++ b/setup.py
@@ -30,12 +30,15 @@
     zip_safe=False,
     extras_require=dict(
         test=[
-            'zope.testing',
+            'plone.app.testing',
+            'plone.app.textfield',
             'Products.CMFPlone',
-            'Products.Archetypes',
             'Products.CMFDynamicViewFTI',
-            'plone.app.testing',
+            'zope.testing',
         ],
+        archetypes=[
+            'Products.Archetypes',
+        ]
     ),
     install_requires=[
         'setuptools',


