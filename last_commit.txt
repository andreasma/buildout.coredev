Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-10-31T08:25:35+01:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/28cd92e3d6f5adac738b068124a387089d72c160

Rename tiles behavior and fields to blocks, migration step (#822)

* Rename tiles behavior and fields to blocks, migration step

* Fix tests

* Improve blocks docs

Files changed:
A docs/source/blocks.rst
A news/821.feature
A src/plone/restapi/profiles/blocks/metadata.xml
A src/plone/restapi/profiles/blocks/types.xml
A src/plone/restapi/profiles/blocks/types/Document.xml
A src/plone/restapi/tests/test_content_blocks.py
A src/plone/restapi/upgrades/to0005.py
M docs/source/index.rst
M docs/source/tiles.rst
M src/plone/restapi/configure.zcml
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/profiles/default/metadata.xml
M src/plone/restapi/serializer/site.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/test_behaviors.py
M src/plone/restapi/tests/test_profile_tiles.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_upgrades.py
M src/plone/restapi/upgrades/configure.zcml
D src/plone/restapi/profiles/tiles/metadata.xml
D src/plone/restapi/profiles/tiles/types.xml
D src/plone/restapi/profiles/tiles/types/Document.xml

b'diff --git a/docs/source/blocks.rst b/docs/source/blocks.rst\nnew file mode 100644\nindex 00000000..49338603\n--- /dev/null\n+++ b/docs/source/blocks.rst\n@@ -0,0 +1,78 @@\n+Volto Blocks support\n+====================\n+\n+.. note::\n+  plone.restapi package gives support for Volto Blocks providing a Dexterity behavior ``plone.restapi.behaviors.IBlocks`` that it is used to enable Volto Blocks in any content type.\n+  Volto then renders the Blocks engine for all the content types that have this behavior enabled.\n+\n+Retrieving blocks on a content object\n+-------------------------------------\n+\n+The ``plone.restapi.behaviors.IBlocks`` has two fields where existing blocks and their data are stored in the object (`blocks`) and the one where the current layout is stored (`blocks_layout`).\n+As they are fields in a Deterity behavior, both fields will be returned in a simple GET as attributes::\n+\n+  GET /plone/my-document HTTP/1.1\n+  Accept: application/json\n+  Authorization: Basic YWRtaW46c2VjcmV0\n+\n+The server responds with a `Status 200` and list all stored blocks on that content object::\n+\n+  GET /plone/my-document HTTP/1.1\n+  Accept: application/json\n+  Authorization: Basic YWRtaW46c2VjcmV0\n+  Content-Type: application/json\n+\n+  {\n+    "@id": "http://localhost:55001/plone/my-document",\n+    ...\n+    "blocks_layout": [\n+      "#title-1",\n+      "#description-1",\n+      "#image-1"\n+    ],\n+    "blocks": {\n+      "#title-1": {\n+        "@type": "title"\n+      },\n+      "#description-1": {\n+        "@type": "Description"\n+      },\n+      "#image-1": {\n+        "@type": "Image",\n+        "image": "<some random url>"\n+      }\n+    }\n+  }\n+\n+blocks objects will contain the tile metadata and the information to required to render them.\n+\n+\n+Adding blocks to an object\n+--------------------------\n+\n+Storing blocks is done also via a default PATCH content operation::\n+\n+  PATCH /plone/my-document HTTP/1.1\n+  Accept: application/json\n+  Authorization: Basic YWRtaW46c2VjcmV0\n+  Content-Type: application/json\n+\n+  {\n+    "blocks_layout": [\n+      "#title-1",\n+      "#description-1",\n+      "#image-1"\n+    ],\n+    "blocks": {\n+      "#title-1": {\n+        "@type": "title"\n+      },\n+      "#description-1": {\n+        "@type": "Description"\n+      },\n+      "#image-1": {\n+        "@type": "Image",\n+        "image": "<some random url>"\n+      }\n+    }\n+  }\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\nindex 32471389..18cc8eaf 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -21,6 +21,7 @@ Contents\n    authentication\n    exploring\n    content\n+   blocks\n    history\n    batching\n    comments\ndiff --git a/docs/source/tiles.rst b/docs/source/tiles.rst\nindex 5d11bf61..846f5557 100644\n--- a/docs/source/tiles.rst\n+++ b/docs/source/tiles.rst\n@@ -3,9 +3,6 @@ Tiles\n \n .. note::\n   The tiles endpoint currently match only partially (the GET endpoints) the default Plone implementation.\n-  The serialization of tiles didn\'t match the Mosaic (and plone.app.blocks) implementation and it\'s done to\n-  not rely on those technologies. The serialization of the tile information on objects are subject to change in\n-  the future to extend or improve features.\n \n A tile in Plone is an HTML snippet that can contain arbitrary content (e.g. text, images, videos).\n \n@@ -72,124 +69,3 @@ The server responds with a JSON schema definition for that particular tile::\n     "title": "Title Tile",\n     "type": "object"\n   }\n-\n-\n-Retrieving tiles on a content object\n-------------------------------------\n-\n-Tiles data are stored in the objects via a Dexterity behavior `plone.tiles`. It has two attributes that stores existing tiles in the object (`tiles`) and the current layout (`tiles_layout`).\n-As it\'s a dexterity behavior, both attributes will be returned in a simple GET::\n-\n-  GET /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-The server responds with a `Status 200` and list all stored tiles on that content object::\n-\n-  GET /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "tiles_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "tiles": {\n-      "#title-1": {\n-        "@type": "title"\n-      },\n-      "#description-1": {\n-        "@type": "Description"\n-      },\n-      "#image-1": {\n-        "@type": "Image",\n-        "image": "<some random url>"\n-      }\n-    }\n-  }\n-\n-Tiles objects will contain the tile metadata and the information to render it.\n-\n-\n-Adding tiles to an object\n--------------------------\n-\n-Storing tiles is done also via a default PATCH content operation::\n-\n-  PATCH /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-  Content-Type: application/json\n-\n-  {\n-    "tiles_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "tiles": {\n-      "#title-1": {\n-        "@type": "title"\n-      },\n-      "#description-1": {\n-        "@type": "Description"\n-      },\n-      "#image-1": {\n-        "@type": "Image",\n-        "image": "<some random url>"\n-      }\n-    }\n-  }\n-\n-If the tile has been added, the server responds with a `204` status code.\n-\n-\n-Proposal on saving tiles layout\n---------------------------------\n-\n-.. note::\n-  This is not implemented (yet) in the tiles_layout field, but it\'s a proposal on\n-  how could look like in the future. For now, we stick with the implementation shown in\n-  previous sections.\n-\n-They might be serialized using this structure::\n-\n-  [\n-    [\n-      id: UUID,\n-      columns: [\n-        {\n-          id: UUID, // column UUID\n-          size: int // the size of the column\n-          rows: [\n-            {\n-              id: UUID, // inner row UUID\n-              cells: [\n-                {\n-                  id: UUID, // cell UUID\n-                  component: string\n-                  content: {\n-                    // tile fields serialization (or tile id referal)\n-                  },\n-                  size: int\n-                },\n-              ]\n-            }\n-          ]\n-        },\n-      ]\n-    ], // row 1\n-    [], // row 2\n-  ]\n-\n-It tries to match the usual way of CSS frameworks to map grid systems. So we have:\n-\n-row (orderables up/down) -> column (resizables on width) -> row -> cell (actual tile content)\n-\n-Rows are orderable vertically, columns resizables horizontally and cells can be\n-moved around to an specific inner row.\ndiff --git a/news/821.feature b/news/821.feature\nnew file mode 100644\nindex 00000000..6760f1b2\n--- /dev/null\n+++ b/news/821.feature\n@@ -0,0 +1,2 @@\n+Rename tiles behavior and fields to blocks, migration step.\n+[timo, sneridagh]\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 435a589c..032c739d 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -46,10 +46,10 @@\n       />\n \n   <genericsetup:registerProfile\n-      name="tiles"\n-      title="plone.restapi tiles"\n-      directory="profiles/tiles"\n-      description="Enables tiles on the Document content type"\n+      name="blocks"\n+      title="Volto Blocks"\n+      directory="profiles/blocks"\n+      description="Enables blocks on the Document content type"\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       />\n \n@@ -83,11 +83,10 @@\n     <include package="plone.behavior" file="meta.zcml"/>\n \n     <plone:behavior\n-        name="plone.tiles"\n-        title="Tiles"\n-        description="Existing tiles on the object and their layout"\n+        name="volto.blocks"\n+        title="Blocks"\n+        description="Enables Volto Blocks support"\n         provides=".behaviors.IBlocks"\n-        for="plone.dexterity.interfaces.IDexterityContent"\n       />\n \n   </configure>\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 68615612..60558848 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -34,25 +34,25 @@ def __call__(self, validate_all=False):\n             data["ordering"]["subset_ids"] = self.context.contentIds()\n         self.handle_ordering(data)\n \n-        # Volto Tiles on the Plone Site root faker\n-        if "tiles" in data:\n-            if not getattr(self.context, "tiles", False):\n+        # Volto Blocks on the Plone Site root faker\n+        if "blocks" in data:\n+            if not getattr(self.context, "blocks", False):\n                 self.context.manage_addProperty(\n-                    "tiles", json.dumps(data["tiles"]), "string"\n+                    "blocks", json.dumps(data["blocks"]), "string"\n                 )  # noqa\n             else:\n                 self.context.manage_changeProperties(\n-                    tiles=json.dumps(data["tiles"])\n+                    blocks=json.dumps(data["blocks"])\n                 )  # noqa\n \n-        if "tiles_layout" in data:\n-            if not getattr(self.context, "tiles_layout", False):\n+        if "blocks_layout" in data:\n+            if not getattr(self.context, "blocks_layout", False):\n                 self.context.manage_addProperty(\n-                    "tiles_layout", json.dumps(data["tiles_layout"]), "string"\n+                    "blocks_layout", json.dumps(data["blocks_layout"]), "string"\n                 )  # noqa\n             else:\n                 self.context.manage_changeProperties(\n-                    tiles_layout=json.dumps(data["tiles_layout"])\n+                    blocks_layout=json.dumps(data["blocks_layout"])\n                 )  # noqa\n \n         if "title" in data:\ndiff --git a/src/plone/restapi/profiles/tiles/metadata.xml b/src/plone/restapi/profiles/blocks/metadata.xml\nsimilarity index 100%\nrename from src/plone/restapi/profiles/tiles/metadata.xml\nrename to src/plone/restapi/profiles/blocks/metadata.xml\ndiff --git a/src/plone/restapi/profiles/tiles/types.xml b/src/plone/restapi/profiles/blocks/types.xml\nsimilarity index 100%\nrename from src/plone/restapi/profiles/tiles/types.xml\nrename to src/plone/restapi/profiles/blocks/types.xml\ndiff --git a/src/plone/restapi/profiles/tiles/types/Document.xml b/src/plone/restapi/profiles/blocks/types/Document.xml\nsimilarity index 100%\nrename from src/plone/restapi/profiles/tiles/types/Document.xml\nrename to src/plone/restapi/profiles/blocks/types/Document.xml\ndiff --git a/src/plone/restapi/profiles/default/metadata.xml b/src/plone/restapi/profiles/default/metadata.xml\nindex 51267ae7..b57fed78 100644\n--- a/src/plone/restapi/profiles/default/metadata.xml\n+++ b/src/plone/restapi/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>0004</version>\n+  <version>0005</version>\n </metadata>\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 243c7213..f308bf82 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -49,9 +49,9 @@ def __call__(self, version=None):\n             "parent": {},\n             "is_folderish": True,\n             "description": self.context.description,\n-            "tiles": json.loads(getattr(self.context, "tiles", "{}")),\n-            "tiles_layout": json.loads(\n-                getattr(self.context, "tiles_layout", "{}")\n+            "blocks": json.loads(getattr(self.context, "blocks", "{}")),\n+            "blocks_layout": json.loads(\n+                getattr(self.context, "blocks_layout", "{}")\n             ),  # noqa\n         }\n \ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex aaaf2165..850c6cea 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -17,7 +17,7 @@ def getNonInstallableProfiles(self):  # pragma: no cover\n         return [\n             u"plone.restapi:performance",\n             u"plone.restapi:testing",\n-            u"plone.restapi:tiles",\n+            u"plone.restapi:blocks",\n             u"plone.restapi:uninstall",\n         ]\n \ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 93ec7037..ad01c533 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -304,15 +304,15 @@ class PloneRestApIBlocksLayer(PloneSandboxLayer):\n     defaultBases = (PLONE_RESTAPI_DX_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, "plone.restapi:tiles")\n+        applyProfile(portal, "plone.restapi:blocks")\n \n \n-PLONE_RESTAPI_TILES_FIXTURE = PloneRestApIBlocksLayer()\n-PLONE_RESTAPI_TILES_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_RESTAPI_TILES_FIXTURE,), name="PloneRestApIBlocksLayer:Integration"\n+PLONE_RESTAPI_BLOCKS_FIXTURE = PloneRestApIBlocksLayer()\n+PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE,), name="PloneRestApIBlocksLayer:Integration"\n )\n-PLONE_RESTAPI_TILES_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_RESTAPI_TILES_FIXTURE, z2.ZSERVER_FIXTURE),\n+PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_RESTAPI_BLOCKS_FIXTURE, z2.ZSERVER_FIXTURE),\n     name="PloneRestApIBlocksLayer:Functional",\n )\n \ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex 3dabbdc5..bd067536 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -15,6 +15,8 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone/", \n   "@type": "Plone Site", \n+  "blocks": {}, \n+  "blocks_layout": {}, \n   "description": "", \n   "id": "plone", \n   "is_folderish": true, \n@@ -29,7 +31,5 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n-  "tiles": {}, \n-  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 66922a5e..e7ef979f 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -15,6 +15,8 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone", \n   "@type": "Plone Site", \n+  "blocks": {}, \n+  "blocks_layout": {}, \n   "description": "", \n   "id": "plone", \n   "is_folderish": true, \n@@ -29,7 +31,5 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n-  "tiles": {}, \n-  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_behaviors.py b/src/plone/restapi/tests/test_behaviors.py\nindex c6d51352..485dd3e4 100644\n--- a/src/plone/restapi/tests/test_behaviors.py\n+++ b/src/plone/restapi/tests/test_behaviors.py\n@@ -11,7 +11,7 @@\n import unittest\n \n \n-class TestTilesBehavior(unittest.TestCase):\n+class TestBlocksBehavior(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n@@ -20,31 +20,31 @@ def setUp(self):\n         self.request = self.layer["request"]\n         login(self.portal, TEST_USER_NAME)\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        fti = DexterityFTI("tiledfolder")\n-        self.portal.portal_types._setObject("tiledfolder", fti)\n+        fti = DexterityFTI("blocksfolder")\n+        self.portal.portal_types._setObject("blocksfolder", fti)\n         fti.klass = "plone.dexterity.content.Container"\n-        fti.behaviors = ("plone.tiles",)\n+        fti.behaviors = ("plone.restapi.behaviors.IBlocks",)\n         self.fti = fti\n         alsoProvides(self.request, IBlocks)\n \n     def test_basic_fields(self):\n         self.portal.invokeFactory(\n-            "tiledfolder", id="tiledfolder", title=u"Folder with tiles"\n+            "blocksfolder", id="blocksfolder", title=u"Folder with blocks"\n         )\n \n-        self.portal["tiledfolder"].tiles = {\n+        self.portal["blocksfolder"].blocks = {\n             "uuid1": {"@type": "title"},\n             "uuid2": {"@type": "description"},\n         }\n \n-        self.portal["tiledfolder"].tiles_layout = {\n+        self.portal["blocksfolder"].blocks_layout = {\n             "uuid1": {"@type": "title"},\n             "uuid2": {"@type": "description"},\n         }\n \n     def test_behavior_provides(self):\n         self.portal.invokeFactory(\n-            "tiledfolder", id="tiledfolder", title=u"Folder with tiles"\n+            "blocksfolder", id="blocksfolder", title=u"Folder with blocks"\n         )\n \n-        IBlocks.providedBy(self.portal["tiledfolder"])\n+        IBlocks.providedBy(self.portal["blocksfolder"])\ndiff --git a/src/plone/restapi/tests/test_content_blocks.py b/src/plone/restapi/tests/test_content_blocks.py\nnew file mode 100644\nindex 00000000..a0e2d4e4\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_content_blocks.py\n@@ -0,0 +1,99 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.utils import createContentInContainer\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from zope.component import queryUtility\n+\n+import transaction\n+import unittest\n+\n+\n+class TestContentBlocks(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        fti = queryUtility(IDexterityFTI, name="Document")\n+        behavior_list = [a for a in fti.behaviors]\n+        behavior_list.append("plone.restapi.behaviors.IBlocks")\n+        behavior_list.append("plone.leadimage")\n+        fti.behaviors = tuple(behavior_list)\n+\n+        self.doc = createContentInContainer(\n+            self.portal, u"Document", id=u"doc", title=u"A document"\n+        )\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_patch_blocks_list(self):\n+        response = self.api_session.patch(\n+            "/doc",\n+            json={\n+                "blocks": {\n+                    "uuid1": {"@type": "title"},\n+                    "uuid2": {"@type": "description"},\n+                }\n+            },\n+        )\n+\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/doc")\n+        response = response.json()\n+\n+        self.assertEqual(\n+            response["blocks"],\n+            {"uuid1": {"@type": "title"}, "uuid2": {"@type": "description"}},\n+        )\n+\n+    def test_patch_blocks_layout(self):\n+        response = self.api_session.patch(\n+            "/doc", json={"blocks_layout": {"items": ["#uuid1", "#uuid2"]}}\n+        )\n+\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/doc")\n+        response = response.json()\n+\n+        self.assertEqual(response["blocks_layout"], {"items": ["#uuid1", "#uuid2"]})\n+\n+    def test_get_blocks_layout_schema(self):\n+        response = self.api_session.get("/@types/Document")\n+\n+        self.assertEqual(response.status_code, 200)\n+        response = response.json()\n+\n+    # These are not failing because the patch operations doesn\'t validate\n+    # fields right now\n+    # def test_patch_blocks_list_wrong_type(self):\n+    #     response = self.api_session.patch(\n+    #         \'/doc\',\n+    #         json={\n+    #             "blocks": [{\'uuid1\': {\'@type\': \'title\'}}]\n+    #         })\n+    #     self.assertEqual(response.status_code, 500)\n+\n+    # def test_patch_blocks_layout_wrong_type(self):\n+    #     response = self.api_session.patch(\n+    #         \'/doc\',\n+    #         json={\n+    #             "blocks_layout": {\'uuid1\': {\'@type\': \'title\'}}\n+    #         })\n+    #     self.assertEqual(response.status_code, 500)\ndiff --git a/src/plone/restapi/tests/test_profile_tiles.py b/src/plone/restapi/tests/test_profile_tiles.py\nindex b0412081..98d55a88 100644\n--- a/src/plone/restapi/tests/test_profile_tiles.py\n+++ b/src/plone/restapi/tests/test_profile_tiles.py\n@@ -4,15 +4,15 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.behaviors import IBlocks\n-from plone.restapi.testing import PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n from Products.CMFCore.utils import getToolByName\n \n import unittest\n \n \n-class TestProfileTiles(unittest.TestCase):\n+class TestProfileBlocks(unittest.TestCase):\n \n-    layer = PLONE_RESTAPI_TILES_INTEGRATION_TESTING\n+    layer = PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n \n     def setUp(self):\n         self.app = self.layer["app"]\n@@ -21,11 +21,11 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n         login(self.portal, SITE_OWNER_NAME)\n \n-    def test_document_type_has_tiles_behavior_enabled(self):\n+    def test_document_type_has_blocks_behavior_enabled(self):\n         self.portal.invokeFactory(\n-            "Document", id="tileddoc", title="Document with Tiles"\n+            "Document", id="blocksdoc", title="Document with blocks"\n         )\n-        IBlocks.providedBy(self.portal["tileddoc"])\n+        IBlocks.providedBy(self.portal["blocksdoc"])\n \n     def test_plone_restapi_base_profile_applied(self):\n         uf = getToolByName(self.portal, "acl_users")\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 2b529399..3c6875ea 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -330,25 +330,25 @@ def test_serialize_returns_site_root_common(self):\n         self.assertIn("title", self.serialize(self.portal))\n         self.assertIn("description", self.serialize(self.portal))\n \n-    def test_serialize_returns_site_root_opt_in_tiles_not_present(self):\n-        self.assertEqual(self.serialize(self.portal)["tiles"], {})\n-        self.assertEqual(self.serialize(self.portal)["tiles_layout"], {})\n+    def test_serialize_returns_site_root_opt_in_blocks_not_present(self):\n+        self.assertEqual(self.serialize(self.portal)["blocks"], {})\n+        self.assertEqual(self.serialize(self.portal)["blocks_layout"], {})\n \n-    def test_serialize_returns_site_root_opt_in_tiles_present(self):\n-        tiles = {\n+    def test_serialize_returns_site_root_opt_in_blocks_present(self):\n+        blocks = {\n             "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\n             "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n         }\n-        tiles_layout = {\n+        blocks_layout = {\n             "items": [\n                 "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n                 "0358abe2-b4f1-463d-a279-a63ea80daf19",\n             ]\n         }\n-        self.portal.manage_addProperty("tiles", json.dumps(tiles), "string")\n+        self.portal.manage_addProperty("blocks", json.dumps(blocks), "string")\n         self.portal.manage_addProperty(\n-            "tiles_layout", json.dumps(tiles_layout), "string"\n+            "blocks_layout", json.dumps(blocks_layout), "string"\n         )\n \n-        self.assertEqual(self.serialize(self.portal)["tiles"], tiles)\n-        self.assertEqual(self.serialize(self.portal)["tiles_layout"], tiles_layout)\n+        self.assertEqual(self.serialize(self.portal)["blocks"], blocks)\n+        self.assertEqual(self.serialize(self.portal)["blocks_layout"], blocks_layout)\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 86a823af..2819d842 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -48,7 +48,6 @@ def setUp(self):\n \n         fti = queryUtility(IDexterityFTI, name="Document")\n         behavior_list = [a for a in fti.behaviors]\n-        behavior_list.append("plone.tiles")\n         behavior_list.append("plone.leadimage")\n         fti.behaviors = tuple(behavior_list)\n \n@@ -93,60 +92,3 @@ def test_get_tile(self):\n         self.assertEqual(response["title"], u"Sample tile")\n         self.assertEqual(response["properties"]["title"]["title"], u"Title")\n         self.assertEqual(response["properties"]["title"]["type"], u"string")\n-\n-    def test_patch_tiles_list(self):\n-        response = self.api_session.patch(\n-            "/doc",\n-            json={\n-                "blocks": {\n-                    "uuid1": {"@type": "title"},\n-                    "uuid2": {"@type": "description"},\n-                }\n-            },\n-        )\n-\n-        self.assertEqual(response.status_code, 204)\n-\n-        response = self.api_session.get("/doc")\n-        response = response.json()\n-\n-        self.assertEqual(\n-            response["blocks"],\n-            {"uuid1": {"@type": "title"}, "uuid2": {"@type": "description"}},\n-        )\n-\n-    def test_patch_blocks_layout(self):\n-        response = self.api_session.patch(\n-            "/doc", json={"blocks_layout": {"items": ["#uuid1", "#uuid2"]}}\n-        )\n-\n-        self.assertEqual(response.status_code, 204)\n-\n-        response = self.api_session.get("/doc")\n-        response = response.json()\n-\n-        self.assertEqual(response["blocks_layout"], {"items": ["#uuid1", "#uuid2"]})\n-\n-    def test_get_tiles_layout_schema(self):\n-        response = self.api_session.get("/@types/Document")\n-\n-        self.assertEqual(response.status_code, 200)\n-        response = response.json()\n-\n-    # These are not failing because the patch operations doesn\'t validate\n-    # fields right now\n-    # def test_patch_tiles_list_wrong_type(self):\n-    #     response = self.api_session.patch(\n-    #         \'/doc\',\n-    #         json={\n-    #             "tiles": [{\'uuid1\': {\'@type\': \'title\'}}]\n-    #         })\n-    #     self.assertEqual(response.status_code, 500)\n-\n-    # def test_patch_tiles_layout_wrong_type(self):\n-    #     response = self.api_session.patch(\n-    #         \'/doc\',\n-    #         json={\n-    #             "tiles_layout": {\'uuid1\': {\'@type\': \'title\'}}\n-    #         })\n-    #     self.assertEqual(response.status_code, 500)\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 5cb9ba40..86dd36f2 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -52,12 +52,12 @@ def deserialize(self, body="{}", validate_all=False, context=None):\n         deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n-    def test_opt_in_tiles_deserializer(self):\n-        tiles = {\n+    def test_opt_in_blocks_deserializer(self):\n+        blocks = {\n             "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\n             "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n         }\n-        tiles_layout = {\n+        blocks_layout = {\n             "items": [\n                 "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n                 "0358abe2-b4f1-463d-a279-a63ea80daf19",\n@@ -65,10 +65,10 @@ def test_opt_in_tiles_deserializer(self):\n         }\n \n         self.deserialize(\n-            body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n-                json.dumps(tiles), json.dumps(tiles_layout)\n+            body=\'{{"blocks": {}, "blocks_layout": {}}}\'.format(\n+                json.dumps(blocks), json.dumps(blocks_layout)\n             )\n         )\n \n-        self.assertEqual(tiles, json.loads(self.portal.tiles))\n-        self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\n+        self.assertEqual(blocks, json.loads(self.portal.blocks))\n+        self.assertEqual(blocks_layout, json.loads(self.portal.blocks_layout))\ndiff --git a/src/plone/restapi/tests/test_upgrades.py b/src/plone/restapi/tests/test_upgrades.py\nindex b15ac6b3..9319d008 100644\n--- a/src/plone/restapi/tests/test_upgrades.py\n+++ b/src/plone/restapi/tests/test_upgrades.py\n@@ -34,3 +34,10 @@ def test_run_migration_profile_to_0004(self):\n         portal_setup = getToolByName(self.portal, "portal_setup")\n         assign_get_users_permission(portal_setup)\n         self.assertTrue(True)\n+\n+    def test_run_migration_profile_to_0005(self):\n+        from plone.restapi.upgrades.to0005 import rename_tiles_to_blocks\n+\n+        portal_setup = getToolByName(self.portal, "portal_setup")\n+        rename_tiles_to_blocks(portal_setup)\n+        self.assertTrue(True)\ndiff --git a/src/plone/restapi/upgrades/configure.zcml b/src/plone/restapi/upgrades/configure.zcml\nindex e6f76815..32e03841 100644\n--- a/src/plone/restapi/upgrades/configure.zcml\n+++ b/src/plone/restapi/upgrades/configure.zcml\n@@ -41,4 +41,13 @@\n         provides="Products.GenericSetup.interfaces.EXTENSION"\n         />\n \n+    <genericsetup:upgradeStep\n+        title="Rename tiles and tiles_layout fields from Tiles behavior to blocks"\n+        description=""\n+        source="0004"\n+        destination="0005"\n+        handler="plone.restapi.upgrades.to0005.rename_tiles_to_blocks"\n+        profile="plone.restapi:default"\n+        />\n+\n </configure>\ndiff --git a/src/plone/restapi/upgrades/to0005.py b/src/plone/restapi/upgrades/to0005.py\nnew file mode 100644\nindex 00000000..782fa6e4\n--- /dev/null\n+++ b/src/plone/restapi/upgrades/to0005.py\n@@ -0,0 +1,51 @@\n+# -*- coding: utf-8 -*-\n+from plone import api\n+from zope.component import queryUtility\n+from plone.dexterity.interfaces import IDexterityFTI\n+\n+import logging\n+\n+logger = logging.getLogger(__name__)\n+\n+OLD_BEHAVIOR_NAME = "plone.restapi.behaviors.ITiles"\n+SHORT_OLD_BEHAVIOR_NAME = "plone.tiles"\n+NEW_BEHAVIOR_NAME = "plone.restapi.behaviors.IBlocks"\n+\n+\n+def rename_tiles_to_blocks(setup_context):\n+    """Rename tiles and tiles_layout fields from Tiles behavior to blocks and blocks_layout\n+    """\n+    pt = api.portal.get_tool("portal_types")\n+\n+    types_with_tiles_behavior = []\n+\n+    for _type in pt.objectIds():\n+        fti = queryUtility(IDexterityFTI, name=_type)\n+        if fti and OLD_BEHAVIOR_NAME in fti.behaviors:\n+            types_with_tiles_behavior.append(_type)\n+            new_fti = [\n+                currentbehavior\n+                for currentbehavior in fti.behaviors\n+                if currentbehavior != OLD_BEHAVIOR_NAME\n+            ]\n+            new_fti.append(NEW_BEHAVIOR_NAME)\n+            fti.behaviors = tuple(new_fti)\n+            logger.info("Migrated behavior of {} type".format(_type))\n+\n+        # In case we used the short behavior name\n+        if fti and SHORT_OLD_BEHAVIOR_NAME in fti.behaviors:\n+            types_with_tiles_behavior.append(_type)\n+            new_fti = [\n+                currentbehavior\n+                for currentbehavior in fti.behaviors\n+                if currentbehavior != SHORT_OLD_BEHAVIOR_NAME\n+            ]\n+            new_fti.append(NEW_BEHAVIOR_NAME)\n+            fti.behaviors = tuple(new_fti)\n+            logger.info("Migrated behavior of {} type".format(_type))\n+\n+    for brain in api.content.find(portal_type=types_with_tiles_behavior):\n+        obj = brain.getObject()\n+        obj.blocks = getattr(obj, "tiles", {})\n+        obj.blocks_layout = getattr(obj, "tiles_layout", {"items": []})\n+        logger.info("Migrated fields of content object: {}".format(obj.absolute_url()))\n'

