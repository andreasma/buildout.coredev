Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2019-06-18T22:52:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/a1738b616338dc0e0800cfd8dec726c2d69a872f

accept to have a broken obejct w/o aq_parent

Files changed:
A news/72.bugfix
M plone/app/linkintegrity/tests/test_references.py

b'diff --git a/news/72.bugfix b/news/72.bugfix\nnew file mode 100644\nindex 0000000..07bb661\n--- /dev/null\n+++ b/news/72.bugfix\n@@ -0,0 +1,2 @@\n+Accept to have a broken object w/o aq_parent in test.\n+[jensens]\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex f69e903..ba52035 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -114,9 +114,18 @@ def test_broken_references(self):\n                          [self.portal.doc1a])\n \n         # Now delete the target item, suppress events and test again,\n-        # the reference should be gone now.\n+        # The reference should be a ghost not in any folder anymore.\n+        # check if it has no acquition parent!\n         self.portal._delObject(doc1a.id, suppress_events=True)\n-        self.assertEqual([l.to_object for l in getOutgoingLinks(doc1)], [None])\n+        objs = [l.to_object for l in getOutgoingLinks(doc1)]\n+        self.assertEqual(len(objs), 1)\n+        obj = objs[0]\n+        if obj is not None:\n+            # Plone with fixed five.intid\n+            # if object is None: all fine as well.\n+            self.assertEqual(obj.portal_type, \'Document\')\n+            _marker = dict()\n+            self.assertEqual(getattr(obj, \'aq_parent\', _marker), _marker)\n \n     def test_relative_upwards_link_generates_matching_reference(self):\n         doc1 = self.portal.doc1\n@@ -187,7 +196,7 @@ def test_delete_confirmation_for_any_reference(self):\n \n         # Test, if relation is present in the relation catalog\n         catalog = getUtility(ICatalog)\n-        rels = list(catalog.findRelations({\'to_id\':  to_id}))\n+        rels = list(catalog.findRelations({\'to_id\': to_id}))\n         self.assertEqual(len(rels), 1)\n \n         # Test, if delete_confirmation_info shows also other relations than\n@@ -204,6 +213,7 @@ class ReferenceGenerationDXTestCase(\n ):\n     """Reference generation testcase for dx content types"""\n \n+\n if six.PY2:\n     from plone.app.linkintegrity.tests.base import ATBaseTestCase\n \n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2019-06-19T00:14:22+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/0b1a2d0c9b315f6094d2d8705cfd0711c72895f0

Merge pull request #72 from plone/fix-tests-with-five-intid

accept to have a broken object w/o aq_parent

Files changed:
A news/72.bugfix
M plone/app/linkintegrity/tests/test_references.py

b'diff --git a/news/72.bugfix b/news/72.bugfix\nnew file mode 100644\nindex 0000000..07bb661\n--- /dev/null\n+++ b/news/72.bugfix\n@@ -0,0 +1,2 @@\n+Accept to have a broken object w/o aq_parent in test.\n+[jensens]\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex f69e903..ba52035 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -114,9 +114,18 @@ def test_broken_references(self):\n                          [self.portal.doc1a])\n \n         # Now delete the target item, suppress events and test again,\n-        # the reference should be gone now.\n+        # The reference should be a ghost not in any folder anymore.\n+        # check if it has no acquition parent!\n         self.portal._delObject(doc1a.id, suppress_events=True)\n-        self.assertEqual([l.to_object for l in getOutgoingLinks(doc1)], [None])\n+        objs = [l.to_object for l in getOutgoingLinks(doc1)]\n+        self.assertEqual(len(objs), 1)\n+        obj = objs[0]\n+        if obj is not None:\n+            # Plone with fixed five.intid\n+            # if object is None: all fine as well.\n+            self.assertEqual(obj.portal_type, \'Document\')\n+            _marker = dict()\n+            self.assertEqual(getattr(obj, \'aq_parent\', _marker), _marker)\n \n     def test_relative_upwards_link_generates_matching_reference(self):\n         doc1 = self.portal.doc1\n@@ -187,7 +196,7 @@ def test_delete_confirmation_for_any_reference(self):\n \n         # Test, if relation is present in the relation catalog\n         catalog = getUtility(ICatalog)\n-        rels = list(catalog.findRelations({\'to_id\':  to_id}))\n+        rels = list(catalog.findRelations({\'to_id\': to_id}))\n         self.assertEqual(len(rels), 1)\n \n         # Test, if delete_confirmation_info shows also other relations than\n@@ -204,6 +213,7 @@ class ReferenceGenerationDXTestCase(\n ):\n     """Reference generation testcase for dx content types"""\n \n+\n if six.PY2:\n     from plone.app.linkintegrity.tests.base import ATBaseTestCase\n \n'

