Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-05-05T12:34:39+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.caching/commit/fd5e08255ff26f1de418f3f2a3c3a61c40da6481

fix import for py3

Files changed:
M plone/app/caching/operations/utils.py

b'diff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py\nindex b659184..dd8a911 100644\n--- a/plone/app/caching/operations/utils.py\n+++ b/plone/app/caching/operations/utils.py\n@@ -7,7 +7,7 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import ISiteRoot\n-from thread import allocate_lock\n+from six.moves._thread import allocate_lock\n from z3c.caching.interfaces import ILastModified\n from zope.annotation.interfaces import IAnnotations\n from zope.component import getUtility\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-05-08T16:02:34+01:00
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.app.caching/commit/c0f8103eebaa424bb001b4ee8b1eac7871de79a3

Change list.sort calls to use key functions rather than cmp functions, for Python3 compatibility

Files changed:
M CHANGES.rst
M plone/app/caching/browser/controlpanel.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 43fe9f8..cc36bee 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Python 3 support\n+  [pbauer, MatthewWilkes]\n \n Bug fixes:\n \ndiff --git a/plone/app/caching/browser/controlpanel.py b/plone/app/caching/browser/controlpanel.py\nindex baa103f..0936e04 100644\n--- a/plone/app/caching/browser/controlpanel.py\n+++ b/plone/app/caching/browser/controlpanel.py\n@@ -28,6 +28,7 @@\n from zope.ramcache.interfaces.ram import IRAMCache\n \n import datetime\n+from operator import itemgetter\n import re\n import six\n \n@@ -358,7 +359,7 @@ def ruleTypes(self):\n                               title=type_.title or type_.name,\n                               description=type_.description,\n                               safeName=type_.name.replace('.', '-'), ))\n-        types.sort(lambda x, y: cmp(x['title'], y['title']))\n+        types.sort(key=itemgetter('title'))\n         return types\n \n     # Safe access to the main mappings, which may be None - we want to treat\n@@ -429,8 +430,7 @@ def contentTypesLookup(self):\n     @memoize\n     def operationTypes(self):\n         operations = [v for k, v in self.operationTypesLookup.items()]\n-        operations.sort(lambda x, y: (\n-            cmp(x['sort'], y['sort']) or cmp(x['title'], y['title'])))\n+        operations.sort(key=lambda operation:(operation['sort'], operation['title']))\n         return operations\n \n     @property\n@@ -443,7 +443,7 @@ def contentTypes(self):\n                 description=info['description'],\n             ) for name, info in self.contentTypesLookup.items()\n         ]\n-        types.sort(lambda x, y: cmp(x['title'], y['title']))\n+        types.sort(key=itemgetter('title'))\n         return types\n \n     # We store template and content type mappings as template -> ruleset and\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-05-25T09:56:02+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.caching/commit/8ee51127dc1fafb8ea2252a11fca041d292da349

fix mosts tests in python3

Files changed:
M plone/app/caching/purge.py
M plone/app/caching/testing.py
M plone/app/caching/tests/test_lastmodified.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py

b"diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex b9bb821..beda585 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -214,7 +214,7 @@ def fieldFilter():\n                     yield '{0}/@@download/{1}'.format(prefix, field)\n             else:\n                 filename = value.filename\n-                if isinstance(filename, six.text_type):\n+                if six.PY2 and isinstance(filename, six.text_type):\n                     filename = filename.encode('utf-8')\n                 yield '{0}/view/{1}.{2}/@@download/{3}'.format(\n                     prefix, '++widget++form.widgets', field, filename)\ndiff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py\nindex 1a4a7d5..3a810ab 100644\n--- a/plone/app/caching/testing.py\n+++ b/plone/app/caching/testing.py\n@@ -77,5 +77,5 @@ def tearDownZope(self, app):\n \n def getToken(username):\n     ring = _getKeyring(username)\n-    secret = ring.random()\n-    return hmac.new(secret, username, sha).hexdigest()\n+    secret = ring.random().encode('utf8')\n+    return hmac.new(secret, username.encode('utf8'), sha).hexdigest()\ndiff --git a/plone/app/caching/tests/test_lastmodified.py b/plone/app/caching/tests/test_lastmodified.py\nindex 3b5739e..ed0225d 100644\n--- a/plone/app/caching/tests/test_lastmodified.py\n+++ b/plone/app/caching/tests/test_lastmodified.py\n@@ -87,7 +87,7 @@ class Dummy(Persistent, Explicit):\n     def test_OFSFileLastModified_File(self):\n         from OFS.Image import File\n \n-        dummy = File('dummy', 'Dummy', 'data')\n+        dummy = File('dummy', 'Dummy', b'data')\n         self.assertIsNone(ILastModified(dummy)())\n \n         timestamp = 987654321.0  # time stamp (in UTC)\n@@ -104,7 +104,7 @@ def test_OFSFileLastModified_File(self):\n     def test_OFSFileLastModified_Image(self):\n         from OFS.Image import Image\n \n-        dummy = Image('dummy', 'Dummy', 'data')\n+        dummy = Image('dummy', 'Dummy', b'data')\n         self.assertIsNone(ILastModified(dummy)())\n \n         timestamp = 987654321.0  # time stamp (in UTC)\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex a449706..525af1b 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -39,7 +39,7 @@ def test_image():\n         'plone.app.caching.tests', 'test.gif')\n     filename = os.path.join(os.path.dirname(__file__), u'test.gif')\n     return NamedBlobImage(\n-        data=open(filename, 'r').read(),\n+        data=open(filename, 'rb').read(),\n         filename=filename,\n     )\n \ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex a92f3c4..e06154d 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -36,7 +36,7 @@ def test_image():\n         'plone.app.caching.tests', 'test.gif')\n     filename = os.path.join(os.path.dirname(__file__), u'test.gif')\n     return NamedBlobImage(\n-        data=open(filename, 'r').read(),\n+        data=open(filename, 'rb').read(),\n         filename=filename,\n     )\n \ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex dc46aa3..db06ea9 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -4,7 +4,7 @@\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.purge import ContentPurgePaths\n from plone.app.caching.purge import DiscussionItemPurgePaths\n-from plone.app.caching.purge import ObjectFieldPurgePaths\n+from plone.app.caching.purge import HAVE_AT\n from plone.app.caching.purge import purgeOnModified\n from plone.app.caching.purge import purgeOnMovedOrRemoved\n from plone.app.caching.purge import ScalesPurgePaths\n@@ -18,8 +18,6 @@\n from plone.registry.fieldfactory import persistentFieldAdapter\n from plone.registry.interfaces import IRegistry\n from plone.testing.zca import UNIT_TESTING\n-from Products.Archetypes import atapi\n-from Products.Archetypes.Schema.factory import instanceSchemaFactory\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import IDiscussionResponse\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n@@ -41,12 +39,17 @@\n \n import unittest\n \n+if HAVE_AT:\n+    from plone.app.caching.purge import ObjectFieldPurgePaths\n+    from Products.Archetypes import atapi\n+    from Products.Archetypes.Schema.factory import instanceSchemaFactory\n+\n \n def getData(filename):\n     from os.path import dirname, join\n     from plone.app.caching import tests\n     filename = join(dirname(tests.__file__), filename)\n-    data = open(filename).read()\n+    data = open(filename, 'rb').read()\n     return data\n \n \n@@ -312,6 +315,7 @@ def getDiscussionThread(self, item):\n         self.assertEqual(['/purgeme'], list(purge.getAbsolutePaths()))\n \n \n+@unittest.skipUnless(HAVE_AT, 'Only run with AT')\n class TestObjectFieldPurgePaths(unittest.TestCase):\n \n     maxDiff = None\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-05-25T18:22:51+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.caching/commit/321425026e252aebb6edc6e353b91a9c55e0be0e

fix ramcache for py3

Files changed:
M plone/app/caching/operations/ramcache.py
M plone/app/caching/operations/utils.py

b'diff --git a/plone/app/caching/operations/ramcache.py b/plone/app/caching/operations/ramcache.py\nindex 9947af0..83861a6 100644\n--- a/plone/app/caching/operations/ramcache.py\n+++ b/plone/app/caching/operations/ramcache.py\n@@ -40,11 +40,11 @@ def transformBytes(self, result, encoding):\n \n     def transformIterable(self, result, encoding):\n         if self.responseIsSuccess() and IRAMCached.providedBy(self.request):\n-            result = \'\'.join(result)\n+            result = b\'\'.join(result)\n             storeResponseInRAMCache(self.request, self.request.response,\n                                     result)\n             # as we have iterated the iterable, we must return a new one\n-            return iter(result)\n+            return iter([result])\n         return None\n \n     def responseIsSuccess(self):\ndiff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py\nindex dd8a911..6a244ba 100644\n--- a/plone/app/caching/operations/utils.py\n+++ b/plone/app/caching/operations/utils.py\n@@ -784,7 +784,7 @@ def storeResponseInRAMCache(\n     potentially another fix but I doubt long term it\'s ever the right thing to\n     do.\n     """\n-    if result == \'\':\n+    if not result:\n         return\n \n     status = response.getStatus()\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-05-25T18:23:03+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.caching/commit/0224a5d395da651bf62fae65ffc0d6d70ecda657

fix some more tests

Files changed:
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py

b'diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 525af1b..b3897eb 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -17,7 +17,6 @@\n from plone.testing.z2 import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n-from six.moves import cStringIO as StringIO\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n \n@@ -26,6 +25,7 @@\n import dateutil.tz\n import os\n import pkg_resources\n+import six\n import unittest\n \n \n@@ -89,7 +89,7 @@ def setUp(self):\n     def tearDown(self):\n         setRequest(None)\n \n-    def test_composite_views(self):\n+    def test_composite_viewsxx(self):\n         # This is a clone of the same test for \'without-caching-proxy\'\n         # Can we just call that test from this context?\n \n@@ -213,11 +213,12 @@ def test_composite_views(self):\n         browser.open(self.portal[\'f1\'][\'d1\'].absolute_url())\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request the anonymous folder\n         now = stable_now()\n         browser = Browser(self.app)\n+        browser.handleErrors = False\n         browser.open(self.portal[\'f1\'].absolute_url())\n         self.assertEqual(\'plone.content.folderView\',\n                          browser.headers[\'X-Cache-Rule\'])\n@@ -280,7 +281,7 @@ def test_composite_views(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Edit the page to update the etag\n         testText2 = \'Testing... body two\'\n@@ -373,7 +374,7 @@ def test_content_feeds(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request the authenticated rss feed\n         now = stable_now()\n@@ -503,7 +504,7 @@ def test_content_files(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request an image scale\n         now = stable_now()\n@@ -554,7 +555,7 @@ def test_resources(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request a large datafile (over 64K) to test files that use\n         # the "response.write()" function to initiate a streamed response.\n@@ -562,9 +563,11 @@ def test_resources(self):\n         # large OFS.Image.Image, large non-blog ATImages/ATFiles, and\n         # large Resource Registry cooked files, which all use the same\n         # method to initiate a streamed response.\n-        s = \'a\' * (1 << 16) * 3\n-        self.portal.manage_addFile(\'bigfile\', file=StringIO(\n-            s), content_type=\'application/octet-stream\')\n+        s = b\'a\' * (1 << 16) * 3\n+        self.portal.manage_addFile(\n+            \'bigfile\',\n+            file=six.BytesIO(s),\n+            content_type=\'application/octet-stream\')\n \n         import transaction\n         transaction.commit()\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex e06154d..e9a8634 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -14,7 +14,6 @@\n from plone.testing.z2 import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n-from six.moves import cStringIO as StringIO\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n \n@@ -23,6 +22,7 @@\n import dateutil.tz\n import os\n import pkg_resources\n+import six\n import unittest\n \n \n@@ -214,7 +214,7 @@ def test_composite_views(self):\n         browser.open(self.portal[\'f1\'][\'d1\'].absolute_url())\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request the anonymous folder\n         now = stable_now()\n@@ -281,7 +281,7 @@ def test_composite_views(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Edit the page to update the etag\n         testText2 = \'Testing... body two\'\n@@ -367,7 +367,7 @@ def test_content_feeds(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request the authenticated rss feed\n         now = stable_now()\n@@ -453,7 +453,7 @@ def test_content_files(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request an image scale\n         now = stable_now()\n@@ -502,7 +502,7 @@ def test_resources(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request a large datafile (over 64K) to test files that use\n         # the "response.write()" function to initiate a streamed response.\n@@ -510,9 +510,11 @@ def test_resources(self):\n         # large OFS.Image.Image, large non-blog ATImages/ATFiles, and\n         # large Resource Registry cooked files, which all use the same\n         # method to initiate a streamed response.\n-        s = \'a\' * (1 << 16) * 3\n-        self.portal.manage_addFile(\'bigfile\', file=StringIO(\n-            s), content_type=\'application/octet-stream\')\n+        s = b\'a\' * (1 << 16) * 3\n+        self.portal.manage_addFile(\n+            \'bigfile\',\n+            file=six.BytesIO(s),\n+            content_type=\'application/octet-stream\')\n \n         import transaction\n         transaction.commit()\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-06-10T15:08:43+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/a76e556b94808a29a32aebc8d8f57e057afc833b

Fix tests on Python3

Files changed:
M CHANGES.rst
M plone/app/caching/tests/test_purge.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex cc36bee..67f1a6e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,7 +11,7 @@ Breaking changes:\n New features:\n \n - Python 3 support\n-  [pbauer, MatthewWilkes]\n+  [pbauer, MatthewWilkes, ale-rt]\n \n Bug fixes:\n \ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex db06ea9..5736429 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -37,6 +37,7 @@\n from zope.lifecycleevent import ObjectMovedEvent\n from zope.lifecycleevent import ObjectRemovedEvent\n \n+import six\n import unittest\n \n if HAVE_AT:\n@@ -448,9 +449,14 @@ def test_scale_purge_paths(self):\n \n     def test_scale_purge_paths_unicode(self):\n         purge = ScalesPurgePaths(self.file)\n-        self.assertEqual(\n+        expected = [\n+            u'/plone/media/file/view/++widget++form.widgets.file/@@download/data/t\xc3\xb6stfile.csv',  # noqa: E501\n+            u'/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv',\n+        ]\n+        if six.PY2:\n+            # the getRelativePaths method returns bytes on Python 2\n+            expected = [x.encode('utf8') for x in expected]\n+        self.assertListEqual(\n             list(purge.getRelativePaths()),\n-            ['/plone/media/file/view/++widget++form.widgets.file/@@download/' +\n-             'data/t\\xc3\\xb6stfile.csv',\n-             '/plone/media/file/@@download/file/data/t\\xc3\\xb6stfile.csv'],\n+            expected,\n         )\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-09-18T08:34:52+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.caching/commit/f764875c6a917f57ad7eff8a7b443b0f6525daa3

Merge pull request #44 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/app/caching/browser/controlpanel.py
M plone/app/caching/operations/ramcache.py
M plone/app/caching/operations/utils.py
M plone/app/caching/purge.py
M plone/app/caching/testing.py
M plone/app/caching/tests/test_lastmodified.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 43fe9f8..67f1a6e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Python 3 support\n+  [pbauer, MatthewWilkes, ale-rt]\n \n Bug fixes:\n \ndiff --git a/plone/app/caching/browser/controlpanel.py b/plone/app/caching/browser/controlpanel.py\nindex baa103f..0936e04 100644\n--- a/plone/app/caching/browser/controlpanel.py\n+++ b/plone/app/caching/browser/controlpanel.py\n@@ -28,6 +28,7 @@\n from zope.ramcache.interfaces.ram import IRAMCache\n \n import datetime\n+from operator import itemgetter\n import re\n import six\n \n@@ -358,7 +359,7 @@ def ruleTypes(self):\n                               title=type_.title or type_.name,\n                               description=type_.description,\n                               safeName=type_.name.replace(\'.\', \'-\'), ))\n-        types.sort(lambda x, y: cmp(x[\'title\'], y[\'title\']))\n+        types.sort(key=itemgetter(\'title\'))\n         return types\n \n     # Safe access to the main mappings, which may be None - we want to treat\n@@ -429,8 +430,7 @@ def contentTypesLookup(self):\n     @memoize\n     def operationTypes(self):\n         operations = [v for k, v in self.operationTypesLookup.items()]\n-        operations.sort(lambda x, y: (\n-            cmp(x[\'sort\'], y[\'sort\']) or cmp(x[\'title\'], y[\'title\'])))\n+        operations.sort(key=lambda operation:(operation[\'sort\'], operation[\'title\']))\n         return operations\n \n     @property\n@@ -443,7 +443,7 @@ def contentTypes(self):\n                 description=info[\'description\'],\n             ) for name, info in self.contentTypesLookup.items()\n         ]\n-        types.sort(lambda x, y: cmp(x[\'title\'], y[\'title\']))\n+        types.sort(key=itemgetter(\'title\'))\n         return types\n \n     # We store template and content type mappings as template -> ruleset and\ndiff --git a/plone/app/caching/operations/ramcache.py b/plone/app/caching/operations/ramcache.py\nindex 9947af0..83861a6 100644\n--- a/plone/app/caching/operations/ramcache.py\n+++ b/plone/app/caching/operations/ramcache.py\n@@ -40,11 +40,11 @@ def transformBytes(self, result, encoding):\n \n     def transformIterable(self, result, encoding):\n         if self.responseIsSuccess() and IRAMCached.providedBy(self.request):\n-            result = \'\'.join(result)\n+            result = b\'\'.join(result)\n             storeResponseInRAMCache(self.request, self.request.response,\n                                     result)\n             # as we have iterated the iterable, we must return a new one\n-            return iter(result)\n+            return iter([result])\n         return None\n \n     def responseIsSuccess(self):\ndiff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py\nindex b659184..6a244ba 100644\n--- a/plone/app/caching/operations/utils.py\n+++ b/plone/app/caching/operations/utils.py\n@@ -7,7 +7,7 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import ISiteRoot\n-from thread import allocate_lock\n+from six.moves._thread import allocate_lock\n from z3c.caching.interfaces import ILastModified\n from zope.annotation.interfaces import IAnnotations\n from zope.component import getUtility\n@@ -784,7 +784,7 @@ def storeResponseInRAMCache(\n     potentially another fix but I doubt long term it\'s ever the right thing to\n     do.\n     """\n-    if result == \'\':\n+    if not result:\n         return\n \n     status = response.getStatus()\ndiff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex b9bb821..beda585 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -214,7 +214,7 @@ def fieldFilter():\n                     yield \'{0}/@@download/{1}\'.format(prefix, field)\n             else:\n                 filename = value.filename\n-                if isinstance(filename, six.text_type):\n+                if six.PY2 and isinstance(filename, six.text_type):\n                     filename = filename.encode(\'utf-8\')\n                 yield \'{0}/view/{1}.{2}/@@download/{3}\'.format(\n                     prefix, \'++widget++form.widgets\', field, filename)\ndiff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py\nindex 1a4a7d5..3a810ab 100644\n--- a/plone/app/caching/testing.py\n+++ b/plone/app/caching/testing.py\n@@ -77,5 +77,5 @@ def tearDownZope(self, app):\n \n def getToken(username):\n     ring = _getKeyring(username)\n-    secret = ring.random()\n-    return hmac.new(secret, username, sha).hexdigest()\n+    secret = ring.random().encode(\'utf8\')\n+    return hmac.new(secret, username.encode(\'utf8\'), sha).hexdigest()\ndiff --git a/plone/app/caching/tests/test_lastmodified.py b/plone/app/caching/tests/test_lastmodified.py\nindex 3b5739e..ed0225d 100644\n--- a/plone/app/caching/tests/test_lastmodified.py\n+++ b/plone/app/caching/tests/test_lastmodified.py\n@@ -87,7 +87,7 @@ class Dummy(Persistent, Explicit):\n     def test_OFSFileLastModified_File(self):\n         from OFS.Image import File\n \n-        dummy = File(\'dummy\', \'Dummy\', \'data\')\n+        dummy = File(\'dummy\', \'Dummy\', b\'data\')\n         self.assertIsNone(ILastModified(dummy)())\n \n         timestamp = 987654321.0  # time stamp (in UTC)\n@@ -104,7 +104,7 @@ def test_OFSFileLastModified_File(self):\n     def test_OFSFileLastModified_Image(self):\n         from OFS.Image import Image\n \n-        dummy = Image(\'dummy\', \'Dummy\', \'data\')\n+        dummy = Image(\'dummy\', \'Dummy\', b\'data\')\n         self.assertIsNone(ILastModified(dummy)())\n \n         timestamp = 987654321.0  # time stamp (in UTC)\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex a449706..b3897eb 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -17,7 +17,6 @@\n from plone.testing.z2 import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n-from six.moves import cStringIO as StringIO\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n \n@@ -26,6 +25,7 @@\n import dateutil.tz\n import os\n import pkg_resources\n+import six\n import unittest\n \n \n@@ -39,7 +39,7 @@ def test_image():\n         \'plone.app.caching.tests\', \'test.gif\')\n     filename = os.path.join(os.path.dirname(__file__), u\'test.gif\')\n     return NamedBlobImage(\n-        data=open(filename, \'r\').read(),\n+        data=open(filename, \'rb\').read(),\n         filename=filename,\n     )\n \n@@ -89,7 +89,7 @@ def setUp(self):\n     def tearDown(self):\n         setRequest(None)\n \n-    def test_composite_views(self):\n+    def test_composite_viewsxx(self):\n         # This is a clone of the same test for \'without-caching-proxy\'\n         # Can we just call that test from this context?\n \n@@ -213,11 +213,12 @@ def test_composite_views(self):\n         browser.open(self.portal[\'f1\'][\'d1\'].absolute_url())\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request the anonymous folder\n         now = stable_now()\n         browser = Browser(self.app)\n+        browser.handleErrors = False\n         browser.open(self.portal[\'f1\'].absolute_url())\n         self.assertEqual(\'plone.content.folderView\',\n                          browser.headers[\'X-Cache-Rule\'])\n@@ -280,7 +281,7 @@ def test_composite_views(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Edit the page to update the etag\n         testText2 = \'Testing... body two\'\n@@ -373,7 +374,7 @@ def test_content_feeds(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request the authenticated rss feed\n         now = stable_now()\n@@ -503,7 +504,7 @@ def test_content_files(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request an image scale\n         now = stable_now()\n@@ -554,7 +555,7 @@ def test_resources(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request a large datafile (over 64K) to test files that use\n         # the "response.write()" function to initiate a streamed response.\n@@ -562,9 +563,11 @@ def test_resources(self):\n         # large OFS.Image.Image, large non-blog ATImages/ATFiles, and\n         # large Resource Registry cooked files, which all use the same\n         # method to initiate a streamed response.\n-        s = \'a\' * (1 << 16) * 3\n-        self.portal.manage_addFile(\'bigfile\', file=StringIO(\n-            s), content_type=\'application/octet-stream\')\n+        s = b\'a\' * (1 << 16) * 3\n+        self.portal.manage_addFile(\n+            \'bigfile\',\n+            file=six.BytesIO(s),\n+            content_type=\'application/octet-stream\')\n \n         import transaction\n         transaction.commit()\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex a92f3c4..e9a8634 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -14,7 +14,6 @@\n from plone.testing.z2 import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n-from six.moves import cStringIO as StringIO\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n \n@@ -23,6 +22,7 @@\n import dateutil.tz\n import os\n import pkg_resources\n+import six\n import unittest\n \n \n@@ -36,7 +36,7 @@ def test_image():\n         \'plone.app.caching.tests\', \'test.gif\')\n     filename = os.path.join(os.path.dirname(__file__), u\'test.gif\')\n     return NamedBlobImage(\n-        data=open(filename, \'r\').read(),\n+        data=open(filename, \'rb\').read(),\n         filename=filename,\n     )\n \n@@ -214,7 +214,7 @@ def test_composite_views(self):\n         browser.open(self.portal[\'f1\'][\'d1\'].absolute_url())\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request the anonymous folder\n         now = stable_now()\n@@ -281,7 +281,7 @@ def test_composite_views(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Edit the page to update the etag\n         testText2 = \'Testing... body two\'\n@@ -367,7 +367,7 @@ def test_content_feeds(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request the authenticated rss feed\n         now = stable_now()\n@@ -453,7 +453,7 @@ def test_content_files(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request an image scale\n         now = stable_now()\n@@ -502,7 +502,7 @@ def test_resources(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         # This should be a 304 response\n         self.assertEqual(\'304 Not Modified\', browser.headers[\'Status\'])\n-        self.assertEqual(\'\', browser.contents)\n+        self.assertEqual(b\'\', browser.contents)\n \n         # Request a large datafile (over 64K) to test files that use\n         # the "response.write()" function to initiate a streamed response.\n@@ -510,9 +510,11 @@ def test_resources(self):\n         # large OFS.Image.Image, large non-blog ATImages/ATFiles, and\n         # large Resource Registry cooked files, which all use the same\n         # method to initiate a streamed response.\n-        s = \'a\' * (1 << 16) * 3\n-        self.portal.manage_addFile(\'bigfile\', file=StringIO(\n-            s), content_type=\'application/octet-stream\')\n+        s = b\'a\' * (1 << 16) * 3\n+        self.portal.manage_addFile(\n+            \'bigfile\',\n+            file=six.BytesIO(s),\n+            content_type=\'application/octet-stream\')\n \n         import transaction\n         transaction.commit()\ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex dc46aa3..5736429 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -4,7 +4,7 @@\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.purge import ContentPurgePaths\n from plone.app.caching.purge import DiscussionItemPurgePaths\n-from plone.app.caching.purge import ObjectFieldPurgePaths\n+from plone.app.caching.purge import HAVE_AT\n from plone.app.caching.purge import purgeOnModified\n from plone.app.caching.purge import purgeOnMovedOrRemoved\n from plone.app.caching.purge import ScalesPurgePaths\n@@ -18,8 +18,6 @@\n from plone.registry.fieldfactory import persistentFieldAdapter\n from plone.registry.interfaces import IRegistry\n from plone.testing.zca import UNIT_TESTING\n-from Products.Archetypes import atapi\n-from Products.Archetypes.Schema.factory import instanceSchemaFactory\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import IDiscussionResponse\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n@@ -39,14 +37,20 @@\n from zope.lifecycleevent import ObjectMovedEvent\n from zope.lifecycleevent import ObjectRemovedEvent\n \n+import six\n import unittest\n \n+if HAVE_AT:\n+    from plone.app.caching.purge import ObjectFieldPurgePaths\n+    from Products.Archetypes import atapi\n+    from Products.Archetypes.Schema.factory import instanceSchemaFactory\n+\n \n def getData(filename):\n     from os.path import dirname, join\n     from plone.app.caching import tests\n     filename = join(dirname(tests.__file__), filename)\n-    data = open(filename).read()\n+    data = open(filename, \'rb\').read()\n     return data\n \n \n@@ -312,6 +316,7 @@ def getDiscussionThread(self, item):\n         self.assertEqual([\'/purgeme\'], list(purge.getAbsolutePaths()))\n \n \n+@unittest.skipUnless(HAVE_AT, \'Only run with AT\')\n class TestObjectFieldPurgePaths(unittest.TestCase):\n \n     maxDiff = None\n@@ -444,9 +449,14 @@ def test_scale_purge_paths(self):\n \n     def test_scale_purge_paths_unicode(self):\n         purge = ScalesPurgePaths(self.file)\n-        self.assertEqual(\n+        expected = [\n+            u\'/plone/media/file/view/++widget++form.widgets.file/@@download/data/t\xc3\xb6stfile.csv\',  # noqa: E501\n+            u\'/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv\',\n+        ]\n+        if six.PY2:\n+            # the getRelativePaths method returns bytes on Python 2\n+            expected = [x.encode(\'utf8\') for x in expected]\n+        self.assertListEqual(\n             list(purge.getRelativePaths()),\n-            [\'/plone/media/file/view/++widget++form.widgets.file/@@download/\' +\n-             \'data/t\\xc3\\xb6stfile.csv\',\n-             \'/plone/media/file/@@download/file/data/t\\xc3\\xb6stfile.csv\'],\n+            expected,\n         )\n'

