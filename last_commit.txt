Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-02-07T17:03:05+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/e0cc995f9dec8732048cfe2f31e46ce394acdc5b

Code formating according to Plone standards (black, isort).

Files changed:
A news/230.bugfix
M plone/__init__.py
M plone/app/__init__.py
M plone/app/layout/analytics/tests/test_doctests.py
M plone/app/layout/analytics/view.py
M plone/app/layout/dashboard/dashboard.py
M plone/app/layout/dashboard/user_actions.py
M plone/app/layout/globals/context.py
M plone/app/layout/globals/interface.py
M plone/app/layout/globals/interfaces.py
M plone/app/layout/globals/layout.py
M plone/app/layout/globals/patterns_settings.py
M plone/app/layout/globals/portal.py
M plone/app/layout/globals/tests/test_context.py
M plone/app/layout/globals/tests/test_interface.py
M plone/app/layout/globals/tests/test_layout.py
M plone/app/layout/globals/tests/test_portal.py
M plone/app/layout/globals/tests/test_tools.py
M plone/app/layout/globals/tools.py
M plone/app/layout/icons/icons.py
M plone/app/layout/icons/interfaces.py
M plone/app/layout/links/tests/test_canonical_url.py
M plone/app/layout/links/tests/test_rssviewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/navigation/defaultpage.py
M plone/app/layout/navigation/interfaces.py
M plone/app/layout/navigation/navtree.py
M plone/app/layout/navigation/root.py
M plone/app/layout/navigation/tests/test_defaultpage.py
M plone/app/layout/navigation/tests/test_root.py
M plone/app/layout/nextprevious/view.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/testing.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/globalstatusmessage.py
M plone/app/layout/viewlets/httpheaders.py
M plone/app/layout/viewlets/social.py
M plone/app/layout/viewlets/tests/base.py
M plone/app/layout/viewlets/tests/test_common.py
M plone/app/layout/viewlets/tests/test_content.py
M plone/app/layout/viewlets/tests/test_functional.py
M plone/app/layout/viewlets/tests/test_history.py
M plone/app/layout/viewlets/tests/test_social.py
M plone/app/layout/viewlets/toolbar.py
M setup.py

b'diff --git a/news/230.bugfix b/news/230.bugfix\nnew file mode 100644\nindex 00000000..04564258\n--- /dev/null\n+++ b/news/230.bugfix\n@@ -0,0 +1,2 @@\n+Code formating according to Plone standards (black, isort).\n+[thet]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af4..03d08ffd 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/layout/analytics/tests/test_doctests.py b/plone/app/layout/analytics/tests/test_doctests.py\nindex af4a0e64..709a7f9f 100644\n--- a/plone/app/layout/analytics/tests/test_doctests.py\n+++ b/plone/app/layout/analytics/tests/test_doctests.py\n@@ -6,21 +6,24 @@\n import unittest\n \n \n-OPTIONFLAGS = (doctest.REPORT_ONLY_FIRST_FAILURE |\n-               doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE)\n+OPTIONFLAGS = (\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n+)\n \n normal_testfiles = [\n-    \'analytics.txt\',\n+    "analytics.txt",\n ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=OPTIONFLAGS,\n-                                     ),\n-                layer=FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(test, optionflags=OPTIONFLAGS,),\n+                layer=FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/app/layout/analytics/view.py b/plone/app/layout/analytics/view.py\nindex b45559c1..07a4d58b 100644\n--- a/plone/app/layout/analytics/view.py\n+++ b/plone/app/layout/analytics/view.py\n@@ -11,7 +11,7 @@\n @implementer(IViewlet)\n class AnalyticsViewlet(BrowserView):\n \n-    render = ViewPageTemplateFile(\'view.pt\')\n+    render = ViewPageTemplateFile("view.pt")\n \n     def __init__(self, context, request, view, manager):\n         super(AnalyticsViewlet, self).__init__(context, request)\n@@ -22,8 +22,7 @@ def __init__(self, context, request, view, manager):\n     @property\n     def webstats_js(self):\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         try:\n             return site_settings.webstats_js or u""\n         except AttributeError:\ndiff --git a/plone/app/layout/dashboard/dashboard.py b/plone/app/layout/dashboard/dashboard.py\nindex e933628c..a37c5375 100644\n--- a/plone/app/layout/dashboard/dashboard.py\n+++ b/plone/app/layout/dashboard/dashboard.py\n@@ -24,14 +24,16 @@ class DashboardView(BrowserView):\n     """\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         if self.can_edit() and self.empty():\n-            message = _(u"info_empty_dashboard",\n-                        default=u"Your dashboard is currently empty. Click the"\n-                        " <em>edit</em> tab to assign some personal"\n-                        " portlets.")\n+            message = _(\n+                u"info_empty_dashboard",\n+                default=u"Your dashboard is currently empty. Click the"\n+                " <em>edit</em> tab to assign some personal"\n+                " portlets.",\n+            )\n             IStatusMessage(self.request).add(message)\n         return self.index()\n \n@@ -41,32 +43,31 @@ def auth_token(self):\n \n     @memoize\n     def can_edit(self):\n-        return bool(getSecurityManager().checkPermission(\n-            \'Portlets: Manage own portlets\',\n-            self.context\n-        ))\n+        return bool(\n+            getSecurityManager().checkPermission(\n+                "Portlets: Manage own portlets", self.context\n+            )\n+        )\n \n     @memoize\n     def empty(self):\n         dashboards = [\n-            getUtility(IPortletManager, name=name) for name in\n-            [\n-                \'plone.dashboard1\',\n-                \'plone.dashboard2\',\n-                \'plone.dashboard3\',\n-                \'plone.dashboard4\'\n+            getUtility(IPortletManager, name=name)\n+            for name in [\n+                "plone.dashboard1",\n+                "plone.dashboard2",\n+                "plone.dashboard3",\n+                "plone.dashboard4",\n             ]\n         ]\n \n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n         member = portal_membership.getAuthenticatedMember()\n         userid = member.getId()\n \n         num_portlets = 0\n         for dashboard in dashboards:\n-            num_portlets += len(dashboard.get(\n-                USER_CATEGORY, {}).get(userid, {}))\n+            num_portlets += len(dashboard.get(USER_CATEGORY, {}).get(userid, {}))\n             for groupid in member.getGroups():\n-                num_portlets += len(dashboard.get(\n-                    GROUP_CATEGORY, {}).get(groupid, {}))\n+                num_portlets += len(dashboard.get(GROUP_CATEGORY, {}).get(groupid, {}))\n         return num_portlets == 0\ndiff --git a/plone/app/layout/dashboard/user_actions.py b/plone/app/layout/dashboard/user_actions.py\nindex 102d97b9..40713821 100644\n--- a/plone/app/layout/dashboard/user_actions.py\n+++ b/plone/app/layout/dashboard/user_actions.py\n@@ -9,9 +9,8 @@ class UserActionsView(BrowserView):\n \n     def user_actions(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request),\n-            name=u\'plone_context_state\'\n+            (self.context, self.request), name=u"plone_context_state"\n         )\n \n-        actions = context_state.actions(\'user\')\n+        actions = context_state.actions("user")\n         return actions\ndiff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py\nindex 7c9b9825..147e0ff4 100644\n--- a/plone/app/layout/globals/context.py\n+++ b/plone/app/layout/globals/context.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n+from .interfaces import IContextState\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from .interfaces import IContextState\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.memoize.view import memoize\n from plone.portlets.interfaces import ILocalPortletAssignable\n@@ -21,8 +21,11 @@\n from zope.interface import implementer\n \n \n-BLACKLISTED_PROVIDERS = (\'portal_workflow\', )\n-BLACKLISTED_CATEGORIES = (\'folder_buttons\', \'object_buttons\', )\n+BLACKLISTED_PROVIDERS = ("portal_workflow",)\n+BLACKLISTED_CATEGORIES = (\n+    "folder_buttons",\n+    "object_buttons",\n+)\n \n \n @implementer(IContextState)\n@@ -33,22 +36,18 @@ class ContextState(BrowserView):\n     @memoize\n     def current_page_url(self):\n         url = self.current_base_url()\n-        query = self.request.get(\'QUERY_STRING\', None)\n+        query = self.request.get("QUERY_STRING", None)\n         if query:\n-            url += \'?\' + query\n+            url += "?" + query\n         return url\n \n     @memoize\n     def current_base_url(self):\n         return self.request.get(\n-            \'ACTUAL_URL\',\n+            "ACTUAL_URL",\n             self.request.get(\n-                \'VIRTUAL_URL\',\n-                self.request.get(\n-                    \'URL\',\n-                    self.context.absolute_url()\n-                )\n-            )\n+                "VIRTUAL_URL", self.request.get("URL", self.context.absolute_url())\n+            ),\n         )\n \n     @memoize\n@@ -71,12 +70,11 @@ def view_url(self):\n         called, instead of with /view appended.  We want to avoid that.\n         """\n         view_url = self.object_url()\n-        portal_type = getattr(aq_base(self.context), \'portal_type\', None)\n+        portal_type = getattr(aq_base(self.context), "portal_type", None)\n         registry = getUtility(IRegistry)\n-        use_view_action = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        use_view_action = registry.get("plone.types_use_view_action_in_listings", [])\n         if portal_type in use_view_action:\n-            view_url = view_url + \'/view\'\n+            view_url = view_url + "/view"\n         return view_url\n \n     @memoize\n@@ -95,9 +93,9 @@ def view_template_id(self):\n                 # Might happen if FTI didn\'t migrate yet.\n                 pass\n \n-        action = self._lookupTypeActionTemplate(\'object/view\')\n+        action = self._lookupTypeActionTemplate("object/view")\n         if not action:\n-            action = self._lookupTypeActionTemplate(\'folder/folderlisting\')\n+            action = self._lookupTypeActionTemplate("folder/folderlisting")\n \n         return action\n \n@@ -107,7 +105,7 @@ def is_view_template(self):\n         canonical_url = self.canonical_object_url()\n         object_url = self.object_url()\n \n-        if current_url.endswith(\'/\'):\n+        if current_url.endswith("/"):\n             current_url = current_url[:-1]\n \n         if current_url == canonical_url or current_url == object_url:\n@@ -117,24 +115,24 @@ def is_view_template(self):\n             return False\n         # Get the part of the current_url minus the object_url.\n         last_part = current_url.split(object_url)[-1]\n-        if not last_part.startswith(\'/\'):\n+        if not last_part.startswith("/"):\n             # Unexpected\n             return False\n         # Remove the slash from the front:\n         last_part = last_part[1:]\n-        if last_part == \'view\':\n+        if last_part == "view":\n             return True\n         context = aq_inner(self.context)\n         browserDefault = IBrowserDefault(context, None)\n         if browserDefault is not None:\n             fti = browserDefault.getTypeInfo()\n-            if fti.getMethodAliases().get(last_part) == \'(Default)\':\n+            if fti.getMethodAliases().get(last_part) == "(Default)":\n                 return True\n \n         template_id = self.view_template_id()\n         if last_part == template_id:\n             return True\n-        elif last_part == \'@@%s\' % template_id:\n+        elif last_part == "@@%s" % template_id:\n             return True\n \n         return False\n@@ -151,7 +149,7 @@ def object_title(self):\n     @memoize\n     def workflow_state(self):\n         tool = getToolByName(self.context, "portal_workflow")\n-        return tool.getInfoFor(aq_inner(self.context), \'review_state\', None)\n+        return tool.getInfoFor(aq_inner(self.context), "review_state", None)\n \n     def parent(self):\n         return aq_parent(aq_inner(self.context))\n@@ -166,11 +164,9 @@ def folder(self):\n \n     @memoize\n     def is_folderish(self):\n-        return bool(getattr(\n-            aq_base(aq_inner(self.context)),\n-            \'isPrincipiaFolderish\',\n-            False\n-        ))\n+        return bool(\n+            getattr(aq_base(aq_inner(self.context)), "isPrincipiaFolderish", False)\n+        )\n \n     @memoize\n     def is_structural_folder(self):\n@@ -189,54 +185,49 @@ def is_default_page(self):\n         container = aq_parent(context)\n         if not container:\n             return False\n-        view = getMultiAdapter((container, self.request), name=\'default_page\')\n+        view = getMultiAdapter((container, self.request), name="default_page")\n         return view.isDefaultPage(context)\n \n     @memoize\n     def is_portal_root(self):\n         context = aq_inner(self.context)\n         portal = getUtility(ISiteRoot)\n-        return aq_base(context) is aq_base(portal) or \\\n-            (self.is_default_page() and\n-             aq_base(aq_parent(context)) is aq_base(portal))\n+        return aq_base(context) is aq_base(portal) or (\n+            self.is_default_page() and aq_base(aq_parent(context)) is aq_base(portal)\n+        )\n \n     @memoize\n     def is_navigation_root(self):\n         context = aq_inner(self.context)\n         return INavigationRoot.providedBy(context) or (\n-            self.is_default_page()\n-            and INavigationRoot.providedBy(aq_parent(context))\n+            self.is_default_page() and INavigationRoot.providedBy(aq_parent(context))\n         )\n \n     @memoize\n     def is_editable(self):\n-        tool = getToolByName(self.context, \'portal_membership\')\n-        return bool(tool.checkPermission(\n-            \'Modify portal content\',\n-            aq_inner(self.context)\n-        ))\n+        tool = getToolByName(self.context, "portal_membership")\n+        return bool(\n+            tool.checkPermission("Modify portal content", aq_inner(self.context))\n+        )\n \n     @memoize\n     def is_locked(self):\n         # plone_lock_info is registered on marker interface ITTWLockable, since\n         # not everything may want to parttake in its lock-stealing ways.\n-        lock_info = queryMultiAdapter((\n-            self.context, self.request), name=\'plone_lock_info\')\n+        lock_info = queryMultiAdapter(\n+            (self.context, self.request), name="plone_lock_info"\n+        )\n         if lock_info is not None:\n             return lock_info.is_locked_for_current_user()\n         else:\n             context = aq_inner(self.context)\n-            lockable = getattr(\n-                context.aq_explicit, \'wl_isLocked\', None) is not None\n+            lockable = getattr(context.aq_explicit, "wl_isLocked", None) is not None\n             return lockable and context.wl_isLocked()\n \n     @memoize\n     def is_toolbar_visible(self):\n-        tool = getToolByName(self.context, \'portal_membership\')\n-        return bool(tool.checkPermission(\n-            \'Show Toolbar\',\n-            aq_inner(self.context)\n-        ))\n+        tool = getToolByName(self.context, "portal_membership")\n+        return bool(tool.checkPermission("Show Toolbar", aq_inner(self.context)))\n \n     @memoize\n     def actions(self, category=None, max=-1):\n@@ -244,16 +235,12 @@ def actions(self, category=None, max=-1):\n         atool = getToolByName(context, "portal_actions")\n         ttool = getToolByName(context, "portal_types")\n         actions = []\n-        actions.extend(ttool.listActionInfos(\n-            object=context,\n-            category=category,\n-            max=max,\n-        ))\n-        actions.extend(atool.listActionInfos(\n-            object=context,\n-            categories=(category, ),\n-            max=max,\n-        ))\n+        actions.extend(\n+            ttool.listActionInfos(object=context, category=category, max=max,)\n+        )\n+        actions.extend(\n+            atool.listActionInfos(object=context, categories=(category,), max=max,)\n+        )\n         return actions\n \n     def portlet_assignable(self):\n@@ -271,19 +258,19 @@ def _lookupTypeActionTemplate(self, actionId):\n         if not actions:\n             # Action doesn\'t exist\n             return None\n-        url = actions[0][\'url\']\n-        if url.rstrip(\'/\') == self.object_url().rstrip(\'/\'):\n+        url = actions[0]["url"]\n+        if url.rstrip("/") == self.object_url().rstrip("/"):\n             # (Default) action\n-            action = \'(Default)\'\n+            action = "(Default)"\n         else:\n             # XXX: This isn\'t quite right since it assumes the action starts\n             # with ${object_url}\n-            action = url.split(\'/\')[-1]\n+            action = url.split("/")[-1]\n \n         # Try resolving method aliases because we need a real template_id here\n         action = fti.queryMethodID(action, default=action, context=context)\n \n         # Strip off leading /\n-        if action and action[0] == \'/\':\n+        if action and action[0] == "/":\n             action = action[1:]\n         return action\ndiff --git a/plone/app/layout/globals/interface.py b/plone/app/layout/globals/interface.py\nindex 06701d32..d99b68a8 100644\n--- a/plone/app/layout/globals/interface.py\n+++ b/plone/app/layout/globals/interface.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n from .interfaces import IInterfaceInformation\n+from Acquisition import aq_base\n from plone.memoize.view import memoize\n from Products.Five.browser import BrowserView\n from zope.dottedname.resolve import resolve\n@@ -13,7 +13,7 @@\n def resolveInterface(dotted_name):\n     klass = resolve(dotted_name)\n     if not issubclass(klass, Interface):\n-        raise ValueError(\'%r is not a valid Interface.\' % dotted_name)\n+        raise ValueError("%r is not a valid Interface." % dotted_name)\n     return klass\n \n \n@@ -26,8 +26,8 @@ def _trim_doc_string(text):\n     Trims a doc string to make it format\n     correctly with structured text.\n     """\n-    text = text.strip().replace(\'\\r\\n\', \'\\n\')\n-    lines = text.split(\'\\n\')\n+    text = text.strip().replace("\\r\\n", "\\n")\n+    lines = text.split("\\n")\n     nlines = [lines[0]]\n     if len(lines) > 1:\n         min_indent = None\n@@ -37,7 +37,7 @@ def _trim_doc_string(text):\n                 min_indent = indent\n         for line in lines[1:]:\n             nlines.append(line[min_indent:])\n-    return \'\\n\'.join(nlines)\n+    return "\\n".join(nlines)\n \n \n def visitBaseInterfaces(iface, lst):\n@@ -51,7 +51,6 @@ def visitBaseInterfaces(iface, lst):\n \n @implementer(IInterfaceInformation)\n class InterfaceInformation(BrowserView):\n-\n     @memoize\n     def provides(self, dotted_name):\n         iface = resolveInterface(dotted_name)\n@@ -104,25 +103,26 @@ def get_interface_informations(self, iface):\n         methods = []\n         for name, desc in iface.namesAndDescriptions():\n             if IMethod.providedBy(desc):\n-                methods.append({\'signature\': desc.getSignatureString(),\n-                                \'name\': desc.getName(),\n-                                \'doc\': _trim_doc_string(desc.getDoc())\n-                                }\n-                               )\n+                methods.append(\n+                    {\n+                        "signature": desc.getSignatureString(),\n+                        "name": desc.getName(),\n+                        "doc": _trim_doc_string(desc.getDoc()),\n+                    }\n+                )\n             else:\n-                attributes.append({\'name\': desc.getName(),\n-                                   \'doc\': _trim_doc_string(desc.getDoc()),\n-                                   }\n-                                  )\n+                attributes.append(\n+                    {"name": desc.getName(), "doc": _trim_doc_string(desc.getDoc()),}\n+                )\n \n         result = {\n-            \'name\': iface.getName(),\n-            \'dotted_name\': getDottedName(iface),\n-            \'doc\': _trim_doc_string(iface.getDoc()),\n-            \'bases\': bases,\n-            \'base_names\': [getDottedName(iface) for base in bases],\n-            \'attributes\': attributes,\n-            \'methods\': methods,\n+            "name": iface.getName(),\n+            "dotted_name": getDottedName(iface),\n+            "doc": _trim_doc_string(iface.getDoc()),\n+            "bases": bases,\n+            "base_names": [getDottedName(iface) for base in bases],\n+            "attributes": attributes,\n+            "methods": methods,\n         }\n \n         return result\ndiff --git a/plone/app/layout/globals/interfaces.py b/plone/app/layout/globals/interfaces.py\nindex 26dc2552..c37965b8 100644\n--- a/plone/app/layout/globals/interfaces.py\n+++ b/plone/app/layout/globals/interfaces.py\n@@ -295,6 +295,5 @@ class IPatternsSettingsRenderer(Interface):\n \n \n IPatternsSettingsRenderer = deprecated(\n-    IPatternsSettingsRenderer,\n-    \'This interface was deprecated because it was pointless.\'\n+    IPatternsSettingsRenderer, "This interface was deprecated because it was pointless."\n )\ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex 60003175..c394a28b 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -33,7 +33,7 @@\n TEMPLATE_CLASSES = (\n     ViewPageTemplateFile,\n     ZopeViewPageTemplateFile,\n-    ViewMixinForTemplates\n+    ViewMixinForTemplates,\n )\n \n \n@@ -41,13 +41,11 @@\n class LayoutPolicy(BrowserView):\n     """A view that gives access to various layout related functions.\n     """\n+\n     @property\n     @memoize\n     def _context_state(self):\n-        return getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_context_state\'\n-        )\n+        return getMultiAdapter((self.context, self.request), name="plone_context_state")\n \n     def mark_view(self, view):\n         """Adds a marker interface to the view if it is "the" view for the\n@@ -55,10 +53,7 @@ def mark_view(self, view):\n         """\n         if not view:\n             return\n-        if (\n-            self._context_state.is_view_template() and\n-            not IViewView.providedBy(view)\n-        ):\n+        if self._context_state.is_view_template() and not IViewView.providedBy(view):\n             alsoProvides(view, IViewView)\n \n     def hide_columns(self, column_left, column_right):\n@@ -76,7 +71,7 @@ def have_portlets(self, manager_name, view=None):\n         """Determine whether a column should be shown. The left column is\n         called plone.leftcolumn; the right column is called plone.rightcolumn.\n         """\n-        force_disable = self.request.get(\'disable_\' + manager_name, None)\n+        force_disable = self.request.get("disable_" + manager_name, None)\n         if force_disable is not None:\n             return not bool(force_disable)\n \n@@ -88,11 +83,13 @@ def have_portlets(self, manager_name, view=None):\n         if manager is None:\n             return False\n \n-        renderer = queryMultiAdapter((\n-            context, self.request, view, manager), IPortletManagerRenderer)\n+        renderer = queryMultiAdapter(\n+            (context, self.request, view, manager), IPortletManagerRenderer\n+        )\n         if renderer is None:\n-            renderer = getMultiAdapter((\n-                context, self.request, self, manager), IPortletManagerRenderer)\n+            renderer = getMultiAdapter(\n+                (context, self.request, self, manager), IPortletManagerRenderer\n+            )\n \n         return renderer.visible\n \n@@ -105,13 +102,12 @@ def icons_visible(self):\n         anon = membership.isAnonymousUser()\n \n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         icon_visibility = settings.icon_visibility\n \n-        if icon_visibility == \'enabled\':\n+        if icon_visibility == "enabled":\n             return True\n-        elif icon_visibility == \'authenticated\' and not anon:\n+        elif icon_visibility == "authenticated" and not anon:\n             return True\n         else:\n             return False\n@@ -124,21 +120,20 @@ def thumb_visible(self):\n         membership = getToolByName(context, "portal_membership")\n         anon = membership.isAnonymousUser()\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         thumb_visibility = settings.thumb_visibility\n \n-        if thumb_visibility == \'enabled\':\n+        if thumb_visibility == "enabled":\n             return True\n-        elif thumb_visibility == \'authenticated\' and not anon:\n+        elif thumb_visibility == "authenticated" and not anon:\n             return True\n         else:\n             return False\n \n     @deprecate(\n-        \'deprecated since Plone 4, ContentIcons are rendered as Fonts now see\'\n-        \'https://docs.plone.org/develop/addons/index.html\'\n-        \'#upgrading-to-plone-5-1.\'\n+        "deprecated since Plone 4, ContentIcons are rendered as Fonts now see"\n+        "https://docs.plone.org/develop/addons/index.html"\n+        "#upgrading-to-plone-5-1."\n     )\n     def getIcon(self, item):\n         """Returns an object which implements the IContentIcon interface and\n@@ -162,35 +157,31 @@ def _toolbar_classes(self):\n \n         toolbar_classes = set()\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\',\n-            check=False\n-        )\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         try:\n-            left = site_settings.toolbar_position == \'side\'\n+            left = site_settings.toolbar_position == "side"\n         except KeyError:\n             left = True\n         if left:\n-            toolbar_classes.add(\'plone-toolbar-left\')\n+            toolbar_classes.add("plone-toolbar-left")\n         else:\n-            toolbar_classes.add(\'plone-toolbar-top\')\n+            toolbar_classes.add("plone-toolbar-top")\n         try:\n             toolbar_state = {}\n-            toolbar_state_cookie = self.request.cookies.get(\'plone-toolbar\')\n+            toolbar_state_cookie = self.request.cookies.get("plone-toolbar")\n             if toolbar_state_cookie:\n                 toolbar_state = json.loads(toolbar_state_cookie)\n-            if toolbar_state.get(\'expanded\', True):\n-                toolbar_classes.add(\'plone-toolbar-expanded\')\n+            if toolbar_state.get("expanded", True):\n+                toolbar_classes.add("plone-toolbar-expanded")\n                 if left:\n-                    toolbar_classes.add(\'plone-toolbar-left-expanded\')\n+                    toolbar_classes.add("plone-toolbar-left-expanded")\n                 else:\n-                    toolbar_classes.add(\'plone-toolbar-top-expanded\')\n+                    toolbar_classes.add("plone-toolbar-top-expanded")\n             else:\n                 if left:\n-                    toolbar_classes.add(\'plone-toolbar-left-default\')\n+                    toolbar_classes.add("plone-toolbar-left-default")\n                 else:\n-                    toolbar_classes.add(\'plone-toolbar-top-default\')\n+                    toolbar_classes.add("plone-toolbar-top-default")\n         except Exception:\n             pass\n         return toolbar_classes\n@@ -223,8 +214,7 @@ def bodyClass(self, template, view):\n         - pat-markspeciallinks: mark special links is set\n         """\n         portal_state = getMultiAdapter(\n-            (self.context, self.request),\n-            name=u\'plone_portal_state\'\n+            (self.context, self.request), name=u"plone_portal_state"\n         )\n         normalizer = queryUtility(IIDNormalizer)\n         registry = getUtility(IRegistry)\n@@ -232,7 +222,7 @@ def bodyClass(self, template, view):\n         body_classes = self._toolbar_classes()\n \n         # template class (required)\n-        template_name = \'\'\n+        template_name = ""\n         if isinstance(template, TEMPLATE_CLASSES):\n             # Browser view\n             template_name = view.__name__\n@@ -243,7 +233,7 @@ def bodyClass(self, template, view):\n             template_name = view.__name__\n         if template_name:\n             template_name = normalizer.normalize(template_name)\n-            body_classes.add(\'template-%s\' % template_name)\n+            body_classes.add("template-%s" % template_name)\n \n         # portal type class (optional)\n         portal_type = normalizer.normalize(self.context.portal_type)\n@@ -254,72 +244,61 @@ def bodyClass(self, template, view):\n         navroot = portal_state.navigation_root()\n         body_classes.add("site-%s" % navroot.getId())\n \n-        contentPath = self.context.getPhysicalPath()[\n-            len(navroot.getPhysicalPath()):]\n+        contentPath = self.context.getPhysicalPath()[len(navroot.getPhysicalPath()) :]\n         if contentPath:\n             body_classes.add("section-%s" % contentPath[0])\n             # skip first section since we already have that...\n             if len(contentPath) > 1:\n-                depth = registry.get(\n-                    \'plone.app.layout.globals.bodyClass.depth\',\n-                    4\n-                )\n+                depth = registry.get("plone.app.layout.globals.bodyClass.depth", 4)\n                 if depth > 1:\n-                    classes = [\'subsection-%s\' % contentPath[1]]\n+                    classes = ["subsection-%s" % contentPath[1]]\n                     for section in contentPath[2:depth]:\n-                        classes.append(\'-\'.join([classes[-1], section]))\n+                        classes.append("-".join([classes[-1], section]))\n                     body_classes.update(classes)\n \n         # class for hiding icons (optional)\n         if self.icons_visible():\n-            body_classes.add(\'icons-on\')\n+            body_classes.add("icons-on")\n         else:\n-            body_classes.add(\'icons-off\')\n+            body_classes.add("icons-off")\n \n         # class for hiding thumbs (optional)\n         if self.thumb_visible():\n-            body_classes.add(\'thumbs-on\')\n+            body_classes.add("thumbs-on")\n         else:\n-            body_classes.add(\'thumbs-off\')\n+            body_classes.add("thumbs-off")\n \n         # permissions required. Useful to theme frontend and backend\n         # differently\n         permissions = []\n-        if not getattr(view, \'__ac_permissions__\', tuple()):\n-            permissions = [\'none\']\n-        for permission, roles in getattr(view, \'__ac_permissions__\', tuple()):\n+        if not getattr(view, "__ac_permissions__", tuple()):\n+            permissions = ["none"]\n+        for permission, roles in getattr(view, "__ac_permissions__", tuple()):\n             permissions.append(normalizer.normalize(permission))\n-        if \'none\' in permissions or \'view\' in permissions:\n-            body_classes.add(\'frontend\')\n+        if "none" in permissions or "view" in permissions:\n+            body_classes.add("frontend")\n         for permission in permissions:\n-            body_classes.add(\'viewpermission-\' + permission)\n+            body_classes.add("viewpermission-" + permission)\n \n         # class for user roles\n         membership = getToolByName(self.context, "portal_membership")\n         if membership.isAnonymousUser():\n-            body_classes.add(\'userrole-anonymous\')\n+            body_classes.add("userrole-anonymous")\n         else:\n             user = membership.getAuthenticatedMember()\n             for role in user.getRolesInContext(self.context):\n-                body_classes.add(\n-                    \'userrole-\' + role.lower().replace(\' \', \'-\')\n-                )\n+                body_classes.add("userrole-" + role.lower().replace(" ", "-"))\n \n         # class for markspeciallinks pattern\n-        link_settings = registry.forInterface(\n-            ILinkSchema,\n-            prefix="plone",\n-            check=False\n-        )\n+        link_settings = registry.forInterface(ILinkSchema, prefix="plone", check=False)\n         msl = link_settings.mark_special_links\n         elonw = link_settings.external_links_open_new_window\n         if msl or elonw:\n-            body_classes.add(\'pat-markspeciallinks\')\n+            body_classes.add("pat-markspeciallinks")\n \n         # Add externally defined extra body classes\n         body_class_adapters = getAdapters(\n-            (self.context, self.request),\n-            IBodyClassAdapter\n+            (self.context, self.request), IBodyClassAdapter\n         )\n         for name, body_class_adapter in body_class_adapters:\n             try:\n@@ -327,16 +306,15 @@ def bodyClass(self, template, view):\n             except TypeError:  # This adapter is implemented without arguments\n                 extra_classes = body_class_adapter.get_classes() or []\n             if isinstance(extra_classes, six.string_types):\n-                extra_classes = extra_classes.split(\' \')\n+                extra_classes = extra_classes.split(" ")\n             body_classes.update(extra_classes)\n \n-        return \' \'.join(sorted(body_classes))\n+        return " ".join(sorted(body_classes))\n \n \n @adapter(Interface)\n @implementer(IBodyClassAdapter)\n class DefaultBodyClasses(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py\nindex e63398e5..88ee8279 100644\n--- a/plone/app/layout/globals/patterns_settings.py\n+++ b/plone/app/layout/globals/patterns_settings.py\n@@ -4,5 +4,5 @@\n \n deprecated(\n     "Import from Products.CMFPlone.patterns.view instead",\n-    PatternSettings=\'Products.CMFPlone.patterns.view.PatternSettingsView\'\n+    PatternSettings="Products.CMFPlone.patterns.view.PatternSettingsView",\n )\ndiff --git a/plone/app/layout/globals/portal.py b/plone/app/layout/globals/portal.py\nindex ec5ad697..eeea7180 100644\n--- a/plone/app/layout/globals/portal.py\n+++ b/plone/app/layout/globals/portal.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_inner\n from .interfaces import IPortalState\n+from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.memoize.view import memoize\n@@ -18,7 +18,7 @@\n from zope.interface import implementer\n \n \n-RIGHT_TO_LEFT = [\'ar\', \'fa\', \'he\', \'ps\']\n+RIGHT_TO_LEFT = ["ar", "fa", "he", "ps"]\n \n \n @implementer(IPortalState)\n@@ -38,8 +38,7 @@ def portal(self):\n     @memoize_contextless\n     def portal_title(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         return settings.site_title\n \n     @memoize_contextless\n@@ -76,8 +75,11 @@ def default_language(self):\n         return settings.default_language\n \n     def language(self):\n-        return self.request.get(\'LANGUAGE\', None) or \\\n-            aq_inner(self.context).Language() or self.default_language()\n+        return (\n+            self.request.get("LANGUAGE", None)\n+            or aq_inner(self.context).Language()\n+            or self.default_language()\n+        )\n \n     def locale(self):\n         return self.request.locale\ndiff --git a/plone/app/layout/globals/tests/test_context.py b/plone/app/layout/globals/tests/test_context.py\nindex ca8c50df..6181644c 100644\n--- a/plone/app/layout/globals/tests/test_context.py\n+++ b/plone/app/layout/globals/tests/test_context.py\n@@ -17,35 +17,35 @@\n class TestContextStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n-    layer = INTEGRATION_TESTING\n \n+    layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'f0\')\n-        self.folder = self.portal[\'f0\']\n-        self.fview = self.folder.restrictedTraverse(\'@@plone_context_state\')\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n-        self.folder.setDefaultPage(\'d1\')\n-        self.dview = self.folder.d1.restrictedTraverse(\'@@plone_context_state\')\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "f0")\n+        self.folder = self.portal["f0"]\n+        self.fview = self.folder.restrictedTraverse("@@plone_context_state")\n+        self.folder.invokeFactory("Document", "d1")\n+        self.folder.setDefaultPage("d1")\n+        self.dview = self.folder.d1.restrictedTraverse("@@plone_context_state")\n+        self.folder.invokeFactory("Folder", "f1")\n         directlyProvides(self.folder.f1, INonStructuralFolder)\n-        self.sview = self.folder.f1.restrictedTraverse(\'@@plone_context_state\')\n+        self.sview = self.folder.f1.restrictedTraverse("@@plone_context_state")\n \n-        self.pview = self.portal.restrictedTraverse(\'@@plone_context_state\')\n+        self.pview = self.portal.restrictedTraverse("@@plone_context_state")\n \n     def test_current_page_url(self):\n-        url = self.folder.absolute_url() + \'/some_view\'\n-        self.app.REQUEST[\'ACTUAL_URL\'] = url\n-        self.app.REQUEST[\'QUERY_STRING\'] = \'foo=bar\'\n-        self.assertEqual(self.fview.current_page_url(), url + \'?foo=bar\')\n+        url = self.folder.absolute_url() + "/some_view"\n+        self.app.REQUEST["ACTUAL_URL"] = url\n+        self.app.REQUEST["QUERY_STRING"] = "foo=bar"\n+        self.assertEqual(self.fview.current_page_url(), url + "?foo=bar")\n \n     def test_current_base_url(self):\n-        url = self.folder.absolute_url() + \'/some_view\'\n-        self.app.REQUEST[\'ACTUAL_URL\'] = url\n-        self.app.REQUEST[\'QUERY_STRING\'] = \'foo=bar\'\n+        url = self.folder.absolute_url() + "/some_view"\n+        self.app.REQUEST["ACTUAL_URL"] = url\n+        self.app.REQUEST["QUERY_STRING"] = "foo=bar"\n         self.assertEqual(self.fview.current_base_url(), url)\n \n     def test_canonical_object(self):\n@@ -53,38 +53,28 @@ def test_canonical_object(self):\n         self.assertEqual(self.dview.canonical_object(), self.folder)\n \n     def test_canonical_object_url(self):\n-        self.assertEqual(\n-            self.fview.canonical_object_url(), self.folder.absolute_url())\n-        self.assertEqual(\n-            self.dview.canonical_object_url(), self.folder.absolute_url())\n+        self.assertEqual(self.fview.canonical_object_url(), self.folder.absolute_url())\n+        self.assertEqual(self.dview.canonical_object_url(), self.folder.absolute_url())\n \n     def test_view_url(self):\n+        self.assertEqual(self.fview.view_url(), self.folder.absolute_url())\n+        self.assertEqual(self.dview.view_url(), self.folder.d1.absolute_url())\n+        self.folder.invokeFactory("File", "file1")\n+        self.fileview = self.folder.file1.restrictedTraverse("@@plone_context_state")\n         self.assertEqual(\n-            self.fview.view_url(),\n-            self.folder.absolute_url()\n-        )\n-        self.assertEqual(\n-            self.dview.view_url(),\n-            self.folder.d1.absolute_url()\n-        )\n-        self.folder.invokeFactory(\'File\', \'file1\')\n-        self.fileview = self.folder.file1.restrictedTraverse(\n-            \'@@plone_context_state\')\n-        self.assertEqual(\n-            self.fileview.view_url(),\n-            self.folder.file1.absolute_url() + \'/view\'\n+            self.fileview.view_url(), self.folder.file1.absolute_url() + "/view"\n         )\n \n     def test_view_template_id(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.assertEqual(self.fview.view_template_id(), \'foo_view\')\n+        self.folder.setLayout("foo_view")\n+        self.assertEqual(self.fview.view_template_id(), "foo_view")\n \n     def test_view_template_id_nonbrowserdefault(self):\n         # The view template id is taken from the FTI for non-browserdefault\n         # (non ATContentTypes) content\n-        tf = _createObjectByType(\'TempFolder\', self.folder, \'tf\')\n-        tfview = tf.restrictedTraverse(\'@@plone_context_state\')\n-        self.assertEqual(tfview.view_template_id(), \'index_html\')\n+        tf = _createObjectByType("TempFolder", self.folder, "tf")\n+        tfview = tf.restrictedTraverse("@@plone_context_state")\n+        self.assertEqual(tfview.view_template_id(), "index_html")\n \n     def test_view_template_id_nonbrowserdefault_nonempty(self):\n         # The view template id is taken from the FTI for non-browserdefault\n@@ -93,14 +83,14 @@ def test_view_template_id_nonbrowserdefault_nonempty(self):\n \n         # Set the expression to include a view name.\n         fti = self.portal.portal_types.TempFolder\n-        view_action = fti.getActionObject(\'object/view\')\n+        view_action = fti.getActionObject("object/view")\n         view_expression = view_action.getActionExpression()\n-        view_action.setActionExpression(\'foobar\')\n+        view_action.setActionExpression("foobar")\n \n-        tf = _createObjectByType(\'TempFolder\', self.folder, \'tf\')\n-        tf.manage_addLocalRoles(TEST_USER_ID, (\'Manager\', ))\n-        tfview = tf.restrictedTraverse(\'@@plone_context_state\')\n-        self.assertEqual(tfview.view_template_id(), \'foobar\')\n+        tf = _createObjectByType("TempFolder", self.folder, "tf")\n+        tf.manage_addLocalRoles(TEST_USER_ID, ("Manager",))\n+        tfview = tf.restrictedTraverse("@@plone_context_state")\n+        self.assertEqual(tfview.view_template_id(), "foobar")\n \n         # Reset the FTI action expression\n         view_action.setActionExpression(view_expression)\n@@ -113,58 +103,55 @@ def test_view_template_id_nonbrowserdefault_restricted(self):\n \n         # Set access to something the default user does not have, normally\n         fti = self.portal.portal_types.TempFolder\n-        view_action = fti.getActionObject(\'object/view\')\n+        view_action = fti.getActionObject("object/view")\n         view_perms = view_action.getPermissions()\n-        view_action.edit(permissions=(u\'Modify Portal Content\', ))\n+        view_action.edit(permissions=(u"Modify Portal Content",))\n \n-        tf = _createObjectByType(\'TempFolder\', self.folder, \'tf\')\n-        tf.manage_addLocalRoles(TEST_USER_ID, (\'Manager\', ))\n-        tfview = tf.restrictedTraverse(\'@@plone_context_state\')\n-        self.assertEqual(tfview.view_template_id(), \'index_html\')\n+        tf = _createObjectByType("TempFolder", self.folder, "tf")\n+        tf.manage_addLocalRoles(TEST_USER_ID, ("Manager",))\n+        tfview = tf.restrictedTraverse("@@plone_context_state")\n+        self.assertEqual(tfview.view_template_id(), "index_html")\n \n         # Reset the FTI permissions\n         view_action.edit(permissions=view_perms)\n \n     def test_is_view_template_default_page(self):\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url()\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url()\n         # Whether you\'re viewing the folder or its default page ...\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), True)\n \n     def test_is_view_template_trailing_slash(self):\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url() + \'/\'\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), True)\n \n     def test_is_view_template_template(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.app.REQUEST[\n-            \'ACTUAL_URL\'] = self.folder.absolute_url() + \'/foo_view\'\n+        self.folder.setLayout("foo_view")\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/foo_view"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_is_view_template_template_z3view(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.app.REQUEST[\n-            \'ACTUAL_URL\'] = self.folder.absolute_url() + \'/@@foo_view\'\n+        self.folder.setLayout("foo_view")\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/@@foo_view"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_is_view_template_view(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url() + \'/view\'\n+        self.folder.setLayout("foo_view")\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/view"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_is_view_template_other(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.app.REQUEST[\n-            \'ACTUAL_URL\'] = self.folder.absolute_url() + \'/bar_view\'\n+        self.folder.setLayout("foo_view")\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/bar_view"\n         self.assertEqual(self.fview.is_view_template(), False)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_is_view_template_edit(self):\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url() + \'/edit\'\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/edit"\n         self.assertEqual(self.fview.is_view_template(), False)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n@@ -172,25 +159,22 @@ def test_is_view_template_alias(self):\n         browserDefault = IBrowserDefault(self.folder, None)\n         fti = browserDefault.getTypeInfo()\n         aliases = fti.getMethodAliases()\n-        aliases[\'foo_alias\'] = \'(Default)\'\n+        aliases["foo_alias"] = "(Default)"\n         fti.setMethodAliases(aliases)\n-        self.app.REQUEST[\n-            \'ACTUAL_URL\'] = self.folder.absolute_url() + \'/foo_alias\'\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/foo_alias"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_object_url(self):\n         self.assertEqual(self.fview.object_url(), self.folder.absolute_url())\n-        self.assertEqual(\n-            self.dview.object_url(), self.folder.d1.absolute_url())\n+        self.assertEqual(self.dview.object_url(), self.folder.d1.absolute_url())\n \n     def test_object_title(self):\n-        self.folder.d1.setTitle(\'My title\')\n-        self.assertEqual(self.dview.object_title(), \'My title\')\n+        self.folder.d1.setTitle("My title")\n+        self.assertEqual(self.dview.object_title(), "My title")\n \n     def test_workflow_state(self):\n-        wfstate = self.portal.portal_workflow.getInfoFor(\n-            self.folder.d1, \'review_state\')\n+        wfstate = self.portal.portal_workflow.getInfoFor(self.folder.d1, "review_state")\n         self.assertEqual(self.dview.workflow_state(), wfstate)\n \n     def test_parent(self):\n@@ -230,7 +214,6 @@ def test_is_navigation_root(self):\n         self.assertEqual(self.sview.is_navigation_root(), False)\n         self.assertEqual(self.pview.is_navigation_root(), True)\n \n-\n     def test_is_editable(self):\n         self.assertEqual(self.dview.is_editable(), True)\n         logout()\n@@ -247,5 +230,5 @@ def test_is_locked(self):\n         self.assertEqual(self.dview.is_locked(), True)\n \n     def test_actions(self):\n-        actions = self.fview.actions(\'user\')\n-        self.assertTrue(actions[0][\'category\'] == \'user\')\n+        actions = self.fview.actions("user")\n+        self.assertTrue(actions[0]["category"] == "user")\ndiff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex dc93d679..0a7b70c1 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -12,22 +12,24 @@\n \n \n class IZero(Interface):\n-    \'\'\' Test interface zero\n-    \'\'\'\n+    """ Test interface zero\n+    """\n \n \n class IOne(IZero):\n-    \'\'\' Test interface one\n-    \'\'\'\n-    one_name = Attribute(\'One name for IOne\')\n+    """ Test interface one\n+    """\n+\n+    one_name = Attribute("One name for IOne")\n \n     def one_function():\n-        \'\'\'One function for IOne\'\'\'\n+        """One function for IOne"""\n \n \n class ITwo(Interface):\n-    \'\'\' Test interface two\n-    \'\'\'\n+    """ Test interface two\n+    """\n+\n     pass\n \n \ndiff --git a/plone/app/layout/globals/tests/test_layout.py b/plone/app/layout/globals/tests/test_layout.py\nindex 00e9479f..9a3bec03 100644\n--- a/plone/app/layout/globals/tests/test_layout.py\n+++ b/plone/app/layout/globals/tests/test_layout.py\n@@ -16,49 +16,51 @@\n \n class TestLayoutView(unittest.TestCase):\n     """Tests the global layout view."""\n+\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        self.view = self.portal.restrictedTraverse(\'@@plone_layout\')\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Document\', \'front-page\')\n-        self.portal.setDefaultPage(\'front-page\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.view = self.portal.restrictedTraverse("@@plone_layout")\n+        self.portal.invokeFactory("Folder", "folder1")\n+        self.portal.invokeFactory("Document", "front-page")\n+        self.portal.setDefaultPage("front-page")\n \n     def testHavePortlets(self):\n         have_portlets = self.view.have_portlets\n-        self.assertEqual(False, have_portlets(\'plone.leftcolumn\'))\n+        self.assertEqual(False, have_portlets("plone.leftcolumn"))\n         # We have no portlet on the right in Plone 5.0\n-        self.assertEqual(False, have_portlets(\'plone.rightcolumn\'))\n+        self.assertEqual(False, have_portlets("plone.rightcolumn"))\n \n     def testEnableColumns(self):\n         # Make sure we can force a column to appear even if there are no\n         # portlets\n-        self.app = self.layer[\'app\']\n-        self.app.REQUEST.set(\'disable_plone.leftcolumn\', 0)\n-        self.assertEqual(True, self.view.have_portlets(\'plone.leftcolumn\'))\n+        self.app = self.layer["app"]\n+        self.app.REQUEST.set("disable_plone.leftcolumn", 0)\n+        self.assertEqual(True, self.view.have_portlets("plone.leftcolumn"))\n \n     def testDisableColumns(self):\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        self.app = self.layer[\'app\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.app = self.layer["app"]\n         # Now add some portlets to be sure we have columns.  For\n         # simplicity we want a portlet that has no add form.  Note\n         # that apparently the Calender had no add form until Plone\n         # 4.3, but since 4.4 it does, so it is not fit to use here.\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n         mapping_left = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+            "++contextportlets++plone.leftcolumn"\n+        )\n         mapping_right = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.rightcolumn\')\n+            "++contextportlets++plone.rightcolumn"\n+        )\n         for m in mapping_left.keys():\n             del mapping_left[m]\n-        addview_left = mapping_left.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview_left = mapping_left.restrictedTraverse("+/" + portlet.addview)\n \n         for m in mapping_right.keys():\n             del mapping_right[m]\n-        addview_right = mapping_right.restrictedTraverse(\n-            \'+/\' + portlet.addview)\n+        addview_right = mapping_right.restrictedTraverse("+/" + portlet.addview)\n \n         # This is a NullAddForm - calling it does the work\n         addview_left()\n@@ -70,118 +72,115 @@ def testDisableColumns(self):\n         # Check that we do not explicitly disable the columns.  This\n         # may happen if we change the request in this method or if the\n         # addviews return an add-form after all.\n-        self.assertTrue(\'disable_plone.leftcolumn\' not in self.app.REQUEST)\n-        self.assertTrue(\'disable_plone.rightcolumn\' not in self.app.REQUEST)\n+        self.assertTrue("disable_plone.leftcolumn" not in self.app.REQUEST)\n+        self.assertTrue("disable_plone.rightcolumn" not in self.app.REQUEST)\n \n-        self.assertEqual(True, self.view.have_portlets(\'plone.leftcolumn\'))\n-        self.app.REQUEST.set(\'disable_plone.leftcolumn\', 1)\n-        self.assertEqual(False, self.view.have_portlets(\'plone.leftcolumn\'))\n+        self.assertEqual(True, self.view.have_portlets("plone.leftcolumn"))\n+        self.app.REQUEST.set("disable_plone.leftcolumn", 1)\n+        self.assertEqual(False, self.view.have_portlets("plone.leftcolumn"))\n \n-        self.assertEqual(True, self.view.have_portlets(\'plone.rightcolumn\'))\n-        self.app.REQUEST.set(\'disable_plone.rightcolumn\', 1)\n-        self.assertEqual(False, self.view.have_portlets(\'plone.rightcolumn\'))\n+        self.assertEqual(True, self.view.have_portlets("plone.rightcolumn"))\n+        self.app.REQUEST.set("disable_plone.rightcolumn", 1)\n+        self.assertEqual(False, self.view.have_portlets("plone.rightcolumn"))\n \n     def testBodyClass(self):\n-        context = self.portal[\'front-page\']\n-        view = context.restrictedTraverse(\'view\')\n-        layout_view = context.restrictedTraverse(\'@@plone_layout\')\n+        context = self.portal["front-page"]\n+        view = context.restrictedTraverse("view")\n+        layout_view = context.restrictedTraverse("@@plone_layout")\n         body_class = layout_view.bodyClass(view, layout_view)\n-        assert \'section-front-page\' in body_class\n+        assert "section-front-page" in body_class\n \n     def testBodyClassTemplate(self):\n         # test of first parameter only\n-        context = self.portal[\'front-page\']\n+        context = self.portal["front-page"]\n \n-        view = context.restrictedTraverse(\'view\')\n-        layout_view = context.restrictedTraverse(\'@@plone_layout\')\n+        view = context.restrictedTraverse("view")\n+        layout_view = context.restrictedTraverse("@@plone_layout")\n \n         # case 1: name from first parameter, expected a template or view\n         from Products.CMFCore.FSPageTemplate import FSPageTemplate\n-        template = FSPageTemplate(\'document_view\',\n-            os.path.join(os.path.dirname(__file__),\'data\',\'bodyclass_nametest.pt\')\n+\n+        template = FSPageTemplate(\n+            "document_view",\n+            os.path.join(os.path.dirname(__file__), "data", "bodyclass_nametest.pt"),\n         )\n         body_class = layout_view.bodyClass(template, view)\n-        self.assertIn(\'template-document_view\', body_class)\n+        self.assertIn("template-document_view", body_class)\n \n         # case 2: even w/o second parameter it has to work\n         body_class = layout_view.bodyClass(template, None)\n-        self.assertIn(\'template-document_view\', body_class)\n+        self.assertIn("template-document_view", body_class)\n \n         # case 3: if theres no template get name from view\n         body_class = layout_view.bodyClass(None, view)\n-        self.assertIn(\'template-view\', body_class)\n+        self.assertIn("template-view", body_class)\n \n     def testBodyClassWithNavigationRoot(self):\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n         context = self.portal.folder1\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.restrictedTraverse(\'view\')\n+        view = context.restrictedTraverse("@@plone_layout")\n+        template = context.restrictedTraverse("view")\n         body_class = view.bodyClass(template, view)\n-        assert \'site-%s\' % context.getId() in body_class\n+        assert "site-%s" % context.getId() in body_class\n \n     def testBodyClassWithEverySection(self):\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n         zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n-        self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n-        self.portal.folder1.folder2.folder3.invokeFactory(\'Document\', \'page\')\n+        self.portal.folder1.invokeFactory("Folder", "folder2")\n+        self.portal.folder1.folder2.invokeFactory("Folder", "folder3")\n+        self.portal.folder1.folder2.folder3.invokeFactory("Document", "page")\n         context = self.portal.folder1.folder2.folder3.page\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.restrictedTraverse(\'view\')\n+        view = context.restrictedTraverse("@@plone_layout")\n+        template = context.restrictedTraverse("view")\n         body_class = view.bodyClass(template, view)\n-        assert \'section-folder2 site-folder1\' in body_class\n-        assert \' subsection-folder3 subsection-folder3-page\' in body_class\n+        assert "section-folder2 site-folder1" in body_class\n+        assert " subsection-folder3 subsection-folder3-page" in body_class\n \n     def testBodyClassWithEverySectionTurnedOff(self):\n         registry = getUtility(IRegistry)\n-        registry[\'plone.app.layout.globals.bodyClass.depth\'] = 0\n+        registry["plone.app.layout.globals.bodyClass.depth"] = 0\n         zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n-        self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n-        self.portal.folder1.folder2.folder3.invokeFactory(\'Document\', \'page\')\n+        self.portal.folder1.invokeFactory("Folder", "folder2")\n+        self.portal.folder1.folder2.invokeFactory("Folder", "folder3")\n+        self.portal.folder1.folder2.folder3.invokeFactory("Document", "page")\n         context = self.portal.folder1.folder2.folder3.page\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.restrictedTraverse(\'view\')\n+        view = context.restrictedTraverse("@@plone_layout")\n+        template = context.restrictedTraverse("view")\n         body_class = view.bodyClass(template, view)\n-        assert \'subsection-folder2 subsection-folder2-folder3\' \\\n-            not in body_class\n-        assert \' subsection-folder2-folder3-page\' not in body_class\n+        assert "subsection-folder2 subsection-folder2-folder3" not in body_class\n+        assert " subsection-folder2-folder3-page" not in body_class\n \n     def testBodyClassWithMarkSpecialLinksOnOff(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ILinkSchema,\n-            prefix="plone",\n-            check=False\n-        )\n-        context = self.portal[\'front-page\']\n-        template = context.restrictedTraverse(\'view\')\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n+        settings = registry.forInterface(ILinkSchema, prefix="plone", check=False)\n+        context = self.portal["front-page"]\n+        template = context.restrictedTraverse("view")\n+        view = context.restrictedTraverse("@@plone_layout")\n \n         # Case 1\n         settings.mark_special_links = False\n         settings.external_links_open_new_window = False\n         body_class = view.bodyClass(template, view)\n-        self.assertTrue(\'pat-markspeciallinks\' not in body_class)\n+        self.assertTrue("pat-markspeciallinks" not in body_class)\n \n         # Case 2\n         settings.mark_special_links = True\n         settings.external_links_open_new_window = False\n         body_class = view.bodyClass(template, view)\n-        self.assertTrue(\'pat-markspeciallinks\' in body_class)\n+        self.assertTrue("pat-markspeciallinks" in body_class)\n \n         # Case 3\n         settings.mark_special_links = False\n         settings.external_links_open_new_window = True\n         body_class = view.bodyClass(template, view)\n-        self.assertTrue(\'pat-markspeciallinks\' in body_class)\n+        self.assertTrue("pat-markspeciallinks" in body_class)\n \n         # Case 4\n         settings.mark_special_links = True\n         settings.external_links_open_new_window = True\n         body_class = view.bodyClass(template, view)\n-        self.assertTrue(\'pat-markspeciallinks\' in body_class)\n+        self.assertTrue("pat-markspeciallinks" in body_class)\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex 79902ddc..f5ff1dbe 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -1,10 +1,10 @@\n # -*- coding: utf-8 -*-\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing.helpers import logout\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n-from plone.app.layout.navigation.root import getNavigationRoot\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ILanguageSchema\n from Products.CMFPlone.interfaces import ISearchSchema\n@@ -21,14 +21,15 @@\n class TestPortalStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n+\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.folder = self.portal.portal_membership.getHomeFolder(TEST_USER_ID)\n-        self.view = self.folder.restrictedTraverse(\'@@plone_portal_state\')\n+        self.view = self.folder.restrictedTraverse("@@plone_portal_state")\n \n     def test_portal(self):\n         self.assertEqual(self.view.portal(), self.portal)\n@@ -36,8 +37,8 @@ def test_portal(self):\n     def test_portal_title(self):\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        self.site_settings.site_title = u\'My title\'\n-        self.assertEqual(self.view.portal_title(), \'My title\')\n+        self.site_settings.site_title = u"My title"\n+        self.assertEqual(self.view.portal_title(), "My title")\n \n     def test_portal_url(self):\n         self.assertEqual(self.view.portal_url(), self.portal.absolute_url())\n@@ -46,79 +47,70 @@ def test_navigation_root(self):\n         self.assertEqual(self.view.navigation_root(), self.portal)\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n+        members = self.portal["Members"]\n         zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n+        view = members.restrictedTraverse("@@plone_portal_state")\n         self.assertEqual(view.navigation_root(), members)\n \n     def test_navigation_root_path(self):\n-        self.assertEqual(self.view.navigation_root_path(), \'/plone\')\n+        self.assertEqual(self.view.navigation_root_path(), "/plone")\n         self.assertEqual(\n-            self.view.navigation_root_path(), getNavigationRoot(self.folder))\n+            self.view.navigation_root_path(), getNavigationRoot(self.folder)\n+        )\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n+        members = self.portal["Members"]\n         zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n-        self.assertEqual(\n-            view.navigation_root_path(),\n-            \'/plone/Members\'\n-        )\n-        self.assertEqual(\n-            view.navigation_root_path(), getNavigationRoot(self.folder))\n+        view = members.restrictedTraverse("@@plone_portal_state")\n+        self.assertEqual(view.navigation_root_path(), "/plone/Members")\n+        self.assertEqual(view.navigation_root_path(), getNavigationRoot(self.folder))\n \n     def test_navigation_root_title(self):\n         self.portal.Title = "Portal title"\n         self.assertEqual(self.view.navigation_root_title(), "Portal title")\n-        members = self.portal[\'Members\']\n+        members = self.portal["Members"]\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n         zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n+        view = members.restrictedTraverse("@@plone_portal_state")\n         self.assertEqual(view.navigation_root_title(), members.Title())\n \n-\n     def test_navigation_root_url(self):\n-        url = self.app.REQUEST.physicalPathToURL(\n-            getNavigationRoot(self.folder))\n-        self.assertEqual(\n-            self.view.navigation_root_url(), \'http://nohost/plone\')\n+        url = self.app.REQUEST.physicalPathToURL(getNavigationRoot(self.folder))\n+        self.assertEqual(self.view.navigation_root_url(), "http://nohost/plone")\n         self.assertEqual(self.view.navigation_root_url(), url)\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n \n-        members = self.portal[\'Members\']\n+        members = self.portal["Members"]\n         zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n-        self.assertEqual(\n-            view.navigation_root_url(),\n-            \'http://nohost/plone/Members\'\n-        )\n+        view = members.restrictedTraverse("@@plone_portal_state")\n+        self.assertEqual(view.navigation_root_url(), "http://nohost/plone/Members")\n         url = self.app.REQUEST.physicalPathToURL(getNavigationRoot(members))\n         self.assertEqual(view.navigation_root_url(), url)\n \n     def test_default_language(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ILanguageSchema, prefix="plone")\n-        settings.default_language = \'no\'\n-        self.assertEqual(self.view.default_language(), \'no\')\n+        settings.default_language = "no"\n+        self.assertEqual(self.view.default_language(), "no")\n \n     def test_language(self):\n-        self.app.REQUEST.set(\'LANGUAGE\', \'no\')\n-        self.assertEqual(self.view.language(), \'no\')\n+        self.app.REQUEST.set("LANGUAGE", "no")\n+        self.assertEqual(self.view.language(), "no")\n \n     def test_locale(self):\n         # Set up registry so that no is an accepted language and that the\n         # language information from the request is actually being used.\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         settings.use_request_negotiation = True\n-        settings.available_languages.append(\'no\')\n+        settings.available_languages.append("no")\n \n-        no = locales.getLocale(\'no\', None, None)\n-        self.app.REQUEST.set(\'HTTP_ACCEPT_LANGUAGE\', \'no\')\n+        no = locales.getLocale("no", None, None)\n+        self.app.REQUEST.set("HTTP_ACCEPT_LANGUAGE", "no")\n \n         # Push request through the BeforeTraverseEvent handler again to\n         # update language settings\n@@ -126,25 +118,25 @@ def test_locale(self):\n         self.assertEqual(self.view.locale(), no)\n \n     def test_is_not_rtl(self):\n-        self.app.REQUEST.set(\'LANGUAGE\', \'no\')\n+        self.app.REQUEST.set("LANGUAGE", "no")\n         self.assertEqual(self.view.is_rtl(), False)\n \n     def test_is_rtl(self):\n-        self.app.REQUEST.set(\'LANGUAGE\', \'he\')\n+        self.app.REQUEST.set("LANGUAGE", "he")\n         self.assertEqual(self.view.is_rtl(), True)\n-        self.app.REQUEST.set(\'LANGUAGE\', \'ar_DZ\')\n+        self.app.REQUEST.set("LANGUAGE", "ar_DZ")\n         self.assertEqual(self.view.is_rtl(), True)\n \n     def test_member(self):\n         self.assertEqual(\n             self.view.member().id,\n-            self.portal.portal_membership.getAuthenticatedMember().id\n+            self.portal.portal_membership.getAuthenticatedMember().id,\n         )\n \n     def test_anonymous(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        #self.portal.invokeFactory(\'Folder\', \'f0\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        # self.portal.invokeFactory(\'Folder\', \'f0\')\n         self.assertEqual(self.view.anonymous(), False)\n         logout()\n         del self.app.REQUEST.__annotations__\n@@ -153,5 +145,5 @@ def test_anonymous(self):\n     def test_friendly_types(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        settings.types_not_searched = (\'Document\',)\n-        self.assertFalse(\'Document\' in self.view.friendly_types())\n+        settings.types_not_searched = ("Document",)\n+        self.assertFalse("Document" in self.view.friendly_types())\ndiff --git a/plone/app/layout/globals/tests/test_tools.py b/plone/app/layout/globals/tests/test_tools.py\nindex b9e7c137..5a5d3d0d 100644\n--- a/plone/app/layout/globals/tests/test_tools.py\n+++ b/plone/app/layout/globals/tests/test_tools.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import getToolByName\n from plone.app.layout.testing import INTEGRATION_TESTING\n+from Products.CMFPlone.utils import getToolByName\n \n import unittest\n \n@@ -12,34 +12,37 @@ class TestToolsView(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'Members\']\n-        self.view = self.folder.restrictedTraverse(\'@@plone_tools\')\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["Members"]\n+        self.view = self.folder.restrictedTraverse("@@plone_tools")\n \n     def test_actions(self):\n-        self.assertEqual(self.view.actions(), getToolByName(\n-            self.folder, \'portal_actions\'))\n+        self.assertEqual(\n+            self.view.actions(), getToolByName(self.folder, "portal_actions")\n+        )\n \n     def test_catalog(self):\n-        self.assertEqual(self.view.catalog(), getToolByName(\n-            self.folder, \'portal_catalog\'))\n+        self.assertEqual(\n+            self.view.catalog(), getToolByName(self.folder, "portal_catalog")\n+        )\n \n     def test_membership(self):\n-        self.assertEqual(self.view.membership(), getToolByName(\n-            self.folder, \'portal_membership\'))\n+        self.assertEqual(\n+            self.view.membership(), getToolByName(self.folder, "portal_membership")\n+        )\n \n     def test_properties(self):\n-        self.assertEqual(self.view.properties(), getToolByName(\n-            self.folder, \'portal_properties\'))\n+        self.assertEqual(\n+            self.view.properties(), getToolByName(self.folder, "portal_properties")\n+        )\n \n     def test_types(self):\n-        self.assertEqual(self.view.types(), getToolByName(\n-            self.folder, \'portal_types\'))\n+        self.assertEqual(self.view.types(), getToolByName(self.folder, "portal_types"))\n \n     def test_url(self):\n-        self.assertEqual(self.view.url(), getToolByName(\n-            self.folder, \'portal_url\'))\n+        self.assertEqual(self.view.url(), getToolByName(self.folder, "portal_url"))\n \n     def test_workflow(self):\n-        self.assertEqual(self.view.workflow(), getToolByName(\n-            self.folder, \'portal_workflow\'))\n+        self.assertEqual(\n+            self.view.workflow(), getToolByName(self.folder, "portal_workflow")\n+        )\ndiff --git a/plone/app/layout/globals/tools.py b/plone/app/layout/globals/tools.py\nindex 26a0722d..9bdae34f 100644\n--- a/plone/app/layout/globals/tools.py\n+++ b/plone/app/layout/globals/tools.py\n@@ -13,28 +13,28 @@ class Tools(BrowserView):\n \n     @memoize_contextless\n     def actions(self):\n-        return getToolByName(self.context, \'portal_actions\')\n+        return getToolByName(self.context, "portal_actions")\n \n     @memoize_contextless\n     def catalog(self):\n-        return getToolByName(self.context, \'portal_catalog\')\n+        return getToolByName(self.context, "portal_catalog")\n \n     @memoize_contextless\n     def membership(self):\n-        return getToolByName(self.context, \'portal_membership\')\n+        return getToolByName(self.context, "portal_membership")\n \n     @memoize_contextless\n     def properties(self):\n-        return getToolByName(self.context, \'portal_properties\')\n+        return getToolByName(self.context, "portal_properties")\n \n     @memoize_contextless\n     def url(self):\n-        return getToolByName(self.context, \'portal_url\')\n+        return getToolByName(self.context, "portal_url")\n \n     @memoize_contextless\n     def types(self):\n-        return getToolByName(self.context, \'portal_types\')\n+        return getToolByName(self.context, "portal_types")\n \n     @memoize_contextless\n     def workflow(self):\n-        return getToolByName(self.context, \'portal_workflow\')\n+        return getToolByName(self.context, "portal_workflow")\ndiff --git a/plone/app/layout/icons/icons.py b/plone/app/layout/icons/icons.py\nindex 354add0d..ebcad629 100644\n--- a/plone/app/layout/icons/icons.py\n+++ b/plone/app/layout/icons/icons.py\n@@ -27,18 +27,20 @@ def html_tag(self):\n             return None\n \n         tag = \'<img width="%s" height="%s" src="%s"\' % (\n-            self.width, self.height, self.url)\n+            self.width,\n+            self.height,\n+            self.url,\n+        )\n         if self.title:\n             tag += \' title="%s"\' % self.title\n         if self.description:\n             tag += \' alt="%s"\' % self.description\n-        tag += \' />\'\n+        tag += " />"\n         return tag\n \n \n @implementer(IContentIcon)\n class CatalogBrainContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, brain):\n         self.context = context\n         self.request = request\n@@ -55,26 +57,29 @@ def url(self):\n             return path\n \n         portal_state_view = getMultiAdapter(\n-            (self.context, self.request), name=u\'plone_portal_state\')\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n         portal_url = portal_state_view.portal_url()\n         return "%s/%s" % (portal_url, path)\n \n     @property\n     def description(self):\n         context = aq_inner(self.context)\n-        tt = getToolByName(context, \'portal_types\')\n-        fti = tt.get(self.brain[\'portal_type\'])\n+        tt = getToolByName(context, "portal_types")\n+        fti = tt.get(self.brain["portal_type"])\n         if fti is not None:\n-            res = "%s %s" % (translate(fti.Title(), context=self.request),\n-                             self._mimetype())\n+            res = "%s %s" % (\n+                translate(fti.Title(), context=self.request),\n+                self._mimetype(),\n+            )\n             return res.strip()\n         else:\n-            return self.brain[\'portal_type\']\n+            return self.brain["portal_type"]\n \n     def _mimetype(self):\n         extensions_mimetype = self.extensions_mimetype()\n         id = self.brain.getId\n-        mimetype = \'\'\n+        mimetype = ""\n         extlength = 0\n         for extension in extensions_mimetype.keys():\n             if id.endswith(extension):\n@@ -89,7 +94,7 @@ def _mimetype(self):\n     def extensions_mimetype(self):\n         """Return a dict {\'.pdf\': \'PDF Document\', \'.ods\': \'\n         """\n-        mtr = getToolByName(self.context, \'mimetypes_registry\')\n+        mtr = getToolByName(self.context, "mimetypes_registry")\n         mimetypes = mtr.mimetypes()\n         extensions = {}\n \n@@ -102,7 +107,6 @@ def extensions_mimetype(self):\n \n @implementer(IContentIcon)\n class CMFContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, obj):\n         self.context = context\n         self.request = request\n@@ -118,13 +122,13 @@ def url(self):\n         if not path:\n             return path\n \n-        portal_url = getToolByName(self.context, \'portal_url\')()\n+        portal_url = getToolByName(self.context, "portal_url")()\n         return "%s/%s" % (portal_url, path)\n \n     @property\n     def description(self):\n         context = aq_inner(self.context)\n-        tt = getToolByName(context, \'portal_types\')\n+        tt = getToolByName(context, "portal_types")\n         fti = tt.get(self.obj.portal_type)\n         if fti is not None:\n             return fti.Title()\n@@ -134,7 +138,6 @@ def description(self):\n \n @implementer(IContentIcon)\n class FTIContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, obj):\n         self.context = context\n         self.request = request\n@@ -147,12 +150,12 @@ def __init__(self, context, request, obj):\n     @property\n     def url(self):\n         context = self.context\n-        portal_url = getToolByName(context, \'portal_url\')\n+        portal_url = getToolByName(context, "portal_url")\n         portal = portal_url.getPortalObject()\n \n         ec = createExprContext(aq_parent(context), portal, context)\n         icon = self.obj.getIconExprObject()\n-        path = \'\'\n+        path = ""\n         if icon:\n             path = icon(ec)\n         return path\n@@ -164,7 +167,6 @@ def description(self):\n \n @implementer(IContentIcon)\n class PloneSiteContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, obj):\n         self.context = context\n         self.request = request\n@@ -176,9 +178,10 @@ def __init__(self, context, request, obj):\n \n     @property\n     def url(self):\n-        portal_url = getToolByName(self.context, \'portal_url\')()\n-        portal_state = getMultiAdapter((self.context, self.request),\n-                                       name=u\'plone_portal_state\')\n+        portal_url = getToolByName(self.context, "portal_url")()\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n         if portal_state.is_rtl():\n             return "%s/rtl-site_icon.png" % portal_url\n         else:\n@@ -191,7 +194,6 @@ def description(self):\n \n @implementer(IContentIcon)\n class DefaultContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, obj):\n         self.context = context\n         self.request = request\n@@ -203,7 +205,7 @@ def __init__(self, context, request, obj):\n \n     @property\n     def url(self):\n-        portal_url = getToolByName(self.context, \'portal_url\')()\n+        portal_url = getToolByName(self.context, "portal_url")()\n         if self.obj is None:\n             return None\n         return "%s/error_icon.png" % portal_url\ndiff --git a/plone/app/layout/icons/interfaces.py b/plone/app/layout/icons/interfaces.py\nindex 8c580559..4f00139d 100644\n--- a/plone/app/layout/icons/interfaces.py\n+++ b/plone/app/layout/icons/interfaces.py\n@@ -11,14 +11,19 @@ class IContentIcon(Interface):\n \n     height = Attribute("Returns the height of the icon (required).")\n \n-    url = Attribute("The absolute url of the icon. This should be "\n-                    "None if no icon should be rendered.")\n-\n-    description = Attribute("The description used for the alt attribute. "\n-                            "Should be at least an empty string.")\n-\n-    title = Attribute("The content of the title attribute. Should be None "\n-                      "if the title is empty.")\n+    url = Attribute(\n+        "The absolute url of the icon. This should be "\n+        "None if no icon should be rendered."\n+    )\n+\n+    description = Attribute(\n+        "The description used for the alt attribute. "\n+        "Should be at least an empty string."\n+    )\n+\n+    title = Attribute(\n+        "The content of the title attribute. Should be None " "if the title is empty."\n+    )\n \n     def html_tag():\n         """Return a HTML string that is the tag for rendering this icon.\ndiff --git a/plone/app/layout/links/tests/test_canonical_url.py b/plone/app/layout/links/tests/test_canonical_url.py\nindex 632f35e9..2a20711c 100644\n--- a/plone/app/layout/links/tests/test_canonical_url.py\n+++ b/plone/app/layout/links/tests/test_canonical_url.py\n@@ -11,16 +11,16 @@ class ViewletTestCase(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_canonical_url_viewlet(self):\n         portal_url = self.portal.absolute_url()\n         canonical_link = \'<link rel="canonical" href="%s"\' % portal_url\n-        browser = Browser(self.layer[\'app\'])\n+        browser = Browser(self.layer["app"])\n         # the page must contain the canonical URL link\n         browser.open(portal_url)\n         self.assertIn(canonical_link, browser.contents)\n         # opening the same page using a different view must return the same\n         # canonical URL\n-        browser.open(portal_url + \'/view\')\n+        browser.open(portal_url + "/view")\n         self.assertIn(canonical_link, browser.contents)\ndiff --git a/plone/app/layout/links/tests/test_rssviewlet.py b/plone/app/layout/links/tests/test_rssviewlet.py\nindex 64db2263..4ad8f43f 100644\n--- a/plone/app/layout/links/tests/test_rssviewlet.py\n+++ b/plone/app/layout/links/tests/test_rssviewlet.py\n@@ -9,10 +9,9 @@\n \n \n class TestRSSViewletView(ViewletsTestCase):\n-\n     def test_RSSViewlet(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "news")\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSyndicationSettings)\n         if settings.allowed:\n@@ -22,7 +21,7 @@ def test_RSSViewlet(self):\n         viewlet = RSSViewlet(self.portal, request, None, None)\n         viewlet.update()\n         result = viewlet.render()\n-        self.assertEqual(result.strip(), \'\')\n+        self.assertEqual(result.strip(), "")\n         settings.allowed = True\n         settings.site_rss_items = (self.portal.news.UID(),)\n         request = self.app.REQUEST\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex f8cd9166..1566d8ef 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -17,24 +17,25 @@\n \n \n def get_language(context, request):\n-    portal_state = getMultiAdapter((context, request),\n-                                   name=u\'plone_portal_state\')\n+    portal_state = getMultiAdapter((context, request), name=u"plone_portal_state")\n     return portal_state.language()\n \n \n def render_cachekey(fun, self):\n     # Include the name of the viewlet as the underlying cache key only\n     # takes the module and function name into account, but not the class\n-    return \'\\n\'.join([\n-        self.__name__,\n-        self.site_url,\n-        get_language(aq_inner(self.context), self.request),\n-    ])\n+    return "\\n".join(\n+        [\n+            self.__name__,\n+            self.site_url,\n+            get_language(aq_inner(self.context), self.request),\n+        ]\n+    )\n \n \n class FaviconViewlet(ViewletBase):\n \n-    _template = ViewPageTemplateFile(\'favicon.pt\')\n+    _template = ViewPageTemplateFile("favicon.pt")\n \n     @ram.cache(render_cachekey)\n     def render(self):\n@@ -43,7 +44,7 @@ def render(self):\n \n class SearchViewlet(ViewletBase):\n \n-    _template = ViewPageTemplateFile(\'search.pt\')\n+    _template = ViewPageTemplateFile("search.pt")\n \n     @ram.cache(render_cachekey)\n     def render(self):\n@@ -52,36 +53,32 @@ def render(self):\n \n class AuthorViewlet(ViewletBase):\n \n-    _template = ViewPageTemplateFile(\'author.pt\')\n+    _template = ViewPageTemplateFile("author.pt")\n \n     def update(self):\n         super(AuthorViewlet, self).update()\n-        self.tools = getMultiAdapter((self.context, self.request),\n-                                     name=\'plone_tools\')\n+        self.tools = getMultiAdapter((self.context, self.request), name="plone_tools")\n \n     def show(self):\n         anonymous = self.portal_state.anonymous()\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n         return not anonymous or settings.allow_anon_views_about\n \n     def render(self):\n         if self.show():\n             return self._template()\n-        return u\'\'\n+        return u""\n \n \n class RSSViewlet(ViewletBase):\n-\n     def getRssLinks(self, obj):\n         settings = IFeedSettings(obj, None)\n         if settings is None:\n             return []\n         factory = getUtility(\n-            IVocabularyFactory, "plone.app.vocabularies.SyndicationFeedTypes")\n+            IVocabularyFactory, "plone.app.vocabularies.SyndicationFeedTypes"\n+        )\n         vocabulary = factory(self.context)\n         urls = []\n         for typ in settings.feed_types:\n@@ -90,20 +87,22 @@ def getRssLinks(self, obj):\n             except LookupError:\n                 continue\n \n-            urls.append({\n-                \'title\': \'%s - %s\' % (\n-                    obj.Title(), safe_bytes(term.title)),\n-                \'url\': obj.absolute_url() + \'/\' + term.value})\n+            urls.append(\n+                {\n+                    "title": "%s - %s" % (obj.Title(), safe_bytes(term.title)),\n+                    "url": obj.absolute_url() + "/" + term.value,\n+                }\n+            )\n         return urls\n \n     def update(self):\n         super(RSSViewlet, self).update()\n         self.rsslinks = []\n         portal = self.portal_state.portal()\n-        util = getMultiAdapter((self.context, self.request),\n-                               name="syndication-util")\n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n+        util = getMultiAdapter((self.context, self.request), name="syndication-util")\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         if context_state.is_portal_root():\n             if util.site_enabled():\n                 registry = getUtility(IRegistry)\n@@ -116,9 +115,8 @@ def update(self):\n                         if not uid:\n                             continue\n                         obj = uuidToObject(uid)\n-                        if obj is None and uid[0] == \'/\':\n-                            obj = portal.restrictedTraverse(\n-                                uid.lstrip(\'/\'), None)\n+                        if obj is None and uid[0] == "/":\n+                            obj = portal.restrictedTraverse(uid.lstrip("/"), None)\n                         if obj is not None:\n                             self.rsslinks.extend(self.getRssLinks(obj))\n                 self.rsslinks.extend(self.getRssLinks(portal))\n@@ -126,7 +124,7 @@ def update(self):\n             if util.context_enabled():\n                 self.rsslinks.extend(self.getRssLinks(self.context))\n \n-    index = ViewPageTemplateFile(\'rsslink.pt\')\n+    index = ViewPageTemplateFile("rsslink.pt")\n \n \n class CanonicalURL(ViewletBase):\n@@ -140,6 +138,7 @@ class CanonicalURL(ViewletBase):\n     @view.memoize\n     def render(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u\'plone_context_state\')\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         canonical_url = context_state.canonical_object_url()\n         return u\'    <link rel="canonical" href="%s" />\' % canonical_url\ndiff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py\nindex ee9a0ffa..3f684b8f 100644\n--- a/plone/app/layout/navigation/defaultpage.py\n+++ b/plone/app/layout/navigation/defaultpage.py\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n from zope.deferredimport import deprecated\n \n+\n # remove in Plone 6\n deprecated(\n     "Import from Products.CMFPlone instead",\n-    DefaultPage=\'Products.CMFPlone.browser.defaultpage:DefaultPage\',\n-    isDefaultPage=\'Products.CMFPlone.defaultpage:is_default_page\',\n-    getDefaultPage=\'Products.CMFPlone.defaultpage:get_default_page\',\n+    DefaultPage="Products.CMFPlone.browser.defaultpage:DefaultPage",\n+    isDefaultPage="Products.CMFPlone.defaultpage:is_default_page",\n+    getDefaultPage="Products.CMFPlone.defaultpage:get_default_page",\n )\ndiff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py\nindex 67739ce9..ed5408cc 100644\n--- a/plone/app/layout/navigation/interfaces.py\n+++ b/plone/app/layout/navigation/interfaces.py\n@@ -3,10 +3,11 @@\n from zope.interface import Attribute\n from zope.interface import Interface\n \n+\n # remove in plone 6\n deprecated(\n     "Import from Products.CMFPlone instead",\n-    IDefaultPage=\'Products.CMFPlone.interfaces.defaultpage:DefaultPage\',\n+    IDefaultPage="Products.CMFPlone.interfaces.defaultpage:DefaultPage",\n )\n \n \n@@ -32,10 +33,12 @@ class INavtreeStrategy(Interface):\n     """\n \n     rootPath = Attribute(\n-        "The path to the root of the navtree (None means use portal root)")\n+        "The path to the root of the navtree (None means use portal root)"\n+    )\n \n     showAllParents = Attribute(\n-        "Whether or not to show all parents of the current context always")\n+        "Whether or not to show all parents of the current context always"\n+    )\n \n     def nodeFilter(node):\n         """Return True or False to determine whether to include the given node\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex fb45964c..83ba3fd1 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -21,8 +21,7 @@ class NavtreeStrategyBase(object):\n     showAllParents = False\n \n     # Default sorting and treatment of default-pages\n-    supplimentQuery = {\'sort_on\': \'getObjPositionInParent\',\n-                       \'is_default_page\': False}\n+    supplimentQuery = {"sort_on": "getObjPositionInParent", "is_default_page": False}\n \n     def nodeFilter(self, node):\n         return True\n@@ -37,8 +36,7 @@ def showChildrenOf(self, object):\n         return True\n \n \n-def buildFolderTree(context, obj=None, query={},\n-                    strategy=NavtreeStrategyBase()):\n+def buildFolderTree(context, obj=None, query={}, strategy=NavtreeStrategyBase()):\n     """Create a tree structure representing a navigation tree. By default,\n     it will create a full "sitemap" tree, rooted at the portal, ordered\n     by explicit folder order. If the \'query\' parameter contains a \'path\'\n@@ -118,12 +116,12 @@ def buildFolderTree(context, obj=None, query={},\n     used for the purposes of selecting the \'currentItem\'.\n     """\n \n-    portal_url = getToolByName(context, \'portal_url\')\n-    portal_catalog = getToolByName(context, \'portal_catalog\')\n+    portal_url = getToolByName(context, "portal_url")\n+    portal_catalog = getToolByName(context, "portal_catalog")\n \n     rootPath = strategy.rootPath\n \n-    request = getattr(context, \'REQUEST\', {})\n+    request = getattr(context, "REQUEST", {})\n \n     # Find the object\'s path. Use parent folder if context is a default-page\n \n@@ -133,41 +131,45 @@ def buildFolderTree(context, obj=None, query={},\n         objPhysicalPath = obj.getPhysicalPath()\n         if utils.isDefaultPage(obj, request):\n             objPhysicalPath = objPhysicalPath[:-1]\n-        objPath = \'/\'.join(objPhysicalPath)\n+        objPath = "/".join(objPhysicalPath)\n \n     portalPath = portal_url.getPortalPath()\n     portalObject = portal_url.getPortalObject()\n \n     # Calculate rootPath from the path query if not set.\n \n-    if \'path\' not in query:\n+    if "path" not in query:\n         if rootPath is None:\n             rootPath = portalPath\n-        query[\'path\'] = rootPath\n+        query["path"] = rootPath\n     elif rootPath is None:\n-        pathQuery = query[\'path\']\n+        pathQuery = query["path"]\n         if isinstance(pathQuery, six.string_types):\n             rootPath = pathQuery\n         else:\n             # Adjust for the fact that in a \'navtree\' query, the actual path\n             # is the path of the current context\n-            if pathQuery.get(\'navtree\', False):\n-                navtreeLevel = pathQuery.get(\'navtree_start\', 1)\n+            if pathQuery.get("navtree", False):\n+                navtreeLevel = pathQuery.get("navtree_start", 1)\n                 if navtreeLevel > 1:\n-                    navtreeContextPath = pathQuery[\'query\']\n+                    navtreeContextPath = pathQuery["query"]\n                     navtreeContextPathElements = navtreeContextPath[\n-                        len(portalPath) + 1:].split(\'/\')\n+                        len(portalPath) + 1 :\n+                    ].split("/")\n                     # Short-circuit if we won\'t be able to find this path\n                     if len(navtreeContextPathElements) < (navtreeLevel - 1):\n-                        return {\'children\': []}\n-                    rootPath = portalPath + \'/\' + \'/\'.join(\n-                        navtreeContextPathElements[:navtreeLevel - 1])\n+                        return {"children": []}\n+                    rootPath = (\n+                        portalPath\n+                        + "/"\n+                        + "/".join(navtreeContextPathElements[: navtreeLevel - 1])\n+                    )\n                 else:\n                     rootPath = portalPath\n             else:\n-                rootPath = pathQuery[\'query\']\n+                rootPath = pathQuery["query"]\n \n-    rootDepth = len(rootPath.split(\'/\'))\n+    rootDepth = len(rootPath.split("/"))\n \n     # Determine if we need to prune the root (but still force the path to)\n     # the parent if necessary\n@@ -200,12 +202,12 @@ def buildFolderTree(context, obj=None, query={},\n     itemPaths = {}\n \n     # Add an (initially empty) node for the root\n-    itemPaths[rootPath] = {\'children\': []}\n+    itemPaths[rootPath] = {"children": []}\n \n     # If we need to "prune" the parent (but still allow showAllParent to\n     # force some children), do so now\n     if pruneRoot:\n-        itemPaths[rootPath][\'_pruneSubtree\'] = True\n+        itemPaths[rootPath]["_pruneSubtree"] = True\n \n     def insertElement(itemPaths, item, forceInsert=False):\n         """Insert the given \'item\' brain into the tree, which is kept in\n@@ -214,8 +216,7 @@ def insertElement(itemPaths, item, forceInsert=False):\n         block the insertion of a node.\n         """\n         itemPath = item.getPath()\n-        itemInserted = (itemPaths.get(\n-            itemPath, {}).get(\'item\', None) is not None)\n+        itemInserted = itemPaths.get(itemPath, {}).get("item", None) is not None\n \n         # Short-circuit if we already added this item. Don\'t short-circuit\n         # if we\'re forcing the insert, because we may have inserted but\n@@ -223,10 +224,9 @@ def insertElement(itemPaths, item, forceInsert=False):\n         if not forceInsert and itemInserted:\n             return\n \n-        itemPhysicalPath = itemPath.split(\'/\')\n-        parentPath = \'/\'.join(itemPhysicalPath[:-1])\n-        parentPruned = (itemPaths.get(\n-            parentPath, {}).get(\'_pruneSubtree\', False))\n+        itemPhysicalPath = itemPath.split("/")\n+        parentPath = "/".join(itemPhysicalPath[:-1])\n+        parentPruned = itemPaths.get(parentPath, {}).get("_pruneSubtree", False)\n \n         # Short-circuit if we know we\'re pruning this item\'s parent\n \n@@ -244,9 +244,8 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n         isCurrent = isCurrentParent = False\n         if objPath is not None:\n-            objpath_startswith_itempath = objPath.startswith(itemPath + \'/\')\n-            objpath_bigger_than_itempath = \\\n-                len(objPhysicalPath) > len(itemPhysicalPath)\n+            objpath_startswith_itempath = objPath.startswith(itemPath + "/")\n+            objpath_bigger_than_itempath = len(objPhysicalPath) > len(itemPhysicalPath)\n             if objPath == itemPath:\n                 isCurrent = True\n             elif objpath_startswith_itempath and objpath_bigger_than_itempath:\n@@ -254,10 +253,12 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n         relativeDepth = len(itemPhysicalPath) - rootDepth\n \n-        newNode = {\'item\': item,\n-                   \'depth\': relativeDepth,\n-                   \'currentItem\': isCurrent,\n-                   \'currentParent\': isCurrentParent, }\n+        newNode = {\n+            "item": item,\n+            "depth": relativeDepth,\n+            "currentItem": isCurrent,\n+            "currentParent": isCurrentParent,\n+        }\n \n         insert = True\n         if not forceInsert and strategy is not None:\n@@ -274,16 +275,16 @@ def insertElement(itemPaths, item, forceInsert=False):\n                 itemParent = itemPaths[parentPath]\n                 if forceInsert:\n                     nodeAlreadyInserted = False\n-                    for i in itemParent[\'children\']:\n-                        if i[\'item\'].getPath() == itemPath:\n+                    for i in itemParent["children"]:\n+                        if i["item"].getPath() == itemPath:\n                             nodeAlreadyInserted = True\n                             break\n                     if not nodeAlreadyInserted:\n-                        itemParent[\'children\'].append(newNode)\n-                elif not itemParent.get(\'_pruneSubtree\', False):\n-                    itemParent[\'children\'].append(newNode)\n+                        itemParent["children"].append(newNode)\n+                elif not itemParent.get("_pruneSubtree", False):\n+                    itemParent["children"].append(newNode)\n             else:\n-                itemPaths[parentPath] = {\'children\': [newNode]}\n+                itemPaths[parentPath] = {"children": [newNode]}\n \n             # Ask the subtree filter (if any), if we should be expanding this\n             # node\n@@ -292,18 +293,18 @@ def insertElement(itemPaths, item, forceInsert=False):\n                 # children now\n                 expand = True\n             else:\n-                expand = getattr(item, \'is_folderish\', True)\n+                expand = getattr(item, "is_folderish", True)\n             if expand and (not forceInsert and strategy is not None):\n                 expand = strategy.subtreeFilter(newNode)\n \n-            children = newNode.setdefault(\'children\', [])\n+            children = newNode.setdefault("children", [])\n             if expand:\n                 # If we had some orphaned children for this node, attach\n                 # them\n                 if itemPath in itemPaths:\n-                    children.extend(itemPaths[itemPath][\'children\'])\n+                    children.extend(itemPaths[itemPath]["children"])\n             else:\n-                newNode[\'_pruneSubtree\'] = True\n+                newNode["_pruneSubtree"] = True\n \n             itemPaths[itemPath] = newNode\n \n@@ -315,38 +316,38 @@ def insertElement(itemPaths, item, forceInsert=False):\n     # context. Note that we use an unrestricted query: things we don\'t normally\n     # have permission to see will be included in the tree.\n     if strategy.showAllParents and objPath is not None:\n-        objSubPathElements = objPath[len(rootPath) + 1:].split(\'/\')\n+        objSubPathElements = objPath[len(rootPath) + 1 :].split("/")\n         parentPaths = []\n \n-        haveNode = (itemPaths.get(rootPath, {}).get(\'item\', None) is None)\n+        haveNode = itemPaths.get(rootPath, {}).get("item", None) is None\n         if not haveNode:\n             parentPaths.append(rootPath)\n \n         parentPath = rootPath\n         for i in range(len(objSubPathElements)):\n-            nodePath = rootPath + \'/\' + \'/\'.join(objSubPathElements[:i + 1])\n+            nodePath = rootPath + "/" + "/".join(objSubPathElements[: i + 1])\n             node = itemPaths.get(nodePath, None)\n \n             # If we don\'t have this node, we\'ll have to get it, if we have it\n             # but it wasn\'t connected, re-connect it\n-            if node is None or \'item\' not in node:\n+            if node is None or "item" not in node:\n                 parentPaths.append(nodePath)\n             else:\n                 nodeParent = itemPaths.get(parentPath, None)\n                 if nodeParent is not None:\n                     nodeAlreadyInserted = False\n-                    for i in nodeParent[\'children\']:\n-                        if i[\'item\'].getPath() == nodePath:\n+                    for i in nodeParent["children"]:\n+                        if i["item"].getPath() == nodePath:\n                             nodeAlreadyInserted = True\n                             break\n                     if not nodeAlreadyInserted:\n-                        nodeParent[\'children\'].append(node)\n+                        nodeParent["children"].append(node)\n \n             parentPath = nodePath\n \n         # If we were outright missing some nodes, find them again\n         if len(parentPaths) > 0:\n-            query = {\'path\': {\'query\': parentPaths, \'depth\': 0}}\n+            query = {"path": {"query": parentPaths, "depth": 0}}\n             results = portal_catalog.unrestrictedSearchResults(query)\n \n             for r in results:\ndiff --git a/plone/app/layout/navigation/root.py b/plone/app/layout/navigation/root.py\nindex fcc3d109..734af426 100644\n--- a/plone/app/layout/navigation/root.py\n+++ b/plone/app/layout/navigation/root.py\n@@ -27,24 +27,24 @@ def getNavigationRoot(context, relativeRoot=None):\n     Return the path of that root.\n     """\n     try:\n-        portal_url = getToolByName(context, \'portal_url\')\n+        portal_url = getToolByName(context, "portal_url")\n     except AttributeError:\n         site = getSite()\n-        return \'/\'.join(site.getPhysicalPath())\n+        return "/".join(site.getPhysicalPath())\n \n     if relativeRoot is None:\n         # fetch from portal_properties\n         registry = getUtility(IRegistry)\n-        relativeRoot = registry.get(\'plone.root\', None)\n+        relativeRoot = registry.get("plone.root", None)\n \n     # if relativeRoot has a meaningful value,\n-    if relativeRoot and relativeRoot != \'/\':\n+    if relativeRoot and relativeRoot != "/":\n         # use it\n \n         # while taking care of case where\n         # relativeRoot is not starting with a \'/\'\n-        if relativeRoot[0] != \'/\':\n-            relativeRoot = \'/\' + relativeRoot\n+        if relativeRoot[0] != "/":\n+            relativeRoot = "/" + relativeRoot\n \n         portalPath = portal_url.getPortalPath()\n         return portalPath + relativeRoot\n@@ -52,13 +52,12 @@ def getNavigationRoot(context, relativeRoot=None):\n         # compute the root\n         portal = portal_url.getPortalObject()\n         root = getNavigationRootObject(context, portal)\n-        return \'/\'.join(root.getPhysicalPath())\n+        return "/".join(root.getPhysicalPath())\n \n \n def getNavigationRootObject(context, portal):\n     obj = context\n-    while (not INavigationRoot.providedBy(obj) and\n-            aq_base(obj) is not aq_base(portal)):\n+    while not INavigationRoot.providedBy(obj) and aq_base(obj) is not aq_base(portal):\n         parent = aq_parent(aq_inner(obj))\n         if parent is None:\n             return obj\ndiff --git a/plone/app/layout/navigation/tests/test_defaultpage.py b/plone/app/layout/navigation/tests/test_defaultpage.py\nindex fe03f001..2bc6e75f 100644\n--- a/plone/app/layout/navigation/tests/test_defaultpage.py\n+++ b/plone/app/layout/navigation/tests/test_defaultpage.py\n@@ -13,19 +13,20 @@ class DefaultPageTestCase(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\', title=u"Test Folder")\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder", title=u"Test Folder")\n         self.folder = self.portal.folder\n \n     def test_getDefaultPage_step_1(self):\n         # A content object called \'index_html\' wins\n-        self.folder.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n-        self.folder.setDefaultPage(\'d1\')\n-        self.folder.invokeFactory(\'Document\', \'index_html\', title=u"Doc 2")\n+        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n+        self.folder.setDefaultPage("d1")\n+        self.folder.invokeFactory("Document", "index_html", title=u"Doc 2")\n \n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n-        self.assertEqual(\'index_html\', getDefaultPage(self.folder))\n+\n+        self.assertEqual("index_html", getDefaultPage(self.folder))\n \n     def test_getDefaultPage_step_2(self):\n         # Else check for IBrowserDefault, either if the container implements\n@@ -38,27 +39,29 @@ def test_getDefaultPage_step_2(self):\n         #\n         # 1) a folder provides IBrowserDefault\n         from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n+\n         self.assertTrue(IBrowserDefault.providedBy(self.folder))\n \n         # 2) a folder also provides an fti that implements\n         #    IDynamicViewTypeInformation\n-        from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation  # noqa\n+        from Products.CMFDynamicViewFTI.interfaces import (\n+            IDynamicViewTypeInformation,\n+        )  # noqa\n+\n         fti = self.folder.getTypeInfo()\n         self.assertTrue(IDynamicViewTypeInformation.providedBy(fti))\n \n         # so if we set a document as defaultpage\n-        self.folder.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n-        self.folder.setDefaultPage(\'d1\')\n+        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n+        self.folder.setDefaultPage("d1")\n \n         # 3) fti should return it\n-        self.assertEqual(\n-            \'d1\',\n-            fti.getDefaultPage(self.folder, check_exists=True)\n-        )\n+        self.assertEqual("d1", fti.getDefaultPage(self.folder, check_exists=True))\n \n         # now test since we\'re sure everythings set up correctly\n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+\n+        self.assertEqual("d1", getDefaultPage(self.folder))\n \n         # missing here:\n         # - test adapter instead of direct implements in precondition 1\n@@ -68,54 +71,55 @@ def test_getDefaultPage_step_3_1(self):\n         # 3. Else, look up the attribute default_page on the object, without\n         #    acquisition in place\n         # 3.1 look for a content in the container with the id, no acquisition!\n-        self.folder.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n+        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n \n         # set doc d1 must work\n-        self.folder.default_page = \'d1\'\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+        self.folder.default_page = "d1"\n+        self.assertEqual("d1", getDefaultPage(self.folder))\n \n         # set doc d2 must fail and return None\n-        self.folder.default_page = \'d2\'\n+        self.folder.default_page = "d2"\n         self.assertIsNone(getDefaultPage(self.folder))\n \n         # list of possible values is allowed\n-        self.folder.default_page = [\'d2\', \'d1\']\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+        self.folder.default_page = ["d2", "d1"]\n+        self.assertEqual("d1", getDefaultPage(self.folder))\n \n         # list of impossible values return None\n-        self.folder.default_page = [\'d2\', \'d3\']\n+        self.folder.default_page = ["d2", "d3"]\n         self.assertIsNone(getDefaultPage(self.folder))\n \n         # acquisition check, must not work\n-        self.folder.invokeFactory(\'Folder\', \'f1\', title=u"Sub Folder 1")\n-        self.folder.f1.invokeFactory(\'Document\', \'d2\', title=u"Document 2")\n-        self.folder.default_page = \'d2\'\n+        self.folder.invokeFactory("Folder", "f1", title=u"Sub Folder 1")\n+        self.folder.f1.invokeFactory("Document", "d2", title=u"Document 2")\n+        self.folder.default_page = "d2"\n         self.assertIsNone(getDefaultPage(self.folder.f1))\n \n     def test_getDefaultPage_step_3_2(self):\n         # 3. Else, look up the attribute default_page on the object, without\n         #    acquisition in place\n         # 3.2 look for a content at portal, with acquisition\n-        self.portal.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n-        self.folder.default_page = \'d1\'\n+        self.portal.invokeFactory("Document", "d1", title=u"Doc 1")\n+        self.folder.default_page = "d1"\n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n \n         # now it must acquire from portal\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+        self.assertEqual("d1", getDefaultPage(self.folder))\n \n         # fetch from i.e. portal_skins by acquisition\n         # test_rendering.pt is in portal_skins/plone_templates and so available\n         # by acquisition\n-        self.folder.default_page = \'test_rendering\'\n-        self.assertEqual(\'test_rendering\', getDefaultPage(self.folder))\n+        self.folder.default_page = "test_rendering"\n+        self.assertEqual("test_rendering", getDefaultPage(self.folder))\n \n     def test_getDefaultPage_step_4(self):\n         # 4. Else, look up the property default_page in the configuration\n         # registry for magic ids and test these\n         registry = getUtility(IRegistry)\n-        registry[\'plone.default_page\'] = [u\'d1\']\n-        self.folder.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n+        registry["plone.default_page"] = [u"d1"]\n+        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n \n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+\n+        self.assertEqual("d1", getDefaultPage(self.folder))\ndiff --git a/plone/app/layout/navigation/tests/test_root.py b/plone/app/layout/navigation/tests/test_root.py\nindex 4ec47e74..46a6afd2 100644\n--- a/plone/app/layout/navigation/tests/test_root.py\n+++ b/plone/app/layout/navigation/tests/test_root.py\n@@ -10,12 +10,9 @@ class NavigationRootTestCase(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def test_getNavigationRootObject_no_context(self):\n-        \'\'\'\n+        """\n         If you don\'t know the context then you also don\'t know what the\n         navigation root is.\n-        \'\'\'\n-        self.portal = self.layer[\'portal\']\n-        self.assertEqual(\n-            None,\n-            getNavigationRootObject(None, self.portal)\n-        )\n+        """\n+        self.portal = self.layer["portal"]\n+        self.assertEqual(None, getNavigationRootObject(None, self.portal))\ndiff --git a/plone/app/layout/nextprevious/view.py b/plone/app/layout/nextprevious/view.py\nindex 6be1bd0d..c3b85e60 100644\n--- a/plone/app/layout/nextprevious/view.py\n+++ b/plone/app/layout/nextprevious/view.py\n@@ -36,14 +36,15 @@ def _provider(self):\n         return INextPreviousProvider(aq_parent(aq_inner(self.context)), None)\n \n     def isViewTemplate(self):\n-        plone = getMultiAdapter((\n-            self.context, self.request), name=u\'plone_context_state\')\n+        plone = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         return plone.is_view_template()\n \n \n class NextPreviousViewlet(ViewletBase, NextPreviousView):\n-    index = ZopeTwoPageTemplateFile(\'nextprevious.pt\')\n+    index = ZopeTwoPageTemplateFile("nextprevious.pt")\n \n \n class NextPreviousLinksViewlet(ViewletBase, NextPreviousView):\n-    index = ZopeTwoPageTemplateFile(\'links.pt\')\n+    index = ZopeTwoPageTemplateFile("links.pt")\ndiff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py\nindex e8ae0a5a..f62c06b1 100644\n--- a/plone/app/layout/sitemap/sitemap.py\n+++ b/plone/app/layout/sitemap/sitemap.py\n@@ -17,14 +17,14 @@\n \n def _render_cachekey(fun, self):\n     # Cache by filename\n-    mtool = getToolByName(self.context, \'portal_membership\')\n+    mtool = getToolByName(self.context, "portal_membership")\n     if not mtool.isAnonymousUser():\n         raise ram.DontCache\n \n     url = self.context.absolute_url()\n-    catalog = getToolByName(self.context, \'portal_catalog\')\n+    catalog = getToolByName(self.context, "portal_catalog")\n     counter = catalog.getCounter()\n-    return \'%s/%s/%s\' % (url, self.filename, counter)\n+    return "%s/%s/%s" % (url, self.filename, counter)\n \n \n class SiteMapView(BrowserView):\n@@ -33,31 +33,32 @@ class SiteMapView(BrowserView):\n     http://www.sitemaps.org/protocol.php\n     """\n \n-    template = ViewPageTemplateFile(\'sitemap.xml\')\n+    template = ViewPageTemplateFile("sitemap.xml")\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n-        self.filename = \'sitemap.xml.gz\'\n+        self.filename = "sitemap.xml.gz"\n \n     def objects(self):\n         """Returns the data to create the sitemap."""\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         query = {}\n-        utils = getToolByName(self.context, \'plone_utils\')\n-        query[\'portal_type\'] = utils.getUserFriendlyTypes()\n+        utils = getToolByName(self.context, "plone_utils")\n+        query["portal_type"] = utils.getUserFriendlyTypes()\n         registry = getUtility(IRegistry)\n         typesUseViewActionInListings = frozenset(\n-            registry.get(\'plone.types_use_view_action_in_listings\', []))\n+            registry.get("plone.types_use_view_action_in_listings", [])\n+        )\n \n         is_plone_site_root = IPloneSiteRoot.providedBy(self.context)\n         if not is_plone_site_root:\n-            query[\'path\'] = \'/\'.join(self.context.getPhysicalPath())\n+            query["path"] = "/".join(self.context.getPhysicalPath())\n \n-        query[\'is_default_page\'] = True\n+        query["is_default_page"] = True\n         default_page_modified = OOBTree()\n         for item in catalog.searchResults(query):\n-            key = item.getURL().rsplit(\'/\', 1)[0]\n+            key = item.getURL().rsplit("/", 1)[0]\n             value = (item.modified.micros(), item.modified.ISO8601())\n             default_page_modified[key] = value\n \n@@ -72,14 +73,14 @@ def objects(self):\n                 modified = max(modified, default_modified)\n             lastmod = modified[1]\n             yield {\n-                \'loc\': loc,\n-                \'lastmod\': lastmod,\n+                "loc": loc,\n+                "lastmod": lastmod,\n                 # \'changefreq\': \'always\',\n                 #  hourly/daily/weekly/monthly/yearly/never\n                 # \'prioriy\': 0.5, # 0.0 to 1.0\n             }\n \n-        query[\'is_default_page\'] = False\n+        query["is_default_page"] = False\n         for item in catalog.searchResults(query):\n             loc = item.getURL()\n             date = item.modified\n@@ -90,10 +91,10 @@ def objects(self):\n                 modified = max(modified, default_modified)\n             lastmod = modified[1]\n             if item.portal_type in typesUseViewActionInListings:\n-                loc += \'/view\'\n+                loc += "/view"\n             yield {\n-                \'loc\': loc,\n-                \'lastmod\': lastmod,\n+                "loc": loc,\n+                "lastmod": lastmod,\n                 # \'changefreq\': \'always\',\n                 #  hourly/daily/weekly/monthly/yearly/never\n                 # \'prioriy\': 0.5, # 0.0 to 1.0\n@@ -104,9 +105,9 @@ def generate(self):\n         """Generates the Gzipped sitemap."""\n         xml = self.template()\n         fp = BytesIO()\n-        gzip = GzipFile(self.filename, \'wb\', 9, fp)\n+        gzip = GzipFile(self.filename, "wb", 9, fp)\n         if isinstance(xml, six.text_type):\n-            xml = xml.encode(\'utf8\')\n+            xml = xml.encode("utf8")\n         gzip.write(xml)\n         gzip.close()\n         data = fp.getvalue()\n@@ -120,8 +121,5 @@ def __call__(self):\n         if not settings.enable_sitemap:\n             raise NotFound(self.context, self.filename, self.request)\n \n-        self.request.response.setHeader(\n-            \'Content-Type\',\n-            \'application/octet-stream\'\n-        )\n+        self.request.response.setHeader("Content-Type", "application/octet-stream")\n         return self.generate()\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex d4a132b9..a4a56d77 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -28,13 +28,14 @@ class SiteMapTestCase(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n         self.site_settings.enable_sitemap = True\n-        self.sitemap = getMultiAdapter((self.portal, self.portal.REQUEST),\n-                                       name=\'sitemap.xml.gz\')\n-        self.wftool = getToolByName(self.portal, \'portal_workflow\')\n+        self.sitemap = getMultiAdapter(\n+            (self.portal, self.portal.REQUEST), name="sitemap.xml.gz"\n+        )\n+        self.wftool = getToolByName(self.portal, "portal_workflow")\n \n         # we need to explizitly set a workflow cause we can\'t rely on the\n         # test environment.\n@@ -42,32 +43,31 @@ def setUp(self):\n         # wftool._default_chain == \'simple_publication_workflow\'\n         # `instance test -m plone.app`:\n         # wftool._default_chain == \'plone_workflow\'\n-        self.wftool.setChainForPortalTypes([\'Document\'],\n-                                           \'simple_publication_workflow\')\n+        self.wftool.setChainForPortalTypes(["Document"], "simple_publication_workflow")\n \n         self.site_properties = getToolByName(\n-            self.portal, \'portal_properties\').site_properties\n+            self.portal, "portal_properties"\n+        ).site_properties\n \n         # setup private content that isn\'t accessible for anonymous\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(id=\'private\', type_name=\'Document\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory(id="private", type_name="Document")\n         private = self.portal.private\n-        self.assertTrue(\'private\' == self.wftool.getInfoFor(private,\n-                                                            \'review_state\'))\n+        self.assertTrue("private" == self.wftool.getInfoFor(private, "review_state"))\n \n         # setup published content that is accessible for anonymous\n-        self.portal.invokeFactory(id=\'published\', type_name=\'Document\')\n+        self.portal.invokeFactory(id="published", type_name="Document")\n         published = self.portal.published\n-        self.wftool.doActionFor(published, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(published,\n-                                                              \'review_state\'))\n+        self.wftool.doActionFor(published, "publish")\n+        self.assertTrue(\n+            "published" == self.wftool.getInfoFor(published, "review_state")\n+        )\n \n         # setup pending content that isn\'t accessible for anonymous\n-        self.portal.invokeFactory(id=\'pending\', type_name=\'Document\')\n+        self.portal.invokeFactory(id="pending", type_name="Document")\n         pending = self.portal.pending\n-        self.wftool.doActionFor(pending, \'submit\')\n-        self.assertTrue(\'pending\' == self.wftool.getInfoFor(pending,\n-                                                            \'review_state\'))\n+        self.wftool.doActionFor(pending, "submit")\n+        self.assertTrue("pending" == self.wftool.getInfoFor(pending, "review_state"))\n         logout()\n \n     def uncompress(self, sitemapdata):\n@@ -78,9 +78,9 @@ def uncompress(self, sitemapdata):\n         return safe_unicode(xml)\n \n     def test_disabled(self):\n-        \'\'\'\n+        """\n         If the sitemap is disabled throws a 404 error.\n-        \'\'\'\n+        """\n         self.site_settings.enable_sitemap = False\n         try:\n             self.sitemap()\n@@ -89,179 +89,182 @@ def test_disabled(self):\n             # different exceptions. but both implement INotFound.\n             self.assertTrue(INotFound.providedBy(e))\n         else:\n-            self.fail(\'The disabled sitemap view has to raise NotFound!\')\n+            self.fail("The disabled sitemap view has to raise NotFound!")\n \n     def test_authenticated_before_anonymous(self):\n-        \'\'\'\n+        """\n         Requests for the sitemap by authenticated users are not cached.\n         anomymous users get a uncached sitemap that only contains content\n         that they are supposed to see.\n-        \'\'\'\n+        """\n \n         # first round as an authenticated (manager)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n         xml = self.uncompress(self.sitemap())\n-        self.assertTrue(\'<loc>http://nohost/plone/private</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertTrue("<loc>http://nohost/plone/private</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/pending</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/published</loc>" in xml)\n \n         # second round as anonymous\n         logout()\n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/private</loc>\' in xml)\n-        self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/private</loc>" in xml)\n+        self.assertFalse("<loc>http://nohost/plone/pending</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/published</loc>" in xml)\n \n     def test_anonymous_before_authenticated(self):\n-        \'\'\'\n+        """\n         Requests for the sitemap by anonymous users are cached.\n         authenticated users get a uncached sitemap. Test that the cached\n         Sitemap is not delivered to authenticated users.\n-        \'\'\'\n+        """\n \n         # first round as anonymous\n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/private</loc>\' in xml)\n-        self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/private</loc>" in xml)\n+        self.assertFalse("<loc>http://nohost/plone/pending</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/published</loc>" in xml)\n \n         # second round as an authenticated (manager)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n         xml = self.uncompress(self.sitemap())\n-        self.assertTrue(\'<loc>http://nohost/plone/private</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertTrue("<loc>http://nohost/plone/private</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/pending</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/published</loc>" in xml)\n \n     def test_changed_catalog(self):\n-        \'\'\'\n+        """\n         The sitemap is generated from the catalog. If the catalog changes, a\n         new sitemap has to be generated.\n-        \'\'\'\n+        """\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/pending</loc>" in xml)\n \n         # changing the workflow state\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         pending = self.portal.pending\n-        self.wftool.doActionFor(pending, \'publish\')\n+        self.wftool.doActionFor(pending, "publish")\n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n+        self.assertTrue("<loc>http://nohost/plone/pending</loc>" in xml)\n \n         # removing content\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.manage_delObjects([\'published\', ])\n+        self.portal.manage_delObjects(\n+            ["published",]\n+        )\n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/published</loc>" in xml)\n \n     def test_navroot(self):\n-        \'\'\'\n+        """\n         Sitemap generated from an INavigationRoot\n-        \'\'\'\n+        """\n         # setup navroot content that is accessible for anonymous\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(id=\'navroot\', type_name=\'Folder\')\n+        self.portal.invokeFactory(id="navroot", type_name="Folder")\n         navroot = self.portal.navroot\n-        self.wftool.doActionFor(navroot, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            navroot, \'review_state\'))\n+        self.wftool.doActionFor(navroot, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(navroot, "review_state"))\n         alsoProvides(navroot, INavigationRoot)\n-        navroot.invokeFactory(id=\'published\', type_name=\'Document\')\n+        navroot.invokeFactory(id="published", type_name="Document")\n         published = navroot.published\n-        self.wftool.doActionFor(published, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            published, \'review_state\'))\n+        self.wftool.doActionFor(published, "publish")\n+        self.assertTrue(\n+            "published" == self.wftool.getInfoFor(published, "review_state")\n+        )\n         logout()\n \n-        sitemap = getMultiAdapter((self.portal.navroot, self.portal.REQUEST),\n-                                  name=\'sitemap.xml.gz\')\n+        sitemap = getMultiAdapter(\n+            (self.portal.navroot, self.portal.REQUEST), name="sitemap.xml.gz"\n+        )\n         xml = self.uncompress(sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/published</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/navroot</loc>\' in xml)\n-        self.assertTrue(\n-            \'<loc>http://nohost/plone/navroot/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/published</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/navroot</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/navroot/published</loc>" in xml)\n \n     def test_types_not_searched(self):\n-        \'\'\'\n+        """\n         Test that types_not_searched is respected\n-        \'\'\'\n+        """\n         # Set News Items not to be searchable (more likely Images)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(id=\'newsitem\', type_name=\'News Item\')\n+        self.portal.invokeFactory(id="newsitem", type_name="News Item")\n         newsitem = self.portal.newsitem\n-        self.wftool.doActionFor(newsitem, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            newsitem, \'review_state\'))\n+        self.wftool.doActionFor(newsitem, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(newsitem, "review_state"))\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        search_settings.types_not_searched = (\'News Item\',)\n+        search_settings.types_not_searched = ("News Item",)\n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/newsitem</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/newsitem</loc>" in xml)\n \n     def test_typesUseViewActionInListings(self):\n-        \'\'\'\n+        """\n         Test that typesUseViewActionInListings is respected\n-        \'\'\'\n+        """\n         # Set News Items not to be searchable (more likely Images)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(id=\'newsitem\', type_name=\'News Item\')\n+        self.portal.invokeFactory(id="newsitem", type_name="News Item")\n         newsitem = self.portal.newsitem\n-        self.wftool.doActionFor(newsitem, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            newsitem, \'review_state\'))\n+        self.wftool.doActionFor(newsitem, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(newsitem, "review_state"))\n         registry = getUtility(IRegistry)\n-        registry[\'plone.types_use_view_action_in_listings\'] = [u\'News Item\']\n+        registry["plone.types_use_view_action_in_listings"] = [u"News Item"]\n \n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertTrue(\'<loc>http://nohost/plone/newsitem/view</loc>\' in xml)\n+        self.assertTrue("<loc>http://nohost/plone/newsitem/view</loc>" in xml)\n \n     def test_default_pages(self):\n-        \'\'\'\n+        """\n         Default pages should show up at their parent\'s url with the greater of\n         their or their parent\'s modification time.\n-        \'\'\'\n+        """\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(id=\'folder\', type_name=\'Folder\')\n+        self.portal.invokeFactory(id="folder", type_name="Folder")\n         folder = self.portal.folder\n         folder.default_page = "default"\n-        self.wftool.doActionFor(folder, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            folder, \'review_state\'))\n+        self.wftool.doActionFor(folder, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(folder, "review_state"))\n \n-        folder.invokeFactory(id=\'default\', type_name=\'Document\')\n+        folder.invokeFactory(id="default", type_name="Document")\n         default = folder.default\n-        self.wftool.doActionFor(default, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            default, \'review_state\'))\n+        self.wftool.doActionFor(default, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(default, "review_state"))\n         self.assertTrue(self.portal.plone_utils.isDefaultPage(default))\n         default.modification_date = DateTime("2001-01-01")\n         folder.modification_date = DateTime("2000-01-01")\n-        self.portal.portal_catalog.reindexObject(folder, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n-        self.portal.portal_catalog.reindexObject(default, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n+        self.portal.portal_catalog.reindexObject(\n+            folder, idxs=["modified", "is_default_page", "effective"]\n+        )\n+        self.portal.portal_catalog.reindexObject(\n+            default, idxs=["modified", "is_default_page", "effective"]\n+        )\n         self.portal.default_page = "published"\n-        self.portal.portal_catalog.reindexObject(self.portal.published, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n+        self.portal.portal_catalog.reindexObject(\n+            self.portal.published, idxs=["modified", "is_default_page", "effective"]\n+        )\n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\n-            \'<loc>http://nohost/plone/folder/default</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/folder</loc>\' in xml)\n-        self.assertTrue(\'<lastmod>2001-01-01T\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone</loc>\' in xml)\n-        self.assertFalse(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/folder/default</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/folder</loc>" in xml)\n+        self.assertTrue("<lastmod>2001-01-01T" in xml)\n+        self.assertTrue("<loc>http://nohost/plone</loc>" in xml)\n+        self.assertFalse("<loc>http://nohost/plone/published</loc>" in xml)\ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex e59429e9..f677a98f 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -14,10 +14,11 @@ class Fixture(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.layout\n+\n         self.loadZCML(package=plone.app.layout)\n \n     def setUpPloneSite(self, portal):\n-        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        _createObjectByType("Folder", portal, id="Members")\n         mtool = portal.portal_membership\n         if not mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n@@ -28,10 +29,8 @@ def setUpPloneSite(self, portal):\n \n FIXTURE = Fixture()\n INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(FIXTURE,),\n-    name=\'plone.app.layout:Integration\',\n+    bases=(FIXTURE,), name="plone.app.layout:Integration",\n )\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE,),\n-    name=\'plone.app.layout:Functional\',\n+    bases=(FIXTURE,), name="plone.app.layout:Functional",\n )\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex daa4fc28..116529fb 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -32,6 +32,7 @@\n from zope.interface import implementer\n from zope.viewlet.interfaces import IViewlet\n \n+\n try:\n     from html import escape\n except ImportError:\n@@ -56,14 +57,16 @@ def __hash__(self):\n         return id(self) * 16\n \n     @property\n-    @deprecate("Use site_url instead. " +\n-               "ViewletBase.portal_url will be removed in Plone 4")\n+    @deprecate(\n+        "Use site_url instead. " + "ViewletBase.portal_url will be removed in Plone 4"\n+    )\n     def portal_url(self):\n         return self.site_url\n \n     def update(self):\n-        self.portal_state = getMultiAdapter((self.context, self.request),\n-                                            name=u\'plone_portal_state\')\n+        self.portal_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n         self.site_url = self.portal_state.portal_url()\n         self.navigation_root_url = self.portal_state.navigation_root_url()\n \n@@ -73,39 +76,36 @@ def render(self):\n         return self.index()\n \n     def index(self):\n-        raise NotImplementedError(\n-            \'`index` method must be implemented by subclass.\')\n+        raise NotImplementedError("`index` method must be implemented by subclass.")\n \n     def __lt__(self, other):\n-        \'\'\' Sort by name\n-        \'\'\'\n+        """ Sort by name\n+        """\n         return self.__name__ < other.__name__\n \n     def __eq__(self, other):\n-        \'\'\' Check for equality\n-        \'\'\'\n+        """ Check for equality\n+        """\n         return id(self) == id(other)\n \n \n class TitleViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'title.pt\')\n+    index = ViewPageTemplateFile("title.pt")\n \n     # seperator of page- and portal-title\n-    sep = u\' &mdash; \'\n+    sep = u" &mdash; "\n \n     @property\n     @memoize\n     def site_title_setting(self):\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(ISiteSchema,\n-                                              prefix="plone",\n-                                              check=False)\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         return site_settings.site_title\n \n     @property\n     @memoize\n     def page_title(self):\n-        \'\'\'\n+        """\n         Get the page title. If we are in the portal_factory we want use the\n         "Add $FTI_TITLE" form (see #12117).\n \n@@ -113,38 +113,40 @@ def page_title(self):\n          - to use "Untitled" instead of "Add" or\n          - to check the isTemporary method of the edit view instead of the\n            creation_flag\n-        \'\'\'\n-        if (hasattr(aq_base(self.context), \'isTemporary\') and\n-                self.context.isTemporary()):\n+        """\n+        if hasattr(aq_base(self.context), "isTemporary") and self.context.isTemporary():\n             # if we are in the portal_factory we want the page title to be\n             # "Add fti title"\n-            portal_types = getToolByName(self.context, \'portal_types\')\n+            portal_types = getToolByName(self.context, "portal_types")\n             fti = portal_types.getTypeInfo(self.context)\n-            return translate(\'heading_add_item\',\n-                             domain=\'plone\',\n-                             mapping={\'itemtype\': fti.Title()},\n-                             context=self.request,\n-                             default=\'Add ${itemtype}\')\n+            return translate(\n+                "heading_add_item",\n+                domain="plone",\n+                mapping={"itemtype": fti.Title()},\n+                context=self.request,\n+                default="Add ${itemtype}",\n+            )\n \n         # If we are on portal root, look up the portal title from registry\n         if IPloneSiteRoot.providedBy(self.context):\n             return self.site_title_setting\n \n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         return escape(safe_unicode(context_state.object_title()))\n \n     def update(self):\n         if IPloneSiteRoot.providedBy(self.context):\n             self.site_title = self.site_title_setting\n             return\n-        portal_state = getMultiAdapter((self.context, self.request),\n-                                       name=u\'plone_portal_state\')\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n         if IPloneSiteRoot.providedBy(portal_state.navigation_root()):\n             portal_title = self.site_title_setting\n         else:\n-            portal_title = escape(\n-                safe_unicode(portal_state.navigation_root_title()))\n+            portal_title = escape(safe_unicode(portal_state.navigation_root_title()))\n         if self.page_title == portal_title:\n             self.site_title = portal_title\n         else:\n@@ -152,20 +154,20 @@ def update(self):\n \n \n class DublinCoreViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'dublin_core.pt\')\n+    index = ViewPageTemplateFile("dublin_core.pt")\n \n     def update(self):\n-        plone_utils = getToolByName(self.context, \'plone_utils\')\n+        plone_utils = getToolByName(self.context, "plone_utils")\n         context = aq_inner(self.context)\n         self.metatags = plone_utils.listMetaTags(context).items()\n \n \n class TableOfContentsViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'toc.pt\')\n+    index = ViewPageTemplateFile("toc.pt")\n \n     def update(self):\n         obj = aq_base(self.context)\n-        getTableContents = getattr(obj, \'getTableContents\', None)\n+        getTableContents = getattr(obj, "getTableContents", None)\n         self.enabled = False\n         if getTableContents is not None:\n             try:\n@@ -174,39 +176,41 @@ def update(self):\n                 # schema not updated yet\n                 self.enabled = False\n         # handle dexterity-behavior\n-        toc = getattr(obj, \'table_of_contents\', None)\n+        toc = getattr(obj, "table_of_contents", None)\n         if toc is not None:\n             self.enabled = toc\n \n \n class SiteActionsViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'site_actions.pt\')\n+    index = ViewPageTemplateFile("site_actions.pt")\n \n     def update(self):\n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n-        self.site_actions = context_state.actions(\'site_actions\')\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n+        self.site_actions = context_state.actions("site_actions")\n \n \n class SearchBoxViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'searchbox.pt\')\n+    index = ViewPageTemplateFile("searchbox.pt")\n \n     def update(self):\n         super(SearchBoxViewlet, self).update()\n \n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n \n         registry = getUtility(IRegistry)\n-        search_settings = registry.forInterface(ISearchSchema, prefix=\'plone\')\n+        search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n         self.livesearch = search_settings.enable_livesearch\n \n         folder = context_state.folder()\n-        self.folder_path = \'/\'.join(folder.getPhysicalPath())\n+        self.folder_path = "/".join(folder.getPhysicalPath())\n \n \n class LogoViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'logo.pt\')\n+    index = ViewPageTemplateFile("logo.pt")\n \n     def update(self):\n         super(LogoViewlet, self).update()\n@@ -215,15 +219,13 @@ def update(self):\n         self.navigation_root_title = self.portal_state.navigation_root_title()\n \n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSchema,\n-                                         prefix="plone",\n-                                         check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         self.logo_title = settings.site_title\n         self.img_src = getSiteLogo()\n \n \n class GlobalSectionsViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'sections.pt\')\n+    index = ViewPageTemplateFile("sections.pt")\n \n     _opener_markup_template = (\n         u\'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n@@ -232,24 +234,22 @@ class GlobalSectionsViewlet(ViewletBase):\n     _item_markup_template = (\n         u\'<li class="{id}{has_sub_class}">\'\n         u\'<a href="{url}" class="state-{review_state}"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n-        u\'{sub}\'\n-        u\'</li>\'\n-    )\n-    _subtree_markup_wrapper = (\n-        u\'<ul class="has_subtree dropdown">{out}</ul>\'\n+        u"{sub}"\n+        u"</li>"\n     )\n+    _subtree_markup_wrapper = u\'<ul class="has_subtree dropdown">{out}</ul>\'\n \n     @property\n     @memoize_contextless\n     def settings(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(INavigationSchema, prefix=\'plone\')\n+        settings = registry.forInterface(INavigationSchema, prefix="plone")\n         return settings\n \n     @property\n     def language_settings(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         return settings\n \n     @property\n@@ -263,7 +263,7 @@ def navtree_depth(self):\n     @property\n     def current_language(self):\n         return (\n-            self.request.get(\'LANGUAGE\', None)\n+            self.request.get("LANGUAGE", None)\n             or (self.context and aq_inner(self.context).Language())\n             or self.language_settings.default_language\n         )\n@@ -275,84 +275,74 @@ def navtree(self):\n         navtree_path = self.navtree_path\n         for tab in self.portal_tabs:\n             entry = tab.copy()\n-            entry.update({\n-                \'path\': \'/\'.join((navtree_path, tab[\'id\'])),\n-                \'uid\': tab[\'id\'],\n-            })\n-            if \'review_state\' not in entry:\n-                entry[\'review_state\'] = None\n-\n-            if \'title\' not in entry:\n-                entry[\'title\'] = (\n-                    tab.get(\'name\')\n-                    or tab.get(\'description\')\n-                    or tab[\'id\']\n-                )\n+            entry.update(\n+                {"path": "/".join((navtree_path, tab["id"])), "uid": tab["id"],}\n+            )\n+            if "review_state" not in entry:\n+                entry["review_state"] = None\n+\n+            if "title" not in entry:\n+                entry["title"] = tab.get("name") or tab.get("description") or tab["id"]\n             else:\n                 # translate Home tab\n-                entry[\'title\'] = translate(\n-                    entry[\'title\'],\n-                    domain=\'plone\',\n-                    context=self.request)\n+                entry["title"] = translate(\n+                    entry["title"], domain="plone", context=self.request\n+                )\n \n-            entry[\'title\'] = safe_unicode(entry[\'title\'])\n+            entry["title"] = safe_unicode(entry["title"])\n             ret[navtree_path].append(entry)\n \n         if not self.settings.generate_tabs:\n             return ret\n \n         query = {\n-            \'path\': {\n-                \'query\': self.navtree_path,\n-                \'depth\': self.navtree_depth,\n-            },\n-            \'portal_type\': {\'query\': self.settings.displayed_types},\n-            \'Language\': self.current_language,\n-            \'sort_on\': self.settings.sort_tabs_on,\n-            \'is_default_page\': False,\n+            "path": {"query": self.navtree_path, "depth": self.navtree_depth,},\n+            "portal_type": {"query": self.settings.displayed_types},\n+            "Language": self.current_language,\n+            "sort_on": self.settings.sort_tabs_on,\n+            "is_default_page": False,\n         }\n \n         if self.settings.sort_tabs_reversed:\n-            query[\'sort_order\'] = \'reverse\'\n+            query["sort_order"] = "reverse"\n \n         if not self.settings.nonfolderish_tabs:\n-            query[\'is_folderish\'] = True\n+            query["is_folderish"] = True\n \n         if self.settings.filter_on_workflow:\n-            query[\'review_state\'] = list(\n-                self.settings.workflow_states_to_show or ()\n-            )\n+            query["review_state"] = list(self.settings.workflow_states_to_show or ())\n \n         if not self.settings.show_excluded_items:\n-            query[\'exclude_from_nav\'] = False\n+            query["exclude_from_nav"] = False\n \n-        context_path = \'/\'.join(self.context.getPhysicalPath())\n-        portal_catalog = getToolByName(self.context, \'portal_catalog\')\n+        context_path = "/".join(self.context.getPhysicalPath())\n+        portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n         registry = getUtility(IRegistry)\n-        types_using_view = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n \n         for brain in brains:\n             brain_path = brain.getPath()\n-            brain_parent_path = brain_path.rpartition(\'/\')[0]\n+            brain_parent_path = brain_path.rpartition("/")[0]\n             if brain_parent_path == navtree_path:\n                 # This should be already provided by the portal_tabs_view\n                 continue\n-            if brain.exclude_from_nav and not context_path.startswith(brain_path):  # noqa: E501\n+            if brain.exclude_from_nav and not context_path.startswith(\n+                brain_path\n+            ):  # noqa: E501\n                 # skip excluded items if they\'re not in our context path\n                 continue\n             url = brain.getURL()\n             if brain.portal_type in types_using_view:\n-                url += \'/view\'\n+                url += "/view"\n             entry = {\n-                \'id\': brain.getId,\n-                \'path\': brain_path,\n-                \'uid\': brain.UID,\n-                \'url\': url,\n-                \'title\': safe_unicode(brain.Title),\n-                \'review_state\': brain.review_state,\n+                "id": brain.getId,\n+                "path": brain_path,\n+                "uid": brain.UID,\n+                "url": url,\n+                "title": safe_unicode(brain.Title),\n+                "review_state": brain.review_state,\n             }\n             self.customize_entry(entry, brain)\n             ret[brain_parent_path].append(entry)\n@@ -363,28 +353,27 @@ def customize_entry(self, entry, brain):\n         pass\n \n     def render_item(self, item, path):\n-        sub = self.build_tree(item[\'path\'], first_run=False)\n+        sub = self.build_tree(item["path"], first_run=False)\n         if sub:\n-            item.update({\n-                \'sub\': sub,\n-                \'opener\':  self._opener_markup_template.format(**item),\n-                \'aria_haspopup\': \' aria-haspopup="true"\',\n-                \'has_sub_class\': \' has_subtree\',\n-            })\n+            item.update(\n+                {\n+                    "sub": sub,\n+                    "opener": self._opener_markup_template.format(**item),\n+                    "aria_haspopup": \' aria-haspopup="true"\',\n+                    "has_sub_class": " has_subtree",\n+                }\n+            )\n         else:\n-            item.update({\n-                \'sub\': sub,\n-                \'opener\':  \'\',\n-                \'aria_haspopup\': \'\',\n-                \'has_sub_class\': \'\',\n-            })\n+            item.update(\n+                {"sub": sub, "opener": "", "aria_haspopup": "", "has_sub_class": "",}\n+            )\n         return self._item_markup_template.format(**item)\n \n     def build_tree(self, path, first_run=True):\n         """Non-template based recursive tree building.\n         3-4 times faster than template based.\n         """\n-        out = u\'\'\n+        out = u""\n         for item in self.navtree.get(path, []):\n             out += self.render_item(item, path)\n \n@@ -398,77 +387,78 @@ def render_globalnav(self):\n     @property\n     @memoize\n     def portal_tabs(self):\n-        portal_tabs_view = getMultiAdapter((self.context, self.request),\n-               name=\'portal_tabs_view\')\n+        portal_tabs_view = getMultiAdapter(\n+            (self.context, self.request), name="portal_tabs_view"\n+        )\n         return portal_tabs_view.topLevelTabs()\n \n     def update(self):\n         context = aq_inner(self.context)\n         self.selected_tabs = self.selectedTabs(portal_tabs=self.portal_tabs)\n-        self.selected_portal_tab = self.selected_tabs[\'portal\']\n+        self.selected_portal_tab = self.selected_tabs["portal"]\n \n-    def selectedTabs(self, default_tab=\'index_html\', portal_tabs=()):\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n-        plone_url = getNavigationRootObject(\n-            self.context, portal).absolute_url()\n+    def selectedTabs(self, default_tab="index_html", portal_tabs=()):\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n+        plone_url = getNavigationRootObject(self.context, portal).absolute_url()\n         plone_url_len = len(plone_url)\n         request = self.request\n         valid_actions = []\n \n-        url = request[\'URL\']\n+        url = request["URL"]\n         path = url[plone_url_len:]\n-        path_list = path.split(\'/\')\n+        path_list = path.split("/")\n         if len(path_list) <= 1:\n-            return {\'portal\': default_tab}\n+            return {"portal": default_tab}\n \n         for action in portal_tabs:\n-            if not action[\'url\'].startswith(plone_url):\n+            if not action["url"].startswith(plone_url):\n                 # In this case the action url is an external link. Then, we\n                 # avoid issues (bad portal_tab selection) continuing with next\n                 # action.\n                 continue\n-            action_path = action[\'url\'][plone_url_len:]\n-            if not action_path.startswith(\'/\'):\n-                action_path = \'/\' + action_path\n-            action_path_list = action_path.split(\'/\')\n+            action_path = action["url"][plone_url_len:]\n+            if not action_path.startswith("/"):\n+                action_path = "/" + action_path\n+            action_path_list = action_path.split("/")\n             if action_path_list[1] == path_list[1]:\n                 # Make a list of the action ids, along with the path length\n                 # for choosing the longest (most relevant) path.\n-                valid_actions.append((len(action_path_list), action[\'id\']))\n+                valid_actions.append((len(action_path_list), action["id"]))\n \n         # Sort by path length, the longest matching path wins\n         valid_actions.sort()\n         if valid_actions:\n-            return {\'portal\': valid_actions[-1][1]}\n+            return {"portal": valid_actions[-1][1]}\n \n-        return {\'portal\': default_tab}\n+        return {"portal": default_tab}\n \n \n class PersonalBarViewlet(ViewletBase):\n \n-    homelink_url = \'\'\n-    user_name = \'\'\n+    homelink_url = ""\n+    user_name = ""\n \n     def update(self):\n         super(PersonalBarViewlet, self).update()\n         context = aq_inner(self.context)\n \n-        context_state = getMultiAdapter((context, self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (context, self.request), name=u"plone_context_state"\n+        )\n \n-        user_actions = context_state.actions(\'user\')\n+        user_actions = context_state.actions("user")\n         self.user_actions = []\n         for action in user_actions:\n             info = {\n-                \'title\': action[\'title\'],\n-                \'href\': action[\'url\'],\n-                \'id\': \'personaltools-{}\'.format(action[\'id\']),\n-                \'target\': action.get(\'link_target\', None),\n+                "title": action["title"],\n+                "href": action["url"],\n+                "id": "personaltools-{}".format(action["id"]),\n+                "target": action.get("link_target", None),\n             }\n-            modal = action.get(\'modal\')\n+            modal = action.get("modal")\n             if modal:\n-                info[\'class\'] = \'pat-plone-modal\'\n-                info[\'data-pat-plone-modal\'] = modal\n+                info["class"] = "pat-plone-modal"\n+                info["data-pat-plone-modal"] = modal\n             self.user_actions.append(info)\n \n         self.anonymous = self.portal_state.anonymous()\n@@ -479,12 +469,12 @@ def update(self):\n \n             self.homelink_url = "%s/useractions" % self.navigation_root_url\n \n-            membership = getToolByName(context, \'portal_membership\')\n+            membership = getToolByName(context, "portal_membership")\n             member_info = membership.getMemberInfo(userid)\n             # member_info is None if there\'s no Plone user object, as when\n             # using OpenID.\n             if member_info:\n-                fullname = member_info.get(\'fullname\', \'\')\n+                fullname = member_info.get("fullname", "")\n             else:\n                 fullname = None\n             if fullname:\n@@ -494,11 +484,11 @@ def update(self):\n \n \n class ContentViewsViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'contentviews.pt\')\n-    menu_template = ViewPageTemplateFile(\'menu.pt\')\n+    index = ViewPageTemplateFile("contentviews.pt")\n+    menu_template = ViewPageTemplateFile("menu.pt")\n \n-    default_tab = \'nothing\'\n-    primary = [\'folderContents\', \'edit\', \'view\']\n+    default_tab = "nothing"\n+    primary = ["folderContents", "edit", "view"]\n \n     def update(self):\n         # The drop-down menus are pulled in via a simple content provider\n@@ -518,15 +508,15 @@ def getTabSets(self):\n         context_fti = context.getTypeInfo()\n \n         context_state = getMultiAdapter(\n-            (context, self.request), name=u\'plone_context_state\'\n+            (context, self.request), name=u"plone_context_state"\n         )\n         actions = context_state.actions\n \n         action_list = []\n         if context_state.is_structural_folder():\n-            action_list = actions(\'folder\')\n-        action_list.extend(actions(\'object\'))\n-        action_list.extend(actions(\'object_actions\'))\n+            action_list = actions("folder")\n+        action_list.extend(actions("object"))\n+        action_list.extend(actions("object_actions"))\n \n         tabSet1 = []\n         tabSet2 = []\n@@ -534,27 +524,27 @@ def getTabSets(self):\n         fallback_action = None\n \n         try:\n-            request_url = self.request[\'ACTUAL_URL\']\n+            request_url = self.request["ACTUAL_URL"]\n         except KeyError:\n             # not a real request, could be a test. Let\'s not fail.\n             request_url = context_url\n-        request_url_path = request_url[len(context_url):]\n+        request_url_path = request_url[len(context_url) :]\n \n-        if request_url_path.startswith(\'/\'):\n+        if request_url_path.startswith("/"):\n             request_url_path = request_url_path[1:]\n \n         for item in action_list:\n-            item.update({\'selected\': False})\n+            item.update({"selected": False})\n \n-            action_url = item[\'url\'].strip()\n+            action_url = item["url"].strip()\n             starts = action_url.startswith\n-            if starts(\'http\') or starts(\'javascript\'):\n-                item[\'url\'] = action_url\n+            if starts("http") or starts("javascript"):\n+                item["url"] = action_url\n             else:\n-                item[\'url\'] = \'%s/%s\' % (context_url, action_url)\n-            item[\'url\'] = addTokenToUrl(item[\'url\'], self.request)\n+                item["url"] = "%s/%s" % (context_url, action_url)\n+            item["url"] = addTokenToUrl(item["url"], self.request)\n \n-            action_method = item[\'url\'].split(\'/\')[-1].split(\'?\')[0]\n+            action_method = item["url"].split("/")[-1].split("?")[0]\n \n             # Action method may be a method alias:\n             # Attempt to resolve to a template.\n@@ -562,82 +552,83 @@ def getTabSets(self):\n                 action_method, default=action_method\n             )\n             if action_method:\n-                request_action = unquote(request_url_path).split(\'?\')[0]\n+                request_action = unquote(request_url_path).split("?")[0]\n                 request_action = context_fti.queryMethodID(\n                     request_action, default=request_action\n                 )\n-                if action_method == request_action and item[\'id\'] != \'view\':\n-                    item[\'selected\'] = True\n+                if action_method == request_action and item["id"] != "view":\n+                    item["selected"] = True\n                     found_selected = True\n \n-            current_id = item[\'id\']\n+            current_id = item["id"]\n             if current_id == self.default_tab:\n                 fallback_action = item\n \n-            modal = item.get(\'modal\', None)\n-            item[\'cssClass\'] = \'\'\n+            modal = item.get("modal", None)\n+            item["cssClass"] = ""\n             if modal:\n-                item[\'cssClass\'] += \' pat-plone-modal\'\n-                if \'ajax_load\' not in item[\'url\']:\n-                    item[\'url\'] += \'?ajax_load=1\'\n+                item["cssClass"] += " pat-plone-modal"\n+                if "ajax_load" not in item["url"]:\n+                    item["url"] += "?ajax_load=1"\n \n-            if item[\'id\'] in self.primary:\n+            if item["id"] in self.primary:\n                 tabSet1.append(item)\n             else:\n                 tabSet2.append(item)\n \n         if not found_selected and fallback_action is not None:\n-            fallback_action[\'selected\'] = True\n+            fallback_action["selected"] = True\n \n-        tabSet1.sort(key=lambda item: self.primary.index(item[\'id\']))\n+        tabSet1.sort(key=lambda item: self.primary.index(item["id"]))\n         return tabSet1, tabSet2\n \n     def locked_icon(self):\n-        if not getSecurityManager().checkPermission(\'Modify portal content\',\n-                                                    self.context):\n+        if not getSecurityManager().checkPermission(\n+            "Modify portal content", self.context\n+        ):\n             return ""\n \n         locked = False\n-        lock_info = queryMultiAdapter((self.context, self.request),\n-                                      name=\'plone_lock_info\')\n+        lock_info = queryMultiAdapter(\n+            (self.context, self.request), name="plone_lock_info"\n+        )\n         if lock_info is not None:\n             locked = lock_info.is_locked()\n         else:\n             context = aq_inner(self.context)\n-            lockable = getattr(context.aq_explicit,\n-                               \'wl_isLocked\', None\n-                               ) is not None\n+            lockable = getattr(context.aq_explicit, "wl_isLocked", None) is not None\n             locked = lockable and context.wl_isLocked()\n \n         if not locked:\n             return ""\n \n         portal = self.portal_state.portal()\n-        icon = portal.restrictedTraverse(\'lock_icon.png\')\n-        return icon.tag(title=\'Locked\')\n+        icon = portal.restrictedTraverse("lock_icon.png")\n+        return icon.tag(title="Locked")\n \n \n class ManagePortletsFallbackViewlet(ViewletBase):\n     """Manage portlets fallback link that sits below content"""\n \n-    index = ViewPageTemplateFile(\'manage_portlets_fallback.pt\')\n+    index = ViewPageTemplateFile("manage_portlets_fallback.pt")\n \n     def update(self):\n-        plonelayout = getMultiAdapter((\n-            self.context, self.request), name=u\'plone_layout\')\n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n+        plonelayout = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_layout"\n+        )\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n \n         self.portlet_assignable = context_state.portlet_assignable()\n-        self.sl = plonelayout.have_portlets(\'plone.leftcolumn\', self.context)\n-        self.sr = plonelayout.have_portlets(\'plone.rightcolumn\', self.context)\n+        self.sl = plonelayout.have_portlets("plone.leftcolumn", self.context)\n+        self.sr = plonelayout.have_portlets("plone.rightcolumn", self.context)\n         self.object_url = context_state.object_url()\n \n     def available(self):\n         secman = getSecurityManager()\n         has_manage_portlets_permission = secman.checkPermission(\n-            \'Portlets: Manage portlets\',\n-            self.context\n+            "Portlets: Manage portlets", self.context\n         )\n         if not has_manage_portlets_permission:\n             return False\n@@ -646,24 +637,25 @@ def available(self):\n \n \n class PathBarViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'path_bar.pt\')\n+    index = ViewPageTemplateFile("path_bar.pt")\n \n     def update(self):\n         super(PathBarViewlet, self).update()\n \n         self.is_rtl = self.portal_state.is_rtl()\n \n-        breadcrumbs_view = getMultiAdapter((self.context, self.request),\n-                                           name=\'breadcrumbs_view\')\n+        breadcrumbs_view = getMultiAdapter(\n+            (self.context, self.request), name="breadcrumbs_view"\n+        )\n         self.breadcrumbs = breadcrumbs_view.breadcrumbs()\n \n \n class TinyLogoViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'tiny_logo.pt\')\n+    index = ViewPageTemplateFile("tiny_logo.pt")\n \n \n class FooterViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'footer.pt\')\n+    index = ViewPageTemplateFile("footer.pt")\n \n     def update(self):\n         super(FooterViewlet, self).update()\n@@ -692,8 +684,7 @@ def render_footer_portlets(self):\n         See zope.contentprovider\n         """\n         portlet_manager = getMultiAdapter(\n-            (self.context, self.request, self.__parent__),\n-            name=\'plone.footerportlets\'\n+            (self.context, self.request, self.__parent__), name="plone.footerportlets"\n         )\n         portlet_manager.update()\n         return portlet_manager.render()\ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex 17196a8c..85770af3 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -32,11 +32,12 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'plone.app.relationfield\')\n+    pkg_resources.get_distribution("plone.app.relationfield")\n except pkg_resources.DistributionNotFound:\n     HAS_RELATIONFIELD = False\n else:\n     from plone.app.relationfield.behavior import IRelatedItems\n+\n     HAS_RELATIONFIELD = True\n \n # XXX needs refactoring, since Plone 5 we have PAM in core.\n@@ -50,9 +51,10 @@ class DocumentActionsViewlet(ViewletBase):\n     def update(self):\n         super(DocumentActionsViewlet, self).update()\n \n-        self.context_state = getMultiAdapter((self.context, self.request),\n-                                             name=u\'plone_context_state\')\n-        self.actions = self.context_state.actions(\'document_actions\')\n+        self.context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n+        self.actions = self.context_state.actions("document_actions")\n \n \n class DocumentBylineViewlet(ViewletBase):\n@@ -61,41 +63,40 @@ class DocumentBylineViewlet(ViewletBase):\n \n     def update(self):\n         super(DocumentBylineViewlet, self).update()\n-        self.context_state = getMultiAdapter((self.context, self.request),\n-                                             name=u\'plone_context_state\')\n+        self.context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         self.anonymous = self.portal_state.anonymous()\n         self.has_pam = HAS_PAM\n \n     def show(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n         return not self.anonymous or settings.allow_anon_views_about\n \n     def creator(self):\n         return self.context.Creator()\n \n     def author(self):\n-        membership = getToolByName(self.context, \'portal_membership\')\n+        membership = getToolByName(self.context, "portal_membership")\n         return membership.getMemberInfo(self.creator())\n \n     def authorname(self):\n         author = self.author()\n-        return author and author[\'fullname\'] or self.creator()\n+        return author and author["fullname"] or self.creator()\n \n     def isExpired(self):\n-        if base_hasattr(self.context, \'expires\'):\n+        if base_hasattr(self.context, "expires"):\n             return self.context.expires().isPast()\n         return False\n \n     def toLocalizedTime(self, time, long_format=None, time_only=None):\n         """Convert time to localized time\n         """\n-        util = getToolByName(self.context, \'translation_service\')\n-        return util.ulocalized_time(time, long_format, time_only, self.context,\n-                                    domain=\'plonelocales\')\n+        util = getToolByName(self.context, "translation_service")\n+        return util.ulocalized_time(\n+            time, long_format, time_only, self.context, domain="plonelocales"\n+        )\n \n     def pub_date(self):\n         """Return object effective date.\n@@ -105,16 +106,14 @@ def pub_date(self):\n         """\n         # check if we are allowed to display publication date\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n \n         if not settings.display_publication_date_in_byline:\n             return None\n \n         # check if we have Effective Date set\n         date = self.context.EffectiveDate()\n-        if not date or date == \'None\':\n+        if not date or date == "None":\n             return None\n \n         return DateTime(date)\n@@ -123,13 +122,12 @@ def get_translations(self):\n         cts = []\n         if ITranslatable.providedBy(self.context):\n             t_langs = translated_languages(self.context)\n-            context_translations = ITranslationManager(\n-                self.context).get_translations()\n+            context_translations = ITranslationManager(self.context).get_translations()\n             for lang in t_langs:\n                 cts.append(\n                     dict(\n                         lang_native=lang.title,\n-                        url=context_translations[lang.value].absolute_url()\n+                        url=context_translations[lang.value].absolute_url(),\n                     )\n                 )\n         return cts\n@@ -138,14 +136,16 @@ def get_translations(self):\n class HistoryByLineView(BrowserView):\n     """ DocumentByLine information for content history view """\n \n-    index = ViewPageTemplateFile(\'history_view.pt\')\n+    index = ViewPageTemplateFile("history_view.pt")\n \n     def update(self):\n         context = self.context\n-        self.portal_state = getMultiAdapter((context, self.request),\n-                                            name=u\'plone_portal_state\')\n-        self.context_state = getMultiAdapter((self.context, self.request),\n-                                             name=u\'plone_context_state\')\n+        self.portal_state = getMultiAdapter(\n+            (context, self.request), name=u"plone_portal_state"\n+        )\n+        self.context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         self.anonymous = self.portal_state.anonymous()\n         self.has_pam = HAS_PAM\n \n@@ -156,16 +156,12 @@ def __call__(self):\n \n     def show(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n         return not self.anonymous or settings.allow_anon_views_about\n \n     def show_history(self):\n         has_access_preview_versions_permission = _checkPermission(\n-            \'CMFEditions: Access previous versions\',\n-            self.context\n+            "CMFEditions: Access previous versions", self.context\n         )\n         if not has_access_preview_versions_permission:\n             return False\n@@ -176,50 +172,52 @@ def show_history(self):\n         return False\n \n     def locked_icon(self):\n-        if not getSecurityManager().checkPermission(\'Modify portal content\',\n-                                                    self.context):\n+        if not getSecurityManager().checkPermission(\n+            "Modify portal content", self.context\n+        ):\n             return ""\n \n         locked = False\n-        lock_info = queryMultiAdapter((self.context, self.request),\n-                                      name=\'plone_lock_info\')\n+        lock_info = queryMultiAdapter(\n+            (self.context, self.request), name="plone_lock_info"\n+        )\n         if lock_info is not None:\n             locked = lock_info.is_locked()\n         else:\n             context = aq_inner(self.context)\n-            lockable = getattr(\n-                context.aq_explicit, \'wl_isLocked\', None) is not None\n+            lockable = getattr(context.aq_explicit, "wl_isLocked", None) is not None\n             locked = lockable and context.wl_isLocked()\n \n         if not locked:\n             return ""\n \n         portal = self.portal_state.portal()\n-        icon = portal.restrictedTraverse(\'lock_icon.png\')\n-        return icon.tag(title=\'Locked\')\n+        icon = portal.restrictedTraverse("lock_icon.png")\n+        return icon.tag(title="Locked")\n \n     def creator(self):\n         return self.context.Creator()\n \n     def author(self):\n-        membership = getToolByName(self.context, \'portal_membership\')\n+        membership = getToolByName(self.context, "portal_membership")\n         return membership.getMemberInfo(self.creator())\n \n     def authorname(self):\n         author = self.author()\n-        return author and author[\'fullname\'] or self.creator()\n+        return author and author["fullname"] or self.creator()\n \n     def isExpired(self):\n-        if base_hasattr(self.context, \'expires\'):\n+        if base_hasattr(self.context, "expires"):\n             return self.context.expires().isPast()\n         return False\n \n     def toLocalizedTime(self, time, long_format=None, time_only=None):\n         """Convert time to localized time\n         """\n-        util = getToolByName(self.context, \'translation_service\')\n-        return util.ulocalized_time(time, long_format, time_only, self.context,\n-                                    domain=\'plonelocales\')\n+        util = getToolByName(self.context, "translation_service")\n+        return util.ulocalized_time(\n+            time, long_format, time_only, self.context, domain="plonelocales"\n+        )\n \n     def pub_date(self):\n         """Return object effective date.\n@@ -229,16 +227,14 @@ def pub_date(self):\n         """\n         # check if we are allowed to display publication date\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n \n         if not settings.display_publication_date_in_byline:\n             return None\n \n         # check if we have Effective Date set\n         date = self.context.EffectiveDate()\n-        if not date or date == \'None\':\n+        if not date or date == "None":\n             return None\n \n         return DateTime(date)\n@@ -247,13 +243,12 @@ def get_translations(self):\n         cts = []\n         if ITranslatable.providedBy(self.context):\n             t_langs = translated_languages(self.context)\n-            context_translations = ITranslationManager(\n-                self.context).get_translations()\n+            context_translations = ITranslationManager(self.context).get_translations()\n             for lang in t_langs:\n                 cts.append(\n                     dict(\n                         lang_native=lang.title,\n-                        url=context_translations[lang.value].absolute_url()\n+                        url=context_translations[lang.value].absolute_url(),\n                     )\n                 )\n \n@@ -269,8 +264,8 @@ def related_items(self):\n         res = ()\n \n         # Archetypes\n-        if base_hasattr(context, \'getRawRelatedItems\'):\n-            catalog = getToolByName(context, \'portal_catalog\')\n+        if base_hasattr(context, "getRawRelatedItems"):\n+            catalog = getToolByName(context, "portal_catalog")\n             related = context.getRawRelatedItems()\n             if not related:\n                 return ()\n@@ -283,6 +278,7 @@ def related_items(self):\n \n                 def _key(brain):\n                     return positions.get(brain.UID, -1)\n+\n                 res.sort(key=_key)\n \n         # Dexterity\n@@ -302,7 +298,7 @@ def related2brains(self, related):\n         :type related: list of relations\n         :return: list of catalog brains\n         """\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         brains = []\n         for r in related:\n             path = r.to_path\n@@ -323,17 +319,16 @@ class WorkflowHistoryViewlet(ViewletBase):\n     @memoize\n     def getUserInfo(self, userid):\n         actor = dict(fullname=userid)\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        mt = getToolByName(self.context, "portal_membership")\n         info = mt.getMemberInfo(userid)\n         if info is None:\n             return dict(actor_home="", actor=actor)\n \n         fullname = info.get("fullname", None)\n         if fullname:\n-            actor[\'fullname\'] = fullname\n+            actor["fullname"] = fullname\n \n-        return dict(actor=actor,\n-                    actor_home="%s/author/%s" % (self.site_url, userid))\n+        return dict(actor=actor, actor_home="%s/author/%s" % (self.site_url, userid))\n \n     def workflowHistory(self, complete=True):\n         """Return workflow history of this context.\n@@ -342,46 +337,52 @@ def workflowHistory(self, complete=True):\n         """\n         context = aq_inner(self.context)\n         # check if the current user has the proper permissions\n-        if not (_checkPermission(\'Request review\', context) or\n-                _checkPermission(\'Review portal content\', context)):\n+        if not (\n+            _checkPermission("Request review", context)\n+            or _checkPermission("Review portal content", context)\n+        ):\n             return []\n \n-        workflow = getToolByName(context, \'portal_workflow\')\n+        workflow = getToolByName(context, "portal_workflow")\n         review_history = []\n \n         try:\n             # get total history\n-            review_history = workflow.getInfoFor(context, \'review_history\')\n+            review_history = workflow.getInfoFor(context, "review_history")\n \n             if not complete:\n                 # filter out automatic transitions.\n-                review_history = [r for r in review_history if r[\'action\']]\n+                review_history = [r for r in review_history if r["action"]]\n             else:\n                 review_history = list(review_history)\n \n             portal_type = context.portal_type\n-            anon = _(u\'label_anonymous_user\', default=u\'Anonymous User\')\n+            anon = _(u"label_anonymous_user", default=u"Anonymous User")\n \n             for r in review_history:\n-                r[\'type\'] = \'workflow\'\n-                r[\'transition_title\'] = workflow.getTitleForTransitionOnType(\n-                    r[\'action\'], portal_type) or _("Create")\n-                r[\'state_title\'] = workflow.getTitleForStateOnType(\n-                    r[\'review_state\'], portal_type)\n-                actorid = r[\'actor\']\n-                r[\'actorid\'] = actorid\n+                r["type"] = "workflow"\n+                r["transition_title"] = workflow.getTitleForTransitionOnType(\n+                    r["action"], portal_type\n+                ) or _("Create")\n+                r["state_title"] = workflow.getTitleForStateOnType(\n+                    r["review_state"], portal_type\n+                )\n+                actorid = r["actor"]\n+                r["actorid"] = actorid\n                 if actorid is None:\n                     # action performed by an anonymous user\n-                    r[\'actor\'] = {\'username\': anon, \'fullname\': anon}\n-                    r[\'actor_home\'] = \'\'\n+                    r["actor"] = {"username": anon, "fullname": anon}\n+                    r["actor_home"] = ""\n                 else:\n                     r.update(self.getUserInfo(actorid))\n             review_history.reverse()\n \n         except WorkflowException:\n-            log(\'plone.app.layout.viewlets.content: \'\n-                \'%s has no associated workflow\' % context.absolute_url(),\n-                severity=logging.DEBUG)\n+            log(\n+                "plone.app.layout.viewlets.content: "\n+                "%s has no associated workflow" % context.absolute_url(),\n+                severity=logging.DEBUG,\n+            )\n \n         return review_history\n \n@@ -402,41 +403,42 @@ def revisionHistory(self):\n         context_url = context.absolute_url()\n         history = rt.getHistoryMetadata(context)\n         portal_diff = getToolByName(context, "portal_diff", None)\n-        can_diff = portal_diff is not None \\\n+        can_diff = (\n+            portal_diff is not None\n             and len(portal_diff.getDiffForPortalType(context.portal_type)) > 0\n+        )\n         can_revert = _checkPermission(\n-            \'CMFEditions: Revert to previous versions\', context)\n+            "CMFEditions: Revert to previous versions", context\n+        )\n \n         def morphVersionDataToHistoryFormat(vdata, version_id):\n             meta = vdata["metadata"]["sys_metadata"]\n             userid = meta["principal"]\n             token = createToken()\n-            preview_url = \\\n-                "%s/versions_history_form?version_id=%s&_authenticator=%s#version_preview" % (  # noqa\n-                    context_url,\n-                    version_id,\n-                    token\n-                )\n+            preview_url = (\n+                "%s/versions_history_form?version_id=%s&_authenticator=%s#version_preview"\n+                % (context_url, version_id, token)  # noqa\n+            )\n             info = dict(\n-                type=\'versioning\',\n+                type="versioning",\n                 action=_(u"Edited"),\n                 transition_title=_(u"Edited"),\n                 actorid=userid,\n                 time=meta["timestamp"],\n-                comments=meta[\'comment\'],\n+                comments=meta["comment"],\n                 version_id=version_id,\n                 preview_url=preview_url,\n             )\n             if can_diff:\n                 if version_id > 0:\n                     info["diff_previous_url"] = (\n-                        "%s/@@history?one=%s&two=%s&_authenticator=%s" %\n-                        (context_url, version_id, version_id - 1, token)\n+                        "%s/@@history?one=%s&two=%s&_authenticator=%s"\n+                        % (context_url, version_id, version_id - 1, token)\n                     )\n                 if not rt.isUpToDate(context, version_id):\n                     info["diff_current_url"] = (\n-                        "%s/@@history?one=current&two=%s&_authenticator=%s" %\n-                        (context_url, version_id, token)\n+                        "%s/@@history?one=current&two=%s&_authenticator=%s"\n+                        % (context_url, version_id, token)\n                     )\n             if can_revert:\n                 info["revert_url"] = "%s/revertversion" % context_url\n@@ -455,8 +457,10 @@ def morphVersionDataToHistoryFormat(vdata, version_id):\n         # Count backwards from most recent to least recent\n         for i in range(history.getLength(countPurged=False) - 1, -1, -1):\n             version_history.append(\n-                morphVersionDataToHistoryFormat(retrieve(i, countPurged=False),\n-                                                getId(i, countPurged=False)))\n+                morphVersionDataToHistoryFormat(\n+                    retrieve(i, countPurged=False), getId(i, countPurged=False)\n+                )\n+            )\n \n         return version_history\n \n@@ -482,7 +486,6 @@ def toLocalizedTime(self, time, long_format=None, time_only=None):\n \n \n class ContentHistoryView(ContentHistoryViewlet):\n-\n     def __init__(self, context, request):\n         super(ContentHistoryView, self).__init__(context, request, None, None)\n         self.update()\ndiff --git a/plone/app/layout/viewlets/globalstatusmessage.py b/plone/app/layout/viewlets/globalstatusmessage.py\nindex c1eeb5fe..1051234e 100644\n--- a/plone/app/layout/viewlets/globalstatusmessage.py\n+++ b/plone/app/layout/viewlets/globalstatusmessage.py\n@@ -7,7 +7,7 @@\n class GlobalStatusMessage(ViewletBase):\n     """Display messages to the current user"""\n \n-    index = ViewPageTemplateFile(\'globalstatusmessage.pt\')\n+    index = ViewPageTemplateFile("globalstatusmessage.pt")\n \n     def update(self):\n         super(GlobalStatusMessage, self).update()\ndiff --git a/plone/app/layout/viewlets/httpheaders.py b/plone/app/layout/viewlets/httpheaders.py\nindex d6fe6dcd..df9a94fe 100644\n--- a/plone/app/layout/viewlets/httpheaders.py\n+++ b/plone/app/layout/viewlets/httpheaders.py\n@@ -23,13 +23,13 @@ class HTTPCachingHeaders(HeaderViewlet):\n     """\n \n     def getHeaders(self):\n-        lang = getattr(self.context, \'Language\', None)\n+        lang = getattr(self.context, "Language", None)\n         if callable(lang):\n             lang = lang()\n         if not lang:\n             lang = self.portal_state.default_language()\n         return [\n-            (\'Content-Type\', \'text/html;charset=utf-8\'),\n-            (\'Expires\', \'Sat, 1 Jan 2000 00:00:00 GMT\'),\n-            (\'Content-Language\', lang)\n+            ("Content-Type", "text/html;charset=utf-8"),\n+            ("Expires", "Sat, 1 Jan 2000 00:00:00 GMT"),\n+            ("Content-Language", lang),\n         ]\ndiff --git a/plone/app/layout/viewlets/social.py b/plone/app/layout/viewlets/social.py\nindex 2f528d0a..df38d0c8 100644\n--- a/plone/app/layout/viewlets/social.py\n+++ b/plone/app/layout/viewlets/social.py\n@@ -14,16 +14,15 @@\n \n \n class SocialTagsViewlet(TitleViewlet):\n-\n     def head_tag_filter(self, value):\n         if not isinstance(value, dict):\n             return\n-        return \'itemprop\' not in value\n+        return "itemprop" not in value\n \n     def body_tag_filter(self, value):\n         if not isinstance(value, dict):\n             return\n-        return \'itemprop\' in value\n+        return "itemprop" in value\n \n     @property\n     def tags(self):\n@@ -39,13 +38,14 @@ def body_tags(self):\n     def _get_tags(self):\n         site = getSite()\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISocialMediaSchema, prefix="plone",\n-                                         check=False)\n+        settings = registry.forInterface(\n+            ISocialMediaSchema, prefix="plone", check=False\n+        )\n \n         if not settings.share_social_data:\n             return []\n \n-        portal_membership = getToolByName(site, \'portal_membership\')\n+        portal_membership = getToolByName(site, "portal_membership")\n         is_anonymous = bool(portal_membership.isAnonymousUser())\n         if not is_anonymous:\n             return []\n@@ -58,16 +58,21 @@ def _get_tags(self):\n             dict(property="og:type", content="website"),\n         ]\n         if settings.twitter_username:\n-            tags.append(dict(name="twitter:site",\n-                             content="@" + settings.twitter_username.lstrip(\'@\')))\n+            tags.append(\n+                dict(\n+                    name="twitter:site",\n+                    content="@" + settings.twitter_username.lstrip("@"),\n+                )\n+            )\n         if settings.facebook_app_id:\n-            tags.append(dict(property="fb:app_id",\n-                             content=settings.facebook_app_id))\n+            tags.append(dict(property="fb:app_id", content=settings.facebook_app_id))\n         if settings.facebook_username:\n             tags.append(\n-                dict(property="og:article:publisher",\n-                     content="https://www.facebook.com/" +\n-                     settings.facebook_username))\n+                dict(\n+                    property="og:article:publisher",\n+                    content="https://www.facebook.com/" + settings.facebook_username,\n+                )\n+            )\n \n         # reuse syndication since that packages the data\n         # the way we\'d prefer likely\n@@ -76,39 +81,51 @@ def _get_tags(self):\n         if item is None:\n             item = BaseItem(self.context, feed)\n \n-        tags.extend([\n-            dict(itemprop="description", content=item.description),\n-            dict(itemprop="url", content=item.link),\n-            dict(property="og:description", content=item.description),\n-            dict(property="og:url", content=item.link),\n-        ])\n+        tags.extend(\n+            [\n+                dict(itemprop="description", content=item.description),\n+                dict(itemprop="url", content=item.link),\n+                dict(property="og:description", content=item.description),\n+                dict(property="og:url", content=item.link),\n+            ]\n+        )\n \n         found_image = False\n         if item.has_enclosure and item.file_length > 0:\n-            if item.file_type.startswith(\'image\'):\n+            if item.file_type.startswith("image"):\n                 found_image = True\n-                tags.extend([\n-                    dict(property="og:image", content=item.file_url),\n-                    dict(itemprop="image", content=item.file_url),\n-                    dict(property="og:image:type", content=item.file_type)\n-                ])\n-            elif (item.file_type.startswith(\'video\') or\n-                    item.file_type == "application/x-shockwave-flash"):\n-                tags.extend([\n-                    dict(property="og:video", content=item.file_url),\n-                    dict(property="og:video:type", content=item.file_type)\n-                ])\n-            elif item.file_type.startswith(\'audio\'):\n-                tags.extend([\n-                    dict(property="og:audio", content=item.file_url),\n-                    dict(property="og:audio:type", content=item.file_type)\n-                ])\n+                tags.extend(\n+                    [\n+                        dict(property="og:image", content=item.file_url),\n+                        dict(itemprop="image", content=item.file_url),\n+                        dict(property="og:image:type", content=item.file_type),\n+                    ]\n+                )\n+            elif (\n+                item.file_type.startswith("video")\n+                or item.file_type == "application/x-shockwave-flash"\n+            ):\n+                tags.extend(\n+                    [\n+                        dict(property="og:video", content=item.file_url),\n+                        dict(property="og:video:type", content=item.file_type),\n+                    ]\n+                )\n+            elif item.file_type.startswith("audio"):\n+                tags.extend(\n+                    [\n+                        dict(property="og:audio", content=item.file_url),\n+                        dict(property="og:audio:type", content=item.file_type),\n+                    ]\n+                )\n \n         if not found_image:\n             url = getSiteLogo()\n-            tags.extend([\n-                dict(property="og:image", content=url),\n-                dict(itemprop="image", content=url),\n-                dict(property="og:image:type", content=\'image/png\')\n-            ])\n+            tags.extend(\n+                [\n+                    dict(property="og:image", content=url),\n+                    dict(itemprop="image", content=url),\n+                    dict(property="og:image:type", content="image/png"),\n+                ]\n+            )\n         return tags\ndiff --git a/plone/app/layout/viewlets/tests/base.py b/plone/app/layout/viewlets/tests/base.py\nindex 09d5d083..ffcc3659 100644\n--- a/plone/app/layout/viewlets/tests/base.py\n+++ b/plone/app/layout/viewlets/tests/base.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n+from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.layout.testing import TEST_USER_ID\n \n import unittest\n@@ -11,9 +11,9 @@ class ViewletsTestCase(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        self.folder = self.portal["Members"][TEST_USER_ID]\n \n \n class ViewletsFunctionalTestCase(unittest.TestCase):\n@@ -21,6 +21,6 @@ class ViewletsFunctionalTestCase(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        self.folder = self.portal["Members"][TEST_USER_ID]\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex dcc3a688..0db75c9a 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -20,9 +20,11 @@\n \n \n # Red pixel with filename pixel.png\n-SITE_LOGO_BASE64 = b\'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA\'\\\n-                   b\'AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA\'\\\n-                   b\'AAElFTkSuQmCC\'\n+SITE_LOGO_BASE64 = (\n+    b"filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA"\n+    b"AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA"\n+    b"AAElFTkSuQmCC"\n+)\n \n \n class TestViewletBase(ViewletsTestCase):\n@@ -30,10 +32,10 @@ class TestViewletBase(ViewletsTestCase):\n     """\n \n     def test_update(self):\n-        request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.portal.invokeFactory(\'Folder\', \'f1\')\n-        context = getattr(self.portal, \'f1\')\n+        request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", "f1")\n+        context = getattr(self.portal, "f1")\n         alsoProvides(context, INavigationRoot)\n         viewlet = ViewletBase(context, request, None, None)\n         viewlet.update()\n@@ -47,8 +49,7 @@ class TestContentViewsViewlet(ViewletsTestCase):\n \n     def setUp(self):\n         super(TestContentViewsViewlet, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'test\',\n-                                  title=\'Test default page\')\n+        self.folder.invokeFactory("Document", "test", title="Test default page")\n         self.folder.title = u"Folder"\n \n     def _invalidateRequestMemoizations(self):\n@@ -59,36 +60,37 @@ def _invalidateRequestMemoizations(self):\n \n     def test_set1_on_portal_root(self):\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.portal.absolute_url()\n         view = ContentViewsViewlet(self.portal, self.app.REQUEST, None)\n         view.update()\n-        self.assertEqual(view.tabSet1[0][\'id\'], \'folderContents\')\n+        self.assertEqual(view.tabSet1[0]["id"], "folderContents")\n \n     def test_set1_NonStructuralFolder(self):\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url()\n         directlyProvides(self.folder, INonStructuralFolder)\n         view = ContentViewsViewlet(self.folder, self.app.REQUEST, None)\n         view.update()\n         noLongerProvides(self.folder, INonStructuralFolder)\n-        self.assertEqual(1, len([t for t in view.tabSet1 if t[\n-                         \'id\'] == \'folderContents\']))\n+        self.assertEqual(\n+            1, len([t for t in view.tabSet1 if t["id"] == "folderContents"])\n+        )\n \n     def test_set1(self):\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = \'%s/edit?_authenticator=%s\' % (\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = "%s/edit?_authenticator=%s" % (\n             self.folder.test.absolute_url(),\n-            auth.createToken()\n+            auth.createToken(),\n         )\n         view = ContentViewsViewlet(self.folder.test, self.app.REQUEST, None)\n         view.update()\n         self.assertEqual(\n-            1, len([t for t in view.tabSet1 if t[\'id\'] == \'folderContents\']))\n-        self.assertEqual(\n-            [\'edit\'], [t[\'id\'] for t in view.tabSet1 if t[\'selected\']])\n+            1, len([t for t in view.tabSet1 if t["id"] == "folderContents"])\n+        )\n+        self.assertEqual(["edit"], [t["id"] for t in view.tabSet1 if t["selected"]])\n \n \n class TestTitleViewsViewlet(ViewletsTestCase):\n@@ -97,8 +99,7 @@ class TestTitleViewsViewlet(ViewletsTestCase):\n \n     def setUp(self):\n         super(TestTitleViewsViewlet, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'test\',\n-                                  title=\'Test default page\')\n+        self.folder.invokeFactory("Document", "test", title="Test default page")\n         self.folder.title = u"Folder"\n \n     def _invalidateRequestMemoizations(self):\n@@ -111,49 +112,44 @@ def test_title_viewlet_on_portal(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.portal.absolute_url()\n         viewlet = TitleViewlet(self.portal, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, \'Plone site\')\n+        self.assertEqual(viewlet.site_title, "Plone site")\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n-        site_settings.site_title = u\'S\xc3\xbcper Site\'\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n+        site_settings.site_title = u"S\xc3\xbcper Site"\n         self._invalidateRequestMemoizations()\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, u\'S\\xfcper Site\')\n+        self.assertEqual(viewlet.site_title, u"S\\xfcper Site")\n \n     def test_title_viewlet_on_content(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.test.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.test.absolute_url()\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title,\n-                         \'Test default page &mdash; Plone site\')\n+        self.assertEqual(viewlet.site_title, "Test default page &mdash; Plone site")\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n-        site_settings.site_title = u\'S\xc3\xbcper Site\'\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n+        site_settings.site_title = u"S\xc3\xbcper Site"\n         self._invalidateRequestMemoizations()\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title,\n-                         u\'Test default page &mdash; S\\xfcper Site\')\n+        self.assertEqual(viewlet.site_title, u"Test default page &mdash; S\\xfcper Site")\n \n     def test_title_viewlet_with_navigation_root(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.test.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.test.absolute_url()\n         directlyProvides(self.folder, INavigationRoot)\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title,\n-                         u\'Test default page &mdash; Folder\')\n+        self.assertEqual(viewlet.site_title, u"Test default page &mdash; Folder")\n \n \n class TestLogoViewlet(ViewletsTestCase):\n@@ -177,21 +173,22 @@ def test_logo_viewlet_portal_root_default(self):\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertEqual(\n-            viewlet.img_src, \'{0}/logo.png\'.format(self.portal.absolute_url()))\n+            viewlet.img_src, "{0}/logo.png".format(self.portal.absolute_url())\n+        )\n \n     def test_logo_viewlet_portal_root_registry(self):\n         """When a logo is set, and viewlet is opened on a non-navigation root,\n         obtain the registry logo from the portal.\n         """\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n         settings.site_logo = SITE_LOGO_BASE64\n \n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertTrue(\n             viewlet.img_src,\n-            \'{0}/@@site-logo/pixel.png\'.format(self.portal.absolute_url())\n+            "{0}/@@site-logo/pixel.png".format(self.portal.absolute_url()),\n         )\n \n     def test_logo_viewlet_navigation_root_default(self):\n@@ -202,14 +199,15 @@ def test_logo_viewlet_navigation_root_default(self):\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertEqual(\n-            viewlet.img_src, \'{0}/logo.png\'.format(self.folder.absolute_url()))\n+            viewlet.img_src, "{0}/logo.png".format(self.folder.absolute_url())\n+        )\n \n     def test_viewlet_navigation_root_registry(self):\n         """When a logo is set, and viewlet is opened on a navigation root,\n         obtain the registry logo from the navigation root.\n         """\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n         settings.site_logo = SITE_LOGO_BASE64\n \n         # Set fake site after registry setup...\n@@ -218,7 +216,7 @@ def test_viewlet_navigation_root_registry(self):\n         viewlet.update()\n         self.assertTrue(\n             viewlet.img_src,\n-            \'{0}/@@site-logo/pixel.png\'.format(self.folder.absolute_url())\n+            "{0}/@@site-logo/pixel.png".format(self.folder.absolute_url()),\n         )\n \n \n@@ -227,13 +225,13 @@ class TestGlobalSectionsViewlet(ViewletsTestCase):\n     """\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.registry = getUtility(IRegistry)\n-        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+        self.folder = self.portal["Members"][TEST_USER_ID]\n         self.portal.Members.reindexObject()\n         self.folder.reindexObject()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def _get_navtree(self, context=None):\n         if context is None:\n@@ -244,39 +242,37 @@ def _get_navtree(self, context=None):\n     def test_selectedtabs(self):\n         """ Test selected tabs the simplest case\n         """\n-        request = self.layer[\'request\']\n-        request[\'URL\'] = self.folder.absolute_url()\n+        request = self.layer["request"]\n+        request["URL"] = self.folder.absolute_url()\n         gsv = GlobalSectionsViewlet(self.folder, request, None)\n         gsv.update()\n-        self.assertEqual(gsv.selected_tabs, {\'portal\': \'Members\'})\n-        self.assertEqual(gsv.selected_portal_tab, \'Members\')\n+        self.assertEqual(gsv.selected_tabs, {"portal": "Members"})\n+        self.assertEqual(gsv.selected_portal_tab, "Members")\n \n     def test_selectedtabs_navroot(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'navroot\', title=\'My new root\')\n-        navroot = self.portal[\'navroot\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "navroot", title="My new root")\n+        navroot = self.portal["navroot"]\n         alsoProvides(navroot, INavigationRoot)\n-        navroot.invokeFactory(\'Folder\', \'abc\', title=\'short\')\n-        navroot.invokeFactory(\'Folder\',\n-                              \'xyz\',\n-                              title=\'Folder with a looong name\')\n-        request = self.layer[\'request\']\n-        request[\'URL\'] = navroot[\'abc\'].absolute_url()\n+        navroot.invokeFactory("Folder", "abc", title="short")\n+        navroot.invokeFactory("Folder", "xyz", title="Folder with a looong name")\n+        request = self.layer["request"]\n+        request["URL"] = navroot["abc"].absolute_url()\n         gsv = GlobalSectionsViewlet(navroot, request, None)\n         gsv.update()\n-        self.assertEqual(gsv.selected_tabs, {\'portal\': \'abc\'})\n-        self.assertEqual(gsv.selected_portal_tab, \'abc\')\n+        self.assertEqual(gsv.selected_tabs, {"portal": "abc"})\n+        self.assertEqual(gsv.selected_portal_tab, "abc")\n \n     def test_globalnav_respects_types_use_view_action_in_listings(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Image\', \'image\', title=u\'S\xc3\xb6me Image\')\n-        self.portal.invokeFactory(\'File\', \'file\', title=u\'Some File\')\n-        self.portal.invokeFactory(\'Document\', \'doc\', title=u\'Some D\xc3\xb6cument\')\n-        request = self.layer[\'request\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Image", "image", title=u"S\xc3\xb6me Image")\n+        self.portal.invokeFactory("File", "file", title=u"Some File")\n+        self.portal.invokeFactory("Document", "doc", title=u"Some D\xc3\xb6cument")\n+        request = self.layer["request"]\n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n         gsv.update()\n         html = gsv.render()\n@@ -287,40 +283,34 @@ def test_globalnav_respects_types_use_view_action_in_listings(self):\n     def test_globalnav_navigation_depth(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = getUtility(IRegistry)\n-        registry[\'plone.navigation_depth\'] = 3\n-        self.portal.invokeFactory(\'Folder\', \'folder\', title=u\'F\xc3\xb6lder\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\', title=u\'Folder 2\')\n-        self.portal.invokeFactory(\'Folder\', \'folder3\', title=u\'Folder 3\')\n+        registry["plone.navigation_depth"] = 3\n+        self.portal.invokeFactory("Folder", "folder", title=u"F\xc3\xb6lder")\n+        self.portal.invokeFactory("Folder", "folder2", title=u"Folder 2")\n+        self.portal.invokeFactory("Folder", "folder3", title=u"Folder 3")\n         folder = self.portal.folder\n-        folder.invokeFactory(\'Folder\', \'subfolder\', title=u\'Subfolder\')\n-        folder.invokeFactory(\'Folder\', \'subfolder2\', title=u\'S\xc3\xbcbfolder 2\')\n+        folder.invokeFactory("Folder", "subfolder", title=u"Subfolder")\n+        folder.invokeFactory("Folder", "subfolder2", title=u"S\xc3\xbcbfolder 2")\n         subfolder = folder.subfolder\n-        subfolder.invokeFactory(\'Folder\', \'subsubfolder\', title=u\'Sub2folder\')\n+        subfolder.invokeFactory("Folder", "subsubfolder", title=u"Sub2folder")\n \n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         navtree = self._get_navtree()\n         self.assertListEqual(\n             sorted(navtree),\n-            [\n-                \'/plone\',\n-                \'/plone/Members\',\n-                \'/plone/folder\',\n-                \'/plone/folder/subfolder\'\n-            ],\n+            ["/plone", "/plone/Members", "/plone/folder", "/plone/folder/subfolder"],\n         )\n         self.assertListEqual(\n-            [x[\'title\'] for x in navtree[\'/plone\']],\n-            [u\'Home\', u\'Members\', u\'F\xc3\xb6lder\', u\'Folder 2\', u\'Folder 3\'],\n+            [x["title"] for x in navtree["/plone"]],\n+            [u"Home", u"Members", u"F\xc3\xb6lder", u"Folder 2", u"Folder 3"],\n         )\n         self.assertListEqual(\n-            [x[\'title\'] for x in navtree[\'/plone/folder\']],\n-            [u\'Subfolder\', u\'S\xc3\xbcbfolder 2\'],\n+            [x["title"] for x in navtree["/plone/folder"]],\n+            [u"Subfolder", u"S\xc3\xbcbfolder 2"],\n         )\n         self.assertListEqual(\n-            [x[\'title\'] for x in navtree[\'/plone/folder/subfolder\']],\n-            [u\'Sub2folder\'],\n+            [x["title"] for x in navtree["/plone/folder/subfolder"]], [u"Sub2folder"],\n         )\n \n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n@@ -328,231 +318,210 @@ def test_globalnav_navigation_depth(self):\n         self.assertTrue(gsv.render())\n \n     def test_default_settings(self):\n-        self.assertEqual(self.registry[\'plone.navigation_depth\'], 3)\n+        self.assertEqual(self.registry["plone.navigation_depth"], 3)\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members"],\n         )\n \n     def test_do_not_generate_tabs(self):\n-        self.registry[\'plone.generate_tabs\'] = False\n+        self.registry["plone.generate_tabs"] = False\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\'])\n+        self.assertListEqual(sorted(navtree), ["/plone"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\'],\n+            [item["path"] for item in navtree["/plone"]], ["/plone/index_html"],\n         )\n \n     def test_generate_tabs_non_folderish(self):\n-        self.registry[\'plone.nonfolderish_tabs\'] = False\n+        self.registry["plone.nonfolderish_tabs"] = False\n         self.portal.invokeFactory(\n-            \'Document\',\n-            \'test-doc\',\n-            title=u\'A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)\',\n+            "Document", "test-doc", title=u"A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)",\n         )\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members"],\n         )\n \n     def test_generate_tabs_sorted(self):\n         self.portal.invokeFactory(\n-            \'Document\',\n-            \'test-doc-2\',\n-            title=u\'Document 2\',\n+            "Document", "test-doc-2", title=u"Document 2",\n         )\n         self.portal.invokeFactory(\n-            \'Document\',\n-            \'test-doc-1\',\n-            title=u\'Document 1\',\n+            "Document", "test-doc-1", title=u"Document 1",\n         )\n         navtree = self._get_navtree()\n         # default sorting by position in parent\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [item["path"] for item in navtree["/plone"]],\n             [\n-                \'/plone/index_html\',\n-                \'/plone/Members\',\n-                \'/plone/test-doc-2\',\n-                \'/plone/test-doc-1\',\n+                "/plone/index_html",\n+                "/plone/Members",\n+                "/plone/test-doc-2",\n+                "/plone/test-doc-1",\n             ],\n         )\n \n         # check we can sort by title\n-        self.registry[\'plone.sort_tabs_on\'] = u\'sortable_title\'\n+        self.registry["plone.sort_tabs_on"] = u"sortable_title"\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [item["path"] for item in navtree["/plone"]],\n             [\n-                \'/plone/index_html\',\n-                \'/plone/Members\',\n-                \'/plone/test-doc-1\',\n-                \'/plone/test-doc-2\',\n+                "/plone/index_html",\n+                "/plone/Members",\n+                "/plone/test-doc-1",\n+                "/plone/test-doc-2",\n             ],\n         )\n \n         # check we can reverse sorting\n-        self.registry[\'plone.sort_tabs_reversed\'] = True\n+        self.registry["plone.sort_tabs_reversed"] = True\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [item["path"] for item in navtree["/plone"]],\n             [\n-                \'/plone/index_html\',\n-                \'/plone/test-doc-2\',\n-                \'/plone/test-doc-1\',\n-                \'/plone/Members\',\n+                "/plone/index_html",\n+                "/plone/test-doc-2",\n+                "/plone/test-doc-1",\n+                "/plone/Members",\n             ],\n         )\n \n     def test_generate_tabs_displayed_types(self):\n-        self.registry[\'plone.displayed_types\'] = (\n-            u\'Image\',\n-            u\'File\',\n-            u\'Link\',\n-            u\'News Item\',\n-            u\'Document\',\n-            u\'Event\',\n+        self.registry["plone.displayed_types"] = (\n+            u"Image",\n+            u"File",\n+            u"Link",\n+            u"News Item",\n+            u"Document",\n+            u"Event",\n         )\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\n-                \'/plone/index_html\',\n-            ],\n+            [item["path"] for item in navtree["/plone"]], ["/plone/index_html",],\n         )\n \n     def test_generate_tabs_filter_on_state(self):\n-        self.registry[\'plone.filter_on_workflow\'] = True\n+        self.registry["plone.filter_on_workflow"] = True\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\n-                \'/plone/index_html\',\n-            ],\n+            [item["path"] for item in navtree["/plone"]], ["/plone/index_html",],\n         )\n-        self.registry[\'plone.workflow_states_to_show\'] = (u\'private\', )\n+        self.registry["plone.workflow_states_to_show"] = (u"private",)\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members"],\n         )\n \n         # Let\'s check this works also with deep navigation\n-        self.registry[\'plone.navigation_depth\'] = 2\n+        self.registry["plone.navigation_depth"] = 2\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone/Members\']],\n-            [\'/plone/Members/test_user_1_\'],\n+            [item["path"] for item in navtree["/plone/Members"]],\n+            ["/plone/Members/test_user_1_"],\n         )\n \n     def test_generate_tabs_exclude_from_nav(self):\n         self.portal.invokeFactory(\n-            \'Folder\',\n-            \'test-folder\',\n-            title=u\'Test folder\',\n+            "Folder", "test-folder", title=u"Test folder",\n         )\n         self.portal.invokeFactory(\n-            \'Folder\',\n-            \'excluded-folder\',\n-            title=u\'Excluded folder\',\n+            "Folder",\n+            "excluded-folder",\n+            title=u"Excluded folder",\n             exclude_from_nav=True,\n         )\n-        self.portal[\'excluded-folder\'].invokeFactory(\n-            \'Folder\',\n-            \'sub-folder\',\n-            title=u\'Sub folder\',\n+        self.portal["excluded-folder"].invokeFactory(\n+            "Folder", "sub-folder", title=u"Sub folder",\n         )\n \n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\n-                \'/plone/index_html\',\n-                \'/plone/Members\',\n-                \'/plone/test-folder\',\n-            ],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder",],\n         )\n \n         # Check also that we we have proper nesting\n-        self.registry[\'plone.navigation_depth\'] = 2\n+        self.registry["plone.navigation_depth"] = 2\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            sorted(navtree),\n-            [\'/plone\', \'/plone/Members\', \'/plone/excluded-folder\'],\n+            sorted(navtree), ["/plone", "/plone/Members", "/plone/excluded-folder"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n-            [\'/plone/excluded-folder/sub-folder\'],\n+            [item["path"] for item in navtree["/plone/excluded-folder"]],\n+            ["/plone/excluded-folder/sub-folder"],\n         )\n \n-        self.registry[\'plone.navigation_depth\'] = 1\n-        self.registry[\'plone.show_excluded_items\'] = False\n+        self.registry["plone.navigation_depth"] = 1\n+        self.registry["plone.show_excluded_items"] = False\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\'])\n+        self.assertListEqual(sorted(navtree), ["/plone"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder"],\n         )\n \n         # If we increase the navigation depth to 2 the sub folder in the\n         # exclude folder it is there but unlinked\n-        self.registry[\'plone.navigation_depth\'] = 2\n+        self.registry["plone.navigation_depth"] = 2\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            sorted(navtree),\n-            [\'/plone\', \'/plone/Members\', \'/plone/excluded-folder\'],\n+            sorted(navtree), ["/plone", "/plone/Members", "/plone/excluded-folder"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n-            [\'/plone/excluded-folder/sub-folder\'],\n+            [item["path"] for item in navtree["/plone/excluded-folder"]],\n+            ["/plone/excluded-folder/sub-folder"],\n         )\n \n-        self.portal[\'excluded-folder\'][\'sub-folder\'].exclude_from_nav = True\n-        self.portal[\'excluded-folder\'][\'sub-folder\'].reindexObject()\n+        self.portal["excluded-folder"]["sub-folder"].exclude_from_nav = True\n+        self.portal["excluded-folder"]["sub-folder"].reindexObject()\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            sorted(navtree),\n-            [\'/plone\', \'/plone/Members\'],\n+            sorted(navtree), ["/plone", "/plone/Members"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder"],\n         )\n \n         # check for \'show_excluded_items\' in navtree\n-        self.registry[\'plone.show_excluded_items\'] = True\n+        self.registry["plone.show_excluded_items"] = True\n         navtree = self._get_navtree()\n         # if we\'re not in (sub)context of an excluded item don\'t show it\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder"],\n         )\n         # but if so, keep the tree\n-        navtree = self._get_navtree(\n-            self.portal[\'excluded-folder\'][\'sub-folder\'])\n+        navtree = self._get_navtree(self.portal["excluded-folder"]["sub-folder"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\',\n-             \'/plone/excluded-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            [\n+                "/plone/index_html",\n+                "/plone/Members",\n+                "/plone/test-folder",\n+                "/plone/excluded-folder",\n+            ],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n-            [\'/plone/excluded-folder/sub-folder\'],\n+            [item["path"] for item in navtree["/plone/excluded-folder"]],\n+            ["/plone/excluded-folder/sub-folder"],\n         )\ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex 81dfdd2f..1802b573 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -5,8 +5,8 @@\n from plone.app.layout.viewlets.content import HistoryByLineView\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import logout\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.locking.interfaces import ILockable\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISecuritySchema\n@@ -19,7 +19,8 @@\n \n try:\n     import pkg_resources\n-    pkg_resources.get_distribution(\'plone.app.relationfield\')\n+\n+    pkg_resources.get_distribution("plone.app.relationfield")\n except pkg_resources.DistributionNotFound:\n     HAS_DEXTERITY = False\n     pass\n@@ -39,14 +40,11 @@ class TestDocumentBylineViewletView(ViewletsTestCase):\n \n     def setUp(self):\n         super(TestDocumentBylineViewletView, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n-        self.context = self.folder[\'doc1\']\n+        self.folder.invokeFactory("Document", "doc1", title="Document 1")\n+        self.context = self.folder["doc1"]\n \n         registry = getUtility(IRegistry)\n-        self.security_settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        self.security_settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n \n     def _get_viewlet(self):\n         request = self.app.REQUEST\n@@ -58,9 +56,7 @@ def test_pub_date(self):\n         # configure our portal to enable publication date on pages globally on\n         # the site\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n \n         settings.display_publication_date_in_byline = True\n \n@@ -111,14 +107,11 @@ class TestHistoryBylineViewletView(ViewletsTestCase):\n \n     def setUp(self):\n         super(TestHistoryBylineViewletView, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n-        self.context = self.folder[\'doc1\']\n+        self.folder.invokeFactory("Document", "doc1", title="Document 1")\n+        self.context = self.folder["doc1"]\n \n         registry = getUtility(IRegistry)\n-        self.security_settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        self.security_settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n \n     def _get_viewlet(self):\n         request = self.app.REQUEST\n@@ -174,9 +167,7 @@ def test_pub_date(self):\n         # configure our portal to enable publication date on pages globally on\n         # the site\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n \n         settings.display_publication_date_in_byline = True\n \n@@ -199,12 +190,11 @@ def test_pub_date(self):\n \n \n class TestRelatedItemsViewlet(ViewletsTestCase):\n-\n     def setUp(self):\n         super(TestRelatedItemsViewlet, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n-        self.folder.invokeFactory(\'Document\', \'doc2\', title=\'Document 2\')\n-        self.folder.invokeFactory(\'Document\', \'doc3\', title=\'Document 3\')\n+        self.folder.invokeFactory("Document", "doc1", title="Document 1")\n+        self.folder.invokeFactory("Document", "doc2", title="Document 2")\n+        self.folder.invokeFactory("Document", "doc3", title="Document 3")\n         intids = getUtility(IIntIds)\n         self.folder.doc1.relatedItems = [\n             RelationValue(intids.getId(self.folder.doc2)),\n@@ -216,48 +206,48 @@ def testRelatedItems(self):\n         viewlet = ContentRelatedItems(self.folder.doc1, request, None, None)\n         viewlet.update()\n         related = viewlet.related_items()\n-        self.assertEqual([x.Title for x in related], [\n-                         \'Document 2\', \'Document 3\'])\n+        self.assertEqual([x.Title for x in related], ["Document 2", "Document 3"])\n \n     def testDeletedRelatedItems(self):\n         # Deleted related items should not cause problems.\n-        self.folder._delObject(\'doc2\')\n+        self.folder._delObject("doc2")\n         request = self.app.REQUEST\n         viewlet = ContentRelatedItems(self.folder.doc1, request, None, None)\n         viewlet.update()\n         related = viewlet.related_items()\n-        self.assertEqual([x.Title for x in related], [\'Document 3\'])\n+        self.assertEqual([x.Title for x in related], ["Document 3"])\n \n \n class TestDexterityRelatedItemsViewlet(ViewletsTestCase):\n-\n     def setUp(self):\n         super(TestDexterityRelatedItemsViewlet, self).setUp()\n         """ create some sample content to test with """\n         from Products.CMFPlone.utils import get_installer\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        fti = DexterityFTI(\'Dexterity Item with relatedItems behavior\')\n+\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("Dexterity Item with relatedItems behavior")\n         self.portal.portal_types._setObject(\n-            \'Dexterity Item with relatedItems behavior\', fti)\n-        fti.klass = \'plone.dexterity.content.Item\'\n-        test_module = \'plone.app.layout.viewlets.tests.test_content\'\n-        fti.schema = test_module + \'.IMyDexterityItem\'\n-        fti.behaviors = (\'plone.app.relationfield.behavior.IRelatedItems\',)\n-        fti = DexterityFTI(\'Dexterity Item without relatedItems behavior\')\n+            "Dexterity Item with relatedItems behavior", fti\n+        )\n+        fti.klass = "plone.dexterity.content.Item"\n+        test_module = "plone.app.layout.viewlets.tests.test_content"\n+        fti.schema = test_module + ".IMyDexterityItem"\n+        fti.behaviors = ("plone.app.relationfield.behavior.IRelatedItems",)\n+        fti = DexterityFTI("Dexterity Item without relatedItems behavior")\n         self.portal.portal_types._setObject(\n-            \'Dexterity Item without relatedItems behavior\', fti)\n-        fti.klass = \'plone.dexterity.content.Item\'\n-        fti.schema = test_module + \'.IMyDexterityItem\'\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n-        self.folder.invokeFactory(\'Document\', \'doc2\', title=\'Document 2\')\n-        self.folder.invokeFactory(\n-            \'Dexterity Item with relatedItems behavior\', \'dex1\')\n-        self.folder.invokeFactory(\n-            \'Dexterity Item with relatedItems behavior\', \'dex2\')\n+            "Dexterity Item without relatedItems behavior", fti\n+        )\n+        fti.klass = "plone.dexterity.content.Item"\n+        fti.schema = test_module + ".IMyDexterityItem"\n+        self.folder.invokeFactory("Document", "doc1", title="Document 1")\n+        self.folder.invokeFactory("Document", "doc2", title="Document 2")\n+        self.folder.invokeFactory("Dexterity Item with relatedItems behavior", "dex1")\n+        self.folder.invokeFactory("Dexterity Item with relatedItems behavior", "dex2")\n         self.folder.invokeFactory(\n-            \'Dexterity Item without relatedItems behavior\', \'dex3\')\n+            "Dexterity Item without relatedItems behavior", "dex3"\n+        )\n         qi = get_installer(self.portal)\n-        qi.install_product(\'plone.app.intid\')\n+        qi.install_product("plone.app.intid")\n         intids = getUtility(IIntIds)\n         self.folder.dex1.relatedItems = [\n             RelationValue(intids.getId(self.folder.doc1)),\n@@ -269,7 +259,7 @@ def testDexterityRelatedItems(self):\n         viewlet = ContentRelatedItems(self.folder.dex1, request, None, None)\n         viewlet.update()\n         related = viewlet.related_items()\n-        self.assertEqual([x.id for x in related], [\'doc1\', \'doc2\'])\n+        self.assertEqual([x.id for x in related], ["doc1", "doc2"])\n \n         # TODO: we should test with non-published objects and anonymous\n         #       users but current workflow has no transition to make an\n@@ -293,12 +283,10 @@ def testDexterityFolderRelatedItems(self):\n         """\n         Related items viewlet doesn\'t include related folder\'s descendants.\n         """\n-        self.assertTrue(\n-            self.folder.contentValues(), \'Folder is missing descendants\')\n+        self.assertTrue(self.folder.contentValues(), "Folder is missing descendants")\n \n         intids = getUtility(IIntIds)\n-        self.folder.dex1.relatedItems = [\n-            RelationValue(intids.getId(self.folder))]\n+        self.folder.dex1.relatedItems = [RelationValue(intids.getId(self.folder))]\n \n         request = self.app.REQUEST\n         viewlet = ContentRelatedItems(self.folder.dex1, request, None, None)\n@@ -308,9 +296,9 @@ def testDexterityFolderRelatedItems(self):\n \n     def testDexterityDeletedRelatedItems(self):\n         # Deleted related items should not cause problems.\n-        self.folder._delObject(\'doc1\')\n+        self.folder._delObject("doc1")\n         request = self.app.REQUEST\n         viewlet = ContentRelatedItems(self.folder.dex1, request, None, None)\n         viewlet.update()\n         related = viewlet.related_items()\n-        self.assertEqual([x.id for x in related], [\'doc2\'])\n+        self.assertEqual([x.id for x in related], ["doc2"])\ndiff --git a/plone/app/layout/viewlets/tests/test_functional.py b/plone/app/layout/viewlets/tests/test_functional.py\nindex f7fc1313..2a7148d0 100644\n--- a/plone/app/layout/viewlets/tests/test_functional.py\n+++ b/plone/app/layout/viewlets/tests/test_functional.py\n@@ -6,18 +6,21 @@\n import unittest\n \n \n-optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n normal_testfiles = [\n-    \'history.txt\',\n+    "history.txt",\n ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     ),\n-                layer=FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(test, optionflags=optionflags,),\n+                layer=FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/app/layout/viewlets/tests/test_history.py b/plone/app/layout/viewlets/tests/test_history.py\nindex 6e9ed76d..0d960687 100644\n--- a/plone/app/layout/viewlets/tests/test_history.py\n+++ b/plone/app/layout/viewlets/tests/test_history.py\n@@ -5,58 +5,57 @@\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n \n \n class TestWorkflowHistoryViewlet(ViewletsFunctionalTestCase):\n-\n     def setUp(self):\n         super(TestWorkflowHistoryViewlet, self).setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n+        self.folder.invokeFactory("Document", "d1")\n \n-    def addMember(self, username, roles=(\'Member\',)):\n-        self.portal.portal_membership.addMember(username, \'secret\', roles, [])\n+    def addMember(self, username, roles=("Member",)):\n+        self.portal.portal_membership.addMember(username, "secret", roles, [])\n \n     def delMember(self, username):\n         self.portal.portal_membership.deleteMembers([username])\n \n     def test_initHistory(self):\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n+        context = getattr(self.folder, "d1")\n         viewlet = WorkflowHistoryViewlet(context, request, None, None)\n         viewlet.update()\n         history = viewlet.workflowHistory()\n         self.assertEqual(len(history), 1)\n-        self.assertEqual(history[0][\'action\'], None)\n+        self.assertEqual(history[0]["action"], None)\n \n     def test_transitionHistory(self):\n         wf_tool = self.portal.portal_workflow\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n+        context = getattr(self.folder, "d1")\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        wf_tool.doActionFor(context, \'publish\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        wf_tool.doActionFor(context, "publish")\n \n         viewlet = WorkflowHistoryViewlet(context, request, None, None)\n         viewlet.update()\n \n         history = viewlet.workflowHistory()\n         self.assertEqual(len(history), 2)\n-        self.assertEqual(history[0][\'action\'], \'publish\')\n+        self.assertEqual(history[0]["action"], "publish")\n \n         # add a temporary user to perform a transition\n-        self.addMember(\'tempuser\', roles=(\'Member\', \'Manager\'))\n-        login(self.portal, \'tempuser\')\n-        wf_tool.doActionFor(context, action=\'retract\', actor=None)\n+        self.addMember("tempuser", roles=("Member", "Manager"))\n+        login(self.portal, "tempuser")\n+        wf_tool.doActionFor(context, action="retract", actor=None)\n         logout()\n \n         login(self.portal, TEST_USER_NAME)\n \n         # remove the user\n-        self.delMember(\'tempuser\')\n+        self.delMember("tempuser")\n \n         # if the user that performed the transition no longer exists, the link\n         # shouldn\'t be included.\n@@ -65,20 +64,19 @@ def test_transitionHistory(self):\n         history = viewlet.workflowHistory()\n \n         self.assertEqual(len(history), 3)\n-        self.assertEqual(history[0][\'actor_home\'], \'\')\n+        self.assertEqual(history[0]["actor_home"], "")\n \n \n class TestContentHistoryViewlet(ViewletsFunctionalTestCase):\n-\n     def setUp(self):\n         super(TestContentHistoryViewlet, self).setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n+        self.folder.invokeFactory("Document", "d1")\n \n     def test_initialHistory(self):\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n+        context = getattr(self.folder, "d1")\n         viewlet = ContentHistoryViewlet(context, request, None, None)\n         viewlet.update()\n         self.assertEqual(len(viewlet.revisionHistory()), 1)\n@@ -86,7 +84,7 @@ def test_initialHistory(self):\n     def test_revisionHistory(self):\n         repo_tool = self.portal.portal_repository\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n+        context = getattr(self.folder, "d1")\n         viewlet = ContentHistoryViewlet(context, request, None, None)\n         viewlet.update()\n \n@@ -94,48 +92,51 @@ def test_revisionHistory(self):\n         history = viewlet.revisionHistory()\n         self.assertEqual(len(history), 1)\n \n-        repo_tool.save(context, comment=\'Initial Revision\')\n+        repo_tool.save(context, comment="Initial Revision")\n         viewlet.update()\n         history = viewlet.revisionHistory()\n         self.assertEqual(len(history), 2)\n-        self.assertEqual(history[0][\'comments\'], \'Initial Revision\')\n+        self.assertEqual(history[0]["comments"], "Initial Revision")\n \n-        repo_tool.save(context, comment=\'Second Revision\')\n+        repo_tool.save(context, comment="Second Revision")\n         viewlet.update()\n         history = viewlet.revisionHistory()\n         self.assertTrue(\n-            \'http://nohost/plone/Members/test_user_1_/d1/@@history?one=2&two=1\'\n-            in history[0][\'diff_previous_url\']\n+            "http://nohost/plone/Members/test_user_1_/d1/@@history?one=2&two=1"\n+            in history[0]["diff_previous_url"]\n         )\n \n         # check diff link does not appear if content is not diffable\n         diff_tool = self.portal.portal_diff\n-        diff_tool.setDiffForPortalType(\'Document\', {})\n+        diff_tool.setDiffForPortalType("Document", {})\n         viewlet.update()\n         history = viewlet.revisionHistory()\n-        self.assertFalse(\'diff_previous_url\' in history[0])\n+        self.assertFalse("diff_previous_url" in history[0])\n \n     def test_revertAbility(self):\n         # check revert URL is generated only if the user has the appropriate\n         # permission\n         repo_tool = self.portal.portal_repository\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        context = getattr(self.folder, "d1")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        repo_tool.save(context, comment=\'Initial Revision\')\n-        repo_tool.save(context, comment=\'Second Revision\')\n+        repo_tool.save(context, comment="Initial Revision")\n+        repo_tool.save(context, comment="Second Revision")\n \n         viewlet = ContentHistoryViewlet(context, request, None, None)\n \n         viewlet.update()\n         history = viewlet.revisionHistory()\n         self.assertTrue(\n-            \'http://nohost/plone/Members/test_user_1_/d1/revertversion\' in history[0][\'revert_url\'])  # noqa\n+            "http://nohost/plone/Members/test_user_1_/d1/revertversion"\n+            in history[0]["revert_url"]\n+        )  # noqa\n \n         self.portal.manage_permission(\n-            \'CMFEditions: Revert to previous versions\', [], False)\n+            "CMFEditions: Revert to previous versions", [], False\n+        )\n \n         viewlet.update()\n         history = viewlet.revisionHistory()\n-        self.assertEqual(history[0][\'revert_url\'], None)\n+        self.assertEqual(history[0]["revert_url"], None)\ndiff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex 2b37715c..c217e187 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.social import SocialTagsViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n-from plone.app.testing import logout\n from plone.app.testing import login\n+from plone.app.testing import logout\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISocialMediaSchema\n from zope.annotation.interfaces import IAnnotations\n@@ -19,10 +19,9 @@ class TestSocialViewlet(ViewletsTestCase):\n     def setUp(self):\n         super(TestSocialViewlet, self).setUp()\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.folder.invokeFactory(\'News Item\', \'news-item\',\n-                                  title=\'News Item\')\n-        self.news = self.folder[\'news-item\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.folder.invokeFactory("News Item", "news-item", title="News Item")\n+        self.news = self.folder["news-item"]\n         logout()\n \n     def _tagFound(self, tags, attr, name=None, value=None):\n@@ -35,7 +34,7 @@ def _tagFound(self, tags, attr, name=None, value=None):\n                     if value is None:\n                         # only checking for existence\n                         return True\n-                    return meta[\'content\'] == value\n+                    return meta["content"] == value\n         return False\n \n     def tagFound(self, viewlet, attr, name=None, value=None):\n@@ -50,19 +49,22 @@ def testBasicTags(self):\n         description = self.folder.Description()\n         folder_url = self.folder.absolute_url()\n         # Twitter\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'name\', \'twitter:card\', "summary"))\n+        self.assertTrue(self.tagFound(viewlet, "name", "twitter:card", "summary"))\n         # OpenGraph/Facebook\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:site_name\', viewlet.site_title_setting))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:title\', viewlet.page_title))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:description\', description))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:url\', folder_url))\n+        self.assertTrue(\n+            self.tagFound(\n+                viewlet, "property", "og:site_name", viewlet.site_title_setting\n+            )\n+        )\n+        self.assertTrue(\n+            self.tagFound(viewlet, "property", "og:title", viewlet.page_title)\n+        )\n+        self.assertTrue(\n+            self.tagFound(viewlet, "property", "og:description", description)\n+        )\n+        self.assertTrue(self.tagFound(viewlet, "property", "og:url", folder_url))\n         # No schema.org itemprops\n-        self.assertFalse(self.tagFound(viewlet, \'itemprop\'))\n+        self.assertFalse(self.tagFound(viewlet, "itemprop"))\n \n     def testBasicItemProps(self):\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n@@ -70,21 +72,23 @@ def testBasicItemProps(self):\n         description = self.folder.Description()\n         folder_url = self.folder.absolute_url()\n         # No Twitter\n-        self.assertFalse(self.bodyTagFound(viewlet, \'name\'))\n+        self.assertFalse(self.bodyTagFound(viewlet, "name"))\n         # No OpenGraph/Facebook\n-        self.assertFalse(self.bodyTagFound(viewlet, \'property\'))\n+        self.assertFalse(self.bodyTagFound(viewlet, "property"))\n         # schema.org itemprops\n-        self.assertTrue(self.bodyTagFound(\n-            viewlet, \'itemprop\', \'name\', viewlet.page_title))\n-        self.assertTrue(self.bodyTagFound(\n-            viewlet, \'itemprop\', \'description\', description))\n-        self.assertTrue(self.bodyTagFound(\n-            viewlet, \'itemprop\', \'url\', folder_url))\n+        self.assertTrue(\n+            self.bodyTagFound(viewlet, "itemprop", "name", viewlet.page_title)\n+        )\n+        self.assertTrue(\n+            self.bodyTagFound(viewlet, "itemprop", "description", description)\n+        )\n+        self.assertTrue(self.bodyTagFound(viewlet, "itemprop", "url", folder_url))\n \n     def testDisabled(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(\n-            ISocialMediaSchema, prefix=\'plone\', check=False)\n+            ISocialMediaSchema, prefix="plone", check=False\n+        )\n         settings.share_social_data = False\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n@@ -97,7 +101,7 @@ def testDisabledForLoggedUser(self):\n         self.assertEquals(len(viewlet.tags), 0)\n         # clear cache to prevent memoize\n         cache = IAnnotations(self.app.REQUEST)\n-        key = \'plone.memoize\'\n+        key = "plone.memoize"\n         cache[key] = {}\n         logout()\n         viewlet.update()\n@@ -106,25 +110,35 @@ def testDisabledForLoggedUser(self):\n     def testIncludeSocialSettings(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(\n-            ISocialMediaSchema, prefix=\'plone\', check=False)\n-        settings.twitter_username = \'foobar\'\n-        settings.facebook_app_id = \'foobar\'\n-        settings.facebook_username = \'foobar\'\n+            ISocialMediaSchema, prefix="plone", check=False\n+        )\n+        settings.twitter_username = "foobar"\n+        settings.facebook_app_id = "foobar"\n+        settings.facebook_username = "foobar"\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'name\', \'twitter:site\', \'@foobar\'))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'fb:app_id\', \'foobar\'))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:article:publisher\',\n-            \'https://www.facebook.com/foobar\'))\n+        self.assertTrue(self.tagFound(viewlet, "name", "twitter:site", "@foobar"))\n+        self.assertTrue(self.tagFound(viewlet, "property", "fb:app_id", "foobar"))\n+        self.assertTrue(\n+            self.tagFound(\n+                viewlet,\n+                "property",\n+                "og:article:publisher",\n+                "https://www.facebook.com/foobar",\n+            )\n+        )\n \n     def testLogo(self):\n         viewlet = SocialTagsViewlet(self.news, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:image\', \'http://nohost/plone/logo.png\'))\n-        self.assertFalse(self.tagFound(viewlet, \'itemprop\'))\n-        self.assertTrue(self.bodyTagFound(\n-            viewlet, \'itemprop\', \'image\', \'http://nohost/plone/logo.png\'))\n+        self.assertTrue(\n+            self.tagFound(\n+                viewlet, "property", "og:image", "http://nohost/plone/logo.png"\n+            )\n+        )\n+        self.assertFalse(self.tagFound(viewlet, "itemprop"))\n+        self.assertTrue(\n+            self.bodyTagFound(\n+                viewlet, "itemprop", "image", "http://nohost/plone/logo.png"\n+            )\n+        )\ndiff --git a/plone/app/layout/viewlets/toolbar.py b/plone/app/layout/viewlets/toolbar.py\nindex b9d0107b..0134580a 100644\n--- a/plone/app/layout/viewlets/toolbar.py\n+++ b/plone/app/layout/viewlets/toolbar.py\n@@ -12,7 +12,7 @@\n \n \n class ToolbarViewletManager(OrderedViewletManager):\n-    custom_template = ViewPageTemplateFile(\'toolbar.pt\')\n+    custom_template = ViewPageTemplateFile("toolbar.pt")\n \n     def base_render(self):\n         return super(ToolbarViewletManager, self).render()\n@@ -23,58 +23,47 @@ def render(self):\n     @property\n     @memoize\n     def context_state(self):\n-        return getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_context_state\'\n-        )\n+        return getMultiAdapter((self.context, self.request), name="plone_context_state")\n \n     @property\n     @memoize\n     def portal_state(self):\n-        return getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_portal_state\'\n-        )\n+        return getMultiAdapter((self.context, self.request), name="plone_portal_state")\n \n     def get_options(self):\n         registry = getUtility(IRegistry)\n         options = {}\n \n-        lessvars = registry.get(\'plone.lessvariables\', {})\n+        lessvars = registry.get("plone.lessvariables", {})\n \n-        toolbar_width = lessvars.get(\'plone-left-toolbar-expanded\', None)\n-        submenu_width = lessvars.get(\'plone-toolbar-submenu-width\', None)\n-        desktop_width = lessvars.get(\'plone-screen-sm-min\', None)\n+        toolbar_width = lessvars.get("plone-left-toolbar-expanded", None)\n+        submenu_width = lessvars.get("plone-toolbar-submenu-width", None)\n+        desktop_width = lessvars.get("plone-screen-sm-min", None)\n \n         if toolbar_width:\n-            options[\'toolbar_width\'] = toolbar_width\n+            options["toolbar_width"] = toolbar_width\n         if submenu_width:\n-            options[\'submenu_width\'] = submenu_width\n+            options["submenu_width"] = submenu_width\n         if desktop_width:\n-            options[\'desktop_width\'] = desktop_width\n+            options["desktop_width"] = desktop_width\n \n         return json.dumps(options)\n \n     def get_personal_bar(self):\n-        viewlet = PersonalBarViewlet(\n-            self.context,\n-            self.request,\n-            self.__parent__, self\n-        )\n+        viewlet = PersonalBarViewlet(self.context, self.request, self.__parent__, self)\n         viewlet.update()\n         return viewlet\n \n     def get_toolbar_logo(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         portal_url = self.portal_state.portal_url()\n         try:\n             logo = settings.toolbar_logo\n         except AttributeError:\n-            logo = \'/++plone++static/plone-toolbarlogo.svg\'\n+            logo = "/++plone++static/plone-toolbarlogo.svg"\n         if not logo:\n-            logo = \'/++plone++static/plone-toolbarlogo.svg\'\n+            logo = "/++plone++static/plone-toolbarlogo.svg"\n         return portal_url + logo\n \n     def show_switcher(self):\ndiff --git a/setup.py b/setup.py\nindex c5c74662..52b0c5d6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,78 +2,78 @@\n from setuptools import setup\n \n \n-version = \'3.4.1.dev0\'\n+version = "3.4.1.dev0"\n \n-long_description = \\\n-    open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n+long_description = open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n \n-setup(name=\'plone.app.layout\',\n-      version=version,\n-      description="Layout mechanisms for Plone",\n-      long_description=long_description,\n-      classifiers=[\n-          "Development Status :: 6 - Mature",\n-          "Environment :: Web Environment",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 5.2",\n-          "Framework :: Zope2",\n-          "Framework :: Zope :: 4",\n-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n-          "Operating System :: OS Independent",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 2.7",\n-          "Programming Language :: Python :: 3.6",\n-          "Programming Language :: Python :: 3.7",\n-          "Programming Language :: Python :: 3.8",\n-      ],\n-      keywords=\'plone layout viewlet\',\n-      author=\'Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.app.layout\',\n-      license=\'GPL version 2\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\', \'plone.app\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      install_requires=[\n-          \'Acquisition\',\n-          \'DateTime\',\n-          \'plone.app.content\',\n-          \'plone.app.portlets\',\n-          \'plone.app.viewletmanager >=1.2\',\n-          \'plone.batching >1.0.999\',\n-          \'plone.i18n\',\n-          \'plone.memoize\',\n-          \'plone.portlets\',\n-          \'plone.registry\',\n-          \'Products.CMFCore\',\n-          \'Products.CMFDynamicViewFTI\',\n-          \'Products.CMFEditions >=1.2.2\',\n-          \'Products.CMFPlone >=5.0b3.dev0\',\n-          \'setuptools\',\n-          \'six\',\n-          \'zope.component\',\n-          \'zope.deferredimport\',\n-          \'zope.deprecation\',\n-          \'zope.dottedname\',\n-          \'zope.i18n\',\n-          \'zope.interface\',\n-          \'zope.publisher\',\n-          \'zope.schema\',\n-          \'zope.viewlet\',\n-          \'Zope2\',\n-      ],\n-      extras_require=dict(\n-          test=[\n-              \'plone.app.contenttypes\',\n-              \'plone.app.intid\',\n-              \'plone.app.relationfield\',\n-              \'plone.app.testing\',\n-              \'plone.dexterity\',\n-              \'plone.locking\',\n-              \'plone.testing\',\n-              \'z3c.relationfield\',\n-              \'zope.annotation\',\n-          ]\n-      ),\n-      )\n+setup(\n+    name="plone.app.layout",\n+    version=version,\n+    description="Layout mechanisms for Plone",\n+    long_description=long_description,\n+    classifiers=[\n+        "Development Status :: 6 - Mature",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Zope2",\n+        "Framework :: Zope :: 4",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+    ],\n+    keywords="plone layout viewlet",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.layout",\n+    license="GPL version 2",\n+    packages=find_packages(),\n+    namespace_packages=["plone", "plone.app"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=[\n+        "Acquisition",\n+        "DateTime",\n+        "plone.app.content",\n+        "plone.app.portlets",\n+        "plone.app.viewletmanager >=1.2",\n+        "plone.batching >1.0.999",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.portlets",\n+        "plone.registry",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.CMFEditions >=1.2.2",\n+        "Products.CMFPlone >=5.0b3.dev0",\n+        "setuptools",\n+        "six",\n+        "zope.component",\n+        "zope.deferredimport",\n+        "zope.deprecation",\n+        "zope.dottedname",\n+        "zope.i18n",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.viewlet",\n+        "Zope2",\n+    ],\n+    extras_require=dict(\n+        test=[\n+            "plone.app.contenttypes",\n+            "plone.app.intid",\n+            "plone.app.relationfield",\n+            "plone.app.testing",\n+            "plone.dexterity",\n+            "plone.locking",\n+            "plone.testing",\n+            "z3c.relationfield",\n+            "zope.annotation",\n+        ]\n+    ),\n+)\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-02-07T19:55:41+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/927a62c97cd1703b40d444e83ab3ef86cf4e742b

Merge pull request #230 from plone/thet-format

Code formating

Files changed:
A news/230.bugfix
M plone/__init__.py
M plone/app/__init__.py
M plone/app/layout/analytics/tests/test_doctests.py
M plone/app/layout/analytics/view.py
M plone/app/layout/dashboard/dashboard.py
M plone/app/layout/dashboard/user_actions.py
M plone/app/layout/globals/context.py
M plone/app/layout/globals/interface.py
M plone/app/layout/globals/interfaces.py
M plone/app/layout/globals/layout.py
M plone/app/layout/globals/patterns_settings.py
M plone/app/layout/globals/portal.py
M plone/app/layout/globals/tests/test_context.py
M plone/app/layout/globals/tests/test_interface.py
M plone/app/layout/globals/tests/test_layout.py
M plone/app/layout/globals/tests/test_portal.py
M plone/app/layout/globals/tests/test_tools.py
M plone/app/layout/globals/tools.py
M plone/app/layout/icons/icons.py
M plone/app/layout/icons/interfaces.py
M plone/app/layout/links/tests/test_canonical_url.py
M plone/app/layout/links/tests/test_rssviewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/navigation/defaultpage.py
M plone/app/layout/navigation/interfaces.py
M plone/app/layout/navigation/navtree.py
M plone/app/layout/navigation/root.py
M plone/app/layout/navigation/tests/test_defaultpage.py
M plone/app/layout/navigation/tests/test_root.py
M plone/app/layout/nextprevious/view.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/testing.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/globalstatusmessage.py
M plone/app/layout/viewlets/httpheaders.py
M plone/app/layout/viewlets/social.py
M plone/app/layout/viewlets/tests/base.py
M plone/app/layout/viewlets/tests/test_common.py
M plone/app/layout/viewlets/tests/test_content.py
M plone/app/layout/viewlets/tests/test_functional.py
M plone/app/layout/viewlets/tests/test_history.py
M plone/app/layout/viewlets/tests/test_social.py
M plone/app/layout/viewlets/toolbar.py
M setup.py

b'diff --git a/news/230.bugfix b/news/230.bugfix\nnew file mode 100644\nindex 00000000..04564258\n--- /dev/null\n+++ b/news/230.bugfix\n@@ -0,0 +1,2 @@\n+Code formating according to Plone standards (black, isort).\n+[thet]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af4..03d08ffd 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/layout/analytics/tests/test_doctests.py b/plone/app/layout/analytics/tests/test_doctests.py\nindex af4a0e64..709a7f9f 100644\n--- a/plone/app/layout/analytics/tests/test_doctests.py\n+++ b/plone/app/layout/analytics/tests/test_doctests.py\n@@ -6,21 +6,24 @@\n import unittest\n \n \n-OPTIONFLAGS = (doctest.REPORT_ONLY_FIRST_FAILURE |\n-               doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE)\n+OPTIONFLAGS = (\n+    doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n+)\n \n normal_testfiles = [\n-    \'analytics.txt\',\n+    "analytics.txt",\n ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=OPTIONFLAGS,\n-                                     ),\n-                layer=FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(test, optionflags=OPTIONFLAGS,),\n+                layer=FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/app/layout/analytics/view.py b/plone/app/layout/analytics/view.py\nindex b45559c1..07a4d58b 100644\n--- a/plone/app/layout/analytics/view.py\n+++ b/plone/app/layout/analytics/view.py\n@@ -11,7 +11,7 @@\n @implementer(IViewlet)\n class AnalyticsViewlet(BrowserView):\n \n-    render = ViewPageTemplateFile(\'view.pt\')\n+    render = ViewPageTemplateFile("view.pt")\n \n     def __init__(self, context, request, view, manager):\n         super(AnalyticsViewlet, self).__init__(context, request)\n@@ -22,8 +22,7 @@ def __init__(self, context, request, view, manager):\n     @property\n     def webstats_js(self):\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         try:\n             return site_settings.webstats_js or u""\n         except AttributeError:\ndiff --git a/plone/app/layout/dashboard/dashboard.py b/plone/app/layout/dashboard/dashboard.py\nindex e933628c..a37c5375 100644\n--- a/plone/app/layout/dashboard/dashboard.py\n+++ b/plone/app/layout/dashboard/dashboard.py\n@@ -24,14 +24,16 @@ class DashboardView(BrowserView):\n     """\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        self.request.set(\'disable_plone.leftcolumn\', 1)\n-        self.request.set(\'disable_plone.rightcolumn\', 1)\n+        self.request.set("disable_border", 1)\n+        self.request.set("disable_plone.leftcolumn", 1)\n+        self.request.set("disable_plone.rightcolumn", 1)\n         if self.can_edit() and self.empty():\n-            message = _(u"info_empty_dashboard",\n-                        default=u"Your dashboard is currently empty. Click the"\n-                        " <em>edit</em> tab to assign some personal"\n-                        " portlets.")\n+            message = _(\n+                u"info_empty_dashboard",\n+                default=u"Your dashboard is currently empty. Click the"\n+                " <em>edit</em> tab to assign some personal"\n+                " portlets.",\n+            )\n             IStatusMessage(self.request).add(message)\n         return self.index()\n \n@@ -41,32 +43,31 @@ def auth_token(self):\n \n     @memoize\n     def can_edit(self):\n-        return bool(getSecurityManager().checkPermission(\n-            \'Portlets: Manage own portlets\',\n-            self.context\n-        ))\n+        return bool(\n+            getSecurityManager().checkPermission(\n+                "Portlets: Manage own portlets", self.context\n+            )\n+        )\n \n     @memoize\n     def empty(self):\n         dashboards = [\n-            getUtility(IPortletManager, name=name) for name in\n-            [\n-                \'plone.dashboard1\',\n-                \'plone.dashboard2\',\n-                \'plone.dashboard3\',\n-                \'plone.dashboard4\'\n+            getUtility(IPortletManager, name=name)\n+            for name in [\n+                "plone.dashboard1",\n+                "plone.dashboard2",\n+                "plone.dashboard3",\n+                "plone.dashboard4",\n             ]\n         ]\n \n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n         member = portal_membership.getAuthenticatedMember()\n         userid = member.getId()\n \n         num_portlets = 0\n         for dashboard in dashboards:\n-            num_portlets += len(dashboard.get(\n-                USER_CATEGORY, {}).get(userid, {}))\n+            num_portlets += len(dashboard.get(USER_CATEGORY, {}).get(userid, {}))\n             for groupid in member.getGroups():\n-                num_portlets += len(dashboard.get(\n-                    GROUP_CATEGORY, {}).get(groupid, {}))\n+                num_portlets += len(dashboard.get(GROUP_CATEGORY, {}).get(groupid, {}))\n         return num_portlets == 0\ndiff --git a/plone/app/layout/dashboard/user_actions.py b/plone/app/layout/dashboard/user_actions.py\nindex 102d97b9..40713821 100644\n--- a/plone/app/layout/dashboard/user_actions.py\n+++ b/plone/app/layout/dashboard/user_actions.py\n@@ -9,9 +9,8 @@ class UserActionsView(BrowserView):\n \n     def user_actions(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request),\n-            name=u\'plone_context_state\'\n+            (self.context, self.request), name=u"plone_context_state"\n         )\n \n-        actions = context_state.actions(\'user\')\n+        actions = context_state.actions("user")\n         return actions\ndiff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py\nindex 7c9b9825..147e0ff4 100644\n--- a/plone/app/layout/globals/context.py\n+++ b/plone/app/layout/globals/context.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n+from .interfaces import IContextState\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from .interfaces import IContextState\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.memoize.view import memoize\n from plone.portlets.interfaces import ILocalPortletAssignable\n@@ -21,8 +21,11 @@\n from zope.interface import implementer\n \n \n-BLACKLISTED_PROVIDERS = (\'portal_workflow\', )\n-BLACKLISTED_CATEGORIES = (\'folder_buttons\', \'object_buttons\', )\n+BLACKLISTED_PROVIDERS = ("portal_workflow",)\n+BLACKLISTED_CATEGORIES = (\n+    "folder_buttons",\n+    "object_buttons",\n+)\n \n \n @implementer(IContextState)\n@@ -33,22 +36,18 @@ class ContextState(BrowserView):\n     @memoize\n     def current_page_url(self):\n         url = self.current_base_url()\n-        query = self.request.get(\'QUERY_STRING\', None)\n+        query = self.request.get("QUERY_STRING", None)\n         if query:\n-            url += \'?\' + query\n+            url += "?" + query\n         return url\n \n     @memoize\n     def current_base_url(self):\n         return self.request.get(\n-            \'ACTUAL_URL\',\n+            "ACTUAL_URL",\n             self.request.get(\n-                \'VIRTUAL_URL\',\n-                self.request.get(\n-                    \'URL\',\n-                    self.context.absolute_url()\n-                )\n-            )\n+                "VIRTUAL_URL", self.request.get("URL", self.context.absolute_url())\n+            ),\n         )\n \n     @memoize\n@@ -71,12 +70,11 @@ def view_url(self):\n         called, instead of with /view appended.  We want to avoid that.\n         """\n         view_url = self.object_url()\n-        portal_type = getattr(aq_base(self.context), \'portal_type\', None)\n+        portal_type = getattr(aq_base(self.context), "portal_type", None)\n         registry = getUtility(IRegistry)\n-        use_view_action = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        use_view_action = registry.get("plone.types_use_view_action_in_listings", [])\n         if portal_type in use_view_action:\n-            view_url = view_url + \'/view\'\n+            view_url = view_url + "/view"\n         return view_url\n \n     @memoize\n@@ -95,9 +93,9 @@ def view_template_id(self):\n                 # Might happen if FTI didn\'t migrate yet.\n                 pass\n \n-        action = self._lookupTypeActionTemplate(\'object/view\')\n+        action = self._lookupTypeActionTemplate("object/view")\n         if not action:\n-            action = self._lookupTypeActionTemplate(\'folder/folderlisting\')\n+            action = self._lookupTypeActionTemplate("folder/folderlisting")\n \n         return action\n \n@@ -107,7 +105,7 @@ def is_view_template(self):\n         canonical_url = self.canonical_object_url()\n         object_url = self.object_url()\n \n-        if current_url.endswith(\'/\'):\n+        if current_url.endswith("/"):\n             current_url = current_url[:-1]\n \n         if current_url == canonical_url or current_url == object_url:\n@@ -117,24 +115,24 @@ def is_view_template(self):\n             return False\n         # Get the part of the current_url minus the object_url.\n         last_part = current_url.split(object_url)[-1]\n-        if not last_part.startswith(\'/\'):\n+        if not last_part.startswith("/"):\n             # Unexpected\n             return False\n         # Remove the slash from the front:\n         last_part = last_part[1:]\n-        if last_part == \'view\':\n+        if last_part == "view":\n             return True\n         context = aq_inner(self.context)\n         browserDefault = IBrowserDefault(context, None)\n         if browserDefault is not None:\n             fti = browserDefault.getTypeInfo()\n-            if fti.getMethodAliases().get(last_part) == \'(Default)\':\n+            if fti.getMethodAliases().get(last_part) == "(Default)":\n                 return True\n \n         template_id = self.view_template_id()\n         if last_part == template_id:\n             return True\n-        elif last_part == \'@@%s\' % template_id:\n+        elif last_part == "@@%s" % template_id:\n             return True\n \n         return False\n@@ -151,7 +149,7 @@ def object_title(self):\n     @memoize\n     def workflow_state(self):\n         tool = getToolByName(self.context, "portal_workflow")\n-        return tool.getInfoFor(aq_inner(self.context), \'review_state\', None)\n+        return tool.getInfoFor(aq_inner(self.context), "review_state", None)\n \n     def parent(self):\n         return aq_parent(aq_inner(self.context))\n@@ -166,11 +164,9 @@ def folder(self):\n \n     @memoize\n     def is_folderish(self):\n-        return bool(getattr(\n-            aq_base(aq_inner(self.context)),\n-            \'isPrincipiaFolderish\',\n-            False\n-        ))\n+        return bool(\n+            getattr(aq_base(aq_inner(self.context)), "isPrincipiaFolderish", False)\n+        )\n \n     @memoize\n     def is_structural_folder(self):\n@@ -189,54 +185,49 @@ def is_default_page(self):\n         container = aq_parent(context)\n         if not container:\n             return False\n-        view = getMultiAdapter((container, self.request), name=\'default_page\')\n+        view = getMultiAdapter((container, self.request), name="default_page")\n         return view.isDefaultPage(context)\n \n     @memoize\n     def is_portal_root(self):\n         context = aq_inner(self.context)\n         portal = getUtility(ISiteRoot)\n-        return aq_base(context) is aq_base(portal) or \\\n-            (self.is_default_page() and\n-             aq_base(aq_parent(context)) is aq_base(portal))\n+        return aq_base(context) is aq_base(portal) or (\n+            self.is_default_page() and aq_base(aq_parent(context)) is aq_base(portal)\n+        )\n \n     @memoize\n     def is_navigation_root(self):\n         context = aq_inner(self.context)\n         return INavigationRoot.providedBy(context) or (\n-            self.is_default_page()\n-            and INavigationRoot.providedBy(aq_parent(context))\n+            self.is_default_page() and INavigationRoot.providedBy(aq_parent(context))\n         )\n \n     @memoize\n     def is_editable(self):\n-        tool = getToolByName(self.context, \'portal_membership\')\n-        return bool(tool.checkPermission(\n-            \'Modify portal content\',\n-            aq_inner(self.context)\n-        ))\n+        tool = getToolByName(self.context, "portal_membership")\n+        return bool(\n+            tool.checkPermission("Modify portal content", aq_inner(self.context))\n+        )\n \n     @memoize\n     def is_locked(self):\n         # plone_lock_info is registered on marker interface ITTWLockable, since\n         # not everything may want to parttake in its lock-stealing ways.\n-        lock_info = queryMultiAdapter((\n-            self.context, self.request), name=\'plone_lock_info\')\n+        lock_info = queryMultiAdapter(\n+            (self.context, self.request), name="plone_lock_info"\n+        )\n         if lock_info is not None:\n             return lock_info.is_locked_for_current_user()\n         else:\n             context = aq_inner(self.context)\n-            lockable = getattr(\n-                context.aq_explicit, \'wl_isLocked\', None) is not None\n+            lockable = getattr(context.aq_explicit, "wl_isLocked", None) is not None\n             return lockable and context.wl_isLocked()\n \n     @memoize\n     def is_toolbar_visible(self):\n-        tool = getToolByName(self.context, \'portal_membership\')\n-        return bool(tool.checkPermission(\n-            \'Show Toolbar\',\n-            aq_inner(self.context)\n-        ))\n+        tool = getToolByName(self.context, "portal_membership")\n+        return bool(tool.checkPermission("Show Toolbar", aq_inner(self.context)))\n \n     @memoize\n     def actions(self, category=None, max=-1):\n@@ -244,16 +235,12 @@ def actions(self, category=None, max=-1):\n         atool = getToolByName(context, "portal_actions")\n         ttool = getToolByName(context, "portal_types")\n         actions = []\n-        actions.extend(ttool.listActionInfos(\n-            object=context,\n-            category=category,\n-            max=max,\n-        ))\n-        actions.extend(atool.listActionInfos(\n-            object=context,\n-            categories=(category, ),\n-            max=max,\n-        ))\n+        actions.extend(\n+            ttool.listActionInfos(object=context, category=category, max=max,)\n+        )\n+        actions.extend(\n+            atool.listActionInfos(object=context, categories=(category,), max=max,)\n+        )\n         return actions\n \n     def portlet_assignable(self):\n@@ -271,19 +258,19 @@ def _lookupTypeActionTemplate(self, actionId):\n         if not actions:\n             # Action doesn\'t exist\n             return None\n-        url = actions[0][\'url\']\n-        if url.rstrip(\'/\') == self.object_url().rstrip(\'/\'):\n+        url = actions[0]["url"]\n+        if url.rstrip("/") == self.object_url().rstrip("/"):\n             # (Default) action\n-            action = \'(Default)\'\n+            action = "(Default)"\n         else:\n             # XXX: This isn\'t quite right since it assumes the action starts\n             # with ${object_url}\n-            action = url.split(\'/\')[-1]\n+            action = url.split("/")[-1]\n \n         # Try resolving method aliases because we need a real template_id here\n         action = fti.queryMethodID(action, default=action, context=context)\n \n         # Strip off leading /\n-        if action and action[0] == \'/\':\n+        if action and action[0] == "/":\n             action = action[1:]\n         return action\ndiff --git a/plone/app/layout/globals/interface.py b/plone/app/layout/globals/interface.py\nindex 06701d32..d99b68a8 100644\n--- a/plone/app/layout/globals/interface.py\n+++ b/plone/app/layout/globals/interface.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n from .interfaces import IInterfaceInformation\n+from Acquisition import aq_base\n from plone.memoize.view import memoize\n from Products.Five.browser import BrowserView\n from zope.dottedname.resolve import resolve\n@@ -13,7 +13,7 @@\n def resolveInterface(dotted_name):\n     klass = resolve(dotted_name)\n     if not issubclass(klass, Interface):\n-        raise ValueError(\'%r is not a valid Interface.\' % dotted_name)\n+        raise ValueError("%r is not a valid Interface." % dotted_name)\n     return klass\n \n \n@@ -26,8 +26,8 @@ def _trim_doc_string(text):\n     Trims a doc string to make it format\n     correctly with structured text.\n     """\n-    text = text.strip().replace(\'\\r\\n\', \'\\n\')\n-    lines = text.split(\'\\n\')\n+    text = text.strip().replace("\\r\\n", "\\n")\n+    lines = text.split("\\n")\n     nlines = [lines[0]]\n     if len(lines) > 1:\n         min_indent = None\n@@ -37,7 +37,7 @@ def _trim_doc_string(text):\n                 min_indent = indent\n         for line in lines[1:]:\n             nlines.append(line[min_indent:])\n-    return \'\\n\'.join(nlines)\n+    return "\\n".join(nlines)\n \n \n def visitBaseInterfaces(iface, lst):\n@@ -51,7 +51,6 @@ def visitBaseInterfaces(iface, lst):\n \n @implementer(IInterfaceInformation)\n class InterfaceInformation(BrowserView):\n-\n     @memoize\n     def provides(self, dotted_name):\n         iface = resolveInterface(dotted_name)\n@@ -104,25 +103,26 @@ def get_interface_informations(self, iface):\n         methods = []\n         for name, desc in iface.namesAndDescriptions():\n             if IMethod.providedBy(desc):\n-                methods.append({\'signature\': desc.getSignatureString(),\n-                                \'name\': desc.getName(),\n-                                \'doc\': _trim_doc_string(desc.getDoc())\n-                                }\n-                               )\n+                methods.append(\n+                    {\n+                        "signature": desc.getSignatureString(),\n+                        "name": desc.getName(),\n+                        "doc": _trim_doc_string(desc.getDoc()),\n+                    }\n+                )\n             else:\n-                attributes.append({\'name\': desc.getName(),\n-                                   \'doc\': _trim_doc_string(desc.getDoc()),\n-                                   }\n-                                  )\n+                attributes.append(\n+                    {"name": desc.getName(), "doc": _trim_doc_string(desc.getDoc()),}\n+                )\n \n         result = {\n-            \'name\': iface.getName(),\n-            \'dotted_name\': getDottedName(iface),\n-            \'doc\': _trim_doc_string(iface.getDoc()),\n-            \'bases\': bases,\n-            \'base_names\': [getDottedName(iface) for base in bases],\n-            \'attributes\': attributes,\n-            \'methods\': methods,\n+            "name": iface.getName(),\n+            "dotted_name": getDottedName(iface),\n+            "doc": _trim_doc_string(iface.getDoc()),\n+            "bases": bases,\n+            "base_names": [getDottedName(iface) for base in bases],\n+            "attributes": attributes,\n+            "methods": methods,\n         }\n \n         return result\ndiff --git a/plone/app/layout/globals/interfaces.py b/plone/app/layout/globals/interfaces.py\nindex 26dc2552..c37965b8 100644\n--- a/plone/app/layout/globals/interfaces.py\n+++ b/plone/app/layout/globals/interfaces.py\n@@ -295,6 +295,5 @@ class IPatternsSettingsRenderer(Interface):\n \n \n IPatternsSettingsRenderer = deprecated(\n-    IPatternsSettingsRenderer,\n-    \'This interface was deprecated because it was pointless.\'\n+    IPatternsSettingsRenderer, "This interface was deprecated because it was pointless."\n )\ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex 60003175..c394a28b 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -33,7 +33,7 @@\n TEMPLATE_CLASSES = (\n     ViewPageTemplateFile,\n     ZopeViewPageTemplateFile,\n-    ViewMixinForTemplates\n+    ViewMixinForTemplates,\n )\n \n \n@@ -41,13 +41,11 @@\n class LayoutPolicy(BrowserView):\n     """A view that gives access to various layout related functions.\n     """\n+\n     @property\n     @memoize\n     def _context_state(self):\n-        return getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_context_state\'\n-        )\n+        return getMultiAdapter((self.context, self.request), name="plone_context_state")\n \n     def mark_view(self, view):\n         """Adds a marker interface to the view if it is "the" view for the\n@@ -55,10 +53,7 @@ def mark_view(self, view):\n         """\n         if not view:\n             return\n-        if (\n-            self._context_state.is_view_template() and\n-            not IViewView.providedBy(view)\n-        ):\n+        if self._context_state.is_view_template() and not IViewView.providedBy(view):\n             alsoProvides(view, IViewView)\n \n     def hide_columns(self, column_left, column_right):\n@@ -76,7 +71,7 @@ def have_portlets(self, manager_name, view=None):\n         """Determine whether a column should be shown. The left column is\n         called plone.leftcolumn; the right column is called plone.rightcolumn.\n         """\n-        force_disable = self.request.get(\'disable_\' + manager_name, None)\n+        force_disable = self.request.get("disable_" + manager_name, None)\n         if force_disable is not None:\n             return not bool(force_disable)\n \n@@ -88,11 +83,13 @@ def have_portlets(self, manager_name, view=None):\n         if manager is None:\n             return False\n \n-        renderer = queryMultiAdapter((\n-            context, self.request, view, manager), IPortletManagerRenderer)\n+        renderer = queryMultiAdapter(\n+            (context, self.request, view, manager), IPortletManagerRenderer\n+        )\n         if renderer is None:\n-            renderer = getMultiAdapter((\n-                context, self.request, self, manager), IPortletManagerRenderer)\n+            renderer = getMultiAdapter(\n+                (context, self.request, self, manager), IPortletManagerRenderer\n+            )\n \n         return renderer.visible\n \n@@ -105,13 +102,12 @@ def icons_visible(self):\n         anon = membership.isAnonymousUser()\n \n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         icon_visibility = settings.icon_visibility\n \n-        if icon_visibility == \'enabled\':\n+        if icon_visibility == "enabled":\n             return True\n-        elif icon_visibility == \'authenticated\' and not anon:\n+        elif icon_visibility == "authenticated" and not anon:\n             return True\n         else:\n             return False\n@@ -124,21 +120,20 @@ def thumb_visible(self):\n         membership = getToolByName(context, "portal_membership")\n         anon = membership.isAnonymousUser()\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         thumb_visibility = settings.thumb_visibility\n \n-        if thumb_visibility == \'enabled\':\n+        if thumb_visibility == "enabled":\n             return True\n-        elif thumb_visibility == \'authenticated\' and not anon:\n+        elif thumb_visibility == "authenticated" and not anon:\n             return True\n         else:\n             return False\n \n     @deprecate(\n-        \'deprecated since Plone 4, ContentIcons are rendered as Fonts now see\'\n-        \'https://docs.plone.org/develop/addons/index.html\'\n-        \'#upgrading-to-plone-5-1.\'\n+        "deprecated since Plone 4, ContentIcons are rendered as Fonts now see"\n+        "https://docs.plone.org/develop/addons/index.html"\n+        "#upgrading-to-plone-5-1."\n     )\n     def getIcon(self, item):\n         """Returns an object which implements the IContentIcon interface and\n@@ -162,35 +157,31 @@ def _toolbar_classes(self):\n \n         toolbar_classes = set()\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\',\n-            check=False\n-        )\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         try:\n-            left = site_settings.toolbar_position == \'side\'\n+            left = site_settings.toolbar_position == "side"\n         except KeyError:\n             left = True\n         if left:\n-            toolbar_classes.add(\'plone-toolbar-left\')\n+            toolbar_classes.add("plone-toolbar-left")\n         else:\n-            toolbar_classes.add(\'plone-toolbar-top\')\n+            toolbar_classes.add("plone-toolbar-top")\n         try:\n             toolbar_state = {}\n-            toolbar_state_cookie = self.request.cookies.get(\'plone-toolbar\')\n+            toolbar_state_cookie = self.request.cookies.get("plone-toolbar")\n             if toolbar_state_cookie:\n                 toolbar_state = json.loads(toolbar_state_cookie)\n-            if toolbar_state.get(\'expanded\', True):\n-                toolbar_classes.add(\'plone-toolbar-expanded\')\n+            if toolbar_state.get("expanded", True):\n+                toolbar_classes.add("plone-toolbar-expanded")\n                 if left:\n-                    toolbar_classes.add(\'plone-toolbar-left-expanded\')\n+                    toolbar_classes.add("plone-toolbar-left-expanded")\n                 else:\n-                    toolbar_classes.add(\'plone-toolbar-top-expanded\')\n+                    toolbar_classes.add("plone-toolbar-top-expanded")\n             else:\n                 if left:\n-                    toolbar_classes.add(\'plone-toolbar-left-default\')\n+                    toolbar_classes.add("plone-toolbar-left-default")\n                 else:\n-                    toolbar_classes.add(\'plone-toolbar-top-default\')\n+                    toolbar_classes.add("plone-toolbar-top-default")\n         except Exception:\n             pass\n         return toolbar_classes\n@@ -223,8 +214,7 @@ def bodyClass(self, template, view):\n         - pat-markspeciallinks: mark special links is set\n         """\n         portal_state = getMultiAdapter(\n-            (self.context, self.request),\n-            name=u\'plone_portal_state\'\n+            (self.context, self.request), name=u"plone_portal_state"\n         )\n         normalizer = queryUtility(IIDNormalizer)\n         registry = getUtility(IRegistry)\n@@ -232,7 +222,7 @@ def bodyClass(self, template, view):\n         body_classes = self._toolbar_classes()\n \n         # template class (required)\n-        template_name = \'\'\n+        template_name = ""\n         if isinstance(template, TEMPLATE_CLASSES):\n             # Browser view\n             template_name = view.__name__\n@@ -243,7 +233,7 @@ def bodyClass(self, template, view):\n             template_name = view.__name__\n         if template_name:\n             template_name = normalizer.normalize(template_name)\n-            body_classes.add(\'template-%s\' % template_name)\n+            body_classes.add("template-%s" % template_name)\n \n         # portal type class (optional)\n         portal_type = normalizer.normalize(self.context.portal_type)\n@@ -254,72 +244,61 @@ def bodyClass(self, template, view):\n         navroot = portal_state.navigation_root()\n         body_classes.add("site-%s" % navroot.getId())\n \n-        contentPath = self.context.getPhysicalPath()[\n-            len(navroot.getPhysicalPath()):]\n+        contentPath = self.context.getPhysicalPath()[len(navroot.getPhysicalPath()) :]\n         if contentPath:\n             body_classes.add("section-%s" % contentPath[0])\n             # skip first section since we already have that...\n             if len(contentPath) > 1:\n-                depth = registry.get(\n-                    \'plone.app.layout.globals.bodyClass.depth\',\n-                    4\n-                )\n+                depth = registry.get("plone.app.layout.globals.bodyClass.depth", 4)\n                 if depth > 1:\n-                    classes = [\'subsection-%s\' % contentPath[1]]\n+                    classes = ["subsection-%s" % contentPath[1]]\n                     for section in contentPath[2:depth]:\n-                        classes.append(\'-\'.join([classes[-1], section]))\n+                        classes.append("-".join([classes[-1], section]))\n                     body_classes.update(classes)\n \n         # class for hiding icons (optional)\n         if self.icons_visible():\n-            body_classes.add(\'icons-on\')\n+            body_classes.add("icons-on")\n         else:\n-            body_classes.add(\'icons-off\')\n+            body_classes.add("icons-off")\n \n         # class for hiding thumbs (optional)\n         if self.thumb_visible():\n-            body_classes.add(\'thumbs-on\')\n+            body_classes.add("thumbs-on")\n         else:\n-            body_classes.add(\'thumbs-off\')\n+            body_classes.add("thumbs-off")\n \n         # permissions required. Useful to theme frontend and backend\n         # differently\n         permissions = []\n-        if not getattr(view, \'__ac_permissions__\', tuple()):\n-            permissions = [\'none\']\n-        for permission, roles in getattr(view, \'__ac_permissions__\', tuple()):\n+        if not getattr(view, "__ac_permissions__", tuple()):\n+            permissions = ["none"]\n+        for permission, roles in getattr(view, "__ac_permissions__", tuple()):\n             permissions.append(normalizer.normalize(permission))\n-        if \'none\' in permissions or \'view\' in permissions:\n-            body_classes.add(\'frontend\')\n+        if "none" in permissions or "view" in permissions:\n+            body_classes.add("frontend")\n         for permission in permissions:\n-            body_classes.add(\'viewpermission-\' + permission)\n+            body_classes.add("viewpermission-" + permission)\n \n         # class for user roles\n         membership = getToolByName(self.context, "portal_membership")\n         if membership.isAnonymousUser():\n-            body_classes.add(\'userrole-anonymous\')\n+            body_classes.add("userrole-anonymous")\n         else:\n             user = membership.getAuthenticatedMember()\n             for role in user.getRolesInContext(self.context):\n-                body_classes.add(\n-                    \'userrole-\' + role.lower().replace(\' \', \'-\')\n-                )\n+                body_classes.add("userrole-" + role.lower().replace(" ", "-"))\n \n         # class for markspeciallinks pattern\n-        link_settings = registry.forInterface(\n-            ILinkSchema,\n-            prefix="plone",\n-            check=False\n-        )\n+        link_settings = registry.forInterface(ILinkSchema, prefix="plone", check=False)\n         msl = link_settings.mark_special_links\n         elonw = link_settings.external_links_open_new_window\n         if msl or elonw:\n-            body_classes.add(\'pat-markspeciallinks\')\n+            body_classes.add("pat-markspeciallinks")\n \n         # Add externally defined extra body classes\n         body_class_adapters = getAdapters(\n-            (self.context, self.request),\n-            IBodyClassAdapter\n+            (self.context, self.request), IBodyClassAdapter\n         )\n         for name, body_class_adapter in body_class_adapters:\n             try:\n@@ -327,16 +306,15 @@ def bodyClass(self, template, view):\n             except TypeError:  # This adapter is implemented without arguments\n                 extra_classes = body_class_adapter.get_classes() or []\n             if isinstance(extra_classes, six.string_types):\n-                extra_classes = extra_classes.split(\' \')\n+                extra_classes = extra_classes.split(" ")\n             body_classes.update(extra_classes)\n \n-        return \' \'.join(sorted(body_classes))\n+        return " ".join(sorted(body_classes))\n \n \n @adapter(Interface)\n @implementer(IBodyClassAdapter)\n class DefaultBodyClasses(object):\n-\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py\nindex e63398e5..88ee8279 100644\n--- a/plone/app/layout/globals/patterns_settings.py\n+++ b/plone/app/layout/globals/patterns_settings.py\n@@ -4,5 +4,5 @@\n \n deprecated(\n     "Import from Products.CMFPlone.patterns.view instead",\n-    PatternSettings=\'Products.CMFPlone.patterns.view.PatternSettingsView\'\n+    PatternSettings="Products.CMFPlone.patterns.view.PatternSettingsView",\n )\ndiff --git a/plone/app/layout/globals/portal.py b/plone/app/layout/globals/portal.py\nindex ec5ad697..eeea7180 100644\n--- a/plone/app/layout/globals/portal.py\n+++ b/plone/app/layout/globals/portal.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_inner\n from .interfaces import IPortalState\n+from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.memoize.view import memoize\n@@ -18,7 +18,7 @@\n from zope.interface import implementer\n \n \n-RIGHT_TO_LEFT = [\'ar\', \'fa\', \'he\', \'ps\']\n+RIGHT_TO_LEFT = ["ar", "fa", "he", "ps"]\n \n \n @implementer(IPortalState)\n@@ -38,8 +38,7 @@ def portal(self):\n     @memoize_contextless\n     def portal_title(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         return settings.site_title\n \n     @memoize_contextless\n@@ -76,8 +75,11 @@ def default_language(self):\n         return settings.default_language\n \n     def language(self):\n-        return self.request.get(\'LANGUAGE\', None) or \\\n-            aq_inner(self.context).Language() or self.default_language()\n+        return (\n+            self.request.get("LANGUAGE", None)\n+            or aq_inner(self.context).Language()\n+            or self.default_language()\n+        )\n \n     def locale(self):\n         return self.request.locale\ndiff --git a/plone/app/layout/globals/tests/test_context.py b/plone/app/layout/globals/tests/test_context.py\nindex ca8c50df..6181644c 100644\n--- a/plone/app/layout/globals/tests/test_context.py\n+++ b/plone/app/layout/globals/tests/test_context.py\n@@ -17,35 +17,35 @@\n class TestContextStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n-    layer = INTEGRATION_TESTING\n \n+    layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'f0\')\n-        self.folder = self.portal[\'f0\']\n-        self.fview = self.folder.restrictedTraverse(\'@@plone_context_state\')\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n-        self.folder.setDefaultPage(\'d1\')\n-        self.dview = self.folder.d1.restrictedTraverse(\'@@plone_context_state\')\n-        self.folder.invokeFactory(\'Folder\', \'f1\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "f0")\n+        self.folder = self.portal["f0"]\n+        self.fview = self.folder.restrictedTraverse("@@plone_context_state")\n+        self.folder.invokeFactory("Document", "d1")\n+        self.folder.setDefaultPage("d1")\n+        self.dview = self.folder.d1.restrictedTraverse("@@plone_context_state")\n+        self.folder.invokeFactory("Folder", "f1")\n         directlyProvides(self.folder.f1, INonStructuralFolder)\n-        self.sview = self.folder.f1.restrictedTraverse(\'@@plone_context_state\')\n+        self.sview = self.folder.f1.restrictedTraverse("@@plone_context_state")\n \n-        self.pview = self.portal.restrictedTraverse(\'@@plone_context_state\')\n+        self.pview = self.portal.restrictedTraverse("@@plone_context_state")\n \n     def test_current_page_url(self):\n-        url = self.folder.absolute_url() + \'/some_view\'\n-        self.app.REQUEST[\'ACTUAL_URL\'] = url\n-        self.app.REQUEST[\'QUERY_STRING\'] = \'foo=bar\'\n-        self.assertEqual(self.fview.current_page_url(), url + \'?foo=bar\')\n+        url = self.folder.absolute_url() + "/some_view"\n+        self.app.REQUEST["ACTUAL_URL"] = url\n+        self.app.REQUEST["QUERY_STRING"] = "foo=bar"\n+        self.assertEqual(self.fview.current_page_url(), url + "?foo=bar")\n \n     def test_current_base_url(self):\n-        url = self.folder.absolute_url() + \'/some_view\'\n-        self.app.REQUEST[\'ACTUAL_URL\'] = url\n-        self.app.REQUEST[\'QUERY_STRING\'] = \'foo=bar\'\n+        url = self.folder.absolute_url() + "/some_view"\n+        self.app.REQUEST["ACTUAL_URL"] = url\n+        self.app.REQUEST["QUERY_STRING"] = "foo=bar"\n         self.assertEqual(self.fview.current_base_url(), url)\n \n     def test_canonical_object(self):\n@@ -53,38 +53,28 @@ def test_canonical_object(self):\n         self.assertEqual(self.dview.canonical_object(), self.folder)\n \n     def test_canonical_object_url(self):\n-        self.assertEqual(\n-            self.fview.canonical_object_url(), self.folder.absolute_url())\n-        self.assertEqual(\n-            self.dview.canonical_object_url(), self.folder.absolute_url())\n+        self.assertEqual(self.fview.canonical_object_url(), self.folder.absolute_url())\n+        self.assertEqual(self.dview.canonical_object_url(), self.folder.absolute_url())\n \n     def test_view_url(self):\n+        self.assertEqual(self.fview.view_url(), self.folder.absolute_url())\n+        self.assertEqual(self.dview.view_url(), self.folder.d1.absolute_url())\n+        self.folder.invokeFactory("File", "file1")\n+        self.fileview = self.folder.file1.restrictedTraverse("@@plone_context_state")\n         self.assertEqual(\n-            self.fview.view_url(),\n-            self.folder.absolute_url()\n-        )\n-        self.assertEqual(\n-            self.dview.view_url(),\n-            self.folder.d1.absolute_url()\n-        )\n-        self.folder.invokeFactory(\'File\', \'file1\')\n-        self.fileview = self.folder.file1.restrictedTraverse(\n-            \'@@plone_context_state\')\n-        self.assertEqual(\n-            self.fileview.view_url(),\n-            self.folder.file1.absolute_url() + \'/view\'\n+            self.fileview.view_url(), self.folder.file1.absolute_url() + "/view"\n         )\n \n     def test_view_template_id(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.assertEqual(self.fview.view_template_id(), \'foo_view\')\n+        self.folder.setLayout("foo_view")\n+        self.assertEqual(self.fview.view_template_id(), "foo_view")\n \n     def test_view_template_id_nonbrowserdefault(self):\n         # The view template id is taken from the FTI for non-browserdefault\n         # (non ATContentTypes) content\n-        tf = _createObjectByType(\'TempFolder\', self.folder, \'tf\')\n-        tfview = tf.restrictedTraverse(\'@@plone_context_state\')\n-        self.assertEqual(tfview.view_template_id(), \'index_html\')\n+        tf = _createObjectByType("TempFolder", self.folder, "tf")\n+        tfview = tf.restrictedTraverse("@@plone_context_state")\n+        self.assertEqual(tfview.view_template_id(), "index_html")\n \n     def test_view_template_id_nonbrowserdefault_nonempty(self):\n         # The view template id is taken from the FTI for non-browserdefault\n@@ -93,14 +83,14 @@ def test_view_template_id_nonbrowserdefault_nonempty(self):\n \n         # Set the expression to include a view name.\n         fti = self.portal.portal_types.TempFolder\n-        view_action = fti.getActionObject(\'object/view\')\n+        view_action = fti.getActionObject("object/view")\n         view_expression = view_action.getActionExpression()\n-        view_action.setActionExpression(\'foobar\')\n+        view_action.setActionExpression("foobar")\n \n-        tf = _createObjectByType(\'TempFolder\', self.folder, \'tf\')\n-        tf.manage_addLocalRoles(TEST_USER_ID, (\'Manager\', ))\n-        tfview = tf.restrictedTraverse(\'@@plone_context_state\')\n-        self.assertEqual(tfview.view_template_id(), \'foobar\')\n+        tf = _createObjectByType("TempFolder", self.folder, "tf")\n+        tf.manage_addLocalRoles(TEST_USER_ID, ("Manager",))\n+        tfview = tf.restrictedTraverse("@@plone_context_state")\n+        self.assertEqual(tfview.view_template_id(), "foobar")\n \n         # Reset the FTI action expression\n         view_action.setActionExpression(view_expression)\n@@ -113,58 +103,55 @@ def test_view_template_id_nonbrowserdefault_restricted(self):\n \n         # Set access to something the default user does not have, normally\n         fti = self.portal.portal_types.TempFolder\n-        view_action = fti.getActionObject(\'object/view\')\n+        view_action = fti.getActionObject("object/view")\n         view_perms = view_action.getPermissions()\n-        view_action.edit(permissions=(u\'Modify Portal Content\', ))\n+        view_action.edit(permissions=(u"Modify Portal Content",))\n \n-        tf = _createObjectByType(\'TempFolder\', self.folder, \'tf\')\n-        tf.manage_addLocalRoles(TEST_USER_ID, (\'Manager\', ))\n-        tfview = tf.restrictedTraverse(\'@@plone_context_state\')\n-        self.assertEqual(tfview.view_template_id(), \'index_html\')\n+        tf = _createObjectByType("TempFolder", self.folder, "tf")\n+        tf.manage_addLocalRoles(TEST_USER_ID, ("Manager",))\n+        tfview = tf.restrictedTraverse("@@plone_context_state")\n+        self.assertEqual(tfview.view_template_id(), "index_html")\n \n         # Reset the FTI permissions\n         view_action.edit(permissions=view_perms)\n \n     def test_is_view_template_default_page(self):\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url()\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url()\n         # Whether you\'re viewing the folder or its default page ...\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), True)\n \n     def test_is_view_template_trailing_slash(self):\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url() + \'/\'\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), True)\n \n     def test_is_view_template_template(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.app.REQUEST[\n-            \'ACTUAL_URL\'] = self.folder.absolute_url() + \'/foo_view\'\n+        self.folder.setLayout("foo_view")\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/foo_view"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_is_view_template_template_z3view(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.app.REQUEST[\n-            \'ACTUAL_URL\'] = self.folder.absolute_url() + \'/@@foo_view\'\n+        self.folder.setLayout("foo_view")\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/@@foo_view"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_is_view_template_view(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url() + \'/view\'\n+        self.folder.setLayout("foo_view")\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/view"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_is_view_template_other(self):\n-        self.folder.setLayout(\'foo_view\')\n-        self.app.REQUEST[\n-            \'ACTUAL_URL\'] = self.folder.absolute_url() + \'/bar_view\'\n+        self.folder.setLayout("foo_view")\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/bar_view"\n         self.assertEqual(self.fview.is_view_template(), False)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_is_view_template_edit(self):\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url() + \'/edit\'\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/edit"\n         self.assertEqual(self.fview.is_view_template(), False)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n@@ -172,25 +159,22 @@ def test_is_view_template_alias(self):\n         browserDefault = IBrowserDefault(self.folder, None)\n         fti = browserDefault.getTypeInfo()\n         aliases = fti.getMethodAliases()\n-        aliases[\'foo_alias\'] = \'(Default)\'\n+        aliases["foo_alias"] = "(Default)"\n         fti.setMethodAliases(aliases)\n-        self.app.REQUEST[\n-            \'ACTUAL_URL\'] = self.folder.absolute_url() + \'/foo_alias\'\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url() + "/foo_alias"\n         self.assertEqual(self.fview.is_view_template(), True)\n         self.assertEqual(self.dview.is_view_template(), False)\n \n     def test_object_url(self):\n         self.assertEqual(self.fview.object_url(), self.folder.absolute_url())\n-        self.assertEqual(\n-            self.dview.object_url(), self.folder.d1.absolute_url())\n+        self.assertEqual(self.dview.object_url(), self.folder.d1.absolute_url())\n \n     def test_object_title(self):\n-        self.folder.d1.setTitle(\'My title\')\n-        self.assertEqual(self.dview.object_title(), \'My title\')\n+        self.folder.d1.setTitle("My title")\n+        self.assertEqual(self.dview.object_title(), "My title")\n \n     def test_workflow_state(self):\n-        wfstate = self.portal.portal_workflow.getInfoFor(\n-            self.folder.d1, \'review_state\')\n+        wfstate = self.portal.portal_workflow.getInfoFor(self.folder.d1, "review_state")\n         self.assertEqual(self.dview.workflow_state(), wfstate)\n \n     def test_parent(self):\n@@ -230,7 +214,6 @@ def test_is_navigation_root(self):\n         self.assertEqual(self.sview.is_navigation_root(), False)\n         self.assertEqual(self.pview.is_navigation_root(), True)\n \n-\n     def test_is_editable(self):\n         self.assertEqual(self.dview.is_editable(), True)\n         logout()\n@@ -247,5 +230,5 @@ def test_is_locked(self):\n         self.assertEqual(self.dview.is_locked(), True)\n \n     def test_actions(self):\n-        actions = self.fview.actions(\'user\')\n-        self.assertTrue(actions[0][\'category\'] == \'user\')\n+        actions = self.fview.actions("user")\n+        self.assertTrue(actions[0]["category"] == "user")\ndiff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex dc93d679..0a7b70c1 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -12,22 +12,24 @@\n \n \n class IZero(Interface):\n-    \'\'\' Test interface zero\n-    \'\'\'\n+    """ Test interface zero\n+    """\n \n \n class IOne(IZero):\n-    \'\'\' Test interface one\n-    \'\'\'\n-    one_name = Attribute(\'One name for IOne\')\n+    """ Test interface one\n+    """\n+\n+    one_name = Attribute("One name for IOne")\n \n     def one_function():\n-        \'\'\'One function for IOne\'\'\'\n+        """One function for IOne"""\n \n \n class ITwo(Interface):\n-    \'\'\' Test interface two\n-    \'\'\'\n+    """ Test interface two\n+    """\n+\n     pass\n \n \ndiff --git a/plone/app/layout/globals/tests/test_layout.py b/plone/app/layout/globals/tests/test_layout.py\nindex 00e9479f..9a3bec03 100644\n--- a/plone/app/layout/globals/tests/test_layout.py\n+++ b/plone/app/layout/globals/tests/test_layout.py\n@@ -16,49 +16,51 @@\n \n class TestLayoutView(unittest.TestCase):\n     """Tests the global layout view."""\n+\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        self.view = self.portal.restrictedTraverse(\'@@plone_layout\')\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Document\', \'front-page\')\n-        self.portal.setDefaultPage(\'front-page\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.view = self.portal.restrictedTraverse("@@plone_layout")\n+        self.portal.invokeFactory("Folder", "folder1")\n+        self.portal.invokeFactory("Document", "front-page")\n+        self.portal.setDefaultPage("front-page")\n \n     def testHavePortlets(self):\n         have_portlets = self.view.have_portlets\n-        self.assertEqual(False, have_portlets(\'plone.leftcolumn\'))\n+        self.assertEqual(False, have_portlets("plone.leftcolumn"))\n         # We have no portlet on the right in Plone 5.0\n-        self.assertEqual(False, have_portlets(\'plone.rightcolumn\'))\n+        self.assertEqual(False, have_portlets("plone.rightcolumn"))\n \n     def testEnableColumns(self):\n         # Make sure we can force a column to appear even if there are no\n         # portlets\n-        self.app = self.layer[\'app\']\n-        self.app.REQUEST.set(\'disable_plone.leftcolumn\', 0)\n-        self.assertEqual(True, self.view.have_portlets(\'plone.leftcolumn\'))\n+        self.app = self.layer["app"]\n+        self.app.REQUEST.set("disable_plone.leftcolumn", 0)\n+        self.assertEqual(True, self.view.have_portlets("plone.leftcolumn"))\n \n     def testDisableColumns(self):\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        self.app = self.layer[\'app\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.app = self.layer["app"]\n         # Now add some portlets to be sure we have columns.  For\n         # simplicity we want a portlet that has no add form.  Note\n         # that apparently the Calender had no add form until Plone\n         # 4.3, but since 4.4 it does, so it is not fit to use here.\n-        portlet = getUtility(IPortletType, name=\'portlets.Login\')\n+        portlet = getUtility(IPortletType, name="portlets.Login")\n         mapping_left = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+            "++contextportlets++plone.leftcolumn"\n+        )\n         mapping_right = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.rightcolumn\')\n+            "++contextportlets++plone.rightcolumn"\n+        )\n         for m in mapping_left.keys():\n             del mapping_left[m]\n-        addview_left = mapping_left.restrictedTraverse(\'+/\' + portlet.addview)\n+        addview_left = mapping_left.restrictedTraverse("+/" + portlet.addview)\n \n         for m in mapping_right.keys():\n             del mapping_right[m]\n-        addview_right = mapping_right.restrictedTraverse(\n-            \'+/\' + portlet.addview)\n+        addview_right = mapping_right.restrictedTraverse("+/" + portlet.addview)\n \n         # This is a NullAddForm - calling it does the work\n         addview_left()\n@@ -70,118 +72,115 @@ def testDisableColumns(self):\n         # Check that we do not explicitly disable the columns.  This\n         # may happen if we change the request in this method or if the\n         # addviews return an add-form after all.\n-        self.assertTrue(\'disable_plone.leftcolumn\' not in self.app.REQUEST)\n-        self.assertTrue(\'disable_plone.rightcolumn\' not in self.app.REQUEST)\n+        self.assertTrue("disable_plone.leftcolumn" not in self.app.REQUEST)\n+        self.assertTrue("disable_plone.rightcolumn" not in self.app.REQUEST)\n \n-        self.assertEqual(True, self.view.have_portlets(\'plone.leftcolumn\'))\n-        self.app.REQUEST.set(\'disable_plone.leftcolumn\', 1)\n-        self.assertEqual(False, self.view.have_portlets(\'plone.leftcolumn\'))\n+        self.assertEqual(True, self.view.have_portlets("plone.leftcolumn"))\n+        self.app.REQUEST.set("disable_plone.leftcolumn", 1)\n+        self.assertEqual(False, self.view.have_portlets("plone.leftcolumn"))\n \n-        self.assertEqual(True, self.view.have_portlets(\'plone.rightcolumn\'))\n-        self.app.REQUEST.set(\'disable_plone.rightcolumn\', 1)\n-        self.assertEqual(False, self.view.have_portlets(\'plone.rightcolumn\'))\n+        self.assertEqual(True, self.view.have_portlets("plone.rightcolumn"))\n+        self.app.REQUEST.set("disable_plone.rightcolumn", 1)\n+        self.assertEqual(False, self.view.have_portlets("plone.rightcolumn"))\n \n     def testBodyClass(self):\n-        context = self.portal[\'front-page\']\n-        view = context.restrictedTraverse(\'view\')\n-        layout_view = context.restrictedTraverse(\'@@plone_layout\')\n+        context = self.portal["front-page"]\n+        view = context.restrictedTraverse("view")\n+        layout_view = context.restrictedTraverse("@@plone_layout")\n         body_class = layout_view.bodyClass(view, layout_view)\n-        assert \'section-front-page\' in body_class\n+        assert "section-front-page" in body_class\n \n     def testBodyClassTemplate(self):\n         # test of first parameter only\n-        context = self.portal[\'front-page\']\n+        context = self.portal["front-page"]\n \n-        view = context.restrictedTraverse(\'view\')\n-        layout_view = context.restrictedTraverse(\'@@plone_layout\')\n+        view = context.restrictedTraverse("view")\n+        layout_view = context.restrictedTraverse("@@plone_layout")\n \n         # case 1: name from first parameter, expected a template or view\n         from Products.CMFCore.FSPageTemplate import FSPageTemplate\n-        template = FSPageTemplate(\'document_view\',\n-            os.path.join(os.path.dirname(__file__),\'data\',\'bodyclass_nametest.pt\')\n+\n+        template = FSPageTemplate(\n+            "document_view",\n+            os.path.join(os.path.dirname(__file__), "data", "bodyclass_nametest.pt"),\n         )\n         body_class = layout_view.bodyClass(template, view)\n-        self.assertIn(\'template-document_view\', body_class)\n+        self.assertIn("template-document_view", body_class)\n \n         # case 2: even w/o second parameter it has to work\n         body_class = layout_view.bodyClass(template, None)\n-        self.assertIn(\'template-document_view\', body_class)\n+        self.assertIn("template-document_view", body_class)\n \n         # case 3: if theres no template get name from view\n         body_class = layout_view.bodyClass(None, view)\n-        self.assertIn(\'template-view\', body_class)\n+        self.assertIn("template-view", body_class)\n \n     def testBodyClassWithNavigationRoot(self):\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n         context = self.portal.folder1\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.restrictedTraverse(\'view\')\n+        view = context.restrictedTraverse("@@plone_layout")\n+        template = context.restrictedTraverse("view")\n         body_class = view.bodyClass(template, view)\n-        assert \'site-%s\' % context.getId() in body_class\n+        assert "site-%s" % context.getId() in body_class\n \n     def testBodyClassWithEverySection(self):\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n         zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n-        self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n-        self.portal.folder1.folder2.folder3.invokeFactory(\'Document\', \'page\')\n+        self.portal.folder1.invokeFactory("Folder", "folder2")\n+        self.portal.folder1.folder2.invokeFactory("Folder", "folder3")\n+        self.portal.folder1.folder2.folder3.invokeFactory("Document", "page")\n         context = self.portal.folder1.folder2.folder3.page\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.restrictedTraverse(\'view\')\n+        view = context.restrictedTraverse("@@plone_layout")\n+        template = context.restrictedTraverse("view")\n         body_class = view.bodyClass(template, view)\n-        assert \'section-folder2 site-folder1\' in body_class\n-        assert \' subsection-folder3 subsection-folder3-page\' in body_class\n+        assert "section-folder2 site-folder1" in body_class\n+        assert " subsection-folder3 subsection-folder3-page" in body_class\n \n     def testBodyClassWithEverySectionTurnedOff(self):\n         registry = getUtility(IRegistry)\n-        registry[\'plone.app.layout.globals.bodyClass.depth\'] = 0\n+        registry["plone.app.layout.globals.bodyClass.depth"] = 0\n         zope.interface.alsoProvides(self.portal.folder1, INavigationRoot)\n-        self.portal.folder1.invokeFactory(\'Folder\', \'folder2\')\n-        self.portal.folder1.folder2.invokeFactory(\'Folder\', \'folder3\')\n-        self.portal.folder1.folder2.folder3.invokeFactory(\'Document\', \'page\')\n+        self.portal.folder1.invokeFactory("Folder", "folder2")\n+        self.portal.folder1.folder2.invokeFactory("Folder", "folder3")\n+        self.portal.folder1.folder2.folder3.invokeFactory("Document", "page")\n         context = self.portal.folder1.folder2.folder3.page\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n-        template = context.restrictedTraverse(\'view\')\n+        view = context.restrictedTraverse("@@plone_layout")\n+        template = context.restrictedTraverse("view")\n         body_class = view.bodyClass(template, view)\n-        assert \'subsection-folder2 subsection-folder2-folder3\' \\\n-            not in body_class\n-        assert \' subsection-folder2-folder3-page\' not in body_class\n+        assert "subsection-folder2 subsection-folder2-folder3" not in body_class\n+        assert " subsection-folder2-folder3-page" not in body_class\n \n     def testBodyClassWithMarkSpecialLinksOnOff(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ILinkSchema,\n-            prefix="plone",\n-            check=False\n-        )\n-        context = self.portal[\'front-page\']\n-        template = context.restrictedTraverse(\'view\')\n-        view = context.restrictedTraverse(\'@@plone_layout\')\n+        settings = registry.forInterface(ILinkSchema, prefix="plone", check=False)\n+        context = self.portal["front-page"]\n+        template = context.restrictedTraverse("view")\n+        view = context.restrictedTraverse("@@plone_layout")\n \n         # Case 1\n         settings.mark_special_links = False\n         settings.external_links_open_new_window = False\n         body_class = view.bodyClass(template, view)\n-        self.assertTrue(\'pat-markspeciallinks\' not in body_class)\n+        self.assertTrue("pat-markspeciallinks" not in body_class)\n \n         # Case 2\n         settings.mark_special_links = True\n         settings.external_links_open_new_window = False\n         body_class = view.bodyClass(template, view)\n-        self.assertTrue(\'pat-markspeciallinks\' in body_class)\n+        self.assertTrue("pat-markspeciallinks" in body_class)\n \n         # Case 3\n         settings.mark_special_links = False\n         settings.external_links_open_new_window = True\n         body_class = view.bodyClass(template, view)\n-        self.assertTrue(\'pat-markspeciallinks\' in body_class)\n+        self.assertTrue("pat-markspeciallinks" in body_class)\n \n         # Case 4\n         settings.mark_special_links = True\n         settings.external_links_open_new_window = True\n         body_class = view.bodyClass(template, view)\n-        self.assertTrue(\'pat-markspeciallinks\' in body_class)\n+        self.assertTrue("pat-markspeciallinks" in body_class)\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex 79902ddc..f5ff1dbe 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -1,10 +1,10 @@\n # -*- coding: utf-8 -*-\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing.helpers import logout\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n-from plone.app.layout.navigation.root import getNavigationRoot\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ILanguageSchema\n from Products.CMFPlone.interfaces import ISearchSchema\n@@ -21,14 +21,15 @@\n class TestPortalStateView(unittest.TestCase):\n     """Ensure that the basic redirector setup is successful.\n     """\n+\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.folder = self.portal.portal_membership.getHomeFolder(TEST_USER_ID)\n-        self.view = self.folder.restrictedTraverse(\'@@plone_portal_state\')\n+        self.view = self.folder.restrictedTraverse("@@plone_portal_state")\n \n     def test_portal(self):\n         self.assertEqual(self.view.portal(), self.portal)\n@@ -36,8 +37,8 @@ def test_portal(self):\n     def test_portal_title(self):\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        self.site_settings.site_title = u\'My title\'\n-        self.assertEqual(self.view.portal_title(), \'My title\')\n+        self.site_settings.site_title = u"My title"\n+        self.assertEqual(self.view.portal_title(), "My title")\n \n     def test_portal_url(self):\n         self.assertEqual(self.view.portal_url(), self.portal.absolute_url())\n@@ -46,79 +47,70 @@ def test_navigation_root(self):\n         self.assertEqual(self.view.navigation_root(), self.portal)\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n+        members = self.portal["Members"]\n         zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n+        view = members.restrictedTraverse("@@plone_portal_state")\n         self.assertEqual(view.navigation_root(), members)\n \n     def test_navigation_root_path(self):\n-        self.assertEqual(self.view.navigation_root_path(), \'/plone\')\n+        self.assertEqual(self.view.navigation_root_path(), "/plone")\n         self.assertEqual(\n-            self.view.navigation_root_path(), getNavigationRoot(self.folder))\n+            self.view.navigation_root_path(), getNavigationRoot(self.folder)\n+        )\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n-        members = self.portal[\'Members\']\n+        members = self.portal["Members"]\n         zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n-        self.assertEqual(\n-            view.navigation_root_path(),\n-            \'/plone/Members\'\n-        )\n-        self.assertEqual(\n-            view.navigation_root_path(), getNavigationRoot(self.folder))\n+        view = members.restrictedTraverse("@@plone_portal_state")\n+        self.assertEqual(view.navigation_root_path(), "/plone/Members")\n+        self.assertEqual(view.navigation_root_path(), getNavigationRoot(self.folder))\n \n     def test_navigation_root_title(self):\n         self.portal.Title = "Portal title"\n         self.assertEqual(self.view.navigation_root_title(), "Portal title")\n-        members = self.portal[\'Members\']\n+        members = self.portal["Members"]\n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n         zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n+        view = members.restrictedTraverse("@@plone_portal_state")\n         self.assertEqual(view.navigation_root_title(), members.Title())\n \n-\n     def test_navigation_root_url(self):\n-        url = self.app.REQUEST.physicalPathToURL(\n-            getNavigationRoot(self.folder))\n-        self.assertEqual(\n-            self.view.navigation_root_url(), \'http://nohost/plone\')\n+        url = self.app.REQUEST.physicalPathToURL(getNavigationRoot(self.folder))\n+        self.assertEqual(self.view.navigation_root_url(), "http://nohost/plone")\n         self.assertEqual(self.view.navigation_root_url(), url)\n \n         # mark a folder "between" self.folder and self.portal with\n         # INavigationRoot\n \n-        members = self.portal[\'Members\']\n+        members = self.portal["Members"]\n         zope.interface.alsoProvides(members, INavigationRoot)\n-        view = members.restrictedTraverse(\'@@plone_portal_state\')\n-        self.assertEqual(\n-            view.navigation_root_url(),\n-            \'http://nohost/plone/Members\'\n-        )\n+        view = members.restrictedTraverse("@@plone_portal_state")\n+        self.assertEqual(view.navigation_root_url(), "http://nohost/plone/Members")\n         url = self.app.REQUEST.physicalPathToURL(getNavigationRoot(members))\n         self.assertEqual(view.navigation_root_url(), url)\n \n     def test_default_language(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ILanguageSchema, prefix="plone")\n-        settings.default_language = \'no\'\n-        self.assertEqual(self.view.default_language(), \'no\')\n+        settings.default_language = "no"\n+        self.assertEqual(self.view.default_language(), "no")\n \n     def test_language(self):\n-        self.app.REQUEST.set(\'LANGUAGE\', \'no\')\n-        self.assertEqual(self.view.language(), \'no\')\n+        self.app.REQUEST.set("LANGUAGE", "no")\n+        self.assertEqual(self.view.language(), "no")\n \n     def test_locale(self):\n         # Set up registry so that no is an accepted language and that the\n         # language information from the request is actually being used.\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         settings.use_request_negotiation = True\n-        settings.available_languages.append(\'no\')\n+        settings.available_languages.append("no")\n \n-        no = locales.getLocale(\'no\', None, None)\n-        self.app.REQUEST.set(\'HTTP_ACCEPT_LANGUAGE\', \'no\')\n+        no = locales.getLocale("no", None, None)\n+        self.app.REQUEST.set("HTTP_ACCEPT_LANGUAGE", "no")\n \n         # Push request through the BeforeTraverseEvent handler again to\n         # update language settings\n@@ -126,25 +118,25 @@ def test_locale(self):\n         self.assertEqual(self.view.locale(), no)\n \n     def test_is_not_rtl(self):\n-        self.app.REQUEST.set(\'LANGUAGE\', \'no\')\n+        self.app.REQUEST.set("LANGUAGE", "no")\n         self.assertEqual(self.view.is_rtl(), False)\n \n     def test_is_rtl(self):\n-        self.app.REQUEST.set(\'LANGUAGE\', \'he\')\n+        self.app.REQUEST.set("LANGUAGE", "he")\n         self.assertEqual(self.view.is_rtl(), True)\n-        self.app.REQUEST.set(\'LANGUAGE\', \'ar_DZ\')\n+        self.app.REQUEST.set("LANGUAGE", "ar_DZ")\n         self.assertEqual(self.view.is_rtl(), True)\n \n     def test_member(self):\n         self.assertEqual(\n             self.view.member().id,\n-            self.portal.portal_membership.getAuthenticatedMember().id\n+            self.portal.portal_membership.getAuthenticatedMember().id,\n         )\n \n     def test_anonymous(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID,[\'Manager\'])\n-        #self.portal.invokeFactory(\'Folder\', \'f0\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        # self.portal.invokeFactory(\'Folder\', \'f0\')\n         self.assertEqual(self.view.anonymous(), False)\n         logout()\n         del self.app.REQUEST.__annotations__\n@@ -153,5 +145,5 @@ def test_anonymous(self):\n     def test_friendly_types(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        settings.types_not_searched = (\'Document\',)\n-        self.assertFalse(\'Document\' in self.view.friendly_types())\n+        settings.types_not_searched = ("Document",)\n+        self.assertFalse("Document" in self.view.friendly_types())\ndiff --git a/plone/app/layout/globals/tests/test_tools.py b/plone/app/layout/globals/tests/test_tools.py\nindex b9e7c137..5a5d3d0d 100644\n--- a/plone/app/layout/globals/tests/test_tools.py\n+++ b/plone/app/layout/globals/tests/test_tools.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import getToolByName\n from plone.app.layout.testing import INTEGRATION_TESTING\n+from Products.CMFPlone.utils import getToolByName\n \n import unittest\n \n@@ -12,34 +12,37 @@ class TestToolsView(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.folder = self.portal[\'Members\']\n-        self.view = self.folder.restrictedTraverse(\'@@plone_tools\')\n+        self.portal = self.layer["portal"]\n+        self.folder = self.portal["Members"]\n+        self.view = self.folder.restrictedTraverse("@@plone_tools")\n \n     def test_actions(self):\n-        self.assertEqual(self.view.actions(), getToolByName(\n-            self.folder, \'portal_actions\'))\n+        self.assertEqual(\n+            self.view.actions(), getToolByName(self.folder, "portal_actions")\n+        )\n \n     def test_catalog(self):\n-        self.assertEqual(self.view.catalog(), getToolByName(\n-            self.folder, \'portal_catalog\'))\n+        self.assertEqual(\n+            self.view.catalog(), getToolByName(self.folder, "portal_catalog")\n+        )\n \n     def test_membership(self):\n-        self.assertEqual(self.view.membership(), getToolByName(\n-            self.folder, \'portal_membership\'))\n+        self.assertEqual(\n+            self.view.membership(), getToolByName(self.folder, "portal_membership")\n+        )\n \n     def test_properties(self):\n-        self.assertEqual(self.view.properties(), getToolByName(\n-            self.folder, \'portal_properties\'))\n+        self.assertEqual(\n+            self.view.properties(), getToolByName(self.folder, "portal_properties")\n+        )\n \n     def test_types(self):\n-        self.assertEqual(self.view.types(), getToolByName(\n-            self.folder, \'portal_types\'))\n+        self.assertEqual(self.view.types(), getToolByName(self.folder, "portal_types"))\n \n     def test_url(self):\n-        self.assertEqual(self.view.url(), getToolByName(\n-            self.folder, \'portal_url\'))\n+        self.assertEqual(self.view.url(), getToolByName(self.folder, "portal_url"))\n \n     def test_workflow(self):\n-        self.assertEqual(self.view.workflow(), getToolByName(\n-            self.folder, \'portal_workflow\'))\n+        self.assertEqual(\n+            self.view.workflow(), getToolByName(self.folder, "portal_workflow")\n+        )\ndiff --git a/plone/app/layout/globals/tools.py b/plone/app/layout/globals/tools.py\nindex 26a0722d..9bdae34f 100644\n--- a/plone/app/layout/globals/tools.py\n+++ b/plone/app/layout/globals/tools.py\n@@ -13,28 +13,28 @@ class Tools(BrowserView):\n \n     @memoize_contextless\n     def actions(self):\n-        return getToolByName(self.context, \'portal_actions\')\n+        return getToolByName(self.context, "portal_actions")\n \n     @memoize_contextless\n     def catalog(self):\n-        return getToolByName(self.context, \'portal_catalog\')\n+        return getToolByName(self.context, "portal_catalog")\n \n     @memoize_contextless\n     def membership(self):\n-        return getToolByName(self.context, \'portal_membership\')\n+        return getToolByName(self.context, "portal_membership")\n \n     @memoize_contextless\n     def properties(self):\n-        return getToolByName(self.context, \'portal_properties\')\n+        return getToolByName(self.context, "portal_properties")\n \n     @memoize_contextless\n     def url(self):\n-        return getToolByName(self.context, \'portal_url\')\n+        return getToolByName(self.context, "portal_url")\n \n     @memoize_contextless\n     def types(self):\n-        return getToolByName(self.context, \'portal_types\')\n+        return getToolByName(self.context, "portal_types")\n \n     @memoize_contextless\n     def workflow(self):\n-        return getToolByName(self.context, \'portal_workflow\')\n+        return getToolByName(self.context, "portal_workflow")\ndiff --git a/plone/app/layout/icons/icons.py b/plone/app/layout/icons/icons.py\nindex 354add0d..ebcad629 100644\n--- a/plone/app/layout/icons/icons.py\n+++ b/plone/app/layout/icons/icons.py\n@@ -27,18 +27,20 @@ def html_tag(self):\n             return None\n \n         tag = \'<img width="%s" height="%s" src="%s"\' % (\n-            self.width, self.height, self.url)\n+            self.width,\n+            self.height,\n+            self.url,\n+        )\n         if self.title:\n             tag += \' title="%s"\' % self.title\n         if self.description:\n             tag += \' alt="%s"\' % self.description\n-        tag += \' />\'\n+        tag += " />"\n         return tag\n \n \n @implementer(IContentIcon)\n class CatalogBrainContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, brain):\n         self.context = context\n         self.request = request\n@@ -55,26 +57,29 @@ def url(self):\n             return path\n \n         portal_state_view = getMultiAdapter(\n-            (self.context, self.request), name=u\'plone_portal_state\')\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n         portal_url = portal_state_view.portal_url()\n         return "%s/%s" % (portal_url, path)\n \n     @property\n     def description(self):\n         context = aq_inner(self.context)\n-        tt = getToolByName(context, \'portal_types\')\n-        fti = tt.get(self.brain[\'portal_type\'])\n+        tt = getToolByName(context, "portal_types")\n+        fti = tt.get(self.brain["portal_type"])\n         if fti is not None:\n-            res = "%s %s" % (translate(fti.Title(), context=self.request),\n-                             self._mimetype())\n+            res = "%s %s" % (\n+                translate(fti.Title(), context=self.request),\n+                self._mimetype(),\n+            )\n             return res.strip()\n         else:\n-            return self.brain[\'portal_type\']\n+            return self.brain["portal_type"]\n \n     def _mimetype(self):\n         extensions_mimetype = self.extensions_mimetype()\n         id = self.brain.getId\n-        mimetype = \'\'\n+        mimetype = ""\n         extlength = 0\n         for extension in extensions_mimetype.keys():\n             if id.endswith(extension):\n@@ -89,7 +94,7 @@ def _mimetype(self):\n     def extensions_mimetype(self):\n         """Return a dict {\'.pdf\': \'PDF Document\', \'.ods\': \'\n         """\n-        mtr = getToolByName(self.context, \'mimetypes_registry\')\n+        mtr = getToolByName(self.context, "mimetypes_registry")\n         mimetypes = mtr.mimetypes()\n         extensions = {}\n \n@@ -102,7 +107,6 @@ def extensions_mimetype(self):\n \n @implementer(IContentIcon)\n class CMFContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, obj):\n         self.context = context\n         self.request = request\n@@ -118,13 +122,13 @@ def url(self):\n         if not path:\n             return path\n \n-        portal_url = getToolByName(self.context, \'portal_url\')()\n+        portal_url = getToolByName(self.context, "portal_url")()\n         return "%s/%s" % (portal_url, path)\n \n     @property\n     def description(self):\n         context = aq_inner(self.context)\n-        tt = getToolByName(context, \'portal_types\')\n+        tt = getToolByName(context, "portal_types")\n         fti = tt.get(self.obj.portal_type)\n         if fti is not None:\n             return fti.Title()\n@@ -134,7 +138,6 @@ def description(self):\n \n @implementer(IContentIcon)\n class FTIContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, obj):\n         self.context = context\n         self.request = request\n@@ -147,12 +150,12 @@ def __init__(self, context, request, obj):\n     @property\n     def url(self):\n         context = self.context\n-        portal_url = getToolByName(context, \'portal_url\')\n+        portal_url = getToolByName(context, "portal_url")\n         portal = portal_url.getPortalObject()\n \n         ec = createExprContext(aq_parent(context), portal, context)\n         icon = self.obj.getIconExprObject()\n-        path = \'\'\n+        path = ""\n         if icon:\n             path = icon(ec)\n         return path\n@@ -164,7 +167,6 @@ def description(self):\n \n @implementer(IContentIcon)\n class PloneSiteContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, obj):\n         self.context = context\n         self.request = request\n@@ -176,9 +178,10 @@ def __init__(self, context, request, obj):\n \n     @property\n     def url(self):\n-        portal_url = getToolByName(self.context, \'portal_url\')()\n-        portal_state = getMultiAdapter((self.context, self.request),\n-                                       name=u\'plone_portal_state\')\n+        portal_url = getToolByName(self.context, "portal_url")()\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n         if portal_state.is_rtl():\n             return "%s/rtl-site_icon.png" % portal_url\n         else:\n@@ -191,7 +194,6 @@ def description(self):\n \n @implementer(IContentIcon)\n class DefaultContentIcon(BaseIcon):\n-\n     def __init__(self, context, request, obj):\n         self.context = context\n         self.request = request\n@@ -203,7 +205,7 @@ def __init__(self, context, request, obj):\n \n     @property\n     def url(self):\n-        portal_url = getToolByName(self.context, \'portal_url\')()\n+        portal_url = getToolByName(self.context, "portal_url")()\n         if self.obj is None:\n             return None\n         return "%s/error_icon.png" % portal_url\ndiff --git a/plone/app/layout/icons/interfaces.py b/plone/app/layout/icons/interfaces.py\nindex 8c580559..4f00139d 100644\n--- a/plone/app/layout/icons/interfaces.py\n+++ b/plone/app/layout/icons/interfaces.py\n@@ -11,14 +11,19 @@ class IContentIcon(Interface):\n \n     height = Attribute("Returns the height of the icon (required).")\n \n-    url = Attribute("The absolute url of the icon. This should be "\n-                    "None if no icon should be rendered.")\n-\n-    description = Attribute("The description used for the alt attribute. "\n-                            "Should be at least an empty string.")\n-\n-    title = Attribute("The content of the title attribute. Should be None "\n-                      "if the title is empty.")\n+    url = Attribute(\n+        "The absolute url of the icon. This should be "\n+        "None if no icon should be rendered."\n+    )\n+\n+    description = Attribute(\n+        "The description used for the alt attribute. "\n+        "Should be at least an empty string."\n+    )\n+\n+    title = Attribute(\n+        "The content of the title attribute. Should be None " "if the title is empty."\n+    )\n \n     def html_tag():\n         """Return a HTML string that is the tag for rendering this icon.\ndiff --git a/plone/app/layout/links/tests/test_canonical_url.py b/plone/app/layout/links/tests/test_canonical_url.py\nindex 632f35e9..2a20711c 100644\n--- a/plone/app/layout/links/tests/test_canonical_url.py\n+++ b/plone/app/layout/links/tests/test_canonical_url.py\n@@ -11,16 +11,16 @@ class ViewletTestCase(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_canonical_url_viewlet(self):\n         portal_url = self.portal.absolute_url()\n         canonical_link = \'<link rel="canonical" href="%s"\' % portal_url\n-        browser = Browser(self.layer[\'app\'])\n+        browser = Browser(self.layer["app"])\n         # the page must contain the canonical URL link\n         browser.open(portal_url)\n         self.assertIn(canonical_link, browser.contents)\n         # opening the same page using a different view must return the same\n         # canonical URL\n-        browser.open(portal_url + \'/view\')\n+        browser.open(portal_url + "/view")\n         self.assertIn(canonical_link, browser.contents)\ndiff --git a/plone/app/layout/links/tests/test_rssviewlet.py b/plone/app/layout/links/tests/test_rssviewlet.py\nindex 64db2263..4ad8f43f 100644\n--- a/plone/app/layout/links/tests/test_rssviewlet.py\n+++ b/plone/app/layout/links/tests/test_rssviewlet.py\n@@ -9,10 +9,9 @@\n \n \n class TestRSSViewletView(ViewletsTestCase):\n-\n     def test_RSSViewlet(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'news\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "news")\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSyndicationSettings)\n         if settings.allowed:\n@@ -22,7 +21,7 @@ def test_RSSViewlet(self):\n         viewlet = RSSViewlet(self.portal, request, None, None)\n         viewlet.update()\n         result = viewlet.render()\n-        self.assertEqual(result.strip(), \'\')\n+        self.assertEqual(result.strip(), "")\n         settings.allowed = True\n         settings.site_rss_items = (self.portal.news.UID(),)\n         request = self.app.REQUEST\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex f8cd9166..1566d8ef 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -17,24 +17,25 @@\n \n \n def get_language(context, request):\n-    portal_state = getMultiAdapter((context, request),\n-                                   name=u\'plone_portal_state\')\n+    portal_state = getMultiAdapter((context, request), name=u"plone_portal_state")\n     return portal_state.language()\n \n \n def render_cachekey(fun, self):\n     # Include the name of the viewlet as the underlying cache key only\n     # takes the module and function name into account, but not the class\n-    return \'\\n\'.join([\n-        self.__name__,\n-        self.site_url,\n-        get_language(aq_inner(self.context), self.request),\n-    ])\n+    return "\\n".join(\n+        [\n+            self.__name__,\n+            self.site_url,\n+            get_language(aq_inner(self.context), self.request),\n+        ]\n+    )\n \n \n class FaviconViewlet(ViewletBase):\n \n-    _template = ViewPageTemplateFile(\'favicon.pt\')\n+    _template = ViewPageTemplateFile("favicon.pt")\n \n     @ram.cache(render_cachekey)\n     def render(self):\n@@ -43,7 +44,7 @@ def render(self):\n \n class SearchViewlet(ViewletBase):\n \n-    _template = ViewPageTemplateFile(\'search.pt\')\n+    _template = ViewPageTemplateFile("search.pt")\n \n     @ram.cache(render_cachekey)\n     def render(self):\n@@ -52,36 +53,32 @@ def render(self):\n \n class AuthorViewlet(ViewletBase):\n \n-    _template = ViewPageTemplateFile(\'author.pt\')\n+    _template = ViewPageTemplateFile("author.pt")\n \n     def update(self):\n         super(AuthorViewlet, self).update()\n-        self.tools = getMultiAdapter((self.context, self.request),\n-                                     name=\'plone_tools\')\n+        self.tools = getMultiAdapter((self.context, self.request), name="plone_tools")\n \n     def show(self):\n         anonymous = self.portal_state.anonymous()\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n         return not anonymous or settings.allow_anon_views_about\n \n     def render(self):\n         if self.show():\n             return self._template()\n-        return u\'\'\n+        return u""\n \n \n class RSSViewlet(ViewletBase):\n-\n     def getRssLinks(self, obj):\n         settings = IFeedSettings(obj, None)\n         if settings is None:\n             return []\n         factory = getUtility(\n-            IVocabularyFactory, "plone.app.vocabularies.SyndicationFeedTypes")\n+            IVocabularyFactory, "plone.app.vocabularies.SyndicationFeedTypes"\n+        )\n         vocabulary = factory(self.context)\n         urls = []\n         for typ in settings.feed_types:\n@@ -90,20 +87,22 @@ def getRssLinks(self, obj):\n             except LookupError:\n                 continue\n \n-            urls.append({\n-                \'title\': \'%s - %s\' % (\n-                    obj.Title(), safe_bytes(term.title)),\n-                \'url\': obj.absolute_url() + \'/\' + term.value})\n+            urls.append(\n+                {\n+                    "title": "%s - %s" % (obj.Title(), safe_bytes(term.title)),\n+                    "url": obj.absolute_url() + "/" + term.value,\n+                }\n+            )\n         return urls\n \n     def update(self):\n         super(RSSViewlet, self).update()\n         self.rsslinks = []\n         portal = self.portal_state.portal()\n-        util = getMultiAdapter((self.context, self.request),\n-                               name="syndication-util")\n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n+        util = getMultiAdapter((self.context, self.request), name="syndication-util")\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         if context_state.is_portal_root():\n             if util.site_enabled():\n                 registry = getUtility(IRegistry)\n@@ -116,9 +115,8 @@ def update(self):\n                         if not uid:\n                             continue\n                         obj = uuidToObject(uid)\n-                        if obj is None and uid[0] == \'/\':\n-                            obj = portal.restrictedTraverse(\n-                                uid.lstrip(\'/\'), None)\n+                        if obj is None and uid[0] == "/":\n+                            obj = portal.restrictedTraverse(uid.lstrip("/"), None)\n                         if obj is not None:\n                             self.rsslinks.extend(self.getRssLinks(obj))\n                 self.rsslinks.extend(self.getRssLinks(portal))\n@@ -126,7 +124,7 @@ def update(self):\n             if util.context_enabled():\n                 self.rsslinks.extend(self.getRssLinks(self.context))\n \n-    index = ViewPageTemplateFile(\'rsslink.pt\')\n+    index = ViewPageTemplateFile("rsslink.pt")\n \n \n class CanonicalURL(ViewletBase):\n@@ -140,6 +138,7 @@ class CanonicalURL(ViewletBase):\n     @view.memoize\n     def render(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u\'plone_context_state\')\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         canonical_url = context_state.canonical_object_url()\n         return u\'    <link rel="canonical" href="%s" />\' % canonical_url\ndiff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py\nindex ee9a0ffa..3f684b8f 100644\n--- a/plone/app/layout/navigation/defaultpage.py\n+++ b/plone/app/layout/navigation/defaultpage.py\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n from zope.deferredimport import deprecated\n \n+\n # remove in Plone 6\n deprecated(\n     "Import from Products.CMFPlone instead",\n-    DefaultPage=\'Products.CMFPlone.browser.defaultpage:DefaultPage\',\n-    isDefaultPage=\'Products.CMFPlone.defaultpage:is_default_page\',\n-    getDefaultPage=\'Products.CMFPlone.defaultpage:get_default_page\',\n+    DefaultPage="Products.CMFPlone.browser.defaultpage:DefaultPage",\n+    isDefaultPage="Products.CMFPlone.defaultpage:is_default_page",\n+    getDefaultPage="Products.CMFPlone.defaultpage:get_default_page",\n )\ndiff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py\nindex 67739ce9..ed5408cc 100644\n--- a/plone/app/layout/navigation/interfaces.py\n+++ b/plone/app/layout/navigation/interfaces.py\n@@ -3,10 +3,11 @@\n from zope.interface import Attribute\n from zope.interface import Interface\n \n+\n # remove in plone 6\n deprecated(\n     "Import from Products.CMFPlone instead",\n-    IDefaultPage=\'Products.CMFPlone.interfaces.defaultpage:DefaultPage\',\n+    IDefaultPage="Products.CMFPlone.interfaces.defaultpage:DefaultPage",\n )\n \n \n@@ -32,10 +33,12 @@ class INavtreeStrategy(Interface):\n     """\n \n     rootPath = Attribute(\n-        "The path to the root of the navtree (None means use portal root)")\n+        "The path to the root of the navtree (None means use portal root)"\n+    )\n \n     showAllParents = Attribute(\n-        "Whether or not to show all parents of the current context always")\n+        "Whether or not to show all parents of the current context always"\n+    )\n \n     def nodeFilter(node):\n         """Return True or False to determine whether to include the given node\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex fb45964c..83ba3fd1 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -21,8 +21,7 @@ class NavtreeStrategyBase(object):\n     showAllParents = False\n \n     # Default sorting and treatment of default-pages\n-    supplimentQuery = {\'sort_on\': \'getObjPositionInParent\',\n-                       \'is_default_page\': False}\n+    supplimentQuery = {"sort_on": "getObjPositionInParent", "is_default_page": False}\n \n     def nodeFilter(self, node):\n         return True\n@@ -37,8 +36,7 @@ def showChildrenOf(self, object):\n         return True\n \n \n-def buildFolderTree(context, obj=None, query={},\n-                    strategy=NavtreeStrategyBase()):\n+def buildFolderTree(context, obj=None, query={}, strategy=NavtreeStrategyBase()):\n     """Create a tree structure representing a navigation tree. By default,\n     it will create a full "sitemap" tree, rooted at the portal, ordered\n     by explicit folder order. If the \'query\' parameter contains a \'path\'\n@@ -118,12 +116,12 @@ def buildFolderTree(context, obj=None, query={},\n     used for the purposes of selecting the \'currentItem\'.\n     """\n \n-    portal_url = getToolByName(context, \'portal_url\')\n-    portal_catalog = getToolByName(context, \'portal_catalog\')\n+    portal_url = getToolByName(context, "portal_url")\n+    portal_catalog = getToolByName(context, "portal_catalog")\n \n     rootPath = strategy.rootPath\n \n-    request = getattr(context, \'REQUEST\', {})\n+    request = getattr(context, "REQUEST", {})\n \n     # Find the object\'s path. Use parent folder if context is a default-page\n \n@@ -133,41 +131,45 @@ def buildFolderTree(context, obj=None, query={},\n         objPhysicalPath = obj.getPhysicalPath()\n         if utils.isDefaultPage(obj, request):\n             objPhysicalPath = objPhysicalPath[:-1]\n-        objPath = \'/\'.join(objPhysicalPath)\n+        objPath = "/".join(objPhysicalPath)\n \n     portalPath = portal_url.getPortalPath()\n     portalObject = portal_url.getPortalObject()\n \n     # Calculate rootPath from the path query if not set.\n \n-    if \'path\' not in query:\n+    if "path" not in query:\n         if rootPath is None:\n             rootPath = portalPath\n-        query[\'path\'] = rootPath\n+        query["path"] = rootPath\n     elif rootPath is None:\n-        pathQuery = query[\'path\']\n+        pathQuery = query["path"]\n         if isinstance(pathQuery, six.string_types):\n             rootPath = pathQuery\n         else:\n             # Adjust for the fact that in a \'navtree\' query, the actual path\n             # is the path of the current context\n-            if pathQuery.get(\'navtree\', False):\n-                navtreeLevel = pathQuery.get(\'navtree_start\', 1)\n+            if pathQuery.get("navtree", False):\n+                navtreeLevel = pathQuery.get("navtree_start", 1)\n                 if navtreeLevel > 1:\n-                    navtreeContextPath = pathQuery[\'query\']\n+                    navtreeContextPath = pathQuery["query"]\n                     navtreeContextPathElements = navtreeContextPath[\n-                        len(portalPath) + 1:].split(\'/\')\n+                        len(portalPath) + 1 :\n+                    ].split("/")\n                     # Short-circuit if we won\'t be able to find this path\n                     if len(navtreeContextPathElements) < (navtreeLevel - 1):\n-                        return {\'children\': []}\n-                    rootPath = portalPath + \'/\' + \'/\'.join(\n-                        navtreeContextPathElements[:navtreeLevel - 1])\n+                        return {"children": []}\n+                    rootPath = (\n+                        portalPath\n+                        + "/"\n+                        + "/".join(navtreeContextPathElements[: navtreeLevel - 1])\n+                    )\n                 else:\n                     rootPath = portalPath\n             else:\n-                rootPath = pathQuery[\'query\']\n+                rootPath = pathQuery["query"]\n \n-    rootDepth = len(rootPath.split(\'/\'))\n+    rootDepth = len(rootPath.split("/"))\n \n     # Determine if we need to prune the root (but still force the path to)\n     # the parent if necessary\n@@ -200,12 +202,12 @@ def buildFolderTree(context, obj=None, query={},\n     itemPaths = {}\n \n     # Add an (initially empty) node for the root\n-    itemPaths[rootPath] = {\'children\': []}\n+    itemPaths[rootPath] = {"children": []}\n \n     # If we need to "prune" the parent (but still allow showAllParent to\n     # force some children), do so now\n     if pruneRoot:\n-        itemPaths[rootPath][\'_pruneSubtree\'] = True\n+        itemPaths[rootPath]["_pruneSubtree"] = True\n \n     def insertElement(itemPaths, item, forceInsert=False):\n         """Insert the given \'item\' brain into the tree, which is kept in\n@@ -214,8 +216,7 @@ def insertElement(itemPaths, item, forceInsert=False):\n         block the insertion of a node.\n         """\n         itemPath = item.getPath()\n-        itemInserted = (itemPaths.get(\n-            itemPath, {}).get(\'item\', None) is not None)\n+        itemInserted = itemPaths.get(itemPath, {}).get("item", None) is not None\n \n         # Short-circuit if we already added this item. Don\'t short-circuit\n         # if we\'re forcing the insert, because we may have inserted but\n@@ -223,10 +224,9 @@ def insertElement(itemPaths, item, forceInsert=False):\n         if not forceInsert and itemInserted:\n             return\n \n-        itemPhysicalPath = itemPath.split(\'/\')\n-        parentPath = \'/\'.join(itemPhysicalPath[:-1])\n-        parentPruned = (itemPaths.get(\n-            parentPath, {}).get(\'_pruneSubtree\', False))\n+        itemPhysicalPath = itemPath.split("/")\n+        parentPath = "/".join(itemPhysicalPath[:-1])\n+        parentPruned = itemPaths.get(parentPath, {}).get("_pruneSubtree", False)\n \n         # Short-circuit if we know we\'re pruning this item\'s parent\n \n@@ -244,9 +244,8 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n         isCurrent = isCurrentParent = False\n         if objPath is not None:\n-            objpath_startswith_itempath = objPath.startswith(itemPath + \'/\')\n-            objpath_bigger_than_itempath = \\\n-                len(objPhysicalPath) > len(itemPhysicalPath)\n+            objpath_startswith_itempath = objPath.startswith(itemPath + "/")\n+            objpath_bigger_than_itempath = len(objPhysicalPath) > len(itemPhysicalPath)\n             if objPath == itemPath:\n                 isCurrent = True\n             elif objpath_startswith_itempath and objpath_bigger_than_itempath:\n@@ -254,10 +253,12 @@ def insertElement(itemPaths, item, forceInsert=False):\n \n         relativeDepth = len(itemPhysicalPath) - rootDepth\n \n-        newNode = {\'item\': item,\n-                   \'depth\': relativeDepth,\n-                   \'currentItem\': isCurrent,\n-                   \'currentParent\': isCurrentParent, }\n+        newNode = {\n+            "item": item,\n+            "depth": relativeDepth,\n+            "currentItem": isCurrent,\n+            "currentParent": isCurrentParent,\n+        }\n \n         insert = True\n         if not forceInsert and strategy is not None:\n@@ -274,16 +275,16 @@ def insertElement(itemPaths, item, forceInsert=False):\n                 itemParent = itemPaths[parentPath]\n                 if forceInsert:\n                     nodeAlreadyInserted = False\n-                    for i in itemParent[\'children\']:\n-                        if i[\'item\'].getPath() == itemPath:\n+                    for i in itemParent["children"]:\n+                        if i["item"].getPath() == itemPath:\n                             nodeAlreadyInserted = True\n                             break\n                     if not nodeAlreadyInserted:\n-                        itemParent[\'children\'].append(newNode)\n-                elif not itemParent.get(\'_pruneSubtree\', False):\n-                    itemParent[\'children\'].append(newNode)\n+                        itemParent["children"].append(newNode)\n+                elif not itemParent.get("_pruneSubtree", False):\n+                    itemParent["children"].append(newNode)\n             else:\n-                itemPaths[parentPath] = {\'children\': [newNode]}\n+                itemPaths[parentPath] = {"children": [newNode]}\n \n             # Ask the subtree filter (if any), if we should be expanding this\n             # node\n@@ -292,18 +293,18 @@ def insertElement(itemPaths, item, forceInsert=False):\n                 # children now\n                 expand = True\n             else:\n-                expand = getattr(item, \'is_folderish\', True)\n+                expand = getattr(item, "is_folderish", True)\n             if expand and (not forceInsert and strategy is not None):\n                 expand = strategy.subtreeFilter(newNode)\n \n-            children = newNode.setdefault(\'children\', [])\n+            children = newNode.setdefault("children", [])\n             if expand:\n                 # If we had some orphaned children for this node, attach\n                 # them\n                 if itemPath in itemPaths:\n-                    children.extend(itemPaths[itemPath][\'children\'])\n+                    children.extend(itemPaths[itemPath]["children"])\n             else:\n-                newNode[\'_pruneSubtree\'] = True\n+                newNode["_pruneSubtree"] = True\n \n             itemPaths[itemPath] = newNode\n \n@@ -315,38 +316,38 @@ def insertElement(itemPaths, item, forceInsert=False):\n     # context. Note that we use an unrestricted query: things we don\'t normally\n     # have permission to see will be included in the tree.\n     if strategy.showAllParents and objPath is not None:\n-        objSubPathElements = objPath[len(rootPath) + 1:].split(\'/\')\n+        objSubPathElements = objPath[len(rootPath) + 1 :].split("/")\n         parentPaths = []\n \n-        haveNode = (itemPaths.get(rootPath, {}).get(\'item\', None) is None)\n+        haveNode = itemPaths.get(rootPath, {}).get("item", None) is None\n         if not haveNode:\n             parentPaths.append(rootPath)\n \n         parentPath = rootPath\n         for i in range(len(objSubPathElements)):\n-            nodePath = rootPath + \'/\' + \'/\'.join(objSubPathElements[:i + 1])\n+            nodePath = rootPath + "/" + "/".join(objSubPathElements[: i + 1])\n             node = itemPaths.get(nodePath, None)\n \n             # If we don\'t have this node, we\'ll have to get it, if we have it\n             # but it wasn\'t connected, re-connect it\n-            if node is None or \'item\' not in node:\n+            if node is None or "item" not in node:\n                 parentPaths.append(nodePath)\n             else:\n                 nodeParent = itemPaths.get(parentPath, None)\n                 if nodeParent is not None:\n                     nodeAlreadyInserted = False\n-                    for i in nodeParent[\'children\']:\n-                        if i[\'item\'].getPath() == nodePath:\n+                    for i in nodeParent["children"]:\n+                        if i["item"].getPath() == nodePath:\n                             nodeAlreadyInserted = True\n                             break\n                     if not nodeAlreadyInserted:\n-                        nodeParent[\'children\'].append(node)\n+                        nodeParent["children"].append(node)\n \n             parentPath = nodePath\n \n         # If we were outright missing some nodes, find them again\n         if len(parentPaths) > 0:\n-            query = {\'path\': {\'query\': parentPaths, \'depth\': 0}}\n+            query = {"path": {"query": parentPaths, "depth": 0}}\n             results = portal_catalog.unrestrictedSearchResults(query)\n \n             for r in results:\ndiff --git a/plone/app/layout/navigation/root.py b/plone/app/layout/navigation/root.py\nindex fcc3d109..734af426 100644\n--- a/plone/app/layout/navigation/root.py\n+++ b/plone/app/layout/navigation/root.py\n@@ -27,24 +27,24 @@ def getNavigationRoot(context, relativeRoot=None):\n     Return the path of that root.\n     """\n     try:\n-        portal_url = getToolByName(context, \'portal_url\')\n+        portal_url = getToolByName(context, "portal_url")\n     except AttributeError:\n         site = getSite()\n-        return \'/\'.join(site.getPhysicalPath())\n+        return "/".join(site.getPhysicalPath())\n \n     if relativeRoot is None:\n         # fetch from portal_properties\n         registry = getUtility(IRegistry)\n-        relativeRoot = registry.get(\'plone.root\', None)\n+        relativeRoot = registry.get("plone.root", None)\n \n     # if relativeRoot has a meaningful value,\n-    if relativeRoot and relativeRoot != \'/\':\n+    if relativeRoot and relativeRoot != "/":\n         # use it\n \n         # while taking care of case where\n         # relativeRoot is not starting with a \'/\'\n-        if relativeRoot[0] != \'/\':\n-            relativeRoot = \'/\' + relativeRoot\n+        if relativeRoot[0] != "/":\n+            relativeRoot = "/" + relativeRoot\n \n         portalPath = portal_url.getPortalPath()\n         return portalPath + relativeRoot\n@@ -52,13 +52,12 @@ def getNavigationRoot(context, relativeRoot=None):\n         # compute the root\n         portal = portal_url.getPortalObject()\n         root = getNavigationRootObject(context, portal)\n-        return \'/\'.join(root.getPhysicalPath())\n+        return "/".join(root.getPhysicalPath())\n \n \n def getNavigationRootObject(context, portal):\n     obj = context\n-    while (not INavigationRoot.providedBy(obj) and\n-            aq_base(obj) is not aq_base(portal)):\n+    while not INavigationRoot.providedBy(obj) and aq_base(obj) is not aq_base(portal):\n         parent = aq_parent(aq_inner(obj))\n         if parent is None:\n             return obj\ndiff --git a/plone/app/layout/navigation/tests/test_defaultpage.py b/plone/app/layout/navigation/tests/test_defaultpage.py\nindex fe03f001..2bc6e75f 100644\n--- a/plone/app/layout/navigation/tests/test_defaultpage.py\n+++ b/plone/app/layout/navigation/tests/test_defaultpage.py\n@@ -13,19 +13,20 @@ class DefaultPageTestCase(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\', title=u"Test Folder")\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder", title=u"Test Folder")\n         self.folder = self.portal.folder\n \n     def test_getDefaultPage_step_1(self):\n         # A content object called \'index_html\' wins\n-        self.folder.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n-        self.folder.setDefaultPage(\'d1\')\n-        self.folder.invokeFactory(\'Document\', \'index_html\', title=u"Doc 2")\n+        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n+        self.folder.setDefaultPage("d1")\n+        self.folder.invokeFactory("Document", "index_html", title=u"Doc 2")\n \n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n-        self.assertEqual(\'index_html\', getDefaultPage(self.folder))\n+\n+        self.assertEqual("index_html", getDefaultPage(self.folder))\n \n     def test_getDefaultPage_step_2(self):\n         # Else check for IBrowserDefault, either if the container implements\n@@ -38,27 +39,29 @@ def test_getDefaultPage_step_2(self):\n         #\n         # 1) a folder provides IBrowserDefault\n         from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n+\n         self.assertTrue(IBrowserDefault.providedBy(self.folder))\n \n         # 2) a folder also provides an fti that implements\n         #    IDynamicViewTypeInformation\n-        from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation  # noqa\n+        from Products.CMFDynamicViewFTI.interfaces import (\n+            IDynamicViewTypeInformation,\n+        )  # noqa\n+\n         fti = self.folder.getTypeInfo()\n         self.assertTrue(IDynamicViewTypeInformation.providedBy(fti))\n \n         # so if we set a document as defaultpage\n-        self.folder.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n-        self.folder.setDefaultPage(\'d1\')\n+        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n+        self.folder.setDefaultPage("d1")\n \n         # 3) fti should return it\n-        self.assertEqual(\n-            \'d1\',\n-            fti.getDefaultPage(self.folder, check_exists=True)\n-        )\n+        self.assertEqual("d1", fti.getDefaultPage(self.folder, check_exists=True))\n \n         # now test since we\'re sure everythings set up correctly\n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+\n+        self.assertEqual("d1", getDefaultPage(self.folder))\n \n         # missing here:\n         # - test adapter instead of direct implements in precondition 1\n@@ -68,54 +71,55 @@ def test_getDefaultPage_step_3_1(self):\n         # 3. Else, look up the attribute default_page on the object, without\n         #    acquisition in place\n         # 3.1 look for a content in the container with the id, no acquisition!\n-        self.folder.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n+        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n \n         # set doc d1 must work\n-        self.folder.default_page = \'d1\'\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+        self.folder.default_page = "d1"\n+        self.assertEqual("d1", getDefaultPage(self.folder))\n \n         # set doc d2 must fail and return None\n-        self.folder.default_page = \'d2\'\n+        self.folder.default_page = "d2"\n         self.assertIsNone(getDefaultPage(self.folder))\n \n         # list of possible values is allowed\n-        self.folder.default_page = [\'d2\', \'d1\']\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+        self.folder.default_page = ["d2", "d1"]\n+        self.assertEqual("d1", getDefaultPage(self.folder))\n \n         # list of impossible values return None\n-        self.folder.default_page = [\'d2\', \'d3\']\n+        self.folder.default_page = ["d2", "d3"]\n         self.assertIsNone(getDefaultPage(self.folder))\n \n         # acquisition check, must not work\n-        self.folder.invokeFactory(\'Folder\', \'f1\', title=u"Sub Folder 1")\n-        self.folder.f1.invokeFactory(\'Document\', \'d2\', title=u"Document 2")\n-        self.folder.default_page = \'d2\'\n+        self.folder.invokeFactory("Folder", "f1", title=u"Sub Folder 1")\n+        self.folder.f1.invokeFactory("Document", "d2", title=u"Document 2")\n+        self.folder.default_page = "d2"\n         self.assertIsNone(getDefaultPage(self.folder.f1))\n \n     def test_getDefaultPage_step_3_2(self):\n         # 3. Else, look up the attribute default_page on the object, without\n         #    acquisition in place\n         # 3.2 look for a content at portal, with acquisition\n-        self.portal.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n-        self.folder.default_page = \'d1\'\n+        self.portal.invokeFactory("Document", "d1", title=u"Doc 1")\n+        self.folder.default_page = "d1"\n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n \n         # now it must acquire from portal\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+        self.assertEqual("d1", getDefaultPage(self.folder))\n \n         # fetch from i.e. portal_skins by acquisition\n         # test_rendering.pt is in portal_skins/plone_templates and so available\n         # by acquisition\n-        self.folder.default_page = \'test_rendering\'\n-        self.assertEqual(\'test_rendering\', getDefaultPage(self.folder))\n+        self.folder.default_page = "test_rendering"\n+        self.assertEqual("test_rendering", getDefaultPage(self.folder))\n \n     def test_getDefaultPage_step_4(self):\n         # 4. Else, look up the property default_page in the configuration\n         # registry for magic ids and test these\n         registry = getUtility(IRegistry)\n-        registry[\'plone.default_page\'] = [u\'d1\']\n-        self.folder.invokeFactory(\'Document\', \'d1\', title=u"Doc 1")\n+        registry["plone.default_page"] = [u"d1"]\n+        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n \n         from plone.app.layout.navigation.defaultpage import getDefaultPage\n-        self.assertEqual(\'d1\', getDefaultPage(self.folder))\n+\n+        self.assertEqual("d1", getDefaultPage(self.folder))\ndiff --git a/plone/app/layout/navigation/tests/test_root.py b/plone/app/layout/navigation/tests/test_root.py\nindex 4ec47e74..46a6afd2 100644\n--- a/plone/app/layout/navigation/tests/test_root.py\n+++ b/plone/app/layout/navigation/tests/test_root.py\n@@ -10,12 +10,9 @@ class NavigationRootTestCase(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def test_getNavigationRootObject_no_context(self):\n-        \'\'\'\n+        """\n         If you don\'t know the context then you also don\'t know what the\n         navigation root is.\n-        \'\'\'\n-        self.portal = self.layer[\'portal\']\n-        self.assertEqual(\n-            None,\n-            getNavigationRootObject(None, self.portal)\n-        )\n+        """\n+        self.portal = self.layer["portal"]\n+        self.assertEqual(None, getNavigationRootObject(None, self.portal))\ndiff --git a/plone/app/layout/nextprevious/view.py b/plone/app/layout/nextprevious/view.py\nindex 6be1bd0d..c3b85e60 100644\n--- a/plone/app/layout/nextprevious/view.py\n+++ b/plone/app/layout/nextprevious/view.py\n@@ -36,14 +36,15 @@ def _provider(self):\n         return INextPreviousProvider(aq_parent(aq_inner(self.context)), None)\n \n     def isViewTemplate(self):\n-        plone = getMultiAdapter((\n-            self.context, self.request), name=u\'plone_context_state\')\n+        plone = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         return plone.is_view_template()\n \n \n class NextPreviousViewlet(ViewletBase, NextPreviousView):\n-    index = ZopeTwoPageTemplateFile(\'nextprevious.pt\')\n+    index = ZopeTwoPageTemplateFile("nextprevious.pt")\n \n \n class NextPreviousLinksViewlet(ViewletBase, NextPreviousView):\n-    index = ZopeTwoPageTemplateFile(\'links.pt\')\n+    index = ZopeTwoPageTemplateFile("links.pt")\ndiff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py\nindex e8ae0a5a..f62c06b1 100644\n--- a/plone/app/layout/sitemap/sitemap.py\n+++ b/plone/app/layout/sitemap/sitemap.py\n@@ -17,14 +17,14 @@\n \n def _render_cachekey(fun, self):\n     # Cache by filename\n-    mtool = getToolByName(self.context, \'portal_membership\')\n+    mtool = getToolByName(self.context, "portal_membership")\n     if not mtool.isAnonymousUser():\n         raise ram.DontCache\n \n     url = self.context.absolute_url()\n-    catalog = getToolByName(self.context, \'portal_catalog\')\n+    catalog = getToolByName(self.context, "portal_catalog")\n     counter = catalog.getCounter()\n-    return \'%s/%s/%s\' % (url, self.filename, counter)\n+    return "%s/%s/%s" % (url, self.filename, counter)\n \n \n class SiteMapView(BrowserView):\n@@ -33,31 +33,32 @@ class SiteMapView(BrowserView):\n     http://www.sitemaps.org/protocol.php\n     """\n \n-    template = ViewPageTemplateFile(\'sitemap.xml\')\n+    template = ViewPageTemplateFile("sitemap.xml")\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n-        self.filename = \'sitemap.xml.gz\'\n+        self.filename = "sitemap.xml.gz"\n \n     def objects(self):\n         """Returns the data to create the sitemap."""\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         query = {}\n-        utils = getToolByName(self.context, \'plone_utils\')\n-        query[\'portal_type\'] = utils.getUserFriendlyTypes()\n+        utils = getToolByName(self.context, "plone_utils")\n+        query["portal_type"] = utils.getUserFriendlyTypes()\n         registry = getUtility(IRegistry)\n         typesUseViewActionInListings = frozenset(\n-            registry.get(\'plone.types_use_view_action_in_listings\', []))\n+            registry.get("plone.types_use_view_action_in_listings", [])\n+        )\n \n         is_plone_site_root = IPloneSiteRoot.providedBy(self.context)\n         if not is_plone_site_root:\n-            query[\'path\'] = \'/\'.join(self.context.getPhysicalPath())\n+            query["path"] = "/".join(self.context.getPhysicalPath())\n \n-        query[\'is_default_page\'] = True\n+        query["is_default_page"] = True\n         default_page_modified = OOBTree()\n         for item in catalog.searchResults(query):\n-            key = item.getURL().rsplit(\'/\', 1)[0]\n+            key = item.getURL().rsplit("/", 1)[0]\n             value = (item.modified.micros(), item.modified.ISO8601())\n             default_page_modified[key] = value\n \n@@ -72,14 +73,14 @@ def objects(self):\n                 modified = max(modified, default_modified)\n             lastmod = modified[1]\n             yield {\n-                \'loc\': loc,\n-                \'lastmod\': lastmod,\n+                "loc": loc,\n+                "lastmod": lastmod,\n                 # \'changefreq\': \'always\',\n                 #  hourly/daily/weekly/monthly/yearly/never\n                 # \'prioriy\': 0.5, # 0.0 to 1.0\n             }\n \n-        query[\'is_default_page\'] = False\n+        query["is_default_page"] = False\n         for item in catalog.searchResults(query):\n             loc = item.getURL()\n             date = item.modified\n@@ -90,10 +91,10 @@ def objects(self):\n                 modified = max(modified, default_modified)\n             lastmod = modified[1]\n             if item.portal_type in typesUseViewActionInListings:\n-                loc += \'/view\'\n+                loc += "/view"\n             yield {\n-                \'loc\': loc,\n-                \'lastmod\': lastmod,\n+                "loc": loc,\n+                "lastmod": lastmod,\n                 # \'changefreq\': \'always\',\n                 #  hourly/daily/weekly/monthly/yearly/never\n                 # \'prioriy\': 0.5, # 0.0 to 1.0\n@@ -104,9 +105,9 @@ def generate(self):\n         """Generates the Gzipped sitemap."""\n         xml = self.template()\n         fp = BytesIO()\n-        gzip = GzipFile(self.filename, \'wb\', 9, fp)\n+        gzip = GzipFile(self.filename, "wb", 9, fp)\n         if isinstance(xml, six.text_type):\n-            xml = xml.encode(\'utf8\')\n+            xml = xml.encode("utf8")\n         gzip.write(xml)\n         gzip.close()\n         data = fp.getvalue()\n@@ -120,8 +121,5 @@ def __call__(self):\n         if not settings.enable_sitemap:\n             raise NotFound(self.context, self.filename, self.request)\n \n-        self.request.response.setHeader(\n-            \'Content-Type\',\n-            \'application/octet-stream\'\n-        )\n+        self.request.response.setHeader("Content-Type", "application/octet-stream")\n         return self.generate()\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex d4a132b9..a4a56d77 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -28,13 +28,14 @@ class SiteMapTestCase(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n         self.site_settings.enable_sitemap = True\n-        self.sitemap = getMultiAdapter((self.portal, self.portal.REQUEST),\n-                                       name=\'sitemap.xml.gz\')\n-        self.wftool = getToolByName(self.portal, \'portal_workflow\')\n+        self.sitemap = getMultiAdapter(\n+            (self.portal, self.portal.REQUEST), name="sitemap.xml.gz"\n+        )\n+        self.wftool = getToolByName(self.portal, "portal_workflow")\n \n         # we need to explizitly set a workflow cause we can\'t rely on the\n         # test environment.\n@@ -42,32 +43,31 @@ def setUp(self):\n         # wftool._default_chain == \'simple_publication_workflow\'\n         # `instance test -m plone.app`:\n         # wftool._default_chain == \'plone_workflow\'\n-        self.wftool.setChainForPortalTypes([\'Document\'],\n-                                           \'simple_publication_workflow\')\n+        self.wftool.setChainForPortalTypes(["Document"], "simple_publication_workflow")\n \n         self.site_properties = getToolByName(\n-            self.portal, \'portal_properties\').site_properties\n+            self.portal, "portal_properties"\n+        ).site_properties\n \n         # setup private content that isn\'t accessible for anonymous\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(id=\'private\', type_name=\'Document\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory(id="private", type_name="Document")\n         private = self.portal.private\n-        self.assertTrue(\'private\' == self.wftool.getInfoFor(private,\n-                                                            \'review_state\'))\n+        self.assertTrue("private" == self.wftool.getInfoFor(private, "review_state"))\n \n         # setup published content that is accessible for anonymous\n-        self.portal.invokeFactory(id=\'published\', type_name=\'Document\')\n+        self.portal.invokeFactory(id="published", type_name="Document")\n         published = self.portal.published\n-        self.wftool.doActionFor(published, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(published,\n-                                                              \'review_state\'))\n+        self.wftool.doActionFor(published, "publish")\n+        self.assertTrue(\n+            "published" == self.wftool.getInfoFor(published, "review_state")\n+        )\n \n         # setup pending content that isn\'t accessible for anonymous\n-        self.portal.invokeFactory(id=\'pending\', type_name=\'Document\')\n+        self.portal.invokeFactory(id="pending", type_name="Document")\n         pending = self.portal.pending\n-        self.wftool.doActionFor(pending, \'submit\')\n-        self.assertTrue(\'pending\' == self.wftool.getInfoFor(pending,\n-                                                            \'review_state\'))\n+        self.wftool.doActionFor(pending, "submit")\n+        self.assertTrue("pending" == self.wftool.getInfoFor(pending, "review_state"))\n         logout()\n \n     def uncompress(self, sitemapdata):\n@@ -78,9 +78,9 @@ def uncompress(self, sitemapdata):\n         return safe_unicode(xml)\n \n     def test_disabled(self):\n-        \'\'\'\n+        """\n         If the sitemap is disabled throws a 404 error.\n-        \'\'\'\n+        """\n         self.site_settings.enable_sitemap = False\n         try:\n             self.sitemap()\n@@ -89,179 +89,182 @@ def test_disabled(self):\n             # different exceptions. but both implement INotFound.\n             self.assertTrue(INotFound.providedBy(e))\n         else:\n-            self.fail(\'The disabled sitemap view has to raise NotFound!\')\n+            self.fail("The disabled sitemap view has to raise NotFound!")\n \n     def test_authenticated_before_anonymous(self):\n-        \'\'\'\n+        """\n         Requests for the sitemap by authenticated users are not cached.\n         anomymous users get a uncached sitemap that only contains content\n         that they are supposed to see.\n-        \'\'\'\n+        """\n \n         # first round as an authenticated (manager)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n         xml = self.uncompress(self.sitemap())\n-        self.assertTrue(\'<loc>http://nohost/plone/private</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertTrue("<loc>http://nohost/plone/private</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/pending</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/published</loc>" in xml)\n \n         # second round as anonymous\n         logout()\n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/private</loc>\' in xml)\n-        self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/private</loc>" in xml)\n+        self.assertFalse("<loc>http://nohost/plone/pending</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/published</loc>" in xml)\n \n     def test_anonymous_before_authenticated(self):\n-        \'\'\'\n+        """\n         Requests for the sitemap by anonymous users are cached.\n         authenticated users get a uncached sitemap. Test that the cached\n         Sitemap is not delivered to authenticated users.\n-        \'\'\'\n+        """\n \n         # first round as anonymous\n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/private</loc>\' in xml)\n-        self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/private</loc>" in xml)\n+        self.assertFalse("<loc>http://nohost/plone/pending</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/published</loc>" in xml)\n \n         # second round as an authenticated (manager)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n         xml = self.uncompress(self.sitemap())\n-        self.assertTrue(\'<loc>http://nohost/plone/private</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertTrue("<loc>http://nohost/plone/private</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/pending</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/published</loc>" in xml)\n \n     def test_changed_catalog(self):\n-        \'\'\'\n+        """\n         The sitemap is generated from the catalog. If the catalog changes, a\n         new sitemap has to be generated.\n-        \'\'\'\n+        """\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/pending</loc>" in xml)\n \n         # changing the workflow state\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         pending = self.portal.pending\n-        self.wftool.doActionFor(pending, \'publish\')\n+        self.wftool.doActionFor(pending, "publish")\n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertTrue(\'<loc>http://nohost/plone/pending</loc>\' in xml)\n+        self.assertTrue("<loc>http://nohost/plone/pending</loc>" in xml)\n \n         # removing content\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.manage_delObjects([\'published\', ])\n+        self.portal.manage_delObjects(\n+            ["published",]\n+        )\n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/published</loc>" in xml)\n \n     def test_navroot(self):\n-        \'\'\'\n+        """\n         Sitemap generated from an INavigationRoot\n-        \'\'\'\n+        """\n         # setup navroot content that is accessible for anonymous\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(id=\'navroot\', type_name=\'Folder\')\n+        self.portal.invokeFactory(id="navroot", type_name="Folder")\n         navroot = self.portal.navroot\n-        self.wftool.doActionFor(navroot, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            navroot, \'review_state\'))\n+        self.wftool.doActionFor(navroot, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(navroot, "review_state"))\n         alsoProvides(navroot, INavigationRoot)\n-        navroot.invokeFactory(id=\'published\', type_name=\'Document\')\n+        navroot.invokeFactory(id="published", type_name="Document")\n         published = navroot.published\n-        self.wftool.doActionFor(published, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            published, \'review_state\'))\n+        self.wftool.doActionFor(published, "publish")\n+        self.assertTrue(\n+            "published" == self.wftool.getInfoFor(published, "review_state")\n+        )\n         logout()\n \n-        sitemap = getMultiAdapter((self.portal.navroot, self.portal.REQUEST),\n-                                  name=\'sitemap.xml.gz\')\n+        sitemap = getMultiAdapter(\n+            (self.portal.navroot, self.portal.REQUEST), name="sitemap.xml.gz"\n+        )\n         xml = self.uncompress(sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/published</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/navroot</loc>\' in xml)\n-        self.assertTrue(\n-            \'<loc>http://nohost/plone/navroot/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/published</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/navroot</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/navroot/published</loc>" in xml)\n \n     def test_types_not_searched(self):\n-        \'\'\'\n+        """\n         Test that types_not_searched is respected\n-        \'\'\'\n+        """\n         # Set News Items not to be searchable (more likely Images)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(id=\'newsitem\', type_name=\'News Item\')\n+        self.portal.invokeFactory(id="newsitem", type_name="News Item")\n         newsitem = self.portal.newsitem\n-        self.wftool.doActionFor(newsitem, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            newsitem, \'review_state\'))\n+        self.wftool.doActionFor(newsitem, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(newsitem, "review_state"))\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        search_settings.types_not_searched = (\'News Item\',)\n+        search_settings.types_not_searched = ("News Item",)\n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\'<loc>http://nohost/plone/newsitem</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/newsitem</loc>" in xml)\n \n     def test_typesUseViewActionInListings(self):\n-        \'\'\'\n+        """\n         Test that typesUseViewActionInListings is respected\n-        \'\'\'\n+        """\n         # Set News Items not to be searchable (more likely Images)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(id=\'newsitem\', type_name=\'News Item\')\n+        self.portal.invokeFactory(id="newsitem", type_name="News Item")\n         newsitem = self.portal.newsitem\n-        self.wftool.doActionFor(newsitem, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            newsitem, \'review_state\'))\n+        self.wftool.doActionFor(newsitem, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(newsitem, "review_state"))\n         registry = getUtility(IRegistry)\n-        registry[\'plone.types_use_view_action_in_listings\'] = [u\'News Item\']\n+        registry["plone.types_use_view_action_in_listings"] = [u"News Item"]\n \n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertTrue(\'<loc>http://nohost/plone/newsitem/view</loc>\' in xml)\n+        self.assertTrue("<loc>http://nohost/plone/newsitem/view</loc>" in xml)\n \n     def test_default_pages(self):\n-        \'\'\'\n+        """\n         Default pages should show up at their parent\'s url with the greater of\n         their or their parent\'s modification time.\n-        \'\'\'\n+        """\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        self.portal.invokeFactory(id=\'folder\', type_name=\'Folder\')\n+        self.portal.invokeFactory(id="folder", type_name="Folder")\n         folder = self.portal.folder\n         folder.default_page = "default"\n-        self.wftool.doActionFor(folder, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            folder, \'review_state\'))\n+        self.wftool.doActionFor(folder, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(folder, "review_state"))\n \n-        folder.invokeFactory(id=\'default\', type_name=\'Document\')\n+        folder.invokeFactory(id="default", type_name="Document")\n         default = folder.default\n-        self.wftool.doActionFor(default, \'publish\')\n-        self.assertTrue(\'published\' == self.wftool.getInfoFor(\n-            default, \'review_state\'))\n+        self.wftool.doActionFor(default, "publish")\n+        self.assertTrue("published" == self.wftool.getInfoFor(default, "review_state"))\n         self.assertTrue(self.portal.plone_utils.isDefaultPage(default))\n         default.modification_date = DateTime("2001-01-01")\n         folder.modification_date = DateTime("2000-01-01")\n-        self.portal.portal_catalog.reindexObject(folder, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n-        self.portal.portal_catalog.reindexObject(default, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n+        self.portal.portal_catalog.reindexObject(\n+            folder, idxs=["modified", "is_default_page", "effective"]\n+        )\n+        self.portal.portal_catalog.reindexObject(\n+            default, idxs=["modified", "is_default_page", "effective"]\n+        )\n         self.portal.default_page = "published"\n-        self.portal.portal_catalog.reindexObject(self.portal.published, idxs=[\'modified\', \'is_default_page\', \'effective\'])\n+        self.portal.portal_catalog.reindexObject(\n+            self.portal.published, idxs=["modified", "is_default_page", "effective"]\n+        )\n         logout()\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertFalse(\n-            \'<loc>http://nohost/plone/folder/default</loc>\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone/folder</loc>\' in xml)\n-        self.assertTrue(\'<lastmod>2001-01-01T\' in xml)\n-        self.assertTrue(\'<loc>http://nohost/plone</loc>\' in xml)\n-        self.assertFalse(\'<loc>http://nohost/plone/published</loc>\' in xml)\n+        self.assertFalse("<loc>http://nohost/plone/folder/default</loc>" in xml)\n+        self.assertTrue("<loc>http://nohost/plone/folder</loc>" in xml)\n+        self.assertTrue("<lastmod>2001-01-01T" in xml)\n+        self.assertTrue("<loc>http://nohost/plone</loc>" in xml)\n+        self.assertFalse("<loc>http://nohost/plone/published</loc>" in xml)\ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex e59429e9..f677a98f 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -14,10 +14,11 @@ class Fixture(PloneSandboxLayer):\n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.layout\n+\n         self.loadZCML(package=plone.app.layout)\n \n     def setUpPloneSite(self, portal):\n-        _createObjectByType(\'Folder\', portal, id=\'Members\')\n+        _createObjectByType("Folder", portal, id="Members")\n         mtool = portal.portal_membership\n         if not mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n@@ -28,10 +29,8 @@ def setUpPloneSite(self, portal):\n \n FIXTURE = Fixture()\n INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(FIXTURE,),\n-    name=\'plone.app.layout:Integration\',\n+    bases=(FIXTURE,), name="plone.app.layout:Integration",\n )\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE,),\n-    name=\'plone.app.layout:Functional\',\n+    bases=(FIXTURE,), name="plone.app.layout:Functional",\n )\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex daa4fc28..116529fb 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -32,6 +32,7 @@\n from zope.interface import implementer\n from zope.viewlet.interfaces import IViewlet\n \n+\n try:\n     from html import escape\n except ImportError:\n@@ -56,14 +57,16 @@ def __hash__(self):\n         return id(self) * 16\n \n     @property\n-    @deprecate("Use site_url instead. " +\n-               "ViewletBase.portal_url will be removed in Plone 4")\n+    @deprecate(\n+        "Use site_url instead. " + "ViewletBase.portal_url will be removed in Plone 4"\n+    )\n     def portal_url(self):\n         return self.site_url\n \n     def update(self):\n-        self.portal_state = getMultiAdapter((self.context, self.request),\n-                                            name=u\'plone_portal_state\')\n+        self.portal_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n         self.site_url = self.portal_state.portal_url()\n         self.navigation_root_url = self.portal_state.navigation_root_url()\n \n@@ -73,39 +76,36 @@ def render(self):\n         return self.index()\n \n     def index(self):\n-        raise NotImplementedError(\n-            \'`index` method must be implemented by subclass.\')\n+        raise NotImplementedError("`index` method must be implemented by subclass.")\n \n     def __lt__(self, other):\n-        \'\'\' Sort by name\n-        \'\'\'\n+        """ Sort by name\n+        """\n         return self.__name__ < other.__name__\n \n     def __eq__(self, other):\n-        \'\'\' Check for equality\n-        \'\'\'\n+        """ Check for equality\n+        """\n         return id(self) == id(other)\n \n \n class TitleViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'title.pt\')\n+    index = ViewPageTemplateFile("title.pt")\n \n     # seperator of page- and portal-title\n-    sep = u\' &mdash; \'\n+    sep = u" &mdash; "\n \n     @property\n     @memoize\n     def site_title_setting(self):\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(ISiteSchema,\n-                                              prefix="plone",\n-                                              check=False)\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         return site_settings.site_title\n \n     @property\n     @memoize\n     def page_title(self):\n-        \'\'\'\n+        """\n         Get the page title. If we are in the portal_factory we want use the\n         "Add $FTI_TITLE" form (see #12117).\n \n@@ -113,38 +113,40 @@ def page_title(self):\n          - to use "Untitled" instead of "Add" or\n          - to check the isTemporary method of the edit view instead of the\n            creation_flag\n-        \'\'\'\n-        if (hasattr(aq_base(self.context), \'isTemporary\') and\n-                self.context.isTemporary()):\n+        """\n+        if hasattr(aq_base(self.context), "isTemporary") and self.context.isTemporary():\n             # if we are in the portal_factory we want the page title to be\n             # "Add fti title"\n-            portal_types = getToolByName(self.context, \'portal_types\')\n+            portal_types = getToolByName(self.context, "portal_types")\n             fti = portal_types.getTypeInfo(self.context)\n-            return translate(\'heading_add_item\',\n-                             domain=\'plone\',\n-                             mapping={\'itemtype\': fti.Title()},\n-                             context=self.request,\n-                             default=\'Add ${itemtype}\')\n+            return translate(\n+                "heading_add_item",\n+                domain="plone",\n+                mapping={"itemtype": fti.Title()},\n+                context=self.request,\n+                default="Add ${itemtype}",\n+            )\n \n         # If we are on portal root, look up the portal title from registry\n         if IPloneSiteRoot.providedBy(self.context):\n             return self.site_title_setting\n \n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         return escape(safe_unicode(context_state.object_title()))\n \n     def update(self):\n         if IPloneSiteRoot.providedBy(self.context):\n             self.site_title = self.site_title_setting\n             return\n-        portal_state = getMultiAdapter((self.context, self.request),\n-                                       name=u\'plone_portal_state\')\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n         if IPloneSiteRoot.providedBy(portal_state.navigation_root()):\n             portal_title = self.site_title_setting\n         else:\n-            portal_title = escape(\n-                safe_unicode(portal_state.navigation_root_title()))\n+            portal_title = escape(safe_unicode(portal_state.navigation_root_title()))\n         if self.page_title == portal_title:\n             self.site_title = portal_title\n         else:\n@@ -152,20 +154,20 @@ def update(self):\n \n \n class DublinCoreViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'dublin_core.pt\')\n+    index = ViewPageTemplateFile("dublin_core.pt")\n \n     def update(self):\n-        plone_utils = getToolByName(self.context, \'plone_utils\')\n+        plone_utils = getToolByName(self.context, "plone_utils")\n         context = aq_inner(self.context)\n         self.metatags = plone_utils.listMetaTags(context).items()\n \n \n class TableOfContentsViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'toc.pt\')\n+    index = ViewPageTemplateFile("toc.pt")\n \n     def update(self):\n         obj = aq_base(self.context)\n-        getTableContents = getattr(obj, \'getTableContents\', None)\n+        getTableContents = getattr(obj, "getTableContents", None)\n         self.enabled = False\n         if getTableContents is not None:\n             try:\n@@ -174,39 +176,41 @@ def update(self):\n                 # schema not updated yet\n                 self.enabled = False\n         # handle dexterity-behavior\n-        toc = getattr(obj, \'table_of_contents\', None)\n+        toc = getattr(obj, "table_of_contents", None)\n         if toc is not None:\n             self.enabled = toc\n \n \n class SiteActionsViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'site_actions.pt\')\n+    index = ViewPageTemplateFile("site_actions.pt")\n \n     def update(self):\n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n-        self.site_actions = context_state.actions(\'site_actions\')\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n+        self.site_actions = context_state.actions("site_actions")\n \n \n class SearchBoxViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'searchbox.pt\')\n+    index = ViewPageTemplateFile("searchbox.pt")\n \n     def update(self):\n         super(SearchBoxViewlet, self).update()\n \n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n \n         registry = getUtility(IRegistry)\n-        search_settings = registry.forInterface(ISearchSchema, prefix=\'plone\')\n+        search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n         self.livesearch = search_settings.enable_livesearch\n \n         folder = context_state.folder()\n-        self.folder_path = \'/\'.join(folder.getPhysicalPath())\n+        self.folder_path = "/".join(folder.getPhysicalPath())\n \n \n class LogoViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'logo.pt\')\n+    index = ViewPageTemplateFile("logo.pt")\n \n     def update(self):\n         super(LogoViewlet, self).update()\n@@ -215,15 +219,13 @@ def update(self):\n         self.navigation_root_title = self.portal_state.navigation_root_title()\n \n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSchema,\n-                                         prefix="plone",\n-                                         check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         self.logo_title = settings.site_title\n         self.img_src = getSiteLogo()\n \n \n class GlobalSectionsViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'sections.pt\')\n+    index = ViewPageTemplateFile("sections.pt")\n \n     _opener_markup_template = (\n         u\'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n@@ -232,24 +234,22 @@ class GlobalSectionsViewlet(ViewletBase):\n     _item_markup_template = (\n         u\'<li class="{id}{has_sub_class}">\'\n         u\'<a href="{url}" class="state-{review_state}"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n-        u\'{sub}\'\n-        u\'</li>\'\n-    )\n-    _subtree_markup_wrapper = (\n-        u\'<ul class="has_subtree dropdown">{out}</ul>\'\n+        u"{sub}"\n+        u"</li>"\n     )\n+    _subtree_markup_wrapper = u\'<ul class="has_subtree dropdown">{out}</ul>\'\n \n     @property\n     @memoize_contextless\n     def settings(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(INavigationSchema, prefix=\'plone\')\n+        settings = registry.forInterface(INavigationSchema, prefix="plone")\n         return settings\n \n     @property\n     def language_settings(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         return settings\n \n     @property\n@@ -263,7 +263,7 @@ def navtree_depth(self):\n     @property\n     def current_language(self):\n         return (\n-            self.request.get(\'LANGUAGE\', None)\n+            self.request.get("LANGUAGE", None)\n             or (self.context and aq_inner(self.context).Language())\n             or self.language_settings.default_language\n         )\n@@ -275,84 +275,74 @@ def navtree(self):\n         navtree_path = self.navtree_path\n         for tab in self.portal_tabs:\n             entry = tab.copy()\n-            entry.update({\n-                \'path\': \'/\'.join((navtree_path, tab[\'id\'])),\n-                \'uid\': tab[\'id\'],\n-            })\n-            if \'review_state\' not in entry:\n-                entry[\'review_state\'] = None\n-\n-            if \'title\' not in entry:\n-                entry[\'title\'] = (\n-                    tab.get(\'name\')\n-                    or tab.get(\'description\')\n-                    or tab[\'id\']\n-                )\n+            entry.update(\n+                {"path": "/".join((navtree_path, tab["id"])), "uid": tab["id"],}\n+            )\n+            if "review_state" not in entry:\n+                entry["review_state"] = None\n+\n+            if "title" not in entry:\n+                entry["title"] = tab.get("name") or tab.get("description") or tab["id"]\n             else:\n                 # translate Home tab\n-                entry[\'title\'] = translate(\n-                    entry[\'title\'],\n-                    domain=\'plone\',\n-                    context=self.request)\n+                entry["title"] = translate(\n+                    entry["title"], domain="plone", context=self.request\n+                )\n \n-            entry[\'title\'] = safe_unicode(entry[\'title\'])\n+            entry["title"] = safe_unicode(entry["title"])\n             ret[navtree_path].append(entry)\n \n         if not self.settings.generate_tabs:\n             return ret\n \n         query = {\n-            \'path\': {\n-                \'query\': self.navtree_path,\n-                \'depth\': self.navtree_depth,\n-            },\n-            \'portal_type\': {\'query\': self.settings.displayed_types},\n-            \'Language\': self.current_language,\n-            \'sort_on\': self.settings.sort_tabs_on,\n-            \'is_default_page\': False,\n+            "path": {"query": self.navtree_path, "depth": self.navtree_depth,},\n+            "portal_type": {"query": self.settings.displayed_types},\n+            "Language": self.current_language,\n+            "sort_on": self.settings.sort_tabs_on,\n+            "is_default_page": False,\n         }\n \n         if self.settings.sort_tabs_reversed:\n-            query[\'sort_order\'] = \'reverse\'\n+            query["sort_order"] = "reverse"\n \n         if not self.settings.nonfolderish_tabs:\n-            query[\'is_folderish\'] = True\n+            query["is_folderish"] = True\n \n         if self.settings.filter_on_workflow:\n-            query[\'review_state\'] = list(\n-                self.settings.workflow_states_to_show or ()\n-            )\n+            query["review_state"] = list(self.settings.workflow_states_to_show or ())\n \n         if not self.settings.show_excluded_items:\n-            query[\'exclude_from_nav\'] = False\n+            query["exclude_from_nav"] = False\n \n-        context_path = \'/\'.join(self.context.getPhysicalPath())\n-        portal_catalog = getToolByName(self.context, \'portal_catalog\')\n+        context_path = "/".join(self.context.getPhysicalPath())\n+        portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n         registry = getUtility(IRegistry)\n-        types_using_view = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n \n         for brain in brains:\n             brain_path = brain.getPath()\n-            brain_parent_path = brain_path.rpartition(\'/\')[0]\n+            brain_parent_path = brain_path.rpartition("/")[0]\n             if brain_parent_path == navtree_path:\n                 # This should be already provided by the portal_tabs_view\n                 continue\n-            if brain.exclude_from_nav and not context_path.startswith(brain_path):  # noqa: E501\n+            if brain.exclude_from_nav and not context_path.startswith(\n+                brain_path\n+            ):  # noqa: E501\n                 # skip excluded items if they\'re not in our context path\n                 continue\n             url = brain.getURL()\n             if brain.portal_type in types_using_view:\n-                url += \'/view\'\n+                url += "/view"\n             entry = {\n-                \'id\': brain.getId,\n-                \'path\': brain_path,\n-                \'uid\': brain.UID,\n-                \'url\': url,\n-                \'title\': safe_unicode(brain.Title),\n-                \'review_state\': brain.review_state,\n+                "id": brain.getId,\n+                "path": brain_path,\n+                "uid": brain.UID,\n+                "url": url,\n+                "title": safe_unicode(brain.Title),\n+                "review_state": brain.review_state,\n             }\n             self.customize_entry(entry, brain)\n             ret[brain_parent_path].append(entry)\n@@ -363,28 +353,27 @@ def customize_entry(self, entry, brain):\n         pass\n \n     def render_item(self, item, path):\n-        sub = self.build_tree(item[\'path\'], first_run=False)\n+        sub = self.build_tree(item["path"], first_run=False)\n         if sub:\n-            item.update({\n-                \'sub\': sub,\n-                \'opener\':  self._opener_markup_template.format(**item),\n-                \'aria_haspopup\': \' aria-haspopup="true"\',\n-                \'has_sub_class\': \' has_subtree\',\n-            })\n+            item.update(\n+                {\n+                    "sub": sub,\n+                    "opener": self._opener_markup_template.format(**item),\n+                    "aria_haspopup": \' aria-haspopup="true"\',\n+                    "has_sub_class": " has_subtree",\n+                }\n+            )\n         else:\n-            item.update({\n-                \'sub\': sub,\n-                \'opener\':  \'\',\n-                \'aria_haspopup\': \'\',\n-                \'has_sub_class\': \'\',\n-            })\n+            item.update(\n+                {"sub": sub, "opener": "", "aria_haspopup": "", "has_sub_class": "",}\n+            )\n         return self._item_markup_template.format(**item)\n \n     def build_tree(self, path, first_run=True):\n         """Non-template based recursive tree building.\n         3-4 times faster than template based.\n         """\n-        out = u\'\'\n+        out = u""\n         for item in self.navtree.get(path, []):\n             out += self.render_item(item, path)\n \n@@ -398,77 +387,78 @@ def render_globalnav(self):\n     @property\n     @memoize\n     def portal_tabs(self):\n-        portal_tabs_view = getMultiAdapter((self.context, self.request),\n-               name=\'portal_tabs_view\')\n+        portal_tabs_view = getMultiAdapter(\n+            (self.context, self.request), name="portal_tabs_view"\n+        )\n         return portal_tabs_view.topLevelTabs()\n \n     def update(self):\n         context = aq_inner(self.context)\n         self.selected_tabs = self.selectedTabs(portal_tabs=self.portal_tabs)\n-        self.selected_portal_tab = self.selected_tabs[\'portal\']\n+        self.selected_portal_tab = self.selected_tabs["portal"]\n \n-    def selectedTabs(self, default_tab=\'index_html\', portal_tabs=()):\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n-        plone_url = getNavigationRootObject(\n-            self.context, portal).absolute_url()\n+    def selectedTabs(self, default_tab="index_html", portal_tabs=()):\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n+        plone_url = getNavigationRootObject(self.context, portal).absolute_url()\n         plone_url_len = len(plone_url)\n         request = self.request\n         valid_actions = []\n \n-        url = request[\'URL\']\n+        url = request["URL"]\n         path = url[plone_url_len:]\n-        path_list = path.split(\'/\')\n+        path_list = path.split("/")\n         if len(path_list) <= 1:\n-            return {\'portal\': default_tab}\n+            return {"portal": default_tab}\n \n         for action in portal_tabs:\n-            if not action[\'url\'].startswith(plone_url):\n+            if not action["url"].startswith(plone_url):\n                 # In this case the action url is an external link. Then, we\n                 # avoid issues (bad portal_tab selection) continuing with next\n                 # action.\n                 continue\n-            action_path = action[\'url\'][plone_url_len:]\n-            if not action_path.startswith(\'/\'):\n-                action_path = \'/\' + action_path\n-            action_path_list = action_path.split(\'/\')\n+            action_path = action["url"][plone_url_len:]\n+            if not action_path.startswith("/"):\n+                action_path = "/" + action_path\n+            action_path_list = action_path.split("/")\n             if action_path_list[1] == path_list[1]:\n                 # Make a list of the action ids, along with the path length\n                 # for choosing the longest (most relevant) path.\n-                valid_actions.append((len(action_path_list), action[\'id\']))\n+                valid_actions.append((len(action_path_list), action["id"]))\n \n         # Sort by path length, the longest matching path wins\n         valid_actions.sort()\n         if valid_actions:\n-            return {\'portal\': valid_actions[-1][1]}\n+            return {"portal": valid_actions[-1][1]}\n \n-        return {\'portal\': default_tab}\n+        return {"portal": default_tab}\n \n \n class PersonalBarViewlet(ViewletBase):\n \n-    homelink_url = \'\'\n-    user_name = \'\'\n+    homelink_url = ""\n+    user_name = ""\n \n     def update(self):\n         super(PersonalBarViewlet, self).update()\n         context = aq_inner(self.context)\n \n-        context_state = getMultiAdapter((context, self.request),\n-                                        name=u\'plone_context_state\')\n+        context_state = getMultiAdapter(\n+            (context, self.request), name=u"plone_context_state"\n+        )\n \n-        user_actions = context_state.actions(\'user\')\n+        user_actions = context_state.actions("user")\n         self.user_actions = []\n         for action in user_actions:\n             info = {\n-                \'title\': action[\'title\'],\n-                \'href\': action[\'url\'],\n-                \'id\': \'personaltools-{}\'.format(action[\'id\']),\n-                \'target\': action.get(\'link_target\', None),\n+                "title": action["title"],\n+                "href": action["url"],\n+                "id": "personaltools-{}".format(action["id"]),\n+                "target": action.get("link_target", None),\n             }\n-            modal = action.get(\'modal\')\n+            modal = action.get("modal")\n             if modal:\n-                info[\'class\'] = \'pat-plone-modal\'\n-                info[\'data-pat-plone-modal\'] = modal\n+                info["class"] = "pat-plone-modal"\n+                info["data-pat-plone-modal"] = modal\n             self.user_actions.append(info)\n \n         self.anonymous = self.portal_state.anonymous()\n@@ -479,12 +469,12 @@ def update(self):\n \n             self.homelink_url = "%s/useractions" % self.navigation_root_url\n \n-            membership = getToolByName(context, \'portal_membership\')\n+            membership = getToolByName(context, "portal_membership")\n             member_info = membership.getMemberInfo(userid)\n             # member_info is None if there\'s no Plone user object, as when\n             # using OpenID.\n             if member_info:\n-                fullname = member_info.get(\'fullname\', \'\')\n+                fullname = member_info.get("fullname", "")\n             else:\n                 fullname = None\n             if fullname:\n@@ -494,11 +484,11 @@ def update(self):\n \n \n class ContentViewsViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'contentviews.pt\')\n-    menu_template = ViewPageTemplateFile(\'menu.pt\')\n+    index = ViewPageTemplateFile("contentviews.pt")\n+    menu_template = ViewPageTemplateFile("menu.pt")\n \n-    default_tab = \'nothing\'\n-    primary = [\'folderContents\', \'edit\', \'view\']\n+    default_tab = "nothing"\n+    primary = ["folderContents", "edit", "view"]\n \n     def update(self):\n         # The drop-down menus are pulled in via a simple content provider\n@@ -518,15 +508,15 @@ def getTabSets(self):\n         context_fti = context.getTypeInfo()\n \n         context_state = getMultiAdapter(\n-            (context, self.request), name=u\'plone_context_state\'\n+            (context, self.request), name=u"plone_context_state"\n         )\n         actions = context_state.actions\n \n         action_list = []\n         if context_state.is_structural_folder():\n-            action_list = actions(\'folder\')\n-        action_list.extend(actions(\'object\'))\n-        action_list.extend(actions(\'object_actions\'))\n+            action_list = actions("folder")\n+        action_list.extend(actions("object"))\n+        action_list.extend(actions("object_actions"))\n \n         tabSet1 = []\n         tabSet2 = []\n@@ -534,27 +524,27 @@ def getTabSets(self):\n         fallback_action = None\n \n         try:\n-            request_url = self.request[\'ACTUAL_URL\']\n+            request_url = self.request["ACTUAL_URL"]\n         except KeyError:\n             # not a real request, could be a test. Let\'s not fail.\n             request_url = context_url\n-        request_url_path = request_url[len(context_url):]\n+        request_url_path = request_url[len(context_url) :]\n \n-        if request_url_path.startswith(\'/\'):\n+        if request_url_path.startswith("/"):\n             request_url_path = request_url_path[1:]\n \n         for item in action_list:\n-            item.update({\'selected\': False})\n+            item.update({"selected": False})\n \n-            action_url = item[\'url\'].strip()\n+            action_url = item["url"].strip()\n             starts = action_url.startswith\n-            if starts(\'http\') or starts(\'javascript\'):\n-                item[\'url\'] = action_url\n+            if starts("http") or starts("javascript"):\n+                item["url"] = action_url\n             else:\n-                item[\'url\'] = \'%s/%s\' % (context_url, action_url)\n-            item[\'url\'] = addTokenToUrl(item[\'url\'], self.request)\n+                item["url"] = "%s/%s" % (context_url, action_url)\n+            item["url"] = addTokenToUrl(item["url"], self.request)\n \n-            action_method = item[\'url\'].split(\'/\')[-1].split(\'?\')[0]\n+            action_method = item["url"].split("/")[-1].split("?")[0]\n \n             # Action method may be a method alias:\n             # Attempt to resolve to a template.\n@@ -562,82 +552,83 @@ def getTabSets(self):\n                 action_method, default=action_method\n             )\n             if action_method:\n-                request_action = unquote(request_url_path).split(\'?\')[0]\n+                request_action = unquote(request_url_path).split("?")[0]\n                 request_action = context_fti.queryMethodID(\n                     request_action, default=request_action\n                 )\n-                if action_method == request_action and item[\'id\'] != \'view\':\n-                    item[\'selected\'] = True\n+                if action_method == request_action and item["id"] != "view":\n+                    item["selected"] = True\n                     found_selected = True\n \n-            current_id = item[\'id\']\n+            current_id = item["id"]\n             if current_id == self.default_tab:\n                 fallback_action = item\n \n-            modal = item.get(\'modal\', None)\n-            item[\'cssClass\'] = \'\'\n+            modal = item.get("modal", None)\n+            item["cssClass"] = ""\n             if modal:\n-                item[\'cssClass\'] += \' pat-plone-modal\'\n-                if \'ajax_load\' not in item[\'url\']:\n-                    item[\'url\'] += \'?ajax_load=1\'\n+                item["cssClass"] += " pat-plone-modal"\n+                if "ajax_load" not in item["url"]:\n+                    item["url"] += "?ajax_load=1"\n \n-            if item[\'id\'] in self.primary:\n+            if item["id"] in self.primary:\n                 tabSet1.append(item)\n             else:\n                 tabSet2.append(item)\n \n         if not found_selected and fallback_action is not None:\n-            fallback_action[\'selected\'] = True\n+            fallback_action["selected"] = True\n \n-        tabSet1.sort(key=lambda item: self.primary.index(item[\'id\']))\n+        tabSet1.sort(key=lambda item: self.primary.index(item["id"]))\n         return tabSet1, tabSet2\n \n     def locked_icon(self):\n-        if not getSecurityManager().checkPermission(\'Modify portal content\',\n-                                                    self.context):\n+        if not getSecurityManager().checkPermission(\n+            "Modify portal content", self.context\n+        ):\n             return ""\n \n         locked = False\n-        lock_info = queryMultiAdapter((self.context, self.request),\n-                                      name=\'plone_lock_info\')\n+        lock_info = queryMultiAdapter(\n+            (self.context, self.request), name="plone_lock_info"\n+        )\n         if lock_info is not None:\n             locked = lock_info.is_locked()\n         else:\n             context = aq_inner(self.context)\n-            lockable = getattr(context.aq_explicit,\n-                               \'wl_isLocked\', None\n-                               ) is not None\n+            lockable = getattr(context.aq_explicit, "wl_isLocked", None) is not None\n             locked = lockable and context.wl_isLocked()\n \n         if not locked:\n             return ""\n \n         portal = self.portal_state.portal()\n-        icon = portal.restrictedTraverse(\'lock_icon.png\')\n-        return icon.tag(title=\'Locked\')\n+        icon = portal.restrictedTraverse("lock_icon.png")\n+        return icon.tag(title="Locked")\n \n \n class ManagePortletsFallbackViewlet(ViewletBase):\n     """Manage portlets fallback link that sits below content"""\n \n-    index = ViewPageTemplateFile(\'manage_portlets_fallback.pt\')\n+    index = ViewPageTemplateFile("manage_portlets_fallback.pt")\n \n     def update(self):\n-        plonelayout = getMultiAdapter((\n-            self.context, self.request), name=u\'plone_layout\')\n-        context_state = getMultiAdapter((self.context, self.request),\n-                                        name=u\'plone_context_state\')\n+        plonelayout = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_layout"\n+        )\n+        context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n \n         self.portlet_assignable = context_state.portlet_assignable()\n-        self.sl = plonelayout.have_portlets(\'plone.leftcolumn\', self.context)\n-        self.sr = plonelayout.have_portlets(\'plone.rightcolumn\', self.context)\n+        self.sl = plonelayout.have_portlets("plone.leftcolumn", self.context)\n+        self.sr = plonelayout.have_portlets("plone.rightcolumn", self.context)\n         self.object_url = context_state.object_url()\n \n     def available(self):\n         secman = getSecurityManager()\n         has_manage_portlets_permission = secman.checkPermission(\n-            \'Portlets: Manage portlets\',\n-            self.context\n+            "Portlets: Manage portlets", self.context\n         )\n         if not has_manage_portlets_permission:\n             return False\n@@ -646,24 +637,25 @@ def available(self):\n \n \n class PathBarViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'path_bar.pt\')\n+    index = ViewPageTemplateFile("path_bar.pt")\n \n     def update(self):\n         super(PathBarViewlet, self).update()\n \n         self.is_rtl = self.portal_state.is_rtl()\n \n-        breadcrumbs_view = getMultiAdapter((self.context, self.request),\n-                                           name=\'breadcrumbs_view\')\n+        breadcrumbs_view = getMultiAdapter(\n+            (self.context, self.request), name="breadcrumbs_view"\n+        )\n         self.breadcrumbs = breadcrumbs_view.breadcrumbs()\n \n \n class TinyLogoViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'tiny_logo.pt\')\n+    index = ViewPageTemplateFile("tiny_logo.pt")\n \n \n class FooterViewlet(ViewletBase):\n-    index = ViewPageTemplateFile(\'footer.pt\')\n+    index = ViewPageTemplateFile("footer.pt")\n \n     def update(self):\n         super(FooterViewlet, self).update()\n@@ -692,8 +684,7 @@ def render_footer_portlets(self):\n         See zope.contentprovider\n         """\n         portlet_manager = getMultiAdapter(\n-            (self.context, self.request, self.__parent__),\n-            name=\'plone.footerportlets\'\n+            (self.context, self.request, self.__parent__), name="plone.footerportlets"\n         )\n         portlet_manager.update()\n         return portlet_manager.render()\ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex 17196a8c..85770af3 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -32,11 +32,12 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'plone.app.relationfield\')\n+    pkg_resources.get_distribution("plone.app.relationfield")\n except pkg_resources.DistributionNotFound:\n     HAS_RELATIONFIELD = False\n else:\n     from plone.app.relationfield.behavior import IRelatedItems\n+\n     HAS_RELATIONFIELD = True\n \n # XXX needs refactoring, since Plone 5 we have PAM in core.\n@@ -50,9 +51,10 @@ class DocumentActionsViewlet(ViewletBase):\n     def update(self):\n         super(DocumentActionsViewlet, self).update()\n \n-        self.context_state = getMultiAdapter((self.context, self.request),\n-                                             name=u\'plone_context_state\')\n-        self.actions = self.context_state.actions(\'document_actions\')\n+        self.context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n+        self.actions = self.context_state.actions("document_actions")\n \n \n class DocumentBylineViewlet(ViewletBase):\n@@ -61,41 +63,40 @@ class DocumentBylineViewlet(ViewletBase):\n \n     def update(self):\n         super(DocumentBylineViewlet, self).update()\n-        self.context_state = getMultiAdapter((self.context, self.request),\n-                                             name=u\'plone_context_state\')\n+        self.context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         self.anonymous = self.portal_state.anonymous()\n         self.has_pam = HAS_PAM\n \n     def show(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n         return not self.anonymous or settings.allow_anon_views_about\n \n     def creator(self):\n         return self.context.Creator()\n \n     def author(self):\n-        membership = getToolByName(self.context, \'portal_membership\')\n+        membership = getToolByName(self.context, "portal_membership")\n         return membership.getMemberInfo(self.creator())\n \n     def authorname(self):\n         author = self.author()\n-        return author and author[\'fullname\'] or self.creator()\n+        return author and author["fullname"] or self.creator()\n \n     def isExpired(self):\n-        if base_hasattr(self.context, \'expires\'):\n+        if base_hasattr(self.context, "expires"):\n             return self.context.expires().isPast()\n         return False\n \n     def toLocalizedTime(self, time, long_format=None, time_only=None):\n         """Convert time to localized time\n         """\n-        util = getToolByName(self.context, \'translation_service\')\n-        return util.ulocalized_time(time, long_format, time_only, self.context,\n-                                    domain=\'plonelocales\')\n+        util = getToolByName(self.context, "translation_service")\n+        return util.ulocalized_time(\n+            time, long_format, time_only, self.context, domain="plonelocales"\n+        )\n \n     def pub_date(self):\n         """Return object effective date.\n@@ -105,16 +106,14 @@ def pub_date(self):\n         """\n         # check if we are allowed to display publication date\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n \n         if not settings.display_publication_date_in_byline:\n             return None\n \n         # check if we have Effective Date set\n         date = self.context.EffectiveDate()\n-        if not date or date == \'None\':\n+        if not date or date == "None":\n             return None\n \n         return DateTime(date)\n@@ -123,13 +122,12 @@ def get_translations(self):\n         cts = []\n         if ITranslatable.providedBy(self.context):\n             t_langs = translated_languages(self.context)\n-            context_translations = ITranslationManager(\n-                self.context).get_translations()\n+            context_translations = ITranslationManager(self.context).get_translations()\n             for lang in t_langs:\n                 cts.append(\n                     dict(\n                         lang_native=lang.title,\n-                        url=context_translations[lang.value].absolute_url()\n+                        url=context_translations[lang.value].absolute_url(),\n                     )\n                 )\n         return cts\n@@ -138,14 +136,16 @@ def get_translations(self):\n class HistoryByLineView(BrowserView):\n     """ DocumentByLine information for content history view """\n \n-    index = ViewPageTemplateFile(\'history_view.pt\')\n+    index = ViewPageTemplateFile("history_view.pt")\n \n     def update(self):\n         context = self.context\n-        self.portal_state = getMultiAdapter((context, self.request),\n-                                            name=u\'plone_portal_state\')\n-        self.context_state = getMultiAdapter((self.context, self.request),\n-                                             name=u\'plone_context_state\')\n+        self.portal_state = getMultiAdapter(\n+            (context, self.request), name=u"plone_portal_state"\n+        )\n+        self.context_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_context_state"\n+        )\n         self.anonymous = self.portal_state.anonymous()\n         self.has_pam = HAS_PAM\n \n@@ -156,16 +156,12 @@ def __call__(self):\n \n     def show(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n         return not self.anonymous or settings.allow_anon_views_about\n \n     def show_history(self):\n         has_access_preview_versions_permission = _checkPermission(\n-            \'CMFEditions: Access previous versions\',\n-            self.context\n+            "CMFEditions: Access previous versions", self.context\n         )\n         if not has_access_preview_versions_permission:\n             return False\n@@ -176,50 +172,52 @@ def show_history(self):\n         return False\n \n     def locked_icon(self):\n-        if not getSecurityManager().checkPermission(\'Modify portal content\',\n-                                                    self.context):\n+        if not getSecurityManager().checkPermission(\n+            "Modify portal content", self.context\n+        ):\n             return ""\n \n         locked = False\n-        lock_info = queryMultiAdapter((self.context, self.request),\n-                                      name=\'plone_lock_info\')\n+        lock_info = queryMultiAdapter(\n+            (self.context, self.request), name="plone_lock_info"\n+        )\n         if lock_info is not None:\n             locked = lock_info.is_locked()\n         else:\n             context = aq_inner(self.context)\n-            lockable = getattr(\n-                context.aq_explicit, \'wl_isLocked\', None) is not None\n+            lockable = getattr(context.aq_explicit, "wl_isLocked", None) is not None\n             locked = lockable and context.wl_isLocked()\n \n         if not locked:\n             return ""\n \n         portal = self.portal_state.portal()\n-        icon = portal.restrictedTraverse(\'lock_icon.png\')\n-        return icon.tag(title=\'Locked\')\n+        icon = portal.restrictedTraverse("lock_icon.png")\n+        return icon.tag(title="Locked")\n \n     def creator(self):\n         return self.context.Creator()\n \n     def author(self):\n-        membership = getToolByName(self.context, \'portal_membership\')\n+        membership = getToolByName(self.context, "portal_membership")\n         return membership.getMemberInfo(self.creator())\n \n     def authorname(self):\n         author = self.author()\n-        return author and author[\'fullname\'] or self.creator()\n+        return author and author["fullname"] or self.creator()\n \n     def isExpired(self):\n-        if base_hasattr(self.context, \'expires\'):\n+        if base_hasattr(self.context, "expires"):\n             return self.context.expires().isPast()\n         return False\n \n     def toLocalizedTime(self, time, long_format=None, time_only=None):\n         """Convert time to localized time\n         """\n-        util = getToolByName(self.context, \'translation_service\')\n-        return util.ulocalized_time(time, long_format, time_only, self.context,\n-                                    domain=\'plonelocales\')\n+        util = getToolByName(self.context, "translation_service")\n+        return util.ulocalized_time(\n+            time, long_format, time_only, self.context, domain="plonelocales"\n+        )\n \n     def pub_date(self):\n         """Return object effective date.\n@@ -229,16 +227,14 @@ def pub_date(self):\n         """\n         # check if we are allowed to display publication date\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n \n         if not settings.display_publication_date_in_byline:\n             return None\n \n         # check if we have Effective Date set\n         date = self.context.EffectiveDate()\n-        if not date or date == \'None\':\n+        if not date or date == "None":\n             return None\n \n         return DateTime(date)\n@@ -247,13 +243,12 @@ def get_translations(self):\n         cts = []\n         if ITranslatable.providedBy(self.context):\n             t_langs = translated_languages(self.context)\n-            context_translations = ITranslationManager(\n-                self.context).get_translations()\n+            context_translations = ITranslationManager(self.context).get_translations()\n             for lang in t_langs:\n                 cts.append(\n                     dict(\n                         lang_native=lang.title,\n-                        url=context_translations[lang.value].absolute_url()\n+                        url=context_translations[lang.value].absolute_url(),\n                     )\n                 )\n \n@@ -269,8 +264,8 @@ def related_items(self):\n         res = ()\n \n         # Archetypes\n-        if base_hasattr(context, \'getRawRelatedItems\'):\n-            catalog = getToolByName(context, \'portal_catalog\')\n+        if base_hasattr(context, "getRawRelatedItems"):\n+            catalog = getToolByName(context, "portal_catalog")\n             related = context.getRawRelatedItems()\n             if not related:\n                 return ()\n@@ -283,6 +278,7 @@ def related_items(self):\n \n                 def _key(brain):\n                     return positions.get(brain.UID, -1)\n+\n                 res.sort(key=_key)\n \n         # Dexterity\n@@ -302,7 +298,7 @@ def related2brains(self, related):\n         :type related: list of relations\n         :return: list of catalog brains\n         """\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         brains = []\n         for r in related:\n             path = r.to_path\n@@ -323,17 +319,16 @@ class WorkflowHistoryViewlet(ViewletBase):\n     @memoize\n     def getUserInfo(self, userid):\n         actor = dict(fullname=userid)\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        mt = getToolByName(self.context, "portal_membership")\n         info = mt.getMemberInfo(userid)\n         if info is None:\n             return dict(actor_home="", actor=actor)\n \n         fullname = info.get("fullname", None)\n         if fullname:\n-            actor[\'fullname\'] = fullname\n+            actor["fullname"] = fullname\n \n-        return dict(actor=actor,\n-                    actor_home="%s/author/%s" % (self.site_url, userid))\n+        return dict(actor=actor, actor_home="%s/author/%s" % (self.site_url, userid))\n \n     def workflowHistory(self, complete=True):\n         """Return workflow history of this context.\n@@ -342,46 +337,52 @@ def workflowHistory(self, complete=True):\n         """\n         context = aq_inner(self.context)\n         # check if the current user has the proper permissions\n-        if not (_checkPermission(\'Request review\', context) or\n-                _checkPermission(\'Review portal content\', context)):\n+        if not (\n+            _checkPermission("Request review", context)\n+            or _checkPermission("Review portal content", context)\n+        ):\n             return []\n \n-        workflow = getToolByName(context, \'portal_workflow\')\n+        workflow = getToolByName(context, "portal_workflow")\n         review_history = []\n \n         try:\n             # get total history\n-            review_history = workflow.getInfoFor(context, \'review_history\')\n+            review_history = workflow.getInfoFor(context, "review_history")\n \n             if not complete:\n                 # filter out automatic transitions.\n-                review_history = [r for r in review_history if r[\'action\']]\n+                review_history = [r for r in review_history if r["action"]]\n             else:\n                 review_history = list(review_history)\n \n             portal_type = context.portal_type\n-            anon = _(u\'label_anonymous_user\', default=u\'Anonymous User\')\n+            anon = _(u"label_anonymous_user", default=u"Anonymous User")\n \n             for r in review_history:\n-                r[\'type\'] = \'workflow\'\n-                r[\'transition_title\'] = workflow.getTitleForTransitionOnType(\n-                    r[\'action\'], portal_type) or _("Create")\n-                r[\'state_title\'] = workflow.getTitleForStateOnType(\n-                    r[\'review_state\'], portal_type)\n-                actorid = r[\'actor\']\n-                r[\'actorid\'] = actorid\n+                r["type"] = "workflow"\n+                r["transition_title"] = workflow.getTitleForTransitionOnType(\n+                    r["action"], portal_type\n+                ) or _("Create")\n+                r["state_title"] = workflow.getTitleForStateOnType(\n+                    r["review_state"], portal_type\n+                )\n+                actorid = r["actor"]\n+                r["actorid"] = actorid\n                 if actorid is None:\n                     # action performed by an anonymous user\n-                    r[\'actor\'] = {\'username\': anon, \'fullname\': anon}\n-                    r[\'actor_home\'] = \'\'\n+                    r["actor"] = {"username": anon, "fullname": anon}\n+                    r["actor_home"] = ""\n                 else:\n                     r.update(self.getUserInfo(actorid))\n             review_history.reverse()\n \n         except WorkflowException:\n-            log(\'plone.app.layout.viewlets.content: \'\n-                \'%s has no associated workflow\' % context.absolute_url(),\n-                severity=logging.DEBUG)\n+            log(\n+                "plone.app.layout.viewlets.content: "\n+                "%s has no associated workflow" % context.absolute_url(),\n+                severity=logging.DEBUG,\n+            )\n \n         return review_history\n \n@@ -402,41 +403,42 @@ def revisionHistory(self):\n         context_url = context.absolute_url()\n         history = rt.getHistoryMetadata(context)\n         portal_diff = getToolByName(context, "portal_diff", None)\n-        can_diff = portal_diff is not None \\\n+        can_diff = (\n+            portal_diff is not None\n             and len(portal_diff.getDiffForPortalType(context.portal_type)) > 0\n+        )\n         can_revert = _checkPermission(\n-            \'CMFEditions: Revert to previous versions\', context)\n+            "CMFEditions: Revert to previous versions", context\n+        )\n \n         def morphVersionDataToHistoryFormat(vdata, version_id):\n             meta = vdata["metadata"]["sys_metadata"]\n             userid = meta["principal"]\n             token = createToken()\n-            preview_url = \\\n-                "%s/versions_history_form?version_id=%s&_authenticator=%s#version_preview" % (  # noqa\n-                    context_url,\n-                    version_id,\n-                    token\n-                )\n+            preview_url = (\n+                "%s/versions_history_form?version_id=%s&_authenticator=%s#version_preview"\n+                % (context_url, version_id, token)  # noqa\n+            )\n             info = dict(\n-                type=\'versioning\',\n+                type="versioning",\n                 action=_(u"Edited"),\n                 transition_title=_(u"Edited"),\n                 actorid=userid,\n                 time=meta["timestamp"],\n-                comments=meta[\'comment\'],\n+                comments=meta["comment"],\n                 version_id=version_id,\n                 preview_url=preview_url,\n             )\n             if can_diff:\n                 if version_id > 0:\n                     info["diff_previous_url"] = (\n-                        "%s/@@history?one=%s&two=%s&_authenticator=%s" %\n-                        (context_url, version_id, version_id - 1, token)\n+                        "%s/@@history?one=%s&two=%s&_authenticator=%s"\n+                        % (context_url, version_id, version_id - 1, token)\n                     )\n                 if not rt.isUpToDate(context, version_id):\n                     info["diff_current_url"] = (\n-                        "%s/@@history?one=current&two=%s&_authenticator=%s" %\n-                        (context_url, version_id, token)\n+                        "%s/@@history?one=current&two=%s&_authenticator=%s"\n+                        % (context_url, version_id, token)\n                     )\n             if can_revert:\n                 info["revert_url"] = "%s/revertversion" % context_url\n@@ -455,8 +457,10 @@ def morphVersionDataToHistoryFormat(vdata, version_id):\n         # Count backwards from most recent to least recent\n         for i in range(history.getLength(countPurged=False) - 1, -1, -1):\n             version_history.append(\n-                morphVersionDataToHistoryFormat(retrieve(i, countPurged=False),\n-                                                getId(i, countPurged=False)))\n+                morphVersionDataToHistoryFormat(\n+                    retrieve(i, countPurged=False), getId(i, countPurged=False)\n+                )\n+            )\n \n         return version_history\n \n@@ -482,7 +486,6 @@ def toLocalizedTime(self, time, long_format=None, time_only=None):\n \n \n class ContentHistoryView(ContentHistoryViewlet):\n-\n     def __init__(self, context, request):\n         super(ContentHistoryView, self).__init__(context, request, None, None)\n         self.update()\ndiff --git a/plone/app/layout/viewlets/globalstatusmessage.py b/plone/app/layout/viewlets/globalstatusmessage.py\nindex c1eeb5fe..1051234e 100644\n--- a/plone/app/layout/viewlets/globalstatusmessage.py\n+++ b/plone/app/layout/viewlets/globalstatusmessage.py\n@@ -7,7 +7,7 @@\n class GlobalStatusMessage(ViewletBase):\n     """Display messages to the current user"""\n \n-    index = ViewPageTemplateFile(\'globalstatusmessage.pt\')\n+    index = ViewPageTemplateFile("globalstatusmessage.pt")\n \n     def update(self):\n         super(GlobalStatusMessage, self).update()\ndiff --git a/plone/app/layout/viewlets/httpheaders.py b/plone/app/layout/viewlets/httpheaders.py\nindex d6fe6dcd..df9a94fe 100644\n--- a/plone/app/layout/viewlets/httpheaders.py\n+++ b/plone/app/layout/viewlets/httpheaders.py\n@@ -23,13 +23,13 @@ class HTTPCachingHeaders(HeaderViewlet):\n     """\n \n     def getHeaders(self):\n-        lang = getattr(self.context, \'Language\', None)\n+        lang = getattr(self.context, "Language", None)\n         if callable(lang):\n             lang = lang()\n         if not lang:\n             lang = self.portal_state.default_language()\n         return [\n-            (\'Content-Type\', \'text/html;charset=utf-8\'),\n-            (\'Expires\', \'Sat, 1 Jan 2000 00:00:00 GMT\'),\n-            (\'Content-Language\', lang)\n+            ("Content-Type", "text/html;charset=utf-8"),\n+            ("Expires", "Sat, 1 Jan 2000 00:00:00 GMT"),\n+            ("Content-Language", lang),\n         ]\ndiff --git a/plone/app/layout/viewlets/social.py b/plone/app/layout/viewlets/social.py\nindex 2f528d0a..df38d0c8 100644\n--- a/plone/app/layout/viewlets/social.py\n+++ b/plone/app/layout/viewlets/social.py\n@@ -14,16 +14,15 @@\n \n \n class SocialTagsViewlet(TitleViewlet):\n-\n     def head_tag_filter(self, value):\n         if not isinstance(value, dict):\n             return\n-        return \'itemprop\' not in value\n+        return "itemprop" not in value\n \n     def body_tag_filter(self, value):\n         if not isinstance(value, dict):\n             return\n-        return \'itemprop\' in value\n+        return "itemprop" in value\n \n     @property\n     def tags(self):\n@@ -39,13 +38,14 @@ def body_tags(self):\n     def _get_tags(self):\n         site = getSite()\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISocialMediaSchema, prefix="plone",\n-                                         check=False)\n+        settings = registry.forInterface(\n+            ISocialMediaSchema, prefix="plone", check=False\n+        )\n \n         if not settings.share_social_data:\n             return []\n \n-        portal_membership = getToolByName(site, \'portal_membership\')\n+        portal_membership = getToolByName(site, "portal_membership")\n         is_anonymous = bool(portal_membership.isAnonymousUser())\n         if not is_anonymous:\n             return []\n@@ -58,16 +58,21 @@ def _get_tags(self):\n             dict(property="og:type", content="website"),\n         ]\n         if settings.twitter_username:\n-            tags.append(dict(name="twitter:site",\n-                             content="@" + settings.twitter_username.lstrip(\'@\')))\n+            tags.append(\n+                dict(\n+                    name="twitter:site",\n+                    content="@" + settings.twitter_username.lstrip("@"),\n+                )\n+            )\n         if settings.facebook_app_id:\n-            tags.append(dict(property="fb:app_id",\n-                             content=settings.facebook_app_id))\n+            tags.append(dict(property="fb:app_id", content=settings.facebook_app_id))\n         if settings.facebook_username:\n             tags.append(\n-                dict(property="og:article:publisher",\n-                     content="https://www.facebook.com/" +\n-                     settings.facebook_username))\n+                dict(\n+                    property="og:article:publisher",\n+                    content="https://www.facebook.com/" + settings.facebook_username,\n+                )\n+            )\n \n         # reuse syndication since that packages the data\n         # the way we\'d prefer likely\n@@ -76,39 +81,51 @@ def _get_tags(self):\n         if item is None:\n             item = BaseItem(self.context, feed)\n \n-        tags.extend([\n-            dict(itemprop="description", content=item.description),\n-            dict(itemprop="url", content=item.link),\n-            dict(property="og:description", content=item.description),\n-            dict(property="og:url", content=item.link),\n-        ])\n+        tags.extend(\n+            [\n+                dict(itemprop="description", content=item.description),\n+                dict(itemprop="url", content=item.link),\n+                dict(property="og:description", content=item.description),\n+                dict(property="og:url", content=item.link),\n+            ]\n+        )\n \n         found_image = False\n         if item.has_enclosure and item.file_length > 0:\n-            if item.file_type.startswith(\'image\'):\n+            if item.file_type.startswith("image"):\n                 found_image = True\n-                tags.extend([\n-                    dict(property="og:image", content=item.file_url),\n-                    dict(itemprop="image", content=item.file_url),\n-                    dict(property="og:image:type", content=item.file_type)\n-                ])\n-            elif (item.file_type.startswith(\'video\') or\n-                    item.file_type == "application/x-shockwave-flash"):\n-                tags.extend([\n-                    dict(property="og:video", content=item.file_url),\n-                    dict(property="og:video:type", content=item.file_type)\n-                ])\n-            elif item.file_type.startswith(\'audio\'):\n-                tags.extend([\n-                    dict(property="og:audio", content=item.file_url),\n-                    dict(property="og:audio:type", content=item.file_type)\n-                ])\n+                tags.extend(\n+                    [\n+                        dict(property="og:image", content=item.file_url),\n+                        dict(itemprop="image", content=item.file_url),\n+                        dict(property="og:image:type", content=item.file_type),\n+                    ]\n+                )\n+            elif (\n+                item.file_type.startswith("video")\n+                or item.file_type == "application/x-shockwave-flash"\n+            ):\n+                tags.extend(\n+                    [\n+                        dict(property="og:video", content=item.file_url),\n+                        dict(property="og:video:type", content=item.file_type),\n+                    ]\n+                )\n+            elif item.file_type.startswith("audio"):\n+                tags.extend(\n+                    [\n+                        dict(property="og:audio", content=item.file_url),\n+                        dict(property="og:audio:type", content=item.file_type),\n+                    ]\n+                )\n \n         if not found_image:\n             url = getSiteLogo()\n-            tags.extend([\n-                dict(property="og:image", content=url),\n-                dict(itemprop="image", content=url),\n-                dict(property="og:image:type", content=\'image/png\')\n-            ])\n+            tags.extend(\n+                [\n+                    dict(property="og:image", content=url),\n+                    dict(itemprop="image", content=url),\n+                    dict(property="og:image:type", content="image/png"),\n+                ]\n+            )\n         return tags\ndiff --git a/plone/app/layout/viewlets/tests/base.py b/plone/app/layout/viewlets/tests/base.py\nindex 09d5d083..ffcc3659 100644\n--- a/plone/app/layout/viewlets/tests/base.py\n+++ b/plone/app/layout/viewlets/tests/base.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n+from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.layout.testing import TEST_USER_ID\n \n import unittest\n@@ -11,9 +11,9 @@ class ViewletsTestCase(unittest.TestCase):\n     layer = INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        self.folder = self.portal["Members"][TEST_USER_ID]\n \n \n class ViewletsFunctionalTestCase(unittest.TestCase):\n@@ -21,6 +21,6 @@ class ViewletsFunctionalTestCase(unittest.TestCase):\n     layer = FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        self.folder = self.portal["Members"][TEST_USER_ID]\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex dcc3a688..0db75c9a 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -20,9 +20,11 @@\n \n \n # Red pixel with filename pixel.png\n-SITE_LOGO_BASE64 = b\'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA\'\\\n-                   b\'AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA\'\\\n-                   b\'AAElFTkSuQmCC\'\n+SITE_LOGO_BASE64 = (\n+    b"filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA"\n+    b"AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA"\n+    b"AAElFTkSuQmCC"\n+)\n \n \n class TestViewletBase(ViewletsTestCase):\n@@ -30,10 +32,10 @@ class TestViewletBase(ViewletsTestCase):\n     """\n \n     def test_update(self):\n-        request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.portal.invokeFactory(\'Folder\', \'f1\')\n-        context = getattr(self.portal, \'f1\')\n+        request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", "f1")\n+        context = getattr(self.portal, "f1")\n         alsoProvides(context, INavigationRoot)\n         viewlet = ViewletBase(context, request, None, None)\n         viewlet.update()\n@@ -47,8 +49,7 @@ class TestContentViewsViewlet(ViewletsTestCase):\n \n     def setUp(self):\n         super(TestContentViewsViewlet, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'test\',\n-                                  title=\'Test default page\')\n+        self.folder.invokeFactory("Document", "test", title="Test default page")\n         self.folder.title = u"Folder"\n \n     def _invalidateRequestMemoizations(self):\n@@ -59,36 +60,37 @@ def _invalidateRequestMemoizations(self):\n \n     def test_set1_on_portal_root(self):\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.portal.absolute_url()\n         view = ContentViewsViewlet(self.portal, self.app.REQUEST, None)\n         view.update()\n-        self.assertEqual(view.tabSet1[0][\'id\'], \'folderContents\')\n+        self.assertEqual(view.tabSet1[0]["id"], "folderContents")\n \n     def test_set1_NonStructuralFolder(self):\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.absolute_url()\n         directlyProvides(self.folder, INonStructuralFolder)\n         view = ContentViewsViewlet(self.folder, self.app.REQUEST, None)\n         view.update()\n         noLongerProvides(self.folder, INonStructuralFolder)\n-        self.assertEqual(1, len([t for t in view.tabSet1 if t[\n-                         \'id\'] == \'folderContents\']))\n+        self.assertEqual(\n+            1, len([t for t in view.tabSet1 if t["id"] == "folderContents"])\n+        )\n \n     def test_set1(self):\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = \'%s/edit?_authenticator=%s\' % (\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = "%s/edit?_authenticator=%s" % (\n             self.folder.test.absolute_url(),\n-            auth.createToken()\n+            auth.createToken(),\n         )\n         view = ContentViewsViewlet(self.folder.test, self.app.REQUEST, None)\n         view.update()\n         self.assertEqual(\n-            1, len([t for t in view.tabSet1 if t[\'id\'] == \'folderContents\']))\n-        self.assertEqual(\n-            [\'edit\'], [t[\'id\'] for t in view.tabSet1 if t[\'selected\']])\n+            1, len([t for t in view.tabSet1 if t["id"] == "folderContents"])\n+        )\n+        self.assertEqual(["edit"], [t["id"] for t in view.tabSet1 if t["selected"]])\n \n \n class TestTitleViewsViewlet(ViewletsTestCase):\n@@ -97,8 +99,7 @@ class TestTitleViewsViewlet(ViewletsTestCase):\n \n     def setUp(self):\n         super(TestTitleViewsViewlet, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'test\',\n-                                  title=\'Test default page\')\n+        self.folder.invokeFactory("Document", "test", title="Test default page")\n         self.folder.title = u"Folder"\n \n     def _invalidateRequestMemoizations(self):\n@@ -111,49 +112,44 @@ def test_title_viewlet_on_portal(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.portal.absolute_url()\n         viewlet = TitleViewlet(self.portal, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, \'Plone site\')\n+        self.assertEqual(viewlet.site_title, "Plone site")\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n-        site_settings.site_title = u\'S\xc3\xbcper Site\'\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n+        site_settings.site_title = u"S\xc3\xbcper Site"\n         self._invalidateRequestMemoizations()\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, u\'S\\xfcper Site\')\n+        self.assertEqual(viewlet.site_title, u"S\\xfcper Site")\n \n     def test_title_viewlet_on_content(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.test.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.test.absolute_url()\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title,\n-                         \'Test default page &mdash; Plone site\')\n+        self.assertEqual(viewlet.site_title, "Test default page &mdash; Plone site")\n         registry = getUtility(IRegistry)\n-        site_settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n-        site_settings.site_title = u\'S\xc3\xbcper Site\'\n+        site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n+        site_settings.site_title = u"S\xc3\xbcper Site"\n         self._invalidateRequestMemoizations()\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title,\n-                         u\'Test default page &mdash; S\\xfcper Site\')\n+        self.assertEqual(viewlet.site_title, u"Test default page &mdash; S\\xfcper Site")\n \n     def test_title_viewlet_with_navigation_root(self):\n         """Title viewlet renders navigation root title\n         """\n         self._invalidateRequestMemoizations()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\', \'Member\'])\n-        self.app.REQUEST[\'ACTUAL_URL\'] = self.folder.test.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.app.REQUEST["ACTUAL_URL"] = self.folder.test.absolute_url()\n         directlyProvides(self.folder, INavigationRoot)\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title,\n-                         u\'Test default page &mdash; Folder\')\n+        self.assertEqual(viewlet.site_title, u"Test default page &mdash; Folder")\n \n \n class TestLogoViewlet(ViewletsTestCase):\n@@ -177,21 +173,22 @@ def test_logo_viewlet_portal_root_default(self):\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertEqual(\n-            viewlet.img_src, \'{0}/logo.png\'.format(self.portal.absolute_url()))\n+            viewlet.img_src, "{0}/logo.png".format(self.portal.absolute_url())\n+        )\n \n     def test_logo_viewlet_portal_root_registry(self):\n         """When a logo is set, and viewlet is opened on a non-navigation root,\n         obtain the registry logo from the portal.\n         """\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n         settings.site_logo = SITE_LOGO_BASE64\n \n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertTrue(\n             viewlet.img_src,\n-            \'{0}/@@site-logo/pixel.png\'.format(self.portal.absolute_url())\n+            "{0}/@@site-logo/pixel.png".format(self.portal.absolute_url()),\n         )\n \n     def test_logo_viewlet_navigation_root_default(self):\n@@ -202,14 +199,15 @@ def test_logo_viewlet_navigation_root_default(self):\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertEqual(\n-            viewlet.img_src, \'{0}/logo.png\'.format(self.folder.absolute_url()))\n+            viewlet.img_src, "{0}/logo.png".format(self.folder.absolute_url())\n+        )\n \n     def test_viewlet_navigation_root_registry(self):\n         """When a logo is set, and viewlet is opened on a navigation root,\n         obtain the registry logo from the navigation root.\n         """\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n         settings.site_logo = SITE_LOGO_BASE64\n \n         # Set fake site after registry setup...\n@@ -218,7 +216,7 @@ def test_viewlet_navigation_root_registry(self):\n         viewlet.update()\n         self.assertTrue(\n             viewlet.img_src,\n-            \'{0}/@@site-logo/pixel.png\'.format(self.folder.absolute_url())\n+            "{0}/@@site-logo/pixel.png".format(self.folder.absolute_url()),\n         )\n \n \n@@ -227,13 +225,13 @@ class TestGlobalSectionsViewlet(ViewletsTestCase):\n     """\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.registry = getUtility(IRegistry)\n-        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+        self.folder = self.portal["Members"][TEST_USER_ID]\n         self.portal.Members.reindexObject()\n         self.folder.reindexObject()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def _get_navtree(self, context=None):\n         if context is None:\n@@ -244,39 +242,37 @@ def _get_navtree(self, context=None):\n     def test_selectedtabs(self):\n         """ Test selected tabs the simplest case\n         """\n-        request = self.layer[\'request\']\n-        request[\'URL\'] = self.folder.absolute_url()\n+        request = self.layer["request"]\n+        request["URL"] = self.folder.absolute_url()\n         gsv = GlobalSectionsViewlet(self.folder, request, None)\n         gsv.update()\n-        self.assertEqual(gsv.selected_tabs, {\'portal\': \'Members\'})\n-        self.assertEqual(gsv.selected_portal_tab, \'Members\')\n+        self.assertEqual(gsv.selected_tabs, {"portal": "Members"})\n+        self.assertEqual(gsv.selected_portal_tab, "Members")\n \n     def test_selectedtabs_navroot(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'navroot\', title=\'My new root\')\n-        navroot = self.portal[\'navroot\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "navroot", title="My new root")\n+        navroot = self.portal["navroot"]\n         alsoProvides(navroot, INavigationRoot)\n-        navroot.invokeFactory(\'Folder\', \'abc\', title=\'short\')\n-        navroot.invokeFactory(\'Folder\',\n-                              \'xyz\',\n-                              title=\'Folder with a looong name\')\n-        request = self.layer[\'request\']\n-        request[\'URL\'] = navroot[\'abc\'].absolute_url()\n+        navroot.invokeFactory("Folder", "abc", title="short")\n+        navroot.invokeFactory("Folder", "xyz", title="Folder with a looong name")\n+        request = self.layer["request"]\n+        request["URL"] = navroot["abc"].absolute_url()\n         gsv = GlobalSectionsViewlet(navroot, request, None)\n         gsv.update()\n-        self.assertEqual(gsv.selected_tabs, {\'portal\': \'abc\'})\n-        self.assertEqual(gsv.selected_portal_tab, \'abc\')\n+        self.assertEqual(gsv.selected_tabs, {"portal": "abc"})\n+        self.assertEqual(gsv.selected_portal_tab, "abc")\n \n     def test_globalnav_respects_types_use_view_action_in_listings(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Image\', \'image\', title=u\'S\xc3\xb6me Image\')\n-        self.portal.invokeFactory(\'File\', \'file\', title=u\'Some File\')\n-        self.portal.invokeFactory(\'Document\', \'doc\', title=u\'Some D\xc3\xb6cument\')\n-        request = self.layer[\'request\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Image", "image", title=u"S\xc3\xb6me Image")\n+        self.portal.invokeFactory("File", "file", title=u"Some File")\n+        self.portal.invokeFactory("Document", "doc", title=u"Some D\xc3\xb6cument")\n+        request = self.layer["request"]\n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n         gsv.update()\n         html = gsv.render()\n@@ -287,40 +283,34 @@ def test_globalnav_respects_types_use_view_action_in_listings(self):\n     def test_globalnav_navigation_depth(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = getUtility(IRegistry)\n-        registry[\'plone.navigation_depth\'] = 3\n-        self.portal.invokeFactory(\'Folder\', \'folder\', title=u\'F\xc3\xb6lder\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\', title=u\'Folder 2\')\n-        self.portal.invokeFactory(\'Folder\', \'folder3\', title=u\'Folder 3\')\n+        registry["plone.navigation_depth"] = 3\n+        self.portal.invokeFactory("Folder", "folder", title=u"F\xc3\xb6lder")\n+        self.portal.invokeFactory("Folder", "folder2", title=u"Folder 2")\n+        self.portal.invokeFactory("Folder", "folder3", title=u"Folder 3")\n         folder = self.portal.folder\n-        folder.invokeFactory(\'Folder\', \'subfolder\', title=u\'Subfolder\')\n-        folder.invokeFactory(\'Folder\', \'subfolder2\', title=u\'S\xc3\xbcbfolder 2\')\n+        folder.invokeFactory("Folder", "subfolder", title=u"Subfolder")\n+        folder.invokeFactory("Folder", "subfolder2", title=u"S\xc3\xbcbfolder 2")\n         subfolder = folder.subfolder\n-        subfolder.invokeFactory(\'Folder\', \'subsubfolder\', title=u\'Sub2folder\')\n+        subfolder.invokeFactory("Folder", "subsubfolder", title=u"Sub2folder")\n \n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         navtree = self._get_navtree()\n         self.assertListEqual(\n             sorted(navtree),\n-            [\n-                \'/plone\',\n-                \'/plone/Members\',\n-                \'/plone/folder\',\n-                \'/plone/folder/subfolder\'\n-            ],\n+            ["/plone", "/plone/Members", "/plone/folder", "/plone/folder/subfolder"],\n         )\n         self.assertListEqual(\n-            [x[\'title\'] for x in navtree[\'/plone\']],\n-            [u\'Home\', u\'Members\', u\'F\xc3\xb6lder\', u\'Folder 2\', u\'Folder 3\'],\n+            [x["title"] for x in navtree["/plone"]],\n+            [u"Home", u"Members", u"F\xc3\xb6lder", u"Folder 2", u"Folder 3"],\n         )\n         self.assertListEqual(\n-            [x[\'title\'] for x in navtree[\'/plone/folder\']],\n-            [u\'Subfolder\', u\'S\xc3\xbcbfolder 2\'],\n+            [x["title"] for x in navtree["/plone/folder"]],\n+            [u"Subfolder", u"S\xc3\xbcbfolder 2"],\n         )\n         self.assertListEqual(\n-            [x[\'title\'] for x in navtree[\'/plone/folder/subfolder\']],\n-            [u\'Sub2folder\'],\n+            [x["title"] for x in navtree["/plone/folder/subfolder"]], [u"Sub2folder"],\n         )\n \n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n@@ -328,231 +318,210 @@ def test_globalnav_navigation_depth(self):\n         self.assertTrue(gsv.render())\n \n     def test_default_settings(self):\n-        self.assertEqual(self.registry[\'plone.navigation_depth\'], 3)\n+        self.assertEqual(self.registry["plone.navigation_depth"], 3)\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members"],\n         )\n \n     def test_do_not_generate_tabs(self):\n-        self.registry[\'plone.generate_tabs\'] = False\n+        self.registry["plone.generate_tabs"] = False\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\'])\n+        self.assertListEqual(sorted(navtree), ["/plone"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\'],\n+            [item["path"] for item in navtree["/plone"]], ["/plone/index_html"],\n         )\n \n     def test_generate_tabs_non_folderish(self):\n-        self.registry[\'plone.nonfolderish_tabs\'] = False\n+        self.registry["plone.nonfolderish_tabs"] = False\n         self.portal.invokeFactory(\n-            \'Document\',\n-            \'test-doc\',\n-            title=u\'A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)\',\n+            "Document", "test-doc", title=u"A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)",\n         )\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members"],\n         )\n \n     def test_generate_tabs_sorted(self):\n         self.portal.invokeFactory(\n-            \'Document\',\n-            \'test-doc-2\',\n-            title=u\'Document 2\',\n+            "Document", "test-doc-2", title=u"Document 2",\n         )\n         self.portal.invokeFactory(\n-            \'Document\',\n-            \'test-doc-1\',\n-            title=u\'Document 1\',\n+            "Document", "test-doc-1", title=u"Document 1",\n         )\n         navtree = self._get_navtree()\n         # default sorting by position in parent\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [item["path"] for item in navtree["/plone"]],\n             [\n-                \'/plone/index_html\',\n-                \'/plone/Members\',\n-                \'/plone/test-doc-2\',\n-                \'/plone/test-doc-1\',\n+                "/plone/index_html",\n+                "/plone/Members",\n+                "/plone/test-doc-2",\n+                "/plone/test-doc-1",\n             ],\n         )\n \n         # check we can sort by title\n-        self.registry[\'plone.sort_tabs_on\'] = u\'sortable_title\'\n+        self.registry["plone.sort_tabs_on"] = u"sortable_title"\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [item["path"] for item in navtree["/plone"]],\n             [\n-                \'/plone/index_html\',\n-                \'/plone/Members\',\n-                \'/plone/test-doc-1\',\n-                \'/plone/test-doc-2\',\n+                "/plone/index_html",\n+                "/plone/Members",\n+                "/plone/test-doc-1",\n+                "/plone/test-doc-2",\n             ],\n         )\n \n         # check we can reverse sorting\n-        self.registry[\'plone.sort_tabs_reversed\'] = True\n+        self.registry["plone.sort_tabs_reversed"] = True\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [item["path"] for item in navtree["/plone"]],\n             [\n-                \'/plone/index_html\',\n-                \'/plone/test-doc-2\',\n-                \'/plone/test-doc-1\',\n-                \'/plone/Members\',\n+                "/plone/index_html",\n+                "/plone/test-doc-2",\n+                "/plone/test-doc-1",\n+                "/plone/Members",\n             ],\n         )\n \n     def test_generate_tabs_displayed_types(self):\n-        self.registry[\'plone.displayed_types\'] = (\n-            u\'Image\',\n-            u\'File\',\n-            u\'Link\',\n-            u\'News Item\',\n-            u\'Document\',\n-            u\'Event\',\n+        self.registry["plone.displayed_types"] = (\n+            u"Image",\n+            u"File",\n+            u"Link",\n+            u"News Item",\n+            u"Document",\n+            u"Event",\n         )\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\n-                \'/plone/index_html\',\n-            ],\n+            [item["path"] for item in navtree["/plone"]], ["/plone/index_html",],\n         )\n \n     def test_generate_tabs_filter_on_state(self):\n-        self.registry[\'plone.filter_on_workflow\'] = True\n+        self.registry["plone.filter_on_workflow"] = True\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\n-                \'/plone/index_html\',\n-            ],\n+            [item["path"] for item in navtree["/plone"]], ["/plone/index_html",],\n         )\n-        self.registry[\'plone.workflow_states_to_show\'] = (u\'private\', )\n+        self.registry["plone.workflow_states_to_show"] = (u"private",)\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members"],\n         )\n \n         # Let\'s check this works also with deep navigation\n-        self.registry[\'plone.navigation_depth\'] = 2\n+        self.registry["plone.navigation_depth"] = 2\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone/Members\']],\n-            [\'/plone/Members/test_user_1_\'],\n+            [item["path"] for item in navtree["/plone/Members"]],\n+            ["/plone/Members/test_user_1_"],\n         )\n \n     def test_generate_tabs_exclude_from_nav(self):\n         self.portal.invokeFactory(\n-            \'Folder\',\n-            \'test-folder\',\n-            title=u\'Test folder\',\n+            "Folder", "test-folder", title=u"Test folder",\n         )\n         self.portal.invokeFactory(\n-            \'Folder\',\n-            \'excluded-folder\',\n-            title=u\'Excluded folder\',\n+            "Folder",\n+            "excluded-folder",\n+            title=u"Excluded folder",\n             exclude_from_nav=True,\n         )\n-        self.portal[\'excluded-folder\'].invokeFactory(\n-            \'Folder\',\n-            \'sub-folder\',\n-            title=u\'Sub folder\',\n+        self.portal["excluded-folder"].invokeFactory(\n+            "Folder", "sub-folder", title=u"Sub folder",\n         )\n \n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\n-                \'/plone/index_html\',\n-                \'/plone/Members\',\n-                \'/plone/test-folder\',\n-            ],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder",],\n         )\n \n         # Check also that we we have proper nesting\n-        self.registry[\'plone.navigation_depth\'] = 2\n+        self.registry["plone.navigation_depth"] = 2\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            sorted(navtree),\n-            [\'/plone\', \'/plone/Members\', \'/plone/excluded-folder\'],\n+            sorted(navtree), ["/plone", "/plone/Members", "/plone/excluded-folder"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n-            [\'/plone/excluded-folder/sub-folder\'],\n+            [item["path"] for item in navtree["/plone/excluded-folder"]],\n+            ["/plone/excluded-folder/sub-folder"],\n         )\n \n-        self.registry[\'plone.navigation_depth\'] = 1\n-        self.registry[\'plone.show_excluded_items\'] = False\n+        self.registry["plone.navigation_depth"] = 1\n+        self.registry["plone.show_excluded_items"] = False\n         navtree = self._get_navtree()\n-        self.assertListEqual(sorted(navtree), [\'/plone\'])\n+        self.assertListEqual(sorted(navtree), ["/plone"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder"],\n         )\n \n         # If we increase the navigation depth to 2 the sub folder in the\n         # exclude folder it is there but unlinked\n-        self.registry[\'plone.navigation_depth\'] = 2\n+        self.registry["plone.navigation_depth"] = 2\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            sorted(navtree),\n-            [\'/plone\', \'/plone/Members\', \'/plone/excluded-folder\'],\n+            sorted(navtree), ["/plone", "/plone/Members", "/plone/excluded-folder"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n-            [\'/plone/excluded-folder/sub-folder\'],\n+            [item["path"] for item in navtree["/plone/excluded-folder"]],\n+            ["/plone/excluded-folder/sub-folder"],\n         )\n \n-        self.portal[\'excluded-folder\'][\'sub-folder\'].exclude_from_nav = True\n-        self.portal[\'excluded-folder\'][\'sub-folder\'].reindexObject()\n+        self.portal["excluded-folder"]["sub-folder"].exclude_from_nav = True\n+        self.portal["excluded-folder"]["sub-folder"].reindexObject()\n         navtree = self._get_navtree()\n         self.assertListEqual(\n-            sorted(navtree),\n-            [\'/plone\', \'/plone/Members\'],\n+            sorted(navtree), ["/plone", "/plone/Members"],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder"],\n         )\n \n         # check for \'show_excluded_items\' in navtree\n-        self.registry[\'plone.show_excluded_items\'] = True\n+        self.registry["plone.show_excluded_items"] = True\n         navtree = self._get_navtree()\n         # if we\'re not in (sub)context of an excluded item don\'t show it\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            ["/plone/index_html", "/plone/Members", "/plone/test-folder"],\n         )\n         # but if so, keep the tree\n-        navtree = self._get_navtree(\n-            self.portal[\'excluded-folder\'][\'sub-folder\'])\n+        navtree = self._get_navtree(self.portal["excluded-folder"]["sub-folder"])\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone\']],\n-            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\',\n-             \'/plone/excluded-folder\'],\n+            [item["path"] for item in navtree["/plone"]],\n+            [\n+                "/plone/index_html",\n+                "/plone/Members",\n+                "/plone/test-folder",\n+                "/plone/excluded-folder",\n+            ],\n         )\n         self.assertListEqual(\n-            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n-            [\'/plone/excluded-folder/sub-folder\'],\n+            [item["path"] for item in navtree["/plone/excluded-folder"]],\n+            ["/plone/excluded-folder/sub-folder"],\n         )\ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex 81dfdd2f..1802b573 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -5,8 +5,8 @@\n from plone.app.layout.viewlets.content import HistoryByLineView\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import logout\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.locking.interfaces import ILockable\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISecuritySchema\n@@ -19,7 +19,8 @@\n \n try:\n     import pkg_resources\n-    pkg_resources.get_distribution(\'plone.app.relationfield\')\n+\n+    pkg_resources.get_distribution("plone.app.relationfield")\n except pkg_resources.DistributionNotFound:\n     HAS_DEXTERITY = False\n     pass\n@@ -39,14 +40,11 @@ class TestDocumentBylineViewletView(ViewletsTestCase):\n \n     def setUp(self):\n         super(TestDocumentBylineViewletView, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n-        self.context = self.folder[\'doc1\']\n+        self.folder.invokeFactory("Document", "doc1", title="Document 1")\n+        self.context = self.folder["doc1"]\n \n         registry = getUtility(IRegistry)\n-        self.security_settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        self.security_settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n \n     def _get_viewlet(self):\n         request = self.app.REQUEST\n@@ -58,9 +56,7 @@ def test_pub_date(self):\n         # configure our portal to enable publication date on pages globally on\n         # the site\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n \n         settings.display_publication_date_in_byline = True\n \n@@ -111,14 +107,11 @@ class TestHistoryBylineViewletView(ViewletsTestCase):\n \n     def setUp(self):\n         super(TestHistoryBylineViewletView, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n-        self.context = self.folder[\'doc1\']\n+        self.folder.invokeFactory("Document", "doc1", title="Document 1")\n+        self.context = self.folder["doc1"]\n \n         registry = getUtility(IRegistry)\n-        self.security_settings = registry.forInterface(\n-            ISecuritySchema,\n-            prefix=\'plone\',\n-        )\n+        self.security_settings = registry.forInterface(ISecuritySchema, prefix="plone",)\n \n     def _get_viewlet(self):\n         request = self.app.REQUEST\n@@ -174,9 +167,7 @@ def test_pub_date(self):\n         # configure our portal to enable publication date on pages globally on\n         # the site\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema,\n-            prefix=\'plone\')\n+        settings = registry.forInterface(ISiteSchema, prefix="plone")\n \n         settings.display_publication_date_in_byline = True\n \n@@ -199,12 +190,11 @@ def test_pub_date(self):\n \n \n class TestRelatedItemsViewlet(ViewletsTestCase):\n-\n     def setUp(self):\n         super(TestRelatedItemsViewlet, self).setUp()\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n-        self.folder.invokeFactory(\'Document\', \'doc2\', title=\'Document 2\')\n-        self.folder.invokeFactory(\'Document\', \'doc3\', title=\'Document 3\')\n+        self.folder.invokeFactory("Document", "doc1", title="Document 1")\n+        self.folder.invokeFactory("Document", "doc2", title="Document 2")\n+        self.folder.invokeFactory("Document", "doc3", title="Document 3")\n         intids = getUtility(IIntIds)\n         self.folder.doc1.relatedItems = [\n             RelationValue(intids.getId(self.folder.doc2)),\n@@ -216,48 +206,48 @@ def testRelatedItems(self):\n         viewlet = ContentRelatedItems(self.folder.doc1, request, None, None)\n         viewlet.update()\n         related = viewlet.related_items()\n-        self.assertEqual([x.Title for x in related], [\n-                         \'Document 2\', \'Document 3\'])\n+        self.assertEqual([x.Title for x in related], ["Document 2", "Document 3"])\n \n     def testDeletedRelatedItems(self):\n         # Deleted related items should not cause problems.\n-        self.folder._delObject(\'doc2\')\n+        self.folder._delObject("doc2")\n         request = self.app.REQUEST\n         viewlet = ContentRelatedItems(self.folder.doc1, request, None, None)\n         viewlet.update()\n         related = viewlet.related_items()\n-        self.assertEqual([x.Title for x in related], [\'Document 3\'])\n+        self.assertEqual([x.Title for x in related], ["Document 3"])\n \n \n class TestDexterityRelatedItemsViewlet(ViewletsTestCase):\n-\n     def setUp(self):\n         super(TestDexterityRelatedItemsViewlet, self).setUp()\n         """ create some sample content to test with """\n         from Products.CMFPlone.utils import get_installer\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        fti = DexterityFTI(\'Dexterity Item with relatedItems behavior\')\n+\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("Dexterity Item with relatedItems behavior")\n         self.portal.portal_types._setObject(\n-            \'Dexterity Item with relatedItems behavior\', fti)\n-        fti.klass = \'plone.dexterity.content.Item\'\n-        test_module = \'plone.app.layout.viewlets.tests.test_content\'\n-        fti.schema = test_module + \'.IMyDexterityItem\'\n-        fti.behaviors = (\'plone.app.relationfield.behavior.IRelatedItems\',)\n-        fti = DexterityFTI(\'Dexterity Item without relatedItems behavior\')\n+            "Dexterity Item with relatedItems behavior", fti\n+        )\n+        fti.klass = "plone.dexterity.content.Item"\n+        test_module = "plone.app.layout.viewlets.tests.test_content"\n+        fti.schema = test_module + ".IMyDexterityItem"\n+        fti.behaviors = ("plone.app.relationfield.behavior.IRelatedItems",)\n+        fti = DexterityFTI("Dexterity Item without relatedItems behavior")\n         self.portal.portal_types._setObject(\n-            \'Dexterity Item without relatedItems behavior\', fti)\n-        fti.klass = \'plone.dexterity.content.Item\'\n-        fti.schema = test_module + \'.IMyDexterityItem\'\n-        self.folder.invokeFactory(\'Document\', \'doc1\', title=\'Document 1\')\n-        self.folder.invokeFactory(\'Document\', \'doc2\', title=\'Document 2\')\n-        self.folder.invokeFactory(\n-            \'Dexterity Item with relatedItems behavior\', \'dex1\')\n-        self.folder.invokeFactory(\n-            \'Dexterity Item with relatedItems behavior\', \'dex2\')\n+            "Dexterity Item without relatedItems behavior", fti\n+        )\n+        fti.klass = "plone.dexterity.content.Item"\n+        fti.schema = test_module + ".IMyDexterityItem"\n+        self.folder.invokeFactory("Document", "doc1", title="Document 1")\n+        self.folder.invokeFactory("Document", "doc2", title="Document 2")\n+        self.folder.invokeFactory("Dexterity Item with relatedItems behavior", "dex1")\n+        self.folder.invokeFactory("Dexterity Item with relatedItems behavior", "dex2")\n         self.folder.invokeFactory(\n-            \'Dexterity Item without relatedItems behavior\', \'dex3\')\n+            "Dexterity Item without relatedItems behavior", "dex3"\n+        )\n         qi = get_installer(self.portal)\n-        qi.install_product(\'plone.app.intid\')\n+        qi.install_product("plone.app.intid")\n         intids = getUtility(IIntIds)\n         self.folder.dex1.relatedItems = [\n             RelationValue(intids.getId(self.folder.doc1)),\n@@ -269,7 +259,7 @@ def testDexterityRelatedItems(self):\n         viewlet = ContentRelatedItems(self.folder.dex1, request, None, None)\n         viewlet.update()\n         related = viewlet.related_items()\n-        self.assertEqual([x.id for x in related], [\'doc1\', \'doc2\'])\n+        self.assertEqual([x.id for x in related], ["doc1", "doc2"])\n \n         # TODO: we should test with non-published objects and anonymous\n         #       users but current workflow has no transition to make an\n@@ -293,12 +283,10 @@ def testDexterityFolderRelatedItems(self):\n         """\n         Related items viewlet doesn\'t include related folder\'s descendants.\n         """\n-        self.assertTrue(\n-            self.folder.contentValues(), \'Folder is missing descendants\')\n+        self.assertTrue(self.folder.contentValues(), "Folder is missing descendants")\n \n         intids = getUtility(IIntIds)\n-        self.folder.dex1.relatedItems = [\n-            RelationValue(intids.getId(self.folder))]\n+        self.folder.dex1.relatedItems = [RelationValue(intids.getId(self.folder))]\n \n         request = self.app.REQUEST\n         viewlet = ContentRelatedItems(self.folder.dex1, request, None, None)\n@@ -308,9 +296,9 @@ def testDexterityFolderRelatedItems(self):\n \n     def testDexterityDeletedRelatedItems(self):\n         # Deleted related items should not cause problems.\n-        self.folder._delObject(\'doc1\')\n+        self.folder._delObject("doc1")\n         request = self.app.REQUEST\n         viewlet = ContentRelatedItems(self.folder.dex1, request, None, None)\n         viewlet.update()\n         related = viewlet.related_items()\n-        self.assertEqual([x.id for x in related], [\'doc2\'])\n+        self.assertEqual([x.id for x in related], ["doc2"])\ndiff --git a/plone/app/layout/viewlets/tests/test_functional.py b/plone/app/layout/viewlets/tests/test_functional.py\nindex f7fc1313..2a7148d0 100644\n--- a/plone/app/layout/viewlets/tests/test_functional.py\n+++ b/plone/app/layout/viewlets/tests/test_functional.py\n@@ -6,18 +6,21 @@\n import unittest\n \n \n-optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n normal_testfiles = [\n-    \'history.txt\',\n+    "history.txt",\n ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     ),\n-                layer=FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(test, optionflags=optionflags,),\n+                layer=FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/app/layout/viewlets/tests/test_history.py b/plone/app/layout/viewlets/tests/test_history.py\nindex 6e9ed76d..0d960687 100644\n--- a/plone/app/layout/viewlets/tests/test_history.py\n+++ b/plone/app/layout/viewlets/tests/test_history.py\n@@ -5,58 +5,57 @@\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n \n \n class TestWorkflowHistoryViewlet(ViewletsFunctionalTestCase):\n-\n     def setUp(self):\n         super(TestWorkflowHistoryViewlet, self).setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n+        self.folder.invokeFactory("Document", "d1")\n \n-    def addMember(self, username, roles=(\'Member\',)):\n-        self.portal.portal_membership.addMember(username, \'secret\', roles, [])\n+    def addMember(self, username, roles=("Member",)):\n+        self.portal.portal_membership.addMember(username, "secret", roles, [])\n \n     def delMember(self, username):\n         self.portal.portal_membership.deleteMembers([username])\n \n     def test_initHistory(self):\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n+        context = getattr(self.folder, "d1")\n         viewlet = WorkflowHistoryViewlet(context, request, None, None)\n         viewlet.update()\n         history = viewlet.workflowHistory()\n         self.assertEqual(len(history), 1)\n-        self.assertEqual(history[0][\'action\'], None)\n+        self.assertEqual(history[0]["action"], None)\n \n     def test_transitionHistory(self):\n         wf_tool = self.portal.portal_workflow\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n+        context = getattr(self.folder, "d1")\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        wf_tool.doActionFor(context, \'publish\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        wf_tool.doActionFor(context, "publish")\n \n         viewlet = WorkflowHistoryViewlet(context, request, None, None)\n         viewlet.update()\n \n         history = viewlet.workflowHistory()\n         self.assertEqual(len(history), 2)\n-        self.assertEqual(history[0][\'action\'], \'publish\')\n+        self.assertEqual(history[0]["action"], "publish")\n \n         # add a temporary user to perform a transition\n-        self.addMember(\'tempuser\', roles=(\'Member\', \'Manager\'))\n-        login(self.portal, \'tempuser\')\n-        wf_tool.doActionFor(context, action=\'retract\', actor=None)\n+        self.addMember("tempuser", roles=("Member", "Manager"))\n+        login(self.portal, "tempuser")\n+        wf_tool.doActionFor(context, action="retract", actor=None)\n         logout()\n \n         login(self.portal, TEST_USER_NAME)\n \n         # remove the user\n-        self.delMember(\'tempuser\')\n+        self.delMember("tempuser")\n \n         # if the user that performed the transition no longer exists, the link\n         # shouldn\'t be included.\n@@ -65,20 +64,19 @@ def test_transitionHistory(self):\n         history = viewlet.workflowHistory()\n \n         self.assertEqual(len(history), 3)\n-        self.assertEqual(history[0][\'actor_home\'], \'\')\n+        self.assertEqual(history[0]["actor_home"], "")\n \n \n class TestContentHistoryViewlet(ViewletsFunctionalTestCase):\n-\n     def setUp(self):\n         super(TestContentHistoryViewlet, self).setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n-        self.folder.invokeFactory(\'Document\', \'d1\')\n+        self.folder.invokeFactory("Document", "d1")\n \n     def test_initialHistory(self):\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n+        context = getattr(self.folder, "d1")\n         viewlet = ContentHistoryViewlet(context, request, None, None)\n         viewlet.update()\n         self.assertEqual(len(viewlet.revisionHistory()), 1)\n@@ -86,7 +84,7 @@ def test_initialHistory(self):\n     def test_revisionHistory(self):\n         repo_tool = self.portal.portal_repository\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n+        context = getattr(self.folder, "d1")\n         viewlet = ContentHistoryViewlet(context, request, None, None)\n         viewlet.update()\n \n@@ -94,48 +92,51 @@ def test_revisionHistory(self):\n         history = viewlet.revisionHistory()\n         self.assertEqual(len(history), 1)\n \n-        repo_tool.save(context, comment=\'Initial Revision\')\n+        repo_tool.save(context, comment="Initial Revision")\n         viewlet.update()\n         history = viewlet.revisionHistory()\n         self.assertEqual(len(history), 2)\n-        self.assertEqual(history[0][\'comments\'], \'Initial Revision\')\n+        self.assertEqual(history[0]["comments"], "Initial Revision")\n \n-        repo_tool.save(context, comment=\'Second Revision\')\n+        repo_tool.save(context, comment="Second Revision")\n         viewlet.update()\n         history = viewlet.revisionHistory()\n         self.assertTrue(\n-            \'http://nohost/plone/Members/test_user_1_/d1/@@history?one=2&two=1\'\n-            in history[0][\'diff_previous_url\']\n+            "http://nohost/plone/Members/test_user_1_/d1/@@history?one=2&two=1"\n+            in history[0]["diff_previous_url"]\n         )\n \n         # check diff link does not appear if content is not diffable\n         diff_tool = self.portal.portal_diff\n-        diff_tool.setDiffForPortalType(\'Document\', {})\n+        diff_tool.setDiffForPortalType("Document", {})\n         viewlet.update()\n         history = viewlet.revisionHistory()\n-        self.assertFalse(\'diff_previous_url\' in history[0])\n+        self.assertFalse("diff_previous_url" in history[0])\n \n     def test_revertAbility(self):\n         # check revert URL is generated only if the user has the appropriate\n         # permission\n         repo_tool = self.portal.portal_repository\n         request = self.app.REQUEST\n-        context = getattr(self.folder, \'d1\')\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        context = getattr(self.folder, "d1")\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         login(self.portal, TEST_USER_NAME)\n-        repo_tool.save(context, comment=\'Initial Revision\')\n-        repo_tool.save(context, comment=\'Second Revision\')\n+        repo_tool.save(context, comment="Initial Revision")\n+        repo_tool.save(context, comment="Second Revision")\n \n         viewlet = ContentHistoryViewlet(context, request, None, None)\n \n         viewlet.update()\n         history = viewlet.revisionHistory()\n         self.assertTrue(\n-            \'http://nohost/plone/Members/test_user_1_/d1/revertversion\' in history[0][\'revert_url\'])  # noqa\n+            "http://nohost/plone/Members/test_user_1_/d1/revertversion"\n+            in history[0]["revert_url"]\n+        )  # noqa\n \n         self.portal.manage_permission(\n-            \'CMFEditions: Revert to previous versions\', [], False)\n+            "CMFEditions: Revert to previous versions", [], False\n+        )\n \n         viewlet.update()\n         history = viewlet.revisionHistory()\n-        self.assertEqual(history[0][\'revert_url\'], None)\n+        self.assertEqual(history[0]["revert_url"], None)\ndiff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex 2b37715c..c217e187 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.social import SocialTagsViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n-from plone.app.testing import logout\n from plone.app.testing import login\n+from plone.app.testing import logout\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISocialMediaSchema\n from zope.annotation.interfaces import IAnnotations\n@@ -19,10 +19,9 @@ class TestSocialViewlet(ViewletsTestCase):\n     def setUp(self):\n         super(TestSocialViewlet, self).setUp()\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.folder.invokeFactory(\'News Item\', \'news-item\',\n-                                  title=\'News Item\')\n-        self.news = self.folder[\'news-item\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.folder.invokeFactory("News Item", "news-item", title="News Item")\n+        self.news = self.folder["news-item"]\n         logout()\n \n     def _tagFound(self, tags, attr, name=None, value=None):\n@@ -35,7 +34,7 @@ def _tagFound(self, tags, attr, name=None, value=None):\n                     if value is None:\n                         # only checking for existence\n                         return True\n-                    return meta[\'content\'] == value\n+                    return meta["content"] == value\n         return False\n \n     def tagFound(self, viewlet, attr, name=None, value=None):\n@@ -50,19 +49,22 @@ def testBasicTags(self):\n         description = self.folder.Description()\n         folder_url = self.folder.absolute_url()\n         # Twitter\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'name\', \'twitter:card\', "summary"))\n+        self.assertTrue(self.tagFound(viewlet, "name", "twitter:card", "summary"))\n         # OpenGraph/Facebook\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:site_name\', viewlet.site_title_setting))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:title\', viewlet.page_title))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:description\', description))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:url\', folder_url))\n+        self.assertTrue(\n+            self.tagFound(\n+                viewlet, "property", "og:site_name", viewlet.site_title_setting\n+            )\n+        )\n+        self.assertTrue(\n+            self.tagFound(viewlet, "property", "og:title", viewlet.page_title)\n+        )\n+        self.assertTrue(\n+            self.tagFound(viewlet, "property", "og:description", description)\n+        )\n+        self.assertTrue(self.tagFound(viewlet, "property", "og:url", folder_url))\n         # No schema.org itemprops\n-        self.assertFalse(self.tagFound(viewlet, \'itemprop\'))\n+        self.assertFalse(self.tagFound(viewlet, "itemprop"))\n \n     def testBasicItemProps(self):\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n@@ -70,21 +72,23 @@ def testBasicItemProps(self):\n         description = self.folder.Description()\n         folder_url = self.folder.absolute_url()\n         # No Twitter\n-        self.assertFalse(self.bodyTagFound(viewlet, \'name\'))\n+        self.assertFalse(self.bodyTagFound(viewlet, "name"))\n         # No OpenGraph/Facebook\n-        self.assertFalse(self.bodyTagFound(viewlet, \'property\'))\n+        self.assertFalse(self.bodyTagFound(viewlet, "property"))\n         # schema.org itemprops\n-        self.assertTrue(self.bodyTagFound(\n-            viewlet, \'itemprop\', \'name\', viewlet.page_title))\n-        self.assertTrue(self.bodyTagFound(\n-            viewlet, \'itemprop\', \'description\', description))\n-        self.assertTrue(self.bodyTagFound(\n-            viewlet, \'itemprop\', \'url\', folder_url))\n+        self.assertTrue(\n+            self.bodyTagFound(viewlet, "itemprop", "name", viewlet.page_title)\n+        )\n+        self.assertTrue(\n+            self.bodyTagFound(viewlet, "itemprop", "description", description)\n+        )\n+        self.assertTrue(self.bodyTagFound(viewlet, "itemprop", "url", folder_url))\n \n     def testDisabled(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(\n-            ISocialMediaSchema, prefix=\'plone\', check=False)\n+            ISocialMediaSchema, prefix="plone", check=False\n+        )\n         settings.share_social_data = False\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n@@ -97,7 +101,7 @@ def testDisabledForLoggedUser(self):\n         self.assertEquals(len(viewlet.tags), 0)\n         # clear cache to prevent memoize\n         cache = IAnnotations(self.app.REQUEST)\n-        key = \'plone.memoize\'\n+        key = "plone.memoize"\n         cache[key] = {}\n         logout()\n         viewlet.update()\n@@ -106,25 +110,35 @@ def testDisabledForLoggedUser(self):\n     def testIncludeSocialSettings(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(\n-            ISocialMediaSchema, prefix=\'plone\', check=False)\n-        settings.twitter_username = \'foobar\'\n-        settings.facebook_app_id = \'foobar\'\n-        settings.facebook_username = \'foobar\'\n+            ISocialMediaSchema, prefix="plone", check=False\n+        )\n+        settings.twitter_username = "foobar"\n+        settings.facebook_app_id = "foobar"\n+        settings.facebook_username = "foobar"\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'name\', \'twitter:site\', \'@foobar\'))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'fb:app_id\', \'foobar\'))\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:article:publisher\',\n-            \'https://www.facebook.com/foobar\'))\n+        self.assertTrue(self.tagFound(viewlet, "name", "twitter:site", "@foobar"))\n+        self.assertTrue(self.tagFound(viewlet, "property", "fb:app_id", "foobar"))\n+        self.assertTrue(\n+            self.tagFound(\n+                viewlet,\n+                "property",\n+                "og:article:publisher",\n+                "https://www.facebook.com/foobar",\n+            )\n+        )\n \n     def testLogo(self):\n         viewlet = SocialTagsViewlet(self.news, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertTrue(self.tagFound(\n-            viewlet, \'property\', \'og:image\', \'http://nohost/plone/logo.png\'))\n-        self.assertFalse(self.tagFound(viewlet, \'itemprop\'))\n-        self.assertTrue(self.bodyTagFound(\n-            viewlet, \'itemprop\', \'image\', \'http://nohost/plone/logo.png\'))\n+        self.assertTrue(\n+            self.tagFound(\n+                viewlet, "property", "og:image", "http://nohost/plone/logo.png"\n+            )\n+        )\n+        self.assertFalse(self.tagFound(viewlet, "itemprop"))\n+        self.assertTrue(\n+            self.bodyTagFound(\n+                viewlet, "itemprop", "image", "http://nohost/plone/logo.png"\n+            )\n+        )\ndiff --git a/plone/app/layout/viewlets/toolbar.py b/plone/app/layout/viewlets/toolbar.py\nindex b9d0107b..0134580a 100644\n--- a/plone/app/layout/viewlets/toolbar.py\n+++ b/plone/app/layout/viewlets/toolbar.py\n@@ -12,7 +12,7 @@\n \n \n class ToolbarViewletManager(OrderedViewletManager):\n-    custom_template = ViewPageTemplateFile(\'toolbar.pt\')\n+    custom_template = ViewPageTemplateFile("toolbar.pt")\n \n     def base_render(self):\n         return super(ToolbarViewletManager, self).render()\n@@ -23,58 +23,47 @@ def render(self):\n     @property\n     @memoize\n     def context_state(self):\n-        return getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_context_state\'\n-        )\n+        return getMultiAdapter((self.context, self.request), name="plone_context_state")\n \n     @property\n     @memoize\n     def portal_state(self):\n-        return getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_portal_state\'\n-        )\n+        return getMultiAdapter((self.context, self.request), name="plone_portal_state")\n \n     def get_options(self):\n         registry = getUtility(IRegistry)\n         options = {}\n \n-        lessvars = registry.get(\'plone.lessvariables\', {})\n+        lessvars = registry.get("plone.lessvariables", {})\n \n-        toolbar_width = lessvars.get(\'plone-left-toolbar-expanded\', None)\n-        submenu_width = lessvars.get(\'plone-toolbar-submenu-width\', None)\n-        desktop_width = lessvars.get(\'plone-screen-sm-min\', None)\n+        toolbar_width = lessvars.get("plone-left-toolbar-expanded", None)\n+        submenu_width = lessvars.get("plone-toolbar-submenu-width", None)\n+        desktop_width = lessvars.get("plone-screen-sm-min", None)\n \n         if toolbar_width:\n-            options[\'toolbar_width\'] = toolbar_width\n+            options["toolbar_width"] = toolbar_width\n         if submenu_width:\n-            options[\'submenu_width\'] = submenu_width\n+            options["submenu_width"] = submenu_width\n         if desktop_width:\n-            options[\'desktop_width\'] = desktop_width\n+            options["desktop_width"] = desktop_width\n \n         return json.dumps(options)\n \n     def get_personal_bar(self):\n-        viewlet = PersonalBarViewlet(\n-            self.context,\n-            self.request,\n-            self.__parent__, self\n-        )\n+        viewlet = PersonalBarViewlet(self.context, self.request, self.__parent__, self)\n         viewlet.update()\n         return viewlet\n \n     def get_toolbar_logo(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         portal_url = self.portal_state.portal_url()\n         try:\n             logo = settings.toolbar_logo\n         except AttributeError:\n-            logo = \'/++plone++static/plone-toolbarlogo.svg\'\n+            logo = "/++plone++static/plone-toolbarlogo.svg"\n         if not logo:\n-            logo = \'/++plone++static/plone-toolbarlogo.svg\'\n+            logo = "/++plone++static/plone-toolbarlogo.svg"\n         return portal_url + logo\n \n     def show_switcher(self):\ndiff --git a/setup.py b/setup.py\nindex c5c74662..52b0c5d6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,78 +2,78 @@\n from setuptools import setup\n \n \n-version = \'3.4.1.dev0\'\n+version = "3.4.1.dev0"\n \n-long_description = \\\n-    open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n+long_description = open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n \n-setup(name=\'plone.app.layout\',\n-      version=version,\n-      description="Layout mechanisms for Plone",\n-      long_description=long_description,\n-      classifiers=[\n-          "Development Status :: 6 - Mature",\n-          "Environment :: Web Environment",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 5.2",\n-          "Framework :: Zope2",\n-          "Framework :: Zope :: 4",\n-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n-          "Operating System :: OS Independent",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 2.7",\n-          "Programming Language :: Python :: 3.6",\n-          "Programming Language :: Python :: 3.7",\n-          "Programming Language :: Python :: 3.8",\n-      ],\n-      keywords=\'plone layout viewlet\',\n-      author=\'Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.app.layout\',\n-      license=\'GPL version 2\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\', \'plone.app\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      install_requires=[\n-          \'Acquisition\',\n-          \'DateTime\',\n-          \'plone.app.content\',\n-          \'plone.app.portlets\',\n-          \'plone.app.viewletmanager >=1.2\',\n-          \'plone.batching >1.0.999\',\n-          \'plone.i18n\',\n-          \'plone.memoize\',\n-          \'plone.portlets\',\n-          \'plone.registry\',\n-          \'Products.CMFCore\',\n-          \'Products.CMFDynamicViewFTI\',\n-          \'Products.CMFEditions >=1.2.2\',\n-          \'Products.CMFPlone >=5.0b3.dev0\',\n-          \'setuptools\',\n-          \'six\',\n-          \'zope.component\',\n-          \'zope.deferredimport\',\n-          \'zope.deprecation\',\n-          \'zope.dottedname\',\n-          \'zope.i18n\',\n-          \'zope.interface\',\n-          \'zope.publisher\',\n-          \'zope.schema\',\n-          \'zope.viewlet\',\n-          \'Zope2\',\n-      ],\n-      extras_require=dict(\n-          test=[\n-              \'plone.app.contenttypes\',\n-              \'plone.app.intid\',\n-              \'plone.app.relationfield\',\n-              \'plone.app.testing\',\n-              \'plone.dexterity\',\n-              \'plone.locking\',\n-              \'plone.testing\',\n-              \'z3c.relationfield\',\n-              \'zope.annotation\',\n-          ]\n-      ),\n-      )\n+setup(\n+    name="plone.app.layout",\n+    version=version,\n+    description="Layout mechanisms for Plone",\n+    long_description=long_description,\n+    classifiers=[\n+        "Development Status :: 6 - Mature",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Zope2",\n+        "Framework :: Zope :: 4",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+    ],\n+    keywords="plone layout viewlet",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.layout",\n+    license="GPL version 2",\n+    packages=find_packages(),\n+    namespace_packages=["plone", "plone.app"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=[\n+        "Acquisition",\n+        "DateTime",\n+        "plone.app.content",\n+        "plone.app.portlets",\n+        "plone.app.viewletmanager >=1.2",\n+        "plone.batching >1.0.999",\n+        "plone.i18n",\n+        "plone.memoize",\n+        "plone.portlets",\n+        "plone.registry",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.CMFEditions >=1.2.2",\n+        "Products.CMFPlone >=5.0b3.dev0",\n+        "setuptools",\n+        "six",\n+        "zope.component",\n+        "zope.deferredimport",\n+        "zope.deprecation",\n+        "zope.dottedname",\n+        "zope.i18n",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.viewlet",\n+        "Zope2",\n+    ],\n+    extras_require=dict(\n+        test=[\n+            "plone.app.contenttypes",\n+            "plone.app.intid",\n+            "plone.app.relationfield",\n+            "plone.app.testing",\n+            "plone.dexterity",\n+            "plone.locking",\n+            "plone.testing",\n+            "z3c.relationfield",\n+            "zope.annotation",\n+        ]\n+    ),\n+)\n'

