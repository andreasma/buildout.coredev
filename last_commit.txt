Repository: plone.resourceeditor


Branch: refs/heads/master
Date: 2018-06-05T09:56:22+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resourceeditor/commit/e4c4740a31b6c34a627d7e44d3d9a19630dca663

fix for py3

Files changed:
M plone/resourceeditor/browser.py
M plone/resourceeditor/tests/test_file_manager.py
M plone/resourceeditor/tests/test_file_manager_action.py

b'diff --git a/plone/resourceeditor/browser.py b/plone/resourceeditor/browser.py\nindex 3f4e43b..bee77a9 100644\n--- a/plone/resourceeditor/browser.py\n+++ b/plone/resourceeditor/browser.py\n@@ -7,6 +7,7 @@\n from plone.resource.file import FilesystemFile\n from plone.resource.interfaces import IResourceDirectory\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.decode import processInputs\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from six.moves import urllib\n@@ -85,8 +86,8 @@ def getFolder(self, path):\n         to getFolder(). This can be used for example to only show image files\n         in a file system tree.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2 and isinstance(path, six.text_type):\n+            path = path.encode(\'utf-8\')\n \n         folders = []\n         files = []\n@@ -108,7 +109,9 @@ def getFolder(self, path):\n         return folders + files\n \n     def getFile(self, path):\n-        path = self.normalizePath(path.encode(\'utf-8\'))\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+        path = self.normalizePath(path)\n         ext = self.getExtension(path=path)\n         result = {\'ext\': ext}\n         self.request.response.setHeader(\'Content-Type\', \'application/json\')\n@@ -124,7 +127,10 @@ def getFile(self, path):\n             try:\n                 data = data.read()\n \n-                result[\'contents\'] = str(data)\n+                if six.PY2 and isinstance(data, text_type):\n+                    result[\'contents\'] = data.encode(\'utf8\')\n+                else:\n+                    result[\'contents\'] = safe_unicode(data)\n                 try:\n                     return json.dumps(result)\n                 except UnicodeDecodeError:\n@@ -212,8 +218,13 @@ def getInfo(self, obj, path=\'/\'):\n         }\n \n     def saveFile(self, path, value):\n-        path = path.lstrip(\'/\').encode(\'utf-8\')\n+        path = path.lstrip(\'/\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n         value = six.text_type(value.strip(), \'utf-8\')\n+        if six.PY2:\n+            value = value.encode(\'utf-8\')\n+\n         value = value.replace(\'\\r\\n\', \'\\n\')\n \n         if path in self.context:\n@@ -251,9 +262,9 @@ def saveFile(self, path, value):\n     def addFolder(self, path, name):\n         """Create a new directory on the server within the given path.\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        name = name.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            name = name.encode(\'utf-8\')\n \n         code = 0\n         error = \'\'\n@@ -303,8 +314,9 @@ def addFolder(self, path, name):\n     def addFile(self, path, name):\n         """Add a new empty file in the given directory\n         """\n-        path = path.encode(\'utf-8\')\n-        name = name.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            name = name.encode(\'utf-8\')\n \n         error = \'\'\n         code = 0\n@@ -331,7 +343,7 @@ def addFile(self, path, name):\n                                   context=self.request)\n                 code = 1\n             else:\n-                self.resourceDirectory.writeFile(newPath, \'\')\n+                self.resourceDirectory.writeFile(newPath, b\'\')\n \n         self.request.response.setHeader(\'Content-Type\', \'application/json\')\n         return json.dumps({\n@@ -345,8 +357,8 @@ def addFile(self, path, name):\n     def delete(self, path):\n         """Delete the item at the given path.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         parentPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -381,8 +393,9 @@ def renameFile(self, path, newName):\n         """Rename the item at the given path to the new name\n         """\n \n-        path = path.encode(\'utf-8\')\n-        newName = newName.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            newName = newName.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         oldPath = newPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -424,9 +437,9 @@ def renameFile(self, path, newName):\n     def move(self, path, directory):\n         """Move the item at the given path to a new directory\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        directory = directory.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            directory = directory.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         newParentPath = self.normalizePath(directory)\n@@ -546,8 +559,8 @@ def getDirectory(folder, relpath=\'\'):\n     def download(self, path):\n         """Serve the requested file to the user\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         parentPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -759,8 +772,8 @@ def getFolder(self, path, getSizes=False):\n         to getFolder(). This can be used for example to only show image files\n         in a file system tree.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         folders = []\n         files = []\n@@ -784,8 +797,8 @@ def getInfo(self, path, getSize=False):\n         indicates whether the dimensions of the file (if an image) should be\n         returned.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         path = self.normalizePath(path)\n         obj = self.getObject(path)\n@@ -862,9 +875,9 @@ def getInfo(self, path, getSize=False):\n     def addFolder(self, path, name):\n         """Create a new directory on the server within the given path.\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        name = name.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            name = name.encode(\'utf-8\')\n \n         code = 0\n         error = \'\'\n@@ -921,8 +934,9 @@ def add(self, path, newfile, replacepath=None):\n         URL, so URL-encoded at a minimum.\n         """\n \n-        path = path.encode(\'utf-8\')\n-        if replacepath is not None:\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+        if six.PY2 and replacepath is not None:\n             replacepath = replacepath.encode(\'utf-8\')\n \n         parentPath = self.normalizePath(path)\n@@ -931,7 +945,7 @@ def add(self, path, newfile, replacepath=None):\n         code = 0\n \n         name = newfile.filename\n-        if isinstance(name, six.text_type):\n+        if six.PY2 and isinstance(name, six.text_type):\n             name = name.encode(\'utf-8\')\n \n         if replacepath:\n@@ -973,9 +987,9 @@ def add(self, path, newfile, replacepath=None):\n     def addNew(self, path, name):\n         """Add a new empty file in the given directory\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        name = name.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            name = name.encode(\'utf-8\')\n \n         error = \'\'\n         code = 0\n@@ -1002,7 +1016,7 @@ def addNew(self, path, name):\n                                   context=self.request)\n                 code = 1\n             else:\n-                self.resourceDirectory.writeFile(newPath, \'\')\n+                self.resourceDirectory.writeFile(newPath, b\'\')\n \n         return {\n             \'parent\': self.normalizeReturnPath(parentPath),\n@@ -1014,9 +1028,9 @@ def addNew(self, path, name):\n     def rename(self, path, newName):\n         """Rename the item at the given path to the new name\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        newName = newName.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            newName = newName.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         oldPath = newPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -1055,8 +1069,8 @@ def rename(self, path, newName):\n     def delete(self, path):\n         """Delete the item at the given path.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         parentPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -1089,9 +1103,9 @@ def delete(self, path):\n     def move(self, path, directory):\n         """Move the item at the given path to a new directory\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        directory = directory.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            directory = directory.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         newParentPath = self.normalizePath(directory)\n@@ -1153,8 +1167,8 @@ def move(self, path, directory):\n     def download(self, path):\n         """Serve the requested file to the user\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         parentPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -1198,8 +1212,8 @@ def getExtension(self, path, obj):\n     # Methods that are their own views\n     def getFile(self, path):\n         self.setup()\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         path = self.normalizePath(path)\n         file = self.context.context.unrestrictedTraverse(path)\n@@ -1219,9 +1233,11 @@ def saveFile(self, path, value):\n \n         path = self.request.form.get(\'path\', path)\n         value = self.request.form.get(\'value\', value)\n-\n-        path = path.lstrip(\'/\').encode(\'utf-8\')\n-        value = value.replace(\'\\r\\n\', \'\\n\').encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            value = value.encode(\'utf-8\')\n+        path = path.lstrip(\'/\')\n+        value = value.replace(\'\\r\\n\', \'\\n\')\n         self.context.writeFile(path, value)\n         return \' \'  # Zope no likey empty responses\n \ndiff --git a/plone/resourceeditor/tests/test_file_manager.py b/plone/resourceeditor/tests/test_file_manager.py\nindex f71f123..c3312e5 100644\n--- a/plone/resourceeditor/tests/test_file_manager.py\n+++ b/plone/resourceeditor/tests/test_file_manager.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.resourceeditor.testing import PLONE_RESOURCE_EDITOR_INTEGRATION_TESTING  # noqa\n \n+import six\n import unittest\n \n \n@@ -22,7 +23,7 @@ def test_getinfo(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n \n-        r.writeFile(\'test.txt\', \'A text file\')\n+        r.writeFile(\'test.txt\', b\'A text file\')\n \n         view = FileManager(r, self.layer[\'request\'])\n         info = view.getInfo(\'/test.txt\')\n@@ -38,9 +39,9 @@ def test_getfolder(self):\n         r = self._make_directory()\n \n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'beta.txt\', \'Beta\')\n+        r[\'alpha\'].writeFile(\'beta.txt\', b\'Beta\')\n         r[\'alpha\'].makeDirectory(\'delta\')\n-        r[\'alpha\'][\'delta\'].writeFile(\'gamma.css\', \'body\')\n+        r[\'alpha\'][\'delta\'].writeFile(\'gamma.css\', b\'body\')\n \n         view = FileManager(r, self.layer[\'request\'])\n         info = view.getFolder(\'/alpha\')\n@@ -123,14 +124,13 @@ def test_addfolder_invalid_parent(self):\n \n     def test_add(self):\n         from plone.resourceeditor.browser import FileManager\n-        from StringIO import StringIO\n+        from six import BytesIO\n         r = self._make_directory()\n \n         view = FileManager(r, self.layer[\'request\'])\n \n-        d = StringIO(\'foo\')\n+        d = BytesIO(b\'foo\')\n         d.filename = \'test.txt\'\n-\n         info = view.add(\'/\', d)\n \n         self.assertEqual(info[\'code\'], 0)\n@@ -141,13 +141,13 @@ def test_add(self):\n \n     def test_add_subfolder(self):\n         from plone.resourceeditor.browser import FileManager\n-        from StringIO import StringIO\n+        from six import BytesIO\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n-        d = StringIO(\'foo\')\n+        d = BytesIO(b\'foo\')\n         d.filename = \'test.txt\'\n \n         info = view.add(\'/alpha\', d)\n@@ -160,13 +160,13 @@ def test_add_subfolder(self):\n \n     def test_add_exists(self):\n         from plone.resourceeditor.browser import FileManager\n-        from StringIO import StringIO\n+        from six import BytesIO\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'boo\')\n+        r.writeFile(\'test.txt\', b\'boo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n-        d = StringIO(\'foo\')\n+        d = BytesIO(b\'foo\')\n         d.filename = \'test.txt\'\n \n         info = view.add(\'/\', d)\n@@ -174,17 +174,17 @@ def test_add_exists(self):\n         self.assertEqual(info[\'code\'], 1)\n         self.assertNotEqual(info[\'error\'], \'\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'boo\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'boo\')\n \n     def test_add_replace(self):\n         from plone.resourceeditor.browser import FileManager\n-        from StringIO import StringIO\n+        from six import BytesIO\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'boo\')\n+        r.writeFile(\'test.txt\', b\'boo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n-        d = StringIO(\'foo\')\n+        d = BytesIO(b\'foo\')\n         d.filename = \'test.txt\'\n \n         info = view.add(\'/\', d, \'/test.txt\')\n@@ -195,7 +195,7 @@ def test_add_replace(self):\n         self.assertEqual(info[\'path\'], \'/\')\n         self.assertEqual(info[\'parent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'foo\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'foo\')\n \n     def test_addnew(self):\n         from plone.resourceeditor.browser import FileManager\n@@ -210,12 +210,12 @@ def test_addnew(self):\n         self.assertEqual(info[\'name\'], \'test.txt\')\n         self.assertEqual(info[\'parent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'\')\n \n     def test_addnew_exists(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -224,7 +224,7 @@ def test_addnew_exists(self):\n         self.assertEqual(info[\'code\'], 1)\n         self.assertNotEqual(info[\'error\'], \'\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'foo\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'foo\')\n \n     def test_addnew_invalidname(self):\n         from plone.resourceeditor.browser import FileManager\n@@ -240,7 +240,7 @@ def test_addnew_invalidname(self):\n     def test_rename(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -253,13 +253,13 @@ def test_rename(self):\n         self.assertEqual(info[\'oldParent\'], \'/\')\n         self.assertEqual(info[\'newParent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'foo.txt\'), \'foo\')\n+        self.assertEqual(r.readFile(\'foo.txt\'), b\'foo\')\n \n     def test_rename_subfolder(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -272,13 +272,13 @@ def test_rename_subfolder(self):\n         self.assertEqual(info[\'oldParent\'], \'/alpha\')\n         self.assertEqual(info[\'newParent\'], \'/alpha\')\n \n-        self.assertEqual(r[\'alpha\'].readFile(\'foo.txt\'), \'foo\')\n+        self.assertEqual(r[\'alpha\'].readFile(\'foo.txt\'), b\'foo\')\n \n     def test_rename_exists(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n-        r.writeFile(\'foo.txt\', \'bar\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n+        r.writeFile(\'foo.txt\', b\'bar\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -291,12 +291,12 @@ def test_rename_exists(self):\n         self.assertEqual(info[\'oldParent\'], \'/\')\n         self.assertEqual(info[\'newParent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'foo.txt\'), \'bar\')\n+        self.assertEqual(r.readFile(\'foo.txt\'), b\'bar\')\n \n     def test_delete(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -312,7 +312,7 @@ def test_delete_subfolder(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -340,7 +340,7 @@ def test_move(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -351,14 +351,14 @@ def test_move(self):\n         self.assertEqual(info[\'newPath\'], \'/alpha/test.txt\')\n \n         self.assertFalse(\'test.txt\' in r)\n-        self.assertEqual(\'foo\', r[\'alpha\'].readFile(\'test.txt\'))\n+        self.assertEqual(b\'foo\', r[\'alpha\'].readFile(\'test.txt\'))\n \n     def test_move_exists(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'bar\')\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'bar\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -369,12 +369,12 @@ def test_move_exists(self):\n         self.assertEqual(info[\'newPath\'], \'/alpha/test.txt\')\n \n         self.assertTrue(\'test.txt\' in r)\n-        self.assertEqual(\'bar\', r[\'alpha\'].readFile(\'test.txt\'))\n+        self.assertEqual(b\'bar\', r[\'alpha\'].readFile(\'test.txt\'))\n \n     def test_move_invalid_parent(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -389,7 +389,7 @@ def test_move_invalid_parent(self):\n     def test_download(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n-        self.assertEqual(\'foo\', view.download(\'/test.txt\'))\n+        self.assertEqual(b\'foo\', view.download(\'/test.txt\'))\ndiff --git a/plone/resourceeditor/tests/test_file_manager_action.py b/plone/resourceeditor/tests/test_file_manager_action.py\nindex 99fd92a..b724976 100644\n--- a/plone/resourceeditor/tests/test_file_manager_action.py\n+++ b/plone/resourceeditor/tests/test_file_manager_action.py\n@@ -22,7 +22,7 @@ def test_getinfo(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n \n-        r.writeFile(\'test.txt\', \'A text file\')\n+        r.writeFile(\'test.txt\', b\'A text file\')\n         view = FileManagerActions(r, self.layer[\'request\'])\n         info = view.getInfo(r[\'test.txt\'])\n \n@@ -35,9 +35,9 @@ def test_getfolder(self):\n         r = self._make_directory()\n \n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'beta.txt\', \'Beta\')\n+        r[\'alpha\'].writeFile(\'beta.txt\', b\'Beta\')\n         r[\'alpha\'].makeDirectory(\'delta\')\n-        r[\'alpha\'][\'delta\'].writeFile(\'gamma.css\', \'body\')\n+        r[\'alpha\'][\'delta\'].writeFile(\'gamma.css\', b\'body\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n         info = view.getFolder(\'/alpha\')\n@@ -156,7 +156,7 @@ def test_add_subfolder(self):\n     def test_add_exists(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'boo\')\n+        r.writeFile(\'test.txt\', b\'boo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -168,7 +168,7 @@ def test_add_exists(self):\n         self.assertEqual(info[\'code\'], 1)\n         self.assertNotEqual(info[\'error\'], \'\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'boo\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'boo\')\n \n     def test_addnew_invalidname(self):\n         from plone.resourceeditor.browser import FileManagerActions\n@@ -185,7 +185,7 @@ def test_addnew_invalidname(self):\n     def test_rename(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -199,13 +199,13 @@ def test_rename(self):\n         self.assertEqual(info[\'oldParent\'], \'/\')\n         self.assertEqual(info[\'newParent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'foo.txt\'), \'foo\')\n+        self.assertEqual(r.readFile(\'foo.txt\'), b\'foo\')\n \n     def test_rename_subfolder(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -219,13 +219,13 @@ def test_rename_subfolder(self):\n         self.assertEqual(info[\'oldParent\'], \'/alpha\')\n         self.assertEqual(info[\'newParent\'], \'/alpha\')\n \n-        self.assertEqual(r[\'alpha\'].readFile(\'foo.txt\'), \'foo\')\n+        self.assertEqual(r[\'alpha\'].readFile(\'foo.txt\'), b\'foo\')\n \n     def test_rename_exists(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n-        r.writeFile(\'foo.txt\', \'bar\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n+        r.writeFile(\'foo.txt\', b\'bar\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -239,12 +239,12 @@ def test_rename_exists(self):\n         self.assertEqual(info[\'oldParent\'], \'/\')\n         self.assertEqual(info[\'newParent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'foo.txt\'), \'bar\')\n+        self.assertEqual(r.readFile(\'foo.txt\'), b\'bar\')\n \n     def test_delete(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -261,7 +261,7 @@ def test_delete_subfolder(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -291,7 +291,7 @@ def test_move(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -303,14 +303,14 @@ def test_move(self):\n         self.assertEqual(info[\'newPath\'], \'/alpha/test.txt\')\n \n         self.assertFalse(\'test.txt\' in r)\n-        self.assertEqual(\'foo\', r[\'alpha\'].readFile(\'test.txt\'))\n+        self.assertEqual(b\'foo\', r[\'alpha\'].readFile(\'test.txt\'))\n \n     def test_move_exists(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'bar\')\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'bar\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -322,12 +322,12 @@ def test_move_exists(self):\n         self.assertEqual(info[\'newPath\'], \'/alpha/test.txt\')\n \n         self.assertTrue(\'test.txt\' in r)\n-        self.assertEqual(\'bar\', r[\'alpha\'].readFile(\'test.txt\'))\n+        self.assertEqual(b\'bar\', r[\'alpha\'].readFile(\'test.txt\'))\n \n     def test_move_invalid_parent(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -343,7 +343,7 @@ def test_move_invalid_parent(self):\n     def test_download(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n-        self.assertEqual(\'foo\', view.download(\'/test.txt\'))\n+        self.assertEqual(b\'foo\', view.download(\'/test.txt\'))\n'

Repository: plone.resourceeditor


Branch: refs/heads/master
Date: 2018-09-14T17:02:04+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resourceeditor/commit/1451ac49a107bce09d3458489e66ab561a5a66ce

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b262435..8de9c78 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix functionality and tests in py3\n+  [pbauer]\n \n \n 2.1.1 (2018-02-02)\ndiff --git a/setup.py b/setup.py\nindex 3af9436..cea732f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,9 +15,12 @@\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.0",\n         "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         ],\n     keywords=\'ace resource editor\',\n     author=\'Plone Foundation\',\n'

Repository: plone.resourceeditor


Branch: refs/heads/master
Date: 2018-09-14T21:46:36+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resourceeditor/commit/d667792c940560f0f8340c31e3c1ff6cfe47a79f

fix syntax

Files changed:
M plone/resourceeditor/browser.py

b"diff --git a/plone/resourceeditor/browser.py b/plone/resourceeditor/browser.py\nindex bee77a9..ad18380 100644\n--- a/plone/resourceeditor/browser.py\n+++ b/plone/resourceeditor/browser.py\n@@ -127,7 +127,7 @@ def getFile(self, path):\n             try:\n                 data = data.read()\n \n-                if six.PY2 and isinstance(data, text_type):\n+                if six.PY2 and isinstance(data, six.text_type):\n                     result['contents'] = data.encode('utf8')\n                 else:\n                     result['contents'] = safe_unicode(data)\n"

Repository: plone.resourceeditor


Branch: refs/heads/master
Date: 2018-09-15T09:09:57+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.resourceeditor/commit/721781554f8271ef2b4fd6a19130d87af28df836

Merge pull request #21 from plone/python3

Fix tests and functionality in python 3

Files changed:
M CHANGES.rst
M plone/resourceeditor/browser.py
M plone/resourceeditor/tests/test_file_manager.py
M plone/resourceeditor/tests/test_file_manager_action.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b262435..8de9c78 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix functionality and tests in py3\n+  [pbauer]\n \n \n 2.1.1 (2018-02-02)\ndiff --git a/plone/resourceeditor/browser.py b/plone/resourceeditor/browser.py\nindex 3f4e43b..ad18380 100644\n--- a/plone/resourceeditor/browser.py\n+++ b/plone/resourceeditor/browser.py\n@@ -7,6 +7,7 @@\n from plone.resource.file import FilesystemFile\n from plone.resource.interfaces import IResourceDirectory\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.decode import processInputs\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from six.moves import urllib\n@@ -85,8 +86,8 @@ def getFolder(self, path):\n         to getFolder(). This can be used for example to only show image files\n         in a file system tree.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2 and isinstance(path, six.text_type):\n+            path = path.encode(\'utf-8\')\n \n         folders = []\n         files = []\n@@ -108,7 +109,9 @@ def getFolder(self, path):\n         return folders + files\n \n     def getFile(self, path):\n-        path = self.normalizePath(path.encode(\'utf-8\'))\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+        path = self.normalizePath(path)\n         ext = self.getExtension(path=path)\n         result = {\'ext\': ext}\n         self.request.response.setHeader(\'Content-Type\', \'application/json\')\n@@ -124,7 +127,10 @@ def getFile(self, path):\n             try:\n                 data = data.read()\n \n-                result[\'contents\'] = str(data)\n+                if six.PY2 and isinstance(data, six.text_type):\n+                    result[\'contents\'] = data.encode(\'utf8\')\n+                else:\n+                    result[\'contents\'] = safe_unicode(data)\n                 try:\n                     return json.dumps(result)\n                 except UnicodeDecodeError:\n@@ -212,8 +218,13 @@ def getInfo(self, obj, path=\'/\'):\n         }\n \n     def saveFile(self, path, value):\n-        path = path.lstrip(\'/\').encode(\'utf-8\')\n+        path = path.lstrip(\'/\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n         value = six.text_type(value.strip(), \'utf-8\')\n+        if six.PY2:\n+            value = value.encode(\'utf-8\')\n+\n         value = value.replace(\'\\r\\n\', \'\\n\')\n \n         if path in self.context:\n@@ -251,9 +262,9 @@ def saveFile(self, path, value):\n     def addFolder(self, path, name):\n         """Create a new directory on the server within the given path.\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        name = name.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            name = name.encode(\'utf-8\')\n \n         code = 0\n         error = \'\'\n@@ -303,8 +314,9 @@ def addFolder(self, path, name):\n     def addFile(self, path, name):\n         """Add a new empty file in the given directory\n         """\n-        path = path.encode(\'utf-8\')\n-        name = name.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            name = name.encode(\'utf-8\')\n \n         error = \'\'\n         code = 0\n@@ -331,7 +343,7 @@ def addFile(self, path, name):\n                                   context=self.request)\n                 code = 1\n             else:\n-                self.resourceDirectory.writeFile(newPath, \'\')\n+                self.resourceDirectory.writeFile(newPath, b\'\')\n \n         self.request.response.setHeader(\'Content-Type\', \'application/json\')\n         return json.dumps({\n@@ -345,8 +357,8 @@ def addFile(self, path, name):\n     def delete(self, path):\n         """Delete the item at the given path.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         parentPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -381,8 +393,9 @@ def renameFile(self, path, newName):\n         """Rename the item at the given path to the new name\n         """\n \n-        path = path.encode(\'utf-8\')\n-        newName = newName.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            newName = newName.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         oldPath = newPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -424,9 +437,9 @@ def renameFile(self, path, newName):\n     def move(self, path, directory):\n         """Move the item at the given path to a new directory\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        directory = directory.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            directory = directory.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         newParentPath = self.normalizePath(directory)\n@@ -546,8 +559,8 @@ def getDirectory(folder, relpath=\'\'):\n     def download(self, path):\n         """Serve the requested file to the user\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         parentPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -759,8 +772,8 @@ def getFolder(self, path, getSizes=False):\n         to getFolder(). This can be used for example to only show image files\n         in a file system tree.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         folders = []\n         files = []\n@@ -784,8 +797,8 @@ def getInfo(self, path, getSize=False):\n         indicates whether the dimensions of the file (if an image) should be\n         returned.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         path = self.normalizePath(path)\n         obj = self.getObject(path)\n@@ -862,9 +875,9 @@ def getInfo(self, path, getSize=False):\n     def addFolder(self, path, name):\n         """Create a new directory on the server within the given path.\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        name = name.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            name = name.encode(\'utf-8\')\n \n         code = 0\n         error = \'\'\n@@ -921,8 +934,9 @@ def add(self, path, newfile, replacepath=None):\n         URL, so URL-encoded at a minimum.\n         """\n \n-        path = path.encode(\'utf-8\')\n-        if replacepath is not None:\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+        if six.PY2 and replacepath is not None:\n             replacepath = replacepath.encode(\'utf-8\')\n \n         parentPath = self.normalizePath(path)\n@@ -931,7 +945,7 @@ def add(self, path, newfile, replacepath=None):\n         code = 0\n \n         name = newfile.filename\n-        if isinstance(name, six.text_type):\n+        if six.PY2 and isinstance(name, six.text_type):\n             name = name.encode(\'utf-8\')\n \n         if replacepath:\n@@ -973,9 +987,9 @@ def add(self, path, newfile, replacepath=None):\n     def addNew(self, path, name):\n         """Add a new empty file in the given directory\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        name = name.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            name = name.encode(\'utf-8\')\n \n         error = \'\'\n         code = 0\n@@ -1002,7 +1016,7 @@ def addNew(self, path, name):\n                                   context=self.request)\n                 code = 1\n             else:\n-                self.resourceDirectory.writeFile(newPath, \'\')\n+                self.resourceDirectory.writeFile(newPath, b\'\')\n \n         return {\n             \'parent\': self.normalizeReturnPath(parentPath),\n@@ -1014,9 +1028,9 @@ def addNew(self, path, name):\n     def rename(self, path, newName):\n         """Rename the item at the given path to the new name\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        newName = newName.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            newName = newName.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         oldPath = newPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -1055,8 +1069,8 @@ def rename(self, path, newName):\n     def delete(self, path):\n         """Delete the item at the given path.\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         parentPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -1089,9 +1103,9 @@ def delete(self, path):\n     def move(self, path, directory):\n         """Move the item at the given path to a new directory\n         """\n-\n-        path = path.encode(\'utf-8\')\n-        directory = directory.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            directory = directory.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         newParentPath = self.normalizePath(directory)\n@@ -1153,8 +1167,8 @@ def move(self, path, directory):\n     def download(self, path):\n         """Serve the requested file to the user\n         """\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         npath = self.normalizePath(path)\n         parentPath = \'/\'.join(npath.split(\'/\')[:-1])\n@@ -1198,8 +1212,8 @@ def getExtension(self, path, obj):\n     # Methods that are their own views\n     def getFile(self, path):\n         self.setup()\n-\n-        path = path.encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n \n         path = self.normalizePath(path)\n         file = self.context.context.unrestrictedTraverse(path)\n@@ -1219,9 +1233,11 @@ def saveFile(self, path, value):\n \n         path = self.request.form.get(\'path\', path)\n         value = self.request.form.get(\'value\', value)\n-\n-        path = path.lstrip(\'/\').encode(\'utf-8\')\n-        value = value.replace(\'\\r\\n\', \'\\n\').encode(\'utf-8\')\n+        if six.PY2:\n+            path = path.encode(\'utf-8\')\n+            value = value.encode(\'utf-8\')\n+        path = path.lstrip(\'/\')\n+        value = value.replace(\'\\r\\n\', \'\\n\')\n         self.context.writeFile(path, value)\n         return \' \'  # Zope no likey empty responses\n \ndiff --git a/plone/resourceeditor/tests/test_file_manager.py b/plone/resourceeditor/tests/test_file_manager.py\nindex f71f123..c3312e5 100644\n--- a/plone/resourceeditor/tests/test_file_manager.py\n+++ b/plone/resourceeditor/tests/test_file_manager.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.resourceeditor.testing import PLONE_RESOURCE_EDITOR_INTEGRATION_TESTING  # noqa\n \n+import six\n import unittest\n \n \n@@ -22,7 +23,7 @@ def test_getinfo(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n \n-        r.writeFile(\'test.txt\', \'A text file\')\n+        r.writeFile(\'test.txt\', b\'A text file\')\n \n         view = FileManager(r, self.layer[\'request\'])\n         info = view.getInfo(\'/test.txt\')\n@@ -38,9 +39,9 @@ def test_getfolder(self):\n         r = self._make_directory()\n \n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'beta.txt\', \'Beta\')\n+        r[\'alpha\'].writeFile(\'beta.txt\', b\'Beta\')\n         r[\'alpha\'].makeDirectory(\'delta\')\n-        r[\'alpha\'][\'delta\'].writeFile(\'gamma.css\', \'body\')\n+        r[\'alpha\'][\'delta\'].writeFile(\'gamma.css\', b\'body\')\n \n         view = FileManager(r, self.layer[\'request\'])\n         info = view.getFolder(\'/alpha\')\n@@ -123,14 +124,13 @@ def test_addfolder_invalid_parent(self):\n \n     def test_add(self):\n         from plone.resourceeditor.browser import FileManager\n-        from StringIO import StringIO\n+        from six import BytesIO\n         r = self._make_directory()\n \n         view = FileManager(r, self.layer[\'request\'])\n \n-        d = StringIO(\'foo\')\n+        d = BytesIO(b\'foo\')\n         d.filename = \'test.txt\'\n-\n         info = view.add(\'/\', d)\n \n         self.assertEqual(info[\'code\'], 0)\n@@ -141,13 +141,13 @@ def test_add(self):\n \n     def test_add_subfolder(self):\n         from plone.resourceeditor.browser import FileManager\n-        from StringIO import StringIO\n+        from six import BytesIO\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n-        d = StringIO(\'foo\')\n+        d = BytesIO(b\'foo\')\n         d.filename = \'test.txt\'\n \n         info = view.add(\'/alpha\', d)\n@@ -160,13 +160,13 @@ def test_add_subfolder(self):\n \n     def test_add_exists(self):\n         from plone.resourceeditor.browser import FileManager\n-        from StringIO import StringIO\n+        from six import BytesIO\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'boo\')\n+        r.writeFile(\'test.txt\', b\'boo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n-        d = StringIO(\'foo\')\n+        d = BytesIO(b\'foo\')\n         d.filename = \'test.txt\'\n \n         info = view.add(\'/\', d)\n@@ -174,17 +174,17 @@ def test_add_exists(self):\n         self.assertEqual(info[\'code\'], 1)\n         self.assertNotEqual(info[\'error\'], \'\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'boo\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'boo\')\n \n     def test_add_replace(self):\n         from plone.resourceeditor.browser import FileManager\n-        from StringIO import StringIO\n+        from six import BytesIO\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'boo\')\n+        r.writeFile(\'test.txt\', b\'boo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n-        d = StringIO(\'foo\')\n+        d = BytesIO(b\'foo\')\n         d.filename = \'test.txt\'\n \n         info = view.add(\'/\', d, \'/test.txt\')\n@@ -195,7 +195,7 @@ def test_add_replace(self):\n         self.assertEqual(info[\'path\'], \'/\')\n         self.assertEqual(info[\'parent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'foo\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'foo\')\n \n     def test_addnew(self):\n         from plone.resourceeditor.browser import FileManager\n@@ -210,12 +210,12 @@ def test_addnew(self):\n         self.assertEqual(info[\'name\'], \'test.txt\')\n         self.assertEqual(info[\'parent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'\')\n \n     def test_addnew_exists(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -224,7 +224,7 @@ def test_addnew_exists(self):\n         self.assertEqual(info[\'code\'], 1)\n         self.assertNotEqual(info[\'error\'], \'\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'foo\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'foo\')\n \n     def test_addnew_invalidname(self):\n         from plone.resourceeditor.browser import FileManager\n@@ -240,7 +240,7 @@ def test_addnew_invalidname(self):\n     def test_rename(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -253,13 +253,13 @@ def test_rename(self):\n         self.assertEqual(info[\'oldParent\'], \'/\')\n         self.assertEqual(info[\'newParent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'foo.txt\'), \'foo\')\n+        self.assertEqual(r.readFile(\'foo.txt\'), b\'foo\')\n \n     def test_rename_subfolder(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -272,13 +272,13 @@ def test_rename_subfolder(self):\n         self.assertEqual(info[\'oldParent\'], \'/alpha\')\n         self.assertEqual(info[\'newParent\'], \'/alpha\')\n \n-        self.assertEqual(r[\'alpha\'].readFile(\'foo.txt\'), \'foo\')\n+        self.assertEqual(r[\'alpha\'].readFile(\'foo.txt\'), b\'foo\')\n \n     def test_rename_exists(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n-        r.writeFile(\'foo.txt\', \'bar\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n+        r.writeFile(\'foo.txt\', b\'bar\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -291,12 +291,12 @@ def test_rename_exists(self):\n         self.assertEqual(info[\'oldParent\'], \'/\')\n         self.assertEqual(info[\'newParent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'foo.txt\'), \'bar\')\n+        self.assertEqual(r.readFile(\'foo.txt\'), b\'bar\')\n \n     def test_delete(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -312,7 +312,7 @@ def test_delete_subfolder(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -340,7 +340,7 @@ def test_move(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -351,14 +351,14 @@ def test_move(self):\n         self.assertEqual(info[\'newPath\'], \'/alpha/test.txt\')\n \n         self.assertFalse(\'test.txt\' in r)\n-        self.assertEqual(\'foo\', r[\'alpha\'].readFile(\'test.txt\'))\n+        self.assertEqual(b\'foo\', r[\'alpha\'].readFile(\'test.txt\'))\n \n     def test_move_exists(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'bar\')\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'bar\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -369,12 +369,12 @@ def test_move_exists(self):\n         self.assertEqual(info[\'newPath\'], \'/alpha/test.txt\')\n \n         self.assertTrue(\'test.txt\' in r)\n-        self.assertEqual(\'bar\', r[\'alpha\'].readFile(\'test.txt\'))\n+        self.assertEqual(b\'bar\', r[\'alpha\'].readFile(\'test.txt\'))\n \n     def test_move_invalid_parent(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n \n@@ -389,7 +389,7 @@ def test_move_invalid_parent(self):\n     def test_download(self):\n         from plone.resourceeditor.browser import FileManager\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManager(r, self.layer[\'request\'])\n-        self.assertEqual(\'foo\', view.download(\'/test.txt\'))\n+        self.assertEqual(b\'foo\', view.download(\'/test.txt\'))\ndiff --git a/plone/resourceeditor/tests/test_file_manager_action.py b/plone/resourceeditor/tests/test_file_manager_action.py\nindex 99fd92a..b724976 100644\n--- a/plone/resourceeditor/tests/test_file_manager_action.py\n+++ b/plone/resourceeditor/tests/test_file_manager_action.py\n@@ -22,7 +22,7 @@ def test_getinfo(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n \n-        r.writeFile(\'test.txt\', \'A text file\')\n+        r.writeFile(\'test.txt\', b\'A text file\')\n         view = FileManagerActions(r, self.layer[\'request\'])\n         info = view.getInfo(r[\'test.txt\'])\n \n@@ -35,9 +35,9 @@ def test_getfolder(self):\n         r = self._make_directory()\n \n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'beta.txt\', \'Beta\')\n+        r[\'alpha\'].writeFile(\'beta.txt\', b\'Beta\')\n         r[\'alpha\'].makeDirectory(\'delta\')\n-        r[\'alpha\'][\'delta\'].writeFile(\'gamma.css\', \'body\')\n+        r[\'alpha\'][\'delta\'].writeFile(\'gamma.css\', b\'body\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n         info = view.getFolder(\'/alpha\')\n@@ -156,7 +156,7 @@ def test_add_subfolder(self):\n     def test_add_exists(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'boo\')\n+        r.writeFile(\'test.txt\', b\'boo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -168,7 +168,7 @@ def test_add_exists(self):\n         self.assertEqual(info[\'code\'], 1)\n         self.assertNotEqual(info[\'error\'], \'\')\n \n-        self.assertEqual(r.readFile(\'test.txt\'), \'boo\')\n+        self.assertEqual(r.readFile(\'test.txt\'), b\'boo\')\n \n     def test_addnew_invalidname(self):\n         from plone.resourceeditor.browser import FileManagerActions\n@@ -185,7 +185,7 @@ def test_addnew_invalidname(self):\n     def test_rename(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -199,13 +199,13 @@ def test_rename(self):\n         self.assertEqual(info[\'oldParent\'], \'/\')\n         self.assertEqual(info[\'newParent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'foo.txt\'), \'foo\')\n+        self.assertEqual(r.readFile(\'foo.txt\'), b\'foo\')\n \n     def test_rename_subfolder(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -219,13 +219,13 @@ def test_rename_subfolder(self):\n         self.assertEqual(info[\'oldParent\'], \'/alpha\')\n         self.assertEqual(info[\'newParent\'], \'/alpha\')\n \n-        self.assertEqual(r[\'alpha\'].readFile(\'foo.txt\'), \'foo\')\n+        self.assertEqual(r[\'alpha\'].readFile(\'foo.txt\'), b\'foo\')\n \n     def test_rename_exists(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n-        r.writeFile(\'foo.txt\', \'bar\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n+        r.writeFile(\'foo.txt\', b\'bar\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -239,12 +239,12 @@ def test_rename_exists(self):\n         self.assertEqual(info[\'oldParent\'], \'/\')\n         self.assertEqual(info[\'newParent\'], \'/\')\n \n-        self.assertEqual(r.readFile(\'foo.txt\'), \'bar\')\n+        self.assertEqual(r.readFile(\'foo.txt\'), b\'bar\')\n \n     def test_delete(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -261,7 +261,7 @@ def test_delete_subfolder(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -291,7 +291,7 @@ def test_move(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -303,14 +303,14 @@ def test_move(self):\n         self.assertEqual(info[\'newPath\'], \'/alpha/test.txt\')\n \n         self.assertFalse(\'test.txt\' in r)\n-        self.assertEqual(\'foo\', r[\'alpha\'].readFile(\'test.txt\'))\n+        self.assertEqual(b\'foo\', r[\'alpha\'].readFile(\'test.txt\'))\n \n     def test_move_exists(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n         r.makeDirectory(\'alpha\')\n-        r[\'alpha\'].writeFile(\'test.txt\', \'bar\')\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r[\'alpha\'].writeFile(\'test.txt\', b\'bar\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -322,12 +322,12 @@ def test_move_exists(self):\n         self.assertEqual(info[\'newPath\'], \'/alpha/test.txt\')\n \n         self.assertTrue(\'test.txt\' in r)\n-        self.assertEqual(\'bar\', r[\'alpha\'].readFile(\'test.txt\'))\n+        self.assertEqual(b\'bar\', r[\'alpha\'].readFile(\'test.txt\'))\n \n     def test_move_invalid_parent(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n \n@@ -343,7 +343,7 @@ def test_move_invalid_parent(self):\n     def test_download(self):\n         from plone.resourceeditor.browser import FileManagerActions\n         r = self._make_directory()\n-        r.writeFile(\'test.txt\', \'foo\')\n+        r.writeFile(\'test.txt\', b\'foo\')\n \n         view = FileManagerActions(r, self.layer[\'request\'])\n-        self.assertEqual(\'foo\', view.download(\'/test.txt\'))\n+        self.assertEqual(b\'foo\', view.download(\'/test.txt\'))\ndiff --git a/setup.py b/setup.py\nindex 3af9436..cea732f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,9 +15,12 @@\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.0",\n         "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         ],\n     keywords=\'ace resource editor\',\n     author=\'Plone Foundation\',\n'

