Repository: plone.app.registry


Branch: refs/heads/master
Date: 2019-01-05T22:15:37+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.registry/commit/95f125233d7bd6fbae905af2bc3f7f953f5280d6

feat: fix some deprecation warnings

Files changed:
M CHANGES.rst
M plone/app/registry/tests/test_exportimport.py
M plone/app/registry/tests/test_setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex da71ca1..332f575 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,8 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n-\n+- Fix some deprecation warnings.\n+  [gforcada]\n \n 1.7.2 (2018-06-19)\n ------------------\ndiff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py\nindex c817341..8a97391 100644\n--- a/plone/app/registry/tests/test_exportimport.py\n+++ b/plone/app/registry/tests/test_exportimport.py\n@@ -100,7 +100,7 @@ def test_empty_import_no_purge(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n+        self.assertEqual(1, len(self.registry.records))\n \n     def test_import_purge(self):\n \n@@ -113,7 +113,7 @@ def test_import_purge(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_import_records(self):\n         xml = """\\\n@@ -129,13 +129,13 @@ def test_import_records(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(3, len(self.registry.records))\n+        self.assertEqual(3, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettings.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettings.name\', self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettings.age\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettings.age\', self.registry\n         )\n \n     def test_import_records_disallowed(self):\n@@ -174,14 +174,14 @@ def test_import_records_omit(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(3, len(self.registry.records))\n+        self.assertEqual(3, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettingsDisallowed.name\' in\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettingsDisallowed.name\',\n             self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettingsDisallowed.age\' in\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettingsDisallowed.age\',\n             self.registry\n         )\n \n@@ -196,7 +196,7 @@ def test_import_records_remove(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n         delete_xml = """\\\n <registry>\n     <records interface="plone.app.registry.tests.data.ITestSettings" remove="true"/>\n@@ -207,7 +207,7 @@ def test_import_records_remove(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_import_records_delete_deprecated(self):\n         xml = """\\\n@@ -220,7 +220,7 @@ def test_import_records_delete_deprecated(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n         delete_xml = """\\\n <registry>\n     <records interface="plone.app.registry.tests.data.ITestSettings" delete="true"/>\n@@ -231,7 +231,7 @@ def test_import_records_delete_deprecated(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_import_records_remove_with_omit(self):\n         xml = """\\\n@@ -244,7 +244,7 @@ def test_import_records_remove_with_omit(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n         delete_xml = """\\\n <registry>\n     <records interface="plone.app.registry.tests.data.ITestSettings" remove="true">\n@@ -257,13 +257,13 @@ def test_import_records_remove_with_omit(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n+        self.assertEqual(1, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettings.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettings.name\', self.registry\n         )\n-        self.failIf(\n-            \'plone.app.registry.tests.data.ITestSettings.age\' in self.registry\n+        self.assertNotIn(\n+            \'plone.app.registry.tests.data.ITestSettings.age\', self.registry\n         )\n \n     def test_import_records_remove_with_value(self):\n@@ -277,7 +277,7 @@ def test_import_records_remove_with_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n         delete_xml = """\\\n <registry>\n     <records interface="plone.app.registry.tests.data.ITestSettings" remove="true">\n@@ -290,7 +290,7 @@ def test_import_records_remove_with_value(self):\n \n         self.assertRaises(ValueError, importRegistry, context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n \n     def test_import_records_with_prefix(self):\n         xml = """\\\n@@ -303,13 +303,13 @@ def test_import_records_with_prefix(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.age\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n         )\n \n     def test_import_records_with_values(self):\n@@ -326,13 +326,13 @@ def test_import_records_with_values(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.age\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n         )\n \n         self.assertEqual(\n@@ -383,12 +383,12 @@ def test_import_value_only(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Imported value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -410,12 +410,12 @@ def test_import_value_only_condition_installed(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Sample value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -437,12 +437,12 @@ def test_import_value_only_condition_have(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Imported value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -464,12 +464,12 @@ def test_import_value_only_condition_not_have(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Sample value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -487,12 +487,12 @@ def test_import_interface_and_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Age",\n             self.registry.records[\'plone.app.registry.tests.data.ITestSettingsDisallowed.age\'].field.title  # noqa\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             2,\n             self.registry[\'plone.app.registry.tests.data.ITestSettingsDisallowed.age\']  # noqa\n         )\n@@ -510,12 +510,12 @@ def test_import_interface_with_differnet_name(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Age",\n             self.registry.records[\'plone.registry.oops\'].field.title\n         )\n-        self.assertEquals(2, self.registry[\'plone.registry.oops\'])\n+        self.assertEqual(2, self.registry[\'plone.registry.oops\'])\n \n     def test_import_interface_no_value(self):\n         xml = """\\\n@@ -528,12 +528,12 @@ def test_import_interface_no_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Name",\n             self.registry.records[\'plone.app.registry.tests.data.ITestSettingsDisallowed.name\'].field.title  # noqa\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Mr. Registry",\n             self.registry[\'plone.app.registry.tests.data.ITestSettingsDisallowed.name\']  # noqa\n         )\n@@ -554,21 +554,21 @@ def test_import_field_only(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.TextLine)\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"value",\n             self.registry.records[\'test.registry.field\'].field.__name__\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"N/A",\n             self.registry[\'test.registry.field\']\n         )\n@@ -591,20 +591,20 @@ def test_import_field_ref(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(2, len(self.registry.records))\n+        self.assertTrue(\n             IFieldRef.providedBy(\n                 self.registry.records[\'test.registry.field.override\'].field)\n             )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field.override\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"value",\n             self.registry.records[\'test.registry.field.override\'].field.__name__  # noqa\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Another value",\n             self.registry[\'test.registry.field.override\']\n         )\n@@ -625,18 +625,18 @@ def test_import_field_and_interface(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.ASCIILine\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             "N/A",\n             self.registry[\'test.registry.field\']\n         )\n@@ -662,17 +662,17 @@ def test_import_overwrite_field_with_field(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.ASCIILine)\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             "Nada",\n             self.registry[\'test.registry.field\']\n         )\n@@ -693,18 +693,18 @@ def test_import_overwrite_field_with_interface(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Int\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Age",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             None,\n             self.registry[\'test.registry.field\']\n         )\n@@ -736,18 +736,18 @@ def test_import_collection_field(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.FrozenSet\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             frozenset([1, 3]),\n             self.registry[\'test.registry.field\']\n         )\n@@ -777,18 +777,18 @@ def test_import_collection_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Set\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             frozenset([4, 6]),\n             self.registry[\'test.registry.field\']\n         )\n@@ -818,18 +818,18 @@ def test_import_collection_nopurge(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Set\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             frozenset([1, 4, 6]),\n             self.registry[\'test.registry.field\']\n         )\n@@ -859,8 +859,8 @@ def test_import_collection_list_append(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals([2, 4, 6], self.registry[\'test.registry.field\'])\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual([2, 4, 6], self.registry[\'test.registry.field\'])\n \n     def test_import_collection_tuple_append(self):\n         xml = """\\\n@@ -887,8 +887,8 @@ def test_import_collection_tuple_append(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             (u"a", u"b", u"c", ),\n             self.registry[\'test.registry.field\']\n         )\n@@ -918,8 +918,8 @@ def test_import_collection_set_append(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(set([2, 4, 6]), self.registry[\'test.registry.field\'])\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(set([2, 4, 6]), self.registry[\'test.registry.field\'])\n \n     def test_import_collection_frozenset_append(self):\n         xml = """\\\n@@ -946,8 +946,8 @@ def test_import_collection_frozenset_append(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             frozenset([2, 4, 6]),\n             self.registry[\'test.registry.field\']\n         )\n@@ -982,18 +982,18 @@ def test_import_dict_field(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Dict\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'a\': 1, \'b\': 3},\n             self.registry[\'test.registry.field\']\n         )\n@@ -1021,18 +1021,18 @@ def test_import_dict_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Dict\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'x\': 4, \'y\': 6},\n             self.registry[\'test.registry.field\']\n         )\n@@ -1060,18 +1060,18 @@ def test_import_dict_nopurge(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Dict\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'a\': 1, \'x\': 4, \'y\': 6},\n             self.registry[\'test.registry.field\']\n         )\n@@ -1100,22 +1100,22 @@ def test_import_choice_field(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Choice\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record", self.registry.records[\'test.registry.field\'].\n             field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             [u\'One\', u\'Two\'],\n             [t.value for t in self.registry.records[\'test.registry.field\'].field.vocabulary]  # noqa\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             None, self.registry[\'test.registry.field\']\n         )\n \n@@ -1142,32 +1142,32 @@ def test_import_with_comments(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(3, len(self.registry.records))\n+        self.assertEqual(3, len(self.registry.records))\n \n-        self.failUnless(\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.TextLine\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"value",\n             self.registry.records[\'test.registry.field\'].field.__name__\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"N/A",\n             self.registry[\'test.registry.field\']\n         )\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.age\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n         )\n         self.assertEqual(\n             self.registry[\'plone.app.registry.tests.data.SomethingElse.name\'],\n@@ -1192,7 +1192,7 @@ def test_remove(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_delete_deprecated(self):\n         xml = """\\\n@@ -1208,7 +1208,7 @@ def test_delete_deprecated(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_delete_not_found(self):\n         xml = """\\\n@@ -1224,12 +1224,12 @@ def test_delete_not_found(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Sample value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -1279,24 +1279,24 @@ def test_import_folder(self):\n         }\n         importRegistry(context)\n \n-        self.assertEquals(3, len(self.registry.records))\n+        self.assertEqual(3, len(self.registry.records))\n \n         for idx in range(1, 4):\n             fieldname = \'test.registry.foobar%i\' % idx\n-            self.failUnless(\n+            self.assertTrue(\n                 isinstance(\n                     self.registry.records[fieldname].field,\n                     field.TextLine)\n             )\n-            self.assertEquals(\n+            self.assertEqual(\n                 u"Simple record",\n                 self.registry.records[fieldname].field.title\n             )\n-            self.assertEquals(\n+            self.assertEqual(\n                 u"value",\n                 self.registry.records[fieldname].field.__name__\n             )\n-            self.assertEquals(\n+            self.assertEqual(\n                 u"N/A",\n                 self.registry[fieldname]\n             )\n@@ -1310,7 +1310,7 @@ def test_export_empty(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_simple(self):\n@@ -1333,7 +1333,7 @@ def test_export_simple(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_interface(self):\n@@ -1371,7 +1371,7 @@ def test_export_with_interface(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_field_ref(self):\n@@ -1402,7 +1402,7 @@ def test_export_field_ref(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_collection(self):\n@@ -1432,7 +1432,7 @@ def test_export_with_collection(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_dict(self):\n@@ -1465,7 +1465,7 @@ def test_export_with_dict(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_choice(self):\n@@ -1488,7 +1488,7 @@ def test_export_with_choice(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_missing_schema_does_not_error(self):\n@@ -1521,5 +1521,5 @@ def test_export_with_missing_schema_does_not_error(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\ndiff --git a/plone/app/registry/tests/test_setup.py b/plone/app/registry/tests/test_setup.py\nindex 3159832..6dc0a53 100644\n--- a/plone/app/registry/tests/test_setup.py\n+++ b/plone/app/registry/tests/test_setup.py\n@@ -14,11 +14,11 @@ def test_tool_installed(self):\n \n         portal = self.layer[\'portal\']\n \n-        self.failUnless(\'portal_registry\' in portal.objectIds())\n-        self.failUnless(IRegistry.providedBy(portal.portal_registry))\n+        self.assertIn(\'portal_registry\', portal.objectIds())\n+        self.assertTrue(IRegistry.providedBy(portal.portal_registry))\n \n     def test_local_utility_installed(self):\n         portal = self.layer[\'portal\']\n \n         registry = getUtility(IRegistry)\n-        self.failUnless(aq_base(registry) is aq_base(portal.portal_registry))\n+        self.assertTrue(aq_base(registry) is aq_base(portal.portal_registry))\n'

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2019-02-07T16:18:16+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.registry/commit/4128c6a847fd86b10e42ca34940875580651e940

Merge pull request #32 from plone/gforcada-fix-warnings

feat: fix some deprecation warnings

Files changed:
M CHANGES.rst
M plone/app/registry/tests/test_exportimport.py
M plone/app/registry/tests/test_setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex da71ca1..332f575 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,8 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n-\n+- Fix some deprecation warnings.\n+  [gforcada]\n \n 1.7.2 (2018-06-19)\n ------------------\ndiff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py\nindex c817341..8a97391 100644\n--- a/plone/app/registry/tests/test_exportimport.py\n+++ b/plone/app/registry/tests/test_exportimport.py\n@@ -100,7 +100,7 @@ def test_empty_import_no_purge(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n+        self.assertEqual(1, len(self.registry.records))\n \n     def test_import_purge(self):\n \n@@ -113,7 +113,7 @@ def test_import_purge(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_import_records(self):\n         xml = """\\\n@@ -129,13 +129,13 @@ def test_import_records(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(3, len(self.registry.records))\n+        self.assertEqual(3, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettings.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettings.name\', self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettings.age\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettings.age\', self.registry\n         )\n \n     def test_import_records_disallowed(self):\n@@ -174,14 +174,14 @@ def test_import_records_omit(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(3, len(self.registry.records))\n+        self.assertEqual(3, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettingsDisallowed.name\' in\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettingsDisallowed.name\',\n             self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettingsDisallowed.age\' in\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettingsDisallowed.age\',\n             self.registry\n         )\n \n@@ -196,7 +196,7 @@ def test_import_records_remove(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n         delete_xml = """\\\n <registry>\n     <records interface="plone.app.registry.tests.data.ITestSettings" remove="true"/>\n@@ -207,7 +207,7 @@ def test_import_records_remove(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_import_records_delete_deprecated(self):\n         xml = """\\\n@@ -220,7 +220,7 @@ def test_import_records_delete_deprecated(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n         delete_xml = """\\\n <registry>\n     <records interface="plone.app.registry.tests.data.ITestSettings" delete="true"/>\n@@ -231,7 +231,7 @@ def test_import_records_delete_deprecated(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_import_records_remove_with_omit(self):\n         xml = """\\\n@@ -244,7 +244,7 @@ def test_import_records_remove_with_omit(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n         delete_xml = """\\\n <registry>\n     <records interface="plone.app.registry.tests.data.ITestSettings" remove="true">\n@@ -257,13 +257,13 @@ def test_import_records_remove_with_omit(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n+        self.assertEqual(1, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.ITestSettings.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.ITestSettings.name\', self.registry\n         )\n-        self.failIf(\n-            \'plone.app.registry.tests.data.ITestSettings.age\' in self.registry\n+        self.assertNotIn(\n+            \'plone.app.registry.tests.data.ITestSettings.age\', self.registry\n         )\n \n     def test_import_records_remove_with_value(self):\n@@ -277,7 +277,7 @@ def test_import_records_remove_with_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n         delete_xml = """\\\n <registry>\n     <records interface="plone.app.registry.tests.data.ITestSettings" remove="true">\n@@ -290,7 +290,7 @@ def test_import_records_remove_with_value(self):\n \n         self.assertRaises(ValueError, importRegistry, context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n \n     def test_import_records_with_prefix(self):\n         xml = """\\\n@@ -303,13 +303,13 @@ def test_import_records_with_prefix(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.age\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n         )\n \n     def test_import_records_with_values(self):\n@@ -326,13 +326,13 @@ def test_import_records_with_values(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n+        self.assertEqual(2, len(self.registry.records))\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.age\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n         )\n \n         self.assertEqual(\n@@ -383,12 +383,12 @@ def test_import_value_only(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Imported value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -410,12 +410,12 @@ def test_import_value_only_condition_installed(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Sample value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -437,12 +437,12 @@ def test_import_value_only_condition_have(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Imported value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -464,12 +464,12 @@ def test_import_value_only_condition_not_have(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Sample value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -487,12 +487,12 @@ def test_import_interface_and_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Age",\n             self.registry.records[\'plone.app.registry.tests.data.ITestSettingsDisallowed.age\'].field.title  # noqa\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             2,\n             self.registry[\'plone.app.registry.tests.data.ITestSettingsDisallowed.age\']  # noqa\n         )\n@@ -510,12 +510,12 @@ def test_import_interface_with_differnet_name(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Age",\n             self.registry.records[\'plone.registry.oops\'].field.title\n         )\n-        self.assertEquals(2, self.registry[\'plone.registry.oops\'])\n+        self.assertEqual(2, self.registry[\'plone.registry.oops\'])\n \n     def test_import_interface_no_value(self):\n         xml = """\\\n@@ -528,12 +528,12 @@ def test_import_interface_no_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Name",\n             self.registry.records[\'plone.app.registry.tests.data.ITestSettingsDisallowed.name\'].field.title  # noqa\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Mr. Registry",\n             self.registry[\'plone.app.registry.tests.data.ITestSettingsDisallowed.name\']  # noqa\n         )\n@@ -554,21 +554,21 @@ def test_import_field_only(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.TextLine)\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"value",\n             self.registry.records[\'test.registry.field\'].field.__name__\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"N/A",\n             self.registry[\'test.registry.field\']\n         )\n@@ -591,20 +591,20 @@ def test_import_field_ref(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(2, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(2, len(self.registry.records))\n+        self.assertTrue(\n             IFieldRef.providedBy(\n                 self.registry.records[\'test.registry.field.override\'].field)\n             )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field.override\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"value",\n             self.registry.records[\'test.registry.field.override\'].field.__name__  # noqa\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Another value",\n             self.registry[\'test.registry.field.override\']\n         )\n@@ -625,18 +625,18 @@ def test_import_field_and_interface(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.ASCIILine\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             "N/A",\n             self.registry[\'test.registry.field\']\n         )\n@@ -662,17 +662,17 @@ def test_import_overwrite_field_with_field(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.ASCIILine)\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             "Nada",\n             self.registry[\'test.registry.field\']\n         )\n@@ -693,18 +693,18 @@ def test_import_overwrite_field_with_interface(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Int\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Age",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             None,\n             self.registry[\'test.registry.field\']\n         )\n@@ -736,18 +736,18 @@ def test_import_collection_field(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.FrozenSet\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             frozenset([1, 3]),\n             self.registry[\'test.registry.field\']\n         )\n@@ -777,18 +777,18 @@ def test_import_collection_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Set\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             frozenset([4, 6]),\n             self.registry[\'test.registry.field\']\n         )\n@@ -818,18 +818,18 @@ def test_import_collection_nopurge(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Set\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             frozenset([1, 4, 6]),\n             self.registry[\'test.registry.field\']\n         )\n@@ -859,8 +859,8 @@ def test_import_collection_list_append(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals([2, 4, 6], self.registry[\'test.registry.field\'])\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual([2, 4, 6], self.registry[\'test.registry.field\'])\n \n     def test_import_collection_tuple_append(self):\n         xml = """\\\n@@ -887,8 +887,8 @@ def test_import_collection_tuple_append(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             (u"a", u"b", u"c", ),\n             self.registry[\'test.registry.field\']\n         )\n@@ -918,8 +918,8 @@ def test_import_collection_set_append(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(set([2, 4, 6]), self.registry[\'test.registry.field\'])\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(set([2, 4, 6]), self.registry[\'test.registry.field\'])\n \n     def test_import_collection_frozenset_append(self):\n         xml = """\\\n@@ -946,8 +946,8 @@ def test_import_collection_frozenset_append(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             frozenset([2, 4, 6]),\n             self.registry[\'test.registry.field\']\n         )\n@@ -982,18 +982,18 @@ def test_import_dict_field(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Dict\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'a\': 1, \'b\': 3},\n             self.registry[\'test.registry.field\']\n         )\n@@ -1021,18 +1021,18 @@ def test_import_dict_value(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Dict\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'x\': 4, \'y\': 6},\n             self.registry[\'test.registry.field\']\n         )\n@@ -1060,18 +1060,18 @@ def test_import_dict_nopurge(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Dict\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             {\'a\': 1, \'x\': 4, \'y\': 6},\n             self.registry[\'test.registry.field\']\n         )\n@@ -1100,22 +1100,22 @@ def test_import_choice_field(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.failUnless(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.Choice\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record", self.registry.records[\'test.registry.field\'].\n             field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             [u\'One\', u\'Two\'],\n             [t.value for t in self.registry.records[\'test.registry.field\'].field.vocabulary]  # noqa\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             None, self.registry[\'test.registry.field\']\n         )\n \n@@ -1142,32 +1142,32 @@ def test_import_with_comments(self):\n \n         importRegistry(context)\n \n-        self.assertEquals(3, len(self.registry.records))\n+        self.assertEqual(3, len(self.registry.records))\n \n-        self.failUnless(\n+        self.assertTrue(\n             isinstance(\n                 self.registry.records[\'test.registry.field\'].field,\n                 field.TextLine\n             )\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.registry.field\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"value",\n             self.registry.records[\'test.registry.field\'].field.__name__\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"N/A",\n             self.registry[\'test.registry.field\']\n         )\n \n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.name\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.name\', self.registry\n         )\n-        self.failUnless(\n-            \'plone.app.registry.tests.data.SomethingElse.age\' in self.registry\n+        self.assertIn(\n+            \'plone.app.registry.tests.data.SomethingElse.age\', self.registry\n         )\n         self.assertEqual(\n             self.registry[\'plone.app.registry.tests.data.SomethingElse.name\'],\n@@ -1192,7 +1192,7 @@ def test_remove(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_delete_deprecated(self):\n         xml = """\\\n@@ -1208,7 +1208,7 @@ def test_delete_deprecated(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(0, len(self.registry.records))\n+        self.assertEqual(0, len(self.registry.records))\n \n     def test_delete_not_found(self):\n         xml = """\\\n@@ -1224,12 +1224,12 @@ def test_delete_not_found(self):\n                    value=u"Sample value")\n         importRegistry(context)\n \n-        self.assertEquals(1, len(self.registry.records))\n-        self.assertEquals(\n+        self.assertEqual(1, len(self.registry.records))\n+        self.assertEqual(\n             u"Simple record",\n             self.registry.records[\'test.export.simple\'].field.title\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             u"Sample value",\n             self.registry[\'test.export.simple\']\n         )\n@@ -1279,24 +1279,24 @@ def test_import_folder(self):\n         }\n         importRegistry(context)\n \n-        self.assertEquals(3, len(self.registry.records))\n+        self.assertEqual(3, len(self.registry.records))\n \n         for idx in range(1, 4):\n             fieldname = \'test.registry.foobar%i\' % idx\n-            self.failUnless(\n+            self.assertTrue(\n                 isinstance(\n                     self.registry.records[fieldname].field,\n                     field.TextLine)\n             )\n-            self.assertEquals(\n+            self.assertEqual(\n                 u"Simple record",\n                 self.registry.records[fieldname].field.title\n             )\n-            self.assertEquals(\n+            self.assertEqual(\n                 u"value",\n                 self.registry.records[fieldname].field.__name__\n             )\n-            self.assertEquals(\n+            self.assertEqual(\n                 u"N/A",\n                 self.registry[fieldname]\n             )\n@@ -1310,7 +1310,7 @@ def test_export_empty(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_simple(self):\n@@ -1333,7 +1333,7 @@ def test_export_simple(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_interface(self):\n@@ -1371,7 +1371,7 @@ def test_export_with_interface(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_field_ref(self):\n@@ -1402,7 +1402,7 @@ def test_export_field_ref(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_collection(self):\n@@ -1432,7 +1432,7 @@ def test_export_with_collection(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_dict(self):\n@@ -1465,7 +1465,7 @@ def test_export_with_dict(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_choice(self):\n@@ -1488,7 +1488,7 @@ def test_export_with_choice(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\n \n     def test_export_with_missing_schema_does_not_error(self):\n@@ -1521,5 +1521,5 @@ def test_export_with_missing_schema_does_not_error(self):\n         context = DummyExportContext(self.site)\n         exportRegistry(context)\n \n-        self.assertEquals(\'registry.xml\', context._wrote[0][0])\n+        self.assertEqual(\'registry.xml\', context._wrote[0][0])\n         self.assertXmlEquals(xml, context._wrote[0][1])\ndiff --git a/plone/app/registry/tests/test_setup.py b/plone/app/registry/tests/test_setup.py\nindex 3159832..6dc0a53 100644\n--- a/plone/app/registry/tests/test_setup.py\n+++ b/plone/app/registry/tests/test_setup.py\n@@ -14,11 +14,11 @@ def test_tool_installed(self):\n \n         portal = self.layer[\'portal\']\n \n-        self.failUnless(\'portal_registry\' in portal.objectIds())\n-        self.failUnless(IRegistry.providedBy(portal.portal_registry))\n+        self.assertIn(\'portal_registry\', portal.objectIds())\n+        self.assertTrue(IRegistry.providedBy(portal.portal_registry))\n \n     def test_local_utility_installed(self):\n         portal = self.layer[\'portal\']\n \n         registry = getUtility(IRegistry)\n-        self.failUnless(aq_base(registry) is aq_base(portal.portal_registry))\n+        self.assertTrue(aq_base(registry) is aq_base(portal.portal_registry))\n'

