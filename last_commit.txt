Repository: plone.folder


Branch: refs/heads/master
Date: 2018-04-03T12:11:22+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/77fb827cccdfddc48ec8b5f7d787fc0653852565

Remove ancient buildout config

Files changed:
M CHANGES.rst
D bootstrap.py
D buildout.cfg
D var/README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index ba3a1fb..8bdd627 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Remove ancient buildout config
+  [tomgross]
 
 
 1.0.10 (2018-01-30)
diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index da4e8e5..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,125 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Corporation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-
-$Id: bootstrap.py 105417 2009-11-01 15:15:20Z tarek $
-"""
-
-import os, shutil, sys, tempfile, urllib2
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
-
-is_jython = sys.platform.startswith('java')
-
-# parsing arguments
-parser = OptionParser()
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="distribute", default=False,
-                   help="Use Disribute rather than Setuptools.")
-
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
-
-options, args = parser.parse_args()
-
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args += ['-c', options.config_file]
-
-if options.version is not None:
-    VERSION = '==%s' % options.version
-else:
-    VERSION = ''
-
-USE_DISTRIBUTE = options.distribute
-args = args + ['bootstrap']
-
-to_reload = False
-try:
-    import pkg_resources
-    if not hasattr(pkg_resources, '_distribute'):
-        to_reload = True
-        raise ImportError
-except ImportError:
-    ez = {}
-    if USE_DISTRIBUTE:
-        exec urllib2.urlopen('http://python-distribute.org/distribute_setup.py'
-                         ).read() in ez
-        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0, no_fake=True)
-    else:
-        exec urllib2.urlopen('http://peak.telecommunity.com/dist/ez_setup.py'
-                             ).read() in ez
-        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0)
-
-    if to_reload:
-        reload_module(pkg_resources)
-    else:
-        import pkg_resources
-
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    def quote (c):
-        return c
-
-cmd = 'from setuptools.command.easy_install import main; main()'
-ws  = pkg_resources.working_set
-
-if USE_DISTRIBUTE:
-    requirement = 'distribute'
-else:
-    requirement = 'setuptools'
-
-if is_jython:
-    import subprocess
-
-    assert subprocess.Popen([sys.executable] + ['-c', quote(cmd), '-mqNxd',
-           quote(tmpeggs), 'zc.buildout' + VERSION],
-           env=dict(os.environ,
-               PYTHONPATH=
-               ws.find(pkg_resources.Requirement.parse(requirement)).location
-               ),
-           ).wait() == 0
-
-else:
-    assert os.spawnle(
-        os.P_WAIT, sys.executable, quote (sys.executable),
-        '-c', quote (cmd), '-mqNxd', quote (tmpeggs), 'zc.buildout' + VERSION,
-        dict(os.environ,
-            PYTHONPATH=
-            ws.find(pkg_resources.Requirement.parse(requirement)).location
-            ),
-        ) == 0
-
-ws.add_entry(tmpeggs)
-ws.require('zc.buildout' + VERSION)
-import zc.buildout.buildout
-
-from six.moves import reload_module
-
-
-zc.buildout.buildout.main(args)
-shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
deleted file mode 100644
index 95e7c5c..0000000
--- a/buildout.cfg
+++ /dev/null
@@ -1,11 +0,0 @@
-[buildout]
-extends = http://svn.plone.org/svn/collective/buildout/plonetest/test-3.x.cfg
-package-name = plone.folder
-
-# don't pull in all of plone, we just need zope itself...
-[instance]
-eggs = plone.folder
-zcml = plone.folder
-
-[test]
-eggs = plone.folder [test]
diff --git a/var/README.txt b/var/README.txt
deleted file mode 100644
index 5a2a586..0000000
--- a/var/README.txt
+++ /dev/null
@@ -1 +0,0 @@
-This directory contains the Data.fs ZODB data storage, and other runtime files


Repository: plone.folder


Branch: refs/heads/master
Date: 2018-04-03T12:12:35+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/2a533b801c2dc9b22ee1f6cc2ba77f1735c5f437

Imporve logging in case ordered index is not consistent

Files changed:
M CHANGES.rst
M src/plone/folder/default.py
M src/plone/folder/tests/test_ordersupport.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8bdd627..a5b5790 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Improve logging in case ordered index is not consistent
+  [tomgross]
 
 Bug fixes:
 
diff --git a/src/plone/folder/default.py b/src/plone/folder/default.py
index 30c2c83..c7ad8d7 100644
--- a/src/plone/folder/default.py
+++ b/src/plone/folder/default.py
@@ -147,7 +147,8 @@ def getObjectPosition(self, obj_id):
         pos = self._pos()
         if obj_id in pos:
             return pos[obj_id]
-        raise ValueError('No object with id "{0:s}" exists.'.format(obj_id))
+        raise ValueError('No object with id "{0:s}" exists in "{1:s}".'.format(
+            obj_id, '/'.join(self.context.getPhysicalPath())))
 
     def idsInOrder(self):
         """ see interfaces.py """
diff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py
index 721afa7..55d82a2 100644
--- a/src/plone/folder/tests/test_ordersupport.py
+++ b/src/plone/folder/tests/test_ordersupport.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from OFS.Traversable import Traversable
 from plone.folder.interfaces import IOrdering
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING
@@ -8,13 +9,17 @@
 import unittest
 
 
+class TestFolder(OrderedBTreeFolderBase, Traversable):
+    """ """
+
+
 class OFSOrderSupportTests(unittest.TestCase):
     """ tests borrowed from OFS.tests.testOrderSupport """
 
     layer = PLONEFOLDER_INTEGRATION_TESTING
 
     def create(self):
-        folder = OrderedBTreeFolderBase('f1')
+        folder = TestFolder('f1')
         folder['o1'] = DummyObject('o1', 'mt1')
         folder['o2'] = DummyObject('o2', 'mt2')
         folder['o3'] = DummyObject('o3', 'mt1')
@@ -181,6 +186,15 @@ def test_moveObjectToPosition(self):
               )
             )
 
+    def test_getObjectPosition_error_message(self):
+        folder = self.create()
+        try:
+            folder.getObjectPosition('n4')
+            self.assertFail()
+        except ValueError as err:
+            self.assertEqual(
+                err.message, 'No object with id "n4" exists in "f1".')
+
 
 class PloneOrderSupportTests(unittest.TestCase):
     """ tests borrowed from Products.CMFPlone.tests.testOrderSupport """


Repository: plone.folder


Branch: refs/heads/master
Date: 2018-04-03T13:21:25+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/3ca95fa198ba28fe8ab8fa63a81b19a5be0236c9

Api method 'getId' is needed in test folder class

Files changed:
M src/plone/folder/tests/test_ordersupport.py

diff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py
index 55d82a2..d83652e 100644
--- a/src/plone/folder/tests/test_ordersupport.py
+++ b/src/plone/folder/tests/test_ordersupport.py
@@ -12,6 +12,9 @@
 class TestFolder(OrderedBTreeFolderBase, Traversable):
     """ """
 
+    def getId(self):
+        return self.id
+
 
 class OFSOrderSupportTests(unittest.TestCase):
     """ tests borrowed from OFS.tests.testOrderSupport """
@@ -193,7 +196,7 @@ def test_getObjectPosition_error_message(self):
             self.assertFail()
         except ValueError as err:
             self.assertEqual(
-                err.message, 'No object with id "n4" exists in "f1".')
+                str(err), 'No object with id "n4" exists in "f1".')
 
 
 class PloneOrderSupportTests(unittest.TestCase):


Repository: plone.folder


Branch: refs/heads/master
Date: 2018-04-03T13:23:06+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/4dd064f700b9bfae7ba83c27dccf5ce484b50411

failUnless -&gt; assertTrue

Files changed:
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_ordering_adapters.py
M src/plone/folder/tests/test_partialordering.py
M src/plone/folder/tests/test_unorderedordering.py
M src/plone/folder/tests/test_webdav.py

diff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py
index 0bd1aaa..2035202 100644
--- a/src/plone/folder/tests/test_dict_interface.py
+++ b/src/plone/folder/tests/test_dict_interface.py
@@ -30,8 +30,8 @@ def test_contains(self):
         folder = OrderedBTreeFolderBase("f1")
         folder._setOb('foo', DummyObject('foo'))
         folder._setOb('bar', DummyObject('bar'))
-        self.failUnless('foo' in folder)
-        self.failUnless('bar' in folder)
+        self.assertTrue('foo' in folder)
+        self.assertTrue('bar' in folder)
 
     def test_delitem(self):
         folder = OrderedBTreeFolderBase("f1")
diff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py
index b0a894e..da00163 100644
--- a/src/plone/folder/tests/test_integration.py
+++ b/src/plone/folder/tests/test_integration.py
@@ -30,5 +30,5 @@ def testExportDoesntIncludeParent(self):
         # now let's export to a buffer and check the objects...
         exp = StringIO()
         self.app._p_jar.exportFile(foo.bar._p_oid, exp)
-        self.failUnless('bar' in exp.getvalue())
+        self.assertTrue('bar' in exp.getvalue())
         self.failIf('foo' in exp.getvalue())
diff --git a/src/plone/folder/tests/test_ordering_adapters.py b/src/plone/folder/tests/test_ordering_adapters.py
index 6a34225..3efe323 100644
--- a/src/plone/folder/tests/test_ordering_adapters.py
+++ b/src/plone/folder/tests/test_ordering_adapters.py
@@ -15,24 +15,24 @@ class OrderingAdapterTests(unittest.TestCase):
 
     def testDefaultAdapter(self):
         folder = OrderedBTreeFolderBase()
-        self.failUnless(isinstance(folder.getOrdering(), DefaultOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))
 
     def testUnorderedOrdering(self):
         folder = OrderedBTreeFolderBase()
         folder._ordering = 'unordered'
-        self.failUnless(isinstance(folder.getOrdering(), UnorderedOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), UnorderedOrdering))
 
     def testUnknownOrdering(self):
         folder = OrderedBTreeFolderBase()
         folder._ordering = 'foo'
-        self.failUnless(isinstance(folder.getOrdering(), DefaultOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))
 
     def testSetOrdering(self):
         folder = OrderedBTreeFolderBase()
         folder.setOrdering('unordered')
-        self.failUnless(isinstance(folder.getOrdering(), UnorderedOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), UnorderedOrdering))
         folder.setOrdering()
-        self.failUnless(isinstance(folder.getOrdering(), DefaultOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))
 
     def testSetUnknownOrdering(self):
         folder = OrderedBTreeFolderBase()
diff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py
index e4e26e6..bedb9f3 100644
--- a/src/plone/folder/tests/test_partialordering.py
+++ b/src/plone/folder/tests/test_partialordering.py
@@ -32,7 +32,7 @@ def create(self):
 
     def testAdapter(self):
         container, ordering = self.create()
-        self.failUnless(isinstance(ordering, PartialOrdering))
+        self.assertTrue(isinstance(ordering, PartialOrdering))
 
     def testNotifyAdded(self):
         container, ordering = self.create()
@@ -222,25 +222,25 @@ def testAddObjectChangesOrderInfo(self):
         foo = self.app.foo
         foo['bar23'] = DummyFolder('bar23')
         self.assertEqual(foo.objectIds(), ['bar1', 'bar2', 'bar3', 'bar23'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
 
     def testRemoveObjectChangesOrderInfo(self):
         foo = self.app.foo
         foo._delOb('bar2',)
         self.assertEqual(foo.objectIds(), ['bar1', 'bar3'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
 
     def testMoveObjectChangesOrderInfo(self):
         foo = self.app.foo
         foo.moveObjectsUp(('bar2',))
         self.assertEqual(foo.objectIds(), ['bar2', 'bar1', 'bar3'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
 
     def testOrderObjectsChangesOrderInfo(self):
         foo = self.app.foo
         foo.orderObjects('id', reverse=True)
         self.assertEqual(foo.objectIds(), ['bar3', 'bar2', 'bar1'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
         # Reverse the current ordering.
         foo.orderObjects(reverse=True)
         self.assertEqual(foo.objectIds(), ['bar1', 'bar2', 'bar3'])
@@ -249,7 +249,7 @@ def testOrderObjectsByMethodChangesOrderInfo(self):
         foo = self.app.foo
         foo.orderObjects('dummy_method', reverse=True)
         self.assertEqual(foo.objectIds(), ['bar3', 'bar2', 'bar1'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
         # Reverse the current ordering.
         foo.orderObjects(reverse=True)
         self.assertEqual(foo.objectIds(), ['bar1', 'bar2', 'bar3'])
diff --git a/src/plone/folder/tests/test_unorderedordering.py b/src/plone/folder/tests/test_unorderedordering.py
index d2eab55..bfeb54e 100644
--- a/src/plone/folder/tests/test_unorderedordering.py
+++ b/src/plone/folder/tests/test_unorderedordering.py
@@ -23,7 +23,7 @@ def create(self):
     def testAdapter(self):
         container = self.create()
         ordering = container.getOrdering()
-        self.failUnless(isinstance(ordering, UnorderedOrdering))
+        self.assertTrue(isinstance(ordering, UnorderedOrdering))
 
     def testNotifyAdded(self):
         container = self.create()
diff --git a/src/plone/folder/tests/test_webdav.py b/src/plone/folder/tests/test_webdav.py
index e93e1c0..d764b71 100644
--- a/src/plone/folder/tests/test_webdav.py
+++ b/src/plone/folder/tests/test_webdav.py
@@ -47,4 +47,4 @@ def test_getitem_dav_request(self):
         folder['foo'] = foo
 
         self.assertEquals(folder['foo'], foo)
-        self.failUnless(isinstance(folder['bar'], NullResource))
+        self.assertTrue(isinstance(folder['bar'], NullResource))


Repository: plone.folder


Branch: refs/heads/master
Date: 2018-04-03T13:27:04+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/0c09356c90f5e63bb7976cb0bf2b8c8beab41d06

More deprecated test method fixtures

Files changed:
M CHANGES.rst
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_ordersupport.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a5b5790..06d9ab9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -19,6 +19,9 @@ Bug fixes:
 - Remove ancient buildout config
   [tomgross]
 
+- Replace deprecated testing assertion calls
+  [tomgross]
+
 
 1.0.10 (2018-01-30)
 -------------------
diff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py
index da00163..c4be5bb 100644
--- a/src/plone/folder/tests/test_integration.py
+++ b/src/plone/folder/tests/test_integration.py
@@ -31,4 +31,4 @@ def testExportDoesntIncludeParent(self):
         exp = StringIO()
         self.app._p_jar.exportFile(foo.bar._p_oid, exp)
         self.assertTrue('bar' in exp.getvalue())
-        self.failIf('foo' in exp.getvalue())
+        self.assertFalse('foo' in exp.getvalue())
diff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py
index d83652e..3459260 100644
--- a/src/plone/folder/tests/test_ordersupport.py
+++ b/src/plone/folder/tests/test_ordersupport.py
@@ -94,10 +94,10 @@ def runTableTests(self, methodname, table):
             f = self.create()
             method = getattr(f, methodname)
             if rval == 'ValueError':
-                self.failUnlessRaises(ValueError, method, *args)
+                self.assertRaises(ValueError, method, *args)
             else:
-                self.failUnlessEqual(method(*args), rval)
-            self.failUnlessEqual(f.objectIds(), order)
+                self.assertEqual(method(*args), rval)
+            self.assertEqual(f.objectIds(), order)
 
     def test_moveObjectsUp(self):
         self.runTableTests('moveObjectsUp',


Repository: plone.folder


Branch: refs/heads/master
Date: 2018-04-04T00:33:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.folder/commit/dbd741a1ee823139ff6a5b01e328e0d4b930c3f0

Merge pull request #6 from plone/tomgross-improvelogging

Improve logging

Files changed:
M CHANGES.rst
M src/plone/folder/default.py
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_ordering_adapters.py
M src/plone/folder/tests/test_ordersupport.py
M src/plone/folder/tests/test_partialordering.py
M src/plone/folder/tests/test_unorderedordering.py
M src/plone/folder/tests/test_webdav.py
D bootstrap.py
D buildout.cfg
D var/README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index ba3a1fb..06d9ab9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,11 +11,16 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Improve logging in case ordered index is not consistent
+  [tomgross]
 
 Bug fixes:
 
-- *add item here*
+- Remove ancient buildout config
+  [tomgross]
+
+- Replace deprecated testing assertion calls
+  [tomgross]
 
 
 1.0.10 (2018-01-30)
diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index da4e8e5..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,125 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Corporation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-
-$Id: bootstrap.py 105417 2009-11-01 15:15:20Z tarek $
-"""
-
-import os, shutil, sys, tempfile, urllib2
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
-
-is_jython = sys.platform.startswith('java')
-
-# parsing arguments
-parser = OptionParser()
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="distribute", default=False,
-                   help="Use Disribute rather than Setuptools.")
-
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
-
-options, args = parser.parse_args()
-
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args += ['-c', options.config_file]
-
-if options.version is not None:
-    VERSION = '==%s' % options.version
-else:
-    VERSION = ''
-
-USE_DISTRIBUTE = options.distribute
-args = args + ['bootstrap']
-
-to_reload = False
-try:
-    import pkg_resources
-    if not hasattr(pkg_resources, '_distribute'):
-        to_reload = True
-        raise ImportError
-except ImportError:
-    ez = {}
-    if USE_DISTRIBUTE:
-        exec urllib2.urlopen('http://python-distribute.org/distribute_setup.py'
-                         ).read() in ez
-        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0, no_fake=True)
-    else:
-        exec urllib2.urlopen('http://peak.telecommunity.com/dist/ez_setup.py'
-                             ).read() in ez
-        ez['use_setuptools'](to_dir=tmpeggs, download_delay=0)
-
-    if to_reload:
-        reload_module(pkg_resources)
-    else:
-        import pkg_resources
-
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    def quote (c):
-        return c
-
-cmd = 'from setuptools.command.easy_install import main; main()'
-ws  = pkg_resources.working_set
-
-if USE_DISTRIBUTE:
-    requirement = 'distribute'
-else:
-    requirement = 'setuptools'
-
-if is_jython:
-    import subprocess
-
-    assert subprocess.Popen([sys.executable] + ['-c', quote(cmd), '-mqNxd',
-           quote(tmpeggs), 'zc.buildout' + VERSION],
-           env=dict(os.environ,
-               PYTHONPATH=
-               ws.find(pkg_resources.Requirement.parse(requirement)).location
-               ),
-           ).wait() == 0
-
-else:
-    assert os.spawnle(
-        os.P_WAIT, sys.executable, quote (sys.executable),
-        '-c', quote (cmd), '-mqNxd', quote (tmpeggs), 'zc.buildout' + VERSION,
-        dict(os.environ,
-            PYTHONPATH=
-            ws.find(pkg_resources.Requirement.parse(requirement)).location
-            ),
-        ) == 0
-
-ws.add_entry(tmpeggs)
-ws.require('zc.buildout' + VERSION)
-import zc.buildout.buildout
-
-from six.moves import reload_module
-
-
-zc.buildout.buildout.main(args)
-shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
deleted file mode 100644
index 95e7c5c..0000000
--- a/buildout.cfg
+++ /dev/null
@@ -1,11 +0,0 @@
-[buildout]
-extends = http://svn.plone.org/svn/collective/buildout/plonetest/test-3.x.cfg
-package-name = plone.folder
-
-# don't pull in all of plone, we just need zope itself...
-[instance]
-eggs = plone.folder
-zcml = plone.folder
-
-[test]
-eggs = plone.folder [test]
diff --git a/src/plone/folder/default.py b/src/plone/folder/default.py
index 30c2c83..c7ad8d7 100644
--- a/src/plone/folder/default.py
+++ b/src/plone/folder/default.py
@@ -147,7 +147,8 @@ def getObjectPosition(self, obj_id):
         pos = self._pos()
         if obj_id in pos:
             return pos[obj_id]
-        raise ValueError('No object with id "{0:s}" exists.'.format(obj_id))
+        raise ValueError('No object with id "{0:s}" exists in "{1:s}".'.format(
+            obj_id, '/'.join(self.context.getPhysicalPath())))
 
     def idsInOrder(self):
         """ see interfaces.py """
diff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py
index 0bd1aaa..2035202 100644
--- a/src/plone/folder/tests/test_dict_interface.py
+++ b/src/plone/folder/tests/test_dict_interface.py
@@ -30,8 +30,8 @@ def test_contains(self):
         folder = OrderedBTreeFolderBase("f1")
         folder._setOb('foo', DummyObject('foo'))
         folder._setOb('bar', DummyObject('bar'))
-        self.failUnless('foo' in folder)
-        self.failUnless('bar' in folder)
+        self.assertTrue('foo' in folder)
+        self.assertTrue('bar' in folder)
 
     def test_delitem(self):
         folder = OrderedBTreeFolderBase("f1")
diff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py
index b0a894e..c4be5bb 100644
--- a/src/plone/folder/tests/test_integration.py
+++ b/src/plone/folder/tests/test_integration.py
@@ -30,5 +30,5 @@ def testExportDoesntIncludeParent(self):
         # now let's export to a buffer and check the objects...
         exp = StringIO()
         self.app._p_jar.exportFile(foo.bar._p_oid, exp)
-        self.failUnless('bar' in exp.getvalue())
-        self.failIf('foo' in exp.getvalue())
+        self.assertTrue('bar' in exp.getvalue())
+        self.assertFalse('foo' in exp.getvalue())
diff --git a/src/plone/folder/tests/test_ordering_adapters.py b/src/plone/folder/tests/test_ordering_adapters.py
index 6a34225..3efe323 100644
--- a/src/plone/folder/tests/test_ordering_adapters.py
+++ b/src/plone/folder/tests/test_ordering_adapters.py
@@ -15,24 +15,24 @@ class OrderingAdapterTests(unittest.TestCase):
 
     def testDefaultAdapter(self):
         folder = OrderedBTreeFolderBase()
-        self.failUnless(isinstance(folder.getOrdering(), DefaultOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))
 
     def testUnorderedOrdering(self):
         folder = OrderedBTreeFolderBase()
         folder._ordering = 'unordered'
-        self.failUnless(isinstance(folder.getOrdering(), UnorderedOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), UnorderedOrdering))
 
     def testUnknownOrdering(self):
         folder = OrderedBTreeFolderBase()
         folder._ordering = 'foo'
-        self.failUnless(isinstance(folder.getOrdering(), DefaultOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))
 
     def testSetOrdering(self):
         folder = OrderedBTreeFolderBase()
         folder.setOrdering('unordered')
-        self.failUnless(isinstance(folder.getOrdering(), UnorderedOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), UnorderedOrdering))
         folder.setOrdering()
-        self.failUnless(isinstance(folder.getOrdering(), DefaultOrdering))
+        self.assertTrue(isinstance(folder.getOrdering(), DefaultOrdering))
 
     def testSetUnknownOrdering(self):
         folder = OrderedBTreeFolderBase()
diff --git a/src/plone/folder/tests/test_ordersupport.py b/src/plone/folder/tests/test_ordersupport.py
index 721afa7..3459260 100644
--- a/src/plone/folder/tests/test_ordersupport.py
+++ b/src/plone/folder/tests/test_ordersupport.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from OFS.Traversable import Traversable
 from plone.folder.interfaces import IOrdering
 from plone.folder.ordered import OrderedBTreeFolderBase
 from plone.folder.testing import PLONEFOLDER_INTEGRATION_TESTING
@@ -8,13 +9,20 @@
 import unittest
 
 
+class TestFolder(OrderedBTreeFolderBase, Traversable):
+    """ """
+
+    def getId(self):
+        return self.id
+
+
 class OFSOrderSupportTests(unittest.TestCase):
     """ tests borrowed from OFS.tests.testOrderSupport """
 
     layer = PLONEFOLDER_INTEGRATION_TESTING
 
     def create(self):
-        folder = OrderedBTreeFolderBase('f1')
+        folder = TestFolder('f1')
         folder['o1'] = DummyObject('o1', 'mt1')
         folder['o2'] = DummyObject('o2', 'mt2')
         folder['o3'] = DummyObject('o3', 'mt1')
@@ -86,10 +94,10 @@ def runTableTests(self, methodname, table):
             f = self.create()
             method = getattr(f, methodname)
             if rval == 'ValueError':
-                self.failUnlessRaises(ValueError, method, *args)
+                self.assertRaises(ValueError, method, *args)
             else:
-                self.failUnlessEqual(method(*args), rval)
-            self.failUnlessEqual(f.objectIds(), order)
+                self.assertEqual(method(*args), rval)
+            self.assertEqual(f.objectIds(), order)
 
     def test_moveObjectsUp(self):
         self.runTableTests('moveObjectsUp',
@@ -181,6 +189,15 @@ def test_moveObjectToPosition(self):
               )
             )
 
+    def test_getObjectPosition_error_message(self):
+        folder = self.create()
+        try:
+            folder.getObjectPosition('n4')
+            self.assertFail()
+        except ValueError as err:
+            self.assertEqual(
+                str(err), 'No object with id "n4" exists in "f1".')
+
 
 class PloneOrderSupportTests(unittest.TestCase):
     """ tests borrowed from Products.CMFPlone.tests.testOrderSupport """
diff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py
index e4e26e6..bedb9f3 100644
--- a/src/plone/folder/tests/test_partialordering.py
+++ b/src/plone/folder/tests/test_partialordering.py
@@ -32,7 +32,7 @@ def create(self):
 
     def testAdapter(self):
         container, ordering = self.create()
-        self.failUnless(isinstance(ordering, PartialOrdering))
+        self.assertTrue(isinstance(ordering, PartialOrdering))
 
     def testNotifyAdded(self):
         container, ordering = self.create()
@@ -222,25 +222,25 @@ def testAddObjectChangesOrderInfo(self):
         foo = self.app.foo
         foo['bar23'] = DummyFolder('bar23')
         self.assertEqual(foo.objectIds(), ['bar1', 'bar2', 'bar3', 'bar23'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
 
     def testRemoveObjectChangesOrderInfo(self):
         foo = self.app.foo
         foo._delOb('bar2',)
         self.assertEqual(foo.objectIds(), ['bar1', 'bar3'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
 
     def testMoveObjectChangesOrderInfo(self):
         foo = self.app.foo
         foo.moveObjectsUp(('bar2',))
         self.assertEqual(foo.objectIds(), ['bar2', 'bar1', 'bar3'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
 
     def testOrderObjectsChangesOrderInfo(self):
         foo = self.app.foo
         foo.orderObjects('id', reverse=True)
         self.assertEqual(foo.objectIds(), ['bar3', 'bar2', 'bar1'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
         # Reverse the current ordering.
         foo.orderObjects(reverse=True)
         self.assertEqual(foo.objectIds(), ['bar1', 'bar2', 'bar3'])
@@ -249,7 +249,7 @@ def testOrderObjectsByMethodChangesOrderInfo(self):
         foo = self.app.foo
         foo.orderObjects('dummy_method', reverse=True)
         self.assertEqual(foo.objectIds(), ['bar3', 'bar2', 'bar1'])
-        self.failUnless(foo in self.registered, 'not registered?')
+        self.assertTrue(foo in self.registered, 'not registered?')
         # Reverse the current ordering.
         foo.orderObjects(reverse=True)
         self.assertEqual(foo.objectIds(), ['bar1', 'bar2', 'bar3'])
diff --git a/src/plone/folder/tests/test_unorderedordering.py b/src/plone/folder/tests/test_unorderedordering.py
index d2eab55..bfeb54e 100644
--- a/src/plone/folder/tests/test_unorderedordering.py
+++ b/src/plone/folder/tests/test_unorderedordering.py
@@ -23,7 +23,7 @@ def create(self):
     def testAdapter(self):
         container = self.create()
         ordering = container.getOrdering()
-        self.failUnless(isinstance(ordering, UnorderedOrdering))
+        self.assertTrue(isinstance(ordering, UnorderedOrdering))
 
     def testNotifyAdded(self):
         container = self.create()
diff --git a/src/plone/folder/tests/test_webdav.py b/src/plone/folder/tests/test_webdav.py
index e93e1c0..d764b71 100644
--- a/src/plone/folder/tests/test_webdav.py
+++ b/src/plone/folder/tests/test_webdav.py
@@ -47,4 +47,4 @@ def test_getitem_dav_request(self):
         folder['foo'] = foo
 
         self.assertEquals(folder['foo'], foo)
-        self.failUnless(isinstance(folder['bar'], NullResource))
+        self.assertTrue(isinstance(folder['bar'], NullResource))
diff --git a/var/README.txt b/var/README.txt
deleted file mode 100644
index 5a2a586..0000000
--- a/var/README.txt
+++ /dev/null
@@ -1 +0,0 @@
-This directory contains the Data.fs ZODB data storage, and other runtime files


