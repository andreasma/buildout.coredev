Repository: plone.app.event


Branch: refs/heads/2.0.x
Date: 2018-09-14T11:49:57+02:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/f8b4c167609961ac313195dc61ae696f3f346873

Make sure to include the 'Content-Length' header for ical exports

Files changed:
M CHANGES.rst
M plone/app/event/browser/event_listing.py
M plone/app/event/ical/exporter.py
M plone/app/event/testing.py
M plone/app/event/tests/test_event_listing.py
M plone/app/event/tests/test_icalendar.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0ce4abba..3b7e4ea0 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Make sure to include the \'Content-Length\' header for ical exports\n+  [frapell]\n \n \n 2.0.13 (2017-05-16)\ndiff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py\nindex e8435e2d..17616bf3 100644\n--- a/plone/app/event/browser/event_listing.py\n+++ b/plone/app/event/browser/event_listing.py\n@@ -188,12 +188,14 @@ def ical(self):\n                              batch=False)\n         cal = construct_icalendar(self.context, events)\n         name = \'%s.ics\' % self.context.getId()\n-        self.request.RESPONSE.setHeader(\'Content-Type\', \'text/calendar\')\n-        self.request.RESPONSE.setHeader(\n+        contents = cal.to_ical()\n+        self.request.response.setHeader(\'Content-Type\', \'text/calendar\')\n+        self.request.response.setHeader(\n             \'Content-Disposition\',\n             \'attachment; filename="%s"\' % name\n         )\n-        self.request.RESPONSE.write(cal.to_ical())\n+        self.request.response.setHeader(\'Content-Length\', len(contents))\n+        self.request.response.write(contents)\n \n     @property\n     def ical_url(self):\ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex 273034ec..d8aa2a14 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -320,10 +320,13 @@ def get_ical_string(self):\n         return cal.to_ical()\n \n     def __call__(self):\n-        name = \'%s.ics\' % self.context.getId()\n-        self.request.RESPONSE.setHeader(\'Content-Type\', \'text/calendar\')\n-        self.request.RESPONSE.setHeader(\n+        ical = self.get_ical_string()\n+        name = \'{0}.ics\'.format(self.context.getId())\n+        self.request.response.setHeader(\'Content-Type\', \'text/calendar\')\n+        self.request.response.setHeader(\n             \'Content-Disposition\',\n             \'attachment; filename="%s"\' % name\n         )\n-        self.request.RESPONSE.write(self.get_ical_string())\n+        self.request.response.setHeader(\'Pragma\', \'no-cache\')\n+        self.request.response.setHeader(\'Content-Length\', len(ical))\n+        self.request.response.write(ical)\ndiff --git a/plone/app/event/testing.py b/plone/app/event/testing.py\nindex 92399224..2e23408b 100644\n--- a/plone/app/event/testing.py\n+++ b/plone/app/event/testing.py\n@@ -60,7 +60,7 @@ def setHeader(self, header, value):\n         def write(self, msg):\n             output.append(msg)\n \n-    request.RESPONSE = Response()\n+    request.response = Response()\n     return headers, output, request\n \n \ndiff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py\nindex 5f3c6b05..147bf397 100644\n--- a/plone/app/event/tests/test_event_listing.py\n+++ b/plone/app/event/tests/test_event_listing.py\n@@ -49,8 +49,9 @@ def test_events_listing_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = self._listing_view(name=\'@@event_listing_ical\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Long Event\' in icalstr)\n \ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex c66d2a9e..e24b3ae4 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -42,8 +42,9 @@ def test_event_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.now_event, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n \n         self.checkOrder(\n@@ -92,8 +93,9 @@ def test_event_occurrence_ical(self):\n         )\n         view = getMultiAdapter((occ, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Now Event\' in icalstr)\n         self.assertTrue(\'RRULE\' not in icalstr)\n@@ -102,8 +104,9 @@ def test_portal_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.portal, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n \n         # No occurrences in export. Otherwise count would be 8.\n@@ -195,8 +198,9 @@ def test_event_listing_ical_portal(self):\n         )\n         view.mode = \'all\'\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         # No occurrences in export. Otherwise count would be 8.\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n@@ -213,8 +217,9 @@ def test_event_listing_ical_portal__specific_date(self):\n         view.mode = \'day\'\n         view._date = \'2013-04-27\'\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 2)\n         self.assertTrue(\'Past Event\' in icalstr)\n@@ -229,8 +234,31 @@ def test_collection_ical(self):\n             name=\'ics_view\'\n         )\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n+        icalstr = \'\'.join(output)\n+        self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n+\n+    def test_collection_all_ical(self):\n+        """Test basic icalendar export from Collections, which returns not only\n+        events.\n+        """\n+        headers, output, request = make_fake_response(self.request)\n+        self.portal.collection.query = [\n+            {\'i\': \'portal_type\',\n+             \'o\': \'plone.app.querystring.operation.selection.any\',\n+             \'v\': [\'Event\', \'plone.app.event.dx.event\', \'Page\']\n+             },\n+        ]\n+        view = getMultiAdapter(\n+            (self.portal.collection, request),\n+            name=\'ics_view\'\n+        )\n+        view()\n+        self.assertEqual(len(headers), 4)\n+        self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \n'

Repository: plone.app.event


Branch: refs/heads/2.0.x
Date: 2018-09-14T12:02:55+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/cd1e99dc5f57b55665f5284a90857067453c1ca6

Remove ``Pragma: no-cache`` header for icalendar exports.
The ``Pragma`` header is HTTP 1.0 and the caching strategy on icalendar exports should better be defined by integrators.

Files changed:
M CHANGES.rst
M plone/app/event/ical/exporter.py
M plone/app/event/tests/test_icalendar.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3b7e4ea0..60ae9377 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,9 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Remove ``Pragma: no-cache`` header for icalendar exports.\n+  The ``Pragma`` header is HTTP 1.0 and the caching strategy on icalendar exports should better be defined by integrators.\n+  [thet]\n \n Bug fixes:\n \ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex d8aa2a14..d31e8f1d 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -327,6 +327,5 @@ def __call__(self):\n             \'Content-Disposition\',\n             \'attachment; filename="%s"\' % name\n         )\n-        self.request.response.setHeader(\'Pragma\', \'no-cache\')\n         self.request.response.setHeader(\'Content-Length\', len(ical))\n         self.request.response.write(ical)\ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex e24b3ae4..7a1f01b3 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -42,7 +42,7 @@ def test_event_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.now_event, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -93,7 +93,7 @@ def test_event_occurrence_ical(self):\n         )\n         view = getMultiAdapter((occ, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -104,7 +104,7 @@ def test_portal_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.portal, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -234,7 +234,7 @@ def test_collection_ical(self):\n             name=\'ics_view\'\n         )\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -256,7 +256,7 @@ def test_collection_all_ical(self):\n             name=\'ics_view\'\n         )\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n'

Repository: plone.app.event


Branch: refs/heads/2.0.x
Date: 2018-09-14T15:32:07+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/c0b33ec84d54226b97db73e7a3f6f059db08faf9

Merge pull request #285 from plone/frapell-2.0.x-ical

Make sure to include the 'Content-Length' header for ical exports

Files changed:
M CHANGES.rst
M plone/app/event/browser/event_listing.py
M plone/app/event/ical/exporter.py
M plone/app/event/testing.py
M plone/app/event/tests/test_event_listing.py
M plone/app/event/tests/test_icalendar.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0ce4abba..60ae9377 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,11 +10,14 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Remove ``Pragma: no-cache`` header for icalendar exports.\n+  The ``Pragma`` header is HTTP 1.0 and the caching strategy on icalendar exports should better be defined by integrators.\n+  [thet]\n \n Bug fixes:\n \n-- *add item here*\n+- Make sure to include the \'Content-Length\' header for ical exports\n+  [frapell]\n \n \n 2.0.13 (2017-05-16)\ndiff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py\nindex e8435e2d..17616bf3 100644\n--- a/plone/app/event/browser/event_listing.py\n+++ b/plone/app/event/browser/event_listing.py\n@@ -188,12 +188,14 @@ def ical(self):\n                              batch=False)\n         cal = construct_icalendar(self.context, events)\n         name = \'%s.ics\' % self.context.getId()\n-        self.request.RESPONSE.setHeader(\'Content-Type\', \'text/calendar\')\n-        self.request.RESPONSE.setHeader(\n+        contents = cal.to_ical()\n+        self.request.response.setHeader(\'Content-Type\', \'text/calendar\')\n+        self.request.response.setHeader(\n             \'Content-Disposition\',\n             \'attachment; filename="%s"\' % name\n         )\n-        self.request.RESPONSE.write(cal.to_ical())\n+        self.request.response.setHeader(\'Content-Length\', len(contents))\n+        self.request.response.write(contents)\n \n     @property\n     def ical_url(self):\ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex 273034ec..d31e8f1d 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -320,10 +320,12 @@ def get_ical_string(self):\n         return cal.to_ical()\n \n     def __call__(self):\n-        name = \'%s.ics\' % self.context.getId()\n-        self.request.RESPONSE.setHeader(\'Content-Type\', \'text/calendar\')\n-        self.request.RESPONSE.setHeader(\n+        ical = self.get_ical_string()\n+        name = \'{0}.ics\'.format(self.context.getId())\n+        self.request.response.setHeader(\'Content-Type\', \'text/calendar\')\n+        self.request.response.setHeader(\n             \'Content-Disposition\',\n             \'attachment; filename="%s"\' % name\n         )\n-        self.request.RESPONSE.write(self.get_ical_string())\n+        self.request.response.setHeader(\'Content-Length\', len(ical))\n+        self.request.response.write(ical)\ndiff --git a/plone/app/event/testing.py b/plone/app/event/testing.py\nindex 92399224..2e23408b 100644\n--- a/plone/app/event/testing.py\n+++ b/plone/app/event/testing.py\n@@ -60,7 +60,7 @@ def setHeader(self, header, value):\n         def write(self, msg):\n             output.append(msg)\n \n-    request.RESPONSE = Response()\n+    request.response = Response()\n     return headers, output, request\n \n \ndiff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py\nindex 5f3c6b05..147bf397 100644\n--- a/plone/app/event/tests/test_event_listing.py\n+++ b/plone/app/event/tests/test_event_listing.py\n@@ -49,8 +49,9 @@ def test_events_listing_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = self._listing_view(name=\'@@event_listing_ical\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Long Event\' in icalstr)\n \ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex c66d2a9e..7a1f01b3 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -42,8 +42,9 @@ def test_event_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.now_event, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n \n         self.checkOrder(\n@@ -92,8 +93,9 @@ def test_event_occurrence_ical(self):\n         )\n         view = getMultiAdapter((occ, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Now Event\' in icalstr)\n         self.assertTrue(\'RRULE\' not in icalstr)\n@@ -102,8 +104,9 @@ def test_portal_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.portal, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n \n         # No occurrences in export. Otherwise count would be 8.\n@@ -195,8 +198,9 @@ def test_event_listing_ical_portal(self):\n         )\n         view.mode = \'all\'\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         # No occurrences in export. Otherwise count would be 8.\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n@@ -213,8 +217,9 @@ def test_event_listing_ical_portal__specific_date(self):\n         view.mode = \'day\'\n         view._date = \'2013-04-27\'\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 2)\n         self.assertTrue(\'Past Event\' in icalstr)\n@@ -229,8 +234,31 @@ def test_collection_ical(self):\n             name=\'ics_view\'\n         )\n         view()\n-        self.assertEqual(len(headers), 2)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n+        icalstr = \'\'.join(output)\n+        self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n+\n+    def test_collection_all_ical(self):\n+        """Test basic icalendar export from Collections, which returns not only\n+        events.\n+        """\n+        headers, output, request = make_fake_response(self.request)\n+        self.portal.collection.query = [\n+            {\'i\': \'portal_type\',\n+             \'o\': \'plone.app.querystring.operation.selection.any\',\n+             \'v\': [\'Event\', \'plone.app.event.dx.event\', \'Page\']\n+             },\n+        ]\n+        view = getMultiAdapter(\n+            (self.portal.collection, request),\n+            name=\'ics_view\'\n+        )\n+        view()\n+        self.assertEqual(len(headers), 3)\n+        self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n+        self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \n'

