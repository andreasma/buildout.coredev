Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-03-14T15:17:12+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/f284942948f6277f05b6fd34cc40921d3d600231

Fix display of subjects diff

Files changed:
M CHANGES.rst
M Products/CMFDiffTool/BaseDiff.py

diff --git a/CHANGES.rst b/CHANGES.rst
index df03666..efbf0c1 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Fix display of subjects diff
+  https://github.com/plone/Products.CMFPlone/issues/2340
+  [tomgross]
 
 3.1.6 (2018-02-11)
 ------------------
diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py
index a06c054..f600192 100644
--- a/Products/CMFDiffTool/BaseDiff.py
+++ b/Products/CMFDiffTool/BaseDiff.py
@@ -73,7 +73,14 @@ def _getValue(ob, field, field_name, convert_to_str=True):
     # grab it *with* acquisition, so things like ComputedAttribute
     # will work
     if IDexterityContent.providedBy(ob) and field:
-        value = getattr(ob, field, None)
+        # we need a special handling for subjects because the field is stored as
+        # `subject` attribute but the schema name is `subjects`
+        # see plone.app.dexterity.behaviors.metadata.ICategorization and
+        # plone.dexterity.content.DexterityContent
+        if field == 'subjects':
+            value = ob.Subject()
+        else:
+            value = getattr(ob, field, None)
     elif field and safe_hasattr(aq_base(ob), field):
         value = getattr(ob, field)
     elif safe_hasattr(aq_base(ob), 'getField'):


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-03-14T23:06:52+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/d24f5f65be1501f8a571469b566f646e104b6631

Make tests more stable against schema changes

Files changed:
M Products/CMFDiffTool/tests/testChangeSet.py

diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 01d68d1..d5e9eb4 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -9,6 +9,7 @@
 from plone.app.testing import TEST_USER_ID
 from Products.CMFCore.utils import getToolByName
 from Products.CMFDiffTool.ChangeSet import BaseChangeSet
+from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff
 from Products.CMFPlone.utils import safe_hasattr
 from unittest import TestCase
 
@@ -36,6 +37,8 @@ def setupTestObjects(self):
         self.folder.invokeFactory('Document', 'doc1', title='My Title')
         self.folder.manage_pasteObjects(
             self.folder.manage_copyObjects(['doc1']))
+        cdd = DexterityCompoundDiff(self.folder['doc1'], self.folder['doc1'], '')
+        self.len_diff = len(cdd._diffs)
 
     def setupTestFolders(self):
         self.folder.invokeFactory('Folder', 'folder1', title='My Folder Title')
@@ -47,12 +50,15 @@ def setupTestFolders(self):
                                           title='My Title3')
         self.folder.manage_pasteObjects(
             self.folder.manage_copyObjects(['folder1']))
+        cdd = DexterityCompoundDiff(
+            self.folder['folder1']['doc1'], self.folder['folder1']['doc1'], '')
+        self.len_diff = len(cdd._diffs)
 
     def testChangeSetUnchanged(self):
         self.setupTestObjects()
-        self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
+        self.cs.computeDiff(self.folder['doc1'], self.folder['copy_of_doc1'])
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 15)
+        self.assertEqual(len(diffs), self.len_diff)
         self.assertTrue(diffs[0].same)
 
     def testChangeSetChanged(self):
@@ -60,7 +66,7 @@ def testChangeSetChanged(self):
         self.folder.copy_of_doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 15)
+        self.assertEqual(len(diffs), self.len_diff)
         self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Title%s+ My New Title' % linesep)
@@ -76,7 +82,7 @@ def testChangeSetFolderUnchanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_cs[0].same)
             self.assertTrue(sub_cs[1].same)
             self.assertTrue(sub_cs[2].same)
@@ -98,7 +104,7 @@ def testChangeSetFolderChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_diffs[0].same)
 
     def testChangeSetFolderDocChanged(self):
@@ -116,7 +122,7 @@ def testChangeSetFolderDocChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             # doc1 has changed
             if sub_cs[i].getId() == 'doc1':
                 self.assertFalse(sub_diffs[0].same)
@@ -140,7 +146,7 @@ def testChangeSetFolderDocRemoved(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_diffs[0].same)
         self.assertFalse(self.cs._added)
         self.assertEqual(list(self.cs._removed), ['doc1'])
@@ -160,7 +166,7 @@ def testChangeSetFolderDocAdded(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_diffs[0].same)
         self.assertFalse(self.cs._removed)
         self.assertEqual(list(self.cs._added), ['doc4'])
@@ -188,7 +194,7 @@ def testChangeSetFolderReordered(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_diffs[0].same)
         # XXX we need an explicit way of noting reorders
 
@@ -214,7 +220,7 @@ def testChangeSetFolderComplex(self):
             # We don't have an orderable folder give up
             return
 
-        self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
+        self.cs.computeDiff(self.folder['folder1'], self.folder['copy_of_folder1'])
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 14)
         self.assertFalse(diffs[0].same)
@@ -229,7 +235,7 @@ def testChangeSetFolderComplex(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             if sub_cs[i].getId() == 'doc3':
                 self.assertFalse(sub_diffs[0].same)
                 self.assertEqual(sub_diffs[0].ndiff(),


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-03-18T18:25:16+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/10cf1f23d7769ce2afa976a8c59914a929a5a5b6

Merge pull request #30 from plone/tg_fix_subjects_diff

Fix display of subjects diff

Files changed:
M CHANGES.rst
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/tests/testChangeSet.py

diff --git a/CHANGES.rst b/CHANGES.rst
index df03666..efbf0c1 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Fix display of subjects diff
+  https://github.com/plone/Products.CMFPlone/issues/2340
+  [tomgross]
 
 3.1.6 (2018-02-11)
 ------------------
diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py
index a06c054..f600192 100644
--- a/Products/CMFDiffTool/BaseDiff.py
+++ b/Products/CMFDiffTool/BaseDiff.py
@@ -73,7 +73,14 @@ def _getValue(ob, field, field_name, convert_to_str=True):
     # grab it *with* acquisition, so things like ComputedAttribute
     # will work
     if IDexterityContent.providedBy(ob) and field:
-        value = getattr(ob, field, None)
+        # we need a special handling for subjects because the field is stored as
+        # `subject` attribute but the schema name is `subjects`
+        # see plone.app.dexterity.behaviors.metadata.ICategorization and
+        # plone.dexterity.content.DexterityContent
+        if field == 'subjects':
+            value = ob.Subject()
+        else:
+            value = getattr(ob, field, None)
     elif field and safe_hasattr(aq_base(ob), field):
         value = getattr(ob, field)
     elif safe_hasattr(aq_base(ob), 'getField'):
diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 01d68d1..d5e9eb4 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -9,6 +9,7 @@
 from plone.app.testing import TEST_USER_ID
 from Products.CMFCore.utils import getToolByName
 from Products.CMFDiffTool.ChangeSet import BaseChangeSet
+from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff
 from Products.CMFPlone.utils import safe_hasattr
 from unittest import TestCase
 
@@ -36,6 +37,8 @@ def setupTestObjects(self):
         self.folder.invokeFactory('Document', 'doc1', title='My Title')
         self.folder.manage_pasteObjects(
             self.folder.manage_copyObjects(['doc1']))
+        cdd = DexterityCompoundDiff(self.folder['doc1'], self.folder['doc1'], '')
+        self.len_diff = len(cdd._diffs)
 
     def setupTestFolders(self):
         self.folder.invokeFactory('Folder', 'folder1', title='My Folder Title')
@@ -47,12 +50,15 @@ def setupTestFolders(self):
                                           title='My Title3')
         self.folder.manage_pasteObjects(
             self.folder.manage_copyObjects(['folder1']))
+        cdd = DexterityCompoundDiff(
+            self.folder['folder1']['doc1'], self.folder['folder1']['doc1'], '')
+        self.len_diff = len(cdd._diffs)
 
     def testChangeSetUnchanged(self):
         self.setupTestObjects()
-        self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
+        self.cs.computeDiff(self.folder['doc1'], self.folder['copy_of_doc1'])
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 15)
+        self.assertEqual(len(diffs), self.len_diff)
         self.assertTrue(diffs[0].same)
 
     def testChangeSetChanged(self):
@@ -60,7 +66,7 @@ def testChangeSetChanged(self):
         self.folder.copy_of_doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 15)
+        self.assertEqual(len(diffs), self.len_diff)
         self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Title%s+ My New Title' % linesep)
@@ -76,7 +82,7 @@ def testChangeSetFolderUnchanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_cs[0].same)
             self.assertTrue(sub_cs[1].same)
             self.assertTrue(sub_cs[2].same)
@@ -98,7 +104,7 @@ def testChangeSetFolderChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_diffs[0].same)
 
     def testChangeSetFolderDocChanged(self):
@@ -116,7 +122,7 @@ def testChangeSetFolderDocChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             # doc1 has changed
             if sub_cs[i].getId() == 'doc1':
                 self.assertFalse(sub_diffs[0].same)
@@ -140,7 +146,7 @@ def testChangeSetFolderDocRemoved(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_diffs[0].same)
         self.assertFalse(self.cs._added)
         self.assertEqual(list(self.cs._removed), ['doc1'])
@@ -160,7 +166,7 @@ def testChangeSetFolderDocAdded(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_diffs[0].same)
         self.assertFalse(self.cs._removed)
         self.assertEqual(list(self.cs._added), ['doc4'])
@@ -188,7 +194,7 @@ def testChangeSetFolderReordered(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             self.assertTrue(sub_diffs[0].same)
         # XXX we need an explicit way of noting reorders
 
@@ -214,7 +220,7 @@ def testChangeSetFolderComplex(self):
             # We don't have an orderable folder give up
             return
 
-        self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
+        self.cs.computeDiff(self.folder['folder1'], self.folder['copy_of_folder1'])
         diffs = self.cs.getDiffs()
         self.assertEqual(len(diffs), 14)
         self.assertFalse(diffs[0].same)
@@ -229,7 +235,7 @@ def testChangeSetFolderComplex(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 15)
+            self.assertEqual(len(sub_diffs), self.len_diff)
             if sub_cs[i].getId() == 'doc3':
                 self.assertFalse(sub_diffs[0].same)
                 self.assertEqual(sub_diffs[0].ndiff(),


