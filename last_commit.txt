Repository: plone.app.testing


Branch: refs/heads/master
Date: 2020-02-05T15:51:08+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.testing/commit/e8ba5ff36f90cababf725da4a7a4b3e6c1e3120c

Fix some test isolation issues

Fix a test isolation issue that was preventing the MOCK_MAILHOST_FIXTURE
to be used in multiple testcases (Fixes #61),

Properly configure the mail sender setting the appropriate registry
records (Fixes #62),

Adds test coverage.

Files changed:
A news/61.bugfix
A news/62.bugfix
M src/plone/app/testing/layers.py
M src/plone/app/testing/layers.rst
M src/plone/app/testing/tests.py

b'diff --git a/news/61.bugfix b/news/61.bugfix\nnew file mode 100644\nindex 0000000..fd1253d\n--- /dev/null\n+++ b/news/61.bugfix\n@@ -0,0 +1 @@\n+Fix a test isolation issue that was preventing the MOCK_MAILHOST_FIXTURE to be used in multiple testcases [ale-rt]\ndiff --git a/news/62.bugfix b/news/62.bugfix\nnew file mode 100644\nindex 0000000..4a8304d\n--- /dev/null\n+++ b/news/62.bugfix\n@@ -0,0 +1 @@\n+Properly configure the mail sender setting the appropriate registry records (Fixes #62)\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex fcc8775..b6d8a96 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -13,6 +13,7 @@\n from plone.app.testing.interfaces import TEST_USER_PASSWORD\n from plone.app.testing.interfaces import TEST_USER_ROLES\n from plone.app.testing.utils import MockMailHost\n+from plone.registry.interfaces import IRegistry\n from plone.testing import Layer\n from plone.testing import zca\n from plone.testing import zodb\n@@ -20,6 +21,7 @@\n from plone.testing import zserver\n from Products.MailHost.interfaces import IMailHost\n from zope.component import getSiteManager\n+from zope.component import getUtility\n from zope.component.hooks import setSite\n from zope.event import notify\n from zope.traversing.interfaces import BeforeTraverseEvent\n@@ -382,19 +384,21 @@ class MockMailHostLayer(Layer):\n     """\n     defaultBases = (PLONE_FIXTURE,)\n \n-    def setUp(self):\n+    def testSetUp(self):\n         with zope.zopeApp() as app:\n             portal = app[PLONE_SITE_ID]\n-            portal.email_from_address = \'noreply@example.com\'\n-            portal.email_from_name = \'Plone Site\'\n+            registry = getUtility(IRegistry, context=portal)\n+            if not registry["plone.email_from_address"]:\n+                registry["plone.email_from_address"] = "noreply@example.com"\n+            if not registry["plone.email_from_name"]:\n+                registry["plone.email_from_name"] = u"Plone site"\n             portal._original_MailHost = portal.MailHost\n             portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n-            portal.MailHost.smtp_host = \'localhost\'\n             sm = getSiteManager(context=portal)\n             sm.unregisterUtility(provided=IMailHost)\n             sm.registerUtility(mailhost, provided=IMailHost)\n \n-    def tearDown(self):\n+    def testTearDown(self):\n         with zope.zopeApp() as app:\n             portal = app[PLONE_SITE_ID]\n             _o_mailhost = getattr(portal, \'_original_MailHost\', None)\ndiff --git a/src/plone/app/testing/layers.rst b/src/plone/app/testing/layers.rst\nindex 49291e8..8304321 100644\n--- a/src/plone/app/testing/layers.rst\n+++ b/src/plone/app/testing/layers.rst\n@@ -379,3 +379,98 @@ When the server is torn down, the ZServer thread is stopped.\n     Traceback (most recent call last):\n     ...\n     requests.exceptions.ConnectionError: ...\n+\n+\n+Mock MailHost\n+~~~~~~~~~~~~~\n+\n+The fixture ``MOCK_MAILHOST_FIXTURE`` layer\n+allows to replace the Zope MailHost with a dummy one.\n+\n+**Note:** This layer builds on top of ``PLONE_FIXTURE``.\n+Like ``PLONE_FIXTURE``, it should only be used as a base layer,\n+and not directly in tests.\n+See this package\'s ``README`` file for details.\n+\n+    >>> layers.MOCK_MAILHOST_FIXTURE.__bases__\n+    (<Layer \'plone.app.testing.layers.PloneFixture\'>,)\n+    >>> options = runner.get_options([], [])\n+    >>> setupLayers = {}\n+    >>> runner.setup_layer(options, layers.MOCK_MAILHOST_FIXTURE, setupLayers)\n+    Set up plone.testing.zca.LayerCleanup in ... seconds.\n+    Set up plone.testing.zope.Startup in ... seconds.\n+    Set up plone.app.testing.layers.PloneFixture in ... seconds.\n+    Set up plone.app.testing.layers.MockMailHostLayer in ... seconds.\n+\n+Let\'s now simulate a test.\n+Test setup sets a couple of registry records and\n+replaces the mail host with a dummy one:\n+\n+    >>> from zope.component import getUtility\n+    >>> from plone.registry.interfaces import IRegistry\n+\n+    >>> zca.LAYER_CLEANUP.testSetUp()\n+    >>> zope.STARTUP.testSetUp()\n+    >>> layers.MOCK_MAILHOST_FIXTURE.testSetUp()\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     registry = getUtility(IRegistry, context=portal)\n+\n+    >>> registry["plone.email_from_address"]\n+    \'noreply@example.com\'\n+    >>> registry["plone.email_from_name"]\n+    \'Plone site\'\n+\n+The dummy MailHost, instead of sending the emails,\n+stores them in a list of messages:\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     portal.MailHost.messages\n+    []\n+\n+If we send a message, we can check it in the list:\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     portal.MailHost.send(\n+    ...         "Hello world!",\n+    ...         mto="foo@example.com",\n+    ...         mfrom="bar@example.com",\n+    ...         subject="Test",\n+    ...         msg_type="text/plain",\n+    ...     )\n+    >>> with helpers.ploneSite() as portal:\n+    ...     for message in portal.MailHost.messages:\n+    ...         print(message)\n+    MIME-Version: 1.0\n+    Content-Type: text/plain\n+    Subject: Test\n+    To: foo@example.com\n+    From: bar@example.com\n+    Date: ...\n+    <BLANKLINE>\n+    Hello world!\n+\n+The list can be reset:\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     portal.MailHost.reset()\n+    ...     portal.MailHost.messages\n+    []\n+\n+When the test is torn down the original MaiHost is restored:\n+\n+    >>> layers.MOCK_MAILHOST_FIXTURE.testTearDown()\n+    >>> zope.STARTUP.testTearDown()\n+    >>> zca.LAYER_CLEANUP.testTearDown()\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     portal.MailHost.messages\n+    Traceback (most recent call last):\n+    ...\n+    AttributeError: \'RequestContainer\' object has no attribute \'messages\'\n+\n+    >>> runner.tear_down_unneeded(options, [], setupLayers)\n+    Tear down plone.app.testing.layers.MockMailHostLayer in ... seconds.\n+    Tear down plone.app.testing.layers.PloneFixture in ... seconds.\n+    Tear down plone.testing.zope.Startup in ... seconds.\n+    Tear down plone.testing.zca.LayerCleanup in ... seconds.\ndiff --git a/src/plone/app/testing/tests.py b/src/plone/app/testing/tests.py\nindex 22763e1..53a7a10 100644\n--- a/src/plone/app/testing/tests.py\n+++ b/src/plone/app/testing/tests.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n import doctest\n+import re\n import six\n import unittest\n \n@@ -12,18 +13,38 @@ def dummy(context):\n     pass\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = unittest.TestSuite()\n     # seltest = doctest.DocFileSuite(\'selenium.rst\', optionflags=OPTIONFLAGS)\n     # Run selenium tests on level 2, as it requires a correctly configured\n     # Firefox browser\n     # seltest.level = 2\n-    suite.addTests([\n-        doctest.DocFileSuite(\'cleanup.rst\', optionflags=OPTIONFLAGS),\n-        doctest.DocFileSuite(\'layers.rst\', optionflags=OPTIONFLAGS),\n-        doctest.DocFileSuite(\'helpers.rst\', optionflags=OPTIONFLAGS),\n-        # seltest,\n-    ])\n+    suite.addTests(\n+        [\n+            doctest.DocFileSuite(\n+                "cleanup.rst",\n+                optionflags=OPTIONFLAGS,\n+                checker=Py23DocChecker(),\n+            ),\n+            doctest.DocFileSuite(\n+                "layers.rst",\n+                optionflags=OPTIONFLAGS,\n+                checker=Py23DocChecker(),\n+            ),\n+            doctest.DocFileSuite(\n+                "helpers.rst",\n+                optionflags=OPTIONFLAGS,\n+                checker=Py23DocChecker(),\n+            ),\n+        ]\n+    )\n     if six.PY2:\n         suite.addTests([\n             doctest.DocFileSuite(\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2020-02-07T12:03:23+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.testing/commit/d0a6bdd1cf4839aeff6c283db92eb75597b42652

Merge pull request #64 from plone/isolation

Fix some test isolation issues

Files changed:
A news/61.bugfix
A news/62.bugfix
M src/plone/app/testing/layers.py
M src/plone/app/testing/layers.rst
M src/plone/app/testing/tests.py

b'diff --git a/news/61.bugfix b/news/61.bugfix\nnew file mode 100644\nindex 0000000..fd1253d\n--- /dev/null\n+++ b/news/61.bugfix\n@@ -0,0 +1 @@\n+Fix a test isolation issue that was preventing the MOCK_MAILHOST_FIXTURE to be used in multiple testcases [ale-rt]\ndiff --git a/news/62.bugfix b/news/62.bugfix\nnew file mode 100644\nindex 0000000..4a8304d\n--- /dev/null\n+++ b/news/62.bugfix\n@@ -0,0 +1 @@\n+Properly configure the mail sender setting the appropriate registry records (Fixes #62)\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex fcc8775..b6d8a96 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -13,6 +13,7 @@\n from plone.app.testing.interfaces import TEST_USER_PASSWORD\n from plone.app.testing.interfaces import TEST_USER_ROLES\n from plone.app.testing.utils import MockMailHost\n+from plone.registry.interfaces import IRegistry\n from plone.testing import Layer\n from plone.testing import zca\n from plone.testing import zodb\n@@ -20,6 +21,7 @@\n from plone.testing import zserver\n from Products.MailHost.interfaces import IMailHost\n from zope.component import getSiteManager\n+from zope.component import getUtility\n from zope.component.hooks import setSite\n from zope.event import notify\n from zope.traversing.interfaces import BeforeTraverseEvent\n@@ -382,19 +384,21 @@ class MockMailHostLayer(Layer):\n     """\n     defaultBases = (PLONE_FIXTURE,)\n \n-    def setUp(self):\n+    def testSetUp(self):\n         with zope.zopeApp() as app:\n             portal = app[PLONE_SITE_ID]\n-            portal.email_from_address = \'noreply@example.com\'\n-            portal.email_from_name = \'Plone Site\'\n+            registry = getUtility(IRegistry, context=portal)\n+            if not registry["plone.email_from_address"]:\n+                registry["plone.email_from_address"] = "noreply@example.com"\n+            if not registry["plone.email_from_name"]:\n+                registry["plone.email_from_name"] = u"Plone site"\n             portal._original_MailHost = portal.MailHost\n             portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n-            portal.MailHost.smtp_host = \'localhost\'\n             sm = getSiteManager(context=portal)\n             sm.unregisterUtility(provided=IMailHost)\n             sm.registerUtility(mailhost, provided=IMailHost)\n \n-    def tearDown(self):\n+    def testTearDown(self):\n         with zope.zopeApp() as app:\n             portal = app[PLONE_SITE_ID]\n             _o_mailhost = getattr(portal, \'_original_MailHost\', None)\ndiff --git a/src/plone/app/testing/layers.rst b/src/plone/app/testing/layers.rst\nindex 49291e8..8304321 100644\n--- a/src/plone/app/testing/layers.rst\n+++ b/src/plone/app/testing/layers.rst\n@@ -379,3 +379,98 @@ When the server is torn down, the ZServer thread is stopped.\n     Traceback (most recent call last):\n     ...\n     requests.exceptions.ConnectionError: ...\n+\n+\n+Mock MailHost\n+~~~~~~~~~~~~~\n+\n+The fixture ``MOCK_MAILHOST_FIXTURE`` layer\n+allows to replace the Zope MailHost with a dummy one.\n+\n+**Note:** This layer builds on top of ``PLONE_FIXTURE``.\n+Like ``PLONE_FIXTURE``, it should only be used as a base layer,\n+and not directly in tests.\n+See this package\'s ``README`` file for details.\n+\n+    >>> layers.MOCK_MAILHOST_FIXTURE.__bases__\n+    (<Layer \'plone.app.testing.layers.PloneFixture\'>,)\n+    >>> options = runner.get_options([], [])\n+    >>> setupLayers = {}\n+    >>> runner.setup_layer(options, layers.MOCK_MAILHOST_FIXTURE, setupLayers)\n+    Set up plone.testing.zca.LayerCleanup in ... seconds.\n+    Set up plone.testing.zope.Startup in ... seconds.\n+    Set up plone.app.testing.layers.PloneFixture in ... seconds.\n+    Set up plone.app.testing.layers.MockMailHostLayer in ... seconds.\n+\n+Let\'s now simulate a test.\n+Test setup sets a couple of registry records and\n+replaces the mail host with a dummy one:\n+\n+    >>> from zope.component import getUtility\n+    >>> from plone.registry.interfaces import IRegistry\n+\n+    >>> zca.LAYER_CLEANUP.testSetUp()\n+    >>> zope.STARTUP.testSetUp()\n+    >>> layers.MOCK_MAILHOST_FIXTURE.testSetUp()\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     registry = getUtility(IRegistry, context=portal)\n+\n+    >>> registry["plone.email_from_address"]\n+    \'noreply@example.com\'\n+    >>> registry["plone.email_from_name"]\n+    \'Plone site\'\n+\n+The dummy MailHost, instead of sending the emails,\n+stores them in a list of messages:\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     portal.MailHost.messages\n+    []\n+\n+If we send a message, we can check it in the list:\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     portal.MailHost.send(\n+    ...         "Hello world!",\n+    ...         mto="foo@example.com",\n+    ...         mfrom="bar@example.com",\n+    ...         subject="Test",\n+    ...         msg_type="text/plain",\n+    ...     )\n+    >>> with helpers.ploneSite() as portal:\n+    ...     for message in portal.MailHost.messages:\n+    ...         print(message)\n+    MIME-Version: 1.0\n+    Content-Type: text/plain\n+    Subject: Test\n+    To: foo@example.com\n+    From: bar@example.com\n+    Date: ...\n+    <BLANKLINE>\n+    Hello world!\n+\n+The list can be reset:\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     portal.MailHost.reset()\n+    ...     portal.MailHost.messages\n+    []\n+\n+When the test is torn down the original MaiHost is restored:\n+\n+    >>> layers.MOCK_MAILHOST_FIXTURE.testTearDown()\n+    >>> zope.STARTUP.testTearDown()\n+    >>> zca.LAYER_CLEANUP.testTearDown()\n+\n+    >>> with helpers.ploneSite() as portal:\n+    ...     portal.MailHost.messages\n+    Traceback (most recent call last):\n+    ...\n+    AttributeError: \'RequestContainer\' object has no attribute \'messages\'\n+\n+    >>> runner.tear_down_unneeded(options, [], setupLayers)\n+    Tear down plone.app.testing.layers.MockMailHostLayer in ... seconds.\n+    Tear down plone.app.testing.layers.PloneFixture in ... seconds.\n+    Tear down plone.testing.zope.Startup in ... seconds.\n+    Tear down plone.testing.zca.LayerCleanup in ... seconds.\ndiff --git a/src/plone/app/testing/tests.py b/src/plone/app/testing/tests.py\nindex 22763e1..53a7a10 100644\n--- a/src/plone/app/testing/tests.py\n+++ b/src/plone/app/testing/tests.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n import doctest\n+import re\n import six\n import unittest\n \n@@ -12,18 +13,38 @@ def dummy(context):\n     pass\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = unittest.TestSuite()\n     # seltest = doctest.DocFileSuite(\'selenium.rst\', optionflags=OPTIONFLAGS)\n     # Run selenium tests on level 2, as it requires a correctly configured\n     # Firefox browser\n     # seltest.level = 2\n-    suite.addTests([\n-        doctest.DocFileSuite(\'cleanup.rst\', optionflags=OPTIONFLAGS),\n-        doctest.DocFileSuite(\'layers.rst\', optionflags=OPTIONFLAGS),\n-        doctest.DocFileSuite(\'helpers.rst\', optionflags=OPTIONFLAGS),\n-        # seltest,\n-    ])\n+    suite.addTests(\n+        [\n+            doctest.DocFileSuite(\n+                "cleanup.rst",\n+                optionflags=OPTIONFLAGS,\n+                checker=Py23DocChecker(),\n+            ),\n+            doctest.DocFileSuite(\n+                "layers.rst",\n+                optionflags=OPTIONFLAGS,\n+                checker=Py23DocChecker(),\n+            ),\n+            doctest.DocFileSuite(\n+                "helpers.rst",\n+                optionflags=OPTIONFLAGS,\n+                checker=Py23DocChecker(),\n+            ),\n+        ]\n+    )\n     if six.PY2:\n         suite.addTests([\n             doctest.DocFileSuite(\n'

