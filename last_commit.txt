Repository: plone.app.contentrules


Branch: refs/heads/4.0.x
Date: 2019-03-15T20:38:06+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.contentrules/commit/0739aab62449c2e3614bb983926b7ca2e2d84ab9

Merge pull request #45 from plone/versioning_action

Versioning action

Files changed:
A news/44.feature
A plone/app/contentrules/actions/versioning.py
A plone/app/contentrules/tests/test_action_versioning.py
M plone/app/contentrules/actions/configure.zcml
M setup.py

b'diff --git a/news/44.feature b/news/44.feature\nnew file mode 100644\nindex 0000000..4a9fca2\n--- /dev/null\n+++ b/news/44.feature\n@@ -0,0 +1,2 @@\n+Add new action `Version object`.\n+[gbastien]\ndiff --git a/plone/app/contentrules/actions/configure.zcml b/plone/app/contentrules/actions/configure.zcml\nindex 8c90c9d..779ac96 100644\n--- a/plone/app/contentrules/actions/configure.zcml\n+++ b/plone/app/contentrules/actions/configure.zcml\n@@ -206,4 +206,34 @@\n          factory=".mail.MailAction"\n          />\n \n+    <!-- Versioning action -->\n+\n+    <adapter factory=".versioning.VersioningActionExecutor" />\n+\n+    <browser:page\n+        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"\n+        name="plone.actions.Versioning"\n+        class=".versioning.VersioningAddFormView"\n+        permission="plone.app.contentrules.ManageContentRules"\n+      />\n+\n+    <browser:page\n+        for="plone.app.contentrules.actions.versioning.IVersioningAction"\n+        name="edit"\n+        class=".versioning.VersioningEditFormView"\n+        permission="plone.app.contentrules.ManageContentRules"\n+      />\n+\n+    <plone:ruleAction\n+        name="plone.actions.Versioning"\n+        title="Version object"\n+        description="Store a new version of the object"\n+        for="*"\n+        event="*"\n+        addview="plone.actions.Versioning"\n+        editview="edit"\n+        schema=".versioning.IVersioningAction"\n+        factory=".versioning.VersioningAction"\n+        />\n+\n </configure>\ndiff --git a/plone/app/contentrules/actions/versioning.py b/plone/app/contentrules/actions/versioning.py\nnew file mode 100644\nindex 0000000..c255571\n--- /dev/null\n+++ b/plone/app/contentrules/actions/versioning.py\n@@ -0,0 +1,95 @@\n+# -*- coding: utf-8 -*-\n+from OFS.SimpleItem import SimpleItem\n+from plone.app.contentrules import PloneMessageFactory as _\n+from plone.app.contentrules.actions import ActionAddForm\n+from plone.app.contentrules.actions import ActionEditForm\n+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n+from plone.contentrules.rule.interfaces import IExecutable\n+from plone.contentrules.rule.interfaces import IRuleElementData\n+from Products.CMFCore.utils import getToolByName\n+from zope import schema\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+\n+class IVersioningAction(Interface):\n+    """Interface for the configurable aspects of a versioning action.\n+\n+    This is also used to create add and edit forms, below.\n+    """\n+\n+    comment = schema.TextLine(\n+        title=_(u\'Comment\'),\n+        description=_(\n+            u\'The comment added to the history while versioning the content.\'),\n+        required=False,\n+    )\n+\n+\n+@implementer(IVersioningAction, IRuleElementData)\n+class VersioningAction(SimpleItem):\n+    """The actual persistent implementation of the versioning action element.\n+    """\n+\n+    comment = \'\'\n+\n+    element = \'plone.actions.Versioning\'\n+\n+    @property\n+    def summary(self):\n+        return _(\n+            u\'Versioning with comment ${comment}\',\n+            mapping=dict(comment=self.comment),\n+        )\n+\n+\n+@adapter(Interface, IVersioningAction, Interface)\n+@implementer(IExecutable)\n+class VersioningActionExecutor(object):\n+    """The executor for this action.\n+\n+    This is registered as an adapter in configure.zcml\n+    """\n+\n+    def __init__(self, context, element, event):\n+        self.context = context\n+        self.element = element\n+        self.event = event\n+\n+    def __call__(self):\n+        comment = _(self.element.comment)\n+        pr = getToolByName(self.context, \'portal_repository\')\n+        pr.save(obj=self.event.object, comment=comment)\n+        return True\n+\n+\n+class VersioningAddForm(ActionAddForm):\n+    """An add form for versioning rule actions.\n+    """\n+    schema = IVersioningAction\n+    label = _(u\'Add Versioning Action\')\n+    description = _(u\'A versioning action will store a version of a content \'\n+                    u\'no matter versioning is enabled for it or not.\')\n+    form_name = _(u\'Configure element\')\n+    Type = VersioningAction\n+\n+\n+class VersioningAddFormView(ContentRuleFormWrapper):\n+    form = VersioningAddForm\n+\n+\n+class VersioningEditForm(ActionEditForm):\n+    """An edit form for versioning rule actions.\n+\n+    z3c.form does all the magic here.\n+    """\n+    schema = IVersioningAction\n+    label = _(u\'Edit Versioning Action\')\n+    description = _(u\'A versioning action will store a version of a content \'\n+                    u\'no matter versioning is enabled for it or not.\')\n+    form_name = _(u\'Configure element\')\n+\n+\n+class VersioningEditFormView(ContentRuleFormWrapper):\n+    form = VersioningEditForm\ndiff --git a/plone/app/contentrules/tests/test_action_versioning.py b/plone/app/contentrules/tests/test_action_versioning.py\nnew file mode 100644\nindex 0000000..2e522c3\n--- /dev/null\n+++ b/plone/app/contentrules/tests/test_action_versioning.py\n@@ -0,0 +1,71 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contentrules.actions.versioning import VersioningAction\n+from plone.app.contentrules.actions.versioning import VersioningEditFormView\n+from plone.app.contentrules.rule import Rule\n+from plone.app.contentrules.tests.base import ContentRulesTestCase\n+from plone.contentrules.engine.interfaces import IRuleStorage\n+from plone.contentrules.rule.interfaces import IExecutable\n+from plone.contentrules.rule.interfaces import IRuleAction\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+\n+@implementer(Interface)\n+class DummyEvent(object):\n+\n+    def __init__(self, object):\n+        self.object = object\n+\n+\n+class TestVersioningAction(ContentRulesTestCase):\n+\n+    def testRegistered(self):\n+        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        self.assertEqual(\'plone.actions.Versioning\', element.addview)\n+        self.assertEqual(\'edit\', element.editview)\n+        self.assertEqual(None, element.for_)\n+        self.assertEqual(None, element.event)\n+\n+    def testInvokeAddView(self):\n+        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        storage = getUtility(IRuleStorage)\n+        storage[u\'foo\'] = Rule()\n+        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+\n+        adding = getMultiAdapter((rule, self.request), name=\'+action\')\n+        addview = getMultiAdapter((adding, self.request), name=element.addview)\n+\n+        addview.form_instance.update()\n+        content = addview.form_instance.create(data={\'comment\': \'Hello world\'})\n+        addview.form_instance.add(content)\n+\n+        e = rule.actions[0]\n+        self.assertTrue(isinstance(e, VersioningAction))\n+        self.assertEqual(\'Hello world\', e.comment)\n+\n+    def testInvokeEditView(self):\n+        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        e = VersioningAction()\n+        editview = getMultiAdapter((e, self.request), name=element.editview)\n+        self.assertTrue(isinstance(editview, VersioningEditFormView))\n+\n+    def testExecute(self):\n+        e = VersioningAction()\n+        e.comment = \'Hello world\'\n+\n+        ex = getMultiAdapter(\n+            (self.folder, e, DummyEvent(self.folder)), IExecutable)\n+        # not version for now\n+        pr = self.portal.portal_repository\n+        self.assertEqual(pr.getHistoryMetadata(self.folder), [])\n+\n+        # action will create first version\n+        self.assertEqual(True, ex())\n+        self.assertEqual(\n+            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 1)\n+        # calling action again will create a second version\n+        ex()\n+        self.assertEqual(\n+            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 2)\ndiff --git a/setup.py b/setup.py\nindex f56cc53..d65fcdd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -29,7 +29,7 @@\n     namespace_packages=[\'plone\', \'plone.app\'],\n     include_package_data=True,\n     zip_safe=False,\n-    extras_require={\'test\': \'plone.app.testing\'},\n+    extras_require={\'test\': [\'plone.app.testing\', \'plone.app.contenttypes[test]\']},\n     install_requires=[\n         \'setuptools\',\n         \'plone.contentrules\',\n'

Repository: plone.app.contentrules


Branch: refs/heads/4.0.x
Date: 2019-03-15T20:48:01+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/plone.app.contentrules/commit/6572f25576e9246cc2c1379d3f65a1f059a0825d

Make request available thru self.request

Files changed:
M plone/app/contentrules/tests/test_action_versioning.py

b"diff --git a/plone/app/contentrules/tests/test_action_versioning.py b/plone/app/contentrules/tests/test_action_versioning.py\nindex 2e522c3..709a332 100644\n--- a/plone/app/contentrules/tests/test_action_versioning.py\n+++ b/plone/app/contentrules/tests/test_action_versioning.py\n@@ -21,6 +21,9 @@ def __init__(self, object):\n \n class TestVersioningAction(ContentRulesTestCase):\n \n+    def afterSetUp(self):\n+        self.request = self.layer['request']\n+\n     def testRegistered(self):\n         element = getUtility(IRuleAction, name='plone.actions.Versioning')\n         self.assertEqual('plone.actions.Versioning', element.addview)\n"

Repository: plone.app.contentrules


Branch: refs/heads/4.0.x
Date: 2019-03-16T00:13:30+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/025ae14e450cd5c81cdd2cd3ef4b51ec9e21f0b7

Merge pull request #47 from plone/versioning_action_4_0_x

Versioning action 4 0 x

Files changed:
A news/44.feature
A plone/app/contentrules/actions/versioning.py
A plone/app/contentrules/tests/test_action_versioning.py
M plone/app/contentrules/actions/configure.zcml
M setup.py

b'diff --git a/news/44.feature b/news/44.feature\nnew file mode 100644\nindex 0000000..4a9fca2\n--- /dev/null\n+++ b/news/44.feature\n@@ -0,0 +1,2 @@\n+Add new action `Version object`.\n+[gbastien]\ndiff --git a/plone/app/contentrules/actions/configure.zcml b/plone/app/contentrules/actions/configure.zcml\nindex 8c90c9d..779ac96 100644\n--- a/plone/app/contentrules/actions/configure.zcml\n+++ b/plone/app/contentrules/actions/configure.zcml\n@@ -206,4 +206,34 @@\n          factory=".mail.MailAction"\n          />\n \n+    <!-- Versioning action -->\n+\n+    <adapter factory=".versioning.VersioningActionExecutor" />\n+\n+    <browser:page\n+        for="plone.app.contentrules.browser.interfaces.IRuleActionAdding"\n+        name="plone.actions.Versioning"\n+        class=".versioning.VersioningAddFormView"\n+        permission="plone.app.contentrules.ManageContentRules"\n+      />\n+\n+    <browser:page\n+        for="plone.app.contentrules.actions.versioning.IVersioningAction"\n+        name="edit"\n+        class=".versioning.VersioningEditFormView"\n+        permission="plone.app.contentrules.ManageContentRules"\n+      />\n+\n+    <plone:ruleAction\n+        name="plone.actions.Versioning"\n+        title="Version object"\n+        description="Store a new version of the object"\n+        for="*"\n+        event="*"\n+        addview="plone.actions.Versioning"\n+        editview="edit"\n+        schema=".versioning.IVersioningAction"\n+        factory=".versioning.VersioningAction"\n+        />\n+\n </configure>\ndiff --git a/plone/app/contentrules/actions/versioning.py b/plone/app/contentrules/actions/versioning.py\nnew file mode 100644\nindex 0000000..c255571\n--- /dev/null\n+++ b/plone/app/contentrules/actions/versioning.py\n@@ -0,0 +1,95 @@\n+# -*- coding: utf-8 -*-\n+from OFS.SimpleItem import SimpleItem\n+from plone.app.contentrules import PloneMessageFactory as _\n+from plone.app.contentrules.actions import ActionAddForm\n+from plone.app.contentrules.actions import ActionEditForm\n+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper\n+from plone.contentrules.rule.interfaces import IExecutable\n+from plone.contentrules.rule.interfaces import IRuleElementData\n+from Products.CMFCore.utils import getToolByName\n+from zope import schema\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+\n+class IVersioningAction(Interface):\n+    """Interface for the configurable aspects of a versioning action.\n+\n+    This is also used to create add and edit forms, below.\n+    """\n+\n+    comment = schema.TextLine(\n+        title=_(u\'Comment\'),\n+        description=_(\n+            u\'The comment added to the history while versioning the content.\'),\n+        required=False,\n+    )\n+\n+\n+@implementer(IVersioningAction, IRuleElementData)\n+class VersioningAction(SimpleItem):\n+    """The actual persistent implementation of the versioning action element.\n+    """\n+\n+    comment = \'\'\n+\n+    element = \'plone.actions.Versioning\'\n+\n+    @property\n+    def summary(self):\n+        return _(\n+            u\'Versioning with comment ${comment}\',\n+            mapping=dict(comment=self.comment),\n+        )\n+\n+\n+@adapter(Interface, IVersioningAction, Interface)\n+@implementer(IExecutable)\n+class VersioningActionExecutor(object):\n+    """The executor for this action.\n+\n+    This is registered as an adapter in configure.zcml\n+    """\n+\n+    def __init__(self, context, element, event):\n+        self.context = context\n+        self.element = element\n+        self.event = event\n+\n+    def __call__(self):\n+        comment = _(self.element.comment)\n+        pr = getToolByName(self.context, \'portal_repository\')\n+        pr.save(obj=self.event.object, comment=comment)\n+        return True\n+\n+\n+class VersioningAddForm(ActionAddForm):\n+    """An add form for versioning rule actions.\n+    """\n+    schema = IVersioningAction\n+    label = _(u\'Add Versioning Action\')\n+    description = _(u\'A versioning action will store a version of a content \'\n+                    u\'no matter versioning is enabled for it or not.\')\n+    form_name = _(u\'Configure element\')\n+    Type = VersioningAction\n+\n+\n+class VersioningAddFormView(ContentRuleFormWrapper):\n+    form = VersioningAddForm\n+\n+\n+class VersioningEditForm(ActionEditForm):\n+    """An edit form for versioning rule actions.\n+\n+    z3c.form does all the magic here.\n+    """\n+    schema = IVersioningAction\n+    label = _(u\'Edit Versioning Action\')\n+    description = _(u\'A versioning action will store a version of a content \'\n+                    u\'no matter versioning is enabled for it or not.\')\n+    form_name = _(u\'Configure element\')\n+\n+\n+class VersioningEditFormView(ContentRuleFormWrapper):\n+    form = VersioningEditForm\ndiff --git a/plone/app/contentrules/tests/test_action_versioning.py b/plone/app/contentrules/tests/test_action_versioning.py\nnew file mode 100644\nindex 0000000..709a332\n--- /dev/null\n+++ b/plone/app/contentrules/tests/test_action_versioning.py\n@@ -0,0 +1,74 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contentrules.actions.versioning import VersioningAction\n+from plone.app.contentrules.actions.versioning import VersioningEditFormView\n+from plone.app.contentrules.rule import Rule\n+from plone.app.contentrules.tests.base import ContentRulesTestCase\n+from plone.contentrules.engine.interfaces import IRuleStorage\n+from plone.contentrules.rule.interfaces import IExecutable\n+from plone.contentrules.rule.interfaces import IRuleAction\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+\n+@implementer(Interface)\n+class DummyEvent(object):\n+\n+    def __init__(self, object):\n+        self.object = object\n+\n+\n+class TestVersioningAction(ContentRulesTestCase):\n+\n+    def afterSetUp(self):\n+        self.request = self.layer[\'request\']\n+\n+    def testRegistered(self):\n+        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        self.assertEqual(\'plone.actions.Versioning\', element.addview)\n+        self.assertEqual(\'edit\', element.editview)\n+        self.assertEqual(None, element.for_)\n+        self.assertEqual(None, element.event)\n+\n+    def testInvokeAddView(self):\n+        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        storage = getUtility(IRuleStorage)\n+        storage[u\'foo\'] = Rule()\n+        rule = self.portal.restrictedTraverse(\'++rule++foo\')\n+\n+        adding = getMultiAdapter((rule, self.request), name=\'+action\')\n+        addview = getMultiAdapter((adding, self.request), name=element.addview)\n+\n+        addview.form_instance.update()\n+        content = addview.form_instance.create(data={\'comment\': \'Hello world\'})\n+        addview.form_instance.add(content)\n+\n+        e = rule.actions[0]\n+        self.assertTrue(isinstance(e, VersioningAction))\n+        self.assertEqual(\'Hello world\', e.comment)\n+\n+    def testInvokeEditView(self):\n+        element = getUtility(IRuleAction, name=\'plone.actions.Versioning\')\n+        e = VersioningAction()\n+        editview = getMultiAdapter((e, self.request), name=element.editview)\n+        self.assertTrue(isinstance(editview, VersioningEditFormView))\n+\n+    def testExecute(self):\n+        e = VersioningAction()\n+        e.comment = \'Hello world\'\n+\n+        ex = getMultiAdapter(\n+            (self.folder, e, DummyEvent(self.folder)), IExecutable)\n+        # not version for now\n+        pr = self.portal.portal_repository\n+        self.assertEqual(pr.getHistoryMetadata(self.folder), [])\n+\n+        # action will create first version\n+        self.assertEqual(True, ex())\n+        self.assertEqual(\n+            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 1)\n+        # calling action again will create a second version\n+        ex()\n+        self.assertEqual(\n+            pr.getHistoryMetadata(self.folder).getLength(countPurged=False), 2)\ndiff --git a/setup.py b/setup.py\nindex f56cc53..d65fcdd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -29,7 +29,7 @@\n     namespace_packages=[\'plone\', \'plone.app\'],\n     include_package_data=True,\n     zip_safe=False,\n-    extras_require={\'test\': \'plone.app.testing\'},\n+    extras_require={\'test\': [\'plone.app.testing\', \'plone.app.contenttypes[test]\']},\n     install_requires=[\n         \'setuptools\',\n         \'plone.contentrules\',\n'

