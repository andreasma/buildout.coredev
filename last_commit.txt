Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-01-06T19:20:17+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/849c771028a060bca0aa45b511813052a350ef08

get fields of behavior schema interface

Files changed:
M plone/app/caching/purge.py

b'diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 89ef3e5..43b2dcf 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -192,7 +192,7 @@ def fieldFilter():\n             assignable = IBehaviorAssignable(self.context, None)\n             for behavior in assignable.enumerateBehaviors():\n                 if behavior.marker:\n-                    new_fields = getFieldsInOrder(behavior.marker)\n+                    new_fields = getFieldsInOrder(behavior.interface)\n                     if len(new_fields) > 0:\n                         fields = fields + new_fields\n \n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-01-07T13:26:32+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/b9fcedb6c729ed09d3a0be16c15f2472617124dd

Added test for purging scales of images of behaviors

Files changed:
A news/55.bugfix
M plone/app/caching/tests/test_purge.py

b"diff --git a/news/55.bugfix b/news/55.bugfix\nnew file mode 100644\nindex 0000000..526ef9c\n--- /dev/null\n+++ b/news/55.bugfix\n@@ -0,0 +1,2 @@\n+Purging image scales of behavior fields, e.g. lead image\n+[ksuess]\ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex 8c13c7d..4fdf391 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -9,9 +9,14 @@\n from plone.app.caching.purge import purgeOnMovedOrRemoved\n from plone.app.caching.purge import ScalesPurgePaths\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n+from plone.app.contenttypes.behaviors.leadimage \\\n+    import ILeadImageBehavior\n+from plone.app.contenttypes.interfaces import IDocument\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_ROLES\n+from plone.behavior.interfaces import IBehavior\n+from plone.behavior.interfaces import IBehaviorAssignable\n from plone.namedfile.file import NamedFile\n from plone.namedfile.file import NamedImage\n from plone.registry import Registry\n@@ -28,6 +33,7 @@\n from zope.component import provideAdapter\n from zope.component import provideHandler\n from zope.component import provideUtility\n+from zope.component import queryUtility\n from zope.component.event import objectEventNotify\n from zope.event import notify\n from zope.globalrequest import getRequest\n@@ -445,6 +451,42 @@ def setUp(self):\n             'text/csv',\n             u'data/t\xc3\xb6stfile.csv')\n \n+        # Create a page with a lead image.\n+        # For the purposes of testing, we will use the Document type and\n+        # a custom IBehaviorAssignable adapter to mark the behavior as enabled.\n+\n+        @implementer(IBehaviorAssignable)\n+        @adapter(IDocument)\n+        class TestingAssignable(object):\n+\n+            enabled = [ILeadImageBehavior]\n+            name = 'plone.leadimage'\n+\n+            def __init__(self, context):\n+                self.context = context\n+\n+            def supports(self, behavior_interface):\n+                return behavior_interface in self.enabled\n+\n+            def enumerateBehaviors(self):\n+                behavior = queryUtility(IBehavior, name=self.name)\n+                if behavior is not None:\n+                    yield behavior\n+\n+        provideAdapter(TestingAssignable)\n+\n+        self.folder.invokeFactory(\n+            'Document',\n+            'page',\n+            title='Test Page')\n+        self.page = self.folder['page']\n+\n+        leadimage_adapter = ILeadImageBehavior(self.page)\n+        leadimage_adapter.image = NamedImage(\n+            getData('data/plone-app-caching.jpg'),\n+            'image/jpg',\n+            u'plone-app-caching.jpg')\n+\n         setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES)\n \n     def test_scale_purge_paths(self):\n@@ -454,6 +496,13 @@ def test_scale_purge_paths(self):\n         scales = purge.getScales()\n         scalepaths = [prefix + '/@@images/image/' + str(i) for i in scales]\n         [self.assertIn(j, paths) for j in scalepaths]\n+        # lead image scales (example for an image field of a behavior)\n+        prefix = '/'.join(self.page.getPhysicalPath())\n+        purge = ScalesPurgePaths(self.page)\n+        paths = purge.getRelativePaths()\n+        scales = purge.getScales()\n+        scalepaths = [prefix + '/@@images/image/' + str(i) for i in scales]\n+        [self.assertIn(j, paths) for j in scalepaths]\n \n     def test_scale_purge_paths_unicode(self):\n         purge = ScalesPurgePaths(self.file)\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-01-21T19:13:33+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/3ffeaf177c4de712c432d8b0a6f0de106dad9b76

we want all behavior fields

not only the ones of behaviors with marker.
marker is optional in contrast to interface which is always provided.

Files changed:
M plone/app/caching/purge.py

b'diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 43b2dcf..d81017e 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -191,10 +191,9 @@ def fieldFilter():\n             fields = getFieldsInOrder(schema)\n             assignable = IBehaviorAssignable(self.context, None)\n             for behavior in assignable.enumerateBehaviors():\n-                if behavior.marker:\n-                    new_fields = getFieldsInOrder(behavior.interface)\n-                    if len(new_fields) > 0:\n-                        fields = fields + new_fields\n+                new_fields = getFieldsInOrder(behavior.interface)\n+                if len(new_fields) > 0:\n+                    fields = fields + new_fields\n \n             obj_fields = []\n             for key, value in fields:\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-01-23T10:58:26+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/c4b80c2a44bf5281f478cca6df1c6e62e0adc258

Merge pull request #55 from plone/purging-image-scales-of-behavior-fields

Purging image scales of behavior fields

Files changed:
A news/55.bugfix
M plone/app/caching/purge.py
M plone/app/caching/tests/test_purge.py

b"diff --git a/news/55.bugfix b/news/55.bugfix\nnew file mode 100644\nindex 0000000..526ef9c\n--- /dev/null\n+++ b/news/55.bugfix\n@@ -0,0 +1,2 @@\n+Purging image scales of behavior fields, e.g. lead image\n+[ksuess]\ndiff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 89ef3e5..d81017e 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -191,10 +191,9 @@ def fieldFilter():\n             fields = getFieldsInOrder(schema)\n             assignable = IBehaviorAssignable(self.context, None)\n             for behavior in assignable.enumerateBehaviors():\n-                if behavior.marker:\n-                    new_fields = getFieldsInOrder(behavior.marker)\n-                    if len(new_fields) > 0:\n-                        fields = fields + new_fields\n+                new_fields = getFieldsInOrder(behavior.interface)\n+                if len(new_fields) > 0:\n+                    fields = fields + new_fields\n \n             obj_fields = []\n             for key, value in fields:\ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex 8c13c7d..4fdf391 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -9,9 +9,14 @@\n from plone.app.caching.purge import purgeOnMovedOrRemoved\n from plone.app.caching.purge import ScalesPurgePaths\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n+from plone.app.contenttypes.behaviors.leadimage \\\n+    import ILeadImageBehavior\n+from plone.app.contenttypes.interfaces import IDocument\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_ROLES\n+from plone.behavior.interfaces import IBehavior\n+from plone.behavior.interfaces import IBehaviorAssignable\n from plone.namedfile.file import NamedFile\n from plone.namedfile.file import NamedImage\n from plone.registry import Registry\n@@ -28,6 +33,7 @@\n from zope.component import provideAdapter\n from zope.component import provideHandler\n from zope.component import provideUtility\n+from zope.component import queryUtility\n from zope.component.event import objectEventNotify\n from zope.event import notify\n from zope.globalrequest import getRequest\n@@ -445,6 +451,42 @@ def setUp(self):\n             'text/csv',\n             u'data/t\xc3\xb6stfile.csv')\n \n+        # Create a page with a lead image.\n+        # For the purposes of testing, we will use the Document type and\n+        # a custom IBehaviorAssignable adapter to mark the behavior as enabled.\n+\n+        @implementer(IBehaviorAssignable)\n+        @adapter(IDocument)\n+        class TestingAssignable(object):\n+\n+            enabled = [ILeadImageBehavior]\n+            name = 'plone.leadimage'\n+\n+            def __init__(self, context):\n+                self.context = context\n+\n+            def supports(self, behavior_interface):\n+                return behavior_interface in self.enabled\n+\n+            def enumerateBehaviors(self):\n+                behavior = queryUtility(IBehavior, name=self.name)\n+                if behavior is not None:\n+                    yield behavior\n+\n+        provideAdapter(TestingAssignable)\n+\n+        self.folder.invokeFactory(\n+            'Document',\n+            'page',\n+            title='Test Page')\n+        self.page = self.folder['page']\n+\n+        leadimage_adapter = ILeadImageBehavior(self.page)\n+        leadimage_adapter.image = NamedImage(\n+            getData('data/plone-app-caching.jpg'),\n+            'image/jpg',\n+            u'plone-app-caching.jpg')\n+\n         setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES)\n \n     def test_scale_purge_paths(self):\n@@ -454,6 +496,13 @@ def test_scale_purge_paths(self):\n         scales = purge.getScales()\n         scalepaths = [prefix + '/@@images/image/' + str(i) for i in scales]\n         [self.assertIn(j, paths) for j in scalepaths]\n+        # lead image scales (example for an image field of a behavior)\n+        prefix = '/'.join(self.page.getPhysicalPath())\n+        purge = ScalesPurgePaths(self.page)\n+        paths = purge.getRelativePaths()\n+        scales = purge.getScales()\n+        scalepaths = [prefix + '/@@images/image/' + str(i) for i in scales]\n+        [self.assertIn(j, paths) for j in scalepaths]\n \n     def test_scale_purge_paths_unicode(self):\n         purge = ScalesPurgePaths(self.file)\n"

