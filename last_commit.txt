Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T12:12:32+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.event/commit/c85d45ec8e87b8682483f2d86ee524cfc36d145d

deal with the fact that to_ical returns bytes in py3
fix all tests in py3

Files changed:
M plone/app/event/browser/event_summary.pt
M plone/app/event/ical/importer.py
M plone/app/event/portlets/__init__.py
M plone/app/event/tests/test_event_listing.py
M plone/app/event/tests/test_icalendar.py
M plone/app/event/tests/test_recurrence.py

b'diff --git a/plone/app/event/browser/event_summary.pt b/plone/app/event/browser/event_summary.pt\nindex 8b7976d4..406c9bf9 100644\n--- a/plone/app/event/browser/event_summary.pt\n+++ b/plone/app/event/browser/event_summary.pt\n@@ -32,7 +32,8 @@\n         <strong i18n:translate="event_when">When</strong>\n         <span tal:define="start_tzname data/timezone;\n                       start_utcdelta python:data.start.tzinfo.utcoffset(data.start);\n-                      start_utcoffset python:(start_utcdelta.days*86400+start_utcdelta.seconds)*100/60/60;">\n+                      start_utcoffset python:(start_utcdelta.days*86400+start_utcdelta.seconds)*100/60/60;\n+                      start_utcoffset python:int(start_utcoffset)">\n           <tal:date replace="structure python:view.formatted_date(context)" />\n           <span class="timezone"\n               tal:condition="start_tzname">\ndiff --git a/plone/app/event/ical/importer.py b/plone/app/event/ical/importer.py\nindex 1a089096..7643136b 100644\n--- a/plone/app/event/ical/importer.py\n+++ b/plone/app/event/ical/importer.py\n@@ -30,6 +30,7 @@\n import datetime\n import icalendar\n import random\n+import six\n import transaction\n \n from six.moves import urllib\n@@ -74,7 +75,10 @@ def _from_list(ical, prop):\n         ret = \'\'\n         for item in val:\n             ret = \'%s,\' % ret if ret else ret  # insert linebreak\n-            ret = \'%s%s\' % (ret, item.to_ical())\n+            ical_val = item.to_ical()\n+            if six.PY3 and isinstance(ical_val, six.binary_type):\n+                ical_val = ical_val.decode(\'utf8\')\n+            ret = \'%s%s\' % (ret, ical_val)\n         return \'%s:%s\' % (prop, ret) if ret else None\n \n     count = 0\n@@ -124,7 +128,11 @@ def _from_list(ical, prop):\n         url = _get_prop(\'URL\', item)\n \n         rrule = _get_prop(\'RRULE\', item)\n-        rrule = \'RRULE:%s\' % rrule.to_ical() if rrule else \'\'\n+        rrule = rrule.to_ical() if rrule else \'\'\n+        if rrule:\n+            if six.PY3 and isinstance(rrule, six.binary_type):\n+                rrule = rrule.decode(\'utf8\')\n+            rrule = \'RRULE:%s\' % rrule\n         rdates = _from_list(item, \'RDATE\')\n         exdates = _from_list(item, \'EXDATE\')\n         rrule = \'\\n\'.join([it for it in [rrule, rdates, exdates] if it])\ndiff --git a/plone/app/event/portlets/__init__.py b/plone/app/event/portlets/__init__.py\nindex 60eb2861..83269057 100644\n--- a/plone/app/event/portlets/__init__.py\n+++ b/plone/app/event/portlets/__init__.py\n@@ -2,7 +2,6 @@\n from plone.app.event.base import find_ploneroot\n from plone.app.event.base import find_navroot\n \n-\n import six\n \n \n@@ -13,7 +12,7 @@ def get_calendar_url(context, search_base):\n     calendar_url = None\n     if search_base:\n         portal = find_ploneroot(context)\n-        if isinstance(search_base, six.text_type):\n+        if six.PY2 and isinstance(search_base, six.text_type):\n             search_base = search_base.encode(\'utf8\')\n         search_base = \'/\'.join(search_base.split(\'/\')[2:])\n         calendar_url = portal.unrestrictedTraverse(\ndiff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py\nindex 147bf397..25210be2 100644\n--- a/plone/app/event/tests/test_event_listing.py\n+++ b/plone/app/event/tests/test_event_listing.py\n@@ -52,8 +52,8 @@ def test_events_listing_ical(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n-        icalstr = \'\'.join(output)\n-        self.assertTrue(\'Long Event\' in icalstr)\n+        icalstr = b\'\'.join(output)\n+        self.assertTrue(b\'Long Event\' in icalstr)\n \n \n class TestEventsListingCollection(TestEventsListingPortal):\ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex e24b3ae4..b994ec37 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -14,6 +14,7 @@\n \n import os\n import pytz\n+import six\n import unittest\n \n \n@@ -45,6 +46,8 @@ def test_event_ical(self):\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n \n         self.checkOrder(\n@@ -96,6 +99,8 @@ def test_event_occurrence_ical(self):\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Now Event\' in icalstr)\n         self.assertTrue(\'RRULE\' not in icalstr)\n@@ -107,6 +112,8 @@ def test_portal_ical(self):\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n \n         # No occurrences in export. Otherwise count would be 8.\n@@ -201,6 +208,8 @@ def test_event_listing_ical_portal(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         # No occurrences in export. Otherwise count would be 8.\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n@@ -220,6 +229,8 @@ def test_event_listing_ical_portal__specific_date(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 2)\n         self.assertTrue(\'Past Event\' in icalstr)\n@@ -237,6 +248,8 @@ def test_collection_ical(self):\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \n@@ -259,6 +272,8 @@ def test_collection_all_ical(self):\n         self.assertEqual(len(headers), 4)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \ndiff --git a/plone/app/event/tests/test_recurrence.py b/plone/app/event/tests/test_recurrence.py\nindex 513f9a07..e7c612bd 100644\n--- a/plone/app/event/tests/test_recurrence.py\n+++ b/plone/app/event/tests/test_recurrence.py\n@@ -24,9 +24,11 @@\n from zope.annotation.interfaces import IAnnotations\n from zope.interface import alsoProvides\n from zope.publisher.interfaces.browser import IBrowserView\n+\n import datetime\n import mock\n import pytz\n+import six\n import transaction\n import unittest\n import zope.component\n@@ -102,7 +104,9 @@ def test_traverse_occurrence(self):\n         )\n         url = \'/\'.join([self.now_event.absolute_url(), \'2013-05-07\'])\n         browser.open(url)\n-        title = self.now_event.title.encode(\'ascii\')\n+        title = self.now_event.title\n+        if six.PY2:\n+            title = title.encode(\'ascii\')\n         self.assertTrue(title in browser.contents)\n \n     def test_traverse_occurrence_imagescaling(self):\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T12:12:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.event/commit/9d0eb839d2778c7a57cd3bcee7091f2b61ac2d9d

reduce deprecation warnings

Files changed:
M plone/app/event/testing.py

b"diff --git a/plone/app/event/testing.py b/plone/app/event/testing.py\nindex 18b11532..43ff54ea 100644\n--- a/plone/app/event/testing.py\n+++ b/plone/app/event/testing.py\n@@ -6,6 +6,7 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.registry.interfaces import IRegistry\n from plone.testing import z2\n+from plone.testing import zope\n from zope.component import getUtility\n from zope.interface import alsoProvides\n \n@@ -68,7 +69,7 @@ def setUpZope(self, app, configurationContext):\n         self.ostz = os_zone()\n \n         # Install products that use an old-style initialize() function\n-        z2.installProduct(app, 'Products.DateRecurringIndex')\n+        zope.installProduct(app, 'Products.DateRecurringIndex')\n \n         # Load ZCML\n         import plone.app.event\n@@ -80,7 +81,7 @@ def setUpPloneSite(self, portal):\n \n     def tearDownZope(self, app):\n         # Uninstall old-style Products\n-        z2.uninstallProduct(app, 'Products.DateRecurringIndex')\n+        zope.uninstallProduct(app, 'Products.DateRecurringIndex')\n \n         # reset OS TZ\n         if self.ostz:\n@@ -115,6 +116,7 @@ def setUpPloneSite(self, portal):\n         self.applyProfile(portal, 'plone.app.event:testing')\n         set_timezone(tz='UTC')\n \n+\n PAEventDX_FIXTURE = PAEventDXLayer()\n PAEventDX_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PAEventDX_FIXTURE,),\n"

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T12:13:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.event/commit/1c6eb122ba4a2f1d1cdbf24977984d43823c0bc6

one deprecation less

Files changed:
M CHANGES.rst
M plone/app/event/testing.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 8d8b2de2..c7738238 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,9 @@ New features:\n \n Bug fixes:\n \n+- Python 3 compatibility.\n+  [pbauer]\n+\n - Make sure to include the \'Content-Length\' header for ical exports\n   [frapell]\n \ndiff --git a/plone/app/event/testing.py b/plone/app/event/testing.py\nindex 43ff54ea..377f3859 100644\n--- a/plone/app/event/testing.py\n+++ b/plone/app/event/testing.py\n@@ -126,5 +126,9 @@ def setUpPloneSite(self, portal):\n     bases=(PAEventDX_FIXTURE,),\n     name="PAEventDX:Functional")\n PAEventDX_ROBOT_TESTING = FunctionalTesting(\n-    bases=(PAEventDX_FIXTURE, AUTOLOGIN_LIBRARY_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(\n+        PAEventDX_FIXTURE,\n+        AUTOLOGIN_LIBRARY_FIXTURE,\n+        zope.WSGI_SERVER_FIXTURE,\n+    ),\n     name="plone.app.event.dx:Robot")\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T15:40:15+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/e0dad8f4517f3f202dd1a2ffbedb0df71bb4a3d1

do not yet depend on unreleased py3 branch plone.app.testing features

Files changed:
M plone/app/event/testing.py

b'diff --git a/plone/app/event/testing.py b/plone/app/event/testing.py\nindex 377f3859..d71db8af 100644\n--- a/plone/app/event/testing.py\n+++ b/plone/app/event/testing.py\n@@ -6,7 +6,6 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.registry.interfaces import IRegistry\n from plone.testing import z2\n-from plone.testing import zope\n from zope.component import getUtility\n from zope.interface import alsoProvides\n \n@@ -69,7 +68,7 @@ def setUpZope(self, app, configurationContext):\n         self.ostz = os_zone()\n \n         # Install products that use an old-style initialize() function\n-        zope.installProduct(app, \'Products.DateRecurringIndex\')\n+        z2.installProduct(app, \'Products.DateRecurringIndex\')\n \n         # Load ZCML\n         import plone.app.event\n@@ -81,7 +80,7 @@ def setUpPloneSite(self, portal):\n \n     def tearDownZope(self, app):\n         # Uninstall old-style Products\n-        zope.uninstallProduct(app, \'Products.DateRecurringIndex\')\n+        z2.uninstallProduct(app, \'Products.DateRecurringIndex\')\n \n         # reset OS TZ\n         if self.ostz:\n@@ -129,6 +128,6 @@ def setUpPloneSite(self, portal):\n     bases=(\n         PAEventDX_FIXTURE,\n         AUTOLOGIN_LIBRARY_FIXTURE,\n-        zope.WSGI_SERVER_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n     ),\n     name="plone.app.event.dx:Robot")\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T18:11:55+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/a7dc900542339272dd4785eb88f597e97121de7e

simplify stuff a bit

Files changed:
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.py
M plone/app/event/tests/test_portlet_calendar.py
M plone/app/event/tests/test_portlet_events.py

b'diff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py\nindex e7afddf5..ad424071 100644\n--- a/plone/app/event/portlets/portlet_calendar.py\n+++ b/plone/app/event/portlets/portlet_calendar.py\n@@ -1,31 +1,34 @@\n from Acquisition import aq_inner\n from ComputedAttribute import ComputedAttribute\n-from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from plone.app.event.base import RET_MODE_OBJECTS\n+from plone.app.event import _\n from plone.app.event.base import _prepare_range\n+from plone.app.event.base import construct_calendar\n from plone.app.event.base import expand_events\n from plone.app.event.base import first_weekday\n-from plone.app.event.base import get_events, construct_calendar\n+from plone.app.event.base import get_events\n from plone.app.event.base import localized_today\n+from plone.app.event.base import RET_MODE_OBJECTS\n from plone.app.event.base import start_end_query\n from plone.app.event.base import wkday_to_mon1\n from plone.app.event.portlets import get_calendar_url\n-from plone.app.event import _\n from plone.app.portlets.portlets import base\n from plone.app.querystring import queryparser\n from plone.app.uuid.utils import uuidToObject\n from plone.app.vocabularies.catalog import CatalogSource\n from plone.event.interfaces import IEventAccessor\n from plone.portlets.interfaces import IPortletDataProvider\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions import NotFound\n from zope import schema\n from zope.component.hooks import getSite\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n+\n import calendar\n import json\n \n+\n try:\n     from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa\n     from plone.app.contenttypes.interfaces import IFolder\n@@ -77,7 +80,6 @@ class Assignment(base.Assignment):\n \n     # reduce upgrade pain\n     state = None\n-    search_base = None\n \n     def __init__(self, state=None, search_base_uid=None):\n         self.state = state\n@@ -88,9 +90,8 @@ def _uid(self):\n         # attribute, which is probably because it has an old\n         # \'search_base\' attribute that needs to be converted.\n         path = self.search_base\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n         try:\n-            search_base = portal.unrestrictedTraverse(path.lstrip(\'/\'))\n+            search_base = getSite().unrestrictedTraverse(path.lstrip(\'/\'))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return search_base.UID()\n@@ -99,22 +100,17 @@ def _uid(self):\n \n class Renderer(base.Renderer):\n     render = ViewPageTemplateFile(\'portlet_calendar.pt\')\n-\n     _search_base = None\n \n     @property\n     def search_base(self):\n-        if not self._search_base:\n+        if not self._search_base and self.data.search_base_uid:\n             self._search_base = uuidToObject(self.data.search_base_uid)\n-        # aq_inner, because somehow search_base gets wrapped by the renderer\n-        return aq_inner(self._search_base)\n+        return aq_inner(self._search_base) if self._search_base else None\n \n     @property\n     def search_base_path(self):\n-        search_base = self.search_base\n-        if search_base is not None:\n-            search_base = \'/\'.join(search_base.getPhysicalPath())\n-        return search_base\n+        return \'/\'.join(self.search_base.getPhysicalPath()) if self.search_base else None  # noqa\n \n     def update(self):\n         context = aq_inner(self.context)\n@@ -208,11 +204,10 @@ def cal_data(self):\n \n         events = []\n         query.update(self.request.get(\'contentFilter\', {}))\n-        search_base = self.search_base\n-        if ICollection and ICollection.providedBy(search_base):\n+        if ICollection and ICollection.providedBy(self.search_base):\n             # Whatever sorting is defined, we\'re overriding it.\n             query = queryparser.parseFormquery(\n-                search_base, search_base.query,\n+                self.search_base, self.search_base.query,\n                 sort_on=\'start\', sort_order=None\n             )\n \n@@ -222,9 +217,9 @@ def cal_data(self):\n             if \'end\' in query and query[\'end\'] < end:\n                 end = query[\'end\']\n \n-            start, end = _prepare_range(search_base, start, end)\n+            start, end = _prepare_range(self.search_base, start, end)\n             query.update(start_end_query(start, end))\n-            events = search_base.results(\n+            events = self.search_base.results(\n                 batch=False, brains=True, custom_query=query\n             )\n             events = expand_events(\n@@ -233,9 +228,8 @@ def cal_data(self):\n                 sort=\'start\', sort_reverse=False\n             )\n         else:\n-            search_base_path = self.search_base_path\n-            if search_base_path:\n-                query[\'path\'] = {\'query\': search_base_path}\n+            if self.search_base_path:\n+                query[\'path\'] = {\'query\': self.search_base_path}\n             events = get_events(context, start=start, end=end,\n                                 ret_mode=RET_MODE_OBJECTS,\n                                 expand=True, **query)\n@@ -305,8 +299,10 @@ class AddForm(base.AddForm):\n     description = _(u"This portlet displays events in a calendar.")\n \n     def create(self, data):\n-        return Assignment(state=data.get(\'state\', None),\n-                          search_base_uid=data.get(\'search_base_uid\', None))\n+        return Assignment(\n+            state=data.get(\'state\', None),\n+            search_base_uid=data.get(\'search_base_uid\', None)\n+        )\n \n \n class EditForm(base.EditForm):\ndiff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py\nindex d5b0e923..4416ebab 100644\n--- a/plone/app/event/portlets/portlet_events.py\n+++ b/plone/app/event/portlets/portlet_events.py\n@@ -1,31 +1,30 @@\n from Acquisition import aq_inner\n from ComputedAttribute import ComputedAttribute\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from plone.app.event.base import expand_events\n+from plone.app.event import _\n from plone.app.event.base import _prepare_range\n-from plone.app.event.base import start_end_query\n-from plone.app.event.base import RET_MODE_ACCESSORS\n+from plone.app.event.base import expand_events\n from plone.app.event.base import get_events\n from plone.app.event.base import localized_now\n+from plone.app.event.base import RET_MODE_ACCESSORS\n+from plone.app.event.base import start_end_query\n from plone.app.event.portlets import get_calendar_url\n-from plone.app.event.portlets.portlet_calendar import (\n-    ICollection, search_base_uid_source\n-)\n-from plone.app.event import _\n+from plone.app.event.portlets.portlet_calendar import ICollection\n+from plone.app.event.portlets.portlet_calendar import search_base_uid_source\n from plone.app.portlets.portlets import base\n+from plone.app.querystring import queryparser\n from plone.app.uuid.utils import uuidToObject\n from plone.memoize.compress import xhtml_compress\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions import NotFound\n from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n+from zope.component.hooks import getSite\n from zope.contentprovider.interfaces import IContentProvider\n from zope.interface import implementer\n-from plone.app.querystring import queryparser\n \n \n class IEventsPortlet(IPortletDataProvider):\n@@ -84,7 +83,6 @@ class IEventsPortlet(IPortletDataProvider):\n class Assignment(base.Assignment):\n \n     # reduce upgrade pain\n-    search_base = None\n     thumb_scale = None\n     no_thumbs = False\n \n@@ -105,9 +103,8 @@ def _uid(self):\n         # attribute, which is probably because it has an old\n         # \'search_base\' attribute that needs to be converted.\n         path = self.search_base\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n         try:\n-            search_base = portal.unrestrictedTraverse(path.lstrip(\'/\'))\n+            search_base = getSite().unrestrictedTraverse(path.lstrip(\'/\'))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return search_base.UID()\n@@ -117,39 +114,24 @@ def _uid(self):\n class Renderer(base.Renderer):\n \n     _template = ViewPageTemplateFile(\'portlet_events.pt\')\n-\n     _search_base = None\n \n     @property\n     def search_base(self):\n-        if not self._search_base:\n+        if not self._search_base and self.data.search_base_uid:\n             self._search_base = uuidToObject(self.data.search_base_uid)\n-        # aq_inner, because somehow search_base gets wrapped by the renderer\n-        return aq_inner(self._search_base)\n+        return aq_inner(self._search_base) if self._search_base else None\n \n     @property\n     def search_base_path(self):\n-        search_base = self.search_base\n-        if search_base is not None:\n-            search_base = \'/\'.join(search_base.getPhysicalPath())\n-        return search_base\n-\n-    def __init__(self, *args):\n-        base.Renderer.__init__(self, *args)\n+        return \'/\'.join(self.search_base.getPhysicalPath()) if self.search_base else None  # noqa\n \n+    def update(self):\n         context = aq_inner(self.context)\n-\n         calendar_url = get_calendar_url(context, self.search_base_path)\n-\n         self.next_url = \'%s?mode=future\' % calendar_url\n         self.prev_url = \'%s?mode=past\' % calendar_url\n \n-        portal_state = getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_portal_state\'\n-        )\n-        self.portal = portal_state.portal()\n-\n     def render(self):\n         return xhtml_compress(self._template())\n \n@@ -168,11 +150,10 @@ def events(self):\n \n         events = []\n         query.update(self.request.get(\'contentFilter\', {}))\n-        search_base = self.search_base\n-        if ICollection and ICollection.providedBy(search_base):\n+        if ICollection and ICollection.providedBy(self.search_base):\n             # Whatever sorting is defined, we\'re overriding it.\n             query = queryparser.parseFormquery(\n-                search_base, search_base.query,\n+                self.search_base, self.search_base.query,\n                 sort_on=\'start\', sort_order=None\n             )\n \n@@ -186,9 +167,9 @@ def events(self):\n             if \'end\' in query:\n                 end = query[\'end\']\n \n-            start, end = _prepare_range(search_base, start, end)\n+            start, end = _prepare_range(self.search_base, start, end)\n             query.update(start_end_query(start, end))\n-            events = search_base.results(\n+            events = self.search_base.results(\n                 batch=False, brains=True, custom_query=query,\n                 limit=data.count\n             )\n@@ -199,9 +180,8 @@ def events(self):\n             )\n             events = events[:data.count]  # limit expanded\n         else:\n-            search_base_path = self.search_base_path\n-            if search_base_path:\n-                query[\'path\'] = {\'query\': search_base_path}\n+            if self.search_base_path:\n+                query[\'path\'] = {\'query\': self.search_base_path}\n             events = get_events(\n                 context, start=localized_now(context),\n                 ret_mode=RET_MODE_ACCESSORS,\n@@ -245,7 +225,7 @@ class AddForm(base.AddForm):\n     def create(self, data):\n         return Assignment(count=data.get(\'count\', 5),\n                           state=data.get(\'state\', None),\n-                          search_base_uid=data.get(\'search_base_uid\', 5))\n+                          search_base_uid=data.get(\'search_base_uid\', None))\n \n \n class EditForm(base.EditForm):\ndiff --git a/plone/app/event/tests/test_portlet_calendar.py b/plone/app/event/tests/test_portlet_calendar.py\nindex 4fd54767..ecb4d98c 100644\n--- a/plone/app/event/tests/test_portlet_calendar.py\n+++ b/plone/app/event/tests/test_portlet_calendar.py\n@@ -195,12 +195,12 @@ def test_long_event(self):\n \n     def test_event_created_last_day_of_month_invalidate_cache(self):\n         # First render the calendar portlet when there\'s no events\n-        portlet = self.renderer(assignment=portlet_calendar.Assignment())\n-        portlet.update()\n-        html = portlet.render()\n+        r = self.renderer(assignment=portlet_calendar.Assignment())\n+        r.update()\n+        html = r.render()\n \n         # Now let\'s add a new event on the first day of the current month\n-        year, month = portlet.year_month_display()\n+        year, month = r.year_month_display()\n         day = monthrange(year, month)[1]  # (wkday, days)\n \n         tz = pytz.timezone(TZNAME)\n@@ -212,10 +212,10 @@ def test_event_created_last_day_of_month_invalidate_cache(self):\n         )\n \n         # Try to render the calendar portlet again, it must be different Now\n-        portlet = self.renderer(assignment=portlet_calendar.Assignment())\n-        portlet.update()\n+        r = self.renderer(assignment=portlet_calendar.Assignment())\n+        r.update()\n         self.assertNotEqual(\n-            html, portlet.render(), "Cache key wasn\'t invalidated"\n+            html, r.render(), "Cache key wasn\'t invalidated"\n         )\n \n     def test_event_nonascii(self):\n@@ -229,21 +229,21 @@ def test_event_nonascii(self):\n             self.portal, PTYPE, title=title, start=start, end=end,\n             location=u\'M\xc3\xbcnchen\')\n         self.wft.doActionFor(e1, \'publish\')\n-        portlet = self.renderer(assignment=portlet_calendar.Assignment())\n-        portlet.update()\n-        self.assertTrue(title in portlet.render())\n+        r = self.renderer(assignment=portlet_calendar.Assignment())\n+        r.update()\n+        self.assertTrue(title in r.render())\n \n     def test_prev_next_query(self):\n-        portlet = self.renderer(assignment=portlet_calendar.Assignment())\n-        portlet.update()\n+        r = self.renderer(assignment=portlet_calendar.Assignment())\n+        r.update()\n \n-        year, month = portlet.year_month_display()\n+        year, month = r.year_month_display()\n         prev_expected = \'?month={1}&year={0}\'.format(\n-            *portlet.get_previous_month(year, month))\n+            *r.get_previous_month(year, month))\n         next_expected = \'?month={1}&year={0}\'.format(\n-            *portlet.get_next_month(year, month))\n-        self.assertEqual(next_expected, portlet.next_query)\n-        self.assertEqual(prev_expected, portlet.prev_query)\n+            *r.get_next_month(year, month))\n+        self.assertEqual(next_expected, r.next_query)\n+        self.assertEqual(prev_expected, r.prev_query)\n \n     def test_invalid_request(self):\n         self.request.form[\'month\'] = [3, 4]\ndiff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py\nindex c7350cd4..4d152151 100644\n--- a/plone/app/event/tests/test_portlet_events.py\n+++ b/plone/app/event/tests/test_portlet_events.py\n@@ -164,30 +164,35 @@ def test_portlet_event_renderer__get_events(self):\n             self.portal.eventfolder, PTYPE,\n             id=\'e2\', title=\'e2\', start=start, end=end)\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(\n+        r = self.renderer(assignment=portlet_events.Assignment(\n             count=5, state=(\'draft\',)))\n-        self.assertEqual(0, len(portlet.events))\n+        r.update()\n+        self.assertEqual(0, len(r.events))\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(\n+        r = self.renderer(assignment=portlet_events.Assignment(\n             count=5, state=(\'published\', )))\n-        self.assertEqual(1, len(portlet.events))\n+        r.update()\n+        self.assertEqual(1, len(r.events))\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(\n+        r = self.renderer(assignment=portlet_events.Assignment(\n             count=5, state=(\'published\', \'private\',)))\n-        self.assertEqual(2, len(portlet.events))\n+        r.update()\n+        self.assertEqual(2, len(r.events))\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(count=5))\n-        self.assertEqual(2, len(portlet.events))\n+        r = self.renderer(assignment=portlet_events.Assignment(count=5))\n+        r.update()\n+        self.assertEqual(2, len(r.events))\n \n         # No search base gives calendar urls with event_listing part\n-        self.assertTrue(\'event_listing\' in portlet.render())\n+        self.assertTrue(\'event_listing\' in r.render())\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(\n+        r = self.renderer(assignment=portlet_events.Assignment(\n             count=5, search_base_uid=self.portal.eventfolder.UID()))\n-        self.assertEqual(1, len(portlet.events))\n+        r.update()\n+        self.assertEqual(1, len(r.events))\n \n         # A given search base gives calendar urls without event_listing part\n-        self.assertTrue(\'event_listing\' not in portlet.render())\n+        self.assertTrue(\'event_listing\' not in r.render())\n \n     def test_portlet_event_renderer__recurring(self):\n         tz = pytz.timezone(TZNAME)\n@@ -205,6 +210,7 @@ def test_portlet_event_renderer__recurring(self):\n         r = self.renderer(\n             assignment=portlet_events.Assignment(count=5,\n                                                  state=(\'published\',)))\n+        r.update()\n         events = r.events\n         self.assertEqual(5, len(events))\n         self.assertTrue(\'Event 2\' not in [x.title for x in events])\n@@ -222,6 +228,7 @@ def test_portlet_event_renderer__recurring(self):\n \n     def test_portlet_event_renderer__listing_link(self):\n         r = self.renderer(assignment=portlet_events.Assignment(count=5))\n+        r.update()\n         rd = r.render()\n         self.assertTrue(\'?mode=future\' in rd)\n         self.assertTrue(\'?mode=past\' in rd)\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T18:11:55+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/92cffcc7cb6cb18970a1c2fdf8301322ce64a79f

fix tests

Files changed:
M plone/app/event/tests/test_portlet_events.py

b"diff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py\nindex 4d152151..c3aa4ca2 100644\n--- a/plone/app/event/tests/test_portlet_events.py\n+++ b/plone/app/event/tests/test_portlet_events.py\n@@ -1,15 +1,13 @@\n-from Products.CMFCore.utils import getToolByName\n-from Products.GenericSetup.utils import _getDottedName\n-from datetime import datetime\n from datetime import timedelta\n+from plone.app.event.base import localized_now\n from plone.app.event.portlets import portlet_events\n-from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import PAEvent_INTEGRATION_TESTING\n+from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import set_env_timezone\n from plone.app.event.testing import set_timezone\n from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.dexterity.utils import createContentInContainer\n from plone.portlets.interfaces import IPortletAssignment\n@@ -17,6 +15,8 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n+from Products.CMFCore.utils import getToolByName\n+from Products.GenericSetup.utils import _getDottedName\n from zExceptions import Unauthorized\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -27,6 +27,7 @@\n import pytz\n import unittest\n \n+\n TZNAME = 'Australia/Brisbane'\n PTYPE = 'plone.app.event.dx.event'\n \n@@ -150,8 +151,7 @@ def renderer(self, context=None, request=None, view=None, manager=None,\n         )\n \n     def test_portlet_event_renderer__get_events(self):\n-        tz = pytz.timezone(TZNAME)\n-        start = tz.localize(datetime.now())\n+        start = localized_now()\n         end = start + timedelta(hours=1)\n \n         e1 = createContentInContainer(\n@@ -195,8 +195,7 @@ def test_portlet_event_renderer__get_events(self):\n         self.assertTrue('event_listing' not in r.render())\n \n     def test_portlet_event_renderer__recurring(self):\n-        tz = pytz.timezone(TZNAME)\n-        start = tz.localize(datetime.now()) + timedelta(days=1)\n+        start = localized_now() + timedelta(days=1)\n \n         e1 = createContentInContainer(\n             self.portal, PTYPE, id='e1', title='Event 1', start=start,\n"

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T18:11:55+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/9478d4b7366a3a5a743f059034577a28d1f8d2cf

utf8 headers, isort

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/event/__init__.py
M plone/app/event/base.py
M plone/app/event/browser/__init__.py
M plone/app/event/browser/event_listing.py
M plone/app/event/browser/event_summary.py
M plone/app/event/browser/event_view.py
M plone/app/event/browser/formatted_date.py
M plone/app/event/browser/leadimage_viewlet.py
M plone/app/event/dx/__init__.py
M plone/app/event/dx/behaviors.py
M plone/app/event/dx/interfaces.py
M plone/app/event/dx/traverser.py
M plone/app/event/ical/__init__.py
M plone/app/event/ical/exporter.py
M plone/app/event/ical/importer.py
M plone/app/event/interfaces.py
M plone/app/event/portlets/__init__.py
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.py
M plone/app/event/recurrence.py
M plone/app/event/setuphandlers.py
M plone/app/event/testing.py
M plone/app/event/tests/__init__.py
M plone/app/event/tests/base_setup.py
M plone/app/event/tests/test_base_module.py
M plone/app/event/tests/test_catalog.py
M plone/app/event/tests/test_event_listing.py
M plone/app/event/tests/test_event_summary.py
M plone/app/event/tests/test_event_view.py
M plone/app/event/tests/test_icalendar.py
M plone/app/event/tests/test_portlet_calendar.py
M plone/app/event/tests/test_portlet_events.py
M plone/app/event/tests/test_recurrence.py
M plone/app/event/vocabularies.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad105..68c04af4 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,2 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+# -*- coding: utf-8 -*-\n+__import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex f48ad105..68c04af4 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,6 +1,2 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+# -*- coding: utf-8 -*-\n+__import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/event/__init__.py b/plone/app/event/__init__.py\nindex da0b257c..ac2e4a0c 100644\n--- a/plone/app/event/__init__.py\n+++ b/plone/app/event/__init__.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Products.CMFCore.permissions import setDefaultRoles\n from zope.i18nmessageid import MessageFactory\n \ndiff --git a/plone/app/event/base.py b/plone/app/event/base.py\nindex c03ea827..77f0e2dc 100644\n--- a/plone/app/event/base.py\n+++ b/plone/app/event/base.py\n@@ -1,4 +1,4 @@\n-\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from calendar import monthrange\ndiff --git a/plone/app/event/browser/__init__.py b/plone/app/event/browser/__init__.py\nindex e69de29b..40a96afc 100644\n--- a/plone/app/event/browser/__init__.py\n+++ b/plone/app/event/browser/__init__.py\n@@ -0,0 +1 @@\n+# -*- coding: utf-8 -*-\ndiff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py\nindex 3c49bf03..5aa1b826 100644\n--- a/plone/app/event/browser/event_listing.py\n+++ b/plone/app/event/browser/event_listing.py\n@@ -1,26 +1,28 @@\n-from Products.CMFPlone.PloneBatch import Batch\n-from Products.Five.browser import BrowserView\n+# -*- coding: utf-8 -*-\n from calendar import monthrange\n from datetime import date\n from datetime import timedelta\n from plone.app.event import _\n-from plone.app.event.base import RET_MODE_ACCESSORS\n-from plone.app.event.base import RET_MODE_OBJECTS\n from plone.app.event.base import _prepare_range\n-from plone.app.event.base import spell_date\n from plone.app.event.base import expand_events\n from plone.app.event.base import get_events\n from plone.app.event.base import guess_date_from\n from plone.app.event.base import localized_now\n+from plone.app.event.base import RET_MODE_ACCESSORS\n+from plone.app.event.base import RET_MODE_OBJECTS\n+from plone.app.event.base import spell_date\n from plone.app.event.base import start_end_from_mode\n from plone.app.event.base import start_end_query\n from plone.app.event.ical.exporter import construct_icalendar\n from plone.app.querystring import queryparser\n from plone.memoize import view\n from plone.uuid.interfaces import IUUID\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.Five.browser import BrowserView\n from zope.component import getMultiAdapter\n from zope.contentprovider.interfaces import IContentProvider\n \n+\n try:\n     from Products.CMFPlone.defaultpage import get_default_page\n except ImportError:\ndiff --git a/plone/app/event/browser/event_summary.py b/plone/app/event/browser/event_summary.py\nindex 689cae6a..a4a33b37 100644\n--- a/plone/app/event/browser/event_summary.py\n+++ b/plone/app/event/browser/event_summary.py\n@@ -1,12 +1,13 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n-from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser import BrowserView\n from plone.app.event import _\n from plone.event.interfaces import IEventAccessor\n from plone.event.interfaces import IOccurrence\n from plone.event.interfaces import IRecurrenceSupport\n from plone.memoize import view\n from plone.uuid.interfaces import IUUID\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five.browser import BrowserView\n from zope.component import getMultiAdapter\n from zope.contentprovider.interfaces import IContentProvider\n \ndiff --git a/plone/app/event/browser/event_view.py b/plone/app/event/browser/event_view.py\nindex b34dfbdf..15202bd2 100644\n--- a/plone/app/event/browser/event_view.py\n+++ b/plone/app/event/browser/event_view.py\n@@ -1,6 +1,7 @@\n-from Products.Five.browser import BrowserView\n+# -*- coding: utf-8 -*-\n from plone.event.interfaces import IEventAccessor\n from plone.event.interfaces import IOccurrence\n+from Products.Five.browser import BrowserView\n \n \n class EventView(BrowserView):\ndiff --git a/plone/app/event/browser/formatted_date.py b/plone/app/event/browser/formatted_date.py\nindex b4047767..ce133dca 100644\n--- a/plone/app/event/browser/formatted_date.py\n+++ b/plone/app/event/browser/formatted_date.py\n@@ -1,6 +1,7 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import Explicit\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from plone.app.event.base import dates_for_display\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n \n \n class FormattedDateProvider(Explicit):\ndiff --git a/plone/app/event/browser/leadimage_viewlet.py b/plone/app/event/browser/leadimage_viewlet.py\nindex f4349ff3..1d923b12 100644\n--- a/plone/app/event/browser/leadimage_viewlet.py\n+++ b/plone/app/event/browser/leadimage_viewlet.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n from plone.app.layout.viewlets import ViewletBase\ndiff --git a/plone/app/event/dx/__init__.py b/plone/app/event/dx/__init__.py\nindex 8b137891..40a96afc 100644\n--- a/plone/app/event/dx/__init__.py\n+++ b/plone/app/event/dx/__init__.py\n@@ -1 +1 @@\n-\n+# -*- coding: utf-8 -*-\ndiff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex b926276a..f11704b0 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n """Behaviors to enable calendarish event extension to dexterity content types.\n """\n from plone.app.dexterity.behaviors.metadata import ICategorization\n@@ -13,6 +14,7 @@\n from plone.app.event.base import wkday_to_mon1\n from plone.app.event.dx.interfaces import IDXEvent\n from plone.app.event.dx.interfaces import IDXEventRecurrence\n+from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.app.textfield.value import RichTextValue\n from plone.app.z3cform.widget import DatetimeFieldWidget\n from plone.autoform import directives\n@@ -39,7 +41,6 @@\n from zope.interface import invariant\n from zope.interface import provider\n from zope.schema.interfaces import IContextAwareDefaultFactory\n-from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n \n import six\n \ndiff --git a/plone/app/event/dx/interfaces.py b/plone/app/event/dx/interfaces.py\nindex 9caf2af5..5a58804c 100644\n--- a/plone/app/event/dx/interfaces.py\n+++ b/plone/app/event/dx/interfaces.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from plone.event.interfaces import IEvent\n from plone.event.interfaces import IEventRecurrence\n \ndiff --git a/plone/app/event/dx/traverser.py b/plone/app/event/dx/traverser.py\nindex 165f1fa7..dc08c4d7 100644\n--- a/plone/app/event/dx/traverser.py\n+++ b/plone/app/event/dx/traverser.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.recurrence import OccurrenceTraverser as DefaultTraverser\n from plone.app.event.dx.interfaces import IDXEventRecurrence\n from plone.dexterity.browser.traversal import DexterityPublishTraverse\ndiff --git a/plone/app/event/ical/__init__.py b/plone/app/event/ical/__init__.py\nindex 931eb312..5d70fc71 100644\n--- a/plone/app/event/ical/__init__.py\n+++ b/plone/app/event/ical/__init__.py\n@@ -1,7 +1,8 @@\n-from plone.app.event.ical.exporter import EventsICal  # nopep8\n-from plone.app.event.ical.exporter import ICalendarEventComponent  # nopep8\n+# -*- coding: utf-8 -*-\n from plone.app.event.ical.exporter import calendar_from_collection  # nopep8\n from plone.app.event.ical.exporter import calendar_from_container  # nopep8\n from plone.app.event.ical.exporter import calendar_from_event  # nopep8\n from plone.app.event.ical.exporter import construct_icalendar  # nopep8\n+from plone.app.event.ical.exporter import EventsICal  # nopep8\n+from plone.app.event.ical.exporter import ICalendarEventComponent  # nopep8\n from plone.app.event.ical.importer import ical_import  # nopep8\ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex defdfa8e..6a98d7fe 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from datetime import datetime\n from datetime import timedelta\ndiff --git a/plone/app/event/ical/importer.py b/plone/app/event/ical/importer.py\nindex 7643136b..b976f39b 100644\n--- a/plone/app/event/ical/importer.py\n+++ b/plone/app/event/ical/importer.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event import _\n from plone.app.event import base\n from plone.app.event.base import AnnotationAdapter\n@@ -14,6 +15,7 @@\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n+from six.moves import urllib\n from z3c.form import button\n from z3c.form import field\n from z3c.form import form\n@@ -33,8 +35,6 @@\n import six\n import transaction\n \n-from six.moves import urllib\n-\n \n def ical_import(container, ics_resource, event_type,\n                 sync_strategy=base.SYNC_KEEP_NEWER):\ndiff --git a/plone/app/event/interfaces.py b/plone/app/event/interfaces.py\nindex 8deb6af6..64a1f5b1 100644\n--- a/plone/app/event/interfaces.py\n+++ b/plone/app/event/interfaces.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \ndiff --git a/plone/app/event/portlets/__init__.py b/plone/app/event/portlets/__init__.py\nindex 83269057..dd39882f 100644\n--- a/plone/app/event/portlets/__init__.py\n+++ b/plone/app/event/portlets/__init__.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from plone.app.event.base import find_ploneroot\n from plone.app.event.base import find_navroot\n+from plone.app.event.base import find_ploneroot\n \n import six\n \ndiff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py\nindex ad424071..3b1c471b 100644\n--- a/plone/app/event/portlets/portlet_calendar.py\n+++ b/plone/app/event/portlets/portlet_calendar.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from ComputedAttribute import ComputedAttribute\n from plone.app.event import _\ndiff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py\nindex 4416ebab..cec1a60e 100644\n--- a/plone/app/event/portlets/portlet_events.py\n+++ b/plone/app/event/portlets/portlet_events.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from ComputedAttribute import ComputedAttribute\n from plone.app.event import _\ndiff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py\nindex 697e5b18..4ca742e5 100644\n--- a/plone/app/event/recurrence.py\n+++ b/plone/app/event/recurrence.py\n@@ -1,7 +1,6 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFPlone.utils import safe_unicode\n-from Products.Five.browser import BrowserView\n from plone.app.event.base import dt_start_of_day\n from plone.app.event.base import guess_date_from\n from plone.event.interfaces import IEventAccessor\n@@ -13,6 +12,8 @@\n from plone.event.utils import pydt\n from plone.namedfile.interfaces import IImageScaleTraversable\n from plone.namedfile.scaling import ImageScaling\n+from Products.CMFPlone.utils import safe_unicode\n+from Products.Five.browser import BrowserView\n from zope.component import adapter\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\ndiff --git a/plone/app/event/setuphandlers.py b/plone/app/event/setuphandlers.py\nindex 57ef96c4..5d4be5c9 100644\n--- a/plone/app/event/setuphandlers.py\n+++ b/plone/app/event/setuphandlers.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import INonInstallable\n from Products.ZCatalog.Catalog import CatalogError\ndiff --git a/plone/app/event/testing.py b/plone/app/event/testing.py\nindex d71db8af..14260fa0 100644\n--- a/plone/app/event/testing.py\n+++ b/plone/app/event/testing.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.interfaces import IBrowserLayer\n from plone.app.robotframework.testing import AUTOLOGIN_LIBRARY_FIXTURE\n from plone.app.testing import FunctionalTesting\ndiff --git a/plone/app/event/tests/__init__.py b/plone/app/event/tests/__init__.py\nindex e69de29b..40a96afc 100644\n--- a/plone/app/event/tests/__init__.py\n+++ b/plone/app/event/tests/__init__.py\n@@ -0,0 +1 @@\n+# -*- coding: utf-8 -*-\ndiff --git a/plone/app/event/tests/base_setup.py b/plone/app/event/tests/base_setup.py\nindex 64798b53..7f7e9dbc 100644\n--- a/plone/app/event/tests/base_setup.py\n+++ b/plone/app/event/tests/base_setup.py\n@@ -1,15 +1,17 @@\n-from Products.CMFCore.utils import getToolByName\n+# -*- coding: utf-8 -*-\n from datetime import datetime\n from datetime import timedelta\n from plone.app.event.dx import behaviors\n from plone.app.event.testing import set_browserlayer\n from plone.app.event.testing import set_timezone\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from Products.CMFCore.utils import getToolByName\n \n-import unittest\n import pytz\n+import unittest\n+\n \n TEST_TIMEZONE = \'Europe/Vienna\'\n \ndiff --git a/plone/app/event/tests/test_base_module.py b/plone/app/event/tests/test_base_module.py\nindex d092566b..4270b83f 100644\n--- a/plone/app/event/tests/test_base_module.py\n+++ b/plone/app/event/tests/test_base_module.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from datetime import date\n from datetime import datetime\n from datetime import timedelta\ndiff --git a/plone/app/event/tests/test_catalog.py b/plone/app/event/tests/test_catalog.py\nindex a0825c0f..6570916c 100644\n--- a/plone/app/event/tests/test_catalog.py\n+++ b/plone/app/event/tests/test_catalog.py\n@@ -1,5 +1,6 @@\n-from Products.CMFCore.utils import getToolByName\n+# -*- coding: utf-8 -*-\n from plone.app.event.testing import PAEvent_INTEGRATION_TESTING\n+from Products.CMFCore.utils import getToolByName\n \n import unittest\n \ndiff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py\nindex 25210be2..d0d2ab21 100644\n--- a/plone/app/event/tests/test_event_listing.py\n+++ b/plone/app/event/tests/test_event_listing.py\n@@ -1,8 +1,9 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.base import localized_today\n-from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import make_fake_response\n-from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n+from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.tests.base_setup import patched_now as PN\n+from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n \n import mock\n \ndiff --git a/plone/app/event/tests/test_event_summary.py b/plone/app/event/tests/test_event_summary.py\nindex cd73162b..f52a5415 100644\n--- a/plone/app/event/tests/test_event_summary.py\n+++ b/plone/app/event/tests/test_event_summary.py\n@@ -1,7 +1,8 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.dx.traverser import OccurrenceTraverser as OccTravDX\n from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n-from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n from plone.app.event.tests.base_setup import patched_now as PN\n+from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n \n import mock\n \ndiff --git a/plone/app/event/tests/test_event_view.py b/plone/app/event/tests/test_event_view.py\nindex 4f741760..0a2382f8 100644\n--- a/plone/app/event/tests/test_event_view.py\n+++ b/plone/app/event/tests/test_event_view.py\n@@ -1,7 +1,8 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.dx.traverser import OccurrenceTraverser as OccTravDX\n from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING\n-from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n from plone.app.event.tests.base_setup import patched_now as PN\n+from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n \n import mock\n \ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex b994ec37..49e50a4c 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -3,12 +3,12 @@\n from plone.app.event import base\n from plone.app.event.dx.traverser import OccurrenceTraverser as OccTravDX\n from plone.app.event.ical.importer import ical_import\n-from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n-from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING\n from plone.app.event.testing import make_fake_response\n+from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING\n+from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.event.interfaces import IEventAccessor\n from zope.component import getMultiAdapter\n \ndiff --git a/plone/app/event/tests/test_portlet_calendar.py b/plone/app/event/tests/test_portlet_calendar.py\nindex ecb4d98c..7e78d86a 100644\n--- a/plone/app/event/tests/test_portlet_calendar.py\n+++ b/plone/app/event/tests/test_portlet_calendar.py\n@@ -1,23 +1,23 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n-from Products.GenericSetup.utils import _getDottedName\n from calendar import monthrange\n from datetime import datetime\n from datetime import timedelta\n from plone.app.event.base import localized_today\n from plone.app.event.portlets import portlet_calendar\n-from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import PAEvent_INTEGRATION_TESTING\n+from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import set_env_timezone\n from plone.app.event.testing import set_timezone\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n from plone.portlets.interfaces import IPortletAssignment\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n+from Products.CMFCore.utils import getToolByName\n+from Products.GenericSetup.utils import _getDottedName\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component.hooks import setHooks\ndiff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py\nindex c3aa4ca2..35f47379 100644\n--- a/plone/app/event/tests/test_portlet_events.py\n+++ b/plone/app/event/tests/test_portlet_events.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from datetime import timedelta\n from plone.app.event.base import localized_now\n from plone.app.event.portlets import portlet_events\ndiff --git a/plone/app/event/tests/test_recurrence.py b/plone/app/event/tests/test_recurrence.py\nindex e7c612bd..6f7bc1b1 100644\n--- a/plone/app/event/tests/test_recurrence.py\n+++ b/plone/app/event/tests/test_recurrence.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from mock import Mock\n from OFS.SimpleItem import SimpleItem\n from plone.app.event.base import get_events\n@@ -13,7 +14,8 @@\n from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n from plone.app.event.tests.base_setup import patched_now\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID, TEST_USER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.dexterity.utils import createContentInContainer\n from plone.event.interfaces import IEvent\n from plone.event.interfaces import IEventAccessor\ndiff --git a/plone/app/event/vocabularies.py b/plone/app/event/vocabularies.py\nindex b7666291..bae395d4 100644\n--- a/plone/app/event/vocabularies.py\n+++ b/plone/app/event/vocabularies.py\n@@ -1,5 +1,6 @@\n-from plone.app.event import base\n+# -*- coding: utf-8 -*-\n from plone.app.event import _\n+from plone.app.event import base\n from zope.interface import provider\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\ndiff --git a/setup.py b/setup.py\nindex 81cf1fce..53f31672 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,5 +1,6 @@\n-from setuptools import setup\n+# -*- coding: utf-8 -*-\n from setuptools import find_packages\n+from setuptools import setup\n \n import os\n \n@@ -7,15 +8,18 @@\n version = \'3.2.0.dev0\'\n \n \n+long_description = (\'\\n\\n\'.join([\n+    open("README.rst").read(),\n+    open(os.path.join(\'docs\', \'installation.rst\')).read(),\n+    open("CHANGES.rst").read(),\n+]))\n+\n+\n setup(\n     name=\'plone.app.event\',\n     version=version,\n     description="The Plone calendar framework",\n-    long_description="%s%s%s" % (\n-        open("README.rst").read() + "\\n",\n-        open(os.path.join(\'docs\', \'installation.rst\')).read() + "\\n",\n-        open("CHANGES.rst").read(),\n-    ),\n+    long_description=long_description,\n     classifiers=[\n         "Development Status :: 4 - Beta",\n         "Framework :: Plone",\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T21:56:37+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/780e05b432363f7153797a6be8cdf1eadddd15a0

Merge pull request #289 from plone/python3

Python 3 fixes

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/event/__init__.py
M plone/app/event/base.py
M plone/app/event/browser/__init__.py
M plone/app/event/browser/event_listing.py
M plone/app/event/browser/event_summary.pt
M plone/app/event/browser/event_summary.py
M plone/app/event/browser/event_view.py
M plone/app/event/browser/formatted_date.py
M plone/app/event/browser/leadimage_viewlet.py
M plone/app/event/dx/__init__.py
M plone/app/event/dx/behaviors.py
M plone/app/event/dx/interfaces.py
M plone/app/event/dx/traverser.py
M plone/app/event/ical/__init__.py
M plone/app/event/ical/exporter.py
M plone/app/event/ical/importer.py
M plone/app/event/interfaces.py
M plone/app/event/portlets/__init__.py
M plone/app/event/portlets/portlet_calendar.py
M plone/app/event/portlets/portlet_events.py
M plone/app/event/recurrence.py
M plone/app/event/setuphandlers.py
M plone/app/event/testing.py
M plone/app/event/tests/__init__.py
M plone/app/event/tests/base_setup.py
M plone/app/event/tests/test_base_module.py
M plone/app/event/tests/test_catalog.py
M plone/app/event/tests/test_event_listing.py
M plone/app/event/tests/test_event_summary.py
M plone/app/event/tests/test_event_view.py
M plone/app/event/tests/test_icalendar.py
M plone/app/event/tests/test_portlet_calendar.py
M plone/app/event/tests/test_portlet_events.py
M plone/app/event/tests/test_recurrence.py
M plone/app/event/vocabularies.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ad4b7b75..206adbcb 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,9 @@ New features:\n \n Bug fixes:\n \n+- Python 3 compatibility.\n+  [pbauer]\n+\n - Make sure to include the \'Content-Length\' header for ical exports\n   [frapell]\n \ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad105..68c04af4 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,2 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+# -*- coding: utf-8 -*-\n+__import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex f48ad105..68c04af4 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,6 +1,2 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+# -*- coding: utf-8 -*-\n+__import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/event/__init__.py b/plone/app/event/__init__.py\nindex da0b257c..ac2e4a0c 100644\n--- a/plone/app/event/__init__.py\n+++ b/plone/app/event/__init__.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Products.CMFCore.permissions import setDefaultRoles\n from zope.i18nmessageid import MessageFactory\n \ndiff --git a/plone/app/event/base.py b/plone/app/event/base.py\nindex c03ea827..77f0e2dc 100644\n--- a/plone/app/event/base.py\n+++ b/plone/app/event/base.py\n@@ -1,4 +1,4 @@\n-\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from calendar import monthrange\ndiff --git a/plone/app/event/browser/__init__.py b/plone/app/event/browser/__init__.py\nindex e69de29b..40a96afc 100644\n--- a/plone/app/event/browser/__init__.py\n+++ b/plone/app/event/browser/__init__.py\n@@ -0,0 +1 @@\n+# -*- coding: utf-8 -*-\ndiff --git a/plone/app/event/browser/event_listing.py b/plone/app/event/browser/event_listing.py\nindex 3c49bf03..5aa1b826 100644\n--- a/plone/app/event/browser/event_listing.py\n+++ b/plone/app/event/browser/event_listing.py\n@@ -1,26 +1,28 @@\n-from Products.CMFPlone.PloneBatch import Batch\n-from Products.Five.browser import BrowserView\n+# -*- coding: utf-8 -*-\n from calendar import monthrange\n from datetime import date\n from datetime import timedelta\n from plone.app.event import _\n-from plone.app.event.base import RET_MODE_ACCESSORS\n-from plone.app.event.base import RET_MODE_OBJECTS\n from plone.app.event.base import _prepare_range\n-from plone.app.event.base import spell_date\n from plone.app.event.base import expand_events\n from plone.app.event.base import get_events\n from plone.app.event.base import guess_date_from\n from plone.app.event.base import localized_now\n+from plone.app.event.base import RET_MODE_ACCESSORS\n+from plone.app.event.base import RET_MODE_OBJECTS\n+from plone.app.event.base import spell_date\n from plone.app.event.base import start_end_from_mode\n from plone.app.event.base import start_end_query\n from plone.app.event.ical.exporter import construct_icalendar\n from plone.app.querystring import queryparser\n from plone.memoize import view\n from plone.uuid.interfaces import IUUID\n+from Products.CMFPlone.PloneBatch import Batch\n+from Products.Five.browser import BrowserView\n from zope.component import getMultiAdapter\n from zope.contentprovider.interfaces import IContentProvider\n \n+\n try:\n     from Products.CMFPlone.defaultpage import get_default_page\n except ImportError:\ndiff --git a/plone/app/event/browser/event_summary.pt b/plone/app/event/browser/event_summary.pt\nindex 8b7976d4..406c9bf9 100644\n--- a/plone/app/event/browser/event_summary.pt\n+++ b/plone/app/event/browser/event_summary.pt\n@@ -32,7 +32,8 @@\n         <strong i18n:translate="event_when">When</strong>\n         <span tal:define="start_tzname data/timezone;\n                       start_utcdelta python:data.start.tzinfo.utcoffset(data.start);\n-                      start_utcoffset python:(start_utcdelta.days*86400+start_utcdelta.seconds)*100/60/60;">\n+                      start_utcoffset python:(start_utcdelta.days*86400+start_utcdelta.seconds)*100/60/60;\n+                      start_utcoffset python:int(start_utcoffset)">\n           <tal:date replace="structure python:view.formatted_date(context)" />\n           <span class="timezone"\n               tal:condition="start_tzname">\ndiff --git a/plone/app/event/browser/event_summary.py b/plone/app/event/browser/event_summary.py\nindex 689cae6a..a4a33b37 100644\n--- a/plone/app/event/browser/event_summary.py\n+++ b/plone/app/event/browser/event_summary.py\n@@ -1,12 +1,13 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n-from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser import BrowserView\n from plone.app.event import _\n from plone.event.interfaces import IEventAccessor\n from plone.event.interfaces import IOccurrence\n from plone.event.interfaces import IRecurrenceSupport\n from plone.memoize import view\n from plone.uuid.interfaces import IUUID\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five.browser import BrowserView\n from zope.component import getMultiAdapter\n from zope.contentprovider.interfaces import IContentProvider\n \ndiff --git a/plone/app/event/browser/event_view.py b/plone/app/event/browser/event_view.py\nindex b34dfbdf..15202bd2 100644\n--- a/plone/app/event/browser/event_view.py\n+++ b/plone/app/event/browser/event_view.py\n@@ -1,6 +1,7 @@\n-from Products.Five.browser import BrowserView\n+# -*- coding: utf-8 -*-\n from plone.event.interfaces import IEventAccessor\n from plone.event.interfaces import IOccurrence\n+from Products.Five.browser import BrowserView\n \n \n class EventView(BrowserView):\ndiff --git a/plone/app/event/browser/formatted_date.py b/plone/app/event/browser/formatted_date.py\nindex b4047767..ce133dca 100644\n--- a/plone/app/event/browser/formatted_date.py\n+++ b/plone/app/event/browser/formatted_date.py\n@@ -1,6 +1,7 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import Explicit\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from plone.app.event.base import dates_for_display\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n \n \n class FormattedDateProvider(Explicit):\ndiff --git a/plone/app/event/browser/leadimage_viewlet.py b/plone/app/event/browser/leadimage_viewlet.py\nindex f4349ff3..1d923b12 100644\n--- a/plone/app/event/browser/leadimage_viewlet.py\n+++ b/plone/app/event/browser/leadimage_viewlet.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n from plone.app.layout.viewlets import ViewletBase\ndiff --git a/plone/app/event/dx/__init__.py b/plone/app/event/dx/__init__.py\nindex 8b137891..40a96afc 100644\n--- a/plone/app/event/dx/__init__.py\n+++ b/plone/app/event/dx/__init__.py\n@@ -1 +1 @@\n-\n+# -*- coding: utf-8 -*-\ndiff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex b926276a..f11704b0 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n """Behaviors to enable calendarish event extension to dexterity content types.\n """\n from plone.app.dexterity.behaviors.metadata import ICategorization\n@@ -13,6 +14,7 @@\n from plone.app.event.base import wkday_to_mon1\n from plone.app.event.dx.interfaces import IDXEvent\n from plone.app.event.dx.interfaces import IDXEventRecurrence\n+from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.app.textfield.value import RichTextValue\n from plone.app.z3cform.widget import DatetimeFieldWidget\n from plone.autoform import directives\n@@ -39,7 +41,6 @@\n from zope.interface import invariant\n from zope.interface import provider\n from zope.schema.interfaces import IContextAwareDefaultFactory\n-from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n \n import six\n \ndiff --git a/plone/app/event/dx/interfaces.py b/plone/app/event/dx/interfaces.py\nindex 9caf2af5..5a58804c 100644\n--- a/plone/app/event/dx/interfaces.py\n+++ b/plone/app/event/dx/interfaces.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from plone.event.interfaces import IEvent\n from plone.event.interfaces import IEventRecurrence\n \ndiff --git a/plone/app/event/dx/traverser.py b/plone/app/event/dx/traverser.py\nindex 165f1fa7..dc08c4d7 100644\n--- a/plone/app/event/dx/traverser.py\n+++ b/plone/app/event/dx/traverser.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.recurrence import OccurrenceTraverser as DefaultTraverser\n from plone.app.event.dx.interfaces import IDXEventRecurrence\n from plone.dexterity.browser.traversal import DexterityPublishTraverse\ndiff --git a/plone/app/event/ical/__init__.py b/plone/app/event/ical/__init__.py\nindex 931eb312..5d70fc71 100644\n--- a/plone/app/event/ical/__init__.py\n+++ b/plone/app/event/ical/__init__.py\n@@ -1,7 +1,8 @@\n-from plone.app.event.ical.exporter import EventsICal  # nopep8\n-from plone.app.event.ical.exporter import ICalendarEventComponent  # nopep8\n+# -*- coding: utf-8 -*-\n from plone.app.event.ical.exporter import calendar_from_collection  # nopep8\n from plone.app.event.ical.exporter import calendar_from_container  # nopep8\n from plone.app.event.ical.exporter import calendar_from_event  # nopep8\n from plone.app.event.ical.exporter import construct_icalendar  # nopep8\n+from plone.app.event.ical.exporter import EventsICal  # nopep8\n+from plone.app.event.ical.exporter import ICalendarEventComponent  # nopep8\n from plone.app.event.ical.importer import ical_import  # nopep8\ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex 9b7a1eba..0cfc3d01 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from datetime import datetime\n from datetime import timedelta\ndiff --git a/plone/app/event/ical/importer.py b/plone/app/event/ical/importer.py\nindex 1a089096..b976f39b 100644\n--- a/plone/app/event/ical/importer.py\n+++ b/plone/app/event/ical/importer.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event import _\n from plone.app.event import base\n from plone.app.event.base import AnnotationAdapter\n@@ -14,6 +15,7 @@\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n+from six.moves import urllib\n from z3c.form import button\n from z3c.form import field\n from z3c.form import form\n@@ -30,10 +32,9 @@\n import datetime\n import icalendar\n import random\n+import six\n import transaction\n \n-from six.moves import urllib\n-\n \n def ical_import(container, ics_resource, event_type,\n                 sync_strategy=base.SYNC_KEEP_NEWER):\n@@ -74,7 +75,10 @@ def _from_list(ical, prop):\n         ret = \'\'\n         for item in val:\n             ret = \'%s,\' % ret if ret else ret  # insert linebreak\n-            ret = \'%s%s\' % (ret, item.to_ical())\n+            ical_val = item.to_ical()\n+            if six.PY3 and isinstance(ical_val, six.binary_type):\n+                ical_val = ical_val.decode(\'utf8\')\n+            ret = \'%s%s\' % (ret, ical_val)\n         return \'%s:%s\' % (prop, ret) if ret else None\n \n     count = 0\n@@ -124,7 +128,11 @@ def _from_list(ical, prop):\n         url = _get_prop(\'URL\', item)\n \n         rrule = _get_prop(\'RRULE\', item)\n-        rrule = \'RRULE:%s\' % rrule.to_ical() if rrule else \'\'\n+        rrule = rrule.to_ical() if rrule else \'\'\n+        if rrule:\n+            if six.PY3 and isinstance(rrule, six.binary_type):\n+                rrule = rrule.decode(\'utf8\')\n+            rrule = \'RRULE:%s\' % rrule\n         rdates = _from_list(item, \'RDATE\')\n         exdates = _from_list(item, \'EXDATE\')\n         rrule = \'\\n\'.join([it for it in [rrule, rdates, exdates] if it])\ndiff --git a/plone/app/event/interfaces.py b/plone/app/event/interfaces.py\nindex 8deb6af6..64a1f5b1 100644\n--- a/plone/app/event/interfaces.py\n+++ b/plone/app/event/interfaces.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n \ndiff --git a/plone/app/event/portlets/__init__.py b/plone/app/event/portlets/__init__.py\nindex 60eb2861..dd39882f 100644\n--- a/plone/app/event/portlets/__init__.py\n+++ b/plone/app/event/portlets/__init__.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n-from plone.app.event.base import find_ploneroot\n from plone.app.event.base import find_navroot\n-\n+from plone.app.event.base import find_ploneroot\n \n import six\n \n@@ -13,7 +12,7 @@ def get_calendar_url(context, search_base):\n     calendar_url = None\n     if search_base:\n         portal = find_ploneroot(context)\n-        if isinstance(search_base, six.text_type):\n+        if six.PY2 and isinstance(search_base, six.text_type):\n             search_base = search_base.encode(\'utf8\')\n         search_base = \'/\'.join(search_base.split(\'/\')[2:])\n         calendar_url = portal.unrestrictedTraverse(\ndiff --git a/plone/app/event/portlets/portlet_calendar.py b/plone/app/event/portlets/portlet_calendar.py\nindex e7afddf5..3b1c471b 100644\n--- a/plone/app/event/portlets/portlet_calendar.py\n+++ b/plone/app/event/portlets/portlet_calendar.py\n@@ -1,31 +1,35 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from ComputedAttribute import ComputedAttribute\n-from Products.CMFCore.utils import getToolByName\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from plone.app.event.base import RET_MODE_OBJECTS\n+from plone.app.event import _\n from plone.app.event.base import _prepare_range\n+from plone.app.event.base import construct_calendar\n from plone.app.event.base import expand_events\n from plone.app.event.base import first_weekday\n-from plone.app.event.base import get_events, construct_calendar\n+from plone.app.event.base import get_events\n from plone.app.event.base import localized_today\n+from plone.app.event.base import RET_MODE_OBJECTS\n from plone.app.event.base import start_end_query\n from plone.app.event.base import wkday_to_mon1\n from plone.app.event.portlets import get_calendar_url\n-from plone.app.event import _\n from plone.app.portlets.portlets import base\n from plone.app.querystring import queryparser\n from plone.app.uuid.utils import uuidToObject\n from plone.app.vocabularies.catalog import CatalogSource\n from plone.event.interfaces import IEventAccessor\n from plone.portlets.interfaces import IPortletDataProvider\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions import NotFound\n from zope import schema\n from zope.component.hooks import getSite\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n+\n import calendar\n import json\n \n+\n try:\n     from plone.app.contenttypes.behaviors.collection import ISyndicatableCollection as ICollection  # noqa\n     from plone.app.contenttypes.interfaces import IFolder\n@@ -77,7 +81,6 @@ class Assignment(base.Assignment):\n \n     # reduce upgrade pain\n     state = None\n-    search_base = None\n \n     def __init__(self, state=None, search_base_uid=None):\n         self.state = state\n@@ -88,9 +91,8 @@ def _uid(self):\n         # attribute, which is probably because it has an old\n         # \'search_base\' attribute that needs to be converted.\n         path = self.search_base\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n         try:\n-            search_base = portal.unrestrictedTraverse(path.lstrip(\'/\'))\n+            search_base = getSite().unrestrictedTraverse(path.lstrip(\'/\'))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return search_base.UID()\n@@ -99,22 +101,17 @@ def _uid(self):\n \n class Renderer(base.Renderer):\n     render = ViewPageTemplateFile(\'portlet_calendar.pt\')\n-\n     _search_base = None\n \n     @property\n     def search_base(self):\n-        if not self._search_base:\n+        if not self._search_base and self.data.search_base_uid:\n             self._search_base = uuidToObject(self.data.search_base_uid)\n-        # aq_inner, because somehow search_base gets wrapped by the renderer\n-        return aq_inner(self._search_base)\n+        return aq_inner(self._search_base) if self._search_base else None\n \n     @property\n     def search_base_path(self):\n-        search_base = self.search_base\n-        if search_base is not None:\n-            search_base = \'/\'.join(search_base.getPhysicalPath())\n-        return search_base\n+        return \'/\'.join(self.search_base.getPhysicalPath()) if self.search_base else None  # noqa\n \n     def update(self):\n         context = aq_inner(self.context)\n@@ -208,11 +205,10 @@ def cal_data(self):\n \n         events = []\n         query.update(self.request.get(\'contentFilter\', {}))\n-        search_base = self.search_base\n-        if ICollection and ICollection.providedBy(search_base):\n+        if ICollection and ICollection.providedBy(self.search_base):\n             # Whatever sorting is defined, we\'re overriding it.\n             query = queryparser.parseFormquery(\n-                search_base, search_base.query,\n+                self.search_base, self.search_base.query,\n                 sort_on=\'start\', sort_order=None\n             )\n \n@@ -222,9 +218,9 @@ def cal_data(self):\n             if \'end\' in query and query[\'end\'] < end:\n                 end = query[\'end\']\n \n-            start, end = _prepare_range(search_base, start, end)\n+            start, end = _prepare_range(self.search_base, start, end)\n             query.update(start_end_query(start, end))\n-            events = search_base.results(\n+            events = self.search_base.results(\n                 batch=False, brains=True, custom_query=query\n             )\n             events = expand_events(\n@@ -233,9 +229,8 @@ def cal_data(self):\n                 sort=\'start\', sort_reverse=False\n             )\n         else:\n-            search_base_path = self.search_base_path\n-            if search_base_path:\n-                query[\'path\'] = {\'query\': search_base_path}\n+            if self.search_base_path:\n+                query[\'path\'] = {\'query\': self.search_base_path}\n             events = get_events(context, start=start, end=end,\n                                 ret_mode=RET_MODE_OBJECTS,\n                                 expand=True, **query)\n@@ -305,8 +300,10 @@ class AddForm(base.AddForm):\n     description = _(u"This portlet displays events in a calendar.")\n \n     def create(self, data):\n-        return Assignment(state=data.get(\'state\', None),\n-                          search_base_uid=data.get(\'search_base_uid\', None))\n+        return Assignment(\n+            state=data.get(\'state\', None),\n+            search_base_uid=data.get(\'search_base_uid\', None)\n+        )\n \n \n class EditForm(base.EditForm):\ndiff --git a/plone/app/event/portlets/portlet_events.py b/plone/app/event/portlets/portlet_events.py\nindex d5b0e923..cec1a60e 100644\n--- a/plone/app/event/portlets/portlet_events.py\n+++ b/plone/app/event/portlets/portlet_events.py\n@@ -1,31 +1,31 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from ComputedAttribute import ComputedAttribute\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from plone.app.event.base import expand_events\n+from plone.app.event import _\n from plone.app.event.base import _prepare_range\n-from plone.app.event.base import start_end_query\n-from plone.app.event.base import RET_MODE_ACCESSORS\n+from plone.app.event.base import expand_events\n from plone.app.event.base import get_events\n from plone.app.event.base import localized_now\n+from plone.app.event.base import RET_MODE_ACCESSORS\n+from plone.app.event.base import start_end_query\n from plone.app.event.portlets import get_calendar_url\n-from plone.app.event.portlets.portlet_calendar import (\n-    ICollection, search_base_uid_source\n-)\n-from plone.app.event import _\n+from plone.app.event.portlets.portlet_calendar import ICollection\n+from plone.app.event.portlets.portlet_calendar import search_base_uid_source\n from plone.app.portlets.portlets import base\n+from plone.app.querystring import queryparser\n from plone.app.uuid.utils import uuidToObject\n from plone.memoize.compress import xhtml_compress\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions import NotFound\n from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n+from zope.component.hooks import getSite\n from zope.contentprovider.interfaces import IContentProvider\n from zope.interface import implementer\n-from plone.app.querystring import queryparser\n \n \n class IEventsPortlet(IPortletDataProvider):\n@@ -84,7 +84,6 @@ class IEventsPortlet(IPortletDataProvider):\n class Assignment(base.Assignment):\n \n     # reduce upgrade pain\n-    search_base = None\n     thumb_scale = None\n     no_thumbs = False\n \n@@ -105,9 +104,8 @@ def _uid(self):\n         # attribute, which is probably because it has an old\n         # \'search_base\' attribute that needs to be converted.\n         path = self.search_base\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n         try:\n-            search_base = portal.unrestrictedTraverse(path.lstrip(\'/\'))\n+            search_base = getSite().unrestrictedTraverse(path.lstrip(\'/\'))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return search_base.UID()\n@@ -117,39 +115,24 @@ def _uid(self):\n class Renderer(base.Renderer):\n \n     _template = ViewPageTemplateFile(\'portlet_events.pt\')\n-\n     _search_base = None\n \n     @property\n     def search_base(self):\n-        if not self._search_base:\n+        if not self._search_base and self.data.search_base_uid:\n             self._search_base = uuidToObject(self.data.search_base_uid)\n-        # aq_inner, because somehow search_base gets wrapped by the renderer\n-        return aq_inner(self._search_base)\n+        return aq_inner(self._search_base) if self._search_base else None\n \n     @property\n     def search_base_path(self):\n-        search_base = self.search_base\n-        if search_base is not None:\n-            search_base = \'/\'.join(search_base.getPhysicalPath())\n-        return search_base\n-\n-    def __init__(self, *args):\n-        base.Renderer.__init__(self, *args)\n+        return \'/\'.join(self.search_base.getPhysicalPath()) if self.search_base else None  # noqa\n \n+    def update(self):\n         context = aq_inner(self.context)\n-\n         calendar_url = get_calendar_url(context, self.search_base_path)\n-\n         self.next_url = \'%s?mode=future\' % calendar_url\n         self.prev_url = \'%s?mode=past\' % calendar_url\n \n-        portal_state = getMultiAdapter(\n-            (self.context, self.request),\n-            name=\'plone_portal_state\'\n-        )\n-        self.portal = portal_state.portal()\n-\n     def render(self):\n         return xhtml_compress(self._template())\n \n@@ -168,11 +151,10 @@ def events(self):\n \n         events = []\n         query.update(self.request.get(\'contentFilter\', {}))\n-        search_base = self.search_base\n-        if ICollection and ICollection.providedBy(search_base):\n+        if ICollection and ICollection.providedBy(self.search_base):\n             # Whatever sorting is defined, we\'re overriding it.\n             query = queryparser.parseFormquery(\n-                search_base, search_base.query,\n+                self.search_base, self.search_base.query,\n                 sort_on=\'start\', sort_order=None\n             )\n \n@@ -186,9 +168,9 @@ def events(self):\n             if \'end\' in query:\n                 end = query[\'end\']\n \n-            start, end = _prepare_range(search_base, start, end)\n+            start, end = _prepare_range(self.search_base, start, end)\n             query.update(start_end_query(start, end))\n-            events = search_base.results(\n+            events = self.search_base.results(\n                 batch=False, brains=True, custom_query=query,\n                 limit=data.count\n             )\n@@ -199,9 +181,8 @@ def events(self):\n             )\n             events = events[:data.count]  # limit expanded\n         else:\n-            search_base_path = self.search_base_path\n-            if search_base_path:\n-                query[\'path\'] = {\'query\': search_base_path}\n+            if self.search_base_path:\n+                query[\'path\'] = {\'query\': self.search_base_path}\n             events = get_events(\n                 context, start=localized_now(context),\n                 ret_mode=RET_MODE_ACCESSORS,\n@@ -245,7 +226,7 @@ class AddForm(base.AddForm):\n     def create(self, data):\n         return Assignment(count=data.get(\'count\', 5),\n                           state=data.get(\'state\', None),\n-                          search_base_uid=data.get(\'search_base_uid\', 5))\n+                          search_base_uid=data.get(\'search_base_uid\', None))\n \n \n class EditForm(base.EditForm):\ndiff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py\nindex 697e5b18..4ca742e5 100644\n--- a/plone/app/event/recurrence.py\n+++ b/plone/app/event/recurrence.py\n@@ -1,7 +1,6 @@\n+# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFPlone.utils import safe_unicode\n-from Products.Five.browser import BrowserView\n from plone.app.event.base import dt_start_of_day\n from plone.app.event.base import guess_date_from\n from plone.event.interfaces import IEventAccessor\n@@ -13,6 +12,8 @@\n from plone.event.utils import pydt\n from plone.namedfile.interfaces import IImageScaleTraversable\n from plone.namedfile.scaling import ImageScaling\n+from Products.CMFPlone.utils import safe_unicode\n+from Products.Five.browser import BrowserView\n from zope.component import adapter\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\ndiff --git a/plone/app/event/setuphandlers.py b/plone/app/event/setuphandlers.py\nindex 57ef96c4..5d4be5c9 100644\n--- a/plone/app/event/setuphandlers.py\n+++ b/plone/app/event/setuphandlers.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import INonInstallable\n from Products.ZCatalog.Catalog import CatalogError\ndiff --git a/plone/app/event/testing.py b/plone/app/event/testing.py\nindex 18b11532..14260fa0 100644\n--- a/plone/app/event/testing.py\n+++ b/plone/app/event/testing.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.interfaces import IBrowserLayer\n from plone.app.robotframework.testing import AUTOLOGIN_LIBRARY_FIXTURE\n from plone.app.testing import FunctionalTesting\n@@ -115,6 +116,7 @@ def setUpPloneSite(self, portal):\n         self.applyProfile(portal, \'plone.app.event:testing\')\n         set_timezone(tz=\'UTC\')\n \n+\n PAEventDX_FIXTURE = PAEventDXLayer()\n PAEventDX_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PAEventDX_FIXTURE,),\n@@ -124,5 +126,9 @@ def setUpPloneSite(self, portal):\n     bases=(PAEventDX_FIXTURE,),\n     name="PAEventDX:Functional")\n PAEventDX_ROBOT_TESTING = FunctionalTesting(\n-    bases=(PAEventDX_FIXTURE, AUTOLOGIN_LIBRARY_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(\n+        PAEventDX_FIXTURE,\n+        AUTOLOGIN_LIBRARY_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n     name="plone.app.event.dx:Robot")\ndiff --git a/plone/app/event/tests/__init__.py b/plone/app/event/tests/__init__.py\nindex e69de29b..40a96afc 100644\n--- a/plone/app/event/tests/__init__.py\n+++ b/plone/app/event/tests/__init__.py\n@@ -0,0 +1 @@\n+# -*- coding: utf-8 -*-\ndiff --git a/plone/app/event/tests/base_setup.py b/plone/app/event/tests/base_setup.py\nindex 64798b53..7f7e9dbc 100644\n--- a/plone/app/event/tests/base_setup.py\n+++ b/plone/app/event/tests/base_setup.py\n@@ -1,15 +1,17 @@\n-from Products.CMFCore.utils import getToolByName\n+# -*- coding: utf-8 -*-\n from datetime import datetime\n from datetime import timedelta\n from plone.app.event.dx import behaviors\n from plone.app.event.testing import set_browserlayer\n from plone.app.event.testing import set_timezone\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n+from Products.CMFCore.utils import getToolByName\n \n-import unittest\n import pytz\n+import unittest\n+\n \n TEST_TIMEZONE = \'Europe/Vienna\'\n \ndiff --git a/plone/app/event/tests/test_base_module.py b/plone/app/event/tests/test_base_module.py\nindex d092566b..4270b83f 100644\n--- a/plone/app/event/tests/test_base_module.py\n+++ b/plone/app/event/tests/test_base_module.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from datetime import date\n from datetime import datetime\n from datetime import timedelta\ndiff --git a/plone/app/event/tests/test_catalog.py b/plone/app/event/tests/test_catalog.py\nindex a0825c0f..6570916c 100644\n--- a/plone/app/event/tests/test_catalog.py\n+++ b/plone/app/event/tests/test_catalog.py\n@@ -1,5 +1,6 @@\n-from Products.CMFCore.utils import getToolByName\n+# -*- coding: utf-8 -*-\n from plone.app.event.testing import PAEvent_INTEGRATION_TESTING\n+from Products.CMFCore.utils import getToolByName\n \n import unittest\n \ndiff --git a/plone/app/event/tests/test_event_listing.py b/plone/app/event/tests/test_event_listing.py\nindex 147bf397..d0d2ab21 100644\n--- a/plone/app/event/tests/test_event_listing.py\n+++ b/plone/app/event/tests/test_event_listing.py\n@@ -1,8 +1,9 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.base import localized_today\n-from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import make_fake_response\n-from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n+from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.tests.base_setup import patched_now as PN\n+from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n \n import mock\n \n@@ -52,8 +53,8 @@ def test_events_listing_ical(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n-        icalstr = \'\'.join(output)\n-        self.assertTrue(\'Long Event\' in icalstr)\n+        icalstr = b\'\'.join(output)\n+        self.assertTrue(b\'Long Event\' in icalstr)\n \n \n class TestEventsListingCollection(TestEventsListingPortal):\ndiff --git a/plone/app/event/tests/test_event_summary.py b/plone/app/event/tests/test_event_summary.py\nindex cd73162b..f52a5415 100644\n--- a/plone/app/event/tests/test_event_summary.py\n+++ b/plone/app/event/tests/test_event_summary.py\n@@ -1,7 +1,8 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.dx.traverser import OccurrenceTraverser as OccTravDX\n from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n-from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n from plone.app.event.tests.base_setup import patched_now as PN\n+from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n \n import mock\n \ndiff --git a/plone/app/event/tests/test_event_view.py b/plone/app/event/tests/test_event_view.py\nindex 4f741760..0a2382f8 100644\n--- a/plone/app/event/tests/test_event_view.py\n+++ b/plone/app/event/tests/test_event_view.py\n@@ -1,7 +1,8 @@\n+# -*- coding: utf-8 -*-\n from plone.app.event.dx.traverser import OccurrenceTraverser as OccTravDX\n from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING\n-from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n from plone.app.event.tests.base_setup import patched_now as PN\n+from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n \n import mock\n \ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex 7a1f01b3..f0ec703f 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -3,17 +3,18 @@\n from plone.app.event import base\n from plone.app.event.dx.traverser import OccurrenceTraverser as OccTravDX\n from plone.app.event.ical.importer import ical_import\n-from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n-from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING\n from plone.app.event.testing import make_fake_response\n+from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING\n+from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.event.interfaces import IEventAccessor\n from zope.component import getMultiAdapter\n \n import os\n import pytz\n+import six\n import unittest\n \n \n@@ -45,6 +46,8 @@ def test_event_ical(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n \n         self.checkOrder(\n@@ -96,6 +99,8 @@ def test_event_occurrence_ical(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         self.assertTrue(\'Now Event\' in icalstr)\n         self.assertTrue(\'RRULE\' not in icalstr)\n@@ -107,6 +112,8 @@ def test_portal_ical(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n \n         # No occurrences in export. Otherwise count would be 8.\n@@ -201,6 +208,8 @@ def test_event_listing_ical_portal(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         # No occurrences in export. Otherwise count would be 8.\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n@@ -220,6 +229,8 @@ def test_event_listing_ical_portal__specific_date(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 2)\n         self.assertTrue(\'Past Event\' in icalstr)\n@@ -237,6 +248,8 @@ def test_collection_ical(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \n@@ -259,6 +272,8 @@ def test_collection_all_ical(self):\n         self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n+        if six.PY3:\n+            output = [i.decode(\'utf8\') for i in output]\n         icalstr = \'\'.join(output)\n         self.assertEqual(icalstr.count(\'BEGIN:VEVENT\'), 4)\n \ndiff --git a/plone/app/event/tests/test_portlet_calendar.py b/plone/app/event/tests/test_portlet_calendar.py\nindex 4fd54767..7e78d86a 100644\n--- a/plone/app/event/tests/test_portlet_calendar.py\n+++ b/plone/app/event/tests/test_portlet_calendar.py\n@@ -1,23 +1,23 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n-from Products.GenericSetup.utils import _getDottedName\n from calendar import monthrange\n from datetime import datetime\n from datetime import timedelta\n from plone.app.event.base import localized_today\n from plone.app.event.portlets import portlet_calendar\n-from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import PAEvent_INTEGRATION_TESTING\n+from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import set_env_timezone\n from plone.app.event.testing import set_timezone\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import createContentInContainer\n from plone.portlets.interfaces import IPortletAssignment\n from plone.portlets.interfaces import IPortletDataProvider\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n+from Products.CMFCore.utils import getToolByName\n+from Products.GenericSetup.utils import _getDottedName\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component.hooks import setHooks\n@@ -195,12 +195,12 @@ def test_long_event(self):\n \n     def test_event_created_last_day_of_month_invalidate_cache(self):\n         # First render the calendar portlet when there\'s no events\n-        portlet = self.renderer(assignment=portlet_calendar.Assignment())\n-        portlet.update()\n-        html = portlet.render()\n+        r = self.renderer(assignment=portlet_calendar.Assignment())\n+        r.update()\n+        html = r.render()\n \n         # Now let\'s add a new event on the first day of the current month\n-        year, month = portlet.year_month_display()\n+        year, month = r.year_month_display()\n         day = monthrange(year, month)[1]  # (wkday, days)\n \n         tz = pytz.timezone(TZNAME)\n@@ -212,10 +212,10 @@ def test_event_created_last_day_of_month_invalidate_cache(self):\n         )\n \n         # Try to render the calendar portlet again, it must be different Now\n-        portlet = self.renderer(assignment=portlet_calendar.Assignment())\n-        portlet.update()\n+        r = self.renderer(assignment=portlet_calendar.Assignment())\n+        r.update()\n         self.assertNotEqual(\n-            html, portlet.render(), "Cache key wasn\'t invalidated"\n+            html, r.render(), "Cache key wasn\'t invalidated"\n         )\n \n     def test_event_nonascii(self):\n@@ -229,21 +229,21 @@ def test_event_nonascii(self):\n             self.portal, PTYPE, title=title, start=start, end=end,\n             location=u\'M\xc3\xbcnchen\')\n         self.wft.doActionFor(e1, \'publish\')\n-        portlet = self.renderer(assignment=portlet_calendar.Assignment())\n-        portlet.update()\n-        self.assertTrue(title in portlet.render())\n+        r = self.renderer(assignment=portlet_calendar.Assignment())\n+        r.update()\n+        self.assertTrue(title in r.render())\n \n     def test_prev_next_query(self):\n-        portlet = self.renderer(assignment=portlet_calendar.Assignment())\n-        portlet.update()\n+        r = self.renderer(assignment=portlet_calendar.Assignment())\n+        r.update()\n \n-        year, month = portlet.year_month_display()\n+        year, month = r.year_month_display()\n         prev_expected = \'?month={1}&year={0}\'.format(\n-            *portlet.get_previous_month(year, month))\n+            *r.get_previous_month(year, month))\n         next_expected = \'?month={1}&year={0}\'.format(\n-            *portlet.get_next_month(year, month))\n-        self.assertEqual(next_expected, portlet.next_query)\n-        self.assertEqual(prev_expected, portlet.prev_query)\n+            *r.get_next_month(year, month))\n+        self.assertEqual(next_expected, r.next_query)\n+        self.assertEqual(prev_expected, r.prev_query)\n \n     def test_invalid_request(self):\n         self.request.form[\'month\'] = [3, 4]\ndiff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py\nindex c7350cd4..35f47379 100644\n--- a/plone/app/event/tests/test_portlet_events.py\n+++ b/plone/app/event/tests/test_portlet_events.py\n@@ -1,15 +1,14 @@\n-from Products.CMFCore.utils import getToolByName\n-from Products.GenericSetup.utils import _getDottedName\n-from datetime import datetime\n+# -*- coding: utf-8 -*-\n from datetime import timedelta\n+from plone.app.event.base import localized_now\n from plone.app.event.portlets import portlet_events\n-from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import PAEvent_INTEGRATION_TESTING\n+from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import set_env_timezone\n from plone.app.event.testing import set_timezone\n from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.dexterity.utils import createContentInContainer\n from plone.portlets.interfaces import IPortletAssignment\n@@ -17,6 +16,8 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n+from Products.CMFCore.utils import getToolByName\n+from Products.GenericSetup.utils import _getDottedName\n from zExceptions import Unauthorized\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -27,6 +28,7 @@\n import pytz\n import unittest\n \n+\n TZNAME = \'Australia/Brisbane\'\n PTYPE = \'plone.app.event.dx.event\'\n \n@@ -150,8 +152,7 @@ def renderer(self, context=None, request=None, view=None, manager=None,\n         )\n \n     def test_portlet_event_renderer__get_events(self):\n-        tz = pytz.timezone(TZNAME)\n-        start = tz.localize(datetime.now())\n+        start = localized_now()\n         end = start + timedelta(hours=1)\n \n         e1 = createContentInContainer(\n@@ -164,34 +165,38 @@ def test_portlet_event_renderer__get_events(self):\n             self.portal.eventfolder, PTYPE,\n             id=\'e2\', title=\'e2\', start=start, end=end)\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(\n+        r = self.renderer(assignment=portlet_events.Assignment(\n             count=5, state=(\'draft\',)))\n-        self.assertEqual(0, len(portlet.events))\n+        r.update()\n+        self.assertEqual(0, len(r.events))\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(\n+        r = self.renderer(assignment=portlet_events.Assignment(\n             count=5, state=(\'published\', )))\n-        self.assertEqual(1, len(portlet.events))\n+        r.update()\n+        self.assertEqual(1, len(r.events))\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(\n+        r = self.renderer(assignment=portlet_events.Assignment(\n             count=5, state=(\'published\', \'private\',)))\n-        self.assertEqual(2, len(portlet.events))\n+        r.update()\n+        self.assertEqual(2, len(r.events))\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(count=5))\n-        self.assertEqual(2, len(portlet.events))\n+        r = self.renderer(assignment=portlet_events.Assignment(count=5))\n+        r.update()\n+        self.assertEqual(2, len(r.events))\n \n         # No search base gives calendar urls with event_listing part\n-        self.assertTrue(\'event_listing\' in portlet.render())\n+        self.assertTrue(\'event_listing\' in r.render())\n \n-        portlet = self.renderer(assignment=portlet_events.Assignment(\n+        r = self.renderer(assignment=portlet_events.Assignment(\n             count=5, search_base_uid=self.portal.eventfolder.UID()))\n-        self.assertEqual(1, len(portlet.events))\n+        r.update()\n+        self.assertEqual(1, len(r.events))\n \n         # A given search base gives calendar urls without event_listing part\n-        self.assertTrue(\'event_listing\' not in portlet.render())\n+        self.assertTrue(\'event_listing\' not in r.render())\n \n     def test_portlet_event_renderer__recurring(self):\n-        tz = pytz.timezone(TZNAME)\n-        start = tz.localize(datetime.now()) + timedelta(days=1)\n+        start = localized_now() + timedelta(days=1)\n \n         e1 = createContentInContainer(\n             self.portal, PTYPE, id=\'e1\', title=\'Event 1\', start=start,\n@@ -205,6 +210,7 @@ def test_portlet_event_renderer__recurring(self):\n         r = self.renderer(\n             assignment=portlet_events.Assignment(count=5,\n                                                  state=(\'published\',)))\n+        r.update()\n         events = r.events\n         self.assertEqual(5, len(events))\n         self.assertTrue(\'Event 2\' not in [x.title for x in events])\n@@ -222,6 +228,7 @@ def test_portlet_event_renderer__recurring(self):\n \n     def test_portlet_event_renderer__listing_link(self):\n         r = self.renderer(assignment=portlet_events.Assignment(count=5))\n+        r.update()\n         rd = r.render()\n         self.assertTrue(\'?mode=future\' in rd)\n         self.assertTrue(\'?mode=past\' in rd)\ndiff --git a/plone/app/event/tests/test_recurrence.py b/plone/app/event/tests/test_recurrence.py\nindex 513f9a07..6f7bc1b1 100644\n--- a/plone/app/event/tests/test_recurrence.py\n+++ b/plone/app/event/tests/test_recurrence.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n from mock import Mock\n from OFS.SimpleItem import SimpleItem\n from plone.app.event.base import get_events\n@@ -13,7 +14,8 @@\n from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n from plone.app.event.tests.base_setup import patched_now\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID, TEST_USER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.dexterity.utils import createContentInContainer\n from plone.event.interfaces import IEvent\n from plone.event.interfaces import IEventAccessor\n@@ -24,9 +26,11 @@\n from zope.annotation.interfaces import IAnnotations\n from zope.interface import alsoProvides\n from zope.publisher.interfaces.browser import IBrowserView\n+\n import datetime\n import mock\n import pytz\n+import six\n import transaction\n import unittest\n import zope.component\n@@ -102,7 +106,9 @@ def test_traverse_occurrence(self):\n         )\n         url = \'/\'.join([self.now_event.absolute_url(), \'2013-05-07\'])\n         browser.open(url)\n-        title = self.now_event.title.encode(\'ascii\')\n+        title = self.now_event.title\n+        if six.PY2:\n+            title = title.encode(\'ascii\')\n         self.assertTrue(title in browser.contents)\n \n     def test_traverse_occurrence_imagescaling(self):\ndiff --git a/plone/app/event/vocabularies.py b/plone/app/event/vocabularies.py\nindex b7666291..bae395d4 100644\n--- a/plone/app/event/vocabularies.py\n+++ b/plone/app/event/vocabularies.py\n@@ -1,5 +1,6 @@\n-from plone.app.event import base\n+# -*- coding: utf-8 -*-\n from plone.app.event import _\n+from plone.app.event import base\n from zope.interface import provider\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\ndiff --git a/setup.py b/setup.py\nindex 81cf1fce..53f31672 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,5 +1,6 @@\n-from setuptools import setup\n+# -*- coding: utf-8 -*-\n from setuptools import find_packages\n+from setuptools import setup\n \n import os\n \n@@ -7,15 +8,18 @@\n version = \'3.2.0.dev0\'\n \n \n+long_description = (\'\\n\\n\'.join([\n+    open("README.rst").read(),\n+    open(os.path.join(\'docs\', \'installation.rst\')).read(),\n+    open("CHANGES.rst").read(),\n+]))\n+\n+\n setup(\n     name=\'plone.app.event\',\n     version=version,\n     description="The Plone calendar framework",\n-    long_description="%s%s%s" % (\n-        open("README.rst").read() + "\\n",\n-        open(os.path.join(\'docs\', \'installation.rst\')).read() + "\\n",\n-        open("CHANGES.rst").read(),\n-    ),\n+    long_description=long_description,\n     classifiers=[\n         "Development Status :: 4 - Beta",\n         "Framework :: Plone",\n'

