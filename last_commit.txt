Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2018-07-16T14:04:06+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.cachepurging/commit/f7be972a0aefc27e4662943ee9ab26b23e36c26d

fix exception

Files changed:
M plone/cachepurging/purger.py

b"diff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py\nindex 1b042f9..352b496 100644\n--- a/plone/cachepurging/purger.py\n+++ b/plone/cachepurging/purger.py\n@@ -280,7 +280,7 @@ def run(self):\n                             connection = None\n                         break  # all done with this item!\n \n-                    except (http_client.HTTPException, socket.error), e:\n+                    except (http_client.HTTPException, socket.error) as e:\n                         # All errors 'connection' related errors are treated\n                         # the same - simply drop the connection and retry.\n                         # the process for establishing the connection handles\n"

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2018-07-16T14:04:06+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.cachepurging/commit/c3ca17854e682a49c535f226f671d29ad6eabb08

fix tests on py3

Files changed:
M README.rst
M plone/cachepurging/browser.py
M plone/cachepurging/purger.py
M plone/cachepurging/tests/test_purger.py

b'diff --git a/README.rst b/README.rst\nindex f8dabb9..3d52d7f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -102,7 +102,7 @@ take place:\n If you need more control, you can perform the purging directly. Here is a\n snippet adapted from the ``plone.cachepurging.purge`` view::\n \n-        from StringIO import StringIO\n+        from six import StringIO\n \n         from zope.component import getUtility\n \n@@ -130,7 +130,7 @@ snippet adapted from the ``plone.cachepurging.purge`` view::\n         for path in getPathsToPurge(self.context, self.request):\n             for url in getURLsToPurge(path, settings.cachingProxies):\n                 status, xcache, xerror = purger.purgeSync(url)\n-                print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror\n+                print("Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror, file=out)\n \n         return out.getvalue()\n \ndiff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py\nindex 76a5589..a5a4d1c 100644\n--- a/plone/cachepurging/browser.py\n+++ b/plone/cachepurging/browser.py\n@@ -51,6 +51,6 @@ def __call__(self):\n         for path in getPathsToPurge(self.context, self.request):\n             for url in getURLsToPurge(path, settings.cachingProxies):\n                 status, xcache, xerror = purger.purgeSync(url)\n-                print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror  # noqa\n+                print("Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror, file=out)  # noqa\n \n         return out.getvalue()\ndiff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py\nindex 352b496..d80a316 100644\n--- a/plone/cachepurging/purger.py\n+++ b/plone/cachepurging/purger.py\n@@ -37,7 +37,7 @@ class Connection(http_client.HTTPConnection):\n     """A connection that can handle either HTTP or HTTPS\n     """\n \n-    def __init__(self, host, port=None, strict=None, scheme="http", timeout=5):\n+    def __init__(self, host, port=None, scheme="http", timeout=5):\n         self.scheme = scheme\n         if scheme == "http":\n             self.default_port = http_client.HTTP_PORT\n@@ -45,8 +45,7 @@ def __init__(self, host, port=None, strict=None, scheme="http", timeout=5):\n             self.default_port = http_client.HTTPS_PORT\n         else:\n             raise ValueError("Invalid scheme \'%s\'" % scheme)\n-        http_client.HTTPConnection.__init__(self, host, port, strict,\n-                                            timeout=timeout)\n+        http_client.HTTPConnection.__init__(self, host, port, timeout=timeout)\n         self.timeout = timeout\n \n     def connect(self):\ndiff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py\nindex a71b005..aec27d2 100644\n--- a/plone/cachepurging/tests/test_purger.py\n+++ b/plone/cachepurging/tests/test_purger.py\n@@ -30,9 +30,9 @@ def do_PURGE(self):\n             nr = self.server.response_queue.get(block=False)\n         except queue.Empty:\n             print("Unexpected connection from the purge tool")\n-            print self.command, self.path, self.protocol_version\n+            print(self.command, self.path, self.protocol_version)\n             for h, v in self.headers.items():\n-                print "%s: %s" % (h, v)\n+                print("%s: %s" % (h, v))\n             raise RuntimeError(\'Unexpected connection\')\n \n         # We may have a function to call to check things.\n@@ -58,7 +58,7 @@ def do_PURGE(self):\n         if headers:\n             for h, v in headers.items():\n                 self.send_header(h, v)\n-        data = nr.get(\'data\', \'\')\n+        data = nr.get(\'data\', b\'\')\n         self.send_header("Content-Length", len(data))\n         self.end_headers()\n         self.wfile.write(data)\n@@ -125,6 +125,7 @@ class TestSync(TestCase):\n     def setUp(self):\n         super(TestSync, self).setUp()\n         self.purger.http_1_1 = True\n+        self.maxDiff = None\n \n     def tearDown(self):\n         super(TestSync, self).tearDown()\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2018-07-16T14:04:06+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/4dcd55d75bca67255d39cf433749115f8f0bcbd2

Fix test on Python 3

Files changed:
M plone/cachepurging/tests/test_hooks.py

b"diff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py\nindex 9c9d4fc..13fdc8f 100644\n--- a/plone/cachepurging/tests/test_hooks.py\n+++ b/plone/cachepurging/tests/test_hooks.py\n@@ -422,10 +422,9 @@ def purgeAsync(self, url, httpVerb='PURGE'):\n         provideUtility(purger)\n \n         notify(PubSuccess(request))\n-\n-        self.assertEqual(\n-            ['http://localhost:1234/foo', 'http://localhost:1234/bar'],\n-            purger.purged\n+        self.assertSetEqual(\n+            {'http://localhost:1234/foo', 'http://localhost:1234/bar'},\n+            set(purger.purged),\n         )\n \n \n"

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2018-07-16T14:04:06+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.cachepurging/commit/6e8cee10c0118fcf594ca50ab00812e48b47fd48

Changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 219d961..dabb70e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,8 @@ Bug fixes:\n \n - Set default purger backlog size to 0 (infinity) in order to fully invalidate Varnish cache\n   [avoinea refs #11]\n+- Tests are Python 3 compatible\n+  [pbauer, ale-rt]\n \n \n 1.0.15 (2018-04-24)\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2018-07-17T18:04:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/5d2d9b91c173fd54d8dbddf80673100a4a0d4cd5

fix view to work on Python 2 AND 3

Files changed:
M CHANGES.rst
M plone/cachepurging/browser.py
M plone/cachepurging/tests/test_views.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex dabb70e..958abf3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,8 +16,9 @@ Bug fixes:\n \n - Set default purger backlog size to 0 (infinity) in order to fully invalidate Varnish cache\n   [avoinea refs #11]\n+\n - Tests are Python 3 compatible\n-  [pbauer, ale-rt]\n+  [pbauer, ale-rt, jensens]\n \n \n 1.0.15 (2018-04-24)\ndiff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py\nindex a5a4d1c..efb4c40 100644\n--- a/plone/cachepurging/browser.py\n+++ b/plone/cachepurging/browser.py\n@@ -51,6 +51,9 @@ def __call__(self):\n         for path in getPathsToPurge(self.context, self.request):\n             for url in getURLsToPurge(path, settings.cachingProxies):\n                 status, xcache, xerror = purger.purgeSync(url)\n-                print("Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror, file=out)  # noqa\n+                out.write("Purged: " + url)\n+                out.write(", Status: " + status)\n+                out.write(", X-Cache: " + xcache)\n+                out.write(", Error: " + xerror + \'\\n\')\n \n         return out.getvalue()\ndiff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py\nindex 8bb8575..a4b5958 100644\n--- a/plone/cachepurging/tests/test_views.py\n+++ b/plone/cachepurging/tests/test_views.py\n@@ -117,9 +117,13 @@ def test_disabled(self):\n     def test_purge(self):\n         view = PurgeImmediately(FauxContext(), FauxRequest())\n         self.assertEqual(\n-            \'Purged http://localhost:1234/foo Status 200 OK X-Cache cached \'\n+            \'Purged: http://localhost:1234/foo, \'\n+            \'Status: 200 OK, \'\n+            \'X-Cache: cached, \'\n             \'Error: None\\n\'\n-            \'Purged http://localhost:1234/bar Status 200 OK X-Cache cached \'\n+            \'Purged: http://localhost:1234/bar, \'\n+            \'Status 200 OK, \'\n+            \'X-Cache: cached, \'\n             \'Error: None\\n\',\n             view()\n         )\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2018-07-17T19:52:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/3795a09ffbe4e0cd97fbab5e31ab49a99d411325

fix view to work on Python 2 AND 3

Files changed:
M CHANGES.rst
M plone/cachepurging/browser.py
M plone/cachepurging/tests/test_views.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 958abf3..b38b26f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,7 +17,7 @@ Bug fixes:\n - Set default purger backlog size to 0 (infinity) in order to fully invalidate Varnish cache\n   [avoinea refs #11]\n \n-- Tests are Python 3 compatible\n+- Tests and Code are Python 3 compatible\n   [pbauer, ale-rt, jensens]\n \n \ndiff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py\nindex efb4c40..8a0809d 100644\n--- a/plone/cachepurging/browser.py\n+++ b/plone/cachepurging/browser.py\n@@ -10,6 +10,10 @@\n from zope.component import getUtility\n from zope.event import notify\n \n+RESULT_TPL = (\n+    "Purged: {url}, Status: {status}, X-Cache: {xcache}, Error: {xerror}\\n"\n+)\n+\n \n class QueuePurge(object):\n     """Manually initiate a purge\n@@ -37,23 +41,23 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-\n         if not isCachePurgingEnabled():\n             return \'Caching not enabled\'\n \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ICachePurgingSettings)\n-\n         purger = getUtility(IPurger)\n-\n         out = StringIO()\n \n         for path in getPathsToPurge(self.context, self.request):\n             for url in getURLsToPurge(path, settings.cachingProxies):\n                 status, xcache, xerror = purger.purgeSync(url)\n-                out.write("Purged: " + url)\n-                out.write(", Status: " + status)\n-                out.write(", X-Cache: " + xcache)\n-                out.write(", Error: " + xerror + \'\\n\')\n-\n+                out.write(\n+                    RESULT_TPL.format(\n+                        url=url,\n+                        status=status,\n+                        xcache=xcache,\n+                        xerror=xerror,\n+                    )\n+                )\n         return out.getvalue()\ndiff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py\nindex a4b5958..53baf3b 100644\n--- a/plone/cachepurging/tests/test_views.py\n+++ b/plone/cachepurging/tests/test_views.py\n@@ -122,7 +122,7 @@ def test_purge(self):\n             \'X-Cache: cached, \'\n             \'Error: None\\n\'\n             \'Purged: http://localhost:1234/bar, \'\n-            \'Status 200 OK, \'\n+            \'Status: 200 OK, \'\n             \'X-Cache: cached, \'\n             \'Error: None\\n\',\n             view()\ndiff --git a/setup.py b/setup.py\nindex 4ca0c51..f49b2fb 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -10,16 +10,13 @@\n                       open(\'CHANGES.rst\').read()),\n     classifiers=[\n         \'Framework :: Plone\',\n-        \'Framework :: Plone :: 4.0\',\n-        \'Framework :: Plone :: 4.1\',\n-        \'Framework :: Plone :: 4.2\',\n         \'Framework :: Plone :: 4.3\',\n         \'Framework :: Plone :: 5.0\',\n         \'Framework :: Plone :: 5.1\',\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n         \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.6\',\n         \'Programming Language :: Python :: 2.7\',\n+        \'Programming Language :: Python :: 3.6\',\n     ],\n     keywords=\'plone cache purge\',\n     author=\'Plone Foundation\',\n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2018-07-19T00:52:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/04db1bc57f95d932cbe614de31ec5b0ba4728e31

Merge pull request #13 from plone/python3

Python3

Files changed:
M CHANGES.rst
M README.rst
M plone/cachepurging/browser.py
M plone/cachepurging/purger.py
M plone/cachepurging/tests/test_hooks.py
M plone/cachepurging/tests/test_purger.py
M plone/cachepurging/tests/test_views.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 219d961..b38b26f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,6 +17,9 @@ Bug fixes:\n - Set default purger backlog size to 0 (infinity) in order to fully invalidate Varnish cache\n   [avoinea refs #11]\n \n+- Tests and Code are Python 3 compatible\n+  [pbauer, ale-rt, jensens]\n+\n \n 1.0.15 (2018-04-24)\n -------------------\ndiff --git a/README.rst b/README.rst\nindex f8dabb9..3d52d7f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -102,7 +102,7 @@ take place:\n If you need more control, you can perform the purging directly. Here is a\n snippet adapted from the ``plone.cachepurging.purge`` view::\n \n-        from StringIO import StringIO\n+        from six import StringIO\n \n         from zope.component import getUtility\n \n@@ -130,7 +130,7 @@ snippet adapted from the ``plone.cachepurging.purge`` view::\n         for path in getPathsToPurge(self.context, self.request):\n             for url in getURLsToPurge(path, settings.cachingProxies):\n                 status, xcache, xerror = purger.purgeSync(url)\n-                print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror\n+                print("Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror, file=out)\n \n         return out.getvalue()\n \ndiff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py\nindex 76a5589..8a0809d 100644\n--- a/plone/cachepurging/browser.py\n+++ b/plone/cachepurging/browser.py\n@@ -10,6 +10,10 @@\n from zope.component import getUtility\n from zope.event import notify\n \n+RESULT_TPL = (\n+    "Purged: {url}, Status: {status}, X-Cache: {xcache}, Error: {xerror}\\n"\n+)\n+\n \n class QueuePurge(object):\n     """Manually initiate a purge\n@@ -37,20 +41,23 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-\n         if not isCachePurgingEnabled():\n             return \'Caching not enabled\'\n \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ICachePurgingSettings)\n-\n         purger = getUtility(IPurger)\n-\n         out = StringIO()\n \n         for path in getPathsToPurge(self.context, self.request):\n             for url in getURLsToPurge(path, settings.cachingProxies):\n                 status, xcache, xerror = purger.purgeSync(url)\n-                print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror  # noqa\n-\n+                out.write(\n+                    RESULT_TPL.format(\n+                        url=url,\n+                        status=status,\n+                        xcache=xcache,\n+                        xerror=xerror,\n+                    )\n+                )\n         return out.getvalue()\ndiff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py\nindex 1b042f9..d80a316 100644\n--- a/plone/cachepurging/purger.py\n+++ b/plone/cachepurging/purger.py\n@@ -37,7 +37,7 @@ class Connection(http_client.HTTPConnection):\n     """A connection that can handle either HTTP or HTTPS\n     """\n \n-    def __init__(self, host, port=None, strict=None, scheme="http", timeout=5):\n+    def __init__(self, host, port=None, scheme="http", timeout=5):\n         self.scheme = scheme\n         if scheme == "http":\n             self.default_port = http_client.HTTP_PORT\n@@ -45,8 +45,7 @@ def __init__(self, host, port=None, strict=None, scheme="http", timeout=5):\n             self.default_port = http_client.HTTPS_PORT\n         else:\n             raise ValueError("Invalid scheme \'%s\'" % scheme)\n-        http_client.HTTPConnection.__init__(self, host, port, strict,\n-                                            timeout=timeout)\n+        http_client.HTTPConnection.__init__(self, host, port, timeout=timeout)\n         self.timeout = timeout\n \n     def connect(self):\n@@ -280,7 +279,7 @@ def run(self):\n                             connection = None\n                         break  # all done with this item!\n \n-                    except (http_client.HTTPException, socket.error), e:\n+                    except (http_client.HTTPException, socket.error) as e:\n                         # All errors \'connection\' related errors are treated\n                         # the same - simply drop the connection and retry.\n                         # the process for establishing the connection handles\ndiff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py\nindex 9c9d4fc..13fdc8f 100644\n--- a/plone/cachepurging/tests/test_hooks.py\n+++ b/plone/cachepurging/tests/test_hooks.py\n@@ -422,10 +422,9 @@ def purgeAsync(self, url, httpVerb=\'PURGE\'):\n         provideUtility(purger)\n \n         notify(PubSuccess(request))\n-\n-        self.assertEqual(\n-            [\'http://localhost:1234/foo\', \'http://localhost:1234/bar\'],\n-            purger.purged\n+        self.assertSetEqual(\n+            {\'http://localhost:1234/foo\', \'http://localhost:1234/bar\'},\n+            set(purger.purged),\n         )\n \n \ndiff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py\nindex a71b005..aec27d2 100644\n--- a/plone/cachepurging/tests/test_purger.py\n+++ b/plone/cachepurging/tests/test_purger.py\n@@ -30,9 +30,9 @@ def do_PURGE(self):\n             nr = self.server.response_queue.get(block=False)\n         except queue.Empty:\n             print("Unexpected connection from the purge tool")\n-            print self.command, self.path, self.protocol_version\n+            print(self.command, self.path, self.protocol_version)\n             for h, v in self.headers.items():\n-                print "%s: %s" % (h, v)\n+                print("%s: %s" % (h, v))\n             raise RuntimeError(\'Unexpected connection\')\n \n         # We may have a function to call to check things.\n@@ -58,7 +58,7 @@ def do_PURGE(self):\n         if headers:\n             for h, v in headers.items():\n                 self.send_header(h, v)\n-        data = nr.get(\'data\', \'\')\n+        data = nr.get(\'data\', b\'\')\n         self.send_header("Content-Length", len(data))\n         self.end_headers()\n         self.wfile.write(data)\n@@ -125,6 +125,7 @@ class TestSync(TestCase):\n     def setUp(self):\n         super(TestSync, self).setUp()\n         self.purger.http_1_1 = True\n+        self.maxDiff = None\n \n     def tearDown(self):\n         super(TestSync, self).tearDown()\ndiff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py\nindex 8bb8575..53baf3b 100644\n--- a/plone/cachepurging/tests/test_views.py\n+++ b/plone/cachepurging/tests/test_views.py\n@@ -117,9 +117,13 @@ def test_disabled(self):\n     def test_purge(self):\n         view = PurgeImmediately(FauxContext(), FauxRequest())\n         self.assertEqual(\n-            \'Purged http://localhost:1234/foo Status 200 OK X-Cache cached \'\n+            \'Purged: http://localhost:1234/foo, \'\n+            \'Status: 200 OK, \'\n+            \'X-Cache: cached, \'\n             \'Error: None\\n\'\n-            \'Purged http://localhost:1234/bar Status 200 OK X-Cache cached \'\n+            \'Purged: http://localhost:1234/bar, \'\n+            \'Status: 200 OK, \'\n+            \'X-Cache: cached, \'\n             \'Error: None\\n\',\n             view()\n         )\ndiff --git a/setup.py b/setup.py\nindex 4ca0c51..f49b2fb 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -10,16 +10,13 @@\n                       open(\'CHANGES.rst\').read()),\n     classifiers=[\n         \'Framework :: Plone\',\n-        \'Framework :: Plone :: 4.0\',\n-        \'Framework :: Plone :: 4.1\',\n-        \'Framework :: Plone :: 4.2\',\n         \'Framework :: Plone :: 4.3\',\n         \'Framework :: Plone :: 5.0\',\n         \'Framework :: Plone :: 5.1\',\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n         \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.6\',\n         \'Programming Language :: Python :: 2.7\',\n+        \'Programming Language :: Python :: 3.6\',\n     ],\n     keywords=\'plone cache purge\',\n     author=\'Plone Foundation\',\n'

