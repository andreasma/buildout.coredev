Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2018-03-29T00:02:27+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/0cd92c15aae4a8b7af1f1248e4a1ef64d87a5e68

fix sorting of viewlets in py3

Files changed:
M plone/app/viewletmanager/manager.py

diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py
index 3ca341a..92522d6 100644
--- a/plone/app/viewletmanager/manager.py
+++ b/plone/app/viewletmanager/manager.py
@@ -4,6 +4,7 @@
 from Acquisition.interfaces import IAcquirer
 from cgi import parse_qs
 from logging import getLogger
+from operator import itemgetter
 from plone.app.viewletmanager.interfaces import IViewletManagementView
 from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
 from Products.Five import BrowserView
@@ -85,8 +86,12 @@ def sort(self, viewlets):
 
         # then sort the remaining ones
         # Copied from Five
-        remaining = sorted(name_map.items(),
-                           lambda x, y: cmp(aq_base(x[1]), aq_base(y[1])))
+        try:
+            # Try to sort by viewlet instances
+            remaining = sorted(viewlets, key=itemgetter(1))
+        except TypeError:
+            # Fall back to viewlet names
+            remaining = sorted(viewlets, key=itemgetter(0))
 
         # return both together
         return result + remaining


Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2018-04-01T14:59:33+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/a6c34b32f0f897e94b3060130911202122d84500

add hack to remove duplicate viewlets (probably the code above is broken)

Files changed:
M plone/app/viewletmanager/manager.py

diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py
index 92522d6..c538b07 100644
--- a/plone/app/viewletmanager/manager.py
+++ b/plone/app/viewletmanager/manager.py
@@ -93,8 +93,8 @@ def sort(self, viewlets):
             # Fall back to viewlet names
             remaining = sorted(viewlets, key=itemgetter(0))
 
-        # return both together
-        return result + remaining
+        # return both together remove duplicates, keep order
+        return list(dict.fromkeys(result + remaining))
 
     def render(self):
         if self.template:


Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2018-05-05T16:31:48+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/65dc9f831a8e340f5f2f9e7990a005c7f48eedcb

Fix sorting

Files changed:
M plone/app/viewletmanager/manager.py

diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py
index c538b07..7bffd38 100644
--- a/plone/app/viewletmanager/manager.py
+++ b/plone/app/viewletmanager/manager.py
@@ -4,7 +4,6 @@
 from Acquisition.interfaces import IAcquirer
 from cgi import parse_qs
 from logging import getLogger
-from operator import itemgetter
 from plone.app.viewletmanager.interfaces import IViewletManagementView
 from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
 from Products.Five import BrowserView
@@ -22,8 +21,6 @@
 from zope.viewlet.interfaces import IViewlet
 from ZPublisher.Publish import Retry
 
-import traceback
-
 
 logger = getLogger('plone.app.viewletmanager')
 
@@ -84,17 +81,9 @@ def sort(self, viewlets):
                 result.append((name, name_map[name]))
                 del name_map[name]
 
-        # then sort the remaining ones
-        # Copied from Five
-        try:
-            # Try to sort by viewlet instances
-            remaining = sorted(viewlets, key=itemgetter(1))
-        except TypeError:
-            # Fall back to viewlet names
-            remaining = sorted(viewlets, key=itemgetter(0))
-
-        # return both together remove duplicates, keep order
-        return list(dict.fromkeys(result + remaining))
+        remaining = sorted(name_map.items(), key=lambda x: aq_base(x[1]))
+        # return both together
+        return result + remaining
 
     def render(self):
         if self.template:


Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2018-05-05T17:06:56+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/0c52e06f2afdd34e21e38616e9a80858283dde19

More Python 2 / 3 compatibility

Files changed:
M CHANGES.rst
M plone/app/viewletmanager/tests/manager.rst
M plone/app/viewletmanager/tests/test_docs.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8836137..32615a2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,7 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- More Python 2 / 3 compatibility [ale-rt, pbauer]
 
 
 2.0.11 (2018-01-30)
diff --git a/plone/app/viewletmanager/tests/manager.rst b/plone/app/viewletmanager/tests/manager.rst
index 6de2d30..975c8de 100644
--- a/plone/app/viewletmanager/tests/manager.rst
+++ b/plone/app/viewletmanager/tests/manager.rst
@@ -2,7 +2,7 @@
 We need a storage for the viewlet settings.
 
     >>> from zope.component import provideUtility, provideAdapter, getAdapters
-    >>> from zope.interface import implements, Interface
+    >>> from zope.interface import implementer, Interface
     >>> from plone.app.viewletmanager.storage import ViewletSettingsStorage
     >>> from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
 
@@ -20,8 +20,8 @@ in Plone.
 
     >>> # yeah, yeah, we still need acquisition here and an Application
     >>> from Acquisition import Explicit
-    >>> class Content(Explicit):
-    ...     implements(Interface)
+    >>> @implementer(Interface)
+    ... class Content(Explicit):
     ...
     ...     def getCurrentSkinName(self):
     ...         return getattr(self, 'skin', 'Plone Default')
@@ -60,8 +60,10 @@ Now we need some dummy viewlets.
 
     >>> from zope.viewlet.interfaces import IViewlet
     >>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer
-    >>> class BaseViewlet(Explicit):
-    ...     implements(IViewlet)
+    >>> from functools import total_ordering
+    >>> @implementer(IViewlet)
+    ... @total_ordering
+    ... class BaseViewlet(Explicit):
     ...
     ...     __allow_access_to_unprotected_subobjects__ = 1
     ...
@@ -75,6 +77,12 @@ Now we need some dummy viewlets.
     ...
     ...     def render(self):
     ...         return self.name
+    ...
+    ...     def __eq__(self, other):
+    ...         return self.name == other.name
+    ...
+    ...     def __lt__(self, other):
+    ...         return self.name < other.name
 
     >>> class FirstViewlet(BaseViewlet):
     ...     name = u"first"
diff --git a/plone/app/viewletmanager/tests/test_docs.py b/plone/app/viewletmanager/tests/test_docs.py
index 5a12903..8eb03ae 100644
--- a/plone/app/viewletmanager/tests/test_docs.py
+++ b/plone/app/viewletmanager/tests/test_docs.py
@@ -2,6 +2,8 @@
 from plone.app.viewletmanager.testing import optionflags
 
 import doctest
+import re
+import six
 import unittest
 
 
@@ -11,13 +13,28 @@
 ]
 
 
+class Py23DocChecker(doctest.OutputChecker):
+    def check_output(self, want, got, optionflags):
+        if six.PY2:
+            want = re.sub("b'(.*?)'", "'\\1'", want)
+        else:
+            want = re.sub("u'(.*?)'", "'\\1'", want)
+            got = re.sub(
+                'zope.interface.interfaces.ComponentLookupError',
+                'ComponentLookupError',
+                got,
+            )
+        return doctest.OutputChecker.check_output(self, want, got, optionflags)
+
+
 def test_suite():
     suite = unittest.TestSuite()
     suite.addTests([
         doctest.DocFileSuite(
             'tests/{0}'.format(doc_file),
             package='plone.app.viewletmanager',
-            optionflags=optionflags
+            optionflags=optionflags,
+            checker=Py23DocChecker(),
         )
         for doc_file in doc_tests
     ])


Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2018-05-05T18:00:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/fed14c52793f5c6fae88fe617c6946b5b4630213

Merge pull request #14 from plone/python3

More Python3 compatibility

Files changed:
M CHANGES.rst
M plone/app/viewletmanager/manager.py
M plone/app/viewletmanager/tests/manager.rst
M plone/app/viewletmanager/tests/test_docs.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8836137..32615a2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,7 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- More Python 2 / 3 compatibility [ale-rt, pbauer]
 
 
 2.0.11 (2018-01-30)
diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py
index 3ca341a..7bffd38 100644
--- a/plone/app/viewletmanager/manager.py
+++ b/plone/app/viewletmanager/manager.py
@@ -21,8 +21,6 @@
 from zope.viewlet.interfaces import IViewlet
 from ZPublisher.Publish import Retry
 
-import traceback
-
 
 logger = getLogger('plone.app.viewletmanager')
 
@@ -83,11 +81,7 @@ def sort(self, viewlets):
                 result.append((name, name_map[name]))
                 del name_map[name]
 
-        # then sort the remaining ones
-        # Copied from Five
-        remaining = sorted(name_map.items(),
-                           lambda x, y: cmp(aq_base(x[1]), aq_base(y[1])))
-
+        remaining = sorted(name_map.items(), key=lambda x: aq_base(x[1]))
         # return both together
         return result + remaining
 
diff --git a/plone/app/viewletmanager/tests/manager.rst b/plone/app/viewletmanager/tests/manager.rst
index 6de2d30..975c8de 100644
--- a/plone/app/viewletmanager/tests/manager.rst
+++ b/plone/app/viewletmanager/tests/manager.rst
@@ -2,7 +2,7 @@
 We need a storage for the viewlet settings.
 
     >>> from zope.component import provideUtility, provideAdapter, getAdapters
-    >>> from zope.interface import implements, Interface
+    >>> from zope.interface import implementer, Interface
     >>> from plone.app.viewletmanager.storage import ViewletSettingsStorage
     >>> from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
 
@@ -20,8 +20,8 @@ in Plone.
 
     >>> # yeah, yeah, we still need acquisition here and an Application
     >>> from Acquisition import Explicit
-    >>> class Content(Explicit):
-    ...     implements(Interface)
+    >>> @implementer(Interface)
+    ... class Content(Explicit):
     ...
     ...     def getCurrentSkinName(self):
     ...         return getattr(self, 'skin', 'Plone Default')
@@ -60,8 +60,10 @@ Now we need some dummy viewlets.
 
     >>> from zope.viewlet.interfaces import IViewlet
     >>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer
-    >>> class BaseViewlet(Explicit):
-    ...     implements(IViewlet)
+    >>> from functools import total_ordering
+    >>> @implementer(IViewlet)
+    ... @total_ordering
+    ... class BaseViewlet(Explicit):
     ...
     ...     __allow_access_to_unprotected_subobjects__ = 1
     ...
@@ -75,6 +77,12 @@ Now we need some dummy viewlets.
     ...
     ...     def render(self):
     ...         return self.name
+    ...
+    ...     def __eq__(self, other):
+    ...         return self.name == other.name
+    ...
+    ...     def __lt__(self, other):
+    ...         return self.name < other.name
 
     >>> class FirstViewlet(BaseViewlet):
     ...     name = u"first"
diff --git a/plone/app/viewletmanager/tests/test_docs.py b/plone/app/viewletmanager/tests/test_docs.py
index 5a12903..8eb03ae 100644
--- a/plone/app/viewletmanager/tests/test_docs.py
+++ b/plone/app/viewletmanager/tests/test_docs.py
@@ -2,6 +2,8 @@
 from plone.app.viewletmanager.testing import optionflags
 
 import doctest
+import re
+import six
 import unittest
 
 
@@ -11,13 +13,28 @@
 ]
 
 
+class Py23DocChecker(doctest.OutputChecker):
+    def check_output(self, want, got, optionflags):
+        if six.PY2:
+            want = re.sub("b'(.*?)'", "'\\1'", want)
+        else:
+            want = re.sub("u'(.*?)'", "'\\1'", want)
+            got = re.sub(
+                'zope.interface.interfaces.ComponentLookupError',
+                'ComponentLookupError',
+                got,
+            )
+        return doctest.OutputChecker.check_output(self, want, got, optionflags)
+
+
 def test_suite():
     suite = unittest.TestSuite()
     suite.addTests([
         doctest.DocFileSuite(
             'tests/{0}'.format(doc_file),
             package='plone.app.viewletmanager',
-            optionflags=optionflags
+            optionflags=optionflags,
+            checker=Py23DocChecker(),
         )
         for doc_file in doc_tests
     ])


