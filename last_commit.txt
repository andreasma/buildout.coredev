Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T16:48:19+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/3a5330147cc8d743dfc2923b21125e23b955b5c0

Move code into src directory.

Files changed:
A src/collective/__init__.py
A src/collective/monkeypatcher/__init__.py
A src/collective/monkeypatcher/configure.zcml
A src/collective/monkeypatcher/interfaces.py
A src/collective/monkeypatcher/meta.py
A src/collective/monkeypatcher/meta.zcml
A src/collective/monkeypatcher/tests/__init__.py
A src/collective/monkeypatcher/tests/common.py
A src/collective/monkeypatcher/tests/dummypatch.py
A src/collective/monkeypatcher/tests/dummypatch.zcml
A src/collective/monkeypatcher/tests/test_monkeypatcher.py
M setup.py
D collective/__init__.py
D collective/monkeypatcher/__init__.py
D collective/monkeypatcher/configure.zcml
D collective/monkeypatcher/interfaces.py
D collective/monkeypatcher/meta.py
D collective/monkeypatcher/meta.zcml
D collective/monkeypatcher/tests/__init__.py
D collective/monkeypatcher/tests/common.py
D collective/monkeypatcher/tests/dummypatch.py
D collective/monkeypatcher/tests/dummypatch.zcml
D collective/monkeypatcher/tests/test_monkeypatcher.py

b"diff --git a/setup.py b/setup.py\nindex c1ad4b3..5c1fc00 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -26,7 +26,8 @@\n     author_email='optilude@gmail.com',\n     url='https://github.com/plone/collective.monkeypatcher',\n     license='BSD',\n-    packages=find_packages(),\n+    packages=find_packages('src'),\n+    package_dir={'': 'src'},\n     namespace_packages=['collective'],\n     include_package_data=True,\n     zip_safe=False,\ndiff --git a/collective/__init__.py b/src/collective/__init__.py\nsimilarity index 100%\nrename from collective/__init__.py\nrename to src/collective/__init__.py\ndiff --git a/collective/monkeypatcher/__init__.py b/src/collective/monkeypatcher/__init__.py\nsimilarity index 100%\nrename from collective/monkeypatcher/__init__.py\nrename to src/collective/monkeypatcher/__init__.py\ndiff --git a/collective/monkeypatcher/configure.zcml b/src/collective/monkeypatcher/configure.zcml\nsimilarity index 100%\nrename from collective/monkeypatcher/configure.zcml\nrename to src/collective/monkeypatcher/configure.zcml\ndiff --git a/collective/monkeypatcher/interfaces.py b/src/collective/monkeypatcher/interfaces.py\nsimilarity index 100%\nrename from collective/monkeypatcher/interfaces.py\nrename to src/collective/monkeypatcher/interfaces.py\ndiff --git a/collective/monkeypatcher/meta.py b/src/collective/monkeypatcher/meta.py\nsimilarity index 100%\nrename from collective/monkeypatcher/meta.py\nrename to src/collective/monkeypatcher/meta.py\ndiff --git a/collective/monkeypatcher/meta.zcml b/src/collective/monkeypatcher/meta.zcml\nsimilarity index 100%\nrename from collective/monkeypatcher/meta.zcml\nrename to src/collective/monkeypatcher/meta.zcml\ndiff --git a/collective/monkeypatcher/tests/__init__.py b/src/collective/monkeypatcher/tests/__init__.py\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/__init__.py\nrename to src/collective/monkeypatcher/tests/__init__.py\ndiff --git a/collective/monkeypatcher/tests/common.py b/src/collective/monkeypatcher/tests/common.py\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/common.py\nrename to src/collective/monkeypatcher/tests/common.py\ndiff --git a/collective/monkeypatcher/tests/dummypatch.py b/src/collective/monkeypatcher/tests/dummypatch.py\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/dummypatch.py\nrename to src/collective/monkeypatcher/tests/dummypatch.py\ndiff --git a/collective/monkeypatcher/tests/dummypatch.zcml b/src/collective/monkeypatcher/tests/dummypatch.zcml\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/dummypatch.zcml\nrename to src/collective/monkeypatcher/tests/dummypatch.zcml\ndiff --git a/collective/monkeypatcher/tests/test_monkeypatcher.py b/src/collective/monkeypatcher/tests/test_monkeypatcher.py\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/test_monkeypatcher.py\nrename to src/collective/monkeypatcher/tests/test_monkeypatcher.py\n"

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T16:51:11+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/d0f8bbc5845620a6e848a431210bad353b271df9

Remove deprecated parts.

Some of them do not even build any more.
Adapt to currently maintained testrunner recipe.

Files changed:
M buildout.cfg
M setup.py

b"diff --git a/buildout.cfg b/buildout.cfg\nindex 35f6b82..eb52356 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,60 +1,8 @@\n [buildout]\n+develop = .\n parts =\n-    zope2\n-    instance\n-    zopepy\n     test\n-    coverage-test\n-    coverage-report\n-\n-eggs =\n-extends = http://dist.plone.org/release/3.2.1/versions.cfg\n-develop = .\n-\n-[zope2]\n-recipe = plone.recipe.zope2install\n-url = http://www.zope.org/Products/Zope/2.11.2/Zope-2.11.2-final.tgz\n-\n-[instance]\n-recipe = plone.recipe.zope2instance\n-zope2-location = ${zope2:location}\n-debug-mode = on\n-verbose-security = on\n-user = admin:admin\n-http-address = 0.0.0.0:8080\n-eggs =\n-    ${buildout:eggs}\n-    collective.monkeypatcher\n-    elementtree\n-zcml =\n-    collective.monkeypatcher\n-\n-[zopepy]\n-recipe = zc.recipe.egg\n-eggs = ${instance:eggs}\n-interpreter = zopepy\n-extra-paths = ${zope2:location}/lib/python\n-scripts = zopepy\n \n [test]\n-recipe = collective.recipe.z2testrunner\n-zope2part = instance\n-packages =\n-    collective.monkeypatcher\n-extra-paths = ${buildout:directory}\n-defaults = -cvvvv\n-exit-with-status = true\n-\n-[coverage-test]\n-recipe = collective.recipe.z2testrunner\n-zope2part = instance\n-packages =\n-    collective.monkeypatcher\n-extra-paths = ${buildout:directory}\n-defaults = --coverage=./coverage\n-\n-[coverage-report]\n-recipe = zc.recipe.egg\n-eggs = z3c.coverage\n-scripts = coverage=coverage-report\n-arguments = ('coverage', 'coverage/report')\n+recipe = zc.recipe.testrunner\n+eggs = collective.monkeypatcher[test]\ndiff --git a/setup.py b/setup.py\nindex 5c1fc00..23a816b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,4 +35,10 @@\n         'setuptools',\n         'six',\n     ],\n-    )\n+    extras_require={\n+        'test': [\n+            'zope.component',\n+            'zope.configuration',\n+        ],\n+    }\n+)\n"

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T16:51:41+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/1a53b7e0c6b71e5a420d691dba5d457dbc8f701e

Test using tox.

Files changed:
A .coveragerc
A tox.ini
M .gitignore

b'diff --git a/.coveragerc b/.coveragerc\nnew file mode 100644\nindex 0000000..a64632d\n--- /dev/null\n+++ b/.coveragerc\n@@ -0,0 +1,6 @@\n+[run]\n+branch = True\n+source = collective.monkeypatcher\n+\n+[report]\n+precision = 2\ndiff --git a/.gitignore b/.gitignore\nindex 5036f48..930d6e1 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,3 +1,8 @@\n *.pyc\n *egg-info\n-\n+.coverage\n+.installed.cfg\n+.tox/\n+bin/\n+develop-eggs/\n+htmlcov/\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..5f56ef8\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,33 @@\n+[tox]\n+envlist =\n+    flake8,\n+    py27,\n+    py36,\n+    py37,\n+    coverage,\n+\n+skip_missing_interpreters = False\n+\n+[testenv]\n+usedevelop = true\n+commands =\n+    zope-testrunner --all --test-path=src {posargs:-vc}\n+extras = test\n+deps =\n+    zope.testrunner\n+\n+[testenv:coverage]\n+basepython = python3.6\n+deps =\n+    zope.testrunner\n+    coverage\n+commands =\n+    coverage run -m zope.testrunner --all --test-path=src {posargs:-vc}\n+    coverage html\n+    coverage report --fail-under=71\n+\n+[testenv:flake8]\n+basepython = python2.7\n+skip_install = true\n+deps = flake8\n+commands = flake8 --doctests collective setup.py\n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T16:53:32+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/a1f9aac83d9f731e69cc21beb8fbc6627e7a8f40

Test via TravisCI.

Files changed:
A .travis.yml

b'diff --git a/.travis.yml b/.travis.yml\nnew file mode 100644\nindex 0000000..d81d498\n--- /dev/null\n+++ b/.travis.yml\n@@ -0,0 +1,19 @@\n+language: python\n+dist: xenial\n+python:\n+    - 2.7\n+    - 3.6\n+    - 3.7\n+before_install:\n+    - pip install -U setuptools pip\n+    - pip install -U coverage coveralls zope.testrunner\n+install:\n+    - pip install -U -e .[test]\n+script:\n+    - coverage run -m zope.testrunner --test-path=src --all -v1\n+notifications:\n+    email: false\n+after_success:\n+    - coveralls\n+cache:\n+  pip: true\n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T16:55:36+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/b64cc95a02e6aa502cdeb7a0f57713fd74864e13

Add change log entry.

Files changed:
M CHANGES.rst
M setup.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex fe7b020..62715df 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,8 +1,8 @@\n Changelog\n =========\n \n-1.1.7 (unreleased)\n-------------------\n+1.2 (unreleased)\n+----------------\n \n Breaking changes:\n \n@@ -10,7 +10,7 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Update test infrastructure.\n \n Bug fixes:\n \ndiff --git a/setup.py b/setup.py\nindex 23a816b..0f00516 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = '1.1.7.dev0'\n+version = '1.2.dev0'\n \n setup(\n     name='collective.monkeypatcher',\n"

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T16:58:53+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/9b57c6028bfe0753012b5f30d97f0f013625b465

Fix deprecation warnings.

Files changed:
M src/collective/monkeypatcher/tests/test_monkeypatcher.py

b'diff --git a/src/collective/monkeypatcher/tests/test_monkeypatcher.py b/src/collective/monkeypatcher/tests/test_monkeypatcher.py\nindex 761dbc4..fec3dff 100644\n--- a/src/collective/monkeypatcher/tests/test_monkeypatcher.py\n+++ b/src/collective/monkeypatcher/tests/test_monkeypatcher.py\n@@ -14,23 +14,23 @@ def test_patchedClass(self):\n \n         # Testing applyed patch\n         ob = dummypatch.Dummy()\n-        self.failUnlessEqual(ob.someMethod(), "patched")\n+        self.assertEqual(ob.someMethod(), "patched")\n \n         # Testing docstring preservation\n         docstring = dummypatch.Dummy.someMethod.__doc__\n-        self.failUnlessEqual(docstring, "someMethod docstring")\n+        self.assertEqual(docstring, "someMethod docstring")\n         return\n \n     def test_patchedFunction(self):\n         """We have our someFunction patched"""\n \n         # Testing applyed patch\n-        self.failUnlessEqual(dummypatch.someFunction(1), 2)\n+        self.assertEqual(dummypatch.someFunction(1), 2)\n \n         # Testing docstring monkeypatch note\n         docstring = dummypatch.someFunction.__doc__\n-        self.failUnless(docstring.startswith("someFunction docstring"))\n-        self.failUnless(docstring.endswith(\n+        self.assertTrue(docstring.startswith("someFunction docstring"))\n+        self.assertTrue(docstring.endswith(\n             "\'collective.monkeypatcher.tests.dummypatch.patchedFunction\'"))\n         return\n \n@@ -38,14 +38,14 @@ def test_patchWithHandler(self):\n         """Patch applied with personal handler"""\n \n         ob = dummypatch.Foo()\n-        self.failUnlessEqual(ob.someFooMethod(), "patchedFooMethod result")\n+        self.assertEqual(ob.someFooMethod(), "patchedFooMethod result")\n         return\n \n     def test_patchWithBuiltin(self):\n         """see https://github.com/plone/collective.monkeypatcher/pull/2\n         """\n         ob = dummypatch.Foo()\n-        self.failUnlessEqual(ob.config, (1, 2))\n+        self.assertEqual(ob.config, (1, 2))\n         return\n \n     def test_monkeyPatchEvent(self):\n@@ -54,15 +54,15 @@ def test_monkeyPatchEvent(self):\n         events = dummypatch.all_patches\n         expected_keys = set(\n             (\'description\', \'original\', \'replacement\', \'zcml_info\'))\n-        self.failUnlessEqual(len(events), 4)\n+        self.assertEqual(len(events), 4)\n         for event in events:\n \n             # Interface conformance\n-            self.failUnless(IMonkeyPatchEvent.providedBy(event))\n+            self.assertTrue(IMonkeyPatchEvent.providedBy(event))\n \n             # Checking available infos\n             info_keys = set(event.patch_info.keys())\n-            self.failUnlessEqual(info_keys, expected_keys)\n+            self.assertEqual(info_keys, expected_keys)\n         return\n \n \n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T17:06:47+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/840bc9cec593f5669d45cbf9215f3bc343ef7cbe

Flake8 the code.

Files changed:
M setup.py
M src/collective/monkeypatcher/meta.py
M tox.ini

b'diff --git a/setup.py b/setup.py\nindex 0f00516..ecb8464 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -20,7 +20,7 @@\n         "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n-        ],\n+    ],\n     keywords=\'zope monkey patch\',\n     author=\'Martin Aspeli\',\n     author_email=\'optilude@gmail.com\',\ndiff --git a/src/collective/monkeypatcher/meta.py b/src/collective/monkeypatcher/meta.py\nindex e270fee..4d1b963 100644\n--- a/src/collective/monkeypatcher/meta.py\n+++ b/src/collective/monkeypatcher/meta.py\n@@ -19,44 +19,84 @@\n \n class IMonkeyPatchDirective(Interface):\n     """ZCML directive to apply a monkey patch late in the configuration cycle.\n+\n     This version replaces one object with another.\n     """\n \n-    class_ = GlobalObject(title=u"The class being patched", required=False)\n-    module = GlobalObject(title=u"The module being patched", required=False)\n-    handler = GlobalObject(title=u"A function to perform the patching.",\n-                           description=u"Must take three parameters: class/module, original (string), and replacement",\n-                           required=False)\n+    class_ = GlobalObject(\n+        title=u"The class being patched",\n+        required=False)\n+    module = GlobalObject(\n+        title=u"The module being patched",\n+        required=False)\n+    handler = GlobalObject(\n+        title=u"A function to perform the patching.",\n+        description=(\n+            u"Must take three parameters: class/module, original (string),"\n+            u" and replacement"),\n+        required=False)\n     original = PythonIdentifier(title=u"Method or function to replace")\n     replacement = GlobalObject(title=u"Method to function to replace with")\n-    preservedoc = Bool(title=u"Preserve docstrings?", required=False, default=True)\n-    preserveOriginal = Bool(title=u\'Preserve the original function so that it is reachable view prefix _old_. Only works for def handler.\',\n-                            default=False, required=False)\n-    preconditions = Text(title=u\'Preconditions (multiple, separated by space) to be satisified before applying this patch. Example: Products.LinguaPlone<=1.4.3\',\n-                         required=False, default=u\'\')\n-    ignoreOriginal = Bool(title=u"Ignore if the orginal function isn\'t present on the class/module being patched",\n-                          default=False)\n-    docstringWarning = Bool(title=u"Add monkey patch warning in docstring", required=False, default=True)\n-    description = Text(title=u\'Some comments about your monkey patch\', required=False, default=u"(No comment)")\n-    order = Int(title=u"Execution order", required=False, default=1000)\n-\n-\n-def replace(_context, original, replacement, class_=None, module=None, handler=None, preservedoc=True,\n-            docstringWarning=True, description=u"(No comment)", order=1000, ignoreOriginal=False,\n-            preserveOriginal=False, preconditions=u\'\'):\n+    preservedoc = Bool(\n+        title=u"Preserve docstrings?",\n+        required=False,\n+        default=True)\n+    preserveOriginal = Bool(\n+        title=(u"Preserve the original function so that it is reachable view"\n+               u" prefix _old_. Only works for def handler."),\n+        default=False, required=False)\n+    preconditions = Text(\n+        title=(u"Preconditions (multiple, separated by space) to be satisfied"\n+               u" before applying this patch. Example:"\n+               u" Products.LinguaPlone<=1.4.3"),\n+        required=False,\n+        default=u"")\n+    ignoreOriginal = Bool(\n+        title=(u"Ignore if the orginal function isn\'t present on the"\n+               u" class/module being patched"),\n+        default=False)\n+    docstringWarning = Bool(\n+        title=u"Add monkey patch warning in docstring",\n+        required=False,\n+        default=True)\n+    description = Text(\n+        title=u\'Some comments about your monkey patch\',\n+        required=False,\n+        default=u"(No comment)")\n+    order = Int(\n+        title=u"Execution order",\n+        required=False,\n+        default=1000)\n+\n+\n+def replace(\n+        _context,\n+        original,\n+        replacement,\n+        class_=None,\n+        module=None,\n+        handler=None,\n+        preservedoc=True,\n+        docstringWarning=True,\n+        description=u"(No comment)",\n+        order=1000,\n+        ignoreOriginal=False,\n+        preserveOriginal=False,\n+        preconditions=u\'\'):\n     """ZCML directive handler"""\n-\n     if class_ is None and module is None:\n         raise ConfigurationError(u"You must specify \'class\' or \'module\'")\n     if class_ is not None and module is not None:\n-        raise ConfigurationError(u"You must specify one of \'class\' or \'module\', but not both.")\n+        raise ConfigurationError(\n+            u"You must specify one of \'class\' or \'module\', but not both.")\n \n     scope = class_ or module\n \n     to_be_replaced = getattr(scope, original, None)\n \n     if to_be_replaced is None and not ignoreOriginal:\n-        raise ConfigurationError("Original %s in %s not found" % (original, str(scope)))\n+        raise ConfigurationError(\n+            "Original %s in %s not found" % (original, str(scope)))\n \n     if preservedoc:\n         try:\n@@ -66,7 +106,8 @@ def replace(_context, original, replacement, class_=None, module=None, handler=N\n \n     if docstringWarning:\n         try:\n-            patch_warning = "\\n**Monkey patched by** \'%s.%s\'" % (getattr(replacement, \'__module__\', \'\'), replacement.__name__)\n+            patch_warning = "\\n**Monkey patched by** \'%s.%s\'" % (\n+                getattr(replacement, \'__module__\', \'\'), replacement.__name__)\n             if replacement.__doc__ is None:\n                 replacement.__doc__ = \'\'\n             replacement.__doc__ += patch_warning\n@@ -76,7 +117,8 @@ def replace(_context, original, replacement, class_=None, module=None, handler=N\n     # check version\n     if preconditions != u\'\':\n         if not _preconditions_matching(preconditions):\n-            log.info(\'Preconditions for patching scope %s not met (%s)!\' % (scope, preconditions))\n+            log.info(\'Preconditions for patching scope %s not met (%s)!\',\n+                     scope, preconditions)\n             return  # fail silently\n \n     if handler is None:\n@@ -89,15 +131,17 @@ def replace(_context, original, replacement, class_=None, module=None, handler=N\n         discriminator=None,\n         callable=_do_patch,\n         order=order,\n-        args=(handler, scope, original, replacement, repr(_context.info), description))\n+        args=(handler, scope, original, replacement, repr(_context.info),\n+              description))\n     return\n \n \n def _preconditions_matching(preconditions):\n-    """ Returns True if preconditions matching """\n-\n-    matcher_r = re.compile(r\'^(.*?)([-+!=]+)(.*)$\', re.DOTALL | re.IGNORECASE | re.MULTILINE)\n-    version_r = re.compile(r\'^([0-9]+)\\.([0-9]+)\\.?([0-9]?).*$\', re.IGNORECASE | re.MULTILINE)\n+    """Return `True` if preconditions are matching."""\n+    matcher_r = re.compile(\n+        r\'^(.*?)([-+!=]+)(.*)$\', re.DOTALL | re.IGNORECASE | re.MULTILINE)\n+    version_r = re.compile(\n+        r\'^([0-9]+)\\.([0-9]+)\\.?([0-9]?).*$\', re.IGNORECASE | re.MULTILINE)\n     ev = pkg_resources.Environment()\n \n     # split all preconds\n@@ -112,11 +156,18 @@ def _preconditions_matching(preconditions):\n \n         # fill versions - we assume having s/th like\n         # 1.2.3a2 or 1.2a1 or 1.2.0 - look at regexp\n-        p_v = list(map(int, [x for x in version_r.search(version).groups() if x and int(x) or 0]))\n-        p_i = list(map(int, [y for y in version_r.search(dp[0].version).groups() if y and int(y) or 0]))\n+        p_v = list(map(int, [\n+            x\n+            for x in version_r.search(version).groups()\n+            if x and int(x) or 0]))\n+        p_i = list(map(int, [\n+            y\n+            for y in version_r.search(dp[0].version).groups()\n+            if y and int(y) or 0]))\n \n         if not p_v or not p_i:\n-            log.error(\'Could not patch because version not recognized. Wanted: %s, Installed: %s\' % (p_v, p_i))\n+            log.error("Could not patch because version not recognized. Wanted:"\n+                      " %s, Installed: %s", p_v, p_i)\n             return False\n \n         # compare operators - dumb if check - could be better\n@@ -135,6 +186,7 @@ def _preconditions_matching(preconditions):\n @implementer(interfaces.IMonkeyPatchEvent)\n class MonkeyPatchEvent(object):\n     """Envent raised when a monkeypatch is applied\n+\n     see interfaces.IMonkeyPatchEvent\n     """\n \n@@ -145,14 +197,15 @@ def __init__(self, mp_info):\n \n def _do_patch(handler, scope, original, replacement, zcml_info, description):\n     """Apply the monkey patch through preferred method"""\n-\n     try:\n-        org_dotted_name = \'%s.%s.%s\' % (scope.__module__, scope.__name__, original)\n+        org_dotted_name = \'%s.%s.%s\' % (\n+            scope.__module__, scope.__name__, original)\n     except AttributeError:\n         org_dotted_name = \'%s.%s\' % (scope.__name__, original)\n \n     try:\n-        new_dotted_name = "%s.%s" % (getattr(replacement, \'__module__\', \'\'), replacement.__name__)\n+        new_dotted_name = "%s.%s" % (\n+            getattr(replacement, \'__module__\', \'\'), replacement.__name__)\n     except AttributeError:\n         # builtins don\'t have __module__ and __name__\n         new_dotted_name = str(replacement)\n@@ -161,7 +214,8 @@ def _do_patch(handler, scope, original, replacement, zcml_info, description):\n     if handler != _default_patch:\n         handler_info = " using custom handler %s" % handler\n \n-    log.debug("Monkey patching %s with %s" % (org_dotted_name, new_dotted_name,) + handler_info)\n+    log.debug("Monkey patching %s with %s%s",\n+              org_dotted_name, new_dotted_name, handler_info)\n \n     info = {\n         \'description\': description,\n@@ -176,14 +230,12 @@ def _do_patch(handler, scope, original, replacement, zcml_info, description):\n \n def _default_patch(scope, original, replacement):\n     """Default patch method"""\n-\n     setattr(scope, original, replacement)\n     return\n \n \n def _default_preserve_handler(scope, original, replacement):\n-    """ Default handler that preserves original method """\n-\n+    """Default handler that preserves original method"""\n     OLD_NAME = \'_old_%s\' % original\n \n     if not hasattr(scope, OLD_NAME):\ndiff --git a/tox.ini b/tox.ini\nindex 5f56ef8..33d719c 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -30,4 +30,4 @@ commands =\n basepython = python2.7\n skip_install = true\n deps = flake8\n-commands = flake8 --doctests collective setup.py\n+commands = flake8 --doctests src setup.py\n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T17:11:27+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/857b7d4c95ef6a34a07965c561ce9164b3585fc4

Add some badges.

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 978009a..ee817f6 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -2,6 +2,21 @@\n collective.monkeypatcher\n ========================\n \n+.. image:: https://travis-ci.com/plone/collective.monkeypatcher.svg?branch=master\n+    :target: https://travis-ci.com/plone/collective.monkeypatcher\n+\n+.. image:: https://coveralls.io/repos/github/zopefoundation/collective.monkeypatcher/badge.svg?branch=master\n+        :target: https://coveralls.io/github/zopefoundation/collective.monkeypatcher?branch=master\n+\n+.. image:: https://img.shields.io/pypi/v/collective.monkeypatcher.svg\n+        :target: https://pypi.org/project/collective.monkeypatcher/\n+        :alt: Current version on PyPI\n+\n+.. image:: https://img.shields.io/pypi/pyversions/collective.monkeypatcher.svg\n+        :target: https://pypi.org/project/collective.monkeypatcher/\n+        :alt: Supported Python versions\n+\n+\n Introduction\n ============\n \n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-29T17:11:46+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/3b8d8f9f8a4beae4d2d54d1bf4e1d3a6c595e88b

Remove no longer supported version.
It is untested.

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex ecb8464..5483a3f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -16,7 +16,6 @@\n     classifiers=[\n         "License :: OSI Approved :: BSD License",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.6",\n         "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-30T10:34:42+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/4281307dfa317ff8d5a78367f50d5fa642e287c8

Include installation instructions in the README.

They were quite invisible in the docs folder.

Files changed:
M README.rst
D docs/INSTALL.txt

b'diff --git a/README.rst b/README.rst\nindex ee817f6..bf5293f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -27,7 +27,51 @@ It uses the ZCML configuration machinery to ensure that patches are loaded\n "late" in the startup cycle, so that the original code has had time to be\n fully initialised and configured. This is similar to using the `initialize()`\n method in a product\'s __init__.py, except it does not require that the package\n-be a full-blown Zope 2 product with a persistent Control_Panel entry.\n+be a full-blown Zope product with a persistent Control_Panel entry.\n+\n+\n+Installation\n+============\n+\n+To install `collective.monkeypatcher` into the global Python environment\n+(or a working environment), using a traditional Zope instance, you can do this:\n+\n+* When you\'re reading this you have probably already run\n+  ``pip install collective.monkeypatcher``.\n+\n+* Create a file called ``collective.monkeypatcher-configure.zcml`` in the\n+  ``/path/to/instance/etc/package-includes`` directory.  The file\n+  should only contain this::\n+\n+    <include package="collective.monkeypatcher" />\n+\n+\n+Alternatively, if you are using `zc.buildout` and the\n+`plone.recipe.zope2instance`  recipe to manage your project, you can do this:\n+\n+* Add ``collective.monkeypatcher`` to the list of eggs to install, e.g.::\n+\n+    [buildout]\n+    ...\n+    eggs =\n+        ...\n+        collective.monkeypatcher\n+\n+* Tell the plone.recipe.zope2instance recipe to install a ZCML slug::\n+\n+    [instance]\n+    recipe = plone.recipe.zope2instance\n+    ...\n+    zcml =\n+        collective.monkeypatcher\n+\n+* Re-run buildout, e.g. with::\n+\n+    $ ./bin/buildout\n+\n+You can skip the ZCML slug if you are going to explicitly include the package\n+from another package\'s configure.zcml file.\n+\n \n Applying a monkey patch\n =======================\ndiff --git a/docs/INSTALL.txt b/docs/INSTALL.txt\ndeleted file mode 100644\nindex 01a9c5d..0000000\n--- a/docs/INSTALL.txt\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-collective.monkeypatcher Installation\n--------------------------------------\n-\n-To install collective.monkeypatcher into the global Python environment (or a workingenv),\n-using a traditional Zope 2 instance, you can do this:\n-\n-* When you\'re reading this you have probably already run\n-  ``easy_install collective.monkeypatcher``. Find out how to install setuptools\n-  (and EasyInstall) here:\n-  http://peak.telecommunity.com/DevCenter/EasyInstall\n-\n-* Create a file called ``collective.monkeypatcher-configure.zcml`` in the\n-  ``/path/to/instance/etc/package-includes`` directory.  The file\n-  should only contain this::\n-\n-    <include package="collective.monkeypatcher" />\n-\n-\n-Alternatively, if you are using zc.buildout and the plone.recipe.zope2instance\n-recipe to manage your project, you can do this:\n-\n-* Add ``collective.monkeypatcher`` to the list of eggs to install, e.g.:\n-\n-    [buildout]\n-    ...\n-    eggs =\n-        ...\n-        collective.monkeypatcher\n-\n-* Tell the plone.recipe.zope2instance recipe to install a ZCML slug:\n-\n-    [instance]\n-    recipe = plone.recipe.zope2instance\n-    ...\n-    zcml =\n-        collective.monkeypatcher\n-\n-* Re-run buildout, e.g. with:\n-\n-    $ ./bin/buildout\n-\n-You can skip the ZCML slug if you are going to explicitly include the package\n-from another package\'s configure.zcml file.\n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-30T10:35:27+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/f0b402c3f6e0a9d5eeaa9f37c2518d45ea5dcc88

Pimp MANIFEST.

Files changed:
M MANIFEST.in

b'diff --git a/MANIFEST.in b/MANIFEST.in\nindex cd5112a..d39feea 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,6 +1,4 @@\n include *.rst\n-\n-recursive-include docs *\n-recursive-include collective *\n-\n-global-exclude *pyc\n+include .coveragerc\n+include tox.ini\n+recursive-include src *.zcml\n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-30T10:35:43+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/8525097b5e8b83863be4c7d2d30e718ec0f004bc

Use more recent Python version.

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex 33d719c..c059656 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ commands =\n     coverage report --fail-under=71\n \n [testenv:flake8]\n-basepython = python2.7\n+basepython = python3.6\n skip_install = true\n deps = flake8\n commands = flake8 --doctests src setup.py\n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-30T10:37:00+01:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/collective.monkeypatcher/commit/524fd2b72ce7a341b04a04a3185a8c8857068789

Add change log entry.

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 62715df..275c8e1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,6 +10,8 @@ Breaking changes:\n \n New features:\n \n+- Include installation instructions in the README.\n+\n - Update test infrastructure.\n \n Bug fixes:\n'

Repository: collective.monkeypatcher


Branch: refs/heads/master
Date: 2018-11-30T18:42:18+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/collective.monkeypatcher/commit/80cc1fcd9e0f9eaf1255b5b16ff29b629afc8721

Merge pull request #12 from plone/update-infrastructure

Update infrastructure

Files changed:
A .coveragerc
A .travis.yml
A src/collective/__init__.py
A src/collective/monkeypatcher/__init__.py
A src/collective/monkeypatcher/configure.zcml
A src/collective/monkeypatcher/interfaces.py
A src/collective/monkeypatcher/meta.py
A src/collective/monkeypatcher/meta.zcml
A src/collective/monkeypatcher/tests/__init__.py
A src/collective/monkeypatcher/tests/common.py
A src/collective/monkeypatcher/tests/dummypatch.py
A src/collective/monkeypatcher/tests/dummypatch.zcml
A src/collective/monkeypatcher/tests/test_monkeypatcher.py
A tox.ini
M .gitignore
M CHANGES.rst
M MANIFEST.in
M README.rst
M buildout.cfg
M setup.py
D collective/__init__.py
D collective/monkeypatcher/__init__.py
D collective/monkeypatcher/configure.zcml
D collective/monkeypatcher/interfaces.py
D collective/monkeypatcher/meta.py
D collective/monkeypatcher/meta.zcml
D collective/monkeypatcher/tests/__init__.py
D collective/monkeypatcher/tests/common.py
D collective/monkeypatcher/tests/dummypatch.py
D collective/monkeypatcher/tests/dummypatch.zcml
D collective/monkeypatcher/tests/test_monkeypatcher.py
D docs/INSTALL.txt

b'diff --git a/.coveragerc b/.coveragerc\nnew file mode 100644\nindex 0000000..a64632d\n--- /dev/null\n+++ b/.coveragerc\n@@ -0,0 +1,6 @@\n+[run]\n+branch = True\n+source = collective.monkeypatcher\n+\n+[report]\n+precision = 2\ndiff --git a/.gitignore b/.gitignore\nindex 5036f48..930d6e1 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,3 +1,8 @@\n *.pyc\n *egg-info\n-\n+.coverage\n+.installed.cfg\n+.tox/\n+bin/\n+develop-eggs/\n+htmlcov/\ndiff --git a/.travis.yml b/.travis.yml\nnew file mode 100644\nindex 0000000..d81d498\n--- /dev/null\n+++ b/.travis.yml\n@@ -0,0 +1,19 @@\n+language: python\n+dist: xenial\n+python:\n+    - 2.7\n+    - 3.6\n+    - 3.7\n+before_install:\n+    - pip install -U setuptools pip\n+    - pip install -U coverage coveralls zope.testrunner\n+install:\n+    - pip install -U -e .[test]\n+script:\n+    - coverage run -m zope.testrunner --test-path=src --all -v1\n+notifications:\n+    email: false\n+after_success:\n+    - coveralls\n+cache:\n+  pip: true\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex fe7b020..275c8e1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,8 +1,8 @@\n Changelog\n =========\n \n-1.1.7 (unreleased)\n-------------------\n+1.2 (unreleased)\n+----------------\n \n Breaking changes:\n \n@@ -10,7 +10,9 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Include installation instructions in the README.\n+\n+- Update test infrastructure.\n \n Bug fixes:\n \ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex cd5112a..d39feea 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,6 +1,4 @@\n include *.rst\n-\n-recursive-include docs *\n-recursive-include collective *\n-\n-global-exclude *pyc\n+include .coveragerc\n+include tox.ini\n+recursive-include src *.zcml\ndiff --git a/README.rst b/README.rst\nindex 978009a..bf5293f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -2,6 +2,21 @@\n collective.monkeypatcher\n ========================\n \n+.. image:: https://travis-ci.com/plone/collective.monkeypatcher.svg?branch=master\n+    :target: https://travis-ci.com/plone/collective.monkeypatcher\n+\n+.. image:: https://coveralls.io/repos/github/zopefoundation/collective.monkeypatcher/badge.svg?branch=master\n+        :target: https://coveralls.io/github/zopefoundation/collective.monkeypatcher?branch=master\n+\n+.. image:: https://img.shields.io/pypi/v/collective.monkeypatcher.svg\n+        :target: https://pypi.org/project/collective.monkeypatcher/\n+        :alt: Current version on PyPI\n+\n+.. image:: https://img.shields.io/pypi/pyversions/collective.monkeypatcher.svg\n+        :target: https://pypi.org/project/collective.monkeypatcher/\n+        :alt: Supported Python versions\n+\n+\n Introduction\n ============\n \n@@ -12,7 +27,51 @@ It uses the ZCML configuration machinery to ensure that patches are loaded\n "late" in the startup cycle, so that the original code has had time to be\n fully initialised and configured. This is similar to using the `initialize()`\n method in a product\'s __init__.py, except it does not require that the package\n-be a full-blown Zope 2 product with a persistent Control_Panel entry.\n+be a full-blown Zope product with a persistent Control_Panel entry.\n+\n+\n+Installation\n+============\n+\n+To install `collective.monkeypatcher` into the global Python environment\n+(or a working environment), using a traditional Zope instance, you can do this:\n+\n+* When you\'re reading this you have probably already run\n+  ``pip install collective.monkeypatcher``.\n+\n+* Create a file called ``collective.monkeypatcher-configure.zcml`` in the\n+  ``/path/to/instance/etc/package-includes`` directory.  The file\n+  should only contain this::\n+\n+    <include package="collective.monkeypatcher" />\n+\n+\n+Alternatively, if you are using `zc.buildout` and the\n+`plone.recipe.zope2instance`  recipe to manage your project, you can do this:\n+\n+* Add ``collective.monkeypatcher`` to the list of eggs to install, e.g.::\n+\n+    [buildout]\n+    ...\n+    eggs =\n+        ...\n+        collective.monkeypatcher\n+\n+* Tell the plone.recipe.zope2instance recipe to install a ZCML slug::\n+\n+    [instance]\n+    recipe = plone.recipe.zope2instance\n+    ...\n+    zcml =\n+        collective.monkeypatcher\n+\n+* Re-run buildout, e.g. with::\n+\n+    $ ./bin/buildout\n+\n+You can skip the ZCML slug if you are going to explicitly include the package\n+from another package\'s configure.zcml file.\n+\n \n Applying a monkey patch\n =======================\ndiff --git a/buildout.cfg b/buildout.cfg\nindex 35f6b82..eb52356 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,60 +1,8 @@\n [buildout]\n+develop = .\n parts =\n-    zope2\n-    instance\n-    zopepy\n     test\n-    coverage-test\n-    coverage-report\n-\n-eggs =\n-extends = http://dist.plone.org/release/3.2.1/versions.cfg\n-develop = .\n-\n-[zope2]\n-recipe = plone.recipe.zope2install\n-url = http://www.zope.org/Products/Zope/2.11.2/Zope-2.11.2-final.tgz\n-\n-[instance]\n-recipe = plone.recipe.zope2instance\n-zope2-location = ${zope2:location}\n-debug-mode = on\n-verbose-security = on\n-user = admin:admin\n-http-address = 0.0.0.0:8080\n-eggs =\n-    ${buildout:eggs}\n-    collective.monkeypatcher\n-    elementtree\n-zcml =\n-    collective.monkeypatcher\n-\n-[zopepy]\n-recipe = zc.recipe.egg\n-eggs = ${instance:eggs}\n-interpreter = zopepy\n-extra-paths = ${zope2:location}/lib/python\n-scripts = zopepy\n \n [test]\n-recipe = collective.recipe.z2testrunner\n-zope2part = instance\n-packages =\n-    collective.monkeypatcher\n-extra-paths = ${buildout:directory}\n-defaults = -cvvvv\n-exit-with-status = true\n-\n-[coverage-test]\n-recipe = collective.recipe.z2testrunner\n-zope2part = instance\n-packages =\n-    collective.monkeypatcher\n-extra-paths = ${buildout:directory}\n-defaults = --coverage=./coverage\n-\n-[coverage-report]\n-recipe = zc.recipe.egg\n-eggs = z3c.coverage\n-scripts = coverage=coverage-report\n-arguments = (\'coverage\', \'coverage/report\')\n+recipe = zc.recipe.testrunner\n+eggs = collective.monkeypatcher[test]\ndiff --git a/docs/INSTALL.txt b/docs/INSTALL.txt\ndeleted file mode 100644\nindex 01a9c5d..0000000\n--- a/docs/INSTALL.txt\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-collective.monkeypatcher Installation\n--------------------------------------\n-\n-To install collective.monkeypatcher into the global Python environment (or a workingenv),\n-using a traditional Zope 2 instance, you can do this:\n-\n-* When you\'re reading this you have probably already run\n-  ``easy_install collective.monkeypatcher``. Find out how to install setuptools\n-  (and EasyInstall) here:\n-  http://peak.telecommunity.com/DevCenter/EasyInstall\n-\n-* Create a file called ``collective.monkeypatcher-configure.zcml`` in the\n-  ``/path/to/instance/etc/package-includes`` directory.  The file\n-  should only contain this::\n-\n-    <include package="collective.monkeypatcher" />\n-\n-\n-Alternatively, if you are using zc.buildout and the plone.recipe.zope2instance\n-recipe to manage your project, you can do this:\n-\n-* Add ``collective.monkeypatcher`` to the list of eggs to install, e.g.:\n-\n-    [buildout]\n-    ...\n-    eggs =\n-        ...\n-        collective.monkeypatcher\n-\n-* Tell the plone.recipe.zope2instance recipe to install a ZCML slug:\n-\n-    [instance]\n-    recipe = plone.recipe.zope2instance\n-    ...\n-    zcml =\n-        collective.monkeypatcher\n-\n-* Re-run buildout, e.g. with:\n-\n-    $ ./bin/buildout\n-\n-You can skip the ZCML slug if you are going to explicitly include the package\n-from another package\'s configure.zcml file.\ndiff --git a/setup.py b/setup.py\nindex c1ad4b3..5483a3f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'1.1.7.dev0\'\n+version = \'1.2.dev0\'\n \n setup(\n     name=\'collective.monkeypatcher\',\n@@ -16,17 +16,17 @@\n     classifiers=[\n         "License :: OSI Approved :: BSD License",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.6",\n         "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n-        ],\n+    ],\n     keywords=\'zope monkey patch\',\n     author=\'Martin Aspeli\',\n     author_email=\'optilude@gmail.com\',\n     url=\'https://github.com/plone/collective.monkeypatcher\',\n     license=\'BSD\',\n-    packages=find_packages(),\n+    packages=find_packages(\'src\'),\n+    package_dir={\'\': \'src\'},\n     namespace_packages=[\'collective\'],\n     include_package_data=True,\n     zip_safe=False,\n@@ -34,4 +34,10 @@\n         \'setuptools\',\n         \'six\',\n     ],\n-    )\n+    extras_require={\n+        \'test\': [\n+            \'zope.component\',\n+            \'zope.configuration\',\n+        ],\n+    }\n+)\ndiff --git a/collective/__init__.py b/src/collective/__init__.py\nsimilarity index 100%\nrename from collective/__init__.py\nrename to src/collective/__init__.py\ndiff --git a/collective/monkeypatcher/__init__.py b/src/collective/monkeypatcher/__init__.py\nsimilarity index 100%\nrename from collective/monkeypatcher/__init__.py\nrename to src/collective/monkeypatcher/__init__.py\ndiff --git a/collective/monkeypatcher/configure.zcml b/src/collective/monkeypatcher/configure.zcml\nsimilarity index 100%\nrename from collective/monkeypatcher/configure.zcml\nrename to src/collective/monkeypatcher/configure.zcml\ndiff --git a/collective/monkeypatcher/interfaces.py b/src/collective/monkeypatcher/interfaces.py\nsimilarity index 100%\nrename from collective/monkeypatcher/interfaces.py\nrename to src/collective/monkeypatcher/interfaces.py\ndiff --git a/collective/monkeypatcher/meta.py b/src/collective/monkeypatcher/meta.py\nsimilarity index 56%\nrename from collective/monkeypatcher/meta.py\nrename to src/collective/monkeypatcher/meta.py\nindex e270fee..4d1b963 100644\n--- a/collective/monkeypatcher/meta.py\n+++ b/src/collective/monkeypatcher/meta.py\n@@ -19,44 +19,84 @@\n \n class IMonkeyPatchDirective(Interface):\n     """ZCML directive to apply a monkey patch late in the configuration cycle.\n+\n     This version replaces one object with another.\n     """\n \n-    class_ = GlobalObject(title=u"The class being patched", required=False)\n-    module = GlobalObject(title=u"The module being patched", required=False)\n-    handler = GlobalObject(title=u"A function to perform the patching.",\n-                           description=u"Must take three parameters: class/module, original (string), and replacement",\n-                           required=False)\n+    class_ = GlobalObject(\n+        title=u"The class being patched",\n+        required=False)\n+    module = GlobalObject(\n+        title=u"The module being patched",\n+        required=False)\n+    handler = GlobalObject(\n+        title=u"A function to perform the patching.",\n+        description=(\n+            u"Must take three parameters: class/module, original (string),"\n+            u" and replacement"),\n+        required=False)\n     original = PythonIdentifier(title=u"Method or function to replace")\n     replacement = GlobalObject(title=u"Method to function to replace with")\n-    preservedoc = Bool(title=u"Preserve docstrings?", required=False, default=True)\n-    preserveOriginal = Bool(title=u\'Preserve the original function so that it is reachable view prefix _old_. Only works for def handler.\',\n-                            default=False, required=False)\n-    preconditions = Text(title=u\'Preconditions (multiple, separated by space) to be satisified before applying this patch. Example: Products.LinguaPlone<=1.4.3\',\n-                         required=False, default=u\'\')\n-    ignoreOriginal = Bool(title=u"Ignore if the orginal function isn\'t present on the class/module being patched",\n-                          default=False)\n-    docstringWarning = Bool(title=u"Add monkey patch warning in docstring", required=False, default=True)\n-    description = Text(title=u\'Some comments about your monkey patch\', required=False, default=u"(No comment)")\n-    order = Int(title=u"Execution order", required=False, default=1000)\n-\n-\n-def replace(_context, original, replacement, class_=None, module=None, handler=None, preservedoc=True,\n-            docstringWarning=True, description=u"(No comment)", order=1000, ignoreOriginal=False,\n-            preserveOriginal=False, preconditions=u\'\'):\n+    preservedoc = Bool(\n+        title=u"Preserve docstrings?",\n+        required=False,\n+        default=True)\n+    preserveOriginal = Bool(\n+        title=(u"Preserve the original function so that it is reachable view"\n+               u" prefix _old_. Only works for def handler."),\n+        default=False, required=False)\n+    preconditions = Text(\n+        title=(u"Preconditions (multiple, separated by space) to be satisfied"\n+               u" before applying this patch. Example:"\n+               u" Products.LinguaPlone<=1.4.3"),\n+        required=False,\n+        default=u"")\n+    ignoreOriginal = Bool(\n+        title=(u"Ignore if the orginal function isn\'t present on the"\n+               u" class/module being patched"),\n+        default=False)\n+    docstringWarning = Bool(\n+        title=u"Add monkey patch warning in docstring",\n+        required=False,\n+        default=True)\n+    description = Text(\n+        title=u\'Some comments about your monkey patch\',\n+        required=False,\n+        default=u"(No comment)")\n+    order = Int(\n+        title=u"Execution order",\n+        required=False,\n+        default=1000)\n+\n+\n+def replace(\n+        _context,\n+        original,\n+        replacement,\n+        class_=None,\n+        module=None,\n+        handler=None,\n+        preservedoc=True,\n+        docstringWarning=True,\n+        description=u"(No comment)",\n+        order=1000,\n+        ignoreOriginal=False,\n+        preserveOriginal=False,\n+        preconditions=u\'\'):\n     """ZCML directive handler"""\n-\n     if class_ is None and module is None:\n         raise ConfigurationError(u"You must specify \'class\' or \'module\'")\n     if class_ is not None and module is not None:\n-        raise ConfigurationError(u"You must specify one of \'class\' or \'module\', but not both.")\n+        raise ConfigurationError(\n+            u"You must specify one of \'class\' or \'module\', but not both.")\n \n     scope = class_ or module\n \n     to_be_replaced = getattr(scope, original, None)\n \n     if to_be_replaced is None and not ignoreOriginal:\n-        raise ConfigurationError("Original %s in %s not found" % (original, str(scope)))\n+        raise ConfigurationError(\n+            "Original %s in %s not found" % (original, str(scope)))\n \n     if preservedoc:\n         try:\n@@ -66,7 +106,8 @@ def replace(_context, original, replacement, class_=None, module=None, handler=N\n \n     if docstringWarning:\n         try:\n-            patch_warning = "\\n**Monkey patched by** \'%s.%s\'" % (getattr(replacement, \'__module__\', \'\'), replacement.__name__)\n+            patch_warning = "\\n**Monkey patched by** \'%s.%s\'" % (\n+                getattr(replacement, \'__module__\', \'\'), replacement.__name__)\n             if replacement.__doc__ is None:\n                 replacement.__doc__ = \'\'\n             replacement.__doc__ += patch_warning\n@@ -76,7 +117,8 @@ def replace(_context, original, replacement, class_=None, module=None, handler=N\n     # check version\n     if preconditions != u\'\':\n         if not _preconditions_matching(preconditions):\n-            log.info(\'Preconditions for patching scope %s not met (%s)!\' % (scope, preconditions))\n+            log.info(\'Preconditions for patching scope %s not met (%s)!\',\n+                     scope, preconditions)\n             return  # fail silently\n \n     if handler is None:\n@@ -89,15 +131,17 @@ def replace(_context, original, replacement, class_=None, module=None, handler=N\n         discriminator=None,\n         callable=_do_patch,\n         order=order,\n-        args=(handler, scope, original, replacement, repr(_context.info), description))\n+        args=(handler, scope, original, replacement, repr(_context.info),\n+              description))\n     return\n \n \n def _preconditions_matching(preconditions):\n-    """ Returns True if preconditions matching """\n-\n-    matcher_r = re.compile(r\'^(.*?)([-+!=]+)(.*)$\', re.DOTALL | re.IGNORECASE | re.MULTILINE)\n-    version_r = re.compile(r\'^([0-9]+)\\.([0-9]+)\\.?([0-9]?).*$\', re.IGNORECASE | re.MULTILINE)\n+    """Return `True` if preconditions are matching."""\n+    matcher_r = re.compile(\n+        r\'^(.*?)([-+!=]+)(.*)$\', re.DOTALL | re.IGNORECASE | re.MULTILINE)\n+    version_r = re.compile(\n+        r\'^([0-9]+)\\.([0-9]+)\\.?([0-9]?).*$\', re.IGNORECASE | re.MULTILINE)\n     ev = pkg_resources.Environment()\n \n     # split all preconds\n@@ -112,11 +156,18 @@ def _preconditions_matching(preconditions):\n \n         # fill versions - we assume having s/th like\n         # 1.2.3a2 or 1.2a1 or 1.2.0 - look at regexp\n-        p_v = list(map(int, [x for x in version_r.search(version).groups() if x and int(x) or 0]))\n-        p_i = list(map(int, [y for y in version_r.search(dp[0].version).groups() if y and int(y) or 0]))\n+        p_v = list(map(int, [\n+            x\n+            for x in version_r.search(version).groups()\n+            if x and int(x) or 0]))\n+        p_i = list(map(int, [\n+            y\n+            for y in version_r.search(dp[0].version).groups()\n+            if y and int(y) or 0]))\n \n         if not p_v or not p_i:\n-            log.error(\'Could not patch because version not recognized. Wanted: %s, Installed: %s\' % (p_v, p_i))\n+            log.error("Could not patch because version not recognized. Wanted:"\n+                      " %s, Installed: %s", p_v, p_i)\n             return False\n \n         # compare operators - dumb if check - could be better\n@@ -135,6 +186,7 @@ def _preconditions_matching(preconditions):\n @implementer(interfaces.IMonkeyPatchEvent)\n class MonkeyPatchEvent(object):\n     """Envent raised when a monkeypatch is applied\n+\n     see interfaces.IMonkeyPatchEvent\n     """\n \n@@ -145,14 +197,15 @@ def __init__(self, mp_info):\n \n def _do_patch(handler, scope, original, replacement, zcml_info, description):\n     """Apply the monkey patch through preferred method"""\n-\n     try:\n-        org_dotted_name = \'%s.%s.%s\' % (scope.__module__, scope.__name__, original)\n+        org_dotted_name = \'%s.%s.%s\' % (\n+            scope.__module__, scope.__name__, original)\n     except AttributeError:\n         org_dotted_name = \'%s.%s\' % (scope.__name__, original)\n \n     try:\n-        new_dotted_name = "%s.%s" % (getattr(replacement, \'__module__\', \'\'), replacement.__name__)\n+        new_dotted_name = "%s.%s" % (\n+            getattr(replacement, \'__module__\', \'\'), replacement.__name__)\n     except AttributeError:\n         # builtins don\'t have __module__ and __name__\n         new_dotted_name = str(replacement)\n@@ -161,7 +214,8 @@ def _do_patch(handler, scope, original, replacement, zcml_info, description):\n     if handler != _default_patch:\n         handler_info = " using custom handler %s" % handler\n \n-    log.debug("Monkey patching %s with %s" % (org_dotted_name, new_dotted_name,) + handler_info)\n+    log.debug("Monkey patching %s with %s%s",\n+              org_dotted_name, new_dotted_name, handler_info)\n \n     info = {\n         \'description\': description,\n@@ -176,14 +230,12 @@ def _do_patch(handler, scope, original, replacement, zcml_info, description):\n \n def _default_patch(scope, original, replacement):\n     """Default patch method"""\n-\n     setattr(scope, original, replacement)\n     return\n \n \n def _default_preserve_handler(scope, original, replacement):\n-    """ Default handler that preserves original method """\n-\n+    """Default handler that preserves original method"""\n     OLD_NAME = \'_old_%s\' % original\n \n     if not hasattr(scope, OLD_NAME):\ndiff --git a/collective/monkeypatcher/meta.zcml b/src/collective/monkeypatcher/meta.zcml\nsimilarity index 100%\nrename from collective/monkeypatcher/meta.zcml\nrename to src/collective/monkeypatcher/meta.zcml\ndiff --git a/collective/monkeypatcher/tests/__init__.py b/src/collective/monkeypatcher/tests/__init__.py\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/__init__.py\nrename to src/collective/monkeypatcher/tests/__init__.py\ndiff --git a/collective/monkeypatcher/tests/common.py b/src/collective/monkeypatcher/tests/common.py\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/common.py\nrename to src/collective/monkeypatcher/tests/common.py\ndiff --git a/collective/monkeypatcher/tests/dummypatch.py b/src/collective/monkeypatcher/tests/dummypatch.py\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/dummypatch.py\nrename to src/collective/monkeypatcher/tests/dummypatch.py\ndiff --git a/collective/monkeypatcher/tests/dummypatch.zcml b/src/collective/monkeypatcher/tests/dummypatch.zcml\nsimilarity index 100%\nrename from collective/monkeypatcher/tests/dummypatch.zcml\nrename to src/collective/monkeypatcher/tests/dummypatch.zcml\ndiff --git a/collective/monkeypatcher/tests/test_monkeypatcher.py b/src/collective/monkeypatcher/tests/test_monkeypatcher.py\nsimilarity index 74%\nrename from collective/monkeypatcher/tests/test_monkeypatcher.py\nrename to src/collective/monkeypatcher/tests/test_monkeypatcher.py\nindex 761dbc4..fec3dff 100644\n--- a/collective/monkeypatcher/tests/test_monkeypatcher.py\n+++ b/src/collective/monkeypatcher/tests/test_monkeypatcher.py\n@@ -14,23 +14,23 @@ def test_patchedClass(self):\n \n         # Testing applyed patch\n         ob = dummypatch.Dummy()\n-        self.failUnlessEqual(ob.someMethod(), "patched")\n+        self.assertEqual(ob.someMethod(), "patched")\n \n         # Testing docstring preservation\n         docstring = dummypatch.Dummy.someMethod.__doc__\n-        self.failUnlessEqual(docstring, "someMethod docstring")\n+        self.assertEqual(docstring, "someMethod docstring")\n         return\n \n     def test_patchedFunction(self):\n         """We have our someFunction patched"""\n \n         # Testing applyed patch\n-        self.failUnlessEqual(dummypatch.someFunction(1), 2)\n+        self.assertEqual(dummypatch.someFunction(1), 2)\n \n         # Testing docstring monkeypatch note\n         docstring = dummypatch.someFunction.__doc__\n-        self.failUnless(docstring.startswith("someFunction docstring"))\n-        self.failUnless(docstring.endswith(\n+        self.assertTrue(docstring.startswith("someFunction docstring"))\n+        self.assertTrue(docstring.endswith(\n             "\'collective.monkeypatcher.tests.dummypatch.patchedFunction\'"))\n         return\n \n@@ -38,14 +38,14 @@ def test_patchWithHandler(self):\n         """Patch applied with personal handler"""\n \n         ob = dummypatch.Foo()\n-        self.failUnlessEqual(ob.someFooMethod(), "patchedFooMethod result")\n+        self.assertEqual(ob.someFooMethod(), "patchedFooMethod result")\n         return\n \n     def test_patchWithBuiltin(self):\n         """see https://github.com/plone/collective.monkeypatcher/pull/2\n         """\n         ob = dummypatch.Foo()\n-        self.failUnlessEqual(ob.config, (1, 2))\n+        self.assertEqual(ob.config, (1, 2))\n         return\n \n     def test_monkeyPatchEvent(self):\n@@ -54,15 +54,15 @@ def test_monkeyPatchEvent(self):\n         events = dummypatch.all_patches\n         expected_keys = set(\n             (\'description\', \'original\', \'replacement\', \'zcml_info\'))\n-        self.failUnlessEqual(len(events), 4)\n+        self.assertEqual(len(events), 4)\n         for event in events:\n \n             # Interface conformance\n-            self.failUnless(IMonkeyPatchEvent.providedBy(event))\n+            self.assertTrue(IMonkeyPatchEvent.providedBy(event))\n \n             # Checking available infos\n             info_keys = set(event.patch_info.keys())\n-            self.failUnlessEqual(info_keys, expected_keys)\n+            self.assertEqual(info_keys, expected_keys)\n         return\n \n \ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..c059656\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,33 @@\n+[tox]\n+envlist =\n+    flake8,\n+    py27,\n+    py36,\n+    py37,\n+    coverage,\n+\n+skip_missing_interpreters = False\n+\n+[testenv]\n+usedevelop = true\n+commands =\n+    zope-testrunner --all --test-path=src {posargs:-vc}\n+extras = test\n+deps =\n+    zope.testrunner\n+\n+[testenv:coverage]\n+basepython = python3.6\n+deps =\n+    zope.testrunner\n+    coverage\n+commands =\n+    coverage run -m zope.testrunner --all --test-path=src {posargs:-vc}\n+    coverage html\n+    coverage report --fail-under=71\n+\n+[testenv:flake8]\n+basepython = python3.6\n+skip_install = true\n+deps = flake8\n+commands = flake8 --doctests src setup.py\n'

