Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T12:06:02+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/2bc097461cd8d04ffee6ccbd723753fe8d4afa22

Remove ``Pragma: no-cache`` header for icalendar exports.
The ``Pragma`` header is HTTP 1.0 and the caching strategy on icalendar exports should better be defined by integrators.

Files changed:
M CHANGES.rst
M plone/app/event/ical/exporter.py
M plone/app/event/tests/test_icalendar.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 8d8b2de2..ad4b7b75 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,9 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Remove ``Pragma: no-cache`` header for icalendar exports.\n+  The ``Pragma`` header is HTTP 1.0 and the caching strategy on icalendar exports should better be defined by integrators.\n+  [thet]\n \n Bug fixes:\n \ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex defdfa8e..9b7a1eba 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -423,6 +423,5 @@ def __call__(self):\n             \'Content-Disposition\',\n             \'attachment; filename="{0}"\'.format(name)\n         )\n-        self.request.response.setHeader(\'Pragma\', \'no-cache\')\n         self.request.response.setHeader(\'Content-Length\', len(ical))\n         self.request.response.write(ical)\ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex e24b3ae4..7a1f01b3 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -42,7 +42,7 @@ def test_event_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.now_event, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -93,7 +93,7 @@ def test_event_occurrence_ical(self):\n         )\n         view = getMultiAdapter((occ, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -104,7 +104,7 @@ def test_portal_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.portal, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -234,7 +234,7 @@ def test_collection_ical(self):\n             name=\'ics_view\'\n         )\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -256,7 +256,7 @@ def test_collection_all_ical(self):\n             name=\'ics_view\'\n         )\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-09-14T15:31:53+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/037e7a23335fa141930f929964ffaa5592f8adac

Merge pull request #293 from plone/thet-nopragma

Remove ``Pragma: no-cache`` header for icalendar exports.

Files changed:
M CHANGES.rst
M plone/app/event/ical/exporter.py
M plone/app/event/tests/test_icalendar.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 8d8b2de2..ad4b7b75 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,9 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Remove ``Pragma: no-cache`` header for icalendar exports.\n+  The ``Pragma`` header is HTTP 1.0 and the caching strategy on icalendar exports should better be defined by integrators.\n+  [thet]\n \n Bug fixes:\n \ndiff --git a/plone/app/event/ical/exporter.py b/plone/app/event/ical/exporter.py\nindex defdfa8e..9b7a1eba 100644\n--- a/plone/app/event/ical/exporter.py\n+++ b/plone/app/event/ical/exporter.py\n@@ -423,6 +423,5 @@ def __call__(self):\n             \'Content-Disposition\',\n             \'attachment; filename="{0}"\'.format(name)\n         )\n-        self.request.response.setHeader(\'Pragma\', \'no-cache\')\n         self.request.response.setHeader(\'Content-Length\', len(ical))\n         self.request.response.write(ical)\ndiff --git a/plone/app/event/tests/test_icalendar.py b/plone/app/event/tests/test_icalendar.py\nindex e24b3ae4..7a1f01b3 100644\n--- a/plone/app/event/tests/test_icalendar.py\n+++ b/plone/app/event/tests/test_icalendar.py\n@@ -42,7 +42,7 @@ def test_event_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.now_event, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -93,7 +93,7 @@ def test_event_occurrence_ical(self):\n         )\n         view = getMultiAdapter((occ, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -104,7 +104,7 @@ def test_portal_ical(self):\n         headers, output, request = make_fake_response(self.request)\n         view = getMultiAdapter((self.portal, request), name=\'ics_view\')\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -234,7 +234,7 @@ def test_collection_ical(self):\n             name=\'ics_view\'\n         )\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n@@ -256,7 +256,7 @@ def test_collection_all_ical(self):\n             name=\'ics_view\'\n         )\n         view()\n-        self.assertEqual(len(headers), 4)\n+        self.assertEqual(len(headers), 3)\n         self.assertEqual(headers[\'Content-Type\'], \'text/calendar\')\n         self.assertTrue(\'Content-Length\' in headers)\n         icalstr = \'\'.join(output)\n'

