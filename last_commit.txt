Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-01-10T15:50:38+01:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/bcf155452e0e8d184b77e130606a94f70de527ab

implement ?fullobjects support for AT collections (#849)

Files changed:
A news/698.feature
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/tests/test_atcollection.py

b'diff --git a/news/698.feature b/news/698.feature\nnew file mode 100644\nindex 00000000..eda01275\n--- /dev/null\n+++ b/news/698.feature\n@@ -0,0 +1,2 @@\n+Make ?fullobjects work in AT Collections to get the full JSON representation of the items\n+[erral]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex e7fa0fcf..8ed8eb1e 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -17,8 +17,8 @@ def __call__(self, version=None, include_items=True):\n         collection_metadata = super(SerializeCollectionToJson, self).__call__(\n             version=version\n         )\n-        results = self.context.results(batch=False)\n-        batch = HypermediaBatch(self.request, results)\n+        brains = self.context.results(batch=False)\n+        batch = HypermediaBatch(self.request, brains)\n \n         results = collection_metadata\n         if not self.request.form.get("fullobjects"):\n@@ -27,8 +27,14 @@ def __call__(self, version=None, include_items=True):\n         if batch.links:\n             results["batching"] = batch.links\n \n-        results["items"] = [\n-            getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n-            for brain in batch\n-        ]\n+        if "fullobjects" in list(self.request.form):\n+            results["items"] = [\n+                getMultiAdapter((brain.getObject(), self.request), ISerializeToJson)()\n+                for brain in batch\n+            ]\n+        else:\n+            results["items"] = [\n+                getMultiAdapter((brain, self.request), ISerializeToJsonSummary)()\n+                for brain in batch\n+            ]\n         return results\ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 7285535b..79dd1d3d 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -46,7 +46,10 @@ def setUp(self):\n         self.doc1.setQuery(query_data)\n         self.doc1.setSort_on("created")\n \n-    def serialize(self, obj):\n+    def serialize(self, obj, fullobjects=False):\n+        if fullobjects:\n+            self.request.form["fullobjects"] = 1\n+\n         serializer = getMultiAdapter((obj, self.request), ISerializeToJson)\n         return serializer()\n \n@@ -91,3 +94,25 @@ def test_serializer_includes_collection_items(self):\n             },\n             items[2],\n         )\n+\n+    def test_serializer_includes_collection_fullobjects(self):\n+        """ when using the fullobjects parameter, the collection needs to\n+            serialize its contents with the standard object serializer"""\n+        folder = self.portal[\n+            self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n+        ]\n+        folder.invokeFactory("ATTestFolder", id="subfolder-1", title="Subfolder 1")\n+        folder.invokeFactory("ATTestFolder", id="subfolder-2", title="Subfolder 2")\n+        folder.invokeFactory("ATTestDocument", id="doc", title="A Document")\n+        obj = self.serialize(self.doc1, fullobjects=True)\n+        self.assertIn("items", obj)\n+        items = obj["items"]\n+        items = sorted(items, key=lambda item: item[u"@id"])\n+        self.assertIn("UID", items[0])\n+        self.assertEquals(items[0]["id"], "folder")\n+\n+        self.assertIn("UID", items[1])\n+        self.assertEquals(items[1]["id"], "subfolder-1")\n+\n+        self.assertIn("UID", items[2])\n+        self.assertEquals(items[2]["id"], "subfolder-2")\n'

