Repository: plone.folder


Branch: refs/heads/master
Date: 2018-09-18T15:52:53+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.folder/commit/4eb1dd4363224d44d0e52d57827d87aa1a65bb93

fix ordering of content in folder in py3
fix all test in py3

Files changed:
M src/plone/folder/default.py
M src/plone/folder/partial.py
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py

b'diff --git a/src/plone/folder/default.py b/src/plone/folder/default.py\nindex c7ad8d7..266498d 100644\n--- a/src/plone/folder/default.py\n+++ b/src/plone/folder/default.py\n@@ -136,8 +136,9 @@ def keyfn(obj_id):\n                 if callable(attr):\n                     return attr()\n                 return attr\n-            order.sort(None, keyfn, bool(reverse))\n-\n+            # order.sort(cmd=None, key=keyfn, reverse=bool(reverse))\n+            order = sorted(order, key=keyfn, reverse=bool(reverse))\n+            self._set_order(order)\n         for n, obj_id in enumerate(order):\n             pos[obj_id] = n\n         return -1\n@@ -165,6 +166,13 @@ def _order(self, create=False):\n             return annotations.setdefault(self.ORDER_KEY, PersistentList())\n         return annotations.get(self.ORDER_KEY, [])\n \n+    def _set_order(self, value):\n+        # We added a setter because in py2 _order is modified inplace\n+        # with .sort() while in py3 we sort with sorted and thus need to set it\n+        # explicitly\n+        annotations = IAnnotations(self.context)\n+        annotations[self.ORDER_KEY] = value\n+\n     def _pos(self, create=False):\n         annotations = IAnnotations(self.context)\n         if create:\ndiff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex 30beb2b..f1fe920 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -27,9 +27,17 @@ def __init__(self, context):\n     def order(self):\n         context = aq_base(self.context)\n         if not hasattr(context, ORDER_ATTR):\n-            setattr(context, ORDER_ATTR, [])\n+            self.order = []\n         return getattr(context, ORDER_ATTR)\n \n+    @order.setter\n+    def order(self, value):\n+        # We added a setter because in py2 order is modified inplace\n+        # with .sort() while in py3 we sort with sorted and thus need to set it\n+        # explicitly\n+        context = aq_base(self.context)\n+        setattr(context, ORDER_ATTR, value)\n+\n     def notifyAdded(self, id):\n         """ see interfaces.py """\n         assert not id in self.order\n@@ -139,8 +147,7 @@ def keyfn(id):\n                 if callable(attr):\n                     return attr()\n                 return attr\n-\n-            self.order.sort(None, keyfn, bool(reverse))\n+            self.order = sorted(self.order, key=keyfn, reverse=bool(reverse))\n         self.context._p_changed = True      # the order was changed\n         return -1\n \ndiff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py\nindex 2035202..5917e88 100644\n--- a/src/plone/folder/tests/test_dict_interface.py\n+++ b/src/plone/folder/tests/test_dict_interface.py\n@@ -60,7 +60,7 @@ def test_to_verify_ticket_9120(self):\n         del folder[\'ob2\']\n         del folder[\'ob3\']\n         self.assertEquals(folder.keys(), [\'ob1\', \'ob4\'])\n-        self.assertEquals(map(aq_base, folder.values()), [ob1, ob4])\n+        self.assertEquals(list(map(aq_base, folder.values())), [ob1, ob4])\n         self.assertEquals([key in folder for key in folder], [True, True])\n \n \ndiff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py\nindex c4be5bb..959c627 100644\n--- a/src/plone/folder/tests/test_integration.py\n+++ b/src/plone/folder/tests/test_integration.py\n@@ -3,7 +3,7 @@\n from plone.folder.interfaces import IOrderable\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_FUNCTIONAL_TESTING\n-from six import StringIO\n+from six import BytesIO\n from transaction import savepoint\n from zope.interface import implementer\n \n@@ -28,7 +28,7 @@ def testExportDoesntIncludeParent(self):\n         foo[\'bar\'] = DummyFolder(\'bar\')\n         savepoint(optimistic=True)      # savepoint assigns oids\n         # now let\'s export to a buffer and check the objects...\n-        exp = StringIO()\n+        exp = BytesIO()\n         self.app._p_jar.exportFile(foo.bar._p_oid, exp)\n-        self.assertTrue(\'bar\' in exp.getvalue())\n-        self.assertFalse(\'foo\' in exp.getvalue())\n+        self.assertTrue(b\'bar\' in exp.getvalue())\n+        self.assertFalse(b\'foo\' in exp.getvalue())\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2018-09-18T15:52:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.folder/commit/16e6913531ef29bd93c5f816a9768031bf8ffcd7

fix deprecated lazymap import

Files changed:
M CHANGES.rst
M src/plone/folder/ordered.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 017b3d7..e76805f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -31,6 +31,9 @@ Bug fixes:\n - More Python 2 / 3 compatibility\n   [pbauer, ale-rt]\n \n+- Fix deprecated LazyMap import\n+  [jensens]\n+\n \n 1.0.11 (2018-04-08)\n -------------------\ndiff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py\nindex 00d1046..32f3c42 100644\n--- a/src/plone/folder/ordered.py\n+++ b/src/plone/folder/ordered.py\n@@ -10,14 +10,15 @@\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base\n from Products.CMFCore.permissions import ModifyPortalContent\n from Products.CMFCore.PortalFolder import PortalFolderBase\n-from Products.ZCatalog.Lazy import LazyMap\n from zope.annotation.interfaces import IAttributeAnnotatable\n from zope.component import getAdapter\n from zope.component import queryAdapter\n from zope.interface import implementer\n+from ZTUtils.Lazy import LazyMap\n \n import pkg_resources\n \n+\n HAS_ZSERVER = True\n try:\n     dist = pkg_resources.get_distribution('ZServer')\n"

Repository: plone.folder


Branch: refs/heads/master
Date: 2018-09-18T15:52:53+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.folder/commit/4a970c1bca724a5701eb9b2111bdf183a5928c15

Stabilize order of unordered items in partial ordering

Files changed:
M src/plone/folder/partial.py
M src/plone/folder/tests/test_partialordering.py

b'diff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex f1fe920..6891dd2 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -58,10 +58,12 @@ def notifyRemoved(self, id):\n     def idsInOrder(self, onlyOrderables=False):\n         """ see interfaces.py """\n         ordered = list(self.order)\n+        ordered_set = set(ordered)\n         if not onlyOrderables:\n             ids = aq_base(self.context).objectIds(ordered=False)\n-            unordered = set(ids).difference(set(ordered))\n-            ordered += list(unordered)\n+            for id in ids:\n+                if id not in ordered_set:\n+                    ordered.append(id)\n         return ordered\n \n     def moveObjectsByDelta(self, ids, delta, subset_ids=None,\ndiff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py\nindex bedb9f3..8468c63 100644\n--- a/src/plone/folder/tests/test_partialordering.py\n+++ b/src/plone/folder/tests/test_partialordering.py\n@@ -26,7 +26,7 @@ def create(self):\n         container[\'c2\'] = Chaoticle(\'c2\', \'mt2\')\n         container[\'c3\'] = Chaoticle(\'c3\', \'mt1\')\n         container[\'o4\'] = Orderable(\'o4\', \'mt2\')\n-        self.unordered = [\'c3\', \'c2\', \'c1\']\n+        self.unordered = [\'c1\', \'c2\', \'c3\']\n         ordering = container.getOrdering()\n         return container, ordering\n \n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2018-09-18T15:52:53+02:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.folder/commit/ba479fd381af26b207f9a111086fe1708ae95a80

Fix nonzero-method

Files changed:
M src/plone/folder/ordered.py

b'diff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py\nindex 32f3c42..1fb24e0 100644\n--- a/src/plone/folder/ordered.py\n+++ b/src/plone/folder/ordered.py\n@@ -39,7 +39,7 @@ class OrderedBTreeFolderBase(BTreeFolder2Base):\n \n     security = ClassSecurityInfo()\n \n-    def __nonzero__(self):\n+    def __bool__(self):\n         """ a folder is something, even if it\'s empty """\n         return True\n \n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2018-09-18T15:55:50+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.folder/commit/7a89ca034a766f8f148a522be4ad21369662b6b4

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e76805f..aaa1ae9 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,7 +15,14 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Stabilize order of unordered items in partial ordering.\n+  [davisagli]\n+\n+- Fix ordering of content in folder in python 3.\n+  [pbauer]\n+\n+- Fix tests in py3.\n+  [pbauer]\n \n \n 2.0.0 (2018-06-20)\ndiff --git a/setup.py b/setup.py\nindex c511d4a..7012306 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,6 +13,7 @@\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.0",\n         "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "Framework :: Zope2",\n         "Intended Audience :: Developers",\n         "Intended Audience :: System Administrators",\n@@ -21,6 +22,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'folder btree order\',\n     author=\'Plone Foundation\',\n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2018-09-18T17:37:31+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.folder/commit/014cf1cf13d476c02471ac1b89061408bd9ad973

fix import for Zope2

Files changed:
M src/plone/folder/ordered.py

b'diff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py\nindex 1fb24e0..8b6e0d4 100644\n--- a/src/plone/folder/ordered.py\n+++ b/src/plone/folder/ordered.py\n@@ -14,7 +14,11 @@\n from zope.component import getAdapter\n from zope.component import queryAdapter\n from zope.interface import implementer\n-from ZTUtils.Lazy import LazyMap\n+try:\n+    from ZTUtils.Lazy import LazyMap\n+except ImportError:\n+    # bbb import for Zope2\n+    from Products.ZCatalog.Lazy import LazyMap\n \n import pkg_resources\n \n'

Repository: plone.folder


Branch: refs/heads/master
Date: 2018-09-18T19:55:42+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.folder/commit/bad4ad2409424e2662f8567561187005328f2b4a

Merge pull request #9 from plone/python3

fix ordering of content in folder in py3

Files changed:
M CHANGES.rst
M setup.py
M src/plone/folder/default.py
M src/plone/folder/ordered.py
M src/plone/folder/partial.py
M src/plone/folder/tests/test_dict_interface.py
M src/plone/folder/tests/test_integration.py
M src/plone/folder/tests/test_partialordering.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 017b3d7..aaa1ae9 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,7 +15,14 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Stabilize order of unordered items in partial ordering.\n+  [davisagli]\n+\n+- Fix ordering of content in folder in python 3.\n+  [pbauer]\n+\n+- Fix tests in py3.\n+  [pbauer]\n \n \n 2.0.0 (2018-06-20)\n@@ -31,6 +38,9 @@ Bug fixes:\n - More Python 2 / 3 compatibility\n   [pbauer, ale-rt]\n \n+- Fix deprecated LazyMap import\n+  [jensens]\n+\n \n 1.0.11 (2018-04-08)\n -------------------\ndiff --git a/setup.py b/setup.py\nindex c511d4a..7012306 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,6 +13,7 @@\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.0",\n         "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "Framework :: Zope2",\n         "Intended Audience :: Developers",\n         "Intended Audience :: System Administrators",\n@@ -21,6 +22,8 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'folder btree order\',\n     author=\'Plone Foundation\',\ndiff --git a/src/plone/folder/default.py b/src/plone/folder/default.py\nindex c7ad8d7..266498d 100644\n--- a/src/plone/folder/default.py\n+++ b/src/plone/folder/default.py\n@@ -136,8 +136,9 @@ def keyfn(obj_id):\n                 if callable(attr):\n                     return attr()\n                 return attr\n-            order.sort(None, keyfn, bool(reverse))\n-\n+            # order.sort(cmd=None, key=keyfn, reverse=bool(reverse))\n+            order = sorted(order, key=keyfn, reverse=bool(reverse))\n+            self._set_order(order)\n         for n, obj_id in enumerate(order):\n             pos[obj_id] = n\n         return -1\n@@ -165,6 +166,13 @@ def _order(self, create=False):\n             return annotations.setdefault(self.ORDER_KEY, PersistentList())\n         return annotations.get(self.ORDER_KEY, [])\n \n+    def _set_order(self, value):\n+        # We added a setter because in py2 _order is modified inplace\n+        # with .sort() while in py3 we sort with sorted and thus need to set it\n+        # explicitly\n+        annotations = IAnnotations(self.context)\n+        annotations[self.ORDER_KEY] = value\n+\n     def _pos(self, create=False):\n         annotations = IAnnotations(self.context)\n         if create:\ndiff --git a/src/plone/folder/ordered.py b/src/plone/folder/ordered.py\nindex 00d1046..8b6e0d4 100644\n--- a/src/plone/folder/ordered.py\n+++ b/src/plone/folder/ordered.py\n@@ -10,14 +10,19 @@\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base\n from Products.CMFCore.permissions import ModifyPortalContent\n from Products.CMFCore.PortalFolder import PortalFolderBase\n-from Products.ZCatalog.Lazy import LazyMap\n from zope.annotation.interfaces import IAttributeAnnotatable\n from zope.component import getAdapter\n from zope.component import queryAdapter\n from zope.interface import implementer\n+try:\n+    from ZTUtils.Lazy import LazyMap\n+except ImportError:\n+    # bbb import for Zope2\n+    from Products.ZCatalog.Lazy import LazyMap\n \n import pkg_resources\n \n+\n HAS_ZSERVER = True\n try:\n     dist = pkg_resources.get_distribution(\'ZServer\')\n@@ -38,7 +43,7 @@ class OrderedBTreeFolderBase(BTreeFolder2Base):\n \n     security = ClassSecurityInfo()\n \n-    def __nonzero__(self):\n+    def __bool__(self):\n         """ a folder is something, even if it\'s empty """\n         return True\n \ndiff --git a/src/plone/folder/partial.py b/src/plone/folder/partial.py\nindex 30beb2b..6891dd2 100644\n--- a/src/plone/folder/partial.py\n+++ b/src/plone/folder/partial.py\n@@ -27,9 +27,17 @@ def __init__(self, context):\n     def order(self):\n         context = aq_base(self.context)\n         if not hasattr(context, ORDER_ATTR):\n-            setattr(context, ORDER_ATTR, [])\n+            self.order = []\n         return getattr(context, ORDER_ATTR)\n \n+    @order.setter\n+    def order(self, value):\n+        # We added a setter because in py2 order is modified inplace\n+        # with .sort() while in py3 we sort with sorted and thus need to set it\n+        # explicitly\n+        context = aq_base(self.context)\n+        setattr(context, ORDER_ATTR, value)\n+\n     def notifyAdded(self, id):\n         """ see interfaces.py """\n         assert not id in self.order\n@@ -50,10 +58,12 @@ def notifyRemoved(self, id):\n     def idsInOrder(self, onlyOrderables=False):\n         """ see interfaces.py """\n         ordered = list(self.order)\n+        ordered_set = set(ordered)\n         if not onlyOrderables:\n             ids = aq_base(self.context).objectIds(ordered=False)\n-            unordered = set(ids).difference(set(ordered))\n-            ordered += list(unordered)\n+            for id in ids:\n+                if id not in ordered_set:\n+                    ordered.append(id)\n         return ordered\n \n     def moveObjectsByDelta(self, ids, delta, subset_ids=None,\n@@ -139,8 +149,7 @@ def keyfn(id):\n                 if callable(attr):\n                     return attr()\n                 return attr\n-\n-            self.order.sort(None, keyfn, bool(reverse))\n+            self.order = sorted(self.order, key=keyfn, reverse=bool(reverse))\n         self.context._p_changed = True      # the order was changed\n         return -1\n \ndiff --git a/src/plone/folder/tests/test_dict_interface.py b/src/plone/folder/tests/test_dict_interface.py\nindex 2035202..5917e88 100644\n--- a/src/plone/folder/tests/test_dict_interface.py\n+++ b/src/plone/folder/tests/test_dict_interface.py\n@@ -60,7 +60,7 @@ def test_to_verify_ticket_9120(self):\n         del folder[\'ob2\']\n         del folder[\'ob3\']\n         self.assertEquals(folder.keys(), [\'ob1\', \'ob4\'])\n-        self.assertEquals(map(aq_base, folder.values()), [ob1, ob4])\n+        self.assertEquals(list(map(aq_base, folder.values())), [ob1, ob4])\n         self.assertEquals([key in folder for key in folder], [True, True])\n \n \ndiff --git a/src/plone/folder/tests/test_integration.py b/src/plone/folder/tests/test_integration.py\nindex c4be5bb..959c627 100644\n--- a/src/plone/folder/tests/test_integration.py\n+++ b/src/plone/folder/tests/test_integration.py\n@@ -3,7 +3,7 @@\n from plone.folder.interfaces import IOrderable\n from plone.folder.ordered import OrderedBTreeFolderBase\n from plone.folder.testing import PLONEFOLDER_FUNCTIONAL_TESTING\n-from six import StringIO\n+from six import BytesIO\n from transaction import savepoint\n from zope.interface import implementer\n \n@@ -28,7 +28,7 @@ def testExportDoesntIncludeParent(self):\n         foo[\'bar\'] = DummyFolder(\'bar\')\n         savepoint(optimistic=True)      # savepoint assigns oids\n         # now let\'s export to a buffer and check the objects...\n-        exp = StringIO()\n+        exp = BytesIO()\n         self.app._p_jar.exportFile(foo.bar._p_oid, exp)\n-        self.assertTrue(\'bar\' in exp.getvalue())\n-        self.assertFalse(\'foo\' in exp.getvalue())\n+        self.assertTrue(b\'bar\' in exp.getvalue())\n+        self.assertFalse(b\'foo\' in exp.getvalue())\ndiff --git a/src/plone/folder/tests/test_partialordering.py b/src/plone/folder/tests/test_partialordering.py\nindex bedb9f3..8468c63 100644\n--- a/src/plone/folder/tests/test_partialordering.py\n+++ b/src/plone/folder/tests/test_partialordering.py\n@@ -26,7 +26,7 @@ def create(self):\n         container[\'c2\'] = Chaoticle(\'c2\', \'mt2\')\n         container[\'c3\'] = Chaoticle(\'c3\', \'mt1\')\n         container[\'o4\'] = Orderable(\'o4\', \'mt2\')\n-        self.unordered = [\'c3\', \'c2\', \'c1\']\n+        self.unordered = [\'c1\', \'c2\', \'c3\']\n         ordering = container.getOrdering()\n         return container, ordering\n \n'

