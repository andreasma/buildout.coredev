Repository: plone.behavior


Branch: refs/heads/master
Date: 2019-02-08T14:30:24+01:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.behavior/commit/c4bac669dd5c9e571094db7b57f950f3b025f5fa

Implementation of proposal #18

Files changed:
M CHANGES.rst
M README.rst
M plone/behavior/metaconfigure.py
M plone/behavior/registration.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 58a66c1..76fce2a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,11 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- New option ``former_dotted_names`` that allows to register the former name under\n+  which a behavior used to be registerd. This can be useful to ensure a smooth\n+  transition in case a behavior\'s dotted name is changed.\n+  Refs: #18\n+  [pysailor]\n \n Bug fixes:\n \ndiff --git a/README.rst b/README.rst\nindex 3866f65..0b8d18c 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -178,6 +178,11 @@ The directive supports the attributes:\n \n     Must be one element (no multiadapters, applies also for auto-detection).\n \n+``former_dotted_names``\n+    In case a behavior is modified so that its dotted name changes, this field can be used to register the old name(s). Therefore, it is possible to retrieve the name(s) under which a behavior was formerly registered under.\n+\n+    If a call to ``lookup_behavior_registration`` does not find a behavior under the given name, it will look at the former dotted names to try and find the behavior.\n+\n \n ZCML Examples\n -------------\ndiff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py\nindex c196d8b..ec1bc95 100644\n--- a/plone/behavior/metaconfigure.py\n+++ b/plone/behavior/metaconfigure.py\n@@ -68,6 +68,14 @@ class IBehaviorDirective(Interface):\n                     u\'provides under a different name.\',\n         required=False)\n \n+    former_dotted_names = TextLine(\n+        title=u\'Space-separated list of dotted names that this behavior was \'\n+              u\'formerly registered under\',\n+        description=u\'Use this field in case you change the dotted name, \'\n+                    u\'so that the current behavior can be looked up under \'\n+                    u\'its former name.\',\n+        required=False)\n+\n \n def _detect_for(factory, marker):\n     """if no explicit for is given we need to figure it out.\n@@ -92,7 +100,8 @@ def _detect_for(factory, marker):\n \n \n def behaviorDirective(_context, title, provides, name=None, description=None,\n-                      marker=None, factory=None, for_=None, name_only=False):\n+                      marker=None, factory=None, for_=None, name_only=False,\n+                      former_dotted_names=\'\'):\n \n     if marker is None and factory is None:\n         # a schema only behavior means usually direct attribute settings on the\n@@ -124,6 +133,7 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n         marker=marker,\n         factory=factory,\n         name=name,\n+        former_dotted_names=former_dotted_names,\n     )\n     # the behavior registration can be looked up as a named utility.\n     # the name of the utility is either the full dotted path of the interface\ndiff --git a/plone/behavior/registration.py b/plone/behavior/registration.py\nindex 557d0bf..c7d1086 100644\n--- a/plone/behavior/registration.py\n+++ b/plone/behavior/registration.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n+from plone.behavior import logger\n from plone.behavior.interfaces import IBehavior\n from zope.component import ComponentLookupError\n+from zope.component import getUtilitiesFor\n from zope.component import getUtility\n from zope.interface import implementer\n \n@@ -20,7 +22,7 @@\n   marker: {marker}\n   factory: {factory}\n   title: {title}\n-  {description}\n+  {description}{extra_info}\n >"""\n \n \n@@ -28,13 +30,14 @@\n class BehaviorRegistration(object):\n \n     def __init__(self, title, description, interface,\n-                 marker, factory, name=None):\n+                 marker, factory, name=None, former_dotted_names=\'\'):\n         self.title = title\n         self.description = description\n         self.interface = interface\n         self.marker = marker\n         self.factory = factory\n         self.name = name\n+        self.former_dotted_names = former_dotted_names\n \n     def __repr__(self):\n         if self.marker is not None:\n@@ -54,7 +57,11 @@ def __repr__(self):\n             \'description\': textwrap.fill(\n                 self.description or \'(no description)\',\n                 subsequent_indent=\'  \'\n-            )\n+            ),\n+            \'extra_info\': (\n+                self.former_dotted_names and\n+                \'\\n  former dotted names: {}\'.format(self.former_dotted_names)\n+            ),\n         }\n         return REGISTRATION_REPR.format(**info)\n \n@@ -64,8 +71,11 @@ class BehaviorRegistrationNotFound(Exception):\n     """\n \n \n-def lookup_behavior_registration(name=None, identifier=None):\n-    """Lookup behavior registration either by name or interface identifier.\n+def lookup_behavior_registration(\n+        name=None, identifier=None, warn_about_fallback=True):\n+    """Look up behavior registration either by name or interface identifier.\n+       Fall back to checking the former_dotted_names if the lookup is not\n+       successful.\n \n     ``ValueError`` is thrown if function call is incomplete.\n     ``BehaviorRegistrationNotFound`` is thrown if lookup fails.\n@@ -80,4 +90,15 @@ def lookup_behavior_registration(name=None, identifier=None):\n     try:\n         return getUtility(IBehavior, name=name)\n     except ComponentLookupError:\n+        for id_, behavior in getUtilitiesFor(IBehavior):\n+            # Before we raise an error, iterate over all behaviors and check\n+            # if the requested name is registered as a former dotted name.\n+            if name in behavior.former_dotted_names:\n+                if warn_about_fallback:\n+                    logger.warn(\n+                        \'The dotted name "{}" is deprecated. It has been \'\n+                        \'changed to "{}"\'.format(\n+                            name, behavior.interface.__identifier__)\n+                    )\n+                return behavior\n         raise BehaviorRegistrationNotFound(name)\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2019-02-08T14:31:12+01:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.behavior/commit/e24fd310c3358457d2eb1c5ef11c60ca1fc3cd6e

make code analysis happy

Files changed:
M plone/behavior/interfaces.py
M plone/behavior/metaconfigure.py
M plone/behavior/registration.py

b'diff --git a/plone/behavior/interfaces.py b/plone/behavior/interfaces.py\nindex d653320..e23c516 100644\n--- a/plone/behavior/interfaces.py\n+++ b/plone/behavior/interfaces.py\n@@ -30,12 +30,12 @@ class IBehavior(Interface):\n \n     title = schema.TextLine(\n         title=u\'Short title of the behavior\',\n-        required=True\n+        required=True,\n     )\n \n     description = schema.Text(\n         title=u\'Longer description of the behavior\',\n-        required=False\n+        required=False,\n     )\n \n     name = schema.TextLine(\n@@ -43,13 +43,13 @@ class IBehavior(Interface):\n         description=u\'E.g. plone.somebehavior. If not given the full dotted \'\n                     u\'name of the interfaces is used for lookup instead.\'\n                     u\'Recommended, but due to BBB not required.\',\n-        required=False\n+        required=False,\n     )\n \n     interface = schema.Object(\n         title=u\'Interface describing this behavior\',\n         required=True,\n-        schema=IInterface\n+        schema=IInterface,\n     )\n \n     marker = schema.Object(\n@@ -59,13 +59,13 @@ class IBehavior(Interface):\n                     u\'is an adapter adapting the the marker and providing the \'\n                     u\'"interface" of this behavior.\',\n         required=False,\n-        schema=IInterface\n+        schema=IInterface,\n     )\n \n     factory = schema.Object(\n         title=u\'An adapter factory for the behavior\',\n         required=True,\n-        schema=Interface\n+        schema=Interface,\n     )\n \n \n@@ -86,7 +86,7 @@ class IBehaviorAdapterFactory(Interface):\n \n     behavior = schema.Object(\n         title=u\'The behavior this is a factory for\',\n-        schema=IBehavior\n+        schema=IBehavior,\n     )\n \n     def __call__(context):\ndiff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py\nindex ec1bc95..e28a3cf 100644\n--- a/plone/behavior/metaconfigure.py\n+++ b/plone/behavior/metaconfigure.py\n@@ -25,48 +25,56 @@ class IBehaviorDirective(Interface):\n     name = TextLine(\n         title=u\'Name\',\n         description=u\'Convenience lookup name for this behavior\',\n-        required=False)\n+        required=False,\n+    )\n \n     title = configuration_fields.MessageID(\n         title=u\'Title\',\n         description=u\'A user friendly title for this behavior\',\n-        required=True)\n+        required=True,\n+    )\n \n     description = configuration_fields.MessageID(\n         title=u\'Description\',\n         description=u\'A longer description for this behavior\',\n-        required=False)\n+        required=False,\n+    )\n \n     provides = configuration_fields.GlobalInterface(\n         title=u\'An interface to which the behavior can be adapted\',\n         description=u\'This is what the conditional adapter factory will \'\n                     u\'be registered as providing\',\n-        required=True)\n+        required=True,\n+    )\n \n     marker = configuration_fields.GlobalInterface(\n         title=u\'A marker interface to be applied by the behavior\',\n         description=u\'If factory is not given, then this is optional\',\n-        required=False)\n+        required=False,\n+    )\n \n     factory = configuration_fields.GlobalObject(\n         title=u\'The factory for this behavior\',\n         description=u\'If this is not given, the behavior is assumed to \'\n                     u\'provide a marker interface\',\n-        required=False)\n+        required=False,\n+    )\n \n     for_ = configuration_fields.GlobalObject(\n         title=u\'The type of object to register the conditional adapter \'\n               u\'factory for\',\n         description=u\'This is optional - the default is to register the \'\n                     u\'factory for zope.interface.Interface\',\n-        required=False)\n+        required=False,\n+    )\n \n     name_only = configuration_fields.Bool(\n         title=u\'Do not register the behavior under the dotted path, but \'\n               u\'only under the given name\',\n         description=u\'Use this option to register a behavior for the same \'\n                     u\'provides under a different name.\',\n-        required=False)\n+        required=False,\n+    )\n \n     former_dotted_names = TextLine(\n         title=u\'Space-separated list of dotted names that this behavior was \'\n@@ -74,7 +82,8 @@ class IBehaviorDirective(Interface):\n         description=u\'Use this field in case you change the dotted name, \'\n                     u\'so that the current behavior can be looked up under \'\n                     u\'its former name.\',\n-        required=False)\n+        required=False,\n+    )\n \n \n def _detect_for(factory, marker):\n@@ -88,8 +97,7 @@ def _detect_for(factory, marker):\n         return adapts[0]\n     if len(adapts) > 1:\n         raise ConfigurationError(\n-            u\'The factory can not be declared as multi-adapter.\'\n-        )\n+            u\'The factory can not be declared as multi-adapter.\')\n     # down here it means len(adapts) < 1\n     if marker is not None:\n         # given we have a marker it is safe to register for the\n@@ -112,13 +120,11 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n     if marker is not None and factory is None and marker is not provides:\n         raise ConfigurationError(\n             u\'You cannot specify a different \\\'marker\\\' and \\\'provides\\\' if \'\n-            u\'there is no adapter factory for the provided interface.\'\n-        )\n+            u\'there is no adapter factory for the provided interface.\')\n     if name_only and name is None:\n         raise ConfigurationError(\n             u\'If you decide to only register by \\\'name\\\', a name must \'\n-            u\'be given.\'\n-        )\n+            u\'be given.\')\n \n     # Instantiate the real factory if it\'s the schema-aware type. We do\n     # this here so that the for_ interface may take this into account.\n@@ -144,7 +150,7 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n             _context,\n             provides=IBehavior,\n             name=provides.__identifier__,\n-            component=registration\n+            component=registration,\n         )\n \n     if name is not None:\n@@ -156,15 +162,14 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n             _context,\n             provides=IBehavior,\n             name=name,\n-            component=registration\n+            component=registration,\n         )\n \n     if factory is None:\n         if for_ is not None:\n             logger.warn(\n                 u\'Specifying \\\'for\\\' in behavior \\\'{0}\\\' if no \\\'factory\\\' is \'\n-                u\'given has no effect and is superfluous.\'.format(title)\n-            )\n+                u\'given has no effect and is superfluous.\'.format(title))\n         # w/o factory we\'re done here: schema only behavior\n         return\n \n@@ -176,5 +181,5 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n         _context,\n         factory=(adapter_factory,),\n         provides=provides,\n-        for_=(for_,)\n+        for_=(for_,),\n     )\ndiff --git a/plone/behavior/registration.py b/plone/behavior/registration.py\nindex c7d1086..ba18687 100644\n--- a/plone/behavior/registration.py\n+++ b/plone/behavior/registration.py\n@@ -56,11 +56,11 @@ def __repr__(self):\n             \'title\': self.title or \'(no title)\',\n             \'description\': textwrap.fill(\n                 self.description or \'(no description)\',\n-                subsequent_indent=\'  \'\n+                subsequent_indent=\'  \',\n             ),\n             \'extra_info\': (\n                 self.former_dotted_names and\n-                \'\\n  former dotted names: {}\'.format(self.former_dotted_names)\n+                \'\\n  former dotted names: {0}\'.format(self.former_dotted_names)\n             ),\n         }\n         return REGISTRATION_REPR.format(**info)\n@@ -96,9 +96,8 @@ def lookup_behavior_registration(\n             if name in behavior.former_dotted_names:\n                 if warn_about_fallback:\n                     logger.warn(\n-                        \'The dotted name "{}" is deprecated. It has been \'\n-                        \'changed to "{}"\'.format(\n-                            name, behavior.interface.__identifier__)\n-                    )\n+                        \'The dotted name "{0}" is deprecated. It has been \'\n+                        \'changed to "{1}"\'.format(\n+                            name, behavior.interface.__identifier__, ))\n                 return behavior\n         raise BehaviorRegistrationNotFound(name)\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2019-02-08T14:31:13+01:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.behavior/commit/b81907e9935dc72eef42ad4bdcda402d0ee5687a

Enhance doctests to demonstrate the ``former_dotted_names`` feature

Files changed:
M plone/behavior/directives.rst
M plone/behavior/tests.py

b'diff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst\nindex a7c0c78..8386d38 100644\n--- a/plone/behavior/directives.rst\n+++ b/plone/behavior/directives.rst\n@@ -93,6 +93,15 @@ plone.behavior.tests:\n     ...         provides=".tests.INameOnlyBehavior"\n     ...         />\n     ...\n+    ...     <plone:behavior\n+    ...         name="renamed_adapter_behavior"\n+    ...         title="Renamed Adapter behavior"\n+    ...         description="A basic adapter behavior that used to have a different name"\n+    ...         provides=".tests.IRenamedAdapterBehavior"\n+    ...         factory=".tests.RenamedAdapterBehavior"\n+    ...         former_dotted_names="plone.behavior.tests.IOriginalAdapterBehavior"\n+    ...         />\n+    ...\n     ... </configure>\n     ... """\n \n@@ -340,6 +349,20 @@ declaration on the factory.\n     >>> dummy.name\n     u\'name_only\'\n \n+8) A behavior that used to be known under a different dotted name\n+\n+    A behavior that has been renamed, can of course be found under the new name.\n+    The representation tells us the former dotted name.\n+    >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IRenamedAdapterBehavior")\n+    >>> dummy  # doctest: +ELLIPSIS\n+    <BehaviorRegistration renamed_adapter_behavior at ...\n+      schema: plone.behavior.tests.IRenamedAdapterBehavior\n+      marker: (no marker is set)\n+      factory: <class \'plone.behavior.tests.RenamedAdapterBehavior\'>\n+      title: Renamed Adapter behavior\n+      A basic adapter behavior that used to have a different name\n+      former dotted names: plone.behavior.tests.IOriginalAdapterBehavior\n+    >\n \n Test registration lookup helper utility.\n \n@@ -373,3 +396,17 @@ Test registration lookup helper utility.\n       title: Adapter behavior\n       A basic adapter behavior\n     >\n+\n+    A lookup via getUtility for a former behavior name fails.\n+    >>> failed = False\n+    >>> try:\n+    ...     dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IOriginalAdapterBehavior")\n+    ... except ComponentLookupError:\n+    ...     failed = True\n+    >>> failed\n+    True\n+\n+    But the lookup helper still finds it under the former name.\n+    >>> dummy = lookup_behavior_registration("plone.behavior.tests.IOriginalAdapterBehavior")\n+    >>> dummy.name\n+    u\'renamed_adapter_behavior\'\ndiff --git a/plone/behavior/tests.py b/plone/behavior/tests.py\nindex 0d5d433..fe2f254 100644\n--- a/plone/behavior/tests.py\n+++ b/plone/behavior/tests.py\n@@ -23,6 +23,17 @@ def __init__(self, context):\n         self.context = context\n \n \n+# Simple adapter behavior that used to have a different name\n+class IRenamedAdapterBehavior(Interface):\n+    pass\n+\n+\n+@implementer(IRenamedAdapterBehavior)\n+class RenamedAdapterBehavior(object):\n+    def __init__(self, context):\n+        self.context = context\n+\n+\n # Adapter behavior with explicit context restriction\n class IRestrictedAdapterBehavior(Interface):\n     pass\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2019-02-08T15:57:23+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/a74655bad0a464cf027e17c27212d658b345b023

Merge pull request #19 from plone/18-former-dotted-names

Implementation of proposal #18

Files changed:
M CHANGES.rst
M README.rst
M plone/behavior/directives.rst
M plone/behavior/interfaces.py
M plone/behavior/metaconfigure.py
M plone/behavior/registration.py
M plone/behavior/tests.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 58a66c1..76fce2a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,11 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- New option ``former_dotted_names`` that allows to register the former name under\n+  which a behavior used to be registerd. This can be useful to ensure a smooth\n+  transition in case a behavior\'s dotted name is changed.\n+  Refs: #18\n+  [pysailor]\n \n Bug fixes:\n \ndiff --git a/README.rst b/README.rst\nindex 3866f65..0b8d18c 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -178,6 +178,11 @@ The directive supports the attributes:\n \n     Must be one element (no multiadapters, applies also for auto-detection).\n \n+``former_dotted_names``\n+    In case a behavior is modified so that its dotted name changes, this field can be used to register the old name(s). Therefore, it is possible to retrieve the name(s) under which a behavior was formerly registered under.\n+\n+    If a call to ``lookup_behavior_registration`` does not find a behavior under the given name, it will look at the former dotted names to try and find the behavior.\n+\n \n ZCML Examples\n -------------\ndiff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst\nindex a7c0c78..8386d38 100644\n--- a/plone/behavior/directives.rst\n+++ b/plone/behavior/directives.rst\n@@ -93,6 +93,15 @@ plone.behavior.tests:\n     ...         provides=".tests.INameOnlyBehavior"\n     ...         />\n     ...\n+    ...     <plone:behavior\n+    ...         name="renamed_adapter_behavior"\n+    ...         title="Renamed Adapter behavior"\n+    ...         description="A basic adapter behavior that used to have a different name"\n+    ...         provides=".tests.IRenamedAdapterBehavior"\n+    ...         factory=".tests.RenamedAdapterBehavior"\n+    ...         former_dotted_names="plone.behavior.tests.IOriginalAdapterBehavior"\n+    ...         />\n+    ...\n     ... </configure>\n     ... """\n \n@@ -340,6 +349,20 @@ declaration on the factory.\n     >>> dummy.name\n     u\'name_only\'\n \n+8) A behavior that used to be known under a different dotted name\n+\n+    A behavior that has been renamed, can of course be found under the new name.\n+    The representation tells us the former dotted name.\n+    >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IRenamedAdapterBehavior")\n+    >>> dummy  # doctest: +ELLIPSIS\n+    <BehaviorRegistration renamed_adapter_behavior at ...\n+      schema: plone.behavior.tests.IRenamedAdapterBehavior\n+      marker: (no marker is set)\n+      factory: <class \'plone.behavior.tests.RenamedAdapterBehavior\'>\n+      title: Renamed Adapter behavior\n+      A basic adapter behavior that used to have a different name\n+      former dotted names: plone.behavior.tests.IOriginalAdapterBehavior\n+    >\n \n Test registration lookup helper utility.\n \n@@ -373,3 +396,17 @@ Test registration lookup helper utility.\n       title: Adapter behavior\n       A basic adapter behavior\n     >\n+\n+    A lookup via getUtility for a former behavior name fails.\n+    >>> failed = False\n+    >>> try:\n+    ...     dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IOriginalAdapterBehavior")\n+    ... except ComponentLookupError:\n+    ...     failed = True\n+    >>> failed\n+    True\n+\n+    But the lookup helper still finds it under the former name.\n+    >>> dummy = lookup_behavior_registration("plone.behavior.tests.IOriginalAdapterBehavior")\n+    >>> dummy.name\n+    u\'renamed_adapter_behavior\'\ndiff --git a/plone/behavior/interfaces.py b/plone/behavior/interfaces.py\nindex d653320..e23c516 100644\n--- a/plone/behavior/interfaces.py\n+++ b/plone/behavior/interfaces.py\n@@ -30,12 +30,12 @@ class IBehavior(Interface):\n \n     title = schema.TextLine(\n         title=u\'Short title of the behavior\',\n-        required=True\n+        required=True,\n     )\n \n     description = schema.Text(\n         title=u\'Longer description of the behavior\',\n-        required=False\n+        required=False,\n     )\n \n     name = schema.TextLine(\n@@ -43,13 +43,13 @@ class IBehavior(Interface):\n         description=u\'E.g. plone.somebehavior. If not given the full dotted \'\n                     u\'name of the interfaces is used for lookup instead.\'\n                     u\'Recommended, but due to BBB not required.\',\n-        required=False\n+        required=False,\n     )\n \n     interface = schema.Object(\n         title=u\'Interface describing this behavior\',\n         required=True,\n-        schema=IInterface\n+        schema=IInterface,\n     )\n \n     marker = schema.Object(\n@@ -59,13 +59,13 @@ class IBehavior(Interface):\n                     u\'is an adapter adapting the the marker and providing the \'\n                     u\'"interface" of this behavior.\',\n         required=False,\n-        schema=IInterface\n+        schema=IInterface,\n     )\n \n     factory = schema.Object(\n         title=u\'An adapter factory for the behavior\',\n         required=True,\n-        schema=Interface\n+        schema=Interface,\n     )\n \n \n@@ -86,7 +86,7 @@ class IBehaviorAdapterFactory(Interface):\n \n     behavior = schema.Object(\n         title=u\'The behavior this is a factory for\',\n-        schema=IBehavior\n+        schema=IBehavior,\n     )\n \n     def __call__(context):\ndiff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py\nindex c196d8b..e28a3cf 100644\n--- a/plone/behavior/metaconfigure.py\n+++ b/plone/behavior/metaconfigure.py\n@@ -25,48 +25,65 @@ class IBehaviorDirective(Interface):\n     name = TextLine(\n         title=u\'Name\',\n         description=u\'Convenience lookup name for this behavior\',\n-        required=False)\n+        required=False,\n+    )\n \n     title = configuration_fields.MessageID(\n         title=u\'Title\',\n         description=u\'A user friendly title for this behavior\',\n-        required=True)\n+        required=True,\n+    )\n \n     description = configuration_fields.MessageID(\n         title=u\'Description\',\n         description=u\'A longer description for this behavior\',\n-        required=False)\n+        required=False,\n+    )\n \n     provides = configuration_fields.GlobalInterface(\n         title=u\'An interface to which the behavior can be adapted\',\n         description=u\'This is what the conditional adapter factory will \'\n                     u\'be registered as providing\',\n-        required=True)\n+        required=True,\n+    )\n \n     marker = configuration_fields.GlobalInterface(\n         title=u\'A marker interface to be applied by the behavior\',\n         description=u\'If factory is not given, then this is optional\',\n-        required=False)\n+        required=False,\n+    )\n \n     factory = configuration_fields.GlobalObject(\n         title=u\'The factory for this behavior\',\n         description=u\'If this is not given, the behavior is assumed to \'\n                     u\'provide a marker interface\',\n-        required=False)\n+        required=False,\n+    )\n \n     for_ = configuration_fields.GlobalObject(\n         title=u\'The type of object to register the conditional adapter \'\n               u\'factory for\',\n         description=u\'This is optional - the default is to register the \'\n                     u\'factory for zope.interface.Interface\',\n-        required=False)\n+        required=False,\n+    )\n \n     name_only = configuration_fields.Bool(\n         title=u\'Do not register the behavior under the dotted path, but \'\n               u\'only under the given name\',\n         description=u\'Use this option to register a behavior for the same \'\n                     u\'provides under a different name.\',\n-        required=False)\n+        required=False,\n+    )\n+\n+    former_dotted_names = TextLine(\n+        title=u\'Space-separated list of dotted names that this behavior was \'\n+              u\'formerly registered under\',\n+        description=u\'Use this field in case you change the dotted name, \'\n+                    u\'so that the current behavior can be looked up under \'\n+                    u\'its former name.\',\n+        required=False,\n+    )\n \n \n def _detect_for(factory, marker):\n@@ -80,8 +97,7 @@ def _detect_for(factory, marker):\n         return adapts[0]\n     if len(adapts) > 1:\n         raise ConfigurationError(\n-            u\'The factory can not be declared as multi-adapter.\'\n-        )\n+            u\'The factory can not be declared as multi-adapter.\')\n     # down here it means len(adapts) < 1\n     if marker is not None:\n         # given we have a marker it is safe to register for the\n@@ -92,7 +108,8 @@ def _detect_for(factory, marker):\n \n \n def behaviorDirective(_context, title, provides, name=None, description=None,\n-                      marker=None, factory=None, for_=None, name_only=False):\n+                      marker=None, factory=None, for_=None, name_only=False,\n+                      former_dotted_names=\'\'):\n \n     if marker is None and factory is None:\n         # a schema only behavior means usually direct attribute settings on the\n@@ -103,13 +120,11 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n     if marker is not None and factory is None and marker is not provides:\n         raise ConfigurationError(\n             u\'You cannot specify a different \\\'marker\\\' and \\\'provides\\\' if \'\n-            u\'there is no adapter factory for the provided interface.\'\n-        )\n+            u\'there is no adapter factory for the provided interface.\')\n     if name_only and name is None:\n         raise ConfigurationError(\n             u\'If you decide to only register by \\\'name\\\', a name must \'\n-            u\'be given.\'\n-        )\n+            u\'be given.\')\n \n     # Instantiate the real factory if it\'s the schema-aware type. We do\n     # this here so that the for_ interface may take this into account.\n@@ -124,6 +139,7 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n         marker=marker,\n         factory=factory,\n         name=name,\n+        former_dotted_names=former_dotted_names,\n     )\n     # the behavior registration can be looked up as a named utility.\n     # the name of the utility is either the full dotted path of the interface\n@@ -134,7 +150,7 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n             _context,\n             provides=IBehavior,\n             name=provides.__identifier__,\n-            component=registration\n+            component=registration,\n         )\n \n     if name is not None:\n@@ -146,15 +162,14 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n             _context,\n             provides=IBehavior,\n             name=name,\n-            component=registration\n+            component=registration,\n         )\n \n     if factory is None:\n         if for_ is not None:\n             logger.warn(\n                 u\'Specifying \\\'for\\\' in behavior \\\'{0}\\\' if no \\\'factory\\\' is \'\n-                u\'given has no effect and is superfluous.\'.format(title)\n-            )\n+                u\'given has no effect and is superfluous.\'.format(title))\n         # w/o factory we\'re done here: schema only behavior\n         return\n \n@@ -166,5 +181,5 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n         _context,\n         factory=(adapter_factory,),\n         provides=provides,\n-        for_=(for_,)\n+        for_=(for_,),\n     )\ndiff --git a/plone/behavior/registration.py b/plone/behavior/registration.py\nindex 557d0bf..ba18687 100644\n--- a/plone/behavior/registration.py\n+++ b/plone/behavior/registration.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n+from plone.behavior import logger\n from plone.behavior.interfaces import IBehavior\n from zope.component import ComponentLookupError\n+from zope.component import getUtilitiesFor\n from zope.component import getUtility\n from zope.interface import implementer\n \n@@ -20,7 +22,7 @@\n   marker: {marker}\n   factory: {factory}\n   title: {title}\n-  {description}\n+  {description}{extra_info}\n >"""\n \n \n@@ -28,13 +30,14 @@\n class BehaviorRegistration(object):\n \n     def __init__(self, title, description, interface,\n-                 marker, factory, name=None):\n+                 marker, factory, name=None, former_dotted_names=\'\'):\n         self.title = title\n         self.description = description\n         self.interface = interface\n         self.marker = marker\n         self.factory = factory\n         self.name = name\n+        self.former_dotted_names = former_dotted_names\n \n     def __repr__(self):\n         if self.marker is not None:\n@@ -53,8 +56,12 @@ def __repr__(self):\n             \'title\': self.title or \'(no title)\',\n             \'description\': textwrap.fill(\n                 self.description or \'(no description)\',\n-                subsequent_indent=\'  \'\n-            )\n+                subsequent_indent=\'  \',\n+            ),\n+            \'extra_info\': (\n+                self.former_dotted_names and\n+                \'\\n  former dotted names: {0}\'.format(self.former_dotted_names)\n+            ),\n         }\n         return REGISTRATION_REPR.format(**info)\n \n@@ -64,8 +71,11 @@ class BehaviorRegistrationNotFound(Exception):\n     """\n \n \n-def lookup_behavior_registration(name=None, identifier=None):\n-    """Lookup behavior registration either by name or interface identifier.\n+def lookup_behavior_registration(\n+        name=None, identifier=None, warn_about_fallback=True):\n+    """Look up behavior registration either by name or interface identifier.\n+       Fall back to checking the former_dotted_names if the lookup is not\n+       successful.\n \n     ``ValueError`` is thrown if function call is incomplete.\n     ``BehaviorRegistrationNotFound`` is thrown if lookup fails.\n@@ -80,4 +90,14 @@ def lookup_behavior_registration(name=None, identifier=None):\n     try:\n         return getUtility(IBehavior, name=name)\n     except ComponentLookupError:\n+        for id_, behavior in getUtilitiesFor(IBehavior):\n+            # Before we raise an error, iterate over all behaviors and check\n+            # if the requested name is registered as a former dotted name.\n+            if name in behavior.former_dotted_names:\n+                if warn_about_fallback:\n+                    logger.warn(\n+                        \'The dotted name "{0}" is deprecated. It has been \'\n+                        \'changed to "{1}"\'.format(\n+                            name, behavior.interface.__identifier__, ))\n+                return behavior\n         raise BehaviorRegistrationNotFound(name)\ndiff --git a/plone/behavior/tests.py b/plone/behavior/tests.py\nindex 0d5d433..fe2f254 100644\n--- a/plone/behavior/tests.py\n+++ b/plone/behavior/tests.py\n@@ -23,6 +23,17 @@ def __init__(self, context):\n         self.context = context\n \n \n+# Simple adapter behavior that used to have a different name\n+class IRenamedAdapterBehavior(Interface):\n+    pass\n+\n+\n+@implementer(IRenamedAdapterBehavior)\n+class RenamedAdapterBehavior(object):\n+    def __init__(self, context):\n+        self.context = context\n+\n+\n # Adapter behavior with explicit context restriction\n class IRestrictedAdapterBehavior(Interface):\n     pass\n'

