Repository: plone.session


Branch: refs/heads/master
Date: 2019-02-08T16:52:23+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.session/commit/b83b0a068bcf52f7bdf73fe54b13ef6b00c912d1

feat: remove all traces of ZopeTestCase

Files changed:
A plone/session/testing.py
M plone/session/tests/testPAS.py
D plone/session/tests/sessioncase.py

b'diff --git a/plone/session/testing.py b/plone/session/testing.py\nnew file mode 100644\nindex 0000000..d5bbd9c\n--- /dev/null\n+++ b/plone/session/testing.py\n@@ -0,0 +1,71 @@\n+# -*- coding: utf-8 -*-\n+from AccessControl.Permissions import access_contents_information\n+from AccessControl.Permissions import view\n+from OFS.Folder import Folder\n+from OFS.Folder import manage_addFolder\n+from plone.app.testing import PLONE_FIXTURE\n+from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing.layers import FunctionalTesting\n+from plone.app.testing.layers import IntegrationTesting\n+from plone.session.plugins.session import SessionPlugin\n+\n+import doctest\n+\n+\n+folder_name = \'test_folder_1_\'\n+user_name = \'test_user_1_\'\n+user_password = \'secret\'\n+user_role = \'test_role_1_\'\n+standard_permissions = [access_contents_information, view]\n+\n+\n+class FakePAS(Folder):\n+    plugins = None\n+\n+    def updateCredentials(self, request, response, userid, password):\n+        self.credentials = (userid, password)\n+\n+    def _verifyUser(self, plugin, user_id=None, login=None):\n+        assert user_id is None\n+        if login == \'our_user\':\n+            return dict(id=login, login=login, pluginid="session")\n+        return None\n+\n+\n+class PloneSessionLayer(PloneSandboxLayer):\n+    defaultBases = (PLONE_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        import plone.session\n+        import plone.session.tests\n+\n+        self.loadZCML(package=plone.session, name=\'meta.zcml\')\n+        self.loadZCML(package=plone.session)\n+        self.loadZCML(package=plone.session.tests)\n+\n+        self._create_folder(app)\n+        self._create_structure()\n+\n+    def _create_folder(self, app):\n+        manage_addFolder(app, folder_name)\n+        self.folder = getattr(app, folder_name)\n+        self.folder._addRole(user_role)\n+        self.folder.manage_role(user_role, standard_permissions)\n+\n+    def _create_structure(self):\n+        self.folder._setObject("pas", FakePAS("pas"))\n+        self.folder.pas._setObject("session", SessionPlugin("session"))\n+\n+\n+PLONE_SESSION_FIXTURE = PloneSessionLayer()\n+\n+PLONE_SESSION_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_SESSION_FIXTURE,), name=\'PloneSessionLayer:Integration\'\n+)\n+PLONE_SEESION_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_SESSION_FIXTURE,), name=\'PloneSessionLayer:Functional\',\n+)\n+\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\ndiff --git a/plone/session/tests/sessioncase.py b/plone/session/tests/sessioncase.py\ndeleted file mode 100644\nindex 55c309b..0000000\n--- a/plone/session/tests/sessioncase.py\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-from Testing import ZopeTestCase\n-\n-# BBB for Zope 2.12\n-try:\n-    from Zope2.App import zcml\n-except ImportError:\n-    from Products.Five import zcml\n-\n-import plone.session\n-import plone.session.tests\n-from plone.session.plugins.session import SessionPlugin\n-\n-from OFS.Folder import Folder\n-\n-\n-class FakePAS(Folder):\n-    plugins = None\n-\n-    def updateCredentials(self, request, response, userid, password):\n-        self.credentials = (userid, password)\n-\n-    def _verifyUser(self, plugin, user_id=None, login=None):\n-        assert user_id is None\n-        if login == \'our_user\':\n-            return dict(id=login, login=login, pluginid="session")\n-        return None\n-\n-\n-class PloneSessionTestCase(ZopeTestCase.ZopeTestCase):\n-\n-    def afterSetUp(self):\n-        zcml.load_config(\'meta.zcml\', plone.session)\n-        zcml.load_config(\'configure.zcml\', plone.session)\n-        zcml.load_config(\'configure.zcml\', plone.session.tests)\n-        self.folder._setObject("pas", FakePAS("pas"))\n-        self.folder.pas._setObject("session", SessionPlugin("session"))\n-\n-\n-class FunctionalPloneSessionTestCase(\n-    ZopeTestCase.Functional,\n-    PloneSessionTestCase\n-):\n-    pass\ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 24fcfa0..2ec774a 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -2,10 +2,11 @@\n from DateTime import DateTime\n from zope.publisher.browser import TestRequest\n from plone.session.interfaces import ISessionPlugin\n-from plone.session.tests.sessioncase import FunctionalPloneSessionTestCase\n+from plone.session.testing import PLONE_SEESION_FUNCTIONAL_TESTING\n \n import base64\n import six\n+import unittest\n \n \n class MockResponse(object):\n@@ -18,10 +19,14 @@ def setCookie(self, name, value, path,\n         self.secure = secure\n \n \n-class TestSessionPlugin(FunctionalPloneSessionTestCase):\n+class TestSessionPlugin(unittest.TestCase):\n \n+    layer = PLONE_SEESION_FUNCTIONAL_TESTING\n     userid = \'jbloggs\'\n \n+    def setUp(self):\n+        self.folder = self.layer[\'app\'][\'test_folder_1_\']\n+\n     def testInterfaces(self):\n         session = self.folder.pas.session\n         self.assertEqual(ISessionPlugin.providedBy(session), True)\n@@ -136,9 +141,3 @@ def testSpecialCharUserid(self):\n         # This step would fail.\n         session._setupSession(unicode_userid, response)\n \n-\n-def test_suite():\n-    from unittest import TestSuite, makeSuite\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestSessionPlugin))\n-    return suite\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2019-02-08T16:53:02+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.session/commit/3f58b6ba914ada2c1055746a06095bbc4bc59fcb

Add news entry

Files changed:
A news/14.bugfix

b'diff --git a/news/14.bugfix b/news/14.bugfix\nnew file mode 100644\nindex 0000000..1303f02\n--- /dev/null\n+++ b/news/14.bugfix\n@@ -0,0 +1,2 @@\n+Remove last traces of ZopeTestCase.\n+[gforcada]\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2019-02-10T16:52:50+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.session/commit/8dcaf3b219b368a8518e7407f6fd220c9bd484d7

Merge pull request #15 from plone/remove-cruft

Remove cruft

Files changed:
A news/14.bugfix
A plone/session/testing.py
M plone/session/tests/testPAS.py
D plone/session/tests/sessioncase.py

b'diff --git a/news/14.bugfix b/news/14.bugfix\nnew file mode 100644\nindex 0000000..1303f02\n--- /dev/null\n+++ b/news/14.bugfix\n@@ -0,0 +1,2 @@\n+Remove last traces of ZopeTestCase.\n+[gforcada]\ndiff --git a/plone/session/testing.py b/plone/session/testing.py\nnew file mode 100644\nindex 0000000..d5bbd9c\n--- /dev/null\n+++ b/plone/session/testing.py\n@@ -0,0 +1,71 @@\n+# -*- coding: utf-8 -*-\n+from AccessControl.Permissions import access_contents_information\n+from AccessControl.Permissions import view\n+from OFS.Folder import Folder\n+from OFS.Folder import manage_addFolder\n+from plone.app.testing import PLONE_FIXTURE\n+from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing.layers import FunctionalTesting\n+from plone.app.testing.layers import IntegrationTesting\n+from plone.session.plugins.session import SessionPlugin\n+\n+import doctest\n+\n+\n+folder_name = \'test_folder_1_\'\n+user_name = \'test_user_1_\'\n+user_password = \'secret\'\n+user_role = \'test_role_1_\'\n+standard_permissions = [access_contents_information, view]\n+\n+\n+class FakePAS(Folder):\n+    plugins = None\n+\n+    def updateCredentials(self, request, response, userid, password):\n+        self.credentials = (userid, password)\n+\n+    def _verifyUser(self, plugin, user_id=None, login=None):\n+        assert user_id is None\n+        if login == \'our_user\':\n+            return dict(id=login, login=login, pluginid="session")\n+        return None\n+\n+\n+class PloneSessionLayer(PloneSandboxLayer):\n+    defaultBases = (PLONE_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        import plone.session\n+        import plone.session.tests\n+\n+        self.loadZCML(package=plone.session, name=\'meta.zcml\')\n+        self.loadZCML(package=plone.session)\n+        self.loadZCML(package=plone.session.tests)\n+\n+        self._create_folder(app)\n+        self._create_structure()\n+\n+    def _create_folder(self, app):\n+        manage_addFolder(app, folder_name)\n+        self.folder = getattr(app, folder_name)\n+        self.folder._addRole(user_role)\n+        self.folder.manage_role(user_role, standard_permissions)\n+\n+    def _create_structure(self):\n+        self.folder._setObject("pas", FakePAS("pas"))\n+        self.folder.pas._setObject("session", SessionPlugin("session"))\n+\n+\n+PLONE_SESSION_FIXTURE = PloneSessionLayer()\n+\n+PLONE_SESSION_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_SESSION_FIXTURE,), name=\'PloneSessionLayer:Integration\'\n+)\n+PLONE_SEESION_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_SESSION_FIXTURE,), name=\'PloneSessionLayer:Functional\',\n+)\n+\n+optionflags = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\ndiff --git a/plone/session/tests/sessioncase.py b/plone/session/tests/sessioncase.py\ndeleted file mode 100644\nindex 55c309b..0000000\n--- a/plone/session/tests/sessioncase.py\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-from Testing import ZopeTestCase\n-\n-# BBB for Zope 2.12\n-try:\n-    from Zope2.App import zcml\n-except ImportError:\n-    from Products.Five import zcml\n-\n-import plone.session\n-import plone.session.tests\n-from plone.session.plugins.session import SessionPlugin\n-\n-from OFS.Folder import Folder\n-\n-\n-class FakePAS(Folder):\n-    plugins = None\n-\n-    def updateCredentials(self, request, response, userid, password):\n-        self.credentials = (userid, password)\n-\n-    def _verifyUser(self, plugin, user_id=None, login=None):\n-        assert user_id is None\n-        if login == \'our_user\':\n-            return dict(id=login, login=login, pluginid="session")\n-        return None\n-\n-\n-class PloneSessionTestCase(ZopeTestCase.ZopeTestCase):\n-\n-    def afterSetUp(self):\n-        zcml.load_config(\'meta.zcml\', plone.session)\n-        zcml.load_config(\'configure.zcml\', plone.session)\n-        zcml.load_config(\'configure.zcml\', plone.session.tests)\n-        self.folder._setObject("pas", FakePAS("pas"))\n-        self.folder.pas._setObject("session", SessionPlugin("session"))\n-\n-\n-class FunctionalPloneSessionTestCase(\n-    ZopeTestCase.Functional,\n-    PloneSessionTestCase\n-):\n-    pass\ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 24fcfa0..2ec774a 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -2,10 +2,11 @@\n from DateTime import DateTime\n from zope.publisher.browser import TestRequest\n from plone.session.interfaces import ISessionPlugin\n-from plone.session.tests.sessioncase import FunctionalPloneSessionTestCase\n+from plone.session.testing import PLONE_SEESION_FUNCTIONAL_TESTING\n \n import base64\n import six\n+import unittest\n \n \n class MockResponse(object):\n@@ -18,10 +19,14 @@ def setCookie(self, name, value, path,\n         self.secure = secure\n \n \n-class TestSessionPlugin(FunctionalPloneSessionTestCase):\n+class TestSessionPlugin(unittest.TestCase):\n \n+    layer = PLONE_SEESION_FUNCTIONAL_TESTING\n     userid = \'jbloggs\'\n \n+    def setUp(self):\n+        self.folder = self.layer[\'app\'][\'test_folder_1_\']\n+\n     def testInterfaces(self):\n         session = self.folder.pas.session\n         self.assertEqual(ISessionPlugin.providedBy(session), True)\n@@ -136,9 +141,3 @@ def testSpecialCharUserid(self):\n         # This step would fail.\n         session._setupSession(unicode_userid, response)\n \n-\n-def test_suite():\n-    from unittest import TestSuite, makeSuite\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(TestSessionPlugin))\n-    return suite\n'

