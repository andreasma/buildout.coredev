Repository: plone.app.widgets


Branch: refs/heads/2.4.x
Date: 2018-11-29T15:00:03-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/plone.app.widgets/commit/e056b8dd0a7f27add91d67b2321aed1ec53c0e3c

Add support for rendering &lt;optgroup&gt; elements from ITreeVocabulary

Files changed:
M CHANGES.rst
M plone/app/widgets/base.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0f69975..fd30768 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,9 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Add support for rendering <optgroup> elements from\n+  zope.schema.interfaces.ITreeVocabulary hierarchical terms.\n+  [rpatterson]\n \n Bug fixes:\n \ndiff --git a/plone/app/widgets/base.py b/plone/app/widgets/base.py\nindex 6b894b5..7d8b032 100644\n--- a/plone/app/widgets/base.py\n+++ b/plone/app/widgets/base.py\n@@ -4,6 +4,7 @@\n from lxml import etree\n \n import json\n+import collections\n import six\n \n \n@@ -189,9 +190,16 @@ def _get_items(self):\n         :returns: List of value and title pairs.\n         :rtype: list\n         """\n-\n-        for element in self.el.iter("option"):\n-            yield element.attrib[\'value\'], element.text\n+        if self.el.find(\'optgroup\') is not None:\n+            return collections.OrderedDict(\n+                (group.attrib[\'label\'], [\n+                    (option.attrib[\'value\'], option.text)\n+                    for option in group.iter("option")])\n+                for group in self.el.iter("optgroup"))\n+        else:\n+            return [\n+                (option.attrib[\'value\'], option.text)\n+                for option in self.el.iter("option")]\n \n     def _set_items(self, value):\n         """Set options for element.\n@@ -200,13 +208,30 @@ def _set_items(self, value):\n                       options to choose from.\n         :type value: list\n         """\n-        for token, title in value:\n-            option = etree.SubElement(self.el, \'option\')\n-            option.attrib[\'value\'] = token\n-            option.text = title\n+        def addOptions(el, options):\n+            """\n+            Add <option> elements for each vocab item.\n+            """\n+            for token, title in options:\n+                option = etree.SubElement(el, \'option\')\n+                option.attrib[\'value\'] = token\n+                option.text = title\n+\n+        if isinstance(value, dict):\n+            for group_label, options in value.items():\n+                group = etree.SubElement(self.el, \'optgroup\')\n+                group.attrib[\'label\'] = group_label\n+                addOptions(group, options)\n+        else:\n+            for token, title in value:\n+                option = etree.SubElement(self.el, \'option\')\n+                option.attrib[\'value\'] = token\n+                option.text = title\n \n     def _del_items(self):\n         """Removing options from inside of elements."""\n+        for group in self.el.iter("optgroup"):\n+            self.el.remove(group)\n         for element in self.el.iter("option"):\n             self.el.remove(element)\n \n'

