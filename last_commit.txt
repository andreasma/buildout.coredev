Repository: plone.app.dexterity


Branch: refs/heads/2.3.x
Date: 2017-12-06T15:13:55-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/18907a819161c010147cdeec48496387272cead0

Do not acquire constrain_types_mode from parent when not defined

Files changed:
M CHANGES.rst
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/tests/test_constrains.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 027eaaa..546f490 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Do not acquire ``constrain_types_mode`` from parent when not defined\n+  [frapell]\n \n \n 2.3.7 (2017-02-05)\ndiff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex 4f1daff..615e8f3 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n+from Products.CMFPlone.utils import base_hasattr\n \n \n # constants for enableConstrain. Copied from AT\n@@ -21,7 +22,7 @@ def getConstrainTypesMode(self):\n         and can be adapted to ISelectableConstrainTypes.\n         Else it is DISABLED\n         """\n-        if hasattr(self.context, \'constrain_types_mode\'):\n+        if base_hasattr(self.context, \'constrain_types_mode\'):\n             return self.context.constrain_types_mode\n         parent = self.context.__parent__\n         if not parent:\ndiff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py\nindex 33179b6..424ba69 100644\n--- a/plone/app/dexterity/tests/test_constrains.py\n+++ b/plone/app/dexterity/tests/test_constrains.py\n@@ -81,6 +81,19 @@ def test_constrainTypesModeDefault(self):\n             constrains.DISABLED, behavior1.getConstrainTypesMode())\n         self.assertEqual(constrains.ACQUIRE, behavior2.getConstrainTypesMode())\n \n+    def test_constrainTypesAcquireDoesNotMatchParent(self):\n+        """\n+        The inner folder should return constrains.ACQUIRE and not the actual value of its parent\n+        """\n+        behavior1 = ISelectableConstrainTypes(self.folder)\n+        behavior2 = ISelectableConstrainTypes(self.inner_folder)\n+\n+        behavior1.setConstrainTypesMode(constrains.DISABLED)\n+        self.assertEqual(constrains.ACQUIRE, behavior2.getConstrainTypesMode())\n+\n+        behavior1.setConstrainTypesMode(constrains.ENABLED)\n+        self.assertEqual(constrains.ACQUIRE, behavior2.getConstrainTypesMode())\n+\n     def test_constrainTypesModeValidSet(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n         behavior.setConstrainTypesMode(constrains.ENABLED)\n'

Repository: plone.app.dexterity


Branch: refs/heads/2.3.x
Date: 2019-01-24T11:12:05-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/d5dbdde3a01a1c2ea6768fec5372baa5b5787a43

Merge branch '2.3.x' into frapell-constrain

Files changed:
A news/.gitkeep
A pyproject.toml
M CHANGES.rst
M MANIFEST.in
M plone/app/dexterity/factories.py
M setup.py
D .gitattributes

b'diff --git a/.gitattributes b/.gitattributes\ndeleted file mode 100644\nindex 6f9ff67..0000000\n--- a/.gitattributes\n+++ /dev/null\n@@ -1 +0,0 @@\n-CHANGES.rst merge=union\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 546f490..ff64770 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,22 +1,23 @@\n Changelog\n =========\n \n-2.3.8 (unreleased)\n-------------------\n-\n-Breaking changes:\n-\n-- *add item here*\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n \n-New features:\n+.. towncrier release notes start\n \n-- *add item here*\n+2.3.8 (2019-01-08)\n+------------------\n \n Bug fixes:\n \n - Do not acquire ``constrain_types_mode`` from parent when not defined\n   [frapell]\n \n+- Release upload lock when name chooser fails. [maurits] (#276)\n+\n \n 2.3.7 (2017-02-05)\n ------------------\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex a56a69c..9ea205f 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -5,3 +5,6 @@ recursive-include docs *\n recursive-include plone *\n \n global-exclude *.pyc\n+include pyproject.toml\n+recursive-exclude news *\n+exclude news\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 0000000..8b13789\n--- /dev/null\n+++ b/news/.gitkeep\n@@ -0,0 +1 @@\n+\ndiff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py\nindex 59e4569..7496f3a 100644\n--- a/plone/app/dexterity/factories.py\n+++ b/plone/app/dexterity/factories.py\n@@ -35,9 +35,8 @@ def __call__(self, name, content_type, data):\n         # otherwise I get ZPublisher.Conflict ConflictErrors\n         # when uploading multiple files\n         upload_lock.acquire()\n-\n-        newid = chooser.chooseName(name, self.context.aq_parent)\n         try:\n+            newid = chooser.chooseName(name, self.context.aq_parent)\n             transaction.begin()\n \n             # Try to determine which kind of NamedBlob we need\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..05b615d\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/setup.py b/setup.py\nindex 834f248..5324246 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.3.8.dev0\'\n+version = \'2.3.9.dev0\'\n \n short_description = (\n     \'Dexterity is a content type framework for CMF  applications, \'\n@@ -25,7 +25,7 @@\n     classifiers=[\n         \'Framework :: Plone\',\n         \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n+        \'License :: OSI Approved :: GNU General Public License (GPL)\',\n         \'Programming Language :: Python\',\n         \'Programming Language :: Python :: 2.7\',\n         \'Topic :: Software Development :: Libraries :: Python Modules\',\n'

Repository: plone.app.dexterity


Branch: refs/heads/2.3.x
Date: 2019-01-24T11:29:54-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/03b917e530588935ae5eb75cfe67285934b8739e

Revert CHANGES.rst and use towncrier instead

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ff64770..209ab49 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -13,8 +13,6 @@ Changelog\n \n Bug fixes:\n \n-- Do not acquire ``constrain_types_mode`` from parent when not defined\n-  [frapell]\n \n - Release upload lock when name chooser fails. [maurits] (#276)\n \n'

Repository: plone.app.dexterity


Branch: refs/heads/2.3.x
Date: 2019-01-24T11:30:55-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/5914d85189ce92d129786a703cf3593d33cc25a5

Include towncrier file

Files changed:
A news/284.bugfix

b'diff --git a/news/284.bugfix b/news/284.bugfix\nnew file mode 100644\nindex 0000000..507ba98\n--- /dev/null\n+++ b/news/284.bugfix\n@@ -0,0 +1,3 @@\n+Do not acquire ``constrain_types_mode`` from parent when not defined\n+[frapell]\n+\n'

Repository: plone.app.dexterity


Branch: refs/heads/2.3.x
Date: 2019-01-24T16:29:17+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/b4502e1a992bb97dbb59762f6e07112199f2115a

Merge pull request #264 from plone/frapell-constrain

Do not acquire constrain_types_mode from parent when not defined

Files changed:
A news/284.bugfix
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/tests/test_constrains.py

b'diff --git a/news/284.bugfix b/news/284.bugfix\nnew file mode 100644\nindex 0000000..507ba98\n--- /dev/null\n+++ b/news/284.bugfix\n@@ -0,0 +1,3 @@\n+Do not acquire ``constrain_types_mode`` from parent when not defined\n+[frapell]\n+\ndiff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex 4f1daff..615e8f3 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n+from Products.CMFPlone.utils import base_hasattr\n \n \n # constants for enableConstrain. Copied from AT\n@@ -21,7 +22,7 @@ def getConstrainTypesMode(self):\n         and can be adapted to ISelectableConstrainTypes.\n         Else it is DISABLED\n         """\n-        if hasattr(self.context, \'constrain_types_mode\'):\n+        if base_hasattr(self.context, \'constrain_types_mode\'):\n             return self.context.constrain_types_mode\n         parent = self.context.__parent__\n         if not parent:\ndiff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py\nindex 33179b6..424ba69 100644\n--- a/plone/app/dexterity/tests/test_constrains.py\n+++ b/plone/app/dexterity/tests/test_constrains.py\n@@ -81,6 +81,19 @@ def test_constrainTypesModeDefault(self):\n             constrains.DISABLED, behavior1.getConstrainTypesMode())\n         self.assertEqual(constrains.ACQUIRE, behavior2.getConstrainTypesMode())\n \n+    def test_constrainTypesAcquireDoesNotMatchParent(self):\n+        """\n+        The inner folder should return constrains.ACQUIRE and not the actual value of its parent\n+        """\n+        behavior1 = ISelectableConstrainTypes(self.folder)\n+        behavior2 = ISelectableConstrainTypes(self.inner_folder)\n+\n+        behavior1.setConstrainTypesMode(constrains.DISABLED)\n+        self.assertEqual(constrains.ACQUIRE, behavior2.getConstrainTypesMode())\n+\n+        behavior1.setConstrainTypesMode(constrains.ENABLED)\n+        self.assertEqual(constrains.ACQUIRE, behavior2.getConstrainTypesMode())\n+\n     def test_constrainTypesModeValidSet(self):\n         behavior = ISelectableConstrainTypes(self.folder)\n         behavior.setConstrainTypesMode(constrains.ENABLED)\n'

