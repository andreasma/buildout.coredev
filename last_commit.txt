Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-09-18T08:45:15+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/c559dcf84a30358a15eaf0adabb45041f132af35

fix selector-links and cloning of content with relations for py3

Files changed:
M src/plone/app/multilingual/browser/selector.py
M src/plone/app/multilingual/dx/cloner.py

b"diff --git a/src/plone/app/multilingual/browser/selector.py b/src/plone/app/multilingual/browser/selector.py\nindex 2f0ac192..4335ae08 100644\n--- a/src/plone/app/multilingual/browser/selector.py\n+++ b/src/plone/app/multilingual/browser/selector.py\n@@ -16,12 +16,12 @@ def addQuery(request, url, exclude=tuple(), **extras):\n     formvariables = {}\n     for k, v in request.form.items():\n         if k not in exclude:\n-            if isinstance(v, six.text_type):\n+            if six.PY2 and isinstance(v, six.text_type):\n                 formvariables[k] = v.encode('utf-8')\n             else:\n                 formvariables[k] = v\n     for k, v in extras.items():\n-        if isinstance(v, six.text_type):\n+        if six.PY2 and isinstance(v, six.text_type):\n             formvariables[k] = v.encode('utf-8')\n         else:\n             formvariables[k] = v\ndiff --git a/src/plone/app/multilingual/dx/cloner.py b/src/plone/app/multilingual/dx/cloner.py\nindex fec1ac19..f5c489e9 100644\n--- a/src/plone/app/multilingual/dx/cloner.py\n+++ b/src/plone/app/multilingual/dx/cloner.py\n@@ -75,7 +75,7 @@ def relation_copier(rel, lang=target_language, fun=self.copy_relation):\n                     elif IRelationValue.providedBy(value):\n                         value = self.copy_relation(value, target_language)\n                     elif IRelationList.providedBy(schema[field_name]):\n-                        value = map(relation_copier, value or [])\n+                        value = list(map(relation_copier, value or []))\n \n                     doomed = True\n                     setattr(schema(translation),\n"

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-09-18T08:45:15+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/610c7adea7f30e5b28f4d52db67ae8392ae797f6

fix most tests for py3

Files changed:
M src/plone/app/multilingual/tests/test_selector.py
M src/plone/app/multilingual/tests/test_sitemap.py
M src/plone/app/multilingual/tests/test_uninstall.py

b'diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 27630443..3db687d4 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -155,12 +155,12 @@ def assertFullyTranslatedPages(self):\n         self.assertEqual(self.browser.url,\n                          a_ca.absolute_url() + \'?set_language=ca\')\n \n-        self.assertIn(u\'lang="ca"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         self.browser.open(selector_viewlet_languages[2][\'url\'])\n         self.assertEqual(self.browser.url,\n                          a_es.absolute_url() + \'?set_language=es\')\n-        self.assertIn(u\'lang="es"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_fully_translated_by_closest(self):\n         self.registry = getUtility(IRegistry)\n@@ -277,7 +277,7 @@ def test_languages_partially_translated_by_closest(self):\n             self.browser.url,\n             a_en.absolute_url() + \'?set_language=en\'\n         )\n-        self.assertIn(u\'lang="en"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         # But extra check, because English is the default?\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n@@ -288,7 +288,7 @@ def test_languages_partially_translated_by_closest(self):\n             self.browser.url,\n             f_ca.absolute_url() + \'?set_language=ca\'\n         )\n-        self.assertIn(u\'lang="ca"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check that ES translation is missing and only the LRF is found\n         self.browser.open(selector_languages[2][\'url\'])\n@@ -296,7 +296,7 @@ def test_languages_partially_translated_by_closest(self):\n             self.browser.url,\n             self.portal[\'es\'].absolute_url() + \'?set_language=es\'\n         )\n-        self.assertIn(u\'lang="es"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_partially_translated_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n@@ -320,7 +320,7 @@ def test_languages_partially_translated_by_dialog(self):\n             a_en.absolute_url()+\'?set_language=en\'\n         )\n         # But extra check, because English is the default?\n-        self.assertIn(u\'lang="en"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         tgid = selector_languages[1][\'url\'].split(\'/\')[-2]\n@@ -333,10 +333,7 @@ def test_languages_partially_translated_by_dialog(self):\n             NOT_TRANSLATED_YET_TEMPLATE +\n             \'/\' + tgid + \'?set_language=ca\'\n         )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check that ES is not yet translated\n         self.browser.open(selector_languages[2][\'url\'])\n@@ -346,10 +343,7 @@ def test_languages_partially_translated_by_dialog(self):\n             NOT_TRANSLATED_YET_TEMPLATE +\n             \'/\' + tgid + \'?set_language=es\'\n         )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def assertSiteRoot(self):\n         self.selector_viewlet = LanguageSelectorViewlet(\n@@ -366,10 +360,7 @@ def assertSiteRoot(self):\n              \'/@@multilingual-selector/notg/en?set_language=en\')\n         )\n         self.browser.open(selector_languages[0][\'url\'])\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA root\n@@ -379,10 +370,7 @@ def assertSiteRoot(self):\n              \'/@@multilingual-selector/notg/ca?set_language=ca\')\n         )\n         self.browser.open(selector_languages[1][\'url\'])\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES root\n         self.browser.open(selector_languages[2][\'url\'])\n@@ -391,10 +379,7 @@ def assertSiteRoot(self):\n             (self.portal.absolute_url() +\n              \'/@@multilingual-selector/notg/es?set_language=es\')\n         )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_siteroot_by_closest(self):\n         self.registry = getUtility(IRegistry)\n@@ -467,10 +452,7 @@ def assertRootFolders(self):\n             self.browser.url,\n             self.portal[\'en\'].absolute_url()+\'?set_language=en\'\n         )\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA\n@@ -479,10 +461,7 @@ def assertRootFolders(self):\n             self.browser.url,\n             self.portal.ca.absolute_url()+\'?set_language=ca\'\n         )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n@@ -490,10 +469,7 @@ def assertRootFolders(self):\n             self.browser.url,\n             self.portal.es.absolute_url()+\'?set_language=es\'\n         )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_root_folders_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n@@ -537,10 +513,7 @@ def test_languages_preserve_view(self):\n             self.browser.url,\n             f_en.absolute_url()+\'/contact-info?set_language=en\'\n         )\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA\n@@ -549,10 +522,7 @@ def test_languages_preserve_view(self):\n             self.browser.url,\n             f_ca.absolute_url()+\'/contact-info?set_language=ca\'\n         )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n@@ -561,10 +531,7 @@ def test_languages_preserve_view(self):\n             self.browser.url,\n             self.portal.es.absolute_url()+\'?set_language=es\'\n         )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n         # Shouldn\'t do for the not-translated-yet thingie when dialog is on\n         self.registry = getUtility(IRegistry)\n@@ -584,10 +551,7 @@ def test_languages_preserve_view(self):\n             self.browser.url,\n             f_en.absolute_url()+\'/contact-info?set_language=en\'\n         )\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA\n@@ -596,10 +560,7 @@ def test_languages_preserve_view(self):\n             self.browser.url,\n             f_ca.absolute_url()+\'/contact-info?set_language=ca\'\n         )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n@@ -611,10 +572,7 @@ def test_languages_preserve_view(self):\n             NOT_TRANSLATED_YET_TEMPLATE +\n             \'/\' + tgid + \'?set_language=es\'\n         )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def assertLanguagesPreserveQuery(self, policy):\n \n@@ -648,10 +606,7 @@ def assertLanguagesPreserveQuery(self, policy):\n             (f_en.absolute_url() +\n              \'/contact-info?int=1&uni=pres%C3%98rved&set_language=en\')\n         )\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA\n@@ -661,10 +616,7 @@ def assertLanguagesPreserveQuery(self, policy):\n             (f_ca.absolute_url() +\n              \'/contact-info?int=1&uni=pres%C3%98rved&set_language=ca\')\n         )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n@@ -673,10 +625,7 @@ def assertLanguagesPreserveQuery(self, policy):\n             self.browser.url,\n             untranslated_url[policy]\n         )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_preserve_by_closest(self):\n         self.registry = getUtility(IRegistry)\n@@ -867,7 +816,7 @@ def test_formvariables_unicode(self):\n         )\n \n     def test_formvariables_utf8(self):\n-        self.request.form[\'one\'] = u\'F\xc3\xb8r\'.encode("utf-8")\n+        self.request.form[\'one\'] = u\'F\xc3\xb8r\'\n         self.request.form[\'two\'] = u\'foo\'\n         self.assertEqual(\n             addQuery(self.request, self.url),\ndiff --git a/src/plone/app/multilingual/tests/test_sitemap.py b/src/plone/app/multilingual/tests/test_sitemap.py\nindex 205ca72a..128b3ccc 100644\n--- a/src/plone/app/multilingual/tests/test_sitemap.py\n+++ b/src/plone/app/multilingual/tests/test_sitemap.py\n@@ -5,7 +5,7 @@\n from plone.dexterity.utils import createContentInContainer\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISiteSchema\n-from six import StringIO\n+from six import BytesIO\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\n@@ -43,7 +43,7 @@ def setUp(self):\n             self.portal[\'en\'], \'Document\', title=u"Test document")\n \n     def uncompress(self, sitemapdata):\n-        sio = StringIO(sitemapdata)\n+        sio = BytesIO(sitemapdata)\n         unziped = GzipFile(fileobj=sio)\n         xml = unziped.read()\n         unziped.close()\n@@ -55,13 +55,13 @@ def test_portalroot_sitemap(self):\n         \'\'\'\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertIn(\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/en/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/en/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n \n-        self.assertIn(\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\n \n     def test_navroot_sitemap(self):\n         \'\'\'\n@@ -70,10 +70,10 @@ def test_navroot_sitemap(self):\n         sitemap = getMultiAdapter((self.portal.es, self.portal.REQUEST),\n                                   name=\'sitemap.xml.gz\')\n         xml = self.uncompress(sitemap())\n-        self.assertNotIn(\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)  # noqa\n-        self.assertNotIn(\'<loc>http://nohost/plone/en/test-document</loc>\', xml)  # noqa\n-        self.assertIn(\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n+        self.assertNotIn(b\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)  # noqa\n+        self.assertNotIn(b\'<loc>http://nohost/plone/en/test-document</loc>\', xml)  # noqa\n+        self.assertIn(b\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n \n-        self.assertNotIn(\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n-        self.assertNotIn(\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\n+        self.assertNotIn(b\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n+        self.assertNotIn(b\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\ndiff --git a/src/plone/app/multilingual/tests/test_uninstall.py b/src/plone/app/multilingual/tests/test_uninstall.py\nindex 5a3aed5a..5c01a44c 100644\n--- a/src/plone/app/multilingual/tests/test_uninstall.py\n+++ b/src/plone/app/multilingual/tests/test_uninstall.py\n@@ -2,6 +2,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.multilingual.testing import PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING  # noqa\n+from Products.CMFPlone.utils import get_installer\n \n import unittest\n \n@@ -11,15 +12,15 @@ class TestUninstall(unittest.TestCase):\n \n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n-        self.installer = api.portal.get_tool(\'portal_quickinstaller\')\n         roles_before = api.user.get_roles(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.installer.uninstallProducts([\'plone.app.multilingual\'])\n+        self.installer = get_installer(self.portal)\n+        self.installer.uninstall_product(\'plone.app.multilingual\')\n         setRoles(self.portal, TEST_USER_ID, roles_before)\n \n     def test_product_uninstalled(self):\n         """Test if plone.app.multilingual is cleanly uninstalled."""\n-        self.assertFalse(self.installer.isProductInstalled(\n+        self.assertFalse(self.installer.is_product_installed(\n             \'plone.app.multilingual\'))\n \n     def test_browserlayer_removed(self):\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-09-18T08:45:15+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/d207c3ab39662324a035aa19f3a397c68fdde120

fix issues with the random order of query-srings in py3

Files changed:
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 3db687d4..13d5c932 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -15,6 +15,8 @@\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n+from six.moves.urllib.parse import parse_qs\n+from six.moves.urllib.parse import urlparse\n from zope.component import getUtility\n from zope.event import notify\n from zope.interface import alsoProvides\n@@ -601,7 +603,7 @@ def assertLanguagesPreserveQuery(self, policy):\n \n         # Check EN\n         self.browser.open(selector_languages[0][\'url\'])\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             self.browser.url,\n             (f_en.absolute_url() +\n              \'/contact-info?int=1&uni=pres%C3%98rved&set_language=en\')\n@@ -611,7 +613,7 @@ def assertLanguagesPreserveQuery(self, policy):\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             self.browser.url,\n             (f_ca.absolute_url() +\n              \'/contact-info?int=1&uni=pres%C3%98rved&set_language=ca\')\n@@ -621,7 +623,7 @@ def assertLanguagesPreserveQuery(self, policy):\n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n         # Here @@search isn\'t preserved because we\'ve got the dialog\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             self.browser.url,\n             untranslated_url[policy]\n         )\n@@ -704,6 +706,20 @@ def test_languages_preserve_by_dialog(self):\n     #          \'url\': base + \'pres%C3%98rved&set_language=no\'}]\n     #     self.assertEqual(selector.languages(), expected)\n \n+    def assertUrlsEqual(self, url1, url2):\n+        """The order of query-strings is sometimes random in python 3\n+        This compares urls disregarding the order.\n+        """\n+        parsed_url_1 = urlparse(url1)\n+        parse_qs_1 = parse_qs(parsed_url_1.query)\n+        parsed_url_2 = urlparse(url2)\n+        parse_qs_2 = parse_qs(parsed_url_2.query)\n+        self.assertEqual(parsed_url_1[0], parsed_url_2[0])\n+        self.assertEqual(parsed_url_1[1], parsed_url_2[1])\n+        self.assertEqual(parsed_url_1[2], parsed_url_2[2])\n+        self.assertEqual(parsed_url_1[3], parsed_url_2[3])\n+        self.assertEqual(parse_qs_1, parse_qs_2)\n+\n \n class TestLanguageSelectorPostPath(unittest.TestCase):\n \n@@ -794,7 +810,7 @@ def setUp(self):\n     def test_formvariables(self):\n         self.request.form[\'one\'] = 1\n         self.request.form[\'two\'] = 2\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n             self.url+\'?two:int=2&one:int=1\'\n         )\n@@ -802,7 +818,7 @@ def test_formvariables(self):\n     def test_formvariables_sequences(self):\n         self.request.form[\'one\'] = (\'a\', )\n         self.request.form[\'two\'] = [\'b\', 2]\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n             self.url+\'?two:list=b&two:int:list=2&one=%28%27a%27%2C%29\'\n         )\n@@ -810,7 +826,7 @@ def test_formvariables_sequences(self):\n     def test_formvariables_unicode(self):\n         self.request.form[\'one\'] = u\'F\xc3\xb8r\'\n         self.request.form[\'two\'] = u\'foo\'\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n             self.url+\'?two=foo&one=F%C3%B8r\'\n         )\n@@ -818,7 +834,7 @@ def test_formvariables_unicode(self):\n     def test_formvariables_utf8(self):\n         self.request.form[\'one\'] = u\'F\xc3\xb8r\'\n         self.request.form[\'two\'] = u\'foo\'\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n             self.url+\'?two=foo&one=F%C3%B8r\'\n         )\n@@ -826,7 +842,7 @@ def test_formvariables_utf8(self):\n     def test_formvariables_object(self):\n         self.request.form[\'one\'] = \'1\'\n         self.request.form[\'two\'] = EvilObject()\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n             self.url\n         )\n@@ -834,7 +850,7 @@ def test_formvariables_object(self):\n     def test_formvariables_exclude(self):\n         self.request.form[\'one\'] = 1\n         self.request.form[\'two\'] = 2\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url, exclude=(\'two\',)),\n             self.url+\'?one:int=1\'\n         )\n@@ -842,7 +858,21 @@ def test_formvariables_exclude(self):\n     def test_formvariables_extras(self):\n         self.request.form[\'one\'] = 1\n         self.request.form[\'two\'] = 2\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url, three=3),\n             self.url+\'?one:int=1&three:int=3&two:int=2\'\n         )\n+\n+    def assertUrlsEqual(self, url1, url2):\n+        """The order of query-strings is sometimes random in python 3\n+        This compares urls disregarding the order.\n+        """\n+        parsed_url_1 = urlparse(url1)\n+        parse_qs_1 = parse_qs(parsed_url_1.query)\n+        parsed_url_2 = urlparse(url2)\n+        parse_qs_2 = parse_qs(parsed_url_2.query)\n+        self.assertEqual(parsed_url_1[0], parsed_url_2[0])\n+        self.assertEqual(parsed_url_1[1], parsed_url_2[1])\n+        self.assertEqual(parsed_url_1[2], parsed_url_2[2])\n+        self.assertEqual(parsed_url_1[3], parsed_url_2[3])\n+        self.assertEqual(parse_qs_1, parse_qs_2)\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-09-18T08:46:37+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/dcc4021b3f856df3f32fe88c5803de0be42bab37

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 6801d993..2a08c7ba 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -13,6 +13,9 @@ New features:\n - Make plone.app.controlpanel optional (no longer there in Plone 5.2).\n   [jensens]\n \n+- Add compatability with python 3\n+  [pbauer]\n+\n Bug fixes:\n \n - Upgrade step to profile version 3 was lost and now recreated.\n@@ -28,6 +31,10 @@ Bug fixes:\n - Don't fail, if multilingual selector is called without query\n   [tomgross]\n \n+- Fix tests for py3\n+  [pbauer]\n+\n+\n 5.2.0 (2018-04-04)\n ------------------\n \ndiff --git a/setup.py b/setup.py\nindex 2d4236fb..2f49ed75 100755\n--- a/setup.py\n+++ b/setup.py\n@@ -25,6 +25,8 @@\n         'License :: OSI Approved :: GNU General Public License (GPL)',\n         'Programming Language :: Python',\n         'Programming Language :: Python :: 2.7',\n+        'Programming Language :: Python :: 3.6',\n+        'Programming Language :: Python :: 3.7',\n         'Topic :: Software Development :: Libraries :: Python Modules',\n     ],\n     url='https://github.com/plone/plone.app.multilingual',\n@@ -47,6 +49,7 @@\n         'plone.behavior',\n         'plone.dexterity',\n         'setuptools',\n+        'six',\n         'z3c.relationfield',\n         'zope.publisher',\n     ],\n"

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-02T15:14:30-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/f4041212360ea58ed82940e335ce11f8acde499a

Merge branch 'master' into python3

Files changed:
M CHANGES.rst
M setup.py
M src/plone/app/multilingual/browser/modify.py
M src/plone/app/multilingual/manager.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2a08c7ba..6e093c40 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,7 @@\n Changelog\n =========\n \n-5.2.1 (unreleased)\n+5.2.4 (unreleased)\n ------------------\n \n Breaking changes:\n@@ -10,6 +10,27 @@ Breaking changes:\n \n New features:\n \n+- *add item here*\n+\n+Bug fixes:\n+\n+- *add item here*\n+\n+\n+5.2.3 (2018-09-26)\n+------------------\n+\n+Bug fixes:\n+\n+- Rerelease, as 5.2.1 was somehow released twice, once in June, once in September.\n+  [maurits]\n+\n+\n+5.2.2 (2018-09-25)\n+------------------\n+\n+New features:\n+\n - Make plone.app.controlpanel optional (no longer there in Plone 5.2).\n   [jensens]\n \n@@ -25,15 +46,24 @@ Bug fixes:\n   as it is intended to load old LRF there.\n   [jensens]\n \n-- Fixed tests now that Catalan has translated \'assets\' into \'recursos\'.\n-  [maurits]\n-\n - Don\'t fail, if multilingual selector is called without query\n   [tomgross]\n \n - Fix tests for py3\n   [pbauer]\n \n+- Fix connecting of documents\n+  [tomgross]\n+\n+\n+5.2.1 (2018-06-20)\n+------------------\n+\n+Bug fixes:\n+\n+- Fixed tests now that Catalan has translated \xe2\x80\x98assets\xe2\x80\x99 into \xe2\x80\x98recursos\xe2\x80\x99. \n+  [maurits]\n+\n \n 5.2.0 (2018-04-04)\n ------------------\ndiff --git a/setup.py b/setup.py\nold mode 100755\nnew mode 100644\nindex 2f49ed75..5ef04367\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n import os\n \n \n-version = \'5.2.1.dev0\'\n+version = \'5.2.4.dev0\'\n \n setup(\n     name=\'plone.app.multilingual\',\ndiff --git a/src/plone/app/multilingual/browser/modify.py b/src/plone/app/multilingual/browser/modify.py\nindex e76ffd1a..152545e5 100644\n--- a/src/plone/app/multilingual/browser/modify.py\n+++ b/src/plone/app/multilingual/browser/modify.py\n@@ -5,6 +5,7 @@\n from plone.autoform.form import AutoExtensibleForm\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.registry.interfaces import IRegistry\n+from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ILanguage\n from Products.Five.browser import BrowserView\n@@ -50,10 +51,13 @@ def handle_add(self, action):\n         if not errors:\n             content = data[\'content\']\n             language = data[\'language\']\n-            ITranslationManager(self.context)\\\n-                .register_translation(language, content)\n             ILanguage(content).set_language(language)\n-\n+            itm = ITranslationManager(self.context)\n+            # the \'register_translation\'-method takes content OR\n+            # UUID as second parameter. We need to use the UUID\n+            # here because otherwise the catalog can\'t be acquired\n+            # and the translation index is not updated\n+            itm.register_translation(language, IUUID(content))\n         return self.request.response.redirect(\n             self.context.absolute_url() + \'/modify_translations\')\n \ndiff --git a/src/plone/app/multilingual/manager.py b/src/plone/app/multilingual/manager.py\nindex 96932f0f..ee9467b1 100644\n--- a/src/plone/app/multilingual/manager.py\n+++ b/src/plone/app/multilingual/manager.py\n@@ -83,9 +83,8 @@ def register_translation(self, language, content):\n \n         # register the new translation in the canonical\n         IMutableTG(content_obj).set(self.tg)\n-        content_obj.reindexObject()\n-\n-        return\n+        content_obj.reindexObject(\n+            idxs=(\'Language\', \'TranslationGroup\'))\n \n     def update(self):\n         """ see interfaces"""\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-03T15:36:15+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/b1a2724ad970d2d2a049388111a0166e78ad2276

fix test in py2

Files changed:
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 13d5c932..187061a2 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -23,6 +23,7 @@\n from zope.lifecycleevent import ObjectModifiedEvent\n \n import transaction\n+import six\n import unittest\n \n \n@@ -623,8 +624,11 @@ def assertLanguagesPreserveQuery(self, policy):\n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n         # Here @@search isn\'t preserved because we\'ve got the dialog\n+        url = self.browser.url\n+        if six.PY2 and isinstance(url, six.binary_type):\n+            url = url.decode(\'utf8\')\n         self.assertUrlsEqual(\n-            self.browser.url,\n+            url,\n             untranslated_url[policy]\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-04T12:41:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/3486802e5e8033e201b789c037316497e33ab2b9

cleanup

Files changed:
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 187061a2..366bbbf0 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -22,13 +22,12 @@\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectModifiedEvent\n \n-import transaction\n import six\n+import transaction\n import unittest\n \n \n class EvilObject(object):\n-\n     def __str__(self):\n         raise UnicodeError\n \n@@ -36,8 +35,9 @@ def __unicode__(self):\n         raise UnicodeError\n \n \n-SELECTOR_VIEW_TEMPLATE =\\\n+SELECTOR_VIEW_TEMPLATE = (\n     \'%(url)s/@@multilingual-selector/%(tg)s/%(lang)s%(query)s\'\n+)\n \n \n class TestLanguageSelectorBasics(unittest.TestCase):\n@@ -56,35 +56,41 @@ def setUp(self):\n         self.browser.handleErrors = False\n \n     def test_selector_viewlet_is_available(self):\n-        selector_viewlet = \\\n-            LanguageSelectorViewlet(self.portal, self.request, None, None)\n+        selector_viewlet = LanguageSelectorViewlet(\n+            self.portal, self.request, None, None\n+        )\n         selector_viewlet.update()\n         self.assertTrue(selector_viewlet.available())\n \n     def test_selector_viewlet_is_available_but_tool_is_not(self):\n-        selector_viewlet = \\\n-            LanguageSelectorViewlet(self.portal, self.request, None, None)\n+        selector_viewlet = LanguageSelectorViewlet(\n+            self.portal, self.request, None, None\n+        )\n         selector_viewlet.update()\n         selector_viewlet.tool = None\n         self.assertFalse(selector_viewlet.available())\n \n     def test_selector_data_not_modified_by_viewlet(self):\n-        selector_viewlet = \\\n-            LanguageSelectorViewlet(self.portal, self.request, None, None)\n+        selector_viewlet = LanguageSelectorViewlet(\n+            self.portal, self.request, None, None\n+        )\n         selector_viewlet.update()\n         selector_viewlet_languages = selector_viewlet.languages()\n \n-        selector_adapter = \\\n-            LanguageSelector(self.portal, self.request, None, None)\n+        selector_adapter = LanguageSelector(\n+            self.portal, self.request, None, None\n+        )\n         selector_adapter.update()\n         selector_adapter_languages = selector_adapter.languages()\n \n-        self.assertNotEquals(selector_adapter_languages,\n-                             selector_viewlet_languages)\n+        self.assertNotEquals(\n+            selector_adapter_languages, selector_viewlet_languages\n+        )\n \n     def assertFullyTranslatedPages(self):\n         a = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u"Test document")\n+            self.portal[\'en\'], \'Document\', title=u"Test document"\n+        )\n \n         a_ca = api.translate(a, \'ca\')\n         a_ca.setTitle(u"Test Document (CA)")\n@@ -101,74 +107,87 @@ def assertFullyTranslatedPages(self):\n         notify(ObjectModifiedEvent(a_ca))\n         notify(ObjectModifiedEvent(a_es))\n \n-        selector_viewlet =\\\n-            LanguageSelectorViewlet(a, self.request, None, None)\n+        selector_viewlet = LanguageSelectorViewlet(a, self.request, None, None)\n         selector_viewlet.update()\n         selector_viewlet_languages = selector_viewlet.languages()\n \n-        self.assertEqual(selector_viewlet_languages, [{\n-            \'code\': u\'en\',\n-            u\'flag\': u\'/++resource++country-flags/gb.gif\',\n-            u\'name\': u\'English\',\n-            u\'native\': u\'English\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal_url,\n-                \'tg\': ITG(a),\n-                \'lang\': \'en\',\n-                \'query\': \'?set_language=en\'\n-            },\n-            \'selected\': True,\n-            \'translated\': True,\n-        }, {\n-            \'code\': u\'ca\',\n-            u\'flag\': u\'/++resource++language-flags/ca.gif\',\n-            u\'name\': u\'Catalan\',\n-            u\'native\': u\'Catal\\xe0\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal_url,\n-                \'tg\': ITG(a),\n-                \'lang\': \'ca\',\n-                \'query\': \'?set_language=ca\'\n-            },\n-            \'selected\': False,\n-            \'translated\': True,\n-        }, {\n-            \'code\': u\'es\',\n-            u\'flag\': u\'/++resource++country-flags/es.gif\',\n-            u\'name\': u\'Spanish\',\n-            u\'native\': u\'Espa\\xf1ol\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal_url,\n-                \'tg\': ITG(a),\n-                \'lang\': \'es\',\n-                \'query\': \'?set_language=es\'\n-            },\n-            \'selected\': False,\n-            \'translated\': True,\n-        }])\n+        self.assertEqual(\n+            selector_viewlet_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal_url,\n+                        \'tg\': ITG(a),\n+                        \'lang\': \'en\',\n+                        \'query\': \'?set_language=en\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal_url,\n+                        \'tg\': ITG(a),\n+                        \'lang\': \'ca\',\n+                        \'query\': \'?set_language=ca\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal_url,\n+                        \'tg\': ITG(a),\n+                        \'lang\': \'es\',\n+                        \'query\': \'?set_language=es\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n \n         transaction.commit()\n \n         self.browser.open(selector_viewlet_languages[0][\'url\'])\n-        self.assertEqual(self.browser.url,\n-                         a.absolute_url() + \'?set_language=en\')\n+        self.assertEqual(\n+            self.browser.url, a.absolute_url() + \'?set_language=en\'\n+        )\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         self.browser.open(selector_viewlet_languages[1][\'url\'])\n-        self.assertEqual(self.browser.url,\n-                         a_ca.absolute_url() + \'?set_language=ca\')\n+        self.assertEqual(\n+            self.browser.url, a_ca.absolute_url() + \'?set_language=ca\'\n+        )\n \n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         self.browser.open(selector_viewlet_languages[2][\'url\'])\n-        self.assertEqual(self.browser.url,\n-                         a_es.absolute_url() + \'?set_language=es\')\n+        self.assertEqual(\n+            self.browser.url, a_es.absolute_url() + \'?set_language=es\'\n+        )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_fully_translated_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.assertFullyTranslatedPages()\n@@ -176,7 +195,8 @@ def test_languages_fully_translated_by_closest(self):\n     def test_languages_fully_translated_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         self.assertFullyTranslatedPages()\n@@ -185,12 +205,15 @@ def setUpPartiallyTranslatedContent(self):\n         wftool = getToolByName(self.portal, \'portal_workflow\')\n \n         f_en = createContentInContainer(\n-            self.portal[\'en\'], \'Folder\', title=u"Test folder")\n+            self.portal[\'en\'], \'Folder\', title=u"Test folder"\n+        )\n         wftool.doActionFor(f_en, \'publish\')\n \n         a_en = createContentInContainer(\n-            self.portal[\'en\'][\'test-folder\'], \'Document\',\n-            title=u"Test document")\n+            self.portal[\'en\'][\'test-folder\'],\n+            \'Document\',\n+            title=u"Test document",\n+        )\n         wftool.doActionFor(a_en, \'publish\')\n \n         f_ca = api.translate(f_en, \'ca\')\n@@ -205,17 +228,18 @@ def setUpFullyTranslatedContent(self):\n         self.setUpPartiallyTranslatedContent()\n \n         a_ca = api.translate(\n-            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'ca\')\n+            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'ca\'\n+        )\n         a_ca.setTitle(u"Test document CA")\n         wftool.doActionFor(a_ca, \'publish\')\n \n-        f_es = api.translate(\n-            self.portal[\'en\'][\'test-folder\'], \'es\')\n+        f_es = api.translate(self.portal[\'en\'][\'test-folder\'], \'es\')\n         f_es.setTitle(u"Test folder ES")\n         wftool.doActionFor(f_es, \'publish\')\n \n         a_es = api.translate(\n-            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'es\')\n+            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'es\'\n+        )\n         a_es.setTitle(u"Test document ES")\n         wftool.doActionFor(a_es, \'publish\')\n \n@@ -225,13 +249,15 @@ def test_languages_untranslated_by_closest(self):\n         # Define selector policy\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         wftool = getToolByName(self.portal, "portal_workflow")\n \n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal[\'ca\'], \'Document\', title=u"Test document"\n+        )\n         a_ca.setLanguage(\'ca\')\n         wftool.doActionFor(a_ca, \'publish\')\n \n@@ -261,7 +287,8 @@ def test_languages_untranslated_by_closest(self):\n     def test_languages_partially_translated_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         # Setup content\n@@ -277,8 +304,7 @@ def test_languages_partially_translated_by_closest(self):\n         # Check that EN translation is found\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n-            self.browser.url,\n-            a_en.absolute_url() + \'?set_language=en\'\n+            self.browser.url, a_en.absolute_url() + \'?set_language=en\'\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n         # But extra check, because English is the default?\n@@ -288,8 +314,7 @@ def test_languages_partially_translated_by_closest(self):\n         # is found\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n-            self.browser.url,\n-            f_ca.absolute_url() + \'?set_language=ca\'\n+            self.browser.url, f_ca.absolute_url() + \'?set_language=ca\'\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n@@ -297,14 +322,15 @@ def test_languages_partially_translated_by_closest(self):\n         self.browser.open(selector_languages[2][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal[\'es\'].absolute_url() + \'?set_language=es\'\n+            self.portal[\'es\'].absolute_url() + \'?set_language=es\',\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_partially_translated_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         # Setup content\n@@ -319,8 +345,7 @@ def test_languages_partially_translated_by_dialog(self):\n         # Check that EN translation is found\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n-            self.browser.url,\n-            a_en.absolute_url()+\'?set_language=en\'\n+            self.browser.url, a_en.absolute_url() + \'?set_language=en\'\n         )\n         # But extra check, because English is the default?\n         self.assertIn(\'lang="en"\', self.browser.contents)\n@@ -332,9 +357,11 @@ def test_languages_partially_translated_by_dialog(self):\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.absolute_url() +\n-            NOT_TRANSLATED_YET_TEMPLATE +\n-            \'/\' + tgid + \'?set_language=ca\'\n+            self.portal.absolute_url()\n+            + NOT_TRANSLATED_YET_TEMPLATE\n+            + \'/\'\n+            + tgid\n+            + \'?set_language=ca\',\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n@@ -342,15 +369,18 @@ def test_languages_partially_translated_by_dialog(self):\n         self.browser.open(selector_languages[2][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.absolute_url() +\n-            NOT_TRANSLATED_YET_TEMPLATE +\n-            \'/\' + tgid + \'?set_language=es\'\n+            self.portal.absolute_url()\n+            + NOT_TRANSLATED_YET_TEMPLATE\n+            + \'/\'\n+            + tgid\n+            + \'?set_language=es\',\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def assertSiteRoot(self):\n         self.selector_viewlet = LanguageSelectorViewlet(\n-            self.portal, self.request, None, None)\n+            self.portal, self.request, None, None\n+        )\n         self.selector_viewlet.update()\n         selector_languages = self.selector_viewlet.languages()\n \n@@ -359,8 +389,10 @@ def assertSiteRoot(self):\n         # Check EN root\n         self.assertEqual(\n             selector_languages[0][\'url\'],\n-            (self.portal.absolute_url() +\n-             \'/@@multilingual-selector/notg/en?set_language=en\')\n+            (\n+                self.portal.absolute_url()\n+                + \'/@@multilingual-selector/notg/en?set_language=en\'\n+            ),\n         )\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertIn(\'lang="en"\', self.browser.contents)\n@@ -369,8 +401,10 @@ def assertSiteRoot(self):\n         # Check CA root\n         self.assertEqual(\n             selector_languages[1][\'url\'],\n-            (self.portal.absolute_url() +\n-             \'/@@multilingual-selector/notg/ca?set_language=ca\')\n+            (\n+                self.portal.absolute_url()\n+                + \'/@@multilingual-selector/notg/ca?set_language=ca\'\n+            ),\n         )\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n@@ -379,15 +413,18 @@ def assertSiteRoot(self):\n         self.browser.open(selector_languages[2][\'url\'])\n         self.assertEqual(\n             selector_languages[2][\'url\'],\n-            (self.portal.absolute_url() +\n-             \'/@@multilingual-selector/notg/es?set_language=es\')\n+            (\n+                self.portal.absolute_url()\n+                + \'/@@multilingual-selector/notg/es?set_language=es\'\n+            ),\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_siteroot_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.assertSiteRoot()\n@@ -395,65 +432,77 @@ def test_siteroot_by_closest(self):\n     def test_siteroot_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         self.assertSiteRoot()\n \n     def assertRootFolders(self):\n         self.selector_viewlet = LanguageSelectorViewlet(\n-            self.portal[\'en\'], self.request, None, None)\n+            self.portal[\'en\'], self.request, None, None\n+        )\n         self.selector_viewlet.update()\n \n         selector_languages = self.selector_viewlet.languages()\n         tg = ITG(self.portal[\'en\'])\n \n-        self.assertEqual(selector_languages, [{\n-            \'code\': u\'en\',\n-            u\'flag\': u\'/++resource++country-flags/gb.gif\',\n-            u\'name\': u\'English\',\n-            u\'native\': u\'English\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal.absolute_url(),\n-                \'tg\': tg,\n-                \'lang\': \'en\',\n-                \'query\': \'?set_language=en\'\n-            },\n-            \'selected\': True,\n-            \'translated\': True,\n-        }, {\n-            \'code\': u\'ca\',\n-            u\'flag\': u\'/++resource++language-flags/ca.gif\',\n-            u\'name\': u\'Catalan\',\n-            u\'native\': u\'Catal\\xe0\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal.absolute_url(),\n-                \'tg\': tg,\n-                \'lang\': \'ca\',\n-                \'query\': \'?set_language=ca\'\n-            },\n-            \'selected\': False,\n-            \'translated\': True,\n-        }, {\n-            \'code\': u\'es\',\n-            u\'flag\': u\'/++resource++country-flags/es.gif\',\n-            u\'name\': u\'Spanish\',\n-            u\'native\': u\'Espa\\xf1ol\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal.absolute_url(),\n-                \'tg\': tg,\n-                \'lang\': \'es\',\n-                \'query\': \'?set_language=es\'\n-            },\n-            \'selected\': False,\n-            \'translated\': True,\n-        }])\n+        self.assertEqual(\n+            selector_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'en\',\n+                        \'query\': \'?set_language=en\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'ca\',\n+                        \'query\': \'?set_language=ca\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'es\',\n+                        \'query\': \'?set_language=es\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n \n         # Check EN\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal[\'en\'].absolute_url()+\'?set_language=en\'\n+            self.portal[\'en\'].absolute_url() + \'?set_language=en\',\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n@@ -462,7 +511,7 @@ def assertRootFolders(self):\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.ca.absolute_url()+\'?set_language=ca\'\n+            self.portal.ca.absolute_url() + \'?set_language=ca\',\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n@@ -470,14 +519,15 @@ def assertRootFolders(self):\n         self.browser.open(selector_languages[2][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.es.absolute_url()+\'?set_language=es\'\n+            self.portal.es.absolute_url() + \'?set_language=es\',\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_root_folders_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         self.assertRootFolders()\n@@ -485,7 +535,8 @@ def test_languages_root_folders_by_dialog(self):\n     def test_languages_root_folders_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.assertRootFolders()\n@@ -493,7 +544,8 @@ def test_languages_root_folders_by_closest(self):\n     def test_languages_preserve_view(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.setUpPartiallyTranslatedContent()\n@@ -514,7 +566,7 @@ def test_languages_preserve_view(self):\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            f_en.absolute_url()+\'/contact-info?set_language=en\'\n+            f_en.absolute_url() + \'/contact-info?set_language=en\',\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n@@ -523,7 +575,7 @@ def test_languages_preserve_view(self):\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            f_ca.absolute_url()+\'/contact-info?set_language=ca\'\n+            f_ca.absolute_url() + \'/contact-info?set_language=ca\',\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n@@ -532,14 +584,15 @@ def test_languages_preserve_view(self):\n         # Here @@search isn\'t preserved because we\'ve gone up a level\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.es.absolute_url()+\'?set_language=es\'\n+            self.portal.es.absolute_url() + \'?set_language=es\',\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n         # Shouldn\'t do for the not-translated-yet thingie when dialog is on\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         selector = LanguageSelectorViewlet(f_en, self.request, None, None)\n@@ -552,7 +605,7 @@ def test_languages_preserve_view(self):\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            f_en.absolute_url()+\'/contact-info?set_language=en\'\n+            f_en.absolute_url() + \'/contact-info?set_language=en\',\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n@@ -561,7 +614,7 @@ def test_languages_preserve_view(self):\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            f_ca.absolute_url()+\'/contact-info?set_language=ca\'\n+            f_ca.absolute_url() + \'/contact-info?set_language=ca\',\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n@@ -571,9 +624,11 @@ def test_languages_preserve_view(self):\n         tgid = selector_languages[2][\'url\'].split(\'/\')[-3]\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.absolute_url() +\n-            NOT_TRANSLATED_YET_TEMPLATE +\n-            \'/\' + tgid + \'?set_language=es\'\n+            self.portal.absolute_url()\n+            + NOT_TRANSLATED_YET_TEMPLATE\n+            + \'/\'\n+            + tgid\n+            + \'?set_language=es\',\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n@@ -593,11 +648,17 @@ def assertLanguagesPreserveQuery(self, policy):\n \n         tgid = selector_languages[2][\'url\'].split(\'/\')[-3]\n         untranslated_url = {\n-            \'closest\': (self.portal[\'es\'].absolute_url() +\n-                        \'?int=1&uni=pres%C3%98rved&set_language=es\'),\n-            \'dialog\': (self.portal.absolute_url() +\n-                       NOT_TRANSLATED_YET_TEMPLATE + \'/\' + tgid +\n-                       \'?int=1&uni=pres%C3%98rved&set_language=es\')\n+            \'closest\': (\n+                self.portal[\'es\'].absolute_url()\n+                + \'?int=1&uni=pres%C3%98rved&set_language=es\'\n+            ),\n+            \'dialog\': (\n+                self.portal.absolute_url()\n+                + NOT_TRANSLATED_YET_TEMPLATE\n+                + \'/\'\n+                + tgid\n+                + \'?int=1&uni=pres%C3%98rved&set_language=es\'\n+            ),\n         }\n \n         transaction.commit()\n@@ -606,8 +667,10 @@ def assertLanguagesPreserveQuery(self, policy):\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertUrlsEqual(\n             self.browser.url,\n-            (f_en.absolute_url() +\n-             \'/contact-info?int=1&uni=pres%C3%98rved&set_language=en\')\n+            (\n+                f_en.absolute_url()\n+                + \'/contact-info?int=1&uni=pres%C3%98rved&set_language=en\'\n+            ),\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n@@ -616,8 +679,10 @@ def assertLanguagesPreserveQuery(self, policy):\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertUrlsEqual(\n             self.browser.url,\n-            (f_ca.absolute_url() +\n-             \'/contact-info?int=1&uni=pres%C3%98rved&set_language=ca\')\n+            (\n+                f_ca.absolute_url()\n+                + \'/contact-info?int=1&uni=pres%C3%98rved&set_language=ca\'\n+            ),\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n@@ -627,16 +692,14 @@ def assertLanguagesPreserveQuery(self, policy):\n         url = self.browser.url\n         if six.PY2 and isinstance(url, six.binary_type):\n             url = url.decode(\'utf8\')\n-        self.assertUrlsEqual(\n-            url,\n-            untranslated_url[policy]\n-        )\n+        self.assertUrlsEqual(url, untranslated_url[policy])\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_preserve_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.assertLanguagesPreserveQuery(\'closest\')\n@@ -644,7 +707,8 @@ def test_languages_preserve_by_closest(self):\n     def test_languages_preserve_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         self.assertLanguagesPreserveQuery(\'dialog\')\n@@ -733,73 +797,62 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         self.portal = self.layer[\'portal\']\n         self.folder = createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Folder")\n+            self.portal[\'ca\'], \'Folder\', title=u"Folder"\n+        )\n         self.document = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Document")\n+            self.portal[\'ca\'], \'Document\', title=u"Document"\n+        )\n         self.request = self.layer[\'request\']\n \n     def test_findpath(self):\n         self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/whatever\'\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever\'\n-        )\n+        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n \n     def test_findpath_match(self):\n         self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document\'\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'\'\n-        )\n+        self.assertEqual(getPostPath(self.document, self.request), \'\')\n \n     def test_findpath_match_slash(self):\n         self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/\'\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'\'\n-        )\n+        self.assertEqual(getPostPath(self.document, self.request), \'\')\n \n     def test_findpath_template(self):\n-        self.request[\'PATH_INFO\'] = (\'/plone/ca/folder/document/\'\n-                                     \'whatever/foo/edit\')\n+        self.request[\'PATH_INFO\'] = (\n+            \'/plone/ca/folder/document/\' \'whatever/foo/edit\'\n+        )\n         self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever/foo/edit\'\n+            getPostPath(self.document, self.request), \'/whatever/foo/edit\'\n         )\n \n     def test_findpath_view(self):\n         self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/contact-info\'\n         self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/contact-info\'\n+            getPostPath(self.document, self.request), \'/contact-info\'\n         )\n \n     def test_findpath_vhr(self):\n-        self.request[\'PATH_INFO\'] = (\'/VirtualHostBase/http/127.0.0.1\'\n-                                     \'/plone/ca/folder/document/\'\n-                                     \'VirtualHostRoot/whatever\')\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever\'\n+        self.request[\'PATH_INFO\'] = (\n+            \'/VirtualHostBase/http/127.0.0.1\'\n+            \'/plone/ca/folder/document/\'\n+            \'VirtualHostRoot/whatever\'\n         )\n+        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n \n     def test_findpath_vh_marker(self):\n-        self.request[\'PATH_INFO\'] = (\'/VirtualHostBase/http/127.0.0.1\'\n-                                     \'/plone/ca/folder/document/\'\n-                                     \'VirtualHostRoot/_vh_foo/whatever\')\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever\'\n+        self.request[\'PATH_INFO\'] = (\n+            \'/VirtualHostBase/http/127.0.0.1\'\n+            \'/plone/ca/folder/document/\'\n+            \'VirtualHostRoot/_vh_foo/whatever\'\n         )\n+        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n \n     def test_findpath_vhr_and_traverser(self):\n-        self.request[\'PATH_INFO\'] = (\'/VirtualHostBase/http/127.0.0.1\'\n-                                     \'/plone/ca/folder/document/++theme++foo/\'\n-                                     \'VirtualHostRoot/whatever\')\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever\'\n+        self.request[\'PATH_INFO\'] = (\n+            \'/VirtualHostBase/http/127.0.0.1\'\n+            \'/plone/ca/folder/document/++theme++foo/\'\n+            \'VirtualHostRoot/whatever\'\n         )\n+        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n \n \n class TestLanguageSelectorAddQuery(unittest.TestCase):\n@@ -815,16 +868,15 @@ def test_formvariables(self):\n         self.request.form[\'one\'] = 1\n         self.request.form[\'two\'] = 2\n         self.assertUrlsEqual(\n-            addQuery(self.request, self.url),\n-            self.url+\'?two:int=2&one:int=1\'\n+            addQuery(self.request, self.url), self.url + \'?two:int=2&one:int=1\'\n         )\n \n     def test_formvariables_sequences(self):\n-        self.request.form[\'one\'] = (\'a\', )\n+        self.request.form[\'one\'] = (\'a\',)\n         self.request.form[\'two\'] = [\'b\', 2]\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url+\'?two:list=b&two:int:list=2&one=%28%27a%27%2C%29\'\n+            self.url + \'?two:list=b&two:int:list=2&one=%28%27a%27%2C%29\',\n         )\n \n     def test_formvariables_unicode(self):\n@@ -832,7 +884,7 @@ def test_formvariables_unicode(self):\n         self.request.form[\'two\'] = u\'foo\'\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url+\'?two=foo&one=F%C3%B8r\'\n+            self.url + \'?two=foo&one=F%C3%B8r\',\n         )\n \n     def test_formvariables_utf8(self):\n@@ -840,23 +892,20 @@ def test_formvariables_utf8(self):\n         self.request.form[\'two\'] = u\'foo\'\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url+\'?two=foo&one=F%C3%B8r\'\n+            self.url + \'?two=foo&one=F%C3%B8r\',\n         )\n \n     def test_formvariables_object(self):\n         self.request.form[\'one\'] = \'1\'\n         self.request.form[\'two\'] = EvilObject()\n-        self.assertUrlsEqual(\n-            addQuery(self.request, self.url),\n-            self.url\n-        )\n+        self.assertUrlsEqual(addQuery(self.request, self.url), self.url)\n \n     def test_formvariables_exclude(self):\n         self.request.form[\'one\'] = 1\n         self.request.form[\'two\'] = 2\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url, exclude=(\'two\',)),\n-            self.url+\'?one:int=1\'\n+            self.url + \'?one:int=1\',\n         )\n \n     def test_formvariables_extras(self):\n@@ -864,7 +913,7 @@ def test_formvariables_extras(self):\n         self.request.form[\'two\'] = 2\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url, three=3),\n-            self.url+\'?one:int=1&three:int=3&two:int=2\'\n+            self.url + \'?one:int=1&three:int=3&two:int=2\',\n         )\n \n     def assertUrlsEqual(self, url1, url2):\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-04T12:54:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/3406c7ae6e4dc034ee1624e2127e2a2f6b74d2c7

fix problem compring urls comingin as unicode and bytes

Files changed:
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 366bbbf0..31a568ef 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -15,6 +15,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_nativestring\n from six.moves.urllib.parse import parse_qs\n from six.moves.urllib.parse import urlparse\n from zope.component import getUtility\n@@ -778,9 +779,9 @@ def assertUrlsEqual(self, url1, url2):\n         """The order of query-strings is sometimes random in python 3\n         This compares urls disregarding the order.\n         """\n-        parsed_url_1 = urlparse(url1)\n+        parsed_url_1 = urlparse(safe_nativestring(url1))\n         parse_qs_1 = parse_qs(parsed_url_1.query)\n-        parsed_url_2 = urlparse(url2)\n+        parsed_url_2 = urlparse(safe_nativestring(url2))\n         parse_qs_2 = parse_qs(parsed_url_2.query)\n         self.assertEqual(parsed_url_1[0], parsed_url_2[0])\n         self.assertEqual(parsed_url_1[1], parsed_url_2[1])\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-11T16:49:23+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/1a968c0bc2dae2e02eb7ceb20bf1a8f0ea037083

make screenshot to debug test that only fails on jenkins

Files changed:
M src/plone/app/multilingual/tests/robot/test_schemaeditor.robot

b'diff --git a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\nindex 9b35c5ab..ec9169cc 100644\n--- a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n@@ -63,6 +63,7 @@ a dexterity content type with a language independent TTW field\n \n I open the field settings\n   Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n+  Capture page screenshot\n   Page should contain  Language independent field\n \n I select the language independent field setting\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-11T18:47:11+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/8e6727e6af103888c6b2c3d3c5a99ff604f46d76

add more screenshots to rule out the more obvious causes

Files changed:
M src/plone/app/multilingual/tests/robot/test_schemaeditor.robot

b'diff --git a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\nindex ec9169cc..d49e93e8 100644\n--- a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n@@ -62,6 +62,10 @@ a dexterity content type with a language independent TTW field\n # When\n \n I open the field settings\n+  Go to  ${PLONE_URL}/dexterity-types/Custom/@@modeleditor\n+  Capture page screenshot\n+  Go to  ${PLONE_URL}/portal_types/Custom/manage_propertiesForm\n+  Capture page screenshot\n   Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n   Capture page screenshot\n   Page should contain  Language independent field\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-11T22:22:53+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/7b1ffbb555983798cfded5e73b8626fc245f19d6

remove debug code

Files changed:
M src/plone/app/multilingual/tests/robot/test_schemaeditor.robot

b'diff --git a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\nindex d49e93e8..9b35c5ab 100644\n--- a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n@@ -62,12 +62,7 @@ a dexterity content type with a language independent TTW field\n # When\n \n I open the field settings\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/@@modeleditor\n-  Capture page screenshot\n-  Go to  ${PLONE_URL}/portal_types/Custom/manage_propertiesForm\n-  Capture page screenshot\n   Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n-  Capture page screenshot\n   Page should contain  Language independent field\n \n I select the language independent field setting\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-11T22:23:51+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/6af53c49cedd4cf076204b59f7fcd77de41fa214

add hack to work around https://github.com/plone/Products.CMFPlone/issues/2589

Files changed:
M src/plone/app/multilingual/testing.py

b"diff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py\nindex e6e26166..deeb7c6c 100644\n--- a/src/plone/app/multilingual/testing.py\n+++ b/src/plone/app/multilingual/testing.py\n@@ -128,6 +128,18 @@ def setUpPloneSite(self, portal):\n         if 'robot-test-folder' in portal.objectIds():\n             portal.manage_delObjects('robot-test-folder')\n \n+        # PLEASE DELETE ME!\n+        # I am a ugly hack to work around\n+        # https://github.com/plone/Products.CMFPlone/issues/2589\n+        # until it is solved properly.\n+        from plone.app.multilingual.dx.schemaeditor import get_li_schema\n+        from plone.schemaeditor.interfaces import IFieldEditorExtender\n+        from zope.component import provideAdapter\n+        provideAdapter(\n+            get_li_schema,\n+            provides=IFieldEditorExtender,\n+            name='plone.schemaeditor.languageindependent')\n+\n \n PLONE_APP_MULTILINGUAL_PRESET_FIXTURE = PloneAppMultiLingualPresetLayer()\n \n"

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2018-10-17T10:47:39+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/14f117a5259fe533bd26ae926e73000a93bd2fee

Merge pull request #314 from plone/python3

Python3

Files changed:
M CHANGES.rst
M setup.py
M src/plone/app/multilingual/browser/selector.py
M src/plone/app/multilingual/dx/cloner.py
M src/plone/app/multilingual/testing.py
M src/plone/app/multilingual/tests/test_selector.py
M src/plone/app/multilingual/tests/test_sitemap.py
M src/plone/app/multilingual/tests/test_uninstall.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 023858ce..6e093c40 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -34,6 +34,9 @@ New features:\n - Make plone.app.controlpanel optional (no longer there in Plone 5.2).\n   [jensens]\n \n+- Add compatability with python 3\n+  [pbauer]\n+\n Bug fixes:\n \n - Upgrade step to profile version 3 was lost and now recreated.\n@@ -46,6 +49,9 @@ Bug fixes:\n - Don\'t fail, if multilingual selector is called without query\n   [tomgross]\n \n+- Fix tests for py3\n+  [pbauer]\n+\n - Fix connecting of documents\n   [tomgross]\n \n@@ -55,7 +61,8 @@ Bug fixes:\n \n Bug fixes:\n \n-- Fixed tests now that Catalan has translated \xe2\x80\x98assets\xe2\x80\x99 into \xe2\x80\x98recursos\xe2\x80\x99. [maurits]\n+- Fixed tests now that Catalan has translated \xe2\x80\x98assets\xe2\x80\x99 into \xe2\x80\x98recursos\xe2\x80\x99. \n+  [maurits]\n \n \n 5.2.0 (2018-04-04)\ndiff --git a/setup.py b/setup.py\nindex 5cee7881..5ef04367 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,6 +25,8 @@\n         \'License :: OSI Approved :: GNU General Public License (GPL)\',\n         \'Programming Language :: Python\',\n         \'Programming Language :: Python :: 2.7\',\n+        \'Programming Language :: Python :: 3.6\',\n+        \'Programming Language :: Python :: 3.7\',\n         \'Topic :: Software Development :: Libraries :: Python Modules\',\n     ],\n     url=\'https://github.com/plone/plone.app.multilingual\',\n@@ -47,6 +49,7 @@\n         \'plone.behavior\',\n         \'plone.dexterity\',\n         \'setuptools\',\n+        \'six\',\n         \'z3c.relationfield\',\n         \'zope.publisher\',\n     ],\ndiff --git a/src/plone/app/multilingual/browser/selector.py b/src/plone/app/multilingual/browser/selector.py\nindex 2f0ac192..4335ae08 100644\n--- a/src/plone/app/multilingual/browser/selector.py\n+++ b/src/plone/app/multilingual/browser/selector.py\n@@ -16,12 +16,12 @@ def addQuery(request, url, exclude=tuple(), **extras):\n     formvariables = {}\n     for k, v in request.form.items():\n         if k not in exclude:\n-            if isinstance(v, six.text_type):\n+            if six.PY2 and isinstance(v, six.text_type):\n                 formvariables[k] = v.encode(\'utf-8\')\n             else:\n                 formvariables[k] = v\n     for k, v in extras.items():\n-        if isinstance(v, six.text_type):\n+        if six.PY2 and isinstance(v, six.text_type):\n             formvariables[k] = v.encode(\'utf-8\')\n         else:\n             formvariables[k] = v\ndiff --git a/src/plone/app/multilingual/dx/cloner.py b/src/plone/app/multilingual/dx/cloner.py\nindex fec1ac19..f5c489e9 100644\n--- a/src/plone/app/multilingual/dx/cloner.py\n+++ b/src/plone/app/multilingual/dx/cloner.py\n@@ -75,7 +75,7 @@ def relation_copier(rel, lang=target_language, fun=self.copy_relation):\n                     elif IRelationValue.providedBy(value):\n                         value = self.copy_relation(value, target_language)\n                     elif IRelationList.providedBy(schema[field_name]):\n-                        value = map(relation_copier, value or [])\n+                        value = list(map(relation_copier, value or []))\n \n                     doomed = True\n                     setattr(schema(translation),\ndiff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py\nindex e6e26166..deeb7c6c 100644\n--- a/src/plone/app/multilingual/testing.py\n+++ b/src/plone/app/multilingual/testing.py\n@@ -128,6 +128,18 @@ def setUpPloneSite(self, portal):\n         if \'robot-test-folder\' in portal.objectIds():\n             portal.manage_delObjects(\'robot-test-folder\')\n \n+        # PLEASE DELETE ME!\n+        # I am a ugly hack to work around\n+        # https://github.com/plone/Products.CMFPlone/issues/2589\n+        # until it is solved properly.\n+        from plone.app.multilingual.dx.schemaeditor import get_li_schema\n+        from plone.schemaeditor.interfaces import IFieldEditorExtender\n+        from zope.component import provideAdapter\n+        provideAdapter(\n+            get_li_schema,\n+            provides=IFieldEditorExtender,\n+            name=\'plone.schemaeditor.languageindependent\')\n+\n \n PLONE_APP_MULTILINGUAL_PRESET_FIXTURE = PloneAppMultiLingualPresetLayer()\n \ndiff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 27630443..31a568ef 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -15,17 +15,20 @@\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_nativestring\n+from six.moves.urllib.parse import parse_qs\n+from six.moves.urllib.parse import urlparse\n from zope.component import getUtility\n from zope.event import notify\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectModifiedEvent\n \n+import six\n import transaction\n import unittest\n \n \n class EvilObject(object):\n-\n     def __str__(self):\n         raise UnicodeError\n \n@@ -33,8 +36,9 @@ def __unicode__(self):\n         raise UnicodeError\n \n \n-SELECTOR_VIEW_TEMPLATE =\\\n+SELECTOR_VIEW_TEMPLATE = (\n     \'%(url)s/@@multilingual-selector/%(tg)s/%(lang)s%(query)s\'\n+)\n \n \n class TestLanguageSelectorBasics(unittest.TestCase):\n@@ -53,35 +57,41 @@ def setUp(self):\n         self.browser.handleErrors = False\n \n     def test_selector_viewlet_is_available(self):\n-        selector_viewlet = \\\n-            LanguageSelectorViewlet(self.portal, self.request, None, None)\n+        selector_viewlet = LanguageSelectorViewlet(\n+            self.portal, self.request, None, None\n+        )\n         selector_viewlet.update()\n         self.assertTrue(selector_viewlet.available())\n \n     def test_selector_viewlet_is_available_but_tool_is_not(self):\n-        selector_viewlet = \\\n-            LanguageSelectorViewlet(self.portal, self.request, None, None)\n+        selector_viewlet = LanguageSelectorViewlet(\n+            self.portal, self.request, None, None\n+        )\n         selector_viewlet.update()\n         selector_viewlet.tool = None\n         self.assertFalse(selector_viewlet.available())\n \n     def test_selector_data_not_modified_by_viewlet(self):\n-        selector_viewlet = \\\n-            LanguageSelectorViewlet(self.portal, self.request, None, None)\n+        selector_viewlet = LanguageSelectorViewlet(\n+            self.portal, self.request, None, None\n+        )\n         selector_viewlet.update()\n         selector_viewlet_languages = selector_viewlet.languages()\n \n-        selector_adapter = \\\n-            LanguageSelector(self.portal, self.request, None, None)\n+        selector_adapter = LanguageSelector(\n+            self.portal, self.request, None, None\n+        )\n         selector_adapter.update()\n         selector_adapter_languages = selector_adapter.languages()\n \n-        self.assertNotEquals(selector_adapter_languages,\n-                             selector_viewlet_languages)\n+        self.assertNotEquals(\n+            selector_adapter_languages, selector_viewlet_languages\n+        )\n \n     def assertFullyTranslatedPages(self):\n         a = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u"Test document")\n+            self.portal[\'en\'], \'Document\', title=u"Test document"\n+        )\n \n         a_ca = api.translate(a, \'ca\')\n         a_ca.setTitle(u"Test Document (CA)")\n@@ -98,74 +108,87 @@ def assertFullyTranslatedPages(self):\n         notify(ObjectModifiedEvent(a_ca))\n         notify(ObjectModifiedEvent(a_es))\n \n-        selector_viewlet =\\\n-            LanguageSelectorViewlet(a, self.request, None, None)\n+        selector_viewlet = LanguageSelectorViewlet(a, self.request, None, None)\n         selector_viewlet.update()\n         selector_viewlet_languages = selector_viewlet.languages()\n \n-        self.assertEqual(selector_viewlet_languages, [{\n-            \'code\': u\'en\',\n-            u\'flag\': u\'/++resource++country-flags/gb.gif\',\n-            u\'name\': u\'English\',\n-            u\'native\': u\'English\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal_url,\n-                \'tg\': ITG(a),\n-                \'lang\': \'en\',\n-                \'query\': \'?set_language=en\'\n-            },\n-            \'selected\': True,\n-            \'translated\': True,\n-        }, {\n-            \'code\': u\'ca\',\n-            u\'flag\': u\'/++resource++language-flags/ca.gif\',\n-            u\'name\': u\'Catalan\',\n-            u\'native\': u\'Catal\\xe0\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal_url,\n-                \'tg\': ITG(a),\n-                \'lang\': \'ca\',\n-                \'query\': \'?set_language=ca\'\n-            },\n-            \'selected\': False,\n-            \'translated\': True,\n-        }, {\n-            \'code\': u\'es\',\n-            u\'flag\': u\'/++resource++country-flags/es.gif\',\n-            u\'name\': u\'Spanish\',\n-            u\'native\': u\'Espa\\xf1ol\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal_url,\n-                \'tg\': ITG(a),\n-                \'lang\': \'es\',\n-                \'query\': \'?set_language=es\'\n-            },\n-            \'selected\': False,\n-            \'translated\': True,\n-        }])\n+        self.assertEqual(\n+            selector_viewlet_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal_url,\n+                        \'tg\': ITG(a),\n+                        \'lang\': \'en\',\n+                        \'query\': \'?set_language=en\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal_url,\n+                        \'tg\': ITG(a),\n+                        \'lang\': \'ca\',\n+                        \'query\': \'?set_language=ca\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal_url,\n+                        \'tg\': ITG(a),\n+                        \'lang\': \'es\',\n+                        \'query\': \'?set_language=es\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n \n         transaction.commit()\n \n         self.browser.open(selector_viewlet_languages[0][\'url\'])\n-        self.assertEqual(self.browser.url,\n-                         a.absolute_url() + \'?set_language=en\')\n+        self.assertEqual(\n+            self.browser.url, a.absolute_url() + \'?set_language=en\'\n+        )\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         self.browser.open(selector_viewlet_languages[1][\'url\'])\n-        self.assertEqual(self.browser.url,\n-                         a_ca.absolute_url() + \'?set_language=ca\')\n+        self.assertEqual(\n+            self.browser.url, a_ca.absolute_url() + \'?set_language=ca\'\n+        )\n \n-        self.assertIn(u\'lang="ca"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         self.browser.open(selector_viewlet_languages[2][\'url\'])\n-        self.assertEqual(self.browser.url,\n-                         a_es.absolute_url() + \'?set_language=es\')\n-        self.assertIn(u\'lang="es"\'.encode("utf-8"), self.browser.contents)\n+        self.assertEqual(\n+            self.browser.url, a_es.absolute_url() + \'?set_language=es\'\n+        )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_fully_translated_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.assertFullyTranslatedPages()\n@@ -173,7 +196,8 @@ def test_languages_fully_translated_by_closest(self):\n     def test_languages_fully_translated_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         self.assertFullyTranslatedPages()\n@@ -182,12 +206,15 @@ def setUpPartiallyTranslatedContent(self):\n         wftool = getToolByName(self.portal, \'portal_workflow\')\n \n         f_en = createContentInContainer(\n-            self.portal[\'en\'], \'Folder\', title=u"Test folder")\n+            self.portal[\'en\'], \'Folder\', title=u"Test folder"\n+        )\n         wftool.doActionFor(f_en, \'publish\')\n \n         a_en = createContentInContainer(\n-            self.portal[\'en\'][\'test-folder\'], \'Document\',\n-            title=u"Test document")\n+            self.portal[\'en\'][\'test-folder\'],\n+            \'Document\',\n+            title=u"Test document",\n+        )\n         wftool.doActionFor(a_en, \'publish\')\n \n         f_ca = api.translate(f_en, \'ca\')\n@@ -202,17 +229,18 @@ def setUpFullyTranslatedContent(self):\n         self.setUpPartiallyTranslatedContent()\n \n         a_ca = api.translate(\n-            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'ca\')\n+            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'ca\'\n+        )\n         a_ca.setTitle(u"Test document CA")\n         wftool.doActionFor(a_ca, \'publish\')\n \n-        f_es = api.translate(\n-            self.portal[\'en\'][\'test-folder\'], \'es\')\n+        f_es = api.translate(self.portal[\'en\'][\'test-folder\'], \'es\')\n         f_es.setTitle(u"Test folder ES")\n         wftool.doActionFor(f_es, \'publish\')\n \n         a_es = api.translate(\n-            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'es\')\n+            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'es\'\n+        )\n         a_es.setTitle(u"Test document ES")\n         wftool.doActionFor(a_es, \'publish\')\n \n@@ -222,13 +250,15 @@ def test_languages_untranslated_by_closest(self):\n         # Define selector policy\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         wftool = getToolByName(self.portal, "portal_workflow")\n \n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal[\'ca\'], \'Document\', title=u"Test document"\n+        )\n         a_ca.setLanguage(\'ca\')\n         wftool.doActionFor(a_ca, \'publish\')\n \n@@ -258,7 +288,8 @@ def test_languages_untranslated_by_closest(self):\n     def test_languages_partially_translated_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         # Setup content\n@@ -274,10 +305,9 @@ def test_languages_partially_translated_by_closest(self):\n         # Check that EN translation is found\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n-            self.browser.url,\n-            a_en.absolute_url() + \'?set_language=en\'\n+            self.browser.url, a_en.absolute_url() + \'?set_language=en\'\n         )\n-        self.assertIn(u\'lang="en"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         # But extra check, because English is the default?\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n@@ -285,23 +315,23 @@ def test_languages_partially_translated_by_closest(self):\n         # is found\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n-            self.browser.url,\n-            f_ca.absolute_url() + \'?set_language=ca\'\n+            self.browser.url, f_ca.absolute_url() + \'?set_language=ca\'\n         )\n-        self.assertIn(u\'lang="ca"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check that ES translation is missing and only the LRF is found\n         self.browser.open(selector_languages[2][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal[\'es\'].absolute_url() + \'?set_language=es\'\n+            self.portal[\'es\'].absolute_url() + \'?set_language=es\',\n         )\n-        self.assertIn(u\'lang="es"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_partially_translated_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         # Setup content\n@@ -316,11 +346,10 @@ def test_languages_partially_translated_by_dialog(self):\n         # Check that EN translation is found\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n-            self.browser.url,\n-            a_en.absolute_url()+\'?set_language=en\'\n+            self.browser.url, a_en.absolute_url() + \'?set_language=en\'\n         )\n         # But extra check, because English is the default?\n-        self.assertIn(u\'lang="en"\'.encode("utf-8"), self.browser.contents)\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         tgid = selector_languages[1][\'url\'].split(\'/\')[-2]\n@@ -329,31 +358,30 @@ def test_languages_partially_translated_by_dialog(self):\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.absolute_url() +\n-            NOT_TRANSLATED_YET_TEMPLATE +\n-            \'/\' + tgid + \'?set_language=ca\'\n-        )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n+            self.portal.absolute_url()\n+            + NOT_TRANSLATED_YET_TEMPLATE\n+            + \'/\'\n+            + tgid\n+            + \'?set_language=ca\',\n         )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check that ES is not yet translated\n         self.browser.open(selector_languages[2][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.absolute_url() +\n-            NOT_TRANSLATED_YET_TEMPLATE +\n-            \'/\' + tgid + \'?set_language=es\'\n-        )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n+            self.portal.absolute_url()\n+            + NOT_TRANSLATED_YET_TEMPLATE\n+            + \'/\'\n+            + tgid\n+            + \'?set_language=es\',\n         )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def assertSiteRoot(self):\n         self.selector_viewlet = LanguageSelectorViewlet(\n-            self.portal, self.request, None, None)\n+            self.portal, self.request, None, None\n+        )\n         self.selector_viewlet.update()\n         selector_languages = self.selector_viewlet.languages()\n \n@@ -362,44 +390,42 @@ def assertSiteRoot(self):\n         # Check EN root\n         self.assertEqual(\n             selector_languages[0][\'url\'],\n-            (self.portal.absolute_url() +\n-             \'/@@multilingual-selector/notg/en?set_language=en\')\n+            (\n+                self.portal.absolute_url()\n+                + \'/@@multilingual-selector/notg/en?set_language=en\'\n+            ),\n         )\n         self.browser.open(selector_languages[0][\'url\'])\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA root\n         self.assertEqual(\n             selector_languages[1][\'url\'],\n-            (self.portal.absolute_url() +\n-             \'/@@multilingual-selector/notg/ca?set_language=ca\')\n+            (\n+                self.portal.absolute_url()\n+                + \'/@@multilingual-selector/notg/ca?set_language=ca\'\n+            ),\n         )\n         self.browser.open(selector_languages[1][\'url\'])\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES root\n         self.browser.open(selector_languages[2][\'url\'])\n         self.assertEqual(\n             selector_languages[2][\'url\'],\n-            (self.portal.absolute_url() +\n-             \'/@@multilingual-selector/notg/es?set_language=es\')\n-        )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n+            (\n+                self.portal.absolute_url()\n+                + \'/@@multilingual-selector/notg/es?set_language=es\'\n+            ),\n         )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_siteroot_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.assertSiteRoot()\n@@ -407,98 +433,102 @@ def test_siteroot_by_closest(self):\n     def test_siteroot_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         self.assertSiteRoot()\n \n     def assertRootFolders(self):\n         self.selector_viewlet = LanguageSelectorViewlet(\n-            self.portal[\'en\'], self.request, None, None)\n+            self.portal[\'en\'], self.request, None, None\n+        )\n         self.selector_viewlet.update()\n \n         selector_languages = self.selector_viewlet.languages()\n         tg = ITG(self.portal[\'en\'])\n \n-        self.assertEqual(selector_languages, [{\n-            \'code\': u\'en\',\n-            u\'flag\': u\'/++resource++country-flags/gb.gif\',\n-            u\'name\': u\'English\',\n-            u\'native\': u\'English\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal.absolute_url(),\n-                \'tg\': tg,\n-                \'lang\': \'en\',\n-                \'query\': \'?set_language=en\'\n-            },\n-            \'selected\': True,\n-            \'translated\': True,\n-        }, {\n-            \'code\': u\'ca\',\n-            u\'flag\': u\'/++resource++language-flags/ca.gif\',\n-            u\'name\': u\'Catalan\',\n-            u\'native\': u\'Catal\\xe0\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal.absolute_url(),\n-                \'tg\': tg,\n-                \'lang\': \'ca\',\n-                \'query\': \'?set_language=ca\'\n-            },\n-            \'selected\': False,\n-            \'translated\': True,\n-        }, {\n-            \'code\': u\'es\',\n-            u\'flag\': u\'/++resource++country-flags/es.gif\',\n-            u\'name\': u\'Spanish\',\n-            u\'native\': u\'Espa\\xf1ol\',\n-            \'url\': SELECTOR_VIEW_TEMPLATE % {\n-                \'url\': self.portal.absolute_url(),\n-                \'tg\': tg,\n-                \'lang\': \'es\',\n-                \'query\': \'?set_language=es\'\n-            },\n-            \'selected\': False,\n-            \'translated\': True,\n-        }])\n+        self.assertEqual(\n+            selector_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'en\',\n+                        \'query\': \'?set_language=en\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'ca\',\n+                        \'query\': \'?set_language=ca\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'es\',\n+                        \'query\': \'?set_language=es\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n \n         # Check EN\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal[\'en\'].absolute_url()+\'?set_language=en\'\n-        )\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n+            self.portal[\'en\'].absolute_url() + \'?set_language=en\',\n         )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.ca.absolute_url()+\'?set_language=ca\'\n-        )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n+            self.portal.ca.absolute_url() + \'?set_language=ca\',\n         )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.es.absolute_url()+\'?set_language=es\'\n-        )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n+            self.portal.es.absolute_url() + \'?set_language=es\',\n         )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_root_folders_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         self.assertRootFolders()\n@@ -506,7 +536,8 @@ def test_languages_root_folders_by_dialog(self):\n     def test_languages_root_folders_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.assertRootFolders()\n@@ -514,7 +545,8 @@ def test_languages_root_folders_by_closest(self):\n     def test_languages_preserve_view(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.setUpPartiallyTranslatedContent()\n@@ -535,41 +567,33 @@ def test_languages_preserve_view(self):\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            f_en.absolute_url()+\'/contact-info?set_language=en\'\n-        )\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n+            f_en.absolute_url() + \'/contact-info?set_language=en\',\n         )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            f_ca.absolute_url()+\'/contact-info?set_language=ca\'\n-        )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n+            f_ca.absolute_url() + \'/contact-info?set_language=ca\',\n         )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n         # Here @@search isn\'t preserved because we\'ve gone up a level\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.es.absolute_url()+\'?set_language=es\'\n-        )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n+            self.portal.es.absolute_url() + \'?set_language=es\',\n         )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n         # Shouldn\'t do for the not-translated-yet thingie when dialog is on\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         selector = LanguageSelectorViewlet(f_en, self.request, None, None)\n@@ -582,24 +606,18 @@ def test_languages_preserve_view(self):\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            f_en.absolute_url()+\'/contact-info?set_language=en\'\n-        )\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n+            f_en.absolute_url() + \'/contact-info?set_language=en\',\n         )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n         self.assertEqual(\n             self.browser.url,\n-            f_ca.absolute_url()+\'/contact-info?set_language=ca\'\n-        )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n+            f_ca.absolute_url() + \'/contact-info?set_language=ca\',\n         )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n@@ -607,14 +625,13 @@ def test_languages_preserve_view(self):\n         tgid = selector_languages[2][\'url\'].split(\'/\')[-3]\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.absolute_url() +\n-            NOT_TRANSLATED_YET_TEMPLATE +\n-            \'/\' + tgid + \'?set_language=es\'\n-        )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n+            self.portal.absolute_url()\n+            + NOT_TRANSLATED_YET_TEMPLATE\n+            + \'/\'\n+            + tgid\n+            + \'?set_language=es\',\n         )\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def assertLanguagesPreserveQuery(self, policy):\n \n@@ -632,56 +649,58 @@ def assertLanguagesPreserveQuery(self, policy):\n \n         tgid = selector_languages[2][\'url\'].split(\'/\')[-3]\n         untranslated_url = {\n-            \'closest\': (self.portal[\'es\'].absolute_url() +\n-                        \'?int=1&uni=pres%C3%98rved&set_language=es\'),\n-            \'dialog\': (self.portal.absolute_url() +\n-                       NOT_TRANSLATED_YET_TEMPLATE + \'/\' + tgid +\n-                       \'?int=1&uni=pres%C3%98rved&set_language=es\')\n+            \'closest\': (\n+                self.portal[\'es\'].absolute_url()\n+                + \'?int=1&uni=pres%C3%98rved&set_language=es\'\n+            ),\n+            \'dialog\': (\n+                self.portal.absolute_url()\n+                + NOT_TRANSLATED_YET_TEMPLATE\n+                + \'/\'\n+                + tgid\n+                + \'?int=1&uni=pres%C3%98rved&set_language=es\'\n+            ),\n         }\n \n         transaction.commit()\n \n         # Check EN\n         self.browser.open(selector_languages[0][\'url\'])\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             self.browser.url,\n-            (f_en.absolute_url() +\n-             \'/contact-info?int=1&uni=pres%C3%98rved&set_language=en\')\n-        )\n-        self.assertIn(\n-            u\'lang="en"\'.encode("utf-8"),\n-            self.browser.contents\n+            (\n+                f_en.absolute_url()\n+                + \'/contact-info?int=1&uni=pres%C3%98rved&set_language=en\'\n+            ),\n         )\n+        self.assertIn(\'lang="en"\', self.browser.contents)\n         self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             self.browser.url,\n-            (f_ca.absolute_url() +\n-             \'/contact-info?int=1&uni=pres%C3%98rved&set_language=ca\')\n-        )\n-        self.assertIn(\n-            u\'lang="ca"\'.encode("utf-8"),\n-            self.browser.contents\n+            (\n+                f_ca.absolute_url()\n+                + \'/contact-info?int=1&uni=pres%C3%98rved&set_language=ca\'\n+            ),\n         )\n+        self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n         self.browser.open(selector_languages[2][\'url\'])\n         # Here @@search isn\'t preserved because we\'ve got the dialog\n-        self.assertEqual(\n-            self.browser.url,\n-            untranslated_url[policy]\n-        )\n-        self.assertIn(\n-            u\'lang="es"\'.encode("utf-8"),\n-            self.browser.contents\n-        )\n+        url = self.browser.url\n+        if six.PY2 and isinstance(url, six.binary_type):\n+            url = url.decode(\'utf8\')\n+        self.assertUrlsEqual(url, untranslated_url[policy])\n+        self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_preserve_by_closest(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'closest\'\n \n         self.assertLanguagesPreserveQuery(\'closest\')\n@@ -689,7 +708,8 @@ def test_languages_preserve_by_closest(self):\n     def test_languages_preserve_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n-            IMultiLanguageExtraOptionsSchema, prefix="plone")\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         self.settings.selector_lookup_translations_policy = \'dialog\'\n \n         self.assertLanguagesPreserveQuery(\'dialog\')\n@@ -755,6 +775,20 @@ def test_languages_preserve_by_dialog(self):\n     #          \'url\': base + \'pres%C3%98rved&set_language=no\'}]\n     #     self.assertEqual(selector.languages(), expected)\n \n+    def assertUrlsEqual(self, url1, url2):\n+        """The order of query-strings is sometimes random in python 3\n+        This compares urls disregarding the order.\n+        """\n+        parsed_url_1 = urlparse(safe_nativestring(url1))\n+        parse_qs_1 = parse_qs(parsed_url_1.query)\n+        parsed_url_2 = urlparse(safe_nativestring(url2))\n+        parse_qs_2 = parse_qs(parsed_url_2.query)\n+        self.assertEqual(parsed_url_1[0], parsed_url_2[0])\n+        self.assertEqual(parsed_url_1[1], parsed_url_2[1])\n+        self.assertEqual(parsed_url_1[2], parsed_url_2[2])\n+        self.assertEqual(parsed_url_1[3], parsed_url_2[3])\n+        self.assertEqual(parse_qs_1, parse_qs_2)\n+\n \n class TestLanguageSelectorPostPath(unittest.TestCase):\n \n@@ -764,73 +798,62 @@ def setUp(self):\n         alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n         self.portal = self.layer[\'portal\']\n         self.folder = createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Folder")\n+            self.portal[\'ca\'], \'Folder\', title=u"Folder"\n+        )\n         self.document = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Document")\n+            self.portal[\'ca\'], \'Document\', title=u"Document"\n+        )\n         self.request = self.layer[\'request\']\n \n     def test_findpath(self):\n         self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/whatever\'\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever\'\n-        )\n+        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n \n     def test_findpath_match(self):\n         self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document\'\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'\'\n-        )\n+        self.assertEqual(getPostPath(self.document, self.request), \'\')\n \n     def test_findpath_match_slash(self):\n         self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/\'\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'\'\n-        )\n+        self.assertEqual(getPostPath(self.document, self.request), \'\')\n \n     def test_findpath_template(self):\n-        self.request[\'PATH_INFO\'] = (\'/plone/ca/folder/document/\'\n-                                     \'whatever/foo/edit\')\n+        self.request[\'PATH_INFO\'] = (\n+            \'/plone/ca/folder/document/\' \'whatever/foo/edit\'\n+        )\n         self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever/foo/edit\'\n+            getPostPath(self.document, self.request), \'/whatever/foo/edit\'\n         )\n \n     def test_findpath_view(self):\n         self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/contact-info\'\n         self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/contact-info\'\n+            getPostPath(self.document, self.request), \'/contact-info\'\n         )\n \n     def test_findpath_vhr(self):\n-        self.request[\'PATH_INFO\'] = (\'/VirtualHostBase/http/127.0.0.1\'\n-                                     \'/plone/ca/folder/document/\'\n-                                     \'VirtualHostRoot/whatever\')\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever\'\n+        self.request[\'PATH_INFO\'] = (\n+            \'/VirtualHostBase/http/127.0.0.1\'\n+            \'/plone/ca/folder/document/\'\n+            \'VirtualHostRoot/whatever\'\n         )\n+        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n \n     def test_findpath_vh_marker(self):\n-        self.request[\'PATH_INFO\'] = (\'/VirtualHostBase/http/127.0.0.1\'\n-                                     \'/plone/ca/folder/document/\'\n-                                     \'VirtualHostRoot/_vh_foo/whatever\')\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever\'\n+        self.request[\'PATH_INFO\'] = (\n+            \'/VirtualHostBase/http/127.0.0.1\'\n+            \'/plone/ca/folder/document/\'\n+            \'VirtualHostRoot/_vh_foo/whatever\'\n         )\n+        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n \n     def test_findpath_vhr_and_traverser(self):\n-        self.request[\'PATH_INFO\'] = (\'/VirtualHostBase/http/127.0.0.1\'\n-                                     \'/plone/ca/folder/document/++theme++foo/\'\n-                                     \'VirtualHostRoot/whatever\')\n-        self.assertEqual(\n-            getPostPath(self.document, self.request),\n-            \'/whatever\'\n+        self.request[\'PATH_INFO\'] = (\n+            \'/VirtualHostBase/http/127.0.0.1\'\n+            \'/plone/ca/folder/document/++theme++foo/\'\n+            \'VirtualHostRoot/whatever\'\n         )\n+        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n \n \n class TestLanguageSelectorAddQuery(unittest.TestCase):\n@@ -845,55 +868,65 @@ def setUp(self):\n     def test_formvariables(self):\n         self.request.form[\'one\'] = 1\n         self.request.form[\'two\'] = 2\n-        self.assertEqual(\n-            addQuery(self.request, self.url),\n-            self.url+\'?two:int=2&one:int=1\'\n+        self.assertUrlsEqual(\n+            addQuery(self.request, self.url), self.url + \'?two:int=2&one:int=1\'\n         )\n \n     def test_formvariables_sequences(self):\n-        self.request.form[\'one\'] = (\'a\', )\n+        self.request.form[\'one\'] = (\'a\',)\n         self.request.form[\'two\'] = [\'b\', 2]\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url+\'?two:list=b&two:int:list=2&one=%28%27a%27%2C%29\'\n+            self.url + \'?two:list=b&two:int:list=2&one=%28%27a%27%2C%29\',\n         )\n \n     def test_formvariables_unicode(self):\n         self.request.form[\'one\'] = u\'F\xc3\xb8r\'\n         self.request.form[\'two\'] = u\'foo\'\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url+\'?two=foo&one=F%C3%B8r\'\n+            self.url + \'?two=foo&one=F%C3%B8r\',\n         )\n \n     def test_formvariables_utf8(self):\n-        self.request.form[\'one\'] = u\'F\xc3\xb8r\'.encode("utf-8")\n+        self.request.form[\'one\'] = u\'F\xc3\xb8r\'\n         self.request.form[\'two\'] = u\'foo\'\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url+\'?two=foo&one=F%C3%B8r\'\n+            self.url + \'?two=foo&one=F%C3%B8r\',\n         )\n \n     def test_formvariables_object(self):\n         self.request.form[\'one\'] = \'1\'\n         self.request.form[\'two\'] = EvilObject()\n-        self.assertEqual(\n-            addQuery(self.request, self.url),\n-            self.url\n-        )\n+        self.assertUrlsEqual(addQuery(self.request, self.url), self.url)\n \n     def test_formvariables_exclude(self):\n         self.request.form[\'one\'] = 1\n         self.request.form[\'two\'] = 2\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url, exclude=(\'two\',)),\n-            self.url+\'?one:int=1\'\n+            self.url + \'?one:int=1\',\n         )\n \n     def test_formvariables_extras(self):\n         self.request.form[\'one\'] = 1\n         self.request.form[\'two\'] = 2\n-        self.assertEqual(\n+        self.assertUrlsEqual(\n             addQuery(self.request, self.url, three=3),\n-            self.url+\'?one:int=1&three:int=3&two:int=2\'\n-        )\n+            self.url + \'?one:int=1&three:int=3&two:int=2\',\n+        )\n+\n+    def assertUrlsEqual(self, url1, url2):\n+        """The order of query-strings is sometimes random in python 3\n+        This compares urls disregarding the order.\n+        """\n+        parsed_url_1 = urlparse(url1)\n+        parse_qs_1 = parse_qs(parsed_url_1.query)\n+        parsed_url_2 = urlparse(url2)\n+        parse_qs_2 = parse_qs(parsed_url_2.query)\n+        self.assertEqual(parsed_url_1[0], parsed_url_2[0])\n+        self.assertEqual(parsed_url_1[1], parsed_url_2[1])\n+        self.assertEqual(parsed_url_1[2], parsed_url_2[2])\n+        self.assertEqual(parsed_url_1[3], parsed_url_2[3])\n+        self.assertEqual(parse_qs_1, parse_qs_2)\ndiff --git a/src/plone/app/multilingual/tests/test_sitemap.py b/src/plone/app/multilingual/tests/test_sitemap.py\nindex 205ca72a..128b3ccc 100644\n--- a/src/plone/app/multilingual/tests/test_sitemap.py\n+++ b/src/plone/app/multilingual/tests/test_sitemap.py\n@@ -5,7 +5,7 @@\n from plone.dexterity.utils import createContentInContainer\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISiteSchema\n-from six import StringIO\n+from six import BytesIO\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\n@@ -43,7 +43,7 @@ def setUp(self):\n             self.portal[\'en\'], \'Document\', title=u"Test document")\n \n     def uncompress(self, sitemapdata):\n-        sio = StringIO(sitemapdata)\n+        sio = BytesIO(sitemapdata)\n         unziped = GzipFile(fileobj=sio)\n         xml = unziped.read()\n         unziped.close()\n@@ -55,13 +55,13 @@ def test_portalroot_sitemap(self):\n         \'\'\'\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertIn(\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/en/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/en/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n \n-        self.assertIn(\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\n \n     def test_navroot_sitemap(self):\n         \'\'\'\n@@ -70,10 +70,10 @@ def test_navroot_sitemap(self):\n         sitemap = getMultiAdapter((self.portal.es, self.portal.REQUEST),\n                                   name=\'sitemap.xml.gz\')\n         xml = self.uncompress(sitemap())\n-        self.assertNotIn(\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)  # noqa\n-        self.assertNotIn(\'<loc>http://nohost/plone/en/test-document</loc>\', xml)  # noqa\n-        self.assertIn(\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n+        self.assertNotIn(b\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)  # noqa\n+        self.assertNotIn(b\'<loc>http://nohost/plone/en/test-document</loc>\', xml)  # noqa\n+        self.assertIn(b\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n \n-        self.assertNotIn(\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n-        self.assertNotIn(\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n-        self.assertIn(\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\n+        self.assertNotIn(b\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n+        self.assertNotIn(b\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n+        self.assertIn(b\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\ndiff --git a/src/plone/app/multilingual/tests/test_uninstall.py b/src/plone/app/multilingual/tests/test_uninstall.py\nindex 5a3aed5a..5c01a44c 100644\n--- a/src/plone/app/multilingual/tests/test_uninstall.py\n+++ b/src/plone/app/multilingual/tests/test_uninstall.py\n@@ -2,6 +2,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.multilingual.testing import PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING  # noqa\n+from Products.CMFPlone.utils import get_installer\n \n import unittest\n \n@@ -11,15 +12,15 @@ class TestUninstall(unittest.TestCase):\n \n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n-        self.installer = api.portal.get_tool(\'portal_quickinstaller\')\n         roles_before = api.user.get_roles(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.installer.uninstallProducts([\'plone.app.multilingual\'])\n+        self.installer = get_installer(self.portal)\n+        self.installer.uninstall_product(\'plone.app.multilingual\')\n         setRoles(self.portal, TEST_USER_ID, roles_before)\n \n     def test_product_uninstalled(self):\n         """Test if plone.app.multilingual is cleanly uninstalled."""\n-        self.assertFalse(self.installer.isProductInstalled(\n+        self.assertFalse(self.installer.is_product_installed(\n             \'plone.app.multilingual\'))\n \n     def test_browserlayer_removed(self):\n'

