Repository: plone.transformchain


Branch: refs/heads/master
Date: 2018-10-17T10:55:31+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.transformchain/commit/5d5c24b814adf7938590525241b03ad36b5389c2

fix applyTransformOnSuccess for py3

Files changed:
M plone/transformchain/zpublisher.py

b'diff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex ee25e88..454ec26 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -67,7 +67,7 @@ def applyTransform(request, body=None):\n             body = response.getBody()\n \n         result = body\n-        if isinstance(result, str):\n+        if isinstance(result, six.binary_type):\n             result = [result]\n         elif isinstance(result, six.text_type):\n             result = [result.encode(encoding)]\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2018-10-17T10:55:31+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/f08a32cb1081d7ad4b3dfbce8e54c2bd5eb857f4

Even more fixes for Python 2 / 3 compatibility.

Files changed:
M CHANGES.rst
M plone/transformchain/tests.py
M plone/transformchain/zpublisher.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex d0f90d5..eec7823 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -31,8 +31,8 @@ New features:\n \n Bug fixes:\n \n-- More fixes for Python 2 / 3 compatibility\n-  [pbauer]\n+- More fixes for Python 2 / 3 compatibility.\n+  [pbauer, thet]\n \n \n 1.2.2 (2018-02-11)\ndiff --git a/plone/transformchain/tests.py b/plone/transformchain/tests.py\nindex fdfab50..f86bbee 100644\n--- a/plone/transformchain/tests.py\n+++ b/plone/transformchain/tests.py\n@@ -15,6 +15,7 @@\n \n import os\n import pkg_resources\n+import six\n import tempfile\n import unittest\n \n@@ -108,7 +109,7 @@ def test_simple(self):\n         class Transform1(FauxTransformBase):\n \n             def transformBytes(self, result, encoding):\n-                return result + ' transformed'\n+                return result + b' transformed'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' transformed'\n@@ -133,7 +134,7 @@ class Transform1(FauxTransformBase):\n             order = 0\n \n             def transformBytes(self, result, encoding):\n-                return result + ' transformed'\n+                return result + b' transformed'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' transformed'\n@@ -160,24 +161,24 @@ def test_ftp_request_not_transformed(self):\n         new_result = self.t(request, result, 'utf8')\n         self.assertEqual(None, new_result)\n \n-    def test_transform_string(self):\n+    def test_transform_bytes(self):\n \n         class Transform1(FauxTransformBase):\n \n             def transformBytes(self, result, encoding):\n-                return result + ' One'\n+                return result + b' One'\n \n         provideAdapter(Transform1, name=u'test.one')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = 'Blah'\n+        result = b'Blah'\n         encoding = 'utf-8'\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual('Blah One', new_result)\n+        self.assertEqual(b'Blah One', new_result)\n \n-    def test_transform_unicode(self):\n+    def test_transform_text(self):\n \n         class Transform1(FauxTransformBase):\n \n@@ -216,14 +217,14 @@ def test_transform_mixed(self):\n         class Transform1(FauxTransformBase):\n \n             def transformIterable(self, result, encoding):\n-                return u''.join(result) + u' One'\n+                return ''.join(result) + ' One'\n \n         class Transform2(FauxTransformBase):\n \n             order = 1\n \n             def transformUnicode(self, result, encoding):\n-                return result.encode(encoding) + ' Two'\n+                return result.encode(encoding) + ' Two'.encode(encoding)\n \n         class Transform3(FauxTransformBase):\n \n@@ -264,10 +265,10 @@ def test_abort_chain(self):\n         class Transform1(FauxTransformBase):\n \n             def transformBytes(self, result, encoding):\n-                return 'One'\n+                return b'One'\n \n             def transformUnicode(self, result, encoding):\n-                return 'One'\n+                return u'One'\n \n             def transformIterable(self, result, encoding):\n                 return 'One'\n@@ -280,7 +281,7 @@ class Transform3(FauxTransformBase):\n             order = 2\n \n             def transformBytes(self, result, encoding):\n-                return result + ' three'\n+                return result + b' three'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' three'\n@@ -307,7 +308,7 @@ class Transform1(FauxTransformBase):\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + ' One'\n+                return result + b' One'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' One'\n@@ -320,7 +321,7 @@ class Transform2(FauxTransformBase):\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + ' Two'\n+                return result + b' Two'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' Two'\n@@ -333,7 +334,7 @@ class Transform3(FauxTransformBase):\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + ' Three'\n+                return result + b' Three'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' Three'\n@@ -360,7 +361,7 @@ class Transform1(FauxTransformBase):\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + ' One'\n+                return result + b' One'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' One'\n@@ -373,7 +374,7 @@ class Transform2(FauxTransformBase):\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + ' Two'\n+                return result + b' Two'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' Two'\n@@ -388,7 +389,7 @@ class Transform3(FauxTransformBase):\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + ' Three'\n+                return result + b' Three'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' Three'\n@@ -424,7 +425,7 @@ class Transform1(FauxTransformBase):\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + ' One'\n+                return result + b' One'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' One'\n@@ -437,7 +438,7 @@ class Transform2(FauxTransformBase):\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + ' Two'\n+                return result + b' Two'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' Two'\n@@ -452,7 +453,7 @@ class Transform3(FauxTransformBase):\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + ' Three'\n+                return result + b' Three'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u' Three'\n@@ -575,10 +576,10 @@ def __call__(self, request, result, encoding):\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.headers['content-type'] = 'text/html; charset=dummy'\n+        request.response.headers['content-type'] = 'text/html; charset=utf-16'\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual('dummy', transformer.encoding)\n+        self.assertEqual('utf-16', transformer.encoding)\n \n     def test_applyTransform_other_encoding_with_header_missing_space(self):\n         @implementer(ITransformer)\n@@ -593,10 +594,10 @@ def __call__(self, request, result, encoding):\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.headers['content-type'] = 'text/html;charset=dummy'\n+        request.response.headers['content-type'] = 'text/html;charset=utf-16'\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual('dummy', transformer.encoding)\n+        self.assertEqual('utf-16', transformer.encoding)\n \n     def test_applyTransform_str(self):\n         @implementer(ITransformer)\n@@ -682,7 +683,7 @@ class FauxTransformer(object):\n \n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n-                assert isinstance(result[0], str)\n+                assert isinstance(result[0], six.binary_type)\n                 return 'dummystr'\n \n         transformer = FauxTransformer()\n@@ -703,7 +704,7 @@ class FauxTransformer(object):\n \n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n-                assert isinstance(result[0], str)\n+                assert isinstance(result[0], six.binary_type)\n                 return u'dummystr'\n \n         transformer = FauxTransformer()\ndiff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex 454ec26..7835e16 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -92,11 +92,15 @@ def applyTransformOnSuccess(event):\n         response.setBody(transformed)\n     # setBody() can deal with byte and unicode strings (and will encode as\n     # necessary)...\n-    elif isinstance(transformed, six.string_types):\n+    elif isinstance(transformed, six.string_types)\\\n+            or isinstance(transformed, six.binary_type):\n         response.setBody(transformed)\n     # ... but not with iterables\n-    else:\n-        response.setBody(b''.join(transformed))\n+    elif hasattr(transformed, '__iter__'):\n+        for it in transformed:\n+            if isinstance(it, six.binary_type):\n+                it = it.decode('utf-8')\n+        response.setBody(''.join(transformed))\n \n \n @adapter(IPubBeforeAbort)\n"

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2018-10-17T10:55:31+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/cea55bad0f892acc9431e298c0f7d2b6bfb9583b

fix 500.000.000 tests

Files changed:
M plone/transformchain/zpublisher.py

b"diff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex 7835e16..5141b93 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -96,10 +96,13 @@ def applyTransformOnSuccess(event):\n             or isinstance(transformed, six.binary_type):\n         response.setBody(transformed)\n     # ... but not with iterables\n-    elif hasattr(transformed, '__iter__'):\n-        for it in transformed:\n-            if isinstance(it, six.binary_type):\n-                it = it.decode('utf-8')\n+    else:\n+        transformed = map(\n+            lambda it: it.decode('utf-8')\n+            if isinstance(it, six.binary_type)\n+            else it,\n+            transformed\n+        )\n         response.setBody(''.join(transformed))\n \n \n"

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2018-10-17T10:55:31+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.transformchain/commit/db2ddc377a2bca47608f5311515c448f9f1b7c41

Py2 fix

Files changed:
M plone/transformchain/tests.py

b"diff --git a/plone/transformchain/tests.py b/plone/transformchain/tests.py\nindex f86bbee..e606e06 100644\n--- a/plone/transformchain/tests.py\n+++ b/plone/transformchain/tests.py\n@@ -217,14 +217,14 @@ def test_transform_mixed(self):\n         class Transform1(FauxTransformBase):\n \n             def transformIterable(self, result, encoding):\n-                return ''.join(result) + ' One'\n+                return u''.join(result) + u' One'\n \n         class Transform2(FauxTransformBase):\n \n             order = 1\n \n             def transformUnicode(self, result, encoding):\n-                return result.encode(encoding) + ' Two'.encode(encoding)\n+                return result.encode(encoding) + u' Two'.encode(encoding)\n \n         class Transform3(FauxTransformBase):\n \n"

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2018-10-17T10:55:31+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.transformchain/commit/aced9e2a7c852e7841692329a166a8bf1569c4c6

add changenote

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex eec7823..aed956a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- More py3 test and functionality fixes.\n+  [pbauer, thet]\n \n \n 2.0.0 (2018-06-20)\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2018-10-17T10:55:31+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.transformchain/commit/8c74fe0578fce2cbec2bbe9e6564cc9661558460

add classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 3504dec..f964163 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,6 +22,8 @@\n         "License :: OSI Approved :: BSD License",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n     keywords=\'zope2 repoze transform\',\n'

Repository: plone.transformchain


Branch: refs/heads/master
Date: 2018-10-17T10:56:09+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.transformchain/commit/4f0cfda73d2cac4e2feda6a60e62212d2b6fab4d

Merge pull request #9 from plone/python3

fix applyTransformOnSuccess for py3

Files changed:
M CHANGES.rst
M plone/transformchain/tests.py
M plone/transformchain/zpublisher.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d0f90d5..aed956a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- More py3 test and functionality fixes.\n+  [pbauer, thet]\n \n \n 2.0.0 (2018-06-20)\n@@ -31,8 +32,8 @@ New features:\n \n Bug fixes:\n \n-- More fixes for Python 2 / 3 compatibility\n-  [pbauer]\n+- More fixes for Python 2 / 3 compatibility.\n+  [pbauer, thet]\n \n \n 1.2.2 (2018-02-11)\ndiff --git a/plone/transformchain/tests.py b/plone/transformchain/tests.py\nindex fdfab50..e606e06 100644\n--- a/plone/transformchain/tests.py\n+++ b/plone/transformchain/tests.py\n@@ -15,6 +15,7 @@\n \n import os\n import pkg_resources\n+import six\n import tempfile\n import unittest\n \n@@ -108,7 +109,7 @@ def test_simple(self):\n         class Transform1(FauxTransformBase):\n \n             def transformBytes(self, result, encoding):\n-                return result + \' transformed\'\n+                return result + b\' transformed\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' transformed\'\n@@ -133,7 +134,7 @@ class Transform1(FauxTransformBase):\n             order = 0\n \n             def transformBytes(self, result, encoding):\n-                return result + \' transformed\'\n+                return result + b\' transformed\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' transformed\'\n@@ -160,24 +161,24 @@ def test_ftp_request_not_transformed(self):\n         new_result = self.t(request, result, \'utf8\')\n         self.assertEqual(None, new_result)\n \n-    def test_transform_string(self):\n+    def test_transform_bytes(self):\n \n         class Transform1(FauxTransformBase):\n \n             def transformBytes(self, result, encoding):\n-                return result + \' One\'\n+                return result + b\' One\'\n \n         provideAdapter(Transform1, name=u\'test.one\')\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        result = \'Blah\'\n+        result = b\'Blah\'\n         encoding = \'utf-8\'\n \n         new_result = self.t(request, result, encoding)\n-        self.assertEqual(\'Blah One\', new_result)\n+        self.assertEqual(b\'Blah One\', new_result)\n \n-    def test_transform_unicode(self):\n+    def test_transform_text(self):\n \n         class Transform1(FauxTransformBase):\n \n@@ -223,7 +224,7 @@ class Transform2(FauxTransformBase):\n             order = 1\n \n             def transformUnicode(self, result, encoding):\n-                return result.encode(encoding) + \' Two\'\n+                return result.encode(encoding) + u\' Two\'.encode(encoding)\n \n         class Transform3(FauxTransformBase):\n \n@@ -264,10 +265,10 @@ def test_abort_chain(self):\n         class Transform1(FauxTransformBase):\n \n             def transformBytes(self, result, encoding):\n-                return \'One\'\n+                return b\'One\'\n \n             def transformUnicode(self, result, encoding):\n-                return \'One\'\n+                return u\'One\'\n \n             def transformIterable(self, result, encoding):\n                 return \'One\'\n@@ -280,7 +281,7 @@ class Transform3(FauxTransformBase):\n             order = 2\n \n             def transformBytes(self, result, encoding):\n-                return result + \' three\'\n+                return result + b\' three\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' three\'\n@@ -307,7 +308,7 @@ class Transform1(FauxTransformBase):\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + \' One\'\n+                return result + b\' One\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' One\'\n@@ -320,7 +321,7 @@ class Transform2(FauxTransformBase):\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + \' Two\'\n+                return result + b\' Two\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' Two\'\n@@ -333,7 +334,7 @@ class Transform3(FauxTransformBase):\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + \' Three\'\n+                return result + b\' Three\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' Three\'\n@@ -360,7 +361,7 @@ class Transform1(FauxTransformBase):\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + \' One\'\n+                return result + b\' One\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' One\'\n@@ -373,7 +374,7 @@ class Transform2(FauxTransformBase):\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + \' Two\'\n+                return result + b\' Two\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' Two\'\n@@ -388,7 +389,7 @@ class Transform3(FauxTransformBase):\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + \' Three\'\n+                return result + b\' Three\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' Three\'\n@@ -424,7 +425,7 @@ class Transform1(FauxTransformBase):\n             order = 100\n \n             def transformBytes(self, result, encoding):\n-                return result + \' One\'\n+                return result + b\' One\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' One\'\n@@ -437,7 +438,7 @@ class Transform2(FauxTransformBase):\n             order = -100\n \n             def transformBytes(self, result, encoding):\n-                return result + \' Two\'\n+                return result + b\' Two\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' Two\'\n@@ -452,7 +453,7 @@ class Transform3(FauxTransformBase):\n             order = 101\n \n             def transformBytes(self, result, encoding):\n-                return result + \' Three\'\n+                return result + b\' Three\'\n \n             def transformUnicode(self, result, encoding):\n                 return result + u\' Three\'\n@@ -575,10 +576,10 @@ def __call__(self, request, result, encoding):\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.headers[\'content-type\'] = \'text/html; charset=dummy\'\n+        request.response.headers[\'content-type\'] = \'text/html; charset=utf-16\'\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'dummy\', transformer.encoding)\n+        self.assertEqual(\'utf-16\', transformer.encoding)\n \n     def test_applyTransform_other_encoding_with_header_missing_space(self):\n         @implementer(ITransformer)\n@@ -593,10 +594,10 @@ def __call__(self, request, result, encoding):\n \n         published = FauxPublished()\n         request = FauxRequest(published)\n-        request.response.headers[\'content-type\'] = \'text/html;charset=dummy\'\n+        request.response.headers[\'content-type\'] = \'text/html;charset=utf-16\'\n         applyTransformOnSuccess(FauxPubEvent(request))\n \n-        self.assertEqual(\'dummy\', transformer.encoding)\n+        self.assertEqual(\'utf-16\', transformer.encoding)\n \n     def test_applyTransform_str(self):\n         @implementer(ITransformer)\n@@ -682,7 +683,7 @@ class FauxTransformer(object):\n \n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n-                assert isinstance(result[0], str)\n+                assert isinstance(result[0], six.binary_type)\n                 return \'dummystr\'\n \n         transformer = FauxTransformer()\n@@ -703,7 +704,7 @@ class FauxTransformer(object):\n \n             def __call__(self, request, result, encoding):\n                 assert isinstance(result, list)\n-                assert isinstance(result[0], str)\n+                assert isinstance(result[0], six.binary_type)\n                 return u\'dummystr\'\n \n         transformer = FauxTransformer()\ndiff --git a/plone/transformchain/zpublisher.py b/plone/transformchain/zpublisher.py\nindex ee25e88..5141b93 100644\n--- a/plone/transformchain/zpublisher.py\n+++ b/plone/transformchain/zpublisher.py\n@@ -67,7 +67,7 @@ def applyTransform(request, body=None):\n             body = response.getBody()\n \n         result = body\n-        if isinstance(result, str):\n+        if isinstance(result, six.binary_type):\n             result = [result]\n         elif isinstance(result, six.text_type):\n             result = [result.encode(encoding)]\n@@ -92,11 +92,18 @@ def applyTransformOnSuccess(event):\n         response.setBody(transformed)\n     # setBody() can deal with byte and unicode strings (and will encode as\n     # necessary)...\n-    elif isinstance(transformed, six.string_types):\n+    elif isinstance(transformed, six.string_types)\\\n+            or isinstance(transformed, six.binary_type):\n         response.setBody(transformed)\n     # ... but not with iterables\n     else:\n-        response.setBody(b\'\'.join(transformed))\n+        transformed = map(\n+            lambda it: it.decode(\'utf-8\')\n+            if isinstance(it, six.binary_type)\n+            else it,\n+            transformed\n+        )\n+        response.setBody(\'\'.join(transformed))\n \n \n @adapter(IPubBeforeAbort)\ndiff --git a/setup.py b/setup.py\nindex 3504dec..f964163 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,6 +22,8 @@\n         "License :: OSI Approved :: BSD License",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n     keywords=\'zope2 repoze transform\',\n'

