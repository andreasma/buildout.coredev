Repository: plone.schema


Branch: refs/heads/master
Date: 2018-09-20T23:33:45+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.schema/commit/fe251e193470a738beaff3a61a37d88dd2c259ba

Remove unused and outdated file

Files changed:
D bootstrap.py

b'diff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex 7647cbb..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,262 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os, shutil, sys, tempfile, urllib, urllib2, subprocess\n-from optparse import OptionParser\n-\n-if sys.platform == \'win32\':\n-    def quote(c):\n-        if \' \' in c:\n-            return \'"%s"\' % c  # work around spawn lamosity on windows\n-        else:\n-            return c\n-else:\n-    quote = str\n-\n-# See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.\n-stdout, stderr = subprocess.Popen(\n-    [sys.executable, \'-Sc\',\n-     \'try:\\n\'\n-     \'    import ConfigParser\\n\'\n-     \'except ImportError:\\n\'\n-     \'    print 1\\n\'\n-     \'else:\\n\'\n-     \'    print 0\\n\'],\n-    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n-has_broken_dash_S = bool(int(stdout.strip()))\n-\n-# In order to be more robust in the face of system Pythons, we want to\n-# run without site-packages loaded.  This is somewhat tricky, in\n-# particular because Python 2.6\'s distutils imports site, so starting\n-# with the -S flag is not sufficient.  However, we\'ll start with that:\n-if not has_broken_dash_S and \'site\' in sys.modules:\n-    # We will restart with python -S.\n-    args = sys.argv[:]\n-    args[0:0] = [sys.executable, \'-S\']\n-    args = map(quote, args)\n-    os.execv(sys.executable, args)\n-# Now we are running with -S.  We\'ll get the clean sys.path, import site\n-# because distutils will do it later, and then reset the path and clean\n-# out any namespace packages from site-packages that might have been\n-# loaded by .pth files.\n-clean_path = sys.path[:]\n-import site  # imported because of its side effects\n-sys.path[:] = clean_path\n-for k, v in sys.modules.items():\n-    if k in (\'setuptools\', \'pkg_resources\') or (\n-        hasattr(v, \'__path__\') and\n-        len(v.__path__) == 1 and\n-        not os.path.exists(os.path.join(v.__path__[0], \'__init__.py\'))):\n-        # This is a namespace package.  Remove it.\n-        sys.modules.pop(k)\n-\n-is_jython = sys.platform.startswith(\'java\')\n-\n-setuptools_source = \'http://peak.telecommunity.com/dist/ez_setup.py\'\n-distribute_source = \'http://python-distribute.org/distribute_setup.py\'\n-\n-\n-# parsing arguments\n-def normalize_to_url(option, opt_str, value, parser):\n-    if value:\n-        if \'://\' not in value:  # It doesn\'t smell like a URL.\n-            value = \'file://%s\' % (\n-                urllib.pathname2url(\n-                    os.path.abspath(os.path.expanduser(value))),)\n-        if opt_str == \'--download-base\' and not value.endswith(\'/\'):\n-            # Download base needs a trailing slash to make the world happy.\n-            value += \'/\'\n-    else:\n-        value = None\n-    name = opt_str[2:].replace(\'-\', \'_\')\n-    setattr(parser.values, name, value)\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --setup-source and --download-base to point to\n-local resources, you can keep this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", dest="version",\n-                          help="use a specific zc.buildout version")\n-parser.add_option("-d", "--distribute",\n-                   action="store_true", dest="use_distribute", default=False,\n-                   help="Use Distribute rather than Setuptools.")\n-parser.add_option("--setup-source", action="callback", dest="setup_source",\n-                  callback=normalize_to_url, nargs=1, type="string",\n-                  help=("Specify a URL or file location for the setup file. "\n-                        "If you use Setuptools, this will default to " +\n-                        setuptools_source + "; if you use Distribute, this "\n-                        "will default to " + distribute_source + "."))\n-parser.add_option("--download-base", action="callback", dest="download_base",\n-                  callback=normalize_to_url, nargs=1, type="string",\n-                  help=("Specify a URL or directory for downloading "\n-                        "zc.buildout and either Setuptools or Distribute. "\n-                        "Defaults to PyPI."))\n-parser.add_option("--eggs",\n-                  help=("Specify a directory for storing eggs.  Defaults to "\n-                        "a temporary directory that is deleted when the "\n-                        "bootstrap script completes."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", None, action="store", dest="config_file",\n-                   help=("Specify the path to the buildout configuration "\n-                         "file to be used."))\n-\n-options, args = parser.parse_args()\n-\n-# if -c was provided, we push it back into args for buildout\'s main function\n-if options.config_file is not None:\n-    args += [\'-c\', options.config_file]\n-\n-if options.eggs:\n-    eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))\n-else:\n-    eggs_dir = tempfile.mkdtemp()\n-\n-if options.setup_source is None:\n-    if options.use_distribute:\n-        options.setup_source = distribute_source\n-    else:\n-        options.setup_source = setuptools_source\n-\n-if options.accept_buildout_test_releases:\n-    args.append(\'buildout:accept-buildout-test-releases=true\')\n-args.append(\'bootstrap\')\n-\n-try:\n-    import pkg_resources\n-    import setuptools  # A flag.  Sometimes pkg_resources is installed alone.\n-    if not hasattr(pkg_resources, \'_distribute\'):\n-        raise ImportError\n-except ImportError:\n-    ez_code = urllib2.urlopen(\n-        options.setup_source).read().replace(\'\\r\\n\', \'\\n\')\n-    ez = {}\n-    exec ez_code in ez\n-    setup_args = dict(to_dir=eggs_dir, download_delay=0)\n-    if options.download_base:\n-        setup_args[\'download_base\'] = options.download_base\n-    if options.use_distribute:\n-        setup_args[\'no_fake\'] = True\n-    ez[\'use_setuptools\'](**setup_args)\n-    if \'pkg_resources\' in sys.modules:\n-        reload(sys.modules[\'pkg_resources\'])\n-    import pkg_resources\n-    # This does not (always?) update the default working set.  We will\n-    # do it.\n-    for path in sys.path:\n-        if path not in pkg_resources.working_set.entries:\n-            pkg_resources.working_set.add_entry(path)\n-\n-cmd = [quote(sys.executable),\n-       \'-c\',\n-       quote(\'from setuptools.command.easy_install import main; main()\'),\n-       \'-mqNxd\',\n-       quote(eggs_dir)]\n-\n-if not has_broken_dash_S:\n-    cmd.insert(1, \'-S\')\n-\n-find_links = options.download_base\n-if not find_links:\n-    find_links = os.environ.get(\'bootstrap-testing-find-links\')\n-if find_links:\n-    cmd.extend([\'-f\', quote(find_links)])\n-\n-if options.use_distribute:\n-    setup_requirement = \'distribute\'\n-else:\n-    setup_requirement = \'setuptools\'\n-ws = pkg_resources.working_set\n-setup_requirement_path = ws.find(\n-    pkg_resources.Requirement.parse(setup_requirement)).location\n-env = dict(\n-    os.environ,\n-    PYTHONPATH=setup_requirement_path)\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setup_requirement_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-if is_jython:\n-    import subprocess\n-    exitcode = subprocess.Popen(cmd, env=env).wait()\n-else:  # Windows prefers this, apparently; otherwise we would prefer subprocess\n-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))\n-if exitcode != 0:\n-    sys.stdout.flush()\n-    sys.stderr.flush()\n-    print ("An error occurred when trying to install zc.buildout. "\n-           "Look above this message for any errors that "\n-           "were output by easy_install.")\n-    sys.exit(exitcode)\n-\n-ws.add_entry(eggs_dir)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-zc.buildout.buildout.main(args)\n-if not options.eggs:  # clean up temporary egg directory\n-    shutil.rmtree(eggs_dir)\n'

