Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2018-03-31T01:47:01+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PortalTransforms/commit/7fdfe84c0272148585be0fddcca336de6e516f22

fix importing transforms in py3

Files changed:
M Products/PortalTransforms/transforms/__init__.py

diff --git a/Products/PortalTransforms/transforms/__init__.py b/Products/PortalTransforms/transforms/__init__.py
index b2b5941..a4d9f55 100644
--- a/Products/PortalTransforms/transforms/__init__.py
+++ b/Products/PortalTransforms/transforms/__init__.py
@@ -12,6 +12,7 @@
 # implement the transform, if register needs to fail for now it
 # should raise an ImportError as well (dumb, I know)
 
+from importlib import import_module
 from logging import DEBUG
 from logging import ERROR
 from Products.PortalTransforms.libtransforms.utils import MissingBinary
@@ -19,43 +20,43 @@
 
 
 modules = [
-    'st',             # zopish
-    'rest',           # docutils
-    'word_to_html',   # uno, com, wvware
-    'safe_html',      # extract <body> and remove potentially harmful tags
-    'html_body',      # extract only the contents of the <body> tag
-    'html_to_text',   # re based transform
-    'text_to_html',   # wrap text in a verbatim env
-    'text_pre_to_html',   # wrap text into a pre
-    'pdf_to_html',    # sf.net/projects/pdftohtml
-    'pdf_to_text',    # www.foolabs.com/xpdf
-    'rtf_to_html',    # sf.net/projects/rtf-converter
-    'rtf_to_xml',     # sf.net/projects/rtf2xml
-    'image_to_png',   # transforms any image to a PNG image
-    'image_to_gif',   # transforms any image to a GIF image
-    'image_to_jpeg',  # transforms any image to a JPEG image
-    'image_to_pcx',   # transforms any image to a PCX image
-    'image_to_ppm',   # transforms any image to a PPM image
-    'image_to_tiff',  # transforms any image to a TIFF image
-    'image_to_bmp',   # transforms any image to a BMP image
-    'lynx_dump',      # lynx -dump
-    'python',         # python source files, no dependancies
-    'identity',       # identity transform, no dependancies
+    '.st',             # zopish
+    '.rest',           # docutils
+    '.word_to_html',   # uno, com, wvware
+    '.safe_html',      # extract <body> and remove potentially harmful tags
+    '.html_body',      # extract only the contents of the <body> tag
+    '.html_to_text',   # re based transform
+    '.text_to_html',   # wrap text in a verbatim env
+    '.text_pre_to_html',   # wrap text into a pre
+    '.pdf_to_html',    # sf.net/projects/pdftohtml
+    '.pdf_to_text',    # www.foolabs.com/xpdf
+    '.rtf_to_html',    # sf.net/projects/rtf-converter
+    '.rtf_to_xml',     # sf.net/projects/rtf2xml
+    '.image_to_png',   # transforms any image to a PNG image
+    '.image_to_gif',   # transforms any image to a GIF image
+    '.image_to_jpeg',  # transforms any image to a JPEG image
+    '.image_to_pcx',   # transforms any image to a PCX image
+    '.image_to_ppm',   # transforms any image to a PPM image
+    '.image_to_tiff',  # transforms any image to a TIFF image
+    '.image_to_bmp',   # transforms any image to a BMP image
+    '.lynx_dump',      # lynx -dump
+    '.python',         # python source files, no dependancies
+    '.identity',       # identity transform, no dependancies
     # markdown, depends on
     # http://surfnet.dl.sourceforge.net/sourceforge/python-markdown/markdown-1-5.py
-    'markdown_to_html',
+    '.markdown_to_html',
     # textile, depends on PyTextile
     # http://dom.eav.free.fr/python/textile-mirror-2.0.10.tar.gz
-    'textile_to_html',
-    'web_intelligent_plain_text_to_html',
-    'html_to_web_intelligent_plain_text',
+    '.textile_to_html',
+    '.web_intelligent_plain_text_to_html',
+    '.html_to_web_intelligent_plain_text',
 ]
 
 g = globals()
 transforms = []
 for m in modules:
     try:
-        ns = __import__(m, g, g, None)
+        ns = import_module(m, __name__)
         transforms.append(ns.register())
     except ImportError as e:
         msg = "Problem importing module %s : %s" % (m, e)


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2018-04-01T14:18:00+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PortalTransforms/commit/9cba248e11f6c30aa07630ff554241554a5bdbf3

fix safe_html for py3

Files changed:
M Products/PortalTransforms/transforms/safe_html.py

diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index 9450b71..e14e239 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -2404,7 +2404,7 @@ def convert(self, orig, data, **kwargs):
     def scrub_html(self, orig):
         # append html tag to create a dummy parent for the tree
         html_parser = html.HTMLParser(encoding='utf-8')
-        if '<html' in orig.lower():
+        if b'<html' in orig.lower():
             # full html
             tree = html.fromstring(orig, parser=html_parser)
             strip_outer = bodyfinder
@@ -2429,7 +2429,10 @@ def strip_outer(s):
         valid_tags = self.settings.valid_tags
         nasty_tags = [
             tag for tag in self.settings.nasty_tags if tag not in valid_tags]
-        safe_attrs = [attr.decode() for attr in html.defs.safe_attrs]
+        if six.PY2:
+            safe_attrs = [attr.decode() for attr in html.defs.safe_attrs]
+        else:
+            safe_attrs = [i for i in html.defs.safe_attrs]
         safe_attrs.extend(
             self.settings.custom_attributes)
         remove_script = 'script' in nasty_tags and 1 or 0


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2018-04-03T23:33:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/6d0e3c1f78c58aa450d7682989993d9a239a6a36

Merge pull request #31 from plone/python3

Python3

Files changed:
M Products/PortalTransforms/transforms/__init__.py
M Products/PortalTransforms/transforms/safe_html.py

diff --git a/Products/PortalTransforms/transforms/__init__.py b/Products/PortalTransforms/transforms/__init__.py
index b2b5941..a4d9f55 100644
--- a/Products/PortalTransforms/transforms/__init__.py
+++ b/Products/PortalTransforms/transforms/__init__.py
@@ -12,6 +12,7 @@
 # implement the transform, if register needs to fail for now it
 # should raise an ImportError as well (dumb, I know)
 
+from importlib import import_module
 from logging import DEBUG
 from logging import ERROR
 from Products.PortalTransforms.libtransforms.utils import MissingBinary
@@ -19,43 +20,43 @@
 
 
 modules = [
-    'st',             # zopish
-    'rest',           # docutils
-    'word_to_html',   # uno, com, wvware
-    'safe_html',      # extract <body> and remove potentially harmful tags
-    'html_body',      # extract only the contents of the <body> tag
-    'html_to_text',   # re based transform
-    'text_to_html',   # wrap text in a verbatim env
-    'text_pre_to_html',   # wrap text into a pre
-    'pdf_to_html',    # sf.net/projects/pdftohtml
-    'pdf_to_text',    # www.foolabs.com/xpdf
-    'rtf_to_html',    # sf.net/projects/rtf-converter
-    'rtf_to_xml',     # sf.net/projects/rtf2xml
-    'image_to_png',   # transforms any image to a PNG image
-    'image_to_gif',   # transforms any image to a GIF image
-    'image_to_jpeg',  # transforms any image to a JPEG image
-    'image_to_pcx',   # transforms any image to a PCX image
-    'image_to_ppm',   # transforms any image to a PPM image
-    'image_to_tiff',  # transforms any image to a TIFF image
-    'image_to_bmp',   # transforms any image to a BMP image
-    'lynx_dump',      # lynx -dump
-    'python',         # python source files, no dependancies
-    'identity',       # identity transform, no dependancies
+    '.st',             # zopish
+    '.rest',           # docutils
+    '.word_to_html',   # uno, com, wvware
+    '.safe_html',      # extract <body> and remove potentially harmful tags
+    '.html_body',      # extract only the contents of the <body> tag
+    '.html_to_text',   # re based transform
+    '.text_to_html',   # wrap text in a verbatim env
+    '.text_pre_to_html',   # wrap text into a pre
+    '.pdf_to_html',    # sf.net/projects/pdftohtml
+    '.pdf_to_text',    # www.foolabs.com/xpdf
+    '.rtf_to_html',    # sf.net/projects/rtf-converter
+    '.rtf_to_xml',     # sf.net/projects/rtf2xml
+    '.image_to_png',   # transforms any image to a PNG image
+    '.image_to_gif',   # transforms any image to a GIF image
+    '.image_to_jpeg',  # transforms any image to a JPEG image
+    '.image_to_pcx',   # transforms any image to a PCX image
+    '.image_to_ppm',   # transforms any image to a PPM image
+    '.image_to_tiff',  # transforms any image to a TIFF image
+    '.image_to_bmp',   # transforms any image to a BMP image
+    '.lynx_dump',      # lynx -dump
+    '.python',         # python source files, no dependancies
+    '.identity',       # identity transform, no dependancies
     # markdown, depends on
     # http://surfnet.dl.sourceforge.net/sourceforge/python-markdown/markdown-1-5.py
-    'markdown_to_html',
+    '.markdown_to_html',
     # textile, depends on PyTextile
     # http://dom.eav.free.fr/python/textile-mirror-2.0.10.tar.gz
-    'textile_to_html',
-    'web_intelligent_plain_text_to_html',
-    'html_to_web_intelligent_plain_text',
+    '.textile_to_html',
+    '.web_intelligent_plain_text_to_html',
+    '.html_to_web_intelligent_plain_text',
 ]
 
 g = globals()
 transforms = []
 for m in modules:
     try:
-        ns = __import__(m, g, g, None)
+        ns = import_module(m, __name__)
         transforms.append(ns.register())
     except ImportError as e:
         msg = "Problem importing module %s : %s" % (m, e)
diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index 9450b71..e14e239 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -2404,7 +2404,7 @@ def convert(self, orig, data, **kwargs):
     def scrub_html(self, orig):
         # append html tag to create a dummy parent for the tree
         html_parser = html.HTMLParser(encoding='utf-8')
-        if '<html' in orig.lower():
+        if b'<html' in orig.lower():
             # full html
             tree = html.fromstring(orig, parser=html_parser)
             strip_outer = bodyfinder
@@ -2429,7 +2429,10 @@ def strip_outer(s):
         valid_tags = self.settings.valid_tags
         nasty_tags = [
             tag for tag in self.settings.nasty_tags if tag not in valid_tags]
-        safe_attrs = [attr.decode() for attr in html.defs.safe_attrs]
+        if six.PY2:
+            safe_attrs = [attr.decode() for attr in html.defs.safe_attrs]
+        else:
+            safe_attrs = [i for i in html.defs.safe_attrs]
         safe_attrs.extend(
             self.settings.custom_attributes)
         remove_script = 'script' in nasty_tags and 1 or 0


