Repository: plone.app.ldap


Branch: refs/heads/master
Date: 2019-09-18T15:50:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.ldap/commit/bad73d5734c207669486284bf4023aa6c5432300

Simplified test buildout and Travis setup.

There is no need for code-analysis (which will just fail to be installed, most likely).
And i18ndude is not used.
And let's just use a setuptools and zc.buildout from this year.
I triggered a build today and it completely failed:
https://travis-ci.org/plone/plone.app.ldap/builds/586513573

Files changed:
A buildout.cfg
A requirements.txt
M .travis.yml
D bootstrap.py
D travis.cfg

b'diff --git a/.travis.yml b/.travis.yml\nindex 586f7af..d70e6f9 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,32 +1,27 @@\n-sudo: false\n+dist: bionic\n language: python\n-python: 2.7\n+sudo: false\n cache:\n+  pip: true\n   directories:\n-    - buildout-cache\n+  - eggs\n+python:\n+  - "2.7"\n env:\n   - PLONE_VERSION=4.2\n   - PLONE_VERSION=4.3\n   - PLONE_VERSION=5.0\n+  - PLONE_VERSION=5.1\n matrix:\n   allow_failures:\n-  - env: PLONE_VERSION=5.0\n+  - env: PLONE_VERSION=5.1\n   fast_finish: true\n+before_install:\n+  - virtualenv -p `which python` .\n+  - bin/pip install -r requirements.txt\n+  - sed -ie "s#4.3-latest#$PLONE_VERSION-latest#" buildout.cfg\n+  - bin/buildout annotate\n install:\n-  - sed -ie "s#travis-4.3#travis-$PLONE_VERSION#" travis.cfg\n-  - mkdir -p buildout-cache/downloads\n-  - python bootstrap.py -c travis.cfg\n-  - bin/buildout -c travis.cfg annotate\n-# Try this twice, to avoid a possible problem, on Plone 4.3.7 at\n-# least, with setuptools as directory instead of zipped egg.\n-  - bin/buildout -c travis.cfg -Nq || true\n-  - bin/buildout -c travis.cfg -Nq\n+  - bin/buildout install test\n script:\n-  - bin/code-analysis\n   - bin/test\n-after_success:\n-  - bin/createcoverage --output-dir=htmlcov\n-  - pip install -q coveralls\n-  - coveralls\n-notifications:\n-  irc: irc.freenode.org#plone-testing\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a459921..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\nnew file mode 100644\nindex 0000000..3b4fce2\n--- /dev/null\n+++ b/buildout.cfg\n@@ -0,0 +1,38 @@\n+[buildout]\n+extends = https://dist.plone.org/release/4.3-latest/versions.cfg\n+show-picked-versions = true\n+newest = false\n+develop = .\n+parts =\n+    instance\n+    test\n+    omelette\n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    plone.app.ldap\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs =\n+    ${instance:eggs}\n+    plone.app.ldap [test]\n+defaults = [\'-s\', \'plone.app.ldap\', \'--auto-color\', \'--auto-progress\']\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${test:eggs}\n+\n+[versions]\n+# Don\'t use a released version of plone.app.ldap\n+plone.app.ldap =\n+# Be happy with the setuptools and zc.buildout that we have.\n+setuptools =\n+zc.buildout =\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..cde70a3\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,2 @@\n+setuptools==41.2.0\n+zc.buildout==2.13.2\ndiff --git a/travis.cfg b/travis.cfg\ndeleted file mode 100644\nindex 5f384c9..0000000\n--- a/travis.cfg\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-[buildout]\n-extends =\n-    https://raw.github.com/collective/buildout.plonetest/master/travis-4.3.x.cfg\n-    https://raw.github.com/collective/buildout.plonetest/master/qa.cfg\n-\n-package-name = plone.app.ldap\n-package-extras = [test]\n-\n-parts +=\n-    code-analysis\n-    createcoverage\n-    i18ndude\n-    omelette\n-    rebuild_i18n-sh\n-\n-[code-analysis]\n-recipe = plone.recipe.codeanalysis\n-directory = ${buildout:directory}/plone/app/ldap\n-clean-lines = True\n-deprecated-aliases = True\n-flake8-extensions =\n-    flake8-blind-except\n-    flake8-coding\n-    flake8-debugger\n-    flake8-quotes\n-flake8-ignore = E501\n-multiprocessing = True\n-return-status-codes = False\n-\n-[i18ndude]\n-recipe = zc.recipe.egg\n-eggs = i18ndude\n-\n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n-\n-[versions]\n-plone.recipe.codeanalysis = 2.0b1\n-coverage = 4.0.1\n-# use latest version of setuptools\n-setuptools =\n'

Repository: plone.app.ldap


Branch: refs/heads/master
Date: 2019-09-18T16:03:17+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.ldap/commit/6314b63346c031fa2224d0f5f975ff4b1a125e5c

Added dependencies so Plone 5 can start.

Note that these dependencies {zope,five}.formlib and plone.app.form,
are in Plon 4.2 and 4.3 by default, so nothing changes there.

Removed the Plone 5 classifiers, because there is a test failure,
and it can't have worked before.

Also removed the Python 2.6 classifier, because we really do not test with that anymore.

Files changed:
M .travis.yml
M CHANGES.rst
M setup.py

b'diff --git a/.travis.yml b/.travis.yml\nindex d70e6f9..630a004 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -11,10 +11,9 @@ env:\n   - PLONE_VERSION=4.2\n   - PLONE_VERSION=4.3\n   - PLONE_VERSION=5.0\n-  - PLONE_VERSION=5.1\n matrix:\n   allow_failures:\n-  - env: PLONE_VERSION=5.1\n+  - env: PLONE_VERSION=5.0\n   fast_finish: true\n before_install:\n   - virtualenv -p `which python` .\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex fefc7ef..5a3e1b8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Added dependencies so Plone 5 can start.\n+  Removed the Plone 5 classifiers, because there is a test failure,\n+  and it can\'t have worked before.  [maurits]\n \n \n 1.4.3 (2018-04-08)\ndiff --git a/setup.py b/setup.py\nindex d8b5f53..5c72602 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -11,13 +11,11 @@\n       long_description=(open("README.rst").read() + "\\n" +\n                         open("CHANGES.rst").read()),\n       classifiers=[\n+          "Development Status :: 6 - Mature",\n           "Framework :: Plone",\n           "Framework :: Plone :: 4.2",\n           "Framework :: Plone :: 4.3",\n-          "Framework :: Plone :: 5.0",\n-          "Framework :: Plone :: 5.1",\n           "Programming Language :: Python",\n-          "Programming Language :: Python :: 2.6",\n           "Programming Language :: Python :: 2.7",\n           "Topic :: Software Development :: Libraries :: Python Modules",\n           "Topic :: System :: Systems Administration :: Authentication/Directory :: LDAP",\n@@ -27,7 +25,7 @@\n       author_email=\'wichert@simplon.biz\',\n       maintainer=\'Kevin Teague\',\n       maintainer_email=\'kevin@bud.ca\',\n-      url=\'https://pypi.python.org/pypi/plone.app.ldap\',\n+      url=\'https://pypi.org/project/plone.app.ldap/\',\n       license=\'GPL\',\n       packages=find_packages(exclude=[\'ez_setup\']),\n       namespace_packages=[\'plone\', \'plone.app\'],\n@@ -43,6 +41,9 @@\n           \'setuptools\',\n           \'six\',\n           \'zope.component\',\n+          \'plone.app.form\',\n+          \'five.formlib\',\n+          \'zope.formlib\',\n           \'zope.i18nmessageid\',\n           \'zope.interface\',\n           \'zope.lifecycleevent\',\n'

Repository: plone.app.ldap


Branch: refs/heads/master
Date: 2019-09-18T16:34:03+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.ldap/commit/32d435f6bd27360fcd7a7d6ec7a22c7335c8b088

Use older zc.buildout and setuptools versions, so Plone 4.2 still works.

Files changed:
M requirements.txt

b'diff --git a/requirements.txt b/requirements.txt\nindex cde70a3..c3d47fd 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,2 +1,2 @@\n-setuptools==41.2.0\n-zc.buildout==2.13.2\n+setuptools==33.1.1\n+zc.buildout==2.9.6\n'

Repository: plone.app.ldap


Branch: refs/heads/master
Date: 2019-09-18T22:10:37+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.ldap/commit/e52343782bd3fc8b3f1ad48c5db1dc98166aa8c8

We need more version pins so the buildout succeeds for 4.2-5.0.

In Plone 5.0 you do get a ComponentLookupError in one test.
We are already allowing test failures on 5.0 in Travis.
But now the buildout at least finishes, and five of the six tests pass.

Error in test test_controlpanel_has_view (plone.app.ldap.tests.test_controlpanel.ControlPanelTestCase)
Traceback (most recent call last):
  File "/usr/local/Cellar/python@2/2.7.16/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/case.py", line 329, in run
    testMethod()
  File "/Users/maurits/clients/vmm/hoofdsite-9151/checkouts/plone.app.ldap/plone/app/ldap/tests/test_controlpanel.py", line 22, in test_controlpanel_has_view
    self.assertTrue(view())
  File "/Users/maurits/shared-eggs/cp27m/zope.formlib-4.3.0-py2.7.egg/zope/formlib/form.py", line 868, in __call__
    self.update()
  File "/Users/maurits/shared-eggs/cp27m/five.formlib-1.0.4-py2.7.egg/five/formlib/formbase.py", line 50, in update
    super(FiveFormlibMixin, self).update()
  File "/Users/maurits/shared-eggs/cp27m/zope.formlib-4.3.0-py2.7.egg/zope/formlib/form.py", line 831, in update
    self.setUpWidgets()
  File "/Users/maurits/shared-eggs/cp27m/zope.formlib-4.3.0-py2.7.egg/zope/formlib/form.py", line 906, in setUpWidgets
    adapters=self.adapters, ignore_request=ignore_request
  File "/Users/maurits/shared-eggs/cp27m/zope.formlib-4.3.0-py2.7.egg/zope/formlib/form.py", line 407, in setUpEditWidgets
    widget = _createWidget(form_field, field, request, iface)
  File "/Users/maurits/shared-eggs/cp27m/zope.formlib-4.3.0-py2.7.egg/zope/formlib/form.py", line 337, in _createWidget
    return component.getMultiAdapter((field, request), iface)
  File "/Users/maurits/shared-eggs/cp27m/zope.component-3.9.5-py2.7.egg/zope/component/_api.py", line 109, in getMultiAdapter
    raise ComponentLookupError(objects, interface, name)
ComponentLookupError: ((&lt;zope.schema._field.Choice object at 0x10f669f10&gt;, &lt;HTTPRequest, URL=http://nohost&gt;), &lt;InterfaceClass zope.formlib.interfaces.IInputWidget&gt;, u'')

Files changed:
M buildout.cfg

b'diff --git a/buildout.cfg b/buildout.cfg\nindex 3b4fce2..7b1251c 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -36,3 +36,17 @@ plone.app.ldap =\n # Be happy with the setuptools and zc.buildout that we have.\n setuptools =\n zc.buildout =\n+\n+# Plone 5 has no pins for these two, and we would get too new versions.\n+# These pins work for 4.2-5.0.\n+five.formlib = 1.0.4\n+zope.formlib = 4.3.0\n+\n+# Rest.  In some cases newer versions would pull in Zope 4.\n+dataflake.fakeldap = 1.1\n+Products.LDAPMultiPlugins = 1.14\n+Products.LDAPUserFolder = 2.27\n+Products.PloneLDAP = 1.2\n+pyasn1 = 0.4.7\n+pyasn1-modules = 0.2.6\n+python-ldap = 3.2.0\n'

Repository: plone.app.ldap


Branch: refs/heads/master
Date: 2019-09-18T22:41:48+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.ldap/commit/fa490dcd44f16d064a27b2f5cafbb1c9bd841857

Added find-links to find elementtree on Plone 4.2.

Files changed:
M buildout.cfg

b'diff --git a/buildout.cfg b/buildout.cfg\nindex 7b1251c..f2a4559 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,5 +1,7 @@\n [buildout]\n extends = https://dist.plone.org/release/4.3-latest/versions.cfg\n+# Needed to find elementtree for Plone 4.2:\n+find-links = https://dist.plone.org/thirdparty/\n show-picked-versions = true\n newest = false\n develop = .\n'

Repository: plone.app.ldap


Branch: refs/heads/master
Date: 2019-09-19T16:11:41+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.ldap/commit/050b647d5c86c89ee66cf94c0fe5f2ae4e45abba

Merge pull request #36 from plone/maurits/fix-travis

Fix Travis.

Files changed:
A buildout.cfg
A requirements.txt
M .travis.yml
M CHANGES.rst
M setup.py
D bootstrap.py
D travis.cfg

b'diff --git a/.travis.yml b/.travis.yml\nindex 586f7af..630a004 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,9 +1,12 @@\n-sudo: false\n+dist: bionic\n language: python\n-python: 2.7\n+sudo: false\n cache:\n+  pip: true\n   directories:\n-    - buildout-cache\n+  - eggs\n+python:\n+  - "2.7"\n env:\n   - PLONE_VERSION=4.2\n   - PLONE_VERSION=4.3\n@@ -12,21 +15,12 @@ matrix:\n   allow_failures:\n   - env: PLONE_VERSION=5.0\n   fast_finish: true\n+before_install:\n+  - virtualenv -p `which python` .\n+  - bin/pip install -r requirements.txt\n+  - sed -ie "s#4.3-latest#$PLONE_VERSION-latest#" buildout.cfg\n+  - bin/buildout annotate\n install:\n-  - sed -ie "s#travis-4.3#travis-$PLONE_VERSION#" travis.cfg\n-  - mkdir -p buildout-cache/downloads\n-  - python bootstrap.py -c travis.cfg\n-  - bin/buildout -c travis.cfg annotate\n-# Try this twice, to avoid a possible problem, on Plone 4.3.7 at\n-# least, with setuptools as directory instead of zipped egg.\n-  - bin/buildout -c travis.cfg -Nq || true\n-  - bin/buildout -c travis.cfg -Nq\n+  - bin/buildout install test\n script:\n-  - bin/code-analysis\n   - bin/test\n-after_success:\n-  - bin/createcoverage --output-dir=htmlcov\n-  - pip install -q coveralls\n-  - coveralls\n-notifications:\n-  irc: irc.freenode.org#plone-testing\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex fefc7ef..5a3e1b8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Added dependencies so Plone 5 can start.\n+  Removed the Plone 5 classifiers, because there is a test failure,\n+  and it can\'t have worked before.  [maurits]\n \n \n 1.4.3 (2018-04-08)\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a459921..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\nnew file mode 100644\nindex 0000000..f2a4559\n--- /dev/null\n+++ b/buildout.cfg\n@@ -0,0 +1,54 @@\n+[buildout]\n+extends = https://dist.plone.org/release/4.3-latest/versions.cfg\n+# Needed to find elementtree for Plone 4.2:\n+find-links = https://dist.plone.org/thirdparty/\n+show-picked-versions = true\n+newest = false\n+develop = .\n+parts =\n+    instance\n+    test\n+    omelette\n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    plone.app.ldap\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs =\n+    ${instance:eggs}\n+    plone.app.ldap [test]\n+defaults = [\'-s\', \'plone.app.ldap\', \'--auto-color\', \'--auto-progress\']\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${test:eggs}\n+\n+[versions]\n+# Don\'t use a released version of plone.app.ldap\n+plone.app.ldap =\n+# Be happy with the setuptools and zc.buildout that we have.\n+setuptools =\n+zc.buildout =\n+\n+# Plone 5 has no pins for these two, and we would get too new versions.\n+# These pins work for 4.2-5.0.\n+five.formlib = 1.0.4\n+zope.formlib = 4.3.0\n+\n+# Rest.  In some cases newer versions would pull in Zope 4.\n+dataflake.fakeldap = 1.1\n+Products.LDAPMultiPlugins = 1.14\n+Products.LDAPUserFolder = 2.27\n+Products.PloneLDAP = 1.2\n+pyasn1 = 0.4.7\n+pyasn1-modules = 0.2.6\n+python-ldap = 3.2.0\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..c3d47fd\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,2 @@\n+setuptools==33.1.1\n+zc.buildout==2.9.6\ndiff --git a/setup.py b/setup.py\nindex d8b5f53..5c72602 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -11,13 +11,11 @@\n       long_description=(open("README.rst").read() + "\\n" +\n                         open("CHANGES.rst").read()),\n       classifiers=[\n+          "Development Status :: 6 - Mature",\n           "Framework :: Plone",\n           "Framework :: Plone :: 4.2",\n           "Framework :: Plone :: 4.3",\n-          "Framework :: Plone :: 5.0",\n-          "Framework :: Plone :: 5.1",\n           "Programming Language :: Python",\n-          "Programming Language :: Python :: 2.6",\n           "Programming Language :: Python :: 2.7",\n           "Topic :: Software Development :: Libraries :: Python Modules",\n           "Topic :: System :: Systems Administration :: Authentication/Directory :: LDAP",\n@@ -27,7 +25,7 @@\n       author_email=\'wichert@simplon.biz\',\n       maintainer=\'Kevin Teague\',\n       maintainer_email=\'kevin@bud.ca\',\n-      url=\'https://pypi.python.org/pypi/plone.app.ldap\',\n+      url=\'https://pypi.org/project/plone.app.ldap/\',\n       license=\'GPL\',\n       packages=find_packages(exclude=[\'ez_setup\']),\n       namespace_packages=[\'plone\', \'plone.app\'],\n@@ -43,6 +41,9 @@\n           \'setuptools\',\n           \'six\',\n           \'zope.component\',\n+          \'plone.app.form\',\n+          \'five.formlib\',\n+          \'zope.formlib\',\n           \'zope.i18nmessageid\',\n           \'zope.interface\',\n           \'zope.lifecycleevent\',\ndiff --git a/travis.cfg b/travis.cfg\ndeleted file mode 100644\nindex 5f384c9..0000000\n--- a/travis.cfg\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-[buildout]\n-extends =\n-    https://raw.github.com/collective/buildout.plonetest/master/travis-4.3.x.cfg\n-    https://raw.github.com/collective/buildout.plonetest/master/qa.cfg\n-\n-package-name = plone.app.ldap\n-package-extras = [test]\n-\n-parts +=\n-    code-analysis\n-    createcoverage\n-    i18ndude\n-    omelette\n-    rebuild_i18n-sh\n-\n-[code-analysis]\n-recipe = plone.recipe.codeanalysis\n-directory = ${buildout:directory}/plone/app/ldap\n-clean-lines = True\n-deprecated-aliases = True\n-flake8-extensions =\n-    flake8-blind-except\n-    flake8-coding\n-    flake8-debugger\n-    flake8-quotes\n-flake8-ignore = E501\n-multiprocessing = True\n-return-status-codes = False\n-\n-[i18ndude]\n-recipe = zc.recipe.egg\n-eggs = i18ndude\n-\n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n-\n-[versions]\n-plone.recipe.codeanalysis = 2.0b1\n-coverage = 4.0.1\n-# use latest version of setuptools\n-setuptools =\n'

