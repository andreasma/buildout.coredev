Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-09-20T23:36:27+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.subrequest/commit/fa4315b9a8594f1f9af4552bf9e214f32ed3e03c

Remove unused and outdated file

Files changed:
D bootstrap.py

b'diff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex bdbed48..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,116 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os, shutil, sys, tempfile, urllib2\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-is_jython = sys.platform.startswith(\'java\')\n-\n-# parsing arguments\n-parser = OptionParser()\n-parser.add_option("-v", "--version", dest="version",\n-                          help="use a specific zc.buildout version")\n-parser.add_option("-d", "--distribute",\n-                   action="store_true", dest="distribute", default=False,\n-                   help="Use Disribute rather than Setuptools.")\n-\n-parser.add_option("-c", None, action="store", dest="config_file",\n-                   help=("Specify the path to the buildout configuration "\n-                         "file to be used."))\n-\n-options, args = parser.parse_args()\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args += [\'-c\', options.config_file]\n-\n-if options.version is not None:\n-    VERSION = \'==%s\' % options.version\n-else:\n-    VERSION = \'\'\n-\n-USE_DISTRIBUTE = options.distribute\n-args = args + [\'bootstrap\']\n-\n-try:\n-    import pkg_resources\n-    import setuptools\n-    if not hasattr(pkg_resources, \'_distribute\'):\n-        raise ImportError\n-except ImportError:\n-    ez = {}\n-    if USE_DISTRIBUTE:\n-        exec urllib2.urlopen(\'http://python-distribute.org/distribute_setup.py\'\n-                         ).read() in ez\n-        ez[\'use_setuptools\'](to_dir=tmpeggs, download_delay=0, no_fake=True)\n-    else:\n-        exec urllib2.urlopen(\'http://peak.telecommunity.com/dist/ez_setup.py\'\n-                             ).read() in ez\n-        ez[\'use_setuptools\'](to_dir=tmpeggs, download_delay=0)\n-\n-    reload(sys.modules[\'pkg_resources\'])\n-    import pkg_resources\n-\n-if sys.platform == \'win32\':\n-    def quote(c):\n-        if \' \' in c:\n-            return \'"%s"\' % c # work around spawn lamosity on windows\n-        else:\n-            return c\n-else:\n-    def quote (c):\n-        return c\n-\n-cmd = \'from setuptools.command.easy_install import main; main()\'\n-ws  = pkg_resources.working_set\n-\n-if USE_DISTRIBUTE:\n-    requirement = \'distribute\'\n-else:\n-    requirement = \'setuptools\'\n-\n-if is_jython:\n-    import subprocess\n-\n-    assert subprocess.Popen([sys.executable] + [\'-c\', quote(cmd), \'-mqNxd\',\n-           quote(tmpeggs), \'zc.buildout\' + VERSION],\n-           env=dict(os.environ,\n-               PYTHONPATH=\n-               ws.find(pkg_resources.Requirement.parse(requirement)).location\n-               ),\n-           ).wait() == 0\n-\n-else:\n-    assert os.spawnle(\n-        os.P_WAIT, sys.executable, quote (sys.executable),\n-        \'-c\', quote (cmd), \'-mqNxd\', quote (tmpeggs), \'zc.buildout\' + VERSION,\n-        dict(os.environ,\n-            PYTHONPATH=\n-            ws.find(pkg_resources.Requirement.parse(requirement)).location\n-            ),\n-        ) == 0\n-\n-ws.add_entry(tmpeggs)\n-ws.require(\'zc.buildout\' + VERSION)\n-import zc.buildout.buildout\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\n'

