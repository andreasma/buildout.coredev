Repository: plone.app.discussion


Branch: refs/heads/3.x
Date: 2018-07-10T13:35:44+02:00
Author: Markus Hilbert (iham) <markus.hilbert@iham.at>
Commit: https://github.com/plone/plone.app.discussion/commit/0afaa59c0fd94bfc14c5bb2196e83018715a79bd

Fixed tests when IRichText behavior is used.

Files changed:
M CHANGES.rst
M plone/app/discussion/browser/comment.py
M plone/app/discussion/browser/comments.py
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/conversation.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/testing.py
M plone/app/discussion/tests/functional_test_comments.txt
M plone/app/discussion/tests/test_catalog.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_contentrules.py
M plone/app/discussion/tests/test_controlpanel.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_events.py
M plone/app/discussion/tests/test_functional.py
M plone/app/discussion/tests/test_indexers.py
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_notifications.py
M plone/app/discussion/tests/test_robot.py
M plone/app/discussion/tests/test_workflow.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 11af6f7d..c8c5f87c 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,6 +1,25 @@\n Changelog\n =========\n \n+3.0.7 (unreleased)\n+------------------\n+\n+Breaking changes:\n+\n+- *add item here*\n+\n+New features:\n+\n+- *add item here*\n+\n+Bug fixes:\n+\n+- Fixed tests when IRichText behavior is used.\n+  IRichText -> IRichTextBehavior\n+  This is a follow up to `issue 476 <https://github.com/plone/plone.app.contenttypes/issues/476>`_.\n+  [iham]\n+\n+\n 3.0.6 (2018-06-18)\n ------------------\n \ndiff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex 6497fecb..590e8984 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -2,7 +2,6 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from .comments import CommentForm\n from plone.app.discussion import _\n from plone.registry.interfaces import IRegistry\n from plone.z3cform.layout import wrap_form\n@@ -14,6 +13,7 @@\n from zope.component import getUtility\n from zope.event import notify\n from zope.lifecycleevent import ObjectModifiedEvent\n+from .comments import CommentForm\n \n \n class View(BrowserView):\ndiff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 2689c971..b0cfb399 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -32,33 +32,32 @@\n from zope.i18nmessageid import Message\n from zope.interface import alsoProvides\n \n-\n import six\n \n \n COMMENT_DESCRIPTION_PLAIN_TEXT = _(\n     u\'comment_description_plain_text\',\n     default=u\'You can add a comment by filling out the form below. \'\n-            u\'Plain text formatting.\'\n+            u\'Plain text formatting.\',\n )\n \n COMMENT_DESCRIPTION_MARKDOWN = _(\n     u\'comment_description_markdown\',\n     default=u\'You can add a comment by filling out the form below. \'\n             u\'Plain text formatting. You can use the Markdown syntax for \'\n-            u\'links and images.\'\n+            u\'links and images.\',\n )\n \n COMMENT_DESCRIPTION_INTELLIGENT_TEXT = _(\n     u\'comment_description_intelligent_text\',\n     default=u\'You can add a comment by filling out the form below. \'\n             u\'Plain text formatting. Web and email addresses are \'\n-            u\'transformed into clickable links.\'\n+            u\'transformed into clickable links.\',\n )\n \n COMMENT_DESCRIPTION_MODERATION_ENABLED = _(\n     u\'comment_description_moderation_enabled\',\n-    default=u\'Comments are moderated.\'\n+    default=u\'Comments are moderated.\',\n )\n \n \n@@ -178,11 +177,11 @@ def get_author(self, data):\n             author_name = fullname\n             if email and isinstance(email, str):\n                 email = six.text_type(email, \'utf-8\')\n-            # XXX: according to IComment interface author_email must not be\n+            # XXX: according to IComment interface author_email must not be  # noqa T000\n             # set for logged in users, cite:\n             # \'for anonymous comments only, set to None for logged in comments\'\n             author_email = email\n-            # /XXX\n+            # /XXX  # noqa T000\n \n         return author_name, author_email\n \n@@ -229,7 +228,7 @@ def create_comment(self, data):\n             raise Unauthorized(\n                 u\'Anonymous user tries to post a comment, but anonymous \'\n                 u\'commenting is disabled. Or user does not have the \'\n-                u"\'reply to item\' permission."\n+                u"\'reply to item\' permission.",\n             )\n \n         return comment\n@@ -241,10 +240,10 @@ def handleComment(self, action):\n \n         # Check if conversation is enabled on this content object\n         if not self.__parent__.restrictedTraverse(\n-            \'@@conversation_view\'\n+            \'@@conversation_view\',\n         ).enabled():\n             raise Unauthorized(\n-                \'Discussion is not enabled for this content object.\'\n+                \'Discussion is not enabled for this content object.\',\n             )\n \n         # Validation form\n@@ -294,7 +293,7 @@ def handleComment(self, action):\n         comment_review_state = workflowTool.getInfoFor(\n             comment,\n             \'review_state\',\n-            None\n+            None,\n         )\n         if comment_review_state == \'pending\' and not can_review:\n             # Show info message when comment moderation is enabled\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex 65bcce7e..3c88ebe3 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -34,7 +34,7 @@ class DiscussionSettingsEditForm(controlpanel.RegistryEditForm):\n                 u\'To enable the moderation workflow for comments, \'\n                 u\'go to the Types Control Panel, choose \'\n                 u\'"Comment" and set workflow to \'\n-                u\'"Comment Review Workflow".\'\n+                u\'"Comment Review Workflow".\',\n     )\n \n     def updateFields(self):\n@@ -68,10 +68,10 @@ def updateWidgets(self):\n         self.widgets[\'anonymous_comments\'].label = _(u\'Anonymous Comments\')\n         self.widgets[\'show_commenter_image\'].label = _(u\'Commenter Image\')\n         self.widgets[\'moderator_notification_enabled\'].label = _(\n-            u\'Moderator Email Notification\'\n+            u\'Moderator Email Notification\',\n         )\n         self.widgets[\'user_notification_enabled\'].label = _(\n-            u\'User Email Notification\'\n+            u\'User Email Notification\',\n         )\n \n     @button.buttonAndHandler(_(\'Save\'), name=None)\n@@ -92,8 +92,8 @@ def handleCancel(self, action):\n         self.request.response.redirect(\n             \'{0}/{1}\'.format(\n                 self.context.absolute_url(),\n-                self.control_panel_view\n-            )\n+                self.control_panel_view,\n+            ),\n         )\n \n \ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 97c5dc79..6bbc760a 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -76,7 +76,9 @@ def creator(object):\n @indexer(IComment)\n def description(object):\n     # Return the first 25 words of the comment text and append \' [...]\'\n-    text = \' \'.join(object.getText(targetMimetype=\'text/plain\').split()[:MAX_DESCRIPTION])\n+    text = \' \'.join(\n+        object.getText(targetMimetype=\'text/plain\').split()[:MAX_DESCRIPTION],\n+    )\n     if len(object.getText().split()) > 25:\n         text += \' [...]\'\n     return text\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 33d77f43..7b960071 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -38,8 +38,6 @@\n from zope.interface import implementer\n \n import logging\n-\n-\n import six\n \n \n@@ -120,7 +118,7 @@ def __init__(self):\n             aclpath = [x for x in user.getPhysicalPath() if x]\n             self._owner = (aclpath, user.getId(),)\n             self.__ac_local_roles__ = {\n-                user.getId(): [\'Owner\']\n+                user.getId(): [\'Owner\'],\n             }\n \n     @property\n@@ -164,7 +162,11 @@ def getText(self, targetMimetype=None):\n             msg = u\'Transform "{0}" => "{1}" not available. Failed to \' \\\n                   u\'transform comment "{2}".\'\n             logger.error(\n-                msg.format(sourceMimetype, targetMimetype, self.absolute_url())\n+                msg.format(\n+                    sourceMimetype,\n+                    targetMimetype,\n+                    self.absolute_url(),\n+                ),\n             )\n             return text\n \n@@ -176,10 +178,12 @@ def Title(self):\n \n         if not self.author_name:\n             author_name = translate(\n-                Message(_(\n-                    u\'label_anonymous\',\n-                    default=u\'Anonymous\'\n-                ))\n+                Message(\n+                    _(\n+                        u\'label_anonymous\',\n+                        default=u\'Anonymous\',\n+                    ),\n+                ),\n             )\n         else:\n             author_name = self.author_name\n@@ -286,11 +290,11 @@ def notify_content_object_moved(obj, event):\n     old_path = \'/\'.join(\n         event.oldParent.getPhysicalPath() +\n         (event.oldName,) +\n-        moved_path\n+        moved_path,\n     )\n     brains = catalog.searchResults(dict(\n         path={\'query\': old_path},\n-        portal_type=\'Discussion Item\'\n+        portal_type=\'Discussion Item\',\n     ))\n     for brain in brains:\n         catalog.uncatalog_object(brain.getPath())\n@@ -352,24 +356,28 @@ def notify_user(obj, event):\n             mapping={\n                 \'title\': safe_unicode(content_object.title),\n                 \'link\': content_object.absolute_url() + \'/view#\' + obj.id,\n-                \'text\': obj.text\n-            }\n+                \'text\': obj.text,\n+            },\n         ),\n-        context=obj.REQUEST\n+        context=obj.REQUEST,\n     )\n     for email in emails:\n         # Send email\n         try:\n-            mail_host.send(message,\n-                           email,\n-                           sender,\n-                           subject,\n-                           charset=\'utf-8\')\n+            mail_host.send(\n+                message,\n+                email,\n+                sender,\n+                subject,\n+                charset=\'utf-8\',\n+            )\n         except SMTPException:\n-            logger.error(\'SMTP exception while trying to send an \' +\n-                         \'email from %s to %s\',\n-                         sender,\n-                         email)\n+            logger.error(\n+                \'SMTP exception while trying to send an \' +\n+                \'email from %s to %s\',\n+                sender,\n+                email,\n+            )\n \n \n def notify_moderator(obj, event):\n@@ -422,19 +430,21 @@ def notify_moderator(obj, event):\n                 \'text\': obj.text,\n                 \'link_approve\': link_approve,\n                 \'link_delete\': link_delete,\n-            }\n+            },\n         ),\n-        context=obj.REQUEST\n+        context=obj.REQUEST,\n     )\n \n     # Send email\n     try:\n         mail_host.send(message, mto, sender, subject, charset=\'utf-8\')\n     except SMTPException as e:\n-        logger.error(\'SMTP exception (%s) while trying to send an \' +\n-                     \'email notification to the comment moderator \' +\n-                     \'(from %s to %s, message: %s)\',\n-                     e,\n-                     sender,\n-                     mto,\n-                     message)\n+        logger.error(\n+            \'SMTP exception (%s) while trying to send an \' +\n+            \'email notification to the comment moderator \' +\n+            \'(from %s to %s, message: %s)\',\n+            e,\n+            sender,\n+            mto,\n+            message,\n+        )\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex e7dec306..e616a79e 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -37,10 +37,8 @@\n from zope.lifecycleevent import ObjectCreatedEvent\n from zope.lifecycleevent import ObjectRemovedEvent\n \n-import time\n-\n-\n import six\n+import time\n \n \n @implementer(IConversation, IHideFromBreadcrumbs)\n@@ -420,7 +418,7 @@ def __init__(self, context):\n         self.conversation = aq_parent(self.comment)\n         conversation_has_no_children = not hasattr(\n             self.conversation,\n-            \'_children\'\n+            \'_children\',\n         )\n         if self.conversation is None or conversation_has_no_children:\n             raise TypeError("This adapter doesn\'t know what to do with the "\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex 549eaf97..98ce4359 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -59,7 +59,8 @@ class IConversation(IIterableMapping):\n \n     public_commentators = schema.Set(\n         title=_(\n-            u\'The set of unique commentators (usernames) of published_comments\'\n+            u\'The set of unique commentators (usernames) \'\n+            u\'of published_comments\',\n         ),\n         readonly=True,\n     )\n@@ -174,15 +175,15 @@ class IComment(Interface):\n     text = schema.Text(\n         title=_(\n             u\'label_comment\',\n-            default=u\'Comment\'\n-        )\n+            default=u\'Comment\',\n+        ),\n     )\n \n     user_notification = schema.Bool(\n         title=_(\n-            u\'Notify me of new comments via email.\'\n+            u\'Notify me of new comments via email.\',\n         ),\n-        required=False\n+        required=False,\n     )\n \n     creator = schema.TextLine(title=_(u\'Username of the commenter\'))\n@@ -216,7 +217,7 @@ class IDiscussionSettings(Interface):\n             default=u\'If selected, users are able to post comments on the \'\n                     u\'site. However, you will still need to enable comments \'\n                     u\'for specific content types, folders or content \'\n-                    u\'objects before users will be able to post comments.\'\n+                    u\'objects before users will be able to post comments.\',\n         ),\n         required=False,\n         default=False,\n@@ -230,7 +231,7 @@ class IDiscussionSettings(Interface):\n             default=u\'If selected, anonymous users are able to post \'\n                     u\'comments without logging in. It is highly \'\n                     u\'recommended to use a captcha solution to prevent \'\n-                    u\'spam if this setting is enabled.\'\n+                    u\'spam if this setting is enabled.\',\n         ),\n         required=False,\n         default=False,\n@@ -242,15 +243,16 @@ class IDiscussionSettings(Interface):\n         description=_(\n             u\'help_anonymous_email_enabled\',\n             default=u\'If selected, anonymous user will have to \'\n-                    u\'give their email.\'),\n+                    u\'give their email.\',\n+        ),\n         required=False,\n-        default=False\n+        default=False,\n     )\n \n     moderation_enabled = schema.Bool(\n         title=_(\n             u\'label_moderation_enabled\',\n-            default=\'Enable comment moderation\'\n+            default=\'Enable comment moderation\',\n         ),\n         description=_(\n             u\'help_moderation_enabled\',\n@@ -260,7 +262,7 @@ class IDiscussionSettings(Interface):\n                     u\'or "Manager") can approve comments to make them \'\n                     u\'visible to the public. If you want to enable a \'\n                     u\'custom comment workflow, you have to go to the \'\n-                    u\'types control panel.\'\n+                    u\'types control panel.\',\n         ),\n         required=False,\n         default=False,\n@@ -347,7 +349,7 @@ class IDiscussionSettings(Interface):\n     moderator_email = schema.ASCIILine(\n         title=_(\n             u\'label_moderator_email\',\n-            default=u\'Moderator Email Address\'\n+            default=u\'Moderator Email Address\',\n         ),\n         description=_(\n             u\'help_moderator_email\',\n@@ -359,14 +361,14 @@ class IDiscussionSettings(Interface):\n     user_notification_enabled = schema.Bool(\n         title=_(\n             u\'label_user_notification_enabled\',\n-            default=u\'Enable user email notification\'\n+            default=u\'Enable user email notification\',\n         ),\n         description=_(\n             u\'help_user_notification_enabled\',\n             default=u\'If selected, users can choose to be notified \'\n                     u\'of new comments by email.\'),\n         required=False,\n-        default=False\n+        default=False,\n     )\n \n \ndiff --git a/plone/app/discussion/testing.py b/plone/app/discussion/testing.py\nindex a7c439ae..5a4060ba 100644\n--- a/plone/app/discussion/testing.py\n+++ b/plone/app/discussion/testing.py\n@@ -92,7 +92,7 @@ def setUpPloneSite(self, portal):\n         portal.invokeFactory(\n             id=\'doc1\',\n             title=\'Document 1\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n \n \n@@ -119,5 +119,5 @@ def setUpPloneSite(self, portal):\n     name=\'PloneAppDiscussion:Functional\')\n PLONE_APP_DISCUSSION_ROBOT_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_DISCUSSION_ROBOT_FIXTURE,),\n-    name=\'PloneAppDiscussion:Robot\'\n+    name=\'PloneAppDiscussion:Robot\',\n )\ndiff --git a/plone/app/discussion/tests/functional_test_comments.txt b/plone/app/discussion/tests/functional_test_comments.txt\nindex c9fe2bd8..871496cd 100644\n--- a/plone/app/discussion/tests/functional_test_comments.txt\n+++ b/plone/app/discussion/tests/functional_test_comments.txt\n@@ -472,7 +472,7 @@ Edit the content object.\n     >>> secret = ring.random()\n     >>> token = hmac.new(secret, \'admin\', sha).hexdigest()\n     >>> browser.open("http://nohost/plone/doc1/edit?_authenticator=" + token)\n-    >>> browser.getControl(name=\'form.widgets.IRichText.text\').value = "Lorem ipsum"\n+    >>> browser.getControl(name=\'form.widgets.IRichTextBehavior.text\').value = "Lorem ipsum"\n     >>> browser.getControl(\'Save\').click()\n \n Make sure the edit was successful.\ndiff --git a/plone/app/discussion/tests/test_catalog.py b/plone/app/discussion/tests/test_catalog.py\nindex bad2ec23..1b37d77b 100644\n--- a/plone/app/discussion/tests/test_catalog.py\n+++ b/plone/app/discussion/tests/test_catalog.py\n@@ -26,19 +26,19 @@ def setUp(self):\n     def test_catalog_installed(self):\n         self.assertTrue(\n             \'total_comments\' in\n-            self.portal.portal_catalog.indexes()\n+            self.portal.portal_catalog.indexes(),\n         )\n         self.assertTrue(\n             \'commentators\' in\n-            self.portal.portal_catalog.indexes()\n+            self.portal.portal_catalog.indexes(),\n         )\n         self.assertTrue(\n             \'total_comments\' in\n-            self.portal.portal_catalog.schema()\n+            self.portal.portal_catalog.schema(),\n         )\n         self.assertTrue(\n             \'in_response_to\' in\n-            self.portal.portal_catalog.schema()\n+            self.portal.portal_catalog.schema(),\n         )\n \n     def test_collection_criteria_installed(self):\n@@ -76,13 +76,14 @@ def setUp(self):\n         new_comment1_id = conversation.addComment(comment1)\n         self.comment_id = new_comment1_id\n \n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         self.conversation = conversation\n         self.brains = brains\n         self.doc1_brain = brains[0]\n@@ -99,16 +100,17 @@ def test_total_comments(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id)\n+            \'++conversation++default/{0}\'.format(new_comment2_id),\n         )\n         comment2.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.total_comments, 2)\n \n@@ -116,7 +118,7 @@ def test_last_comment_date(self):\n         self.assertTrue(\'last_comment_date\' in self.doc1_brain)\n         self.assertEqual(\n             self.doc1_brain.last_comment_date,\n-            datetime(2006, 9, 17, 14, 18, 12)\n+            datetime(2006, 9, 17, 14, 18, 12),\n         )\n \n         # Add another comment and check if last comment date is updated.\n@@ -128,47 +130,50 @@ def test_last_comment_date(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id)\n+            \'++conversation++default/{0}\'.format(new_comment2_id),\n         )\n         comment2.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(\n             doc1_brain.last_comment_date,\n-            datetime(2009, 9, 17, 14, 18, 12)\n+            datetime(2009, 9, 17, 14, 18, 12),\n         )\n \n         # Remove the comment again\n         del self.conversation[new_comment2_id]\n \n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(\n             doc1_brain.last_comment_date,\n-            datetime(2006, 9, 17, 14, 18, 12)\n+            datetime(2006, 9, 17, 14, 18, 12),\n         )\n \n         # remove all comments\n         del self.conversation[self.new_comment1_id]\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.last_comment_date, None)\n \n@@ -185,53 +190,57 @@ def test_commentators(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id)\n+            \'++conversation++default/{0}\'.format(new_comment2_id),\n         )\n         comment2.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n \n         self.assertEqual(doc1_brain.commentators, (\'Jim\', \'Emma\'))\n \n         # remove one comments\n         del self.conversation[new_comment2_id]\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.commentators, (\'Jim\',))\n \n         # remove all comments\n         del self.conversation[self.new_comment1_id]\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.commentators, ())\n \n     def test_conversation_indexes_not_in_comments(self):\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Discussion Item\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Discussion Item\',\n+            ),\n+        )\n         comment1_brain = brains[0]\n         self.assertEqual(comment1_brain.commentators, None)\n         self.assertEqual(comment1_brain.last_comment_date, None)\n@@ -240,13 +249,14 @@ def test_conversation_indexes_not_in_comments(self):\n     def test_dont_index_private_commentators(self):\n         self.comment1.manage_permission(\'View\', roles=tuple())\n         self.portal.doc1.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.commentators, ())\n \n@@ -272,14 +282,15 @@ def setUp(self):\n \n         # Comment brain\n         self.comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id)\n-        )\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.comment.getPhysicalPath())\n-            }\n-        ))\n+            \'++conversation++default/{0}\'.format(new_comment1_id),\n+        )\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.comment.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         self.comment_brain = brains[0]\n \n     def test_title(self):\n@@ -292,14 +303,15 @@ def test_no_name_title(self):\n \n         # Comment brain\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(cid)\n-        )\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(comment.getPhysicalPath())\n-            }\n-        ))\n+            \'++conversation++default/{0}\'.format(cid),\n+        )\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(comment.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         comment_brain = brains[0]\n         self.assertEqual(comment_brain.Title, \'Anonymous on Document 1\')\n \n@@ -327,12 +339,13 @@ def test_delete_comment(self):\n         # Make sure a comment is removed from the catalog as well when it is\n         # deleted.\n         del self.conversation[self.comment_id]\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.comment.getPhysicalPath())\n-            }\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.comment.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         self.assertEqual(len(brains), 0)\n \n     def test_reindex_comment(self):\n@@ -357,17 +370,17 @@ def test_move_comments_when_content_object_is_moved(self):\n         self.portal.invokeFactory(\n             id=\'folder1\',\n             title=\'Folder 1\',\n-            type_name=\'Folder\'\n+            type_name=\'Folder\',\n         )\n         self.portal.invokeFactory(\n             id=\'folder2\',\n             title=\'Folder 2\',\n-            type_name=\'Folder\'\n+            type_name=\'Folder\',\n         )\n         self.portal.folder1.invokeFactory(\n             id=\'moveme\',\n             title=\'Move Me\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n         conversation = IConversation(self.portal.folder1.moveme)\n         comment = createObject(\'plone.Comment\')\n@@ -380,43 +393,57 @@ def test_move_comments_when_content_object_is_moved(self):\n         self.portal.folder2.manage_pasteObjects(cp)\n \n         # Make sure no old comment brains are\n-        brains = self.catalog.searchResults(dict(\n-            portal_type=\'Discussion Item\',\n-            path={\'query\': \'/\'.join(self.portal.folder1.getPhysicalPath())}\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                portal_type=\'Discussion Item\',\n+                path={\n+                    \'query\': \'/\'.join(self.portal.folder1.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         self.assertEqual(len(brains), 0)\n \n-        brains = self.catalog.searchResults(dict(\n-            portal_type=\'Discussion Item\',\n-            path={\n-                \'query\': \'/\'.join(self.portal.folder2.getPhysicalPath())\n-            }\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                portal_type=\'Discussion Item\',\n+                path={\n+                    \'query\': \'/\'.join(self.portal.folder2.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n             \'/plone/folder2/moveme/++conversation++default/\' +\n-            str(comment_id)\n+            str(comment_id),\n         )\n \n     def test_move_upper_level_folder(self):\n         # create a folder with a nested structure\n-        self.portal.invokeFactory(id=\'sourcefolder\',\n-                                  title=\'Source Folder\',\n-                                  type_name=\'Folder\')\n-        self.portal.sourcefolder.invokeFactory(id=\'moveme\',\n-                                               title=\'Move Me\',\n-                                               type_name=\'Folder\')\n-        self.portal.sourcefolder.moveme.invokeFactory(id=\'mydocument\',\n-                                                      title=\'My Document\',\n-                                                      type_name=\'Folder\')\n-        self.portal.invokeFactory(id=\'targetfolder\',\n-                                  title=\'Target Folder\',\n-                                  type_name=\'Folder\')\n+        self.portal.invokeFactory(\n+            id=\'sourcefolder\',\n+            title=\'Source Folder\',\n+            type_name=\'Folder\',\n+        )\n+        self.portal.sourcefolder.invokeFactory(\n+            id=\'moveme\',\n+            title=\'Move Me\',\n+            type_name=\'Folder\',\n+        )\n+        self.portal.sourcefolder.moveme.invokeFactory(\n+            id=\'mydocument\',\n+            title=\'My Document\',\n+            type_name=\'Folder\',\n+        )\n+        self.portal.invokeFactory(\n+            id=\'targetfolder\',\n+            title=\'Target Folder\',\n+            type_name=\'Folder\',\n+        )\n \n         # create comment on my-document\n         conversation = IConversation(\n-            self.portal.sourcefolder.moveme.mydocument\n+            self.portal.sourcefolder.moveme.mydocument,\n         )\n         comment = createObject(\'plone.Comment\')\n         comment_id = conversation.addComment(comment)\n@@ -429,22 +456,26 @@ def test_move_upper_level_folder(self):\n         self.portal.targetfolder.manage_pasteObjects(cp)\n \n         # Make sure no old comment brains are left\n-        brains = self.catalog.searchResults(dict(\n-            portal_type=\'Discussion Item\',\n-            path={\'query\': \'/plone/sourcefolder/moveme\'}\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                portal_type=\'Discussion Item\',\n+                path={\'query\': \'/plone/sourcefolder/moveme\'},\n+            ),\n+        )\n         self.assertEqual(len(brains), 0)\n \n         # make sure comments are correctly index on the target\n-        brains = self.catalog.searchResults(dict(\n-            portal_type=\'Discussion Item\',\n-            path={\'query\': \'/plone/targetfolder/moveme\'}\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                portal_type=\'Discussion Item\',\n+                path={\'query\': \'/plone/targetfolder/moveme\'},\n+            ),\n+        )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n             \'/plone/targetfolder/moveme/mydocument/++conversation++default/\' +\n-            str(comment_id)\n+            str(comment_id),\n         )\n \n     def test_update_comments_when_content_object_is_renamed(self):\n@@ -454,12 +485,13 @@ def test_update_comments_when_content_object_is_renamed(self):\n         self.portal.manage_renameObject(\'doc1\', \'doc2\')\n \n         brains = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\')\n+            portal_type=\'Discussion Item\',\n+        )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n             \'/plone/doc2/++conversation++default/\' +\n-            str(self.comment_id)\n+            str(self.comment_id),\n         )\n \n     def test_clear_and_rebuild_catalog(self):\n@@ -477,7 +509,7 @@ def test_clear_and_rebuild_catalog(self):\n         self.assertEqual(\n             comment_brain.getPath(),\n             \'/plone/doc1/++conversation++default/\' +\n-            str(self.comment_id)\n+            str(self.comment_id),\n         )\n \n     def test_clear_and_rebuild_catalog_for_nested_comments(self):\n@@ -549,13 +581,14 @@ def setUp(self):\n \n         conversation = IConversation(self.portal.doc1)\n \n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         self.conversation = conversation\n         self.brains = brains\n         self.doc1_brain = brains[0]\n@@ -567,5 +600,5 @@ def test_total_comments(self):\n         # Make sure no conversation has been created\n         self.assertTrue(\n             \'plone.app.discussion:conversation\' not in\n-            IAnnotations(self.portal.doc1)\n+            IAnnotations(self.portal.doc1),\n         )\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex b78af79a..8ac4d933 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -68,7 +68,7 @@ def test_uid(self):\n         comment1 = createObject(\'plone.Comment\')\n         conversation.addComment(comment1)\n         comment_brain = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\'\n+            portal_type=\'Discussion Item\',\n         )[0]\n         self.assertTrue(comment_brain.UID)\n \n@@ -79,7 +79,7 @@ def test_uid_is_unique(self):\n         comment2 = createObject(\'plone.Comment\')\n         conversation.addComment(comment2)\n         brains = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\'\n+            portal_type=\'Discussion Item\',\n         )\n         self.assertNotEqual(brains[0].UID, brains[1].UID)\n \n@@ -88,7 +88,7 @@ def test_comment_uid_differs_from_content_uid(self):\n         comment1 = createObject(\'plone.Comment\')\n         conversation.addComment(comment1)\n         comment_brain = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\'\n+            portal_type=\'Discussion Item\',\n         )[0]\n         self.assertNotEqual(self.document_brain.UID, comment_brain.UID)\n \n@@ -109,7 +109,7 @@ def test_title_special_characters(self):\n         self.portal.invokeFactory(\n             id=\'doc_sp_chars\',\n             title=u\'Document \xc3\xa4\xc3\xbc\xc3\xb6\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n         conversation = IConversation(self.portal.doc_sp_chars)\n         comment1 = createObject(\'plone.Comment\')\n@@ -121,7 +121,7 @@ def test_title_special_characters_utf8(self):\n         self.portal.invokeFactory(\n             id=\'doc_sp_chars_utf8\',\n             title=\'Document \xc3\xab\xc3\xaf\xc3\xbb\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n         conversation = IConversation(self.portal.doc_sp_chars_utf8)\n         comment1 = createObject(\'plone.Comment\')\n@@ -157,7 +157,7 @@ def test_getText(self):\n         comment1.text = \'First paragraph\\n\\nSecond_paragraph\'\n         self.assertEqual(\n             \'\'.join(comment1.getText().split()),\n-            \'<p>Firstparagraph<br/><br/>Second_paragraph</p>\'\n+            \'<p>Firstparagraph<br/><br/>Second_paragraph</p>\',\n         )\n \n     def test_getText_escapes_HTML(self):\n@@ -165,7 +165,7 @@ def test_getText_escapes_HTML(self):\n         comment1.text = \'<b>Got HTML?</b>\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>&lt;b&gt;Got HTML?&lt;/b&gt;</p>\'\n+            \'<p>&lt;b&gt;Got HTML?&lt;/b&gt;</p>\',\n         )\n \n     def test_getText_with_non_ascii_characters(self):\n@@ -173,7 +173,7 @@ def test_getText_with_non_ascii_characters(self):\n         comment1.text = u\'Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc.\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\'\n+            \'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\',\n         )\n \n     def test_getText_doesnt_link(self):\n@@ -181,7 +181,7 @@ def test_getText_doesnt_link(self):\n         comment1.text = \'Go to http://www.plone.org\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>Go to http://www.plone.org</p>\'\n+            \'<p>Go to http://www.plone.org</p>\',\n         )\n \n     def test_getText_uses_comment_mime_type(self):\n@@ -191,7 +191,7 @@ def test_getText_uses_comment_mime_type(self):\n         self.assertEqual(\n             comment1.getText(),\n             \'Go to <a href="http://www.plone.org" \' +\n-            \'rel="nofollow">http://www.plone.org</a>\'\n+            \'rel="nofollow">http://www.plone.org</a>\',\n         )\n \n     def test_getText_uses_comment_mime_type_html(self):\n@@ -200,7 +200,7 @@ def test_getText_uses_comment_mime_type_html(self):\n         comment1.mime_type = \'text/html\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'Go to <a href="http://www.plone.org">plone.org</a>\'\n+            \'Go to <a href="http://www.plone.org">plone.org</a>\',\n         )\n \n     def test_getText_w_custom_targetMimetype(self):\n@@ -230,20 +230,20 @@ def test_traversal(self):\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id)\n+            \'++conversation++default/{0}\'.format(new_comment1_id),\n         )\n         self.assertTrue(IComment.providedBy(comment))\n \n         self.assertEqual(\n             (\n                 \'\', \'plone\', \'doc1\', \'++conversation++default\',\n-                str(new_comment1_id)\n+                str(new_comment1_id),\n             ),\n-            comment.getPhysicalPath()\n+            comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_comment1_id), comment.absolute_url()\n+            str(new_comment1_id), comment.absolute_url(),\n         )\n \n     def test_view_blob_types(self):\n@@ -254,7 +254,7 @@ def test_view_blob_types(self):\n         self.portal.invokeFactory(\n             id=\'image1\',\n             title=\'Image\',\n-            type_name=\'Image\'\n+            type_name=\'Image\',\n         )\n         conversation = IConversation(self.portal.image1)\n \n@@ -262,7 +262,7 @@ def test_view_blob_types(self):\n         comment1.text = \'Comment text\'\n         new_comment1_id = conversation.addComment(comment1)\n         comment = self.portal.image1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id)\n+            \'++conversation++default/{0}\'.format(new_comment1_id),\n         )\n \n         view = View(comment, self.request)\n@@ -275,7 +275,8 @@ def test_workflow(self):\n         """\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow,\'))\n+            (\'comment_review_workflow,\'),\n+        )\n \n         conversation = IConversation(self.portal.doc1)\n         comment1 = createObject(\'plone.Comment\')\n@@ -290,15 +291,15 @@ def test_workflow(self):\n         # Ensure the initial state was entered and recorded\n         self.assertEqual(\n             1,\n-            len(comment.workflow_history[\'comment_review_workflow\'])\n+            len(comment.workflow_history[\'comment_review_workflow\']),\n         )\n         self.assertEqual(\n             None,\n-            comment.workflow_history[\'comment_review_workflow\'][0][\'action\']\n+            comment.workflow_history[\'comment_review_workflow\'][0][\'action\'],\n         )\n         self.assertEqual(\n             \'pending\',\n-            self.portal.portal_workflow.getInfoFor(comment, \'review_state\')\n+            self.portal.portal_workflow.getInfoFor(comment, \'review_state\'),\n         )\n \n     def test_fti(self):\n@@ -306,7 +307,7 @@ def test_fti(self):\n \n         self.assertIn(\n             \'Discussion Item\',\n-            self.portal.portal_types.objectIds()\n+            self.portal.portal_types.objectIds(),\n         )\n \n         comment1 = createObject(\'plone.Comment\')\n@@ -330,12 +331,16 @@ def test_view(self):\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id)\n+            \'++conversation++default/{0}\'.format(new_comment1_id),\n         )\n \n         # make sure the view is there\n-        self.assertTrue(getMultiAdapter((comment, self.request),\n-                                        name=\'view\'))\n+        self.assertTrue(\n+            getMultiAdapter(\n+                (comment, self.request),\n+                name=\'view\',\n+            ),\n+        )\n \n         # make sure the HTTP redirect (status code 302) works when a comment\n         # is called directly\n@@ -371,7 +376,7 @@ def test_add_comment(self):\n         comment.text = \'Comment text\'\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -408,7 +413,7 @@ def test_delete_comment(self):\n         comment.text = \'Comment text\'\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -444,7 +449,7 @@ def test_traversal(self):\n         comment.text = \'Comment text\'\n         new_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -453,7 +458,7 @@ def test_traversal(self):\n         replies = IReplies(comment)\n         new_re_id = replies.addComment(re_comment)\n         re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_id)\n+            \'++conversation++default/{0}\'.format(new_re_id),\n         )\n \n         # Add a reply to the reply\n@@ -462,7 +467,7 @@ def test_traversal(self):\n         replies = IReplies(re_comment)\n         new_re_re_id = replies.addComment(re_re_comment)\n         re_re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_re_id)\n+            \'++conversation++default/{0}\'.format(new_re_re_id),\n         )\n \n         # Add a reply to the replies reply\n@@ -471,47 +476,47 @@ def test_traversal(self):\n         replies = IReplies(re_re_comment)\n         new_re_re_re_id = replies.addComment(re_re_re_comment)\n         re_re_re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_re_re_id)\n+            \'++conversation++default/{0}\'.format(new_re_re_re_id),\n         )\n \n         self.assertEqual(\n             (\'\', \'plone\', \'doc1\', \'++conversation++default\', str(new_id)),\n-            comment.getPhysicalPath()\n+            comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_id), comment.absolute_url()\n+            str(new_id), comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\'\', \'plone\', \'doc1\', \'++conversation++default\', str(new_re_id)),\n-            re_comment.getPhysicalPath()\n+            re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n             str(new_re_id),\n-            re_comment.absolute_url()\n+            re_comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\n                 \'\', \'plone\', \'doc1\', \'++conversation++default\',\n-                str(new_re_re_id)\n+                str(new_re_re_id),\n             ),\n-            re_re_comment.getPhysicalPath()\n+            re_re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n             str(new_re_re_id),\n-            re_re_comment.absolute_url()\n+            re_re_comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\n                 \'\', \'plone\', \'doc1\', \'++conversation++default\',\n-                str(new_re_re_re_id)\n+                str(new_re_re_re_id),\n             ),\n-            re_re_re_comment.getPhysicalPath()\n+            re_re_re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n             str(new_re_re_re_id),\n-            re_re_re_comment.absolute_url()\n+            re_re_re_comment.absolute_url(),\n         )\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 6f2ff235..5a34cb62 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -80,7 +80,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         # The form should return an error if the comment text field is empty\n@@ -88,7 +88,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -102,7 +102,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -144,14 +144,14 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         provideAdapter(\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=EditCommentForm,\n-            name=u\'edit-comment-form\'\n+            name=u\'edit-comment-form\',\n         )\n \n         # The form is submitted successfully, if the required text field is\n@@ -160,7 +160,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -174,7 +174,7 @@ def make_request(form={}):\n         request = make_request(form={\'form.widgets.text\': u\'foobar\'})\n         editForm = getMultiAdapter(\n             (comment, request),\n-            name=u\'edit-comment-form\'\n+            name=u\'edit-comment-form\',\n         )\n         editForm.update()\n         data, errors = editForm.extractData()  # pylint: disable-msg=W0612\n@@ -219,7 +219,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         # The form is submitted successfully, if the required text field is\n@@ -228,7 +228,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         commentForm.update()\n@@ -241,14 +241,14 @@ def make_request(form={}):\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u\'moderate-delete-comment\'\n+            name=u\'moderate-delete-comment\',\n         )\n         # try to delete last comment without \'Delete comments\' permission\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.assertRaises(\n             Unauthorized,\n             comment.restrictedTraverse,\n-            \'@@moderate-delete-comment\'\n+            \'@@moderate-delete-comment\',\n         )\n         deleteView()\n         self.assertEqual(1, len([x for x in conversation.getComments()]))\n@@ -277,7 +277,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         # The form is submitted successfully, if the required text field is\n@@ -286,7 +286,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         commentForm.update()\n@@ -299,7 +299,7 @@ def make_request(form={}):\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u\'delete-own-comment\'\n+            name=u\'delete-own-comment\',\n         )\n         # try to delete last comment with johndoe\n         setRoles(self.portal, \'johndoe\', [\'Member\'])\n@@ -307,7 +307,7 @@ def make_request(form={}):\n         self.assertRaises(\n             Unauthorized,\n             comment.restrictedTraverse,\n-            \'@@delete-own-comment\'\n+            \'@@delete-own-comment\',\n         )\n         self.assertEqual(1, len([x for x in conversation.getComments()]))\n         # try to delete last comment with the same user that created it\n@@ -343,12 +343,12 @@ def make_request(form={}):\n         # Post an anonymous comment and provide a name\n         request = make_request(form={\n             \'form.widgets.name\': u\'john doe\',\n-            \'form.widgets.text\': u\'bar\'\n+            \'form.widgets.text\': u\'bar\',\n         })\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -391,7 +391,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -438,7 +438,7 @@ def make_request(form={}):\n             Unauthorized,\n             commentForm.handleComment,\n             commentForm,\n-            \'foo\'\n+            \'foo\',\n         )\n \n \n@@ -454,7 +454,7 @@ def setUp(self):\n         self.folder = self.portal[\'test-folder\']\n         interface.alsoProvides(\n             self.request,\n-            interfaces.IDiscussionLayer\n+            interfaces.IDiscussionLayer,\n         )\n \n         self.workflowTool = getToolByName(self.portal, \'portal_workflow\')\n@@ -532,7 +532,7 @@ def test_comment_transform_message(self):\n             self.viewlet.comment_transform_message(),\n             \'You can add a comment by filling out the form below. \' +\n             \'Plain text formatting. Web and email addresses are transformed \' +\n-            \'into clickable links.\'\n+            \'into clickable links.\',\n         )\n \n         # Enable moderation workflow\n@@ -585,25 +585,25 @@ def test_get_replies_with_workflow_actions(self):\n         c1 = conversation.addComment(comment)\n         self.assertEqual(\n             len(tuple(self.viewlet.get_replies(workflow_actions=True))),\n-            1\n+            1,\n         )\n         # Enable moderation workflow\n         self.workflowTool.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow,\')\n+            (\'comment_review_workflow,\'),\n         )\n         # Check if workflow actions are available\n         reply = next(self.viewlet.get_replies(workflow_actions=True))\n         self.assertTrue(\'actions\' in reply)\n         self.assertEqual(\n             reply[\'actions\'][0][\'id\'],\n-            \'publish\'\n+            \'publish\',\n         )\n         expected_url = \'http://nohost/plone/doc1/++conversation++default/{0}\' \\\n                        \'/content_status_modify?workflow_action=publish\'\n         self.assertEqual(\n             reply[\'actions\'][0][\'url\'],\n-            expected_url.format(int(c1))\n+            expected_url.format(int(c1)),\n         )\n \n     def test_get_commenter_home_url(self):\n@@ -614,7 +614,7 @@ def test_get_commenter_home_url(self):\n         m = portal_membership.getAuthenticatedMember()\n         self.assertEqual(\n             self.viewlet.get_commenter_home_url(m.getUserName()),\n-            \'http://nohost/plone/author/test-user\'\n+            \'http://nohost/plone/author/test-user\',\n         )\n \n     def test_get_commenter_home_url_is_none(self):\n@@ -627,15 +627,15 @@ def test_get_commenter_portrait(self):\n         self.memberdata._setPortrait(Image(\n             id=\'jim\',\n             file=dummy.File(),\n-            title=\'\'\n+            title=\'\',\n         ), \'jim\')\n         self.assertEqual(\n             self.memberdata._getPortrait(\'jim\').getId(),\n-            \'jim\'\n+            \'jim\',\n         )\n         self.assertEqual(\n             self.memberdata._getPortrait(\'jim\').meta_type,\n-            \'Image\'\n+            \'Image\',\n         )\n \n         # Add a conversation with a comment\n@@ -653,7 +653,7 @@ def test_get_commenter_portrait(self):\n         # Check if the correct member image URL is returned\n         self.assertEqual(\n             portrait_url,\n-            \'http://nohost/plone/portal_memberdata/portraits/jim\'\n+            \'http://nohost/plone/portal_memberdata/portraits/jim\',\n         )\n \n     def test_get_commenter_portrait_is_none(self):\n@@ -662,8 +662,7 @@ def test_get_commenter_portrait_is_none(self):\n             self.viewlet.get_commenter_portrait() in (\n                 \'defaultUser.png\',\n                 \'defaultUser.gif\',\n-            )\n-\n+            ),\n         )\n \n     def test_get_commenter_portrait_without_userimage(self):\n@@ -689,8 +688,8 @@ def test_get_commenter_portrait_without_userimage(self):\n         self.assertTrue(\n             portrait_url in (\n                 \'http://nohost/plone/defaultUser.png\',\n-                \'http://nohost/plone/defaultUser.gif\'\n-            )\n+                \'http://nohost/plone/defaultUser.gif\',\n+            ),\n         )\n \n     def test_anonymous_discussion_allowed(self):\n@@ -723,7 +722,7 @@ def test_login_action(self):\n         self.viewlet.update()\n         self.assertEqual(\n             self.viewlet.login_action(),\n-            \'http://nohost/plone/login_form?came_from=http%3A//nohost\'\n+            \'http://nohost/plone/login_form?came_from=http%3A//nohost\',\n         )\n \n     def test_format_time(self):\n@@ -737,8 +736,8 @@ def test_format_time(self):\n         # time of the local time given above. That way, the time for the\n         # example below is correct within each time zone, independent of DST\n         python_time = datetime(\n-            *time.gmtime(time.mktime(python_time.timetuple()))[:7]\n-        )\n+            *time.gmtime(time.mktime(python_time.timetuple()))[:7])\n         localized_time = self.viewlet.format_time(python_time)\n         self.assertTrue(\n-            localized_time in [\'Feb 01, 2009 11:32 PM\', \'2009-02-01 23:32\'])\n+            localized_time in [\'Feb 01, 2009 11:32 PM\', \'2009-02-01 23:32\'],\n+        )\ndiff --git a/plone/app/discussion/tests/test_contentrules.py b/plone/app/discussion/tests/test_contentrules.py\nindex 23543e78..6b9610ef 100644\n--- a/plone/app/discussion/tests/test_contentrules.py\n+++ b/plone/app/discussion/tests/test_contentrules.py\n@@ -30,7 +30,7 @@ def setUp(self):\n         member = self.portal.portal_membership.getMemberById(TEST_USER_ID)\n         member.setMemberProperties({\n             \'fullname\': \'X Manager\',\n-            \'email\': \'xmanager@example.com\'\n+            \'email\': \'xmanager@example.com\',\n         })\n \n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n@@ -96,7 +96,7 @@ def setUp(self):\n         comment.text = \'This is a comment\'\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         re_comment = createObject(\'plone.Comment\')\n@@ -112,7 +112,7 @@ def testReplyIdStringSubstitution(self):\n         reply_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_id\'\n+            name=u\'comment_id\',\n         )\n         self.assertIsInstance(reply_id(), long)\n \n@@ -120,7 +120,7 @@ def testReplyTextStringSubstitution(self):\n         reply_text = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_text\'\n+            name=u\'comment_text\',\n         )\n         self.assertEqual(reply_text(), u\'This is a reply\')\n \n@@ -128,7 +128,7 @@ def testReplyUserIdStringSubstitution(self):\n         reply_user_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_id\'\n+            name=u\'comment_user_id\',\n         )\n         self.assertEqual(reply_user_id(), u\'julia\')\n \n@@ -136,7 +136,7 @@ def testReplyUserFullNameStringSubstitution(self):\n         reply_user_fullname = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_fullname\'\n+            name=u\'comment_user_fullname\',\n         )\n         self.assertEqual(reply_user_fullname(), u\'Juliana\')\n \n@@ -144,6 +144,6 @@ def testReplyUserEmailStringSubstitution(self):\n         reply_user_email = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_email\'\n+            name=u\'comment_user_email\',\n         )\n         self.assertEqual(reply_user_email(), u\'julia@example.com\')\ndiff --git a/plone/app/discussion/tests/test_controlpanel.py b/plone/app/discussion/tests/test_controlpanel.py\nindex eb44ebb5..4ad30189 100644\n--- a/plone/app/discussion/tests/test_controlpanel.py\n+++ b/plone/app/discussion/tests/test_controlpanel.py\n@@ -29,7 +29,7 @@ def test_registry_registered(self):\n     def test_discussion_controlpanel_view(self):\n         view = getMultiAdapter(\n             (self.portal, self.portal.REQUEST),\n-            name=\'discussion-controlpanel\'\n+            name=\'discussion-controlpanel\',\n         )\n         self.assertTrue(view())\n \n@@ -40,7 +40,7 @@ def test_discussion_in_controlpanel(self):\n             \'discussion\' in [\n                 a.getAction(self)[\'id\']\n                 for a in self.controlpanel.listActions()\n-            ]\n+            ],\n         )\n \n     def test_globally_enabled(self):\n@@ -51,7 +51,7 @@ def test_globally_enabled(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.globally_enabled\'\n             ],\n-            False\n+            False,\n         )\n \n     def test_anonymous_comments(self):\n@@ -62,7 +62,7 @@ def test_anonymous_comments(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.anonymous_comments\'\n             ],\n-            False\n+            False,\n         )\n \n     def test_moderation_enabled(self):\n@@ -73,7 +73,7 @@ def test_moderation_enabled(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.moderation_enabled\'\n             ],\n-            False\n+            False,\n         )\n \n     def test_edit_comment_enabled(self):\n@@ -82,7 +82,8 @@ def test_edit_comment_enabled(self):\n         self.assertEqual(\n             self.registry[\'plone.app.discussion.interfaces.\' +\n                           \'IDiscussionSettings.edit_comment_enabled\'],\n-            False)\n+            False,\n+        )\n \n     def test_delete_own_comment_enabled(self):\n         # Check delete_own_comment_enabled record\n@@ -90,7 +91,8 @@ def test_delete_own_comment_enabled(self):\n         self.assertEqual(\n             self.registry[\'plone.app.discussion.interfaces.\' +\n                           \'IDiscussionSettings.delete_own_comment_enabled\'],\n-            False)\n+            False,\n+        )\n \n     def test_text_transform(self):\n         self.assertTrue(\'text_transform\' in IDiscussionSettings)\n@@ -99,7 +101,7 @@ def test_text_transform(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.text_transform\'\n             ],\n-            \'text/plain\'\n+            \'text/plain\',\n         )\n \n     def test_captcha(self):\n@@ -110,7 +112,7 @@ def test_captcha(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.captcha\'\n             ],\n-            \'disabled\'\n+            \'disabled\',\n         )\n \n     def test_show_commenter_image(self):\n@@ -121,20 +123,20 @@ def test_show_commenter_image(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.show_commenter_image\'\n             ],\n-            True\n+            True,\n         )\n \n     def test_moderator_notification_enabled(self):\n         # Check show_commenter_image record\n         self.assertTrue(\n-            \'moderator_notification_enabled\' in IDiscussionSettings\n+            \'moderator_notification_enabled\' in IDiscussionSettings,\n         )\n         self.assertEqual(\n             self.registry[\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.moderator_notification_enabled\'\n             ],\n-            False\n+            False,\n         )\n \n     # def test_user_notification_enabled(self):\n@@ -167,8 +169,8 @@ def test_moderation_enabled_in_discussion_control_panel_changed(self):\n         self.assertEqual(\n             (\'comment_one_state_workflow\',),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\'\n-            )\n+                \'Discussion Item\',\n+            ),\n         )\n \n         # Enable moderation in the discussion control panel\n@@ -179,16 +181,16 @@ def test_moderation_enabled_in_discussion_control_panel_changed(self):\n         self.assertEqual(\n             (\'comment_review_workflow\',),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\'\n-            )\n+                \'Discussion Item\',\n+            ),\n         )\n         # And back\n         self.settings.moderation_enabled = False\n         self.assertEqual(\n             (\'comment_one_state_workflow\',),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\'\n-            )\n+                \'Discussion Item\',\n+            ),\n         )\n \n     def test_change_workflow_in_types_control_panel(self):\n@@ -202,7 +204,7 @@ def test_change_workflow_in_types_control_panel(self):\n         # Enable the \'comment_review_workflow\' with moderation enabled\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow\',)\n+            (\'comment_review_workflow\',),\n         )\n \n         # Make sure the moderation_enabled settings has changed\n@@ -211,14 +213,14 @@ def test_change_workflow_in_types_control_panel(self):\n         # Enable the \'comment_review_workflow\' with moderation enabled\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_one_state_workflow\',)\n+            (\'comment_one_state_workflow\',),\n         )\n         self.settings.moderation_enabled = True\n \n         # Enable a \'custom\' discussion workflow\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'intranet_workflow\',)\n+            (\'intranet_workflow\',),\n         )\n \n         # Setting has not changed. A Custom workflow disables the\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 4b4e30b8..85fb2980 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -20,8 +20,6 @@\n from zope.component import queryUtility\n \n import unittest\n-\n-\n import six\n \n \n@@ -74,7 +72,7 @@ def test_add_comment(self):\n         self.assertTrue(IComment.providedBy(conversation[new_id]))\n         self.assertEqual(\n             aq_base(conversation[new_id].__parent__),\n-            aq_base(conversation)\n+            aq_base(conversation),\n         )\n         self.assertEqual(new_id, comment.comment_id)\n         self.assertEqual(len(list(conversation.getComments())), 1)\n@@ -82,7 +80,7 @@ def test_add_comment(self):\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n             conversation.last_comment_date - datetime.utcnow() <\n-            timedelta(seconds=1)\n+            timedelta(seconds=1),\n         )\n \n     def test_private_comment(self):\n@@ -280,7 +278,7 @@ def test_disable_commenting_for_content_type(self):\n \n         # Create a conversation.\n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\'\n+            \'@@conversation_view\',\n         )\n \n         # The Document content type is disabled by default\n@@ -328,7 +326,7 @@ def test_is_discussion_allowed_on_content_object(self):\n \n         # Create a conversation.\n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\'\n+            \'@@conversation_view\',\n         )\n \n         # Discussion is disallowed by default\n@@ -398,7 +396,7 @@ def test_dict_operations(self):\n         self.assertTrue((new_id1, comment1) in six.iteritems(conversation))\n         self.assertTrue((new_id2, comment2) in six.iteritems(conversation))\n \n-        # TODO test acquisition wrapping\n+        # TODO test acquisition wrapping  # noqa T000\n         # self.assertTrue(aq_base(aq_parent(comment1)) is conversation)\n \n     def test_total_comments(self):\n@@ -514,11 +512,11 @@ def test_last_comment_date(self):\n         # check if the latest comment is exactly one day old\n         self.assertTrue(\n             conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(hours=23, minutes=59, seconds=59)\n+            timedelta(hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date >\n-            datetime.utcnow() - timedelta(days=1, seconds=1)\n+            datetime.utcnow() - timedelta(days=1, seconds=1),\n         )\n \n         # remove the latest comment\n@@ -528,11 +526,11 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly two days old\n         self.assertTrue(\n             conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(days=1, hours=23, minutes=59, seconds=59)\n+            timedelta(days=1, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date > datetime.utcnow() -\n-            timedelta(days=2, seconds=1)\n+            timedelta(days=2, seconds=1),\n         )\n \n         # remove the latest comment again\n@@ -542,11 +540,11 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly four days old\n         self.assertTrue(\n             conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(days=3, hours=23, minutes=59, seconds=59)\n+            timedelta(days=3, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date > datetime.utcnow() -\n-            timedelta(days=4, seconds=2)\n+            timedelta(days=4, seconds=2),\n         )\n \n     def test_get_comments_full(self):\n@@ -620,7 +618,7 @@ def test_get_threads(self):\n         ], list(conversation.getThreads()))\n \n     def test_get_threads_batched(self):\n-        # TODO: test start, size, root and depth arguments to getThreads()\n+        # TODO: test start, size, root and depth arguments to getThreads()  # noqa T000\n         #   - may want to split this into multiple tests\n         pass\n \n@@ -628,17 +626,17 @@ def test_traversal(self):\n         # make sure we can traverse to conversations and get a URL and path\n \n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default\'\n+            \'++conversation++default\',\n         )\n         self.assertTrue(IConversation.providedBy(conversation))\n \n         self.assertEqual(\n             (\'\', \'plone\', \'doc1\', \'++conversation++default\'),\n-            conversation.getPhysicalPath()\n+            conversation.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default\',\n-            conversation.absolute_url()\n+            conversation.absolute_url(),\n         )\n \n     def test_unconvertible_id(self):\n@@ -646,7 +644,7 @@ def test_unconvertible_id(self):\n         # can\'t be converted to long\n \n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/ThisCantBeRight\'\n+            \'++conversation++default/ThisCantBeRight\',\n         )\n         self.assertEqual(conversation, None)\n \n@@ -670,7 +668,7 @@ def test_no_comment(self):\n         # Make sure no conversation has been created\n         self.assertTrue(\n             \'plone.app.discussion:conversation\' not in\n-            IAnnotations(self.portal.doc1)\n+            IAnnotations(self.portal.doc1),\n         )\n \n \n@@ -683,13 +681,13 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         interface.alsoProvides(\n             self.portal.REQUEST,\n-            interfaces.IDiscussionLayer\n+            interfaces.IDiscussionLayer,\n         )\n \n         if DEXTERITY:\n             interface.alsoProvides(\n                 self.portal.doc1,\n-                IDexterityContent\n+                IDexterityContent,\n             )\n \n     def _makeOne(self, *args, **kw):\n@@ -849,18 +847,18 @@ def test_dict_api(self):\n         # Create the nested comment structure\n         new_id_1 = replies.addComment(comment1)\n         comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1)\n+            \'++conversation++default/{0}\'.format(new_id_1),\n         )\n         replies_to_comment1 = IReplies(comment1)\n         new_id_2 = replies.addComment(comment2)\n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2)\n+            \'++conversation++default/{0}\'.format(new_id_2),\n         )\n         replies_to_comment2 = IReplies(comment2)\n \n         new_id_1_1 = replies_to_comment1.addComment(comment1_1)\n         comment1_1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1_1)\n+            \'++conversation++default/{0}\'.format(new_id_1_1),\n         )\n         replies_to_comment1_1 = IReplies(comment1_1)\n         replies_to_comment1_1.addComment(comment1_1_1)\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex 7ca79766..860e6de4 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -152,7 +152,7 @@ def test_addEvent(self):\n         comment.text = \'Comment text\'\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         re_comment = createObject(\'plone.Comment\')\n@@ -173,7 +173,7 @@ def test_removedEvent(self):\n         comment.text = \'Comment text\'\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         re_comment = createObject(\'plone.Comment\')\ndiff --git a/plone/app/discussion/tests/test_functional.py b/plone/app/discussion/tests/test_functional.py\nindex c1603e95..14db437a 100644\n--- a/plone/app/discussion/tests/test_functional.py\n+++ b/plone/app/discussion/tests/test_functional.py\n@@ -25,11 +25,16 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     globs={\'pprint\': pprint.pprint,\n-                                            }\n-                                     ),\n-                layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+        layered(\n+            doctest.DocFileSuite(\n+                test,\n+                optionflags=optionflags,\n+                globs={\n+                    \'pprint\': pprint.pprint,\n+                }\n+            ),\n+            layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING,\n+        )\n+        for test in normal_testfiles\n+    ])\n     return suite\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 118a1fe6..02c58d53 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -70,7 +70,7 @@ def setUp(self):\n     def test_conversation_total_comments(self):\n         self.assertTrue(isinstance(\n             catalog.total_comments,\n-            DelegatingIndexerFactory\n+            DelegatingIndexerFactory,\n         ))\n         self.assertEqual(catalog.total_comments(self.portal.doc1)(), 3)\n         del self.conversation[self.new_id1]\n@@ -82,16 +82,16 @@ def test_conversation_total_comments(self):\n     def test_conversation_last_comment_date(self):\n         self.assertTrue(isinstance(\n             catalog.last_comment_date,\n-            DelegatingIndexerFactory\n+            DelegatingIndexerFactory,\n         ))\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n-            datetime(2009, 4, 12, 11, 12, 12)\n+            datetime(2009, 4, 12, 11, 12, 12),\n         )\n         del self.conversation[self.new_id3]\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n-            datetime(2007, 12, 13, 4, 18, 12)\n+            datetime(2007, 12, 13, 4, 18, 12),\n         )\n         del self.conversation[self.new_id2]\n         del self.conversation[self.new_id1]\n@@ -138,7 +138,7 @@ def test_title(self):\n     def test_description(self):\n         self.assertEqual(\n             catalog.description(self.comment)(),\n-            \'Lorem ipsum dolor sit amet.\'\n+            \'Lorem ipsum dolor sit amet.\',\n         )\n         self.assertTrue(\n             isinstance(catalog.description, DelegatingIndexerFactory))\n@@ -153,33 +153,33 @@ def test_description_long(self):\n         self.conversation.addComment(comment_long)\n         self.assertEqual(\n             catalog.description(comment_long)(),\n-            LONG_TEXT_CUT.replace(\'\\n\', \' \')\n+            LONG_TEXT_CUT.replace(\'\\n\', \' \'),\n         )\n \n     def test_dates(self):\n         # Test if created, modified, effective etc. are set correctly\n         self.assertEqual(\n             catalog.created(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\')\n+            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\'),\n         )\n         self.assertEqual(\n             catalog.effective(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\')\n+            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\'),\n         )\n         self.assertEqual(\n             catalog.modified(self.comment)(),\n-            DateTime(2008, 3, 12, 7, 32, 52, \'GMT\')\n+            DateTime(2008, 3, 12, 7, 32, 52, \'GMT\'),\n         )\n \n     def test_searchable_text(self):\n         # Test if searchable text is a concatenation of title and comment text\n         self.assertEqual(\n             catalog.searchable_text(self.comment)(),\n-            (\'Lorem ipsum dolor sit amet.\')\n+            (\'Lorem ipsum dolor sit amet.\'),\n         )\n         self.assertTrue(isinstance(\n             catalog.searchable_text,\n-            DelegatingIndexerFactory\n+            DelegatingIndexerFactory,\n         ))\n \n     def test_creator(self):\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex f0ac2f96..7e660c10 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -69,7 +69,9 @@ def setUp(self):\n                                 None)\n         self.context = self.portal\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',), \'comment_review_workflow\')\n+            (\'Discussion Item\',),\n+            \'comment_review_workflow\',\n+        )\n         self.wf_tool = self.portal.portal_workflow\n         # Add a conversation with three comments\n         conversation = IConversation(self.portal.doc1)\n@@ -79,7 +81,7 @@ def setUp(self):\n         comment1.Creator = \'Jim\'\n         new_id_1 = conversation.addComment(comment1)\n         self.comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1)\n+            \'++conversation++default/{0}\'.format(new_id_1),\n         )\n         comment2 = createObject(\'plone.Comment\')\n         comment2.title = \'Comment 2\'\n@@ -87,7 +89,7 @@ def setUp(self):\n         comment2.Creator = \'Joe\'\n         new_id_2 = conversation.addComment(comment2)\n         self.comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2)\n+            \'++conversation++default/{0}\'.format(new_id_2),\n         )\n         comment3 = createObject(\'plone.Comment\')\n         comment3.title = \'Comment 3\'\n@@ -95,7 +97,7 @@ def setUp(self):\n         comment3.Creator = \'Emma\'\n         new_id_3 = conversation.addComment(comment3)\n         self.comment3 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_3)\n+            \'++conversation++default/{0}\'.format(new_id_3),\n         )\n         self.conversation = conversation\n \n@@ -114,8 +116,7 @@ def test_retract(self):\n \n         view = BulkActionsView(self.portal, self.request)\n \n-        self.assertRaises(NotImplementedError,\n-                          view)\n+        self.assertRaises(NotImplementedError, view)\n \n     def test_publish(self):\n         self.request.set(\'form.select.BulkAction\', \'publish\')\n@@ -176,12 +177,13 @@ def setUp(self):\n         settings.globally_enabled = True\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow\',))\n+            (\'comment_review_workflow\',),\n+        )\n         # Create page plus comment.\n         self.portal.invokeFactory(\n             id=\'page\',\n             title=\'Page 1\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n         self.page = self.portal.page\n         self.conversation = IConversation(self.page)\ndiff --git a/plone/app/discussion/tests/test_notifications.py b/plone/app/discussion/tests/test_notifications.py\nindex 2fcaceaa..0320f1ad 100644\n--- a/plone/app/discussion/tests/test_notifications.py\n+++ b/plone/app/discussion/tests/test_notifications.py\n@@ -176,7 +176,7 @@ def setUp(self):\n         self.portal.portal_types[\'Document\'].allow_discussion = True\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow\',)\n+            (\'comment_review_workflow\',),\n         )\n         # Enable moderator notification setting\n         registry = queryUtility(IRegistry)\n@@ -219,23 +219,23 @@ def test_notify_moderator(self):\n             in msg)\n         self.assertIn(\n             \'http://nohost/plone/d=\\noc1/view#{0}\'.format(comment_id),\n-            msg\n+            msg,\n         )\n         self.assertIn(\n             \'Comment text\',\n-            msg\n+            msg,\n         )\n         text = \'Approve comment:\\nhttp://nohost/plone/doc1/\' \\\n                \'++conversation++default/{0}/@@moderat=\\ne-publish-comment\'\n         self.assertIn(\n             text.format(comment_id),\n-            msg\n+            msg,\n         )\n         text = \'Delete comment:\\nhttp://nohost/plone/doc1/\' \\\n                \'++conversation++default/{0}/@@moderat=\\ne-delete-comment\'\n         self.assertIn(\n             text.format(comment_id),\n-            msg\n+            msg,\n         )\n \n     def test_notify_moderator_specific_address(self):\ndiff --git a/plone/app/discussion/tests/test_robot.py b/plone/app/discussion/tests/test_robot.py\nindex 7163326b..202b43b7 100644\n--- a/plone/app/discussion/tests/test_robot.py\n+++ b/plone/app/discussion/tests/test_robot.py\n@@ -23,7 +23,7 @@ def test_suite():\n         suite.addTests([\n             layered(\n                 robottestsuite,\n-                layer=PLONE_APP_DISCUSSION_ROBOT_TESTING\n+                layer=PLONE_APP_DISCUSSION_ROBOT_TESTING,\n             ),\n         ])\n     return suite\ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex cd711df4..aafe2222 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -47,8 +47,8 @@ def test_default_workflow(self):\n         self.assertEqual(\n             (\'comment_one_state_workflow\',),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\'\n-            )\n+                \'Discussion Item\',\n+            ),\n         )\n \n     def test_review_comments_permission(self):\n@@ -61,9 +61,9 @@ def test_review_comments_permission(self):\n         self.assertFalse(\n             self.portal.portal_membership.checkPermission(\n                 \'Review comments\',\n-                self.folder\n+                self.folder,\n             ),\n-            self.folder\n+            self.folder,\n         )\n \n     def test_reply_to_item_permission(self):\n@@ -125,7 +125,7 @@ def setUp(self):\n         cid = conversation.addComment(comment)\n \n         self.comment = self.folder.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(cid)\n+            \'++conversation++default/{0}\'.format(cid),\n         )\n \n         self.portal.acl_users._doAddUser(\'member\', \'secret\', [\'Member\'], [])\n@@ -138,8 +138,10 @@ def setUp(self):\n     def test_initial_workflow_state(self):\n         """Make sure the initial workflow state of a comment is \'private\'.\n         """\n-        self.assertEqual(self.workflow.getInfoFor(self.doc, \'review_state\'),\n-                         \'private\')\n+        self.assertEqual(\n+            self.workflow.getInfoFor(self.doc, \'review_state\'),\n+            \'private\',\n+        )\n \n     def test_view_comments(self):\n         """Make sure published comments can be viewed by everyone.\n@@ -184,7 +186,8 @@ def test_migration(self):\n         # The workflow chain is still what we want.\n         self.assertEqual(\n             self.portal.portal_workflow.getChainFor(\'Discussion Item\'),\n-            (\'comment_one_state_workflow\',))\n+            (\'comment_one_state_workflow\',),\n+        )\n         # A Manager can still see the comment.\n         self.assertTrue(checkPerm(View, self.comment))\n         # Anonymous cannot see the comment.\n@@ -209,7 +212,8 @@ def setUp(self):\n         # Set workflow for Discussion item to review workflow\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow\',))\n+            (\'comment_review_workflow\',),\n+        )\n \n         # Create a conversation for this Document\n         conversation = IConversation(self.portal.doc1)\n@@ -219,7 +223,7 @@ def setUp(self):\n         comment.text = \'Comment text\'\n         comment_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(comment_id)\n+            \'++conversation++default/{0}\'.format(comment_id),\n         )\n \n         self.conversation = conversation\n@@ -239,9 +243,11 @@ def test_delete_as_anonymous(self):\n         # Make sure that anonymous users can not delete comments\n         logout()\n         self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        self.assertRaises(Unauthorized,\n-                          self.comment.restrictedTraverse,\n-                          \'@@moderate-delete-comment\')\n+        self.assertRaises(\n+            Unauthorized,\n+            self.comment.restrictedTraverse,\n+            \'@@moderate-delete-comment\',\n+        )\n         self.assertTrue(self.comment_id in self.conversation.objectIds())\n \n     def test_delete_as_user(self):\n@@ -249,9 +255,11 @@ def test_delete_as_user(self):\n         logout()\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        self.assertRaises(Unauthorized,\n-                          self.comment.restrictedTraverse,\n-                          \'@@moderate-delete-comment\')\n+        self.assertRaises(\n+            Unauthorized,\n+            self.comment.restrictedTraverse,\n+            \'@@moderate-delete-comment\',\n+        )\n         self.assertTrue(self.comment_id in self.conversation.objectIds())\n \n     def test_publish(self):\n@@ -261,8 +269,8 @@ def test_publish(self):\n             \'pending\',\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\'\n-            )\n+                \'review_state\',\n+            ),\n         )\n         view = self.comment.restrictedTraverse(\'@@moderate-publish-comment\')\n         view()\n@@ -270,8 +278,8 @@ def test_publish(self):\n             \'published\',\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\'\n-            )\n+                \'review_state\',\n+            ),\n         )\n \n     def test_publish_as_anonymous(self):\n@@ -281,20 +289,20 @@ def test_publish_as_anonymous(self):\n         self.assertEqual(\n             \'pending\', self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\'\n-            )\n+                \'review_state\',\n+            ),\n         )\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@moderate-publish-comment\'\n+            \'@@moderate-publish-comment\',\n         )\n         self.assertEqual(\n             \'pending\',\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\'\n-            )\n+                \'review_state\',\n+            ),\n         )\n \n     def test_publish_comment_on_private_content_not_visible_to_world(self):\ndiff --git a/setup.py b/setup.py\nindex cab9a597..29d217cd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,7 +4,7 @@\n from setuptools import setup\n \n \n-version = \'3.0.6\'\n+version = \'3.0.7.dev0\'\n \n install_requires = [\n     \'setuptools\',\n'

Repository: plone.app.discussion


Branch: refs/heads/3.x
Date: 2018-07-10T14:07:22+02:00
Author: Markus Hilbert (iham) <markus.hilbert@iham.at>
Commit: https://github.com/plone/plone.app.discussion/commit/84dca48b5b9d530f620926c2bb14834505a1e27c

Fixed tests when IRichText behavior is used.

Files changed:
M CHANGES.rst
M plone/app/discussion/browser/comment.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_functional.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex c8c5f87c..dd332d4e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -19,6 +19,8 @@ Bug fixes:\n   This is a follow up to `issue 476 <https://github.com/plone/plone.app.contenttypes/issues/476>`_.\n   [iham]\n \n+- *add item here*\n+\n \n 3.0.6 (2018-06-18)\n ------------------\ndiff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex 590e8984..0693a8c0 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -3,6 +3,7 @@\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.discussion import _\n+from plone.app.discussion.browser.comments import CommentForm\n from plone.registry.interfaces import IRegistry\n from plone.z3cform.layout import wrap_form\n from Products.CMFCore.utils import getToolByName\n@@ -13,7 +14,6 @@\n from zope.component import getUtility\n from zope.event import notify\n from zope.lifecycleevent import ObjectModifiedEvent\n-from .comments import CommentForm\n \n \n class View(BrowserView):\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 85fb2980..6f948949 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -19,8 +19,8 @@\n from zope.component import createObject\n from zope.component import queryUtility\n \n-import unittest\n import six\n+import unittest\n \n \n try:\ndiff --git a/plone/app/discussion/tests/test_functional.py b/plone/app/discussion/tests/test_functional.py\nindex 14db437a..223a36f7 100644\n--- a/plone/app/discussion/tests/test_functional.py\n+++ b/plone/app/discussion/tests/test_functional.py\n@@ -31,7 +31,7 @@ def test_suite():\n                 optionflags=optionflags,\n                 globs={\n                     'pprint': pprint.pprint,\n-                }\n+                },\n             ),\n             layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING,\n         )\n"

Repository: plone.app.discussion


Branch: refs/heads/3.x
Date: 2018-07-11T12:26:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.discussion/commit/d82051d6afd2f0bffd4316b979e9d3ef69bebe67

Merge pull request #136 from plone/issue_135

Fixed tests when IRichText behavior is used.

Files changed:
M CHANGES.rst
M plone/app/discussion/browser/comment.py
M plone/app/discussion/browser/comments.py
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/conversation.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/testing.py
M plone/app/discussion/tests/functional_test_comments.txt
M plone/app/discussion/tests/test_catalog.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_contentrules.py
M plone/app/discussion/tests/test_controlpanel.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_events.py
M plone/app/discussion/tests/test_functional.py
M plone/app/discussion/tests/test_indexers.py
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_notifications.py
M plone/app/discussion/tests/test_robot.py
M plone/app/discussion/tests/test_workflow.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b4768514..dd332d4e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,11 @@ New features:\n \n Bug fixes:\n \n+- Fixed tests when IRichText behavior is used.\n+  IRichText -> IRichTextBehavior\n+  This is a follow up to `issue 476 <https://github.com/plone/plone.app.contenttypes/issues/476>`_.\n+  [iham]\n+\n - *add item here*\n \n \ndiff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex 6497fecb..0693a8c0 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -2,8 +2,8 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from .comments import CommentForm\n from plone.app.discussion import _\n+from plone.app.discussion.browser.comments import CommentForm\n from plone.registry.interfaces import IRegistry\n from plone.z3cform.layout import wrap_form\n from Products.CMFCore.utils import getToolByName\ndiff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 2689c971..b0cfb399 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -32,33 +32,32 @@\n from zope.i18nmessageid import Message\n from zope.interface import alsoProvides\n \n-\n import six\n \n \n COMMENT_DESCRIPTION_PLAIN_TEXT = _(\n     u\'comment_description_plain_text\',\n     default=u\'You can add a comment by filling out the form below. \'\n-            u\'Plain text formatting.\'\n+            u\'Plain text formatting.\',\n )\n \n COMMENT_DESCRIPTION_MARKDOWN = _(\n     u\'comment_description_markdown\',\n     default=u\'You can add a comment by filling out the form below. \'\n             u\'Plain text formatting. You can use the Markdown syntax for \'\n-            u\'links and images.\'\n+            u\'links and images.\',\n )\n \n COMMENT_DESCRIPTION_INTELLIGENT_TEXT = _(\n     u\'comment_description_intelligent_text\',\n     default=u\'You can add a comment by filling out the form below. \'\n             u\'Plain text formatting. Web and email addresses are \'\n-            u\'transformed into clickable links.\'\n+            u\'transformed into clickable links.\',\n )\n \n COMMENT_DESCRIPTION_MODERATION_ENABLED = _(\n     u\'comment_description_moderation_enabled\',\n-    default=u\'Comments are moderated.\'\n+    default=u\'Comments are moderated.\',\n )\n \n \n@@ -178,11 +177,11 @@ def get_author(self, data):\n             author_name = fullname\n             if email and isinstance(email, str):\n                 email = six.text_type(email, \'utf-8\')\n-            # XXX: according to IComment interface author_email must not be\n+            # XXX: according to IComment interface author_email must not be  # noqa T000\n             # set for logged in users, cite:\n             # \'for anonymous comments only, set to None for logged in comments\'\n             author_email = email\n-            # /XXX\n+            # /XXX  # noqa T000\n \n         return author_name, author_email\n \n@@ -229,7 +228,7 @@ def create_comment(self, data):\n             raise Unauthorized(\n                 u\'Anonymous user tries to post a comment, but anonymous \'\n                 u\'commenting is disabled. Or user does not have the \'\n-                u"\'reply to item\' permission."\n+                u"\'reply to item\' permission.",\n             )\n \n         return comment\n@@ -241,10 +240,10 @@ def handleComment(self, action):\n \n         # Check if conversation is enabled on this content object\n         if not self.__parent__.restrictedTraverse(\n-            \'@@conversation_view\'\n+            \'@@conversation_view\',\n         ).enabled():\n             raise Unauthorized(\n-                \'Discussion is not enabled for this content object.\'\n+                \'Discussion is not enabled for this content object.\',\n             )\n \n         # Validation form\n@@ -294,7 +293,7 @@ def handleComment(self, action):\n         comment_review_state = workflowTool.getInfoFor(\n             comment,\n             \'review_state\',\n-            None\n+            None,\n         )\n         if comment_review_state == \'pending\' and not can_review:\n             # Show info message when comment moderation is enabled\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex 65bcce7e..3c88ebe3 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -34,7 +34,7 @@ class DiscussionSettingsEditForm(controlpanel.RegistryEditForm):\n                 u\'To enable the moderation workflow for comments, \'\n                 u\'go to the Types Control Panel, choose \'\n                 u\'"Comment" and set workflow to \'\n-                u\'"Comment Review Workflow".\'\n+                u\'"Comment Review Workflow".\',\n     )\n \n     def updateFields(self):\n@@ -68,10 +68,10 @@ def updateWidgets(self):\n         self.widgets[\'anonymous_comments\'].label = _(u\'Anonymous Comments\')\n         self.widgets[\'show_commenter_image\'].label = _(u\'Commenter Image\')\n         self.widgets[\'moderator_notification_enabled\'].label = _(\n-            u\'Moderator Email Notification\'\n+            u\'Moderator Email Notification\',\n         )\n         self.widgets[\'user_notification_enabled\'].label = _(\n-            u\'User Email Notification\'\n+            u\'User Email Notification\',\n         )\n \n     @button.buttonAndHandler(_(\'Save\'), name=None)\n@@ -92,8 +92,8 @@ def handleCancel(self, action):\n         self.request.response.redirect(\n             \'{0}/{1}\'.format(\n                 self.context.absolute_url(),\n-                self.control_panel_view\n-            )\n+                self.control_panel_view,\n+            ),\n         )\n \n \ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 97c5dc79..6bbc760a 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -76,7 +76,9 @@ def creator(object):\n @indexer(IComment)\n def description(object):\n     # Return the first 25 words of the comment text and append \' [...]\'\n-    text = \' \'.join(object.getText(targetMimetype=\'text/plain\').split()[:MAX_DESCRIPTION])\n+    text = \' \'.join(\n+        object.getText(targetMimetype=\'text/plain\').split()[:MAX_DESCRIPTION],\n+    )\n     if len(object.getText().split()) > 25:\n         text += \' [...]\'\n     return text\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 33d77f43..7b960071 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -38,8 +38,6 @@\n from zope.interface import implementer\n \n import logging\n-\n-\n import six\n \n \n@@ -120,7 +118,7 @@ def __init__(self):\n             aclpath = [x for x in user.getPhysicalPath() if x]\n             self._owner = (aclpath, user.getId(),)\n             self.__ac_local_roles__ = {\n-                user.getId(): [\'Owner\']\n+                user.getId(): [\'Owner\'],\n             }\n \n     @property\n@@ -164,7 +162,11 @@ def getText(self, targetMimetype=None):\n             msg = u\'Transform "{0}" => "{1}" not available. Failed to \' \\\n                   u\'transform comment "{2}".\'\n             logger.error(\n-                msg.format(sourceMimetype, targetMimetype, self.absolute_url())\n+                msg.format(\n+                    sourceMimetype,\n+                    targetMimetype,\n+                    self.absolute_url(),\n+                ),\n             )\n             return text\n \n@@ -176,10 +178,12 @@ def Title(self):\n \n         if not self.author_name:\n             author_name = translate(\n-                Message(_(\n-                    u\'label_anonymous\',\n-                    default=u\'Anonymous\'\n-                ))\n+                Message(\n+                    _(\n+                        u\'label_anonymous\',\n+                        default=u\'Anonymous\',\n+                    ),\n+                ),\n             )\n         else:\n             author_name = self.author_name\n@@ -286,11 +290,11 @@ def notify_content_object_moved(obj, event):\n     old_path = \'/\'.join(\n         event.oldParent.getPhysicalPath() +\n         (event.oldName,) +\n-        moved_path\n+        moved_path,\n     )\n     brains = catalog.searchResults(dict(\n         path={\'query\': old_path},\n-        portal_type=\'Discussion Item\'\n+        portal_type=\'Discussion Item\',\n     ))\n     for brain in brains:\n         catalog.uncatalog_object(brain.getPath())\n@@ -352,24 +356,28 @@ def notify_user(obj, event):\n             mapping={\n                 \'title\': safe_unicode(content_object.title),\n                 \'link\': content_object.absolute_url() + \'/view#\' + obj.id,\n-                \'text\': obj.text\n-            }\n+                \'text\': obj.text,\n+            },\n         ),\n-        context=obj.REQUEST\n+        context=obj.REQUEST,\n     )\n     for email in emails:\n         # Send email\n         try:\n-            mail_host.send(message,\n-                           email,\n-                           sender,\n-                           subject,\n-                           charset=\'utf-8\')\n+            mail_host.send(\n+                message,\n+                email,\n+                sender,\n+                subject,\n+                charset=\'utf-8\',\n+            )\n         except SMTPException:\n-            logger.error(\'SMTP exception while trying to send an \' +\n-                         \'email from %s to %s\',\n-                         sender,\n-                         email)\n+            logger.error(\n+                \'SMTP exception while trying to send an \' +\n+                \'email from %s to %s\',\n+                sender,\n+                email,\n+            )\n \n \n def notify_moderator(obj, event):\n@@ -422,19 +430,21 @@ def notify_moderator(obj, event):\n                 \'text\': obj.text,\n                 \'link_approve\': link_approve,\n                 \'link_delete\': link_delete,\n-            }\n+            },\n         ),\n-        context=obj.REQUEST\n+        context=obj.REQUEST,\n     )\n \n     # Send email\n     try:\n         mail_host.send(message, mto, sender, subject, charset=\'utf-8\')\n     except SMTPException as e:\n-        logger.error(\'SMTP exception (%s) while trying to send an \' +\n-                     \'email notification to the comment moderator \' +\n-                     \'(from %s to %s, message: %s)\',\n-                     e,\n-                     sender,\n-                     mto,\n-                     message)\n+        logger.error(\n+            \'SMTP exception (%s) while trying to send an \' +\n+            \'email notification to the comment moderator \' +\n+            \'(from %s to %s, message: %s)\',\n+            e,\n+            sender,\n+            mto,\n+            message,\n+        )\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex e7dec306..e616a79e 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -37,10 +37,8 @@\n from zope.lifecycleevent import ObjectCreatedEvent\n from zope.lifecycleevent import ObjectRemovedEvent\n \n-import time\n-\n-\n import six\n+import time\n \n \n @implementer(IConversation, IHideFromBreadcrumbs)\n@@ -420,7 +418,7 @@ def __init__(self, context):\n         self.conversation = aq_parent(self.comment)\n         conversation_has_no_children = not hasattr(\n             self.conversation,\n-            \'_children\'\n+            \'_children\',\n         )\n         if self.conversation is None or conversation_has_no_children:\n             raise TypeError("This adapter doesn\'t know what to do with the "\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex 549eaf97..98ce4359 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -59,7 +59,8 @@ class IConversation(IIterableMapping):\n \n     public_commentators = schema.Set(\n         title=_(\n-            u\'The set of unique commentators (usernames) of published_comments\'\n+            u\'The set of unique commentators (usernames) \'\n+            u\'of published_comments\',\n         ),\n         readonly=True,\n     )\n@@ -174,15 +175,15 @@ class IComment(Interface):\n     text = schema.Text(\n         title=_(\n             u\'label_comment\',\n-            default=u\'Comment\'\n-        )\n+            default=u\'Comment\',\n+        ),\n     )\n \n     user_notification = schema.Bool(\n         title=_(\n-            u\'Notify me of new comments via email.\'\n+            u\'Notify me of new comments via email.\',\n         ),\n-        required=False\n+        required=False,\n     )\n \n     creator = schema.TextLine(title=_(u\'Username of the commenter\'))\n@@ -216,7 +217,7 @@ class IDiscussionSettings(Interface):\n             default=u\'If selected, users are able to post comments on the \'\n                     u\'site. However, you will still need to enable comments \'\n                     u\'for specific content types, folders or content \'\n-                    u\'objects before users will be able to post comments.\'\n+                    u\'objects before users will be able to post comments.\',\n         ),\n         required=False,\n         default=False,\n@@ -230,7 +231,7 @@ class IDiscussionSettings(Interface):\n             default=u\'If selected, anonymous users are able to post \'\n                     u\'comments without logging in. It is highly \'\n                     u\'recommended to use a captcha solution to prevent \'\n-                    u\'spam if this setting is enabled.\'\n+                    u\'spam if this setting is enabled.\',\n         ),\n         required=False,\n         default=False,\n@@ -242,15 +243,16 @@ class IDiscussionSettings(Interface):\n         description=_(\n             u\'help_anonymous_email_enabled\',\n             default=u\'If selected, anonymous user will have to \'\n-                    u\'give their email.\'),\n+                    u\'give their email.\',\n+        ),\n         required=False,\n-        default=False\n+        default=False,\n     )\n \n     moderation_enabled = schema.Bool(\n         title=_(\n             u\'label_moderation_enabled\',\n-            default=\'Enable comment moderation\'\n+            default=\'Enable comment moderation\',\n         ),\n         description=_(\n             u\'help_moderation_enabled\',\n@@ -260,7 +262,7 @@ class IDiscussionSettings(Interface):\n                     u\'or "Manager") can approve comments to make them \'\n                     u\'visible to the public. If you want to enable a \'\n                     u\'custom comment workflow, you have to go to the \'\n-                    u\'types control panel.\'\n+                    u\'types control panel.\',\n         ),\n         required=False,\n         default=False,\n@@ -347,7 +349,7 @@ class IDiscussionSettings(Interface):\n     moderator_email = schema.ASCIILine(\n         title=_(\n             u\'label_moderator_email\',\n-            default=u\'Moderator Email Address\'\n+            default=u\'Moderator Email Address\',\n         ),\n         description=_(\n             u\'help_moderator_email\',\n@@ -359,14 +361,14 @@ class IDiscussionSettings(Interface):\n     user_notification_enabled = schema.Bool(\n         title=_(\n             u\'label_user_notification_enabled\',\n-            default=u\'Enable user email notification\'\n+            default=u\'Enable user email notification\',\n         ),\n         description=_(\n             u\'help_user_notification_enabled\',\n             default=u\'If selected, users can choose to be notified \'\n                     u\'of new comments by email.\'),\n         required=False,\n-        default=False\n+        default=False,\n     )\n \n \ndiff --git a/plone/app/discussion/testing.py b/plone/app/discussion/testing.py\nindex a7c439ae..5a4060ba 100644\n--- a/plone/app/discussion/testing.py\n+++ b/plone/app/discussion/testing.py\n@@ -92,7 +92,7 @@ def setUpPloneSite(self, portal):\n         portal.invokeFactory(\n             id=\'doc1\',\n             title=\'Document 1\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n \n \n@@ -119,5 +119,5 @@ def setUpPloneSite(self, portal):\n     name=\'PloneAppDiscussion:Functional\')\n PLONE_APP_DISCUSSION_ROBOT_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_DISCUSSION_ROBOT_FIXTURE,),\n-    name=\'PloneAppDiscussion:Robot\'\n+    name=\'PloneAppDiscussion:Robot\',\n )\ndiff --git a/plone/app/discussion/tests/functional_test_comments.txt b/plone/app/discussion/tests/functional_test_comments.txt\nindex c9fe2bd8..871496cd 100644\n--- a/plone/app/discussion/tests/functional_test_comments.txt\n+++ b/plone/app/discussion/tests/functional_test_comments.txt\n@@ -472,7 +472,7 @@ Edit the content object.\n     >>> secret = ring.random()\n     >>> token = hmac.new(secret, \'admin\', sha).hexdigest()\n     >>> browser.open("http://nohost/plone/doc1/edit?_authenticator=" + token)\n-    >>> browser.getControl(name=\'form.widgets.IRichText.text\').value = "Lorem ipsum"\n+    >>> browser.getControl(name=\'form.widgets.IRichTextBehavior.text\').value = "Lorem ipsum"\n     >>> browser.getControl(\'Save\').click()\n \n Make sure the edit was successful.\ndiff --git a/plone/app/discussion/tests/test_catalog.py b/plone/app/discussion/tests/test_catalog.py\nindex bad2ec23..1b37d77b 100644\n--- a/plone/app/discussion/tests/test_catalog.py\n+++ b/plone/app/discussion/tests/test_catalog.py\n@@ -26,19 +26,19 @@ def setUp(self):\n     def test_catalog_installed(self):\n         self.assertTrue(\n             \'total_comments\' in\n-            self.portal.portal_catalog.indexes()\n+            self.portal.portal_catalog.indexes(),\n         )\n         self.assertTrue(\n             \'commentators\' in\n-            self.portal.portal_catalog.indexes()\n+            self.portal.portal_catalog.indexes(),\n         )\n         self.assertTrue(\n             \'total_comments\' in\n-            self.portal.portal_catalog.schema()\n+            self.portal.portal_catalog.schema(),\n         )\n         self.assertTrue(\n             \'in_response_to\' in\n-            self.portal.portal_catalog.schema()\n+            self.portal.portal_catalog.schema(),\n         )\n \n     def test_collection_criteria_installed(self):\n@@ -76,13 +76,14 @@ def setUp(self):\n         new_comment1_id = conversation.addComment(comment1)\n         self.comment_id = new_comment1_id\n \n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         self.conversation = conversation\n         self.brains = brains\n         self.doc1_brain = brains[0]\n@@ -99,16 +100,17 @@ def test_total_comments(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id)\n+            \'++conversation++default/{0}\'.format(new_comment2_id),\n         )\n         comment2.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.total_comments, 2)\n \n@@ -116,7 +118,7 @@ def test_last_comment_date(self):\n         self.assertTrue(\'last_comment_date\' in self.doc1_brain)\n         self.assertEqual(\n             self.doc1_brain.last_comment_date,\n-            datetime(2006, 9, 17, 14, 18, 12)\n+            datetime(2006, 9, 17, 14, 18, 12),\n         )\n \n         # Add another comment and check if last comment date is updated.\n@@ -128,47 +130,50 @@ def test_last_comment_date(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id)\n+            \'++conversation++default/{0}\'.format(new_comment2_id),\n         )\n         comment2.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(\n             doc1_brain.last_comment_date,\n-            datetime(2009, 9, 17, 14, 18, 12)\n+            datetime(2009, 9, 17, 14, 18, 12),\n         )\n \n         # Remove the comment again\n         del self.conversation[new_comment2_id]\n \n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(\n             doc1_brain.last_comment_date,\n-            datetime(2006, 9, 17, 14, 18, 12)\n+            datetime(2006, 9, 17, 14, 18, 12),\n         )\n \n         # remove all comments\n         del self.conversation[self.new_comment1_id]\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.last_comment_date, None)\n \n@@ -185,53 +190,57 @@ def test_commentators(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id)\n+            \'++conversation++default/{0}\'.format(new_comment2_id),\n         )\n         comment2.reindexObject()\n \n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n \n         self.assertEqual(doc1_brain.commentators, (\'Jim\', \'Emma\'))\n \n         # remove one comments\n         del self.conversation[new_comment2_id]\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.commentators, (\'Jim\',))\n \n         # remove all comments\n         del self.conversation[self.new_comment1_id]\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.commentators, ())\n \n     def test_conversation_indexes_not_in_comments(self):\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Discussion Item\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Discussion Item\',\n+            ),\n+        )\n         comment1_brain = brains[0]\n         self.assertEqual(comment1_brain.commentators, None)\n         self.assertEqual(comment1_brain.last_comment_date, None)\n@@ -240,13 +249,14 @@ def test_conversation_indexes_not_in_comments(self):\n     def test_dont_index_private_commentators(self):\n         self.comment1.manage_permission(\'View\', roles=tuple())\n         self.portal.doc1.reindexObject()\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.commentators, ())\n \n@@ -272,14 +282,15 @@ def setUp(self):\n \n         # Comment brain\n         self.comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id)\n-        )\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.comment.getPhysicalPath())\n-            }\n-        ))\n+            \'++conversation++default/{0}\'.format(new_comment1_id),\n+        )\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.comment.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         self.comment_brain = brains[0]\n \n     def test_title(self):\n@@ -292,14 +303,15 @@ def test_no_name_title(self):\n \n         # Comment brain\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(cid)\n-        )\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(comment.getPhysicalPath())\n-            }\n-        ))\n+            \'++conversation++default/{0}\'.format(cid),\n+        )\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(comment.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         comment_brain = brains[0]\n         self.assertEqual(comment_brain.Title, \'Anonymous on Document 1\')\n \n@@ -327,12 +339,13 @@ def test_delete_comment(self):\n         # Make sure a comment is removed from the catalog as well when it is\n         # deleted.\n         del self.conversation[self.comment_id]\n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.comment.getPhysicalPath())\n-            }\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.comment.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         self.assertEqual(len(brains), 0)\n \n     def test_reindex_comment(self):\n@@ -357,17 +370,17 @@ def test_move_comments_when_content_object_is_moved(self):\n         self.portal.invokeFactory(\n             id=\'folder1\',\n             title=\'Folder 1\',\n-            type_name=\'Folder\'\n+            type_name=\'Folder\',\n         )\n         self.portal.invokeFactory(\n             id=\'folder2\',\n             title=\'Folder 2\',\n-            type_name=\'Folder\'\n+            type_name=\'Folder\',\n         )\n         self.portal.folder1.invokeFactory(\n             id=\'moveme\',\n             title=\'Move Me\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n         conversation = IConversation(self.portal.folder1.moveme)\n         comment = createObject(\'plone.Comment\')\n@@ -380,43 +393,57 @@ def test_move_comments_when_content_object_is_moved(self):\n         self.portal.folder2.manage_pasteObjects(cp)\n \n         # Make sure no old comment brains are\n-        brains = self.catalog.searchResults(dict(\n-            portal_type=\'Discussion Item\',\n-            path={\'query\': \'/\'.join(self.portal.folder1.getPhysicalPath())}\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                portal_type=\'Discussion Item\',\n+                path={\n+                    \'query\': \'/\'.join(self.portal.folder1.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         self.assertEqual(len(brains), 0)\n \n-        brains = self.catalog.searchResults(dict(\n-            portal_type=\'Discussion Item\',\n-            path={\n-                \'query\': \'/\'.join(self.portal.folder2.getPhysicalPath())\n-            }\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                portal_type=\'Discussion Item\',\n+                path={\n+                    \'query\': \'/\'.join(self.portal.folder2.getPhysicalPath()),\n+                },\n+            ),\n+        )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n             \'/plone/folder2/moveme/++conversation++default/\' +\n-            str(comment_id)\n+            str(comment_id),\n         )\n \n     def test_move_upper_level_folder(self):\n         # create a folder with a nested structure\n-        self.portal.invokeFactory(id=\'sourcefolder\',\n-                                  title=\'Source Folder\',\n-                                  type_name=\'Folder\')\n-        self.portal.sourcefolder.invokeFactory(id=\'moveme\',\n-                                               title=\'Move Me\',\n-                                               type_name=\'Folder\')\n-        self.portal.sourcefolder.moveme.invokeFactory(id=\'mydocument\',\n-                                                      title=\'My Document\',\n-                                                      type_name=\'Folder\')\n-        self.portal.invokeFactory(id=\'targetfolder\',\n-                                  title=\'Target Folder\',\n-                                  type_name=\'Folder\')\n+        self.portal.invokeFactory(\n+            id=\'sourcefolder\',\n+            title=\'Source Folder\',\n+            type_name=\'Folder\',\n+        )\n+        self.portal.sourcefolder.invokeFactory(\n+            id=\'moveme\',\n+            title=\'Move Me\',\n+            type_name=\'Folder\',\n+        )\n+        self.portal.sourcefolder.moveme.invokeFactory(\n+            id=\'mydocument\',\n+            title=\'My Document\',\n+            type_name=\'Folder\',\n+        )\n+        self.portal.invokeFactory(\n+            id=\'targetfolder\',\n+            title=\'Target Folder\',\n+            type_name=\'Folder\',\n+        )\n \n         # create comment on my-document\n         conversation = IConversation(\n-            self.portal.sourcefolder.moveme.mydocument\n+            self.portal.sourcefolder.moveme.mydocument,\n         )\n         comment = createObject(\'plone.Comment\')\n         comment_id = conversation.addComment(comment)\n@@ -429,22 +456,26 @@ def test_move_upper_level_folder(self):\n         self.portal.targetfolder.manage_pasteObjects(cp)\n \n         # Make sure no old comment brains are left\n-        brains = self.catalog.searchResults(dict(\n-            portal_type=\'Discussion Item\',\n-            path={\'query\': \'/plone/sourcefolder/moveme\'}\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                portal_type=\'Discussion Item\',\n+                path={\'query\': \'/plone/sourcefolder/moveme\'},\n+            ),\n+        )\n         self.assertEqual(len(brains), 0)\n \n         # make sure comments are correctly index on the target\n-        brains = self.catalog.searchResults(dict(\n-            portal_type=\'Discussion Item\',\n-            path={\'query\': \'/plone/targetfolder/moveme\'}\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                portal_type=\'Discussion Item\',\n+                path={\'query\': \'/plone/targetfolder/moveme\'},\n+            ),\n+        )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n             \'/plone/targetfolder/moveme/mydocument/++conversation++default/\' +\n-            str(comment_id)\n+            str(comment_id),\n         )\n \n     def test_update_comments_when_content_object_is_renamed(self):\n@@ -454,12 +485,13 @@ def test_update_comments_when_content_object_is_renamed(self):\n         self.portal.manage_renameObject(\'doc1\', \'doc2\')\n \n         brains = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\')\n+            portal_type=\'Discussion Item\',\n+        )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n             \'/plone/doc2/++conversation++default/\' +\n-            str(self.comment_id)\n+            str(self.comment_id),\n         )\n \n     def test_clear_and_rebuild_catalog(self):\n@@ -477,7 +509,7 @@ def test_clear_and_rebuild_catalog(self):\n         self.assertEqual(\n             comment_brain.getPath(),\n             \'/plone/doc1/++conversation++default/\' +\n-            str(self.comment_id)\n+            str(self.comment_id),\n         )\n \n     def test_clear_and_rebuild_catalog_for_nested_comments(self):\n@@ -549,13 +581,14 @@ def setUp(self):\n \n         conversation = IConversation(self.portal.doc1)\n \n-        brains = self.catalog.searchResults(dict(\n-            path={\n-                \'query\':\n-                \'/\'.join(self.portal.doc1.getPhysicalPath())\n-            },\n-            portal_type=\'Document\'\n-        ))\n+        brains = self.catalog.searchResults(\n+            dict(\n+                path={\n+                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                },\n+                portal_type=\'Document\',\n+            ),\n+        )\n         self.conversation = conversation\n         self.brains = brains\n         self.doc1_brain = brains[0]\n@@ -567,5 +600,5 @@ def test_total_comments(self):\n         # Make sure no conversation has been created\n         self.assertTrue(\n             \'plone.app.discussion:conversation\' not in\n-            IAnnotations(self.portal.doc1)\n+            IAnnotations(self.portal.doc1),\n         )\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex b78af79a..8ac4d933 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -68,7 +68,7 @@ def test_uid(self):\n         comment1 = createObject(\'plone.Comment\')\n         conversation.addComment(comment1)\n         comment_brain = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\'\n+            portal_type=\'Discussion Item\',\n         )[0]\n         self.assertTrue(comment_brain.UID)\n \n@@ -79,7 +79,7 @@ def test_uid_is_unique(self):\n         comment2 = createObject(\'plone.Comment\')\n         conversation.addComment(comment2)\n         brains = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\'\n+            portal_type=\'Discussion Item\',\n         )\n         self.assertNotEqual(brains[0].UID, brains[1].UID)\n \n@@ -88,7 +88,7 @@ def test_comment_uid_differs_from_content_uid(self):\n         comment1 = createObject(\'plone.Comment\')\n         conversation.addComment(comment1)\n         comment_brain = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\'\n+            portal_type=\'Discussion Item\',\n         )[0]\n         self.assertNotEqual(self.document_brain.UID, comment_brain.UID)\n \n@@ -109,7 +109,7 @@ def test_title_special_characters(self):\n         self.portal.invokeFactory(\n             id=\'doc_sp_chars\',\n             title=u\'Document \xc3\xa4\xc3\xbc\xc3\xb6\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n         conversation = IConversation(self.portal.doc_sp_chars)\n         comment1 = createObject(\'plone.Comment\')\n@@ -121,7 +121,7 @@ def test_title_special_characters_utf8(self):\n         self.portal.invokeFactory(\n             id=\'doc_sp_chars_utf8\',\n             title=\'Document \xc3\xab\xc3\xaf\xc3\xbb\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n         conversation = IConversation(self.portal.doc_sp_chars_utf8)\n         comment1 = createObject(\'plone.Comment\')\n@@ -157,7 +157,7 @@ def test_getText(self):\n         comment1.text = \'First paragraph\\n\\nSecond_paragraph\'\n         self.assertEqual(\n             \'\'.join(comment1.getText().split()),\n-            \'<p>Firstparagraph<br/><br/>Second_paragraph</p>\'\n+            \'<p>Firstparagraph<br/><br/>Second_paragraph</p>\',\n         )\n \n     def test_getText_escapes_HTML(self):\n@@ -165,7 +165,7 @@ def test_getText_escapes_HTML(self):\n         comment1.text = \'<b>Got HTML?</b>\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>&lt;b&gt;Got HTML?&lt;/b&gt;</p>\'\n+            \'<p>&lt;b&gt;Got HTML?&lt;/b&gt;</p>\',\n         )\n \n     def test_getText_with_non_ascii_characters(self):\n@@ -173,7 +173,7 @@ def test_getText_with_non_ascii_characters(self):\n         comment1.text = u\'Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc.\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\'\n+            \'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\',\n         )\n \n     def test_getText_doesnt_link(self):\n@@ -181,7 +181,7 @@ def test_getText_doesnt_link(self):\n         comment1.text = \'Go to http://www.plone.org\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>Go to http://www.plone.org</p>\'\n+            \'<p>Go to http://www.plone.org</p>\',\n         )\n \n     def test_getText_uses_comment_mime_type(self):\n@@ -191,7 +191,7 @@ def test_getText_uses_comment_mime_type(self):\n         self.assertEqual(\n             comment1.getText(),\n             \'Go to <a href="http://www.plone.org" \' +\n-            \'rel="nofollow">http://www.plone.org</a>\'\n+            \'rel="nofollow">http://www.plone.org</a>\',\n         )\n \n     def test_getText_uses_comment_mime_type_html(self):\n@@ -200,7 +200,7 @@ def test_getText_uses_comment_mime_type_html(self):\n         comment1.mime_type = \'text/html\'\n         self.assertEqual(\n             comment1.getText(),\n-            \'Go to <a href="http://www.plone.org">plone.org</a>\'\n+            \'Go to <a href="http://www.plone.org">plone.org</a>\',\n         )\n \n     def test_getText_w_custom_targetMimetype(self):\n@@ -230,20 +230,20 @@ def test_traversal(self):\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id)\n+            \'++conversation++default/{0}\'.format(new_comment1_id),\n         )\n         self.assertTrue(IComment.providedBy(comment))\n \n         self.assertEqual(\n             (\n                 \'\', \'plone\', \'doc1\', \'++conversation++default\',\n-                str(new_comment1_id)\n+                str(new_comment1_id),\n             ),\n-            comment.getPhysicalPath()\n+            comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_comment1_id), comment.absolute_url()\n+            str(new_comment1_id), comment.absolute_url(),\n         )\n \n     def test_view_blob_types(self):\n@@ -254,7 +254,7 @@ def test_view_blob_types(self):\n         self.portal.invokeFactory(\n             id=\'image1\',\n             title=\'Image\',\n-            type_name=\'Image\'\n+            type_name=\'Image\',\n         )\n         conversation = IConversation(self.portal.image1)\n \n@@ -262,7 +262,7 @@ def test_view_blob_types(self):\n         comment1.text = \'Comment text\'\n         new_comment1_id = conversation.addComment(comment1)\n         comment = self.portal.image1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id)\n+            \'++conversation++default/{0}\'.format(new_comment1_id),\n         )\n \n         view = View(comment, self.request)\n@@ -275,7 +275,8 @@ def test_workflow(self):\n         """\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow,\'))\n+            (\'comment_review_workflow,\'),\n+        )\n \n         conversation = IConversation(self.portal.doc1)\n         comment1 = createObject(\'plone.Comment\')\n@@ -290,15 +291,15 @@ def test_workflow(self):\n         # Ensure the initial state was entered and recorded\n         self.assertEqual(\n             1,\n-            len(comment.workflow_history[\'comment_review_workflow\'])\n+            len(comment.workflow_history[\'comment_review_workflow\']),\n         )\n         self.assertEqual(\n             None,\n-            comment.workflow_history[\'comment_review_workflow\'][0][\'action\']\n+            comment.workflow_history[\'comment_review_workflow\'][0][\'action\'],\n         )\n         self.assertEqual(\n             \'pending\',\n-            self.portal.portal_workflow.getInfoFor(comment, \'review_state\')\n+            self.portal.portal_workflow.getInfoFor(comment, \'review_state\'),\n         )\n \n     def test_fti(self):\n@@ -306,7 +307,7 @@ def test_fti(self):\n \n         self.assertIn(\n             \'Discussion Item\',\n-            self.portal.portal_types.objectIds()\n+            self.portal.portal_types.objectIds(),\n         )\n \n         comment1 = createObject(\'plone.Comment\')\n@@ -330,12 +331,16 @@ def test_view(self):\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id)\n+            \'++conversation++default/{0}\'.format(new_comment1_id),\n         )\n \n         # make sure the view is there\n-        self.assertTrue(getMultiAdapter((comment, self.request),\n-                                        name=\'view\'))\n+        self.assertTrue(\n+            getMultiAdapter(\n+                (comment, self.request),\n+                name=\'view\',\n+            ),\n+        )\n \n         # make sure the HTTP redirect (status code 302) works when a comment\n         # is called directly\n@@ -371,7 +376,7 @@ def test_add_comment(self):\n         comment.text = \'Comment text\'\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -408,7 +413,7 @@ def test_delete_comment(self):\n         comment.text = \'Comment text\'\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -444,7 +449,7 @@ def test_traversal(self):\n         comment.text = \'Comment text\'\n         new_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -453,7 +458,7 @@ def test_traversal(self):\n         replies = IReplies(comment)\n         new_re_id = replies.addComment(re_comment)\n         re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_id)\n+            \'++conversation++default/{0}\'.format(new_re_id),\n         )\n \n         # Add a reply to the reply\n@@ -462,7 +467,7 @@ def test_traversal(self):\n         replies = IReplies(re_comment)\n         new_re_re_id = replies.addComment(re_re_comment)\n         re_re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_re_id)\n+            \'++conversation++default/{0}\'.format(new_re_re_id),\n         )\n \n         # Add a reply to the replies reply\n@@ -471,47 +476,47 @@ def test_traversal(self):\n         replies = IReplies(re_re_comment)\n         new_re_re_re_id = replies.addComment(re_re_re_comment)\n         re_re_re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_re_re_id)\n+            \'++conversation++default/{0}\'.format(new_re_re_re_id),\n         )\n \n         self.assertEqual(\n             (\'\', \'plone\', \'doc1\', \'++conversation++default\', str(new_id)),\n-            comment.getPhysicalPath()\n+            comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_id), comment.absolute_url()\n+            str(new_id), comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\'\', \'plone\', \'doc1\', \'++conversation++default\', str(new_re_id)),\n-            re_comment.getPhysicalPath()\n+            re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n             str(new_re_id),\n-            re_comment.absolute_url()\n+            re_comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\n                 \'\', \'plone\', \'doc1\', \'++conversation++default\',\n-                str(new_re_re_id)\n+                str(new_re_re_id),\n             ),\n-            re_re_comment.getPhysicalPath()\n+            re_re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n             str(new_re_re_id),\n-            re_re_comment.absolute_url()\n+            re_re_comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\n                 \'\', \'plone\', \'doc1\', \'++conversation++default\',\n-                str(new_re_re_re_id)\n+                str(new_re_re_re_id),\n             ),\n-            re_re_re_comment.getPhysicalPath()\n+            re_re_re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default/\' +\n             str(new_re_re_re_id),\n-            re_re_re_comment.absolute_url()\n+            re_re_re_comment.absolute_url(),\n         )\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 6f2ff235..5a34cb62 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -80,7 +80,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         # The form should return an error if the comment text field is empty\n@@ -88,7 +88,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -102,7 +102,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -144,14 +144,14 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         provideAdapter(\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=EditCommentForm,\n-            name=u\'edit-comment-form\'\n+            name=u\'edit-comment-form\',\n         )\n \n         # The form is submitted successfully, if the required text field is\n@@ -160,7 +160,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -174,7 +174,7 @@ def make_request(form={}):\n         request = make_request(form={\'form.widgets.text\': u\'foobar\'})\n         editForm = getMultiAdapter(\n             (comment, request),\n-            name=u\'edit-comment-form\'\n+            name=u\'edit-comment-form\',\n         )\n         editForm.update()\n         data, errors = editForm.extractData()  # pylint: disable-msg=W0612\n@@ -219,7 +219,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         # The form is submitted successfully, if the required text field is\n@@ -228,7 +228,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         commentForm.update()\n@@ -241,14 +241,14 @@ def make_request(form={}):\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u\'moderate-delete-comment\'\n+            name=u\'moderate-delete-comment\',\n         )\n         # try to delete last comment without \'Delete comments\' permission\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.assertRaises(\n             Unauthorized,\n             comment.restrictedTraverse,\n-            \'@@moderate-delete-comment\'\n+            \'@@moderate-delete-comment\',\n         )\n         deleteView()\n         self.assertEqual(1, len([x for x in conversation.getComments()]))\n@@ -277,7 +277,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         # The form is submitted successfully, if the required text field is\n@@ -286,7 +286,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n \n         commentForm.update()\n@@ -299,7 +299,7 @@ def make_request(form={}):\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u\'delete-own-comment\'\n+            name=u\'delete-own-comment\',\n         )\n         # try to delete last comment with johndoe\n         setRoles(self.portal, \'johndoe\', [\'Member\'])\n@@ -307,7 +307,7 @@ def make_request(form={}):\n         self.assertRaises(\n             Unauthorized,\n             comment.restrictedTraverse,\n-            \'@@delete-own-comment\'\n+            \'@@delete-own-comment\',\n         )\n         self.assertEqual(1, len([x for x in conversation.getComments()]))\n         # try to delete last comment with the same user that created it\n@@ -343,12 +343,12 @@ def make_request(form={}):\n         # Post an anonymous comment and provide a name\n         request = make_request(form={\n             \'form.widgets.name\': u\'john doe\',\n-            \'form.widgets.text\': u\'bar\'\n+            \'form.widgets.text\': u\'bar\',\n         })\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -391,7 +391,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\'\n+            name=u\'comment-form\',\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -438,7 +438,7 @@ def make_request(form={}):\n             Unauthorized,\n             commentForm.handleComment,\n             commentForm,\n-            \'foo\'\n+            \'foo\',\n         )\n \n \n@@ -454,7 +454,7 @@ def setUp(self):\n         self.folder = self.portal[\'test-folder\']\n         interface.alsoProvides(\n             self.request,\n-            interfaces.IDiscussionLayer\n+            interfaces.IDiscussionLayer,\n         )\n \n         self.workflowTool = getToolByName(self.portal, \'portal_workflow\')\n@@ -532,7 +532,7 @@ def test_comment_transform_message(self):\n             self.viewlet.comment_transform_message(),\n             \'You can add a comment by filling out the form below. \' +\n             \'Plain text formatting. Web and email addresses are transformed \' +\n-            \'into clickable links.\'\n+            \'into clickable links.\',\n         )\n \n         # Enable moderation workflow\n@@ -585,25 +585,25 @@ def test_get_replies_with_workflow_actions(self):\n         c1 = conversation.addComment(comment)\n         self.assertEqual(\n             len(tuple(self.viewlet.get_replies(workflow_actions=True))),\n-            1\n+            1,\n         )\n         # Enable moderation workflow\n         self.workflowTool.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow,\')\n+            (\'comment_review_workflow,\'),\n         )\n         # Check if workflow actions are available\n         reply = next(self.viewlet.get_replies(workflow_actions=True))\n         self.assertTrue(\'actions\' in reply)\n         self.assertEqual(\n             reply[\'actions\'][0][\'id\'],\n-            \'publish\'\n+            \'publish\',\n         )\n         expected_url = \'http://nohost/plone/doc1/++conversation++default/{0}\' \\\n                        \'/content_status_modify?workflow_action=publish\'\n         self.assertEqual(\n             reply[\'actions\'][0][\'url\'],\n-            expected_url.format(int(c1))\n+            expected_url.format(int(c1)),\n         )\n \n     def test_get_commenter_home_url(self):\n@@ -614,7 +614,7 @@ def test_get_commenter_home_url(self):\n         m = portal_membership.getAuthenticatedMember()\n         self.assertEqual(\n             self.viewlet.get_commenter_home_url(m.getUserName()),\n-            \'http://nohost/plone/author/test-user\'\n+            \'http://nohost/plone/author/test-user\',\n         )\n \n     def test_get_commenter_home_url_is_none(self):\n@@ -627,15 +627,15 @@ def test_get_commenter_portrait(self):\n         self.memberdata._setPortrait(Image(\n             id=\'jim\',\n             file=dummy.File(),\n-            title=\'\'\n+            title=\'\',\n         ), \'jim\')\n         self.assertEqual(\n             self.memberdata._getPortrait(\'jim\').getId(),\n-            \'jim\'\n+            \'jim\',\n         )\n         self.assertEqual(\n             self.memberdata._getPortrait(\'jim\').meta_type,\n-            \'Image\'\n+            \'Image\',\n         )\n \n         # Add a conversation with a comment\n@@ -653,7 +653,7 @@ def test_get_commenter_portrait(self):\n         # Check if the correct member image URL is returned\n         self.assertEqual(\n             portrait_url,\n-            \'http://nohost/plone/portal_memberdata/portraits/jim\'\n+            \'http://nohost/plone/portal_memberdata/portraits/jim\',\n         )\n \n     def test_get_commenter_portrait_is_none(self):\n@@ -662,8 +662,7 @@ def test_get_commenter_portrait_is_none(self):\n             self.viewlet.get_commenter_portrait() in (\n                 \'defaultUser.png\',\n                 \'defaultUser.gif\',\n-            )\n-\n+            ),\n         )\n \n     def test_get_commenter_portrait_without_userimage(self):\n@@ -689,8 +688,8 @@ def test_get_commenter_portrait_without_userimage(self):\n         self.assertTrue(\n             portrait_url in (\n                 \'http://nohost/plone/defaultUser.png\',\n-                \'http://nohost/plone/defaultUser.gif\'\n-            )\n+                \'http://nohost/plone/defaultUser.gif\',\n+            ),\n         )\n \n     def test_anonymous_discussion_allowed(self):\n@@ -723,7 +722,7 @@ def test_login_action(self):\n         self.viewlet.update()\n         self.assertEqual(\n             self.viewlet.login_action(),\n-            \'http://nohost/plone/login_form?came_from=http%3A//nohost\'\n+            \'http://nohost/plone/login_form?came_from=http%3A//nohost\',\n         )\n \n     def test_format_time(self):\n@@ -737,8 +736,8 @@ def test_format_time(self):\n         # time of the local time given above. That way, the time for the\n         # example below is correct within each time zone, independent of DST\n         python_time = datetime(\n-            *time.gmtime(time.mktime(python_time.timetuple()))[:7]\n-        )\n+            *time.gmtime(time.mktime(python_time.timetuple()))[:7])\n         localized_time = self.viewlet.format_time(python_time)\n         self.assertTrue(\n-            localized_time in [\'Feb 01, 2009 11:32 PM\', \'2009-02-01 23:32\'])\n+            localized_time in [\'Feb 01, 2009 11:32 PM\', \'2009-02-01 23:32\'],\n+        )\ndiff --git a/plone/app/discussion/tests/test_contentrules.py b/plone/app/discussion/tests/test_contentrules.py\nindex 23543e78..6b9610ef 100644\n--- a/plone/app/discussion/tests/test_contentrules.py\n+++ b/plone/app/discussion/tests/test_contentrules.py\n@@ -30,7 +30,7 @@ def setUp(self):\n         member = self.portal.portal_membership.getMemberById(TEST_USER_ID)\n         member.setMemberProperties({\n             \'fullname\': \'X Manager\',\n-            \'email\': \'xmanager@example.com\'\n+            \'email\': \'xmanager@example.com\',\n         })\n \n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n@@ -96,7 +96,7 @@ def setUp(self):\n         comment.text = \'This is a comment\'\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         re_comment = createObject(\'plone.Comment\')\n@@ -112,7 +112,7 @@ def testReplyIdStringSubstitution(self):\n         reply_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_id\'\n+            name=u\'comment_id\',\n         )\n         self.assertIsInstance(reply_id(), long)\n \n@@ -120,7 +120,7 @@ def testReplyTextStringSubstitution(self):\n         reply_text = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_text\'\n+            name=u\'comment_text\',\n         )\n         self.assertEqual(reply_text(), u\'This is a reply\')\n \n@@ -128,7 +128,7 @@ def testReplyUserIdStringSubstitution(self):\n         reply_user_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_id\'\n+            name=u\'comment_user_id\',\n         )\n         self.assertEqual(reply_user_id(), u\'julia\')\n \n@@ -136,7 +136,7 @@ def testReplyUserFullNameStringSubstitution(self):\n         reply_user_fullname = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_fullname\'\n+            name=u\'comment_user_fullname\',\n         )\n         self.assertEqual(reply_user_fullname(), u\'Juliana\')\n \n@@ -144,6 +144,6 @@ def testReplyUserEmailStringSubstitution(self):\n         reply_user_email = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_email\'\n+            name=u\'comment_user_email\',\n         )\n         self.assertEqual(reply_user_email(), u\'julia@example.com\')\ndiff --git a/plone/app/discussion/tests/test_controlpanel.py b/plone/app/discussion/tests/test_controlpanel.py\nindex eb44ebb5..4ad30189 100644\n--- a/plone/app/discussion/tests/test_controlpanel.py\n+++ b/plone/app/discussion/tests/test_controlpanel.py\n@@ -29,7 +29,7 @@ def test_registry_registered(self):\n     def test_discussion_controlpanel_view(self):\n         view = getMultiAdapter(\n             (self.portal, self.portal.REQUEST),\n-            name=\'discussion-controlpanel\'\n+            name=\'discussion-controlpanel\',\n         )\n         self.assertTrue(view())\n \n@@ -40,7 +40,7 @@ def test_discussion_in_controlpanel(self):\n             \'discussion\' in [\n                 a.getAction(self)[\'id\']\n                 for a in self.controlpanel.listActions()\n-            ]\n+            ],\n         )\n \n     def test_globally_enabled(self):\n@@ -51,7 +51,7 @@ def test_globally_enabled(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.globally_enabled\'\n             ],\n-            False\n+            False,\n         )\n \n     def test_anonymous_comments(self):\n@@ -62,7 +62,7 @@ def test_anonymous_comments(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.anonymous_comments\'\n             ],\n-            False\n+            False,\n         )\n \n     def test_moderation_enabled(self):\n@@ -73,7 +73,7 @@ def test_moderation_enabled(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.moderation_enabled\'\n             ],\n-            False\n+            False,\n         )\n \n     def test_edit_comment_enabled(self):\n@@ -82,7 +82,8 @@ def test_edit_comment_enabled(self):\n         self.assertEqual(\n             self.registry[\'plone.app.discussion.interfaces.\' +\n                           \'IDiscussionSettings.edit_comment_enabled\'],\n-            False)\n+            False,\n+        )\n \n     def test_delete_own_comment_enabled(self):\n         # Check delete_own_comment_enabled record\n@@ -90,7 +91,8 @@ def test_delete_own_comment_enabled(self):\n         self.assertEqual(\n             self.registry[\'plone.app.discussion.interfaces.\' +\n                           \'IDiscussionSettings.delete_own_comment_enabled\'],\n-            False)\n+            False,\n+        )\n \n     def test_text_transform(self):\n         self.assertTrue(\'text_transform\' in IDiscussionSettings)\n@@ -99,7 +101,7 @@ def test_text_transform(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.text_transform\'\n             ],\n-            \'text/plain\'\n+            \'text/plain\',\n         )\n \n     def test_captcha(self):\n@@ -110,7 +112,7 @@ def test_captcha(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.captcha\'\n             ],\n-            \'disabled\'\n+            \'disabled\',\n         )\n \n     def test_show_commenter_image(self):\n@@ -121,20 +123,20 @@ def test_show_commenter_image(self):\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.show_commenter_image\'\n             ],\n-            True\n+            True,\n         )\n \n     def test_moderator_notification_enabled(self):\n         # Check show_commenter_image record\n         self.assertTrue(\n-            \'moderator_notification_enabled\' in IDiscussionSettings\n+            \'moderator_notification_enabled\' in IDiscussionSettings,\n         )\n         self.assertEqual(\n             self.registry[\n                 \'plone.app.discussion.interfaces.\' +\n                 \'IDiscussionSettings.moderator_notification_enabled\'\n             ],\n-            False\n+            False,\n         )\n \n     # def test_user_notification_enabled(self):\n@@ -167,8 +169,8 @@ def test_moderation_enabled_in_discussion_control_panel_changed(self):\n         self.assertEqual(\n             (\'comment_one_state_workflow\',),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\'\n-            )\n+                \'Discussion Item\',\n+            ),\n         )\n \n         # Enable moderation in the discussion control panel\n@@ -179,16 +181,16 @@ def test_moderation_enabled_in_discussion_control_panel_changed(self):\n         self.assertEqual(\n             (\'comment_review_workflow\',),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\'\n-            )\n+                \'Discussion Item\',\n+            ),\n         )\n         # And back\n         self.settings.moderation_enabled = False\n         self.assertEqual(\n             (\'comment_one_state_workflow\',),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\'\n-            )\n+                \'Discussion Item\',\n+            ),\n         )\n \n     def test_change_workflow_in_types_control_panel(self):\n@@ -202,7 +204,7 @@ def test_change_workflow_in_types_control_panel(self):\n         # Enable the \'comment_review_workflow\' with moderation enabled\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow\',)\n+            (\'comment_review_workflow\',),\n         )\n \n         # Make sure the moderation_enabled settings has changed\n@@ -211,14 +213,14 @@ def test_change_workflow_in_types_control_panel(self):\n         # Enable the \'comment_review_workflow\' with moderation enabled\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_one_state_workflow\',)\n+            (\'comment_one_state_workflow\',),\n         )\n         self.settings.moderation_enabled = True\n \n         # Enable a \'custom\' discussion workflow\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'intranet_workflow\',)\n+            (\'intranet_workflow\',),\n         )\n \n         # Setting has not changed. A Custom workflow disables the\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 4b4e30b8..6f948949 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -19,10 +19,8 @@\n from zope.component import createObject\n from zope.component import queryUtility\n \n-import unittest\n-\n-\n import six\n+import unittest\n \n \n try:\n@@ -74,7 +72,7 @@ def test_add_comment(self):\n         self.assertTrue(IComment.providedBy(conversation[new_id]))\n         self.assertEqual(\n             aq_base(conversation[new_id].__parent__),\n-            aq_base(conversation)\n+            aq_base(conversation),\n         )\n         self.assertEqual(new_id, comment.comment_id)\n         self.assertEqual(len(list(conversation.getComments())), 1)\n@@ -82,7 +80,7 @@ def test_add_comment(self):\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n             conversation.last_comment_date - datetime.utcnow() <\n-            timedelta(seconds=1)\n+            timedelta(seconds=1),\n         )\n \n     def test_private_comment(self):\n@@ -280,7 +278,7 @@ def test_disable_commenting_for_content_type(self):\n \n         # Create a conversation.\n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\'\n+            \'@@conversation_view\',\n         )\n \n         # The Document content type is disabled by default\n@@ -328,7 +326,7 @@ def test_is_discussion_allowed_on_content_object(self):\n \n         # Create a conversation.\n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\'\n+            \'@@conversation_view\',\n         )\n \n         # Discussion is disallowed by default\n@@ -398,7 +396,7 @@ def test_dict_operations(self):\n         self.assertTrue((new_id1, comment1) in six.iteritems(conversation))\n         self.assertTrue((new_id2, comment2) in six.iteritems(conversation))\n \n-        # TODO test acquisition wrapping\n+        # TODO test acquisition wrapping  # noqa T000\n         # self.assertTrue(aq_base(aq_parent(comment1)) is conversation)\n \n     def test_total_comments(self):\n@@ -514,11 +512,11 @@ def test_last_comment_date(self):\n         # check if the latest comment is exactly one day old\n         self.assertTrue(\n             conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(hours=23, minutes=59, seconds=59)\n+            timedelta(hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date >\n-            datetime.utcnow() - timedelta(days=1, seconds=1)\n+            datetime.utcnow() - timedelta(days=1, seconds=1),\n         )\n \n         # remove the latest comment\n@@ -528,11 +526,11 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly two days old\n         self.assertTrue(\n             conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(days=1, hours=23, minutes=59, seconds=59)\n+            timedelta(days=1, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date > datetime.utcnow() -\n-            timedelta(days=2, seconds=1)\n+            timedelta(days=2, seconds=1),\n         )\n \n         # remove the latest comment again\n@@ -542,11 +540,11 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly four days old\n         self.assertTrue(\n             conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(days=3, hours=23, minutes=59, seconds=59)\n+            timedelta(days=3, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date > datetime.utcnow() -\n-            timedelta(days=4, seconds=2)\n+            timedelta(days=4, seconds=2),\n         )\n \n     def test_get_comments_full(self):\n@@ -620,7 +618,7 @@ def test_get_threads(self):\n         ], list(conversation.getThreads()))\n \n     def test_get_threads_batched(self):\n-        # TODO: test start, size, root and depth arguments to getThreads()\n+        # TODO: test start, size, root and depth arguments to getThreads()  # noqa T000\n         #   - may want to split this into multiple tests\n         pass\n \n@@ -628,17 +626,17 @@ def test_traversal(self):\n         # make sure we can traverse to conversations and get a URL and path\n \n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default\'\n+            \'++conversation++default\',\n         )\n         self.assertTrue(IConversation.providedBy(conversation))\n \n         self.assertEqual(\n             (\'\', \'plone\', \'doc1\', \'++conversation++default\'),\n-            conversation.getPhysicalPath()\n+            conversation.getPhysicalPath(),\n         )\n         self.assertEqual(\n             \'http://nohost/plone/doc1/++conversation++default\',\n-            conversation.absolute_url()\n+            conversation.absolute_url(),\n         )\n \n     def test_unconvertible_id(self):\n@@ -646,7 +644,7 @@ def test_unconvertible_id(self):\n         # can\'t be converted to long\n \n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/ThisCantBeRight\'\n+            \'++conversation++default/ThisCantBeRight\',\n         )\n         self.assertEqual(conversation, None)\n \n@@ -670,7 +668,7 @@ def test_no_comment(self):\n         # Make sure no conversation has been created\n         self.assertTrue(\n             \'plone.app.discussion:conversation\' not in\n-            IAnnotations(self.portal.doc1)\n+            IAnnotations(self.portal.doc1),\n         )\n \n \n@@ -683,13 +681,13 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         interface.alsoProvides(\n             self.portal.REQUEST,\n-            interfaces.IDiscussionLayer\n+            interfaces.IDiscussionLayer,\n         )\n \n         if DEXTERITY:\n             interface.alsoProvides(\n                 self.portal.doc1,\n-                IDexterityContent\n+                IDexterityContent,\n             )\n \n     def _makeOne(self, *args, **kw):\n@@ -849,18 +847,18 @@ def test_dict_api(self):\n         # Create the nested comment structure\n         new_id_1 = replies.addComment(comment1)\n         comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1)\n+            \'++conversation++default/{0}\'.format(new_id_1),\n         )\n         replies_to_comment1 = IReplies(comment1)\n         new_id_2 = replies.addComment(comment2)\n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2)\n+            \'++conversation++default/{0}\'.format(new_id_2),\n         )\n         replies_to_comment2 = IReplies(comment2)\n \n         new_id_1_1 = replies_to_comment1.addComment(comment1_1)\n         comment1_1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1_1)\n+            \'++conversation++default/{0}\'.format(new_id_1_1),\n         )\n         replies_to_comment1_1 = IReplies(comment1_1)\n         replies_to_comment1_1.addComment(comment1_1_1)\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex 7ca79766..860e6de4 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -152,7 +152,7 @@ def test_addEvent(self):\n         comment.text = \'Comment text\'\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         re_comment = createObject(\'plone.Comment\')\n@@ -173,7 +173,7 @@ def test_removedEvent(self):\n         comment.text = \'Comment text\'\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id)\n+            \'++conversation++default/{0}\'.format(new_id),\n         )\n \n         re_comment = createObject(\'plone.Comment\')\ndiff --git a/plone/app/discussion/tests/test_functional.py b/plone/app/discussion/tests/test_functional.py\nindex c1603e95..223a36f7 100644\n--- a/plone/app/discussion/tests/test_functional.py\n+++ b/plone/app/discussion/tests/test_functional.py\n@@ -25,11 +25,16 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     globs={\'pprint\': pprint.pprint,\n-                                            }\n-                                     ),\n-                layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+        layered(\n+            doctest.DocFileSuite(\n+                test,\n+                optionflags=optionflags,\n+                globs={\n+                    \'pprint\': pprint.pprint,\n+                },\n+            ),\n+            layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING,\n+        )\n+        for test in normal_testfiles\n+    ])\n     return suite\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 118a1fe6..02c58d53 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -70,7 +70,7 @@ def setUp(self):\n     def test_conversation_total_comments(self):\n         self.assertTrue(isinstance(\n             catalog.total_comments,\n-            DelegatingIndexerFactory\n+            DelegatingIndexerFactory,\n         ))\n         self.assertEqual(catalog.total_comments(self.portal.doc1)(), 3)\n         del self.conversation[self.new_id1]\n@@ -82,16 +82,16 @@ def test_conversation_total_comments(self):\n     def test_conversation_last_comment_date(self):\n         self.assertTrue(isinstance(\n             catalog.last_comment_date,\n-            DelegatingIndexerFactory\n+            DelegatingIndexerFactory,\n         ))\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n-            datetime(2009, 4, 12, 11, 12, 12)\n+            datetime(2009, 4, 12, 11, 12, 12),\n         )\n         del self.conversation[self.new_id3]\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n-            datetime(2007, 12, 13, 4, 18, 12)\n+            datetime(2007, 12, 13, 4, 18, 12),\n         )\n         del self.conversation[self.new_id2]\n         del self.conversation[self.new_id1]\n@@ -138,7 +138,7 @@ def test_title(self):\n     def test_description(self):\n         self.assertEqual(\n             catalog.description(self.comment)(),\n-            \'Lorem ipsum dolor sit amet.\'\n+            \'Lorem ipsum dolor sit amet.\',\n         )\n         self.assertTrue(\n             isinstance(catalog.description, DelegatingIndexerFactory))\n@@ -153,33 +153,33 @@ def test_description_long(self):\n         self.conversation.addComment(comment_long)\n         self.assertEqual(\n             catalog.description(comment_long)(),\n-            LONG_TEXT_CUT.replace(\'\\n\', \' \')\n+            LONG_TEXT_CUT.replace(\'\\n\', \' \'),\n         )\n \n     def test_dates(self):\n         # Test if created, modified, effective etc. are set correctly\n         self.assertEqual(\n             catalog.created(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\')\n+            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\'),\n         )\n         self.assertEqual(\n             catalog.effective(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\')\n+            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\'),\n         )\n         self.assertEqual(\n             catalog.modified(self.comment)(),\n-            DateTime(2008, 3, 12, 7, 32, 52, \'GMT\')\n+            DateTime(2008, 3, 12, 7, 32, 52, \'GMT\'),\n         )\n \n     def test_searchable_text(self):\n         # Test if searchable text is a concatenation of title and comment text\n         self.assertEqual(\n             catalog.searchable_text(self.comment)(),\n-            (\'Lorem ipsum dolor sit amet.\')\n+            (\'Lorem ipsum dolor sit amet.\'),\n         )\n         self.assertTrue(isinstance(\n             catalog.searchable_text,\n-            DelegatingIndexerFactory\n+            DelegatingIndexerFactory,\n         ))\n \n     def test_creator(self):\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex f0ac2f96..7e660c10 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -69,7 +69,9 @@ def setUp(self):\n                                 None)\n         self.context = self.portal\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',), \'comment_review_workflow\')\n+            (\'Discussion Item\',),\n+            \'comment_review_workflow\',\n+        )\n         self.wf_tool = self.portal.portal_workflow\n         # Add a conversation with three comments\n         conversation = IConversation(self.portal.doc1)\n@@ -79,7 +81,7 @@ def setUp(self):\n         comment1.Creator = \'Jim\'\n         new_id_1 = conversation.addComment(comment1)\n         self.comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1)\n+            \'++conversation++default/{0}\'.format(new_id_1),\n         )\n         comment2 = createObject(\'plone.Comment\')\n         comment2.title = \'Comment 2\'\n@@ -87,7 +89,7 @@ def setUp(self):\n         comment2.Creator = \'Joe\'\n         new_id_2 = conversation.addComment(comment2)\n         self.comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2)\n+            \'++conversation++default/{0}\'.format(new_id_2),\n         )\n         comment3 = createObject(\'plone.Comment\')\n         comment3.title = \'Comment 3\'\n@@ -95,7 +97,7 @@ def setUp(self):\n         comment3.Creator = \'Emma\'\n         new_id_3 = conversation.addComment(comment3)\n         self.comment3 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_3)\n+            \'++conversation++default/{0}\'.format(new_id_3),\n         )\n         self.conversation = conversation\n \n@@ -114,8 +116,7 @@ def test_retract(self):\n \n         view = BulkActionsView(self.portal, self.request)\n \n-        self.assertRaises(NotImplementedError,\n-                          view)\n+        self.assertRaises(NotImplementedError, view)\n \n     def test_publish(self):\n         self.request.set(\'form.select.BulkAction\', \'publish\')\n@@ -176,12 +177,13 @@ def setUp(self):\n         settings.globally_enabled = True\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow\',))\n+            (\'comment_review_workflow\',),\n+        )\n         # Create page plus comment.\n         self.portal.invokeFactory(\n             id=\'page\',\n             title=\'Page 1\',\n-            type_name=\'Document\'\n+            type_name=\'Document\',\n         )\n         self.page = self.portal.page\n         self.conversation = IConversation(self.page)\ndiff --git a/plone/app/discussion/tests/test_notifications.py b/plone/app/discussion/tests/test_notifications.py\nindex 2fcaceaa..0320f1ad 100644\n--- a/plone/app/discussion/tests/test_notifications.py\n+++ b/plone/app/discussion/tests/test_notifications.py\n@@ -176,7 +176,7 @@ def setUp(self):\n         self.portal.portal_types[\'Document\'].allow_discussion = True\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow\',)\n+            (\'comment_review_workflow\',),\n         )\n         # Enable moderator notification setting\n         registry = queryUtility(IRegistry)\n@@ -219,23 +219,23 @@ def test_notify_moderator(self):\n             in msg)\n         self.assertIn(\n             \'http://nohost/plone/d=\\noc1/view#{0}\'.format(comment_id),\n-            msg\n+            msg,\n         )\n         self.assertIn(\n             \'Comment text\',\n-            msg\n+            msg,\n         )\n         text = \'Approve comment:\\nhttp://nohost/plone/doc1/\' \\\n                \'++conversation++default/{0}/@@moderat=\\ne-publish-comment\'\n         self.assertIn(\n             text.format(comment_id),\n-            msg\n+            msg,\n         )\n         text = \'Delete comment:\\nhttp://nohost/plone/doc1/\' \\\n                \'++conversation++default/{0}/@@moderat=\\ne-delete-comment\'\n         self.assertIn(\n             text.format(comment_id),\n-            msg\n+            msg,\n         )\n \n     def test_notify_moderator_specific_address(self):\ndiff --git a/plone/app/discussion/tests/test_robot.py b/plone/app/discussion/tests/test_robot.py\nindex 7163326b..202b43b7 100644\n--- a/plone/app/discussion/tests/test_robot.py\n+++ b/plone/app/discussion/tests/test_robot.py\n@@ -23,7 +23,7 @@ def test_suite():\n         suite.addTests([\n             layered(\n                 robottestsuite,\n-                layer=PLONE_APP_DISCUSSION_ROBOT_TESTING\n+                layer=PLONE_APP_DISCUSSION_ROBOT_TESTING,\n             ),\n         ])\n     return suite\ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex cd711df4..aafe2222 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -47,8 +47,8 @@ def test_default_workflow(self):\n         self.assertEqual(\n             (\'comment_one_state_workflow\',),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\'\n-            )\n+                \'Discussion Item\',\n+            ),\n         )\n \n     def test_review_comments_permission(self):\n@@ -61,9 +61,9 @@ def test_review_comments_permission(self):\n         self.assertFalse(\n             self.portal.portal_membership.checkPermission(\n                 \'Review comments\',\n-                self.folder\n+                self.folder,\n             ),\n-            self.folder\n+            self.folder,\n         )\n \n     def test_reply_to_item_permission(self):\n@@ -125,7 +125,7 @@ def setUp(self):\n         cid = conversation.addComment(comment)\n \n         self.comment = self.folder.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(cid)\n+            \'++conversation++default/{0}\'.format(cid),\n         )\n \n         self.portal.acl_users._doAddUser(\'member\', \'secret\', [\'Member\'], [])\n@@ -138,8 +138,10 @@ def setUp(self):\n     def test_initial_workflow_state(self):\n         """Make sure the initial workflow state of a comment is \'private\'.\n         """\n-        self.assertEqual(self.workflow.getInfoFor(self.doc, \'review_state\'),\n-                         \'private\')\n+        self.assertEqual(\n+            self.workflow.getInfoFor(self.doc, \'review_state\'),\n+            \'private\',\n+        )\n \n     def test_view_comments(self):\n         """Make sure published comments can be viewed by everyone.\n@@ -184,7 +186,8 @@ def test_migration(self):\n         # The workflow chain is still what we want.\n         self.assertEqual(\n             self.portal.portal_workflow.getChainFor(\'Discussion Item\'),\n-            (\'comment_one_state_workflow\',))\n+            (\'comment_one_state_workflow\',),\n+        )\n         # A Manager can still see the comment.\n         self.assertTrue(checkPerm(View, self.comment))\n         # Anonymous cannot see the comment.\n@@ -209,7 +212,8 @@ def setUp(self):\n         # Set workflow for Discussion item to review workflow\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            (\'comment_review_workflow\',))\n+            (\'comment_review_workflow\',),\n+        )\n \n         # Create a conversation for this Document\n         conversation = IConversation(self.portal.doc1)\n@@ -219,7 +223,7 @@ def setUp(self):\n         comment.text = \'Comment text\'\n         comment_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(comment_id)\n+            \'++conversation++default/{0}\'.format(comment_id),\n         )\n \n         self.conversation = conversation\n@@ -239,9 +243,11 @@ def test_delete_as_anonymous(self):\n         # Make sure that anonymous users can not delete comments\n         logout()\n         self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        self.assertRaises(Unauthorized,\n-                          self.comment.restrictedTraverse,\n-                          \'@@moderate-delete-comment\')\n+        self.assertRaises(\n+            Unauthorized,\n+            self.comment.restrictedTraverse,\n+            \'@@moderate-delete-comment\',\n+        )\n         self.assertTrue(self.comment_id in self.conversation.objectIds())\n \n     def test_delete_as_user(self):\n@@ -249,9 +255,11 @@ def test_delete_as_user(self):\n         logout()\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n         self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        self.assertRaises(Unauthorized,\n-                          self.comment.restrictedTraverse,\n-                          \'@@moderate-delete-comment\')\n+        self.assertRaises(\n+            Unauthorized,\n+            self.comment.restrictedTraverse,\n+            \'@@moderate-delete-comment\',\n+        )\n         self.assertTrue(self.comment_id in self.conversation.objectIds())\n \n     def test_publish(self):\n@@ -261,8 +269,8 @@ def test_publish(self):\n             \'pending\',\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\'\n-            )\n+                \'review_state\',\n+            ),\n         )\n         view = self.comment.restrictedTraverse(\'@@moderate-publish-comment\')\n         view()\n@@ -270,8 +278,8 @@ def test_publish(self):\n             \'published\',\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\'\n-            )\n+                \'review_state\',\n+            ),\n         )\n \n     def test_publish_as_anonymous(self):\n@@ -281,20 +289,20 @@ def test_publish_as_anonymous(self):\n         self.assertEqual(\n             \'pending\', self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\'\n-            )\n+                \'review_state\',\n+            ),\n         )\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@moderate-publish-comment\'\n+            \'@@moderate-publish-comment\',\n         )\n         self.assertEqual(\n             \'pending\',\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\'\n-            )\n+                \'review_state\',\n+            ),\n         )\n \n     def test_publish_comment_on_private_content_not_visible_to_world(self):\n'

