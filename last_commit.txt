Repository: plone.app.contentlisting


Branch: refs/heads/1.3.x
Date: 2019-12-11T14:48:52+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.contentlisting/commit/e87b9dd81482caa83055c67228acf943d9ea3dd9

backport to Plone 4.3

Files changed:
A plone/app/contentlisting/tests/integration-p4.rst
M plone/app/contentlisting/__init__.py
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py

b'diff --git a/plone/app/contentlisting/__init__.py b/plone/app/contentlisting/__init__.py\nindex 40a96af..20d6766 100644\n--- a/plone/app/contentlisting/__init__.py\n+++ b/plone/app/contentlisting/__init__.py\n@@ -1 +1,5 @@\n # -*- coding: utf-8 -*-\n+from Products.CMFPlone.utils import getFSVersionTuple\n+\n+IS_PLONE5 = getFSVersionTuple()[0] >= 5\n+\ndiff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py\nindex 77341bd..aeb6fb1 100644\n--- a/plone/app/contentlisting/catalog.py\n+++ b/plone/app/contentlisting/catalog.py\n@@ -106,7 +106,7 @@ def Description(self):\n \n     def CroppedDescription(self):\n         registry = queryUtility(IRegistry)\n-        length = registry.get(\'plone.search_results_description_length\')\n+        length = registry.get(\'plone.search_results_description_length\', 160)\n         plone_view = getMultiAdapter((self, self.request), name=\'plone\')\n         return plone_view.cropText(self.Description(), length)\n \ndiff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py\nindex 597f3c8..266d7a9 100644\n--- a/plone/app/contentlisting/contentlisting.py\n+++ b/plone/app/contentlisting/contentlisting.py\n@@ -1,13 +1,13 @@\n # -*- coding: utf-8 -*-\n \n from Acquisition import aq_base\n+from plone.app.contentlisting import IS_PLONE5\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INavigationSchema\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -16,6 +16,10 @@\n import os\n \n \n+if IS_PLONE5:\n+    from Products.CMFPlone.interfaces import INavigationSchema\n+\n+\n @implementer(IContentListing)\n class ContentListing(object):\n     """An IContentListing implementation based on sequences of objects."""\n@@ -122,34 +126,66 @@ def ReviewStateClass(self):\n             self.review_state(),\n         )\n \n-    def appendViewAction(self):\n-        # Decide whether to produce a string /view to append to links in\n-        # results listings.\n-        registry = getUtility(IRegistry)\n-        types = registry.get(\'plone.types_use_view_action_in_listings\', [])\n-        if self.portal_type in types:\n-            return \'/view\'\n-        return \'\'\n-\n-    def isVisibleInNav(self):\n-        # True, if this item should be visible in navigation trees.\n-        exclude_from_nav_attr = getattr(self, \'exclude_from_nav\', None)\n-        if exclude_from_nav_attr is not None and (\n-                self.exclude_from_nav()\n-                if callable(self.exclude_from_nav)\n-                else self.exclude_from_nav\n-        ):\n-            return False\n-\n-        registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix=\'plone\',\n-        )\n-        if self.portal_type not in navigation_settings.displayed_types:\n-            return False\n \n-        return True\n+\n+    if IS_PLONE5:\n+        def appendViewAction(self):\n+            # Decide whether to produce a string /view to append to links in\n+            # results listings.\n+            registry = getUtility(IRegistry)\n+            types = registry.get(\'plone.types_use_view_action_in_listings\', [])\n+            if self.portal_type in types:\n+                return \'/view\'\n+            return \'\'\n+\n+        def isVisibleInNav(self):\n+            # True, if this item should be visible in navigation trees.\n+            exclude_from_nav_attr = getattr(self, \'exclude_from_nav\', None)\n+            if exclude_from_nav_attr is not None and (\n+                    self.exclude_from_nav()\n+                    if callable(self.exclude_from_nav)\n+                    else self.exclude_from_nav\n+            ):\n+                return False\n+            registry = getUtility(IRegistry)\n+            navigation_settings = registry.forInterface(\n+                INavigationSchema,\n+                prefix=\'plone\',\n+            )\n+            if self.portal_type not in navigation_settings.displayed_types:\n+                return False\n+            return True\n+\n+    else:\n+\n+        def appendViewAction(self):\n+            # Decide whether to produce a string /view to append to links in\n+            # results listings.\n+            try:\n+                ttool = getToolByName(self.getDataOrigin(), \'portal_properties\')\n+                types = ttool.site_properties.typesUseViewActionInListings\n+            except AttributeError:\n+                return \'\'\n+            if self.portal_type in types:\n+                return "/view"\n+            return \'\'\n+\n+        def isVisibleInNav(self):\n+            # True, if this item should be visible in navigation trees.\n+            exclude_from_nav_attr = getattr(self, \'exclude_from_nav\', None)\n+            if exclude_from_nav_attr is not None and (\n+                    self.exclude_from_nav()\n+                    if callable(self.exclude_from_nav)\n+                    else self.exclude_from_nav\n+            ):\n+                return False\n+            portal_properties = getToolByName(self.getDataOrigin(), \'portal_properties\')\n+            navtree_properties = getattr(portal_properties, \'navtree_properties\')\n+            if self.portal_type in list(navtree_properties.metaTypesNotToList):\n+                return False\n+            if self.id in list(navtree_properties.idsNotToList):\n+                return False\n+            return True\n \n     def MimeTypeIcon(self):\n         mimeicon = None\ndiff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py\nindex 1dcce31..0880eaf 100644\n--- a/plone/app/contentlisting/tests/base.py\n+++ b/plone/app/contentlisting/tests/base.py\n@@ -37,8 +37,10 @@ def setUpPloneSite(self, portal):\n         wftool.doActionFor(portal.news, \'publish\')\n         portal.news.invokeFactory(\'News Item\', \'news1\')\n         setRoles(portal, TEST_USER_ID, [\'Member\'])\n-        from Products.CMFCore.indexing import processQueue\n-        processQueue()\n+        from plone.app.contentlisting import IS_PLONE5\n+        if IS_PLONE5:\n+            from Products.CMFCore.indexing import processQueue\n+            processQueue()\n \n \n CONTENTLISTING_INTEGRATION_FIXTURE = ContentListingIntegrationLayer()\ndiff --git a/plone/app/contentlisting/tests/integration-p4.rst b/plone/app/contentlisting/tests/integration-p4.rst\nnew file mode 100644\nindex 0000000..d1ea38b\n--- /dev/null\n+++ b/plone/app/contentlisting/tests/integration-p4.rst\n@@ -0,0 +1,249 @@\n+Basic usage\n+===========\n+\n+The idea behind plone.app.contentlisting is to have a unified way of listing\n+Plone content whenever needed, whether in contentlistings, collections,\n+portlets or search results.\n+\n+It should be simple to use for new developers and integrators. The core concept\n+is to take a list of something (in this case a catalog result set) and turn it\n+into an IContentListing so that the user always knows what to expect.\n+\n+    >>> from zope import interface\n+    >>> from plone.app.contentlisting.interfaces import IContentListing, IContentListingObject\n+    >>> from Products.CMFCore.utils import getToolByName\n+\n+We simply adapt a sequence of something content-like. In this case (and most\n+common cases) the sequence will be a catalog search result set.\n+\n+    >>> portal = layer[\'portal\']\n+    >>> catalog = getToolByName(portal, \'portal_catalog\')\n+    >>> results = catalog.searchResults(dict(is_default_page=False))\n+    >>> contentlist = IContentListing(results)\n+    >>> print(contentlist)\n+    <plone.app.contentlisting.contentlisting.ContentListing object ...>\n+\n+We get a ContentListing. That is the catalog based implementation of\n+IContentListing. In other cases you might get a different implementations,\n+but they should all conform to the rules of the interface.\n+\n+The contentListing is a normal iterator that we can loop over. Each entry is\n+a CatalogContentListingObject\n+\n+    >>> listitem = contentlist[2]\n+    >>> print(listitem)\n+    <plone.app.contentlisting.catalog.CatalogContentListingObject instance ...>\n+\n+The listitem provides all the methods of the IContentListingObject interface\n+\n+    >>> print(listitem.review_state())\n+    published\n+\n+It can report what its source of data is\n+\n+    >>> print(listitem.getDataOrigin())\n+    <Products.ZCatalog.Catalog.mybrains object at...>\n+\n+and if we access attributes on it that are not in the interface or in the\n+brain, it will transparently fetch the real object and cache it to get\n+properties from that instead.\n+\n+After accessing an attribute of the object that was neither in the\n+IContentListingObject or on the catalog brain, we can now see that the\n+real object has been silently fetched in the background. getDataOrigin now\n+returns the object.\n+\n+    >>> dummy= listitem.absolute_url()\n+    >>> print(listitem.getDataOrigin())\n+    <Folder at news>\n+\n+This item\'s origin is no longer a Brain, but the real object\n+\n+    >>> listitem.review_state()\n+    \'published\'\n+\n+For user and integrator convenience we also include a couple of handy\n+browser views to get to these listings.\n+\n+    >>> contentlisting = portal.restrictedTraverse(\'@@contentlisting\')()\n+    >>> print(contentlisting)\n+    <plone.app.contentlisting.contentlisting.ContentListing object ...\n+\n+    >>> len(contentlisting)\n+    3\n+\n+We can even slice the new contentlisting\n+\n+    >>> len (contentlisting[2:4])\n+    1\n+\n+    >>> len(portal.restrictedTraverse(\'news/@@contentlisting\')())\n+    1\n+\n+And we can use batching in it:\n+\n+    >>> [i.getURL() for i in portal.restrictedTraverse(\'@@contentlisting\')()]\n+    [\'http://nohost/plone/test-folder\', \'http://nohost/plone/front-page\', \'http://nohost/plone/news\']\n+    >>> [i.getURL() for i in portal.restrictedTraverse(\'@@contentlisting\')(batch=True, b_size=1)]\n+    [\'http://nohost/plone/test-folder\']\n+    >>> [i.getURL() for i in portal.restrictedTraverse(\'@@contentlisting\')(batch=True, b_start=1, b_size=1)]\n+    [\'http://nohost/plone/front-page\']\n+    >>> [i.getURL() for i in portal.restrictedTraverse(\'@@contentlisting\')(batch=True, b_start=2, b_size=1)]\n+    [\'http://nohost/plone/news\']\n+    >>> [i.getURL() for i in portal.restrictedTraverse(\'@@contentlisting\')(batch=True, b_start=1, b_size=2)]\n+    [\'http://nohost/plone/front-page\', \'http://nohost/plone/news\']\n+\n+We can use filtering by catalog indexes:\n+    >>> len(portal.restrictedTraverse(\'@@contentlisting\')(portal_type=\'Document\'))\n+    1\n+\n+\n+Append View Action\n+==================\n+\n+Some types may require \'/view\' appended to their URLs. Currently these don\'t\n+\n+    >>> frontpage = portal.restrictedTraverse(\'@@contentlisting\')(id=\'front-page\')[0]\n+    >>> frontpage.appendViewAction()\n+    \'\'\n+    >>> news = portal.restrictedTraverse(\'@@contentlisting\')(id=\'news\')[0]\n+    >>> news.appendViewAction()\n+    \'\'\n+    >>> realfrontpage = IContentListingObject(portal[\'front-page\'])\n+    >>> realfrontpage.appendViewAction()\n+    \'\'\n+\n+By altering portal_properties, we can make this true for Documents\n+\n+    >>> ptool = portal.portal_properties\n+    >>> sprop = ptool.site_properties\n+    >>> sprop.typesUseViewActionInListings =  [frontpage.portal_type]\n+\n+    >>> frontpage.appendViewAction()\n+    \'/view\'\n+    >>> news.appendViewAction()\n+    \'\'\n+    >>> realfrontpage.appendViewAction()\n+    \'/view\'\n+\n+And turn it off again\n+\n+    >>> sprop.typesUseViewActionInListings =  []\n+    >>> frontpage.appendViewAction()\n+    \'\'\n+    >>> news.appendViewAction()\n+    \'\'\n+    >>> realfrontpage.appendViewAction()\n+    \'\'\n+\n+\n+Visibility in Navigation\n+========================\n+\n+Items by default are visible in navigation\n+\n+    >>> frontpage = portal.restrictedTraverse(\'@@contentlisting\')(id=\'front-page\')[0]\n+    >>> frontpage.isVisibleInNav()\n+    True\n+\n+    >>> news = portal.restrictedTraverse(\'@@contentlisting\')(id=\'news\')[0]\n+    >>> news.isVisibleInNav()\n+    True\n+\n+Just to check, these will be catalog objects using a brain internally\n+\n+    >>> frontpage.__class__\n+    <class \'plone.app.contentlisting.catalog.CatalogContentListingObject\'>\n+    >>> print(frontpage.getDataOrigin())\n+    <Products.ZCatalog.Catalog.mybrains object at...>\n+    >>> frontpage.isVisibleInNav()\n+    True\n+\n+A catalog object with a real object works\n+\n+    >>> dummy= listitem.absolute_url()\n+    >>> print(listitem.getDataOrigin())\n+    <Folder at news>\n+    >>> frontpage.isVisibleInNav()\n+    True\n+\n+Getting a realobject-based listing also works\n+\n+    >>> realfrontpage = IContentListingObject(portal[\'front-page\'])\n+    >>> realfrontpage.__class__\n+    <class \'plone.app.contentlisting.realobject.RealContentListingObject\'>\n+    >>> realfrontpage.isVisibleInNav()\n+    True\n+\n+There are several ways something can be hidden from navigation, the most direct\n+way is the exclude_from_nav property being true\n+\n+    >>> frontpage_object = frontpage.getObject()\n+    >>> frontpage_object.exclude_from_nav = True\n+    >>> frontpage_object.reindexObject()\n+\n+This will be indexed, so an object isn\'t necessary to check this\n+\n+    >>> frontpage = portal.restrictedTraverse(\'@@contentlisting\')(id=\'front-page\')[0]\n+    >>> frontpage.isVisibleInNav()\n+    False\n+    >>> print(frontpage.getDataOrigin())\n+    <Products.ZCatalog.Catalog.mybrains object at...>\n+\n+But a real object still works.\n+\n+    >>> realfrontpage = IContentListingObject(portal[\'front-page\'])\n+    >>> realfrontpage.__class__\n+    <class \'plone.app.contentlisting.realobject.RealContentListingObject\'>\n+    >>> realfrontpage.isVisibleInNav()\n+    False\n+\n+We can also turn it off again.\n+\n+    >>> frontpage_object.exclude_from_nav = False\n+    >>> frontpage_object.reindexObject()\n+\n+    >>> frontpage = portal.restrictedTraverse(\'@@contentlisting\')(id=\'front-page\')[0]\n+    >>> frontpage.isVisibleInNav()\n+    True\n+\n+    >>> realfrontpage = IContentListingObject(portal[\'front-page\'])\n+    >>> realfrontpage.isVisibleInNav()\n+    True\n+\n+We can also exclude anything of a particular type using metaTypesNotToList\n+\n+    >>> navtree_properties = portal.portal_properties.navtree_properties\n+    >>> navtree_properties.metaTypesNotToList = [frontpage.portal_type]\n+\n+    >>> frontpage.isVisibleInNav()\n+    False\n+    >>> realfrontpage.isVisibleInNav()\n+    False\n+    >>> news.isVisibleInNav()\n+    True\n+    >>> navtree_properties.metaTypesNotToList = []\n+    >>> frontpage.isVisibleInNav()\n+    True\n+    >>> realfrontpage.isVisibleInNav()\n+    True\n+    >>> news.isVisibleInNav()\n+    True\n+\n+\n+Finally, particular ids can be excluded from listings\n+\n+    >>> navtree_properties.idsNotToList = [news.id]\n+    >>> frontpage.isVisibleInNav()\n+    True\n+    >>> realfrontpage.isVisibleInNav()\n+    True\n+    >>> news.isVisibleInNav()\n+    False\n+    >>> navtree_properties.idsNotToList = []\n+    >>> frontpage.isVisibleInNav()\n+    True\n+    >>> realfrontpage.isVisibleInNav()\n+    True\n+    >>> news.isVisibleInNav()\n+    True\ndiff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py\nindex 838db03..6f3fcc3 100644\n--- a/plone/app/contentlisting/tests/test_integration_doctest.py\n+++ b/plone/app/contentlisting/tests/test_integration_doctest.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n \n+from plone.app.contentlisting import IS_PLONE5\n from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # NOQA: E501\n from plone.testing import layered\n \n@@ -12,7 +13,7 @@ def test_suite():\n         [\n             layered(\n                 doctest.DocFileSuite(\n-                    \'tests/integration.rst\',\n+                    \'tests/integration.rst\' if IS_PLONE5 else \'tests/integration-p4.rst\',\n                     package=\'plone.app.contentlisting\',\n                     optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,  # NOQA: E501\n                 ),\ndiff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py\nindex 27aed2f..9747146 100644\n--- a/plone/app/contentlisting/tests/test_integration_unit.py\n+++ b/plone/app/contentlisting/tests/test_integration_unit.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.app.contentlisting import IS_PLONE5\n from plone.app.contentlisting.interfaces import IContentListing\n from plone.app.contentlisting.interfaces import IContentListingObject\n from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # NOQA: E501\n@@ -326,10 +327,11 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\'Collection\', \'collection\', title=u\'Col\')\n         collection = self.portal.collection\n+        operator = \'plone.app.querystring.operation.selection.\' + (\'any\' if IS_PLONE5 else \'is\')\n         collection.query = [\n             {\n                 \'i\': \'portal_type\',\n-                \'o\': \'plone.app.querystring.operation.selection.any\',\n+                \'o\': operator,\n                 \'v\': [\'Event\', \'Event\'],\n              },\n         ]\n'

Repository: plone.app.contentlisting


Branch: refs/heads/1.3.x
Date: 2019-12-11T14:48:52+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.contentlisting/commit/640cbacc84f477070bed1c6bcb6016c5ad63f58a

run tests on drone.io with Plone 4.3 and 5.1

Files changed:
A .drone.yml
A buildout-p4.cfg
A buildout-p51.cfg
A requirements.txt
M .gitignore
M setup.py

b'diff --git a/.drone.yml b/.drone.yml\nnew file mode 100644\nindex 0000000..1efe535\n--- /dev/null\n+++ b/.drone.yml\n@@ -0,0 +1,22 @@\n+---\n+kind: pipeline\n+name: plone4\n+\n+steps:\n+- name: test\n+  image: python:2\n+  commands:\n+  - pip install -r requirements.txt\n+  - buildout -c buildout-p4.cfg\n+  - bin/test\n+---\n+kind: pipeline\n+name: plone51\n+\n+steps:\n+- name: test\n+  image: python:2\n+  commands:\n+  - pip install -r requirements.txt\n+  - buildout -c buildout-p51.cfg\n+  - bin/test\ndiff --git a/.gitignore b/.gitignore\nindex 851e457..1b161ba 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -24,3 +24,4 @@ docs/Makefile\n docs/make.bat\n docs/doctrees\n docs/html\n+pip-selfcheck.json\ndiff --git a/buildout-p4.cfg b/buildout-p4.cfg\nnew file mode 100644\nindex 0000000..cc0faf4\n--- /dev/null\n+++ b/buildout-p4.cfg\n@@ -0,0 +1,16 @@\n+[buildout]\n+extends = http://dist.plone.org/release/4.3.19/versions.cfg\n+parts = test\n+develop = .\n+\n+[versions]\n+setuptools = 41.6.0\n+zc.buildout = 2.13.2\n+plone.app.contentlisting =\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+defaults = [\'-s\', \'plone.app.contentlisting\', \'--auto-color\', \'--auto-progress\']\n+eggs =\n+    plone.app.contentlisting [test]\n+    Plone\ndiff --git a/buildout-p51.cfg b/buildout-p51.cfg\nnew file mode 100644\nindex 0000000..1d2f70e\n--- /dev/null\n+++ b/buildout-p51.cfg\n@@ -0,0 +1,16 @@\n+[buildout]\n+extends = http://dist.plone.org/release/5.1.6/versions.cfg\n+parts = test\n+develop = .\n+\n+[versions]\n+setuptools = 41.6.0\n+zc.buildout = 2.13.2\n+plone.app.contentlisting =\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+defaults = [\'-s\', \'plone.app.contentlisting\', \'--auto-color\', \'--auto-progress\']\n+eggs =\n+    plone.app.contentlisting [test]\n+    Plone\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..2ab15d0\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,2 @@\n+zc.buildout==2.13.2\n+setuptools==41.6.0\ndiff --git a/setup.py b/setup.py\nindex dfdcf1a..cd10558 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -40,6 +40,7 @@ def read(*rnames):\n         \'test\': [\n             \'plone.app.contenttypes\',\n             \'plone.app.testing\',\n+            \'plone.app.robotframework\',\n         ],\n     },\n     entry_points="""\n'

Repository: plone.app.contentlisting


Branch: refs/heads/1.3.x
Date: 2019-12-11T14:48:52+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.contentlisting/commit/4e62d38af357877e84b7c59fbbb6d1414e532596

run tests on GHA

Files changed:
A .github/workflows/tests.yml
A buildout-4.3.cfg
A buildout-5.1.cfg
M .drone.yml
D buildout-p4.cfg
D buildout-p51.cfg

b"diff --git a/.drone.yml b/.drone.yml\nindex 1efe535..f08f6a1 100644\n--- a/.drone.yml\n+++ b/.drone.yml\n@@ -7,7 +7,7 @@ steps:\n   image: python:2\n   commands:\n   - pip install -r requirements.txt\n-  - buildout -c buildout-p4.cfg\n+  - buildout -c buildout-4.3.cfg\n   - bin/test\n ---\n kind: pipeline\n@@ -18,5 +18,5 @@ steps:\n   image: python:2\n   commands:\n   - pip install -r requirements.txt\n-  - buildout -c buildout-p51.cfg\n+  - buildout -c buildout-5.1.cfg\n   - bin/test\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nnew file mode 100644\nindex 0000000..35f8a21\n--- /dev/null\n+++ b/.github/workflows/tests.yml\n@@ -0,0 +1,26 @@\n+name: Run tests\n+\n+on: [push]\n+\n+jobs:\n+  build:\n+\n+    runs-on: ubuntu-18.04\n+    strategy:\n+      fail-fast: false\n+      max-parallel: 4\n+      matrix:\n+        plone-version: [4.3, 5.1]\n+\n+    steps:\n+    - uses: actions/checkout@v1\n+    - uses: actions/setup-python@v1\n+      with:\n+        python-version: '2.7'\n+    - name: Setup for tests\n+      run: |\n+        pip install -r requirements.txt\n+        buildout -c buildout-${{matrix.plone-version}}.cfg\n+    - name: Run tests\n+      run: |\n+        bin/test\ndiff --git a/buildout-p4.cfg b/buildout-4.3.cfg\nsimilarity index 100%\nrename from buildout-p4.cfg\nrename to buildout-4.3.cfg\ndiff --git a/buildout-p51.cfg b/buildout-5.1.cfg\nsimilarity index 100%\nrename from buildout-p51.cfg\nrename to buildout-5.1.cfg\n"

Repository: plone.app.contentlisting


Branch: refs/heads/1.3.x
Date: 2019-12-11T14:48:52+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.contentlisting/commit/49a20b4b485e9a063aa2cb430d2c847c4b037e99

run tests on Travis

Files changed:
A .travis.yml

b'diff --git a/.travis.yml b/.travis.yml\nnew file mode 100644\nindex 0000000..3b6b3a5\n--- /dev/null\n+++ b/.travis.yml\n@@ -0,0 +1,11 @@\n+language: python\n+python:\n+  - "2.7"\n+env:\n+  - PLONE_VERSION=4.3\n+  - PLONE_VERSION=5.1\n+install:\n+  - pip install -r requirements.txt\n+  - buildout -c buildout-$PLONE_VERSION.cfg\n+script:\n+  - bin/test\n'

Repository: plone.app.contentlisting


Branch: refs/heads/1.3.x
Date: 2019-12-11T14:48:52+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.contentlisting/commit/e78c43e2e29dd2e83a1de1cc30f317ea6001759b

run tests on CircleCI

Files changed:
A .circleci/config.yml

b'diff --git a/.circleci/config.yml b/.circleci/config.yml\nnew file mode 100644\nindex 0000000..99c6711\n--- /dev/null\n+++ b/.circleci/config.yml\n@@ -0,0 +1,42 @@\n+version: 2.1\n+jobs:\n+  plone-43:\n+    docker:\n+      - image: circleci/python:2.7\n+    steps:\n+      - checkout\n+      - run:\n+          name: Tests setup\n+          command: |\n+            sudo pip install virtualenv==16.7.8\n+            virtualenv ci_tests\n+            ci_tests/bin/pip install -r requirements.txt\n+            ci_tests/bin/buildout -c buildout-4.3.cfg\n+      - run:\n+          name: Run tests\n+          command: |\n+            bin/test\n+  plone-51:\n+    docker:\n+      - image: circleci/python:2.7\n+    steps:\n+      - checkout\n+      - run:\n+          name: Tests setup\n+          command: |\n+            sudo pip install virtualenv==16.7.8\n+            virtualenv ci_tests\n+            ci_tests/bin/pip install -r requirements.txt\n+            ci_tests/bin/buildout -c buildout-5.1.cfg\n+      - run:\n+          name: Run tests\n+          command: |\n+            bin/test\n+workflows:\n+ version: 2\n+ plone-43:\n+   jobs:\n+     - plone-43\n+ plone-51:\n+   jobs:\n+     - plone-51\n'

Repository: plone.app.contentlisting


Branch: refs/heads/1.3.x
Date: 2019-12-11T14:48:52+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.contentlisting/commit/a85b4b5714fac2dd6a7e17772b68113bce158741

use Makefile

Files changed:
A Makefile
M .circleci/config.yml
M .drone.yml
M .github/workflows/tests.yml
M .travis.yml

b"diff --git a/.circleci/config.yml b/.circleci/config.yml\nindex 99c6711..198ea0b 100644\n--- a/.circleci/config.yml\n+++ b/.circleci/config.yml\n@@ -9,13 +9,10 @@ jobs:\n           name: Tests setup\n           command: |\n             sudo pip install virtualenv==16.7.8\n-            virtualenv ci_tests\n-            ci_tests/bin/pip install -r requirements.txt\n-            ci_tests/bin/buildout -c buildout-4.3.cfg\n       - run:\n           name: Run tests\n           command: |\n-            bin/test\n+            PLONE_VERSION=5.1 make test\n   plone-51:\n     docker:\n       - image: circleci/python:2.7\n@@ -25,13 +22,10 @@ jobs:\n           name: Tests setup\n           command: |\n             sudo pip install virtualenv==16.7.8\n-            virtualenv ci_tests\n-            ci_tests/bin/pip install -r requirements.txt\n-            ci_tests/bin/buildout -c buildout-5.1.cfg\n       - run:\n           name: Run tests\n           command: |\n-            bin/test\n+            PLONE_VERSION=5.1 make test\n workflows:\n  version: 2\n  plone-43:\ndiff --git a/.drone.yml b/.drone.yml\nindex f08f6a1..7eddb04 100644\n--- a/.drone.yml\n+++ b/.drone.yml\n@@ -6,9 +6,7 @@ steps:\n - name: test\n   image: python:2\n   commands:\n-  - pip install -r requirements.txt\n-  - buildout -c buildout-4.3.cfg\n-  - bin/test\n+  - PLONE_VERSION=4.3 make test\n ---\n kind: pipeline\n name: plone51\n@@ -17,6 +15,4 @@ steps:\n - name: test\n   image: python:2\n   commands:\n-  - pip install -r requirements.txt\n-  - buildout -c buildout-5.1.cfg\n-  - bin/test\n+  - PLONE_VERSION=5.1 make test\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 35f8a21..21e60d2 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -17,10 +17,9 @@ jobs:\n     - uses: actions/setup-python@v1\n       with:\n         python-version: '2.7'\n-    - name: Setup for tests\n+    - name: install virtualenv\n       run: |\n-        pip install -r requirements.txt\n-        buildout -c buildout-${{matrix.plone-version}}.cfg\n+        pip install virtualenv==16.7.8\n     - name: Run tests\n       run: |\n-        bin/test\n+        PLONE_VERSION=${{matrix.plone-version}} make test\ndiff --git a/.travis.yml b/.travis.yml\nindex 3b6b3a5..e126382 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -5,7 +5,6 @@ env:\n   - PLONE_VERSION=4.3\n   - PLONE_VERSION=5.1\n install:\n-  - pip install -r requirements.txt\n-  - buildout -c buildout-$PLONE_VERSION.cfg\n+  - pip install virtualenv==16.7.8\n script:\n-  - bin/test\n+  - PLONE_VERSION=$PLONE_VERSION make test\ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 0000000..42ea57b\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,11 @@\n+ci_tests:\n+\tvirtualenv ci_tests\n+\n+ci_tests/bin/buildout: ci_tests\n+\tci_tests/bin/pip install -r requirements.txt\n+\n+bin/test: ci_tests/bin/buildout\n+\tci_tests/bin/buildout -c buildout-${PLONE_VERSION}.cfg\n+\n+test: bin/test\n+\tbin/test\n"

Repository: plone.app.contentlisting


Branch: refs/heads/1.3.x
Date: 2019-12-11T14:48:52+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.contentlisting/commit/f7195e3677d177a98c661ba8aa729343bcc02705

update changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1ad0ed4..e311665 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,17 +4,10 @@ Changelog\n 1.3.4 (unreleased)\n ------------------\n \n-Breaking changes:\n-\n-- *add item here*\n-\n New features:\n \n-- *add item here*\n-\n-Bug fixes:\n-\n-- *add item here*\n+- Backport to Plone 4.3\n+  [gotcha]\n \n \n 1.3.3 (2018-02-05)\n'

