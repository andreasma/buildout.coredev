Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2020-01-15T11:14:33+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.textfield/commit/339979af593acf7e28cadaec0c753e372c2fd880

Black-en code.

Files changed:
A news/xxx.feature
M plone/__init__.py
M plone/app/__init__.py
M plone/app/textfield/__init__.py
M plone/app/textfield/browser.py
M plone/app/textfield/editor.py
M plone/app/textfield/handler.py
M plone/app/textfield/interfaces.py
M plone/app/textfield/marshaler.py
M plone/app/textfield/tests.py
M plone/app/textfield/transform.py
M plone/app/textfield/utils.py
M plone/app/textfield/value.py
M plone/app/textfield/widget.py
M setup.py

b'diff --git a/news/xxx.feature b/news/xxx.feature\nnew file mode 100644\nindex 0000000..78186c6\n--- /dev/null\n+++ b/news/xxx.feature\n@@ -0,0 +1,2 @@\n+Black-en code.\n+[thet]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/textfield/__init__.py b/plone/app/textfield/__init__.py\nindex 9a8a06e..24fe89a 100644\n--- a/plone/app/textfield/__init__.py\n+++ b/plone/app/textfield/__init__.py\n@@ -13,7 +13,7 @@\n import six\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @implementer(IRichText, IFromUnicode)\n@@ -21,29 +21,30 @@ class RichText(Object):\n     """Text field that also stores MIME type\n     """\n \n-    default_mime_type = \'text/html\'\n-    output_mime_type = \'text/x-html-safe\'\n+    default_mime_type = "text/html"\n+    output_mime_type = "text/x-html-safe"\n     allowed_mime_types = None\n     max_length = None\n \n-    def __init__(self,\n-                 default_mime_type=\'text/html\',\n-                 output_mime_type=\'text/x-html-safe\',\n-                 allowed_mime_types=None,\n-                 max_length=None,\n-                 schema=IRichTextValue,\n-                 **kw\n-                 ):\n+    def __init__(\n+        self,\n+        default_mime_type="text/html",\n+        output_mime_type="text/x-html-safe",\n+        allowed_mime_types=None,\n+        max_length=None,\n+        schema=IRichTextValue,\n+        **kw\n+    ):\n         self.default_mime_type = default_mime_type\n         self.output_mime_type = output_mime_type\n         self.allowed_mime_types = allowed_mime_types\n         self.max_length = max_length\n \n-        if \'default\' in kw:\n-            default = kw[\'default\']\n+        if "default" in kw:\n+            default = kw["default"]\n             if isinstance(default, six.text_type):\n-                kw[\'default\'] = self.fromUnicode(default)\n-                kw[\'default\'].readonly = True\n+                kw["default"] = self.fromUnicode(default)\n+                kw["default"].readonly = True\n \n         super(RichText, self).__init__(schema=schema, **kw)\n \n@@ -52,20 +53,21 @@ def fromUnicode(self, str_val):\n             raw=str_val,\n             mimeType=self.default_mime_type,\n             outputMimeType=self.output_mime_type,\n-            encoding=\'utf-8\',\n+            encoding="utf-8",\n         )\n \n     def _validate(self, value):\n-        if self.allowed_mime_types\\\n-                and value.mimeType not in self.allowed_mime_types:\n+        if self.allowed_mime_types and value.mimeType not in self.allowed_mime_types:\n             raise WrongType(value, self.allowed_mime_types)\n \n         if self.max_length is not None and len(value.raw) > self.max_length:\n-            raise Invalid(_(\n-                \'msg_text_too_long\',\n-                default=u\'Text is too long. (Maximum ${max} characters.)\',\n-                mapping={\'max\': self.max_length}\n-            ))\n+            raise Invalid(\n+                _(\n+                    "msg_text_too_long",\n+                    default=u"Text is too long. (Maximum ${max} characters.)",\n+                    mapping={"max": self.max_length},\n+                )\n+            )\n \n         if not self.constraint(value):\n             raise ConstraintNotSatisfied(value)\ndiff --git a/plone/app/textfield/browser.py b/plone/app/textfield/browser.py\nindex b599391..c68dd53 100644\n--- a/plone/app/textfield/browser.py\n+++ b/plone/app/textfield/browser.py\n@@ -16,6 +16,7 @@ class Transform(BrowserView):\n     e.g.::\n         context/@@text-transform/fieldname/text/plain\n     """\n+\n     fieldName = None\n     major = None\n     minor = None\n@@ -42,7 +43,7 @@ def __call__(self, value=None, fieldName=None, mimeType=None):\n             if not self.major or not self.minor:\n                 mimeType = value.outputMimeType\n             else:\n-                mimeType = "%s/%s" % (self.major, self.minor, )\n+                mimeType = "%s/%s" % (self.major, self.minor,)\n \n         transformer = ITransformer(context)\n         return transformer(value, mimeType)\ndiff --git a/plone/app/textfield/editor.py b/plone/app/textfield/editor.py\nindex 2ab0b44..b9c11b0 100644\n--- a/plone/app/textfield/editor.py\n+++ b/plone/app/textfield/editor.py\n@@ -10,6 +10,7 @@\n \n try:\n     import plone.app.vocabularies  # noqa\n+\n     HAS_VOCABS = True\n except ImportError:\n     HAS_VOCABS = False\n@@ -19,16 +20,17 @@ class IRichText(interfaces.IRichText, schema_ifaces.IFromUnicode):\n \n     if HAS_VOCABS:\n         default_mime_type = schema.Choice(\n-            title=_(u\'Input format\'),\n-            vocabulary=\'plone.app.vocabularies.AllowedContentTypes\',\n-            default=\'text/html\',\n+            title=_(u"Input format"),\n+            vocabulary="plone.app.vocabularies.AllowedContentTypes",\n+            default="text/html",\n         )\n     else:\n-        default_mime_type = Attribute(\'\')\n+        default_mime_type = Attribute("")\n \n     # prevent some settings from being included in the field edit form\n-    default = Attribute(\'\')\n-    output_mime_type = Attribute(\'\')\n-    allowed_mime_types = Attribute(\'\')\n+    default = Attribute("")\n+    output_mime_type = Attribute("")\n+    allowed_mime_types = Attribute("")\n+\n \n-RichTextFactory = FieldFactory(RichText, _(u\'Rich Text\'))\n+RichTextFactory = FieldFactory(RichText, _(u"Rich Text"))\ndiff --git a/plone/app/textfield/handler.py b/plone/app/textfield/handler.py\nindex 639e569..7087dc2 100644\n--- a/plone/app/textfield/handler.py\n+++ b/plone/app/textfield/handler.py\n@@ -14,7 +14,7 @@ class RichTextHandler_(BaseHandler):\n \n     # Don\'t read or write \'schema\'\n     filteredAttributes = BaseHandler.filteredAttributes.copy()\n-    filteredAttributes.update({\'schema\': \'rw\'})\n+    filteredAttributes.update({"schema": "rw"})\n \n     def __init__(self, klass):\n         super(RichTextHandler_, self).__init__(klass)\n@@ -23,7 +23,6 @@ def __init__(self, klass):\n @implementer(IToUnicode)\n @adapter(IRichText)\n class RichTextToUnicode(object):\n-\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/app/textfield/interfaces.py b/plone/app/textfield/interfaces.py\nindex ac3b5ca..ea139c9 100644\n--- a/plone/app/textfield/interfaces.py\n+++ b/plone/app/textfield/interfaces.py\n@@ -5,7 +5,7 @@\n from zope.schema.interfaces import IObject\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n class IRichText(IObject):\n@@ -13,13 +13,11 @@ class IRichText(IObject):\n     """\n \n     default_mime_type = schema.ASCIILine(\n-        title=_(u"Default MIME type"),\n-        default=\'text/html\',\n+        title=_(u"Default MIME type"), default="text/html",\n     )\n \n     output_mime_type = schema.ASCIILine(\n-        title=_(u"Default output MIME type"),\n-        default=\'text/x-html-safe\'\n+        title=_(u"Default output MIME type"), default="text/x-html-safe"\n     )\n \n     allowed_mime_types = schema.Tuple(\n@@ -31,8 +29,8 @@ class IRichText(IObject):\n     )\n \n     max_length = schema.Int(\n-        title=_(u\'Maximum length\'),\n-        description=_(u\'in characters\'),\n+        title=_(u"Maximum length"),\n+        description=_(u"in characters"),\n         required=False,\n         min=0,\n         default=None,\n@@ -50,19 +48,12 @@ class IRichTextValue(Interface):\n     The object is immutable.\n     """\n \n-    raw = schema.Text(\n-        title=_(u"Raw value in the original MIME type"),\n-        readonly=True,\n-    )\n+    raw = schema.Text(title=_(u"Raw value in the original MIME type"), readonly=True,)\n \n-    mimeType = schema.ASCIILine(\n-        title=_(u"MIME type"),\n-        readonly=True,\n-    )\n+    mimeType = schema.ASCIILine(title=_(u"MIME type"), readonly=True,)\n \n     outputMimeType = schema.ASCIILine(\n-        title=_(u"Default output MIME type"),\n-        readonly=True,\n+        title=_(u"Default output MIME type"), readonly=True,\n     )\n \n     encoding = schema.ASCIILine(\ndiff --git a/plone/app/textfield/marshaler.py b/plone/app/textfield/marshaler.py\nindex 462830c..42d0f24 100644\n--- a/plone/app/textfield/marshaler.py\n+++ b/plone/app/textfield/marshaler.py\n@@ -15,18 +15,13 @@ class RichTextFieldMarshaler(BaseFieldMarshaler):\n \n     ascii = False\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return\n         return value.raw.encode(charset)\n \n     def decode(\n-        self,\n-        value,\n-        message=None,\n-        charset=\'utf-8\',\n-        contentType=None,\n-        primary=False\n+        self, value, message=None, charset="utf-8", contentType=None, primary=False\n     ):\n \n         if isinstance(value, six.binary_type):\n@@ -44,7 +39,7 @@ def getContentType(self):\n             return None\n         return value.mimeType\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         value = self._query()\n         if value is None:\n             return None\ndiff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py\nindex ec07325..3acf11f 100644\n--- a/plone/app/textfield/tests.py\n+++ b/plone/app/textfield/tests.py\n@@ -11,7 +11,7 @@\n \n class IntegrationFixture(testing.PloneSandboxLayer):\n \n-    defaultBases = (testing.PLONE_FIXTURE, )\n+    defaultBases = (testing.PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.textfield)\n@@ -19,7 +19,8 @@ def setUpZope(self, app, configurationContext):\n \n PTC_FIXTURE = IntegrationFixture()\n IntegrationLayer = testing.FunctionalTesting(\n-    bases=(PTC_FIXTURE, ), name=\'PloneAppTextfieldTest:Functional\')\n+    bases=(PTC_FIXTURE,), name="PloneAppTextfieldTest:Functional"\n+)\n \n \n class TestIntegration(unittest.TestCase):\n@@ -27,7 +28,7 @@ class TestIntegration(unittest.TestCase):\n     layer = IntegrationLayer\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def testTransformPlain(self):\n         from zope.interface import Interface\n@@ -35,20 +36,23 @@ def testTransformPlain(self):\n \n         class IWithText(Interface):\n \n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/plain\',\n-                            output_mime_type=\'text/html\')\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/plain",\n+                output_mime_type="text/html",\n+            )\n \n-        value = IWithText[\'text\'].fromUnicode(u"Some **text**")\n-        self.assertEquals(u\'<p>Some **text**</p>\', value.output)\n+        value = IWithText["text"].fromUnicode(u"Some **text**")\n+        self.assertEquals(u"<p>Some **text**</p>", value.output)\n \n     def testTransformNone(self):\n         from plone.app.textfield.value import RichTextValue\n+\n         value = RichTextValue()\n         # Mostly, these calls simply should not give an error.\n         self.assertEquals(None, value.raw)\n         if six.PY2:\n-            self.assertEquals(u\'\', value.output)\n+            self.assertEquals(u"", value.output)\n         else:\n             self.assertEquals(None, value.output)\n \n@@ -58,12 +62,14 @@ def testTransformStructured(self):\n \n         class IWithText(Interface):\n \n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/structured\',\n-                            output_mime_type=\'text/html\')\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/structured",\n+                output_mime_type="text/html",\n+            )\n \n-        value = IWithText[\'text\'].fromUnicode(u"Some **text**")\n-        self.assertEquals(u\'<p>Some <strong>text</strong></p>\\n\', value.output)\n+        value = IWithText["text"].fromUnicode(u"Some **text**")\n+        self.assertEquals(u"<p>Some <strong>text</strong></p>\\n", value.output)\n \n     def testTransformView(self):\n         from zope.interface import Interface, implementer\n@@ -72,38 +78,41 @@ def testTransformView(self):\n \n         class IWithText(Interface):\n \n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/structured\',\n-                            output_mime_type=\'text/html\')\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/structured",\n+                output_mime_type="text/html",\n+            )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n \n-            id = \'context\'\n+            id = "context"\n             text = None\n \n         context = Context()\n-        context.text = IWithText[\'text\'].fromUnicode(u"Some **text**")\n+        context.text = IWithText["text"].fromUnicode(u"Some **text**")\n \n-        self.portal._setObject(\'context\', context)\n-        context = self.portal[\'context\']\n+        self.portal._setObject("context", context)\n+        context = self.portal["context"]\n \n-        output = context.restrictedTraverse(\'@@text-transform/text\')()\n-        self.assertEquals(u\'<p>Some <strong>text</strong></p>\', output.strip())\n+        output = context.restrictedTraverse("@@text-transform/text")()\n+        self.assertEquals(u"<p>Some <strong>text</strong></p>", output.strip())\n \n-        output = context.restrictedTraverse(\n-            \'@@text-transform/text/text/plain\')()\n-        self.assertEquals(u\'Some text\', output.strip())\n+        output = context.restrictedTraverse("@@text-transform/text/text/plain")()\n+        self.assertEquals(u"Some text", output.strip())\n \n         # test transform shortcircuit when input and output type is the\n         # same. this used to cause infinite recursion\n         class IWithText(Interface):\n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/html\',\n-                            output_mime_type=\'text/html\')\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/html",\n+                output_mime_type="text/html",\n+            )\n \n-        context.text = IWithText[\'text\'].fromUnicode(u"<span>Some html</span>")\n-        output = context.restrictedTraverse(\'@@text-transform/text\')()\n+        context.text = IWithText["text"].fromUnicode(u"<span>Some html</span>")\n+        output = context.restrictedTraverse("@@text-transform/text")()\n         self.assertEquals(u"<span>Some html</span>", output.strip())\n \n     def testTransformNoneView(self):\n@@ -114,29 +123,30 @@ def testTransformNoneView(self):\n \n         class IWithText(Interface):\n \n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/structured\',\n-                            output_mime_type=\'text/html\')\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/structured",\n+                output_mime_type="text/html",\n+            )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n \n-            id = \'context\'\n+            id = "context"\n             text = None\n \n         context = Context()\n         # None as value should not lead to errors.\n         context.text = RichTextValue()\n \n-        self.portal._setObject(\'context\', context)\n-        context = self.portal[\'context\']\n+        self.portal._setObject("context", context)\n+        context = self.portal["context"]\n \n-        output = context.restrictedTraverse(\'@@text-transform/text\')()\n-        self.assertEquals(u\'\', output.strip())\n+        output = context.restrictedTraverse("@@text-transform/text")()\n+        self.assertEquals(u"", output.strip())\n \n-        output = context.restrictedTraverse(\n-            \'@@text-transform/text/text/plain\')()\n-        self.assertEquals(u\'\', output.strip())\n+        output = context.restrictedTraverse("@@text-transform/text/text/plain")()\n+        self.assertEquals(u"", output.strip())\n \n     def testWidgetExtract(self):\n         from zope.interface import Interface, implementer\n@@ -149,9 +159,11 @@ def testWidgetExtract(self):\n \n         class IWithText(Interface):\n \n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/structured\',\n-                            output_mime_type=\'text/html\')\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/structured",\n+                output_mime_type="text/html",\n+            )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n@@ -160,19 +172,17 @@ class Context(PortalContent):\n \n         request = TestRequest()\n \n-        widget = FieldWidget(IWithText[\'text\'], RichTextWidget(request))\n+        widget = FieldWidget(IWithText["text"], RichTextWidget(request))\n         widget.update()\n \n         value = widget.extract()\n         self.assertEquals(NOVALUE, value)\n \n-        request.form[\'%s\' % widget.name] = u"Sample **text**"\n-        request.form[\'%s.mimeType\' % widget.name] = \'text/structured\'\n+        request.form["%s" % widget.name] = u"Sample **text**"\n+        request.form["%s.mimeType" % widget.name] = "text/structured"\n \n         value = widget.extract()\n-        self.assertEquals(\n-            u"<p>Sample <strong>text</strong></p>",\n-            value.output.strip())\n+        self.assertEquals(u"<p>Sample <strong>text</strong></p>", value.output.strip())\n \n     def testRichTextWidgetConverter(self):\n         from zope.interface import Interface\n@@ -187,42 +197,42 @@ def testRichTextWidgetConverter(self):\n \n         class IWithText(Interface):\n \n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/structured\',\n-                            output_mime_type=\'text/html\',\n-                            missing_value=_marker)\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/structured",\n+                output_mime_type="text/html",\n+                missing_value=_marker,\n+            )\n \n         request = TestRequest()\n \n-        widget = FieldWidget(IWithText[\'text\'], RichTextWidget(request))\n+        widget = FieldWidget(IWithText["text"], RichTextWidget(request))\n         widget.update()\n \n-        converter = RichTextConverter(IWithText[\'text\'], widget)\n+        converter = RichTextConverter(IWithText["text"], widget)\n \n         # Test with None input.\n         self.assertRaises(ValueError, converter.toFieldValue, None)\n         self.assertTrue(converter.toWidgetValue(None) is None)\n \n         # Test with string input.\n-        self.assertRaises(ValueError, converter.toFieldValue, b\'\')\n-        self.assertRaises(ValueError, converter.toFieldValue, b\'Foo\')\n-        self.assertRaises(ValueError, converter.toWidgetValue, b\'\')\n-        self.assertRaises(ValueError, converter.toWidgetValue, b\'Foo\')\n+        self.assertRaises(ValueError, converter.toFieldValue, b"")\n+        self.assertRaises(ValueError, converter.toFieldValue, b"Foo")\n+        self.assertRaises(ValueError, converter.toWidgetValue, b"")\n+        self.assertRaises(ValueError, converter.toWidgetValue, b"Foo")\n \n         # Test with unicode input.\n-        self.assertTrue(converter.toFieldValue(u\'\') is _marker)\n-        self.assertEqual(converter.toFieldValue(u\'Foo\').raw, u\'Foo\')\n-        self.assertTrue(\n-            isinstance(converter.toFieldValue(u\'Foo\'), RichTextValue)\n-        )\n-        self.assertEqual(converter.toWidgetValue(u\'\').raw, u\'\')\n-        self.assertEqual(converter.toWidgetValue(u\'Foo\').raw, u\'Foo\')\n+        self.assertTrue(converter.toFieldValue(u"") is _marker)\n+        self.assertEqual(converter.toFieldValue(u"Foo").raw, u"Foo")\n+        self.assertTrue(isinstance(converter.toFieldValue(u"Foo"), RichTextValue))\n+        self.assertEqual(converter.toWidgetValue(u"").raw, u"")\n+        self.assertEqual(converter.toWidgetValue(u"Foo").raw, u"Foo")\n \n         # Test with RichTextValue input.\n-        self.assertTrue(converter.toFieldValue(RichTextValue(u\'\')) is _marker)\n-        rich_text = RichTextValue(u\'Foo\')\n+        self.assertTrue(converter.toFieldValue(RichTextValue(u"")) is _marker)\n+        rich_text = RichTextValue(u"Foo")\n         self.assertEqual(converter.toFieldValue(rich_text), rich_text)\n-        self.assertEqual(converter.toFieldValue(rich_text).raw, u\'Foo\')\n+        self.assertEqual(converter.toFieldValue(rich_text).raw, u"Foo")\n         self.assertEqual(converter.toWidgetValue(rich_text), rich_text)\n \n     def testRichTextAreaWidgetConverter(self):\n@@ -238,43 +248,43 @@ def testRichTextAreaWidgetConverter(self):\n \n         class IWithText(Interface):\n \n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/structured\',\n-                            output_mime_type=\'text/html\',\n-                            missing_value=_marker)\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/structured",\n+                output_mime_type="text/html",\n+                missing_value=_marker,\n+            )\n \n         request = TestRequest()\n \n-        widget = FieldWidget(IWithText[\'text\'], RichTextWidget(request))\n+        widget = FieldWidget(IWithText["text"], RichTextWidget(request))\n         widget.update()\n \n-        converter = RichTextAreaConverter(IWithText[\'text\'], widget)\n+        converter = RichTextAreaConverter(IWithText["text"], widget)\n \n         # Test with None input.\n         self.assertRaises(ValueError, converter.toFieldValue, None)\n         self.assertTrue(converter.toWidgetValue(None) is None)\n \n         # Test with string input.\n-        self.assertTrue(converter.toFieldValue(\'\') is _marker)\n-        self.assertRaises(ValueError, converter.toFieldValue, b\'Foo\')\n-        self.assertRaises(ValueError, converter.toWidgetValue, b\'\')\n-        self.assertRaises(ValueError, converter.toWidgetValue, b\'Foo\')\n+        self.assertTrue(converter.toFieldValue("") is _marker)\n+        self.assertRaises(ValueError, converter.toFieldValue, b"Foo")\n+        self.assertRaises(ValueError, converter.toWidgetValue, b"")\n+        self.assertRaises(ValueError, converter.toWidgetValue, b"Foo")\n \n         # Test with unicode input.\n-        self.assertTrue(converter.toFieldValue(u\'\') is _marker)\n-        self.assertEqual(converter.toFieldValue(u\'Foo\').raw, u\'Foo\')\n-        self.assertTrue(\n-            isinstance(converter.toFieldValue(u\'Foo\'), RichTextValue)\n-        )\n-        self.assertEqual(converter.toWidgetValue(u\'\'), u\'\')\n-        self.assertEqual(converter.toWidgetValue(u\'Foo\'), u\'Foo\')\n+        self.assertTrue(converter.toFieldValue(u"") is _marker)\n+        self.assertEqual(converter.toFieldValue(u"Foo").raw, u"Foo")\n+        self.assertTrue(isinstance(converter.toFieldValue(u"Foo"), RichTextValue))\n+        self.assertEqual(converter.toWidgetValue(u""), u"")\n+        self.assertEqual(converter.toWidgetValue(u"Foo"), u"Foo")\n \n         # Test with RichTextValue input.\n-        self.assertTrue(converter.toFieldValue(RichTextValue(u\'\')) is _marker)\n-        rich_text = RichTextValue(u\'Foo\')\n+        self.assertTrue(converter.toFieldValue(RichTextValue(u"")) is _marker)\n+        rich_text = RichTextValue(u"Foo")\n         self.assertEqual(converter.toFieldValue(rich_text), rich_text)\n-        self.assertEqual(converter.toFieldValue(rich_text).raw, u\'Foo\')\n-        self.assertEqual(converter.toWidgetValue(rich_text), u\'Foo\')\n+        self.assertEqual(converter.toFieldValue(rich_text).raw, u"Foo")\n+        self.assertEqual(converter.toWidgetValue(rich_text), u"Foo")\n \n     def testWidgetAllowedTypesDefault(self):\n         from zope.interface import Interface, implementer\n@@ -286,9 +296,11 @@ def testWidgetAllowedTypesDefault(self):\n \n         class IWithText(Interface):\n \n-            text = RichText(title=u"Text",\n-                            default_mime_type=\'text/structured\',\n-                            output_mime_type=\'text/html\')\n+            text = RichText(\n+                title=u"Text",\n+                default_mime_type="text/structured",\n+                output_mime_type="text/html",\n+            )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n@@ -297,16 +309,16 @@ class Context(PortalContent):\n \n         request = TestRequest()\n \n-        widget = FieldWidget(IWithText[\'text\'], RichTextWidget(request))\n+        widget = FieldWidget(IWithText["text"], RichTextWidget(request))\n         widget.update()\n \n-        self.portal[\'portal_properties\'][\'site_properties\']._setPropValue(\n-            \'forbidden_contenttypes\',\n-            [\'text/structured\'])\n+        self.portal["portal_properties"]["site_properties"]._setPropValue(\n+            "forbidden_contenttypes", ["text/structured"]\n+        )\n \n         allowed = widget.allowedMimeTypes()\n-        self.failUnless(\'text/html\' in allowed)\n-        self.failIf(\'text/structured\' in allowed)\n+        self.failUnless("text/html" in allowed)\n+        self.failIf("text/structured" in allowed)\n \n     def testWidgetAllowedTypesField(self):\n         from zope.interface import Interface, implementer\n@@ -320,11 +332,10 @@ class IWithText(Interface):\n \n             text = RichText(\n                 title=u"Text",\n-                default_mime_type=\'text/structured\',\n-                output_mime_type=\'text/html\',\n-                allowed_mime_types=(\n-                    \'text/structured\',\n-                    \'text/html\'))\n+                default_mime_type="text/structured",\n+                output_mime_type="text/html",\n+                allowed_mime_types=("text/structured", "text/html"),\n+            )\n \n         @implementer(IWithText)\n         class Context(PortalContent):\n@@ -333,37 +344,37 @@ class Context(PortalContent):\n \n         request = TestRequest()\n \n-        widget = FieldWidget(IWithText[\'text\'], RichTextWidget(request))\n+        widget = FieldWidget(IWithText["text"], RichTextWidget(request))\n         widget.update()\n \n-        self.portal[\'portal_properties\'][\'site_properties\']._setPropValue(\n-            \'forbidden_contenttypes\',\n-            [\'text/structured\'])\n+        self.portal["portal_properties"]["site_properties"]._setPropValue(\n+            "forbidden_contenttypes", ["text/structured"]\n+        )\n \n         allowed = widget.allowedMimeTypes()\n-        self.failUnless(\'text/html\' in allowed)\n-        self.failUnless(\'text/structured\' in allowed)\n+        self.failUnless("text/html" in allowed)\n+        self.failUnless("text/structured" in allowed)\n \n     def test_getSize(self):\n         from plone.app.textfield.value import RichTextValue\n-        value = RichTextValue(u\'\\u2603\')\n+\n+        value = RichTextValue(u"\\u2603")\n         self.assertEqual(3, value.getSize())\n \n \n class Py23DocChecker(doctest.OutputChecker):\n-\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n             want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n             want = re.sub(\n-                \'zope.schema._bootstrapinterfaces.WrongType\',\n-                \'WrongType\', want)\n-            want = re.sub(\n-                \'zope.interface.exceptions.Invalid\',\n-                \'Invalid\', want)\n+                "zope.schema._bootstrapinterfaces.WrongType", "WrongType", want\n+            )\n+            want = re.sub("zope.interface.exceptions.Invalid", "Invalid", want)\n             want = re.sub(\n-                \'zope.schema._bootstrapinterfaces.ConstraintNotSatisfied\',\n-                \'ConstraintNotSatisfied\', want)\n+                "zope.schema._bootstrapinterfaces.ConstraintNotSatisfied",\n+                "ConstraintNotSatisfied",\n+                want,\n+            )\n         else:\n             want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n             want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n@@ -373,12 +384,13 @@ def check_output(self, want, got, optionflags):\n \n def test_suite():\n     suite = unittest.makeSuite(TestIntegration)\n-    for doctestfile in [\'field.rst\', \'handler.rst\', \'marshaler.rst\']:\n-        suite.addTest(layered(\n-            doctest.DocFileSuite(\n-                doctestfile,\n-                optionflags=doctest.ELLIPSIS,\n-                checker=Py23DocChecker(),\n-            ),\n-            layer=testing.PLONE_FIXTURE))\n+    for doctestfile in ["field.rst", "handler.rst", "marshaler.rst"]:\n+        suite.addTest(\n+            layered(\n+                doctest.DocFileSuite(\n+                    doctestfile, optionflags=doctest.ELLIPSIS, checker=Py23DocChecker(),\n+                ),\n+                layer=testing.PLONE_FIXTURE,\n+            )\n+        )\n     return suite\ndiff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py\nindex e64f162..7c0f225 100644\n--- a/plone/app/textfield/transform.py\n+++ b/plone/app/textfield/transform.py\n@@ -11,7 +11,7 @@\n import re\n import six\n \n-LOG = logging.getLogger(\'plone.app.textfield\')\n+LOG = logging.getLogger("plone.app.textfield")\n imguid_re = re.compile(r\'src="[^/]*/resolve[uU]id/([^/"]*)\')\n \n \n@@ -21,16 +21,16 @@ class PortalTransformsTransformer(object):\n     """Invoke portal_transforms to perform a conversion\n     """\n \n-    _ccounter_id = \'_v_catalog_counter\'\n+    _ccounter_id = "_v_catalog_counter"\n \n     def __init__(self, context):\n         self.context = context\n-        self.catalog = getToolByName(getSite(), \'portal_catalog\')\n+        self.catalog = getToolByName(getSite(), "portal_catalog")\n \n     def __call__(self, value, mimeType):\n         # shortcut it we have no data\n         if value.raw is None:\n-            return u\'\'\n+            return u""\n \n         # shortcut if we already have the right value\n         if mimeType is value.mimeType:\n@@ -38,7 +38,7 @@ def __call__(self, value, mimeType):\n \n         site = getSite()\n \n-        transforms = getToolByName(site, \'portal_transforms\', None)\n+        transforms = getToolByName(site, "portal_transforms", None)\n         if transforms is None:\n             raise TransformError("Cannot find portal_transforms tool")\n \n@@ -53,17 +53,21 @@ def __call__(self, value, mimeType):\n         self.check_referenced_images(source_value, mimeType, value._raw_holder)\n \n         try:\n-            data = transforms.convertTo(mimeType,\n-                                        source_value,\n-                                        mimetype=value.mimeType,\n-                                        context=self.context,\n-                                        # portal_transforms caches on this\n-                                        object=value._raw_holder,\n-                                        encoding=value.encoding)\n+            data = transforms.convertTo(\n+                mimeType,\n+                source_value,\n+                mimetype=value.mimeType,\n+                context=self.context,\n+                # portal_transforms caches on this\n+                object=value._raw_holder,\n+                encoding=value.encoding,\n+            )\n             if data is None:\n                 # TODO: i18n\n-                msg = (u\'No transform path found from "%s" to "%s".\' %\n-                       (value.mimeType, mimeType))\n+                msg = u\'No transform path found from "%s" to "%s".\' % (\n+                    value.mimeType,\n+                    mimeType,\n+                )\n                 LOG.error(msg)\n                 # TODO: memoize?\n                 # plone_utils = getToolByName(self.context, \'plone_utils\')\n@@ -72,7 +76,7 @@ def __call__(self, value, mimeType):\n                 # other page.\n                 # The following might work better, but how to get the request?\n                 # IStatusMessage(request).add(msg, type=\'error\')\n-                return u\'\'\n+                return u""\n \n             else:\n                 output = data.getData()\n@@ -84,7 +88,7 @@ def __call__(self, value, mimeType):\n         except Exception as e:\n             # log the traceback of the original exception\n             LOG.error("Transform exception", exc_info=True)\n-            raise TransformError(\'Error during transformation\', e)\n+            raise TransformError("Error during transformation", e)\n \n     def check_referenced_images(self, value, target_mimetype, cache_obj):\n         # check catalog counter for changes first.\n@@ -116,7 +120,8 @@ def check_referenced_images(self, value, target_mimetype, cache_obj):\n         if len(cached_values):\n             orig_time = cached_values[0][0]\n             modified_imgs = self.catalog(\n-                UID=uids, modified=dict(query=orig_time, range="min"))\n+                UID=uids, modified=dict(query=orig_time, range="min")\n+            )\n \n         if len(modified_imgs) > 0:\n             cache.purgeCache()\ndiff --git a/plone/app/textfield/utils.py b/plone/app/textfield/utils.py\nindex fc2227f..4c19ae1 100644\n--- a/plone/app/textfield/utils.py\n+++ b/plone/app/textfield/utils.py\n@@ -18,10 +18,7 @@ def markupRegistrySettings(context):\n     try:\n         # get the new registry\n         registry = getUtility(IRegistry, context=context)\n-        settings = registry.forInterface(\n-            IMarkupSchema,\n-            prefix=\'plone\',\n-        )\n+        settings = registry.forInterface(IMarkupSchema, prefix="plone",)\n     except (KeyError, ComponentLookupError):\n         settings = None\n     return settings\n@@ -40,21 +37,20 @@ def getAllowedContentTypes():\n     if reg:\n         allowed_types = reg.allowed_types\n     else:\n-        portal_transforms = getToolByName(site, \'portal_transforms\', None)\n+        portal_transforms = getToolByName(site, "portal_transforms", None)\n         if portal_transforms is None:\n             return None\n \n-        portal_properties = getToolByName(site, \'portal_properties\', None)\n+        portal_properties = getToolByName(site, "portal_properties", None)\n         if portal_properties is None:\n             return None\n \n-        site_properties = portal_properties.get(\'site_properties\', None)\n+        site_properties = portal_properties.get("site_properties", None)\n         if site_properties is None:\n             return None\n \n         allowed = set(portal_transforms.listAvailableTextInputs())\n-        forbidden = set(\n-            site_properties.getProperty(\'forbidden_contenttypes\', []))\n+        forbidden = set(site_properties.getProperty("forbidden_contenttypes", []))\n \n         allowed_types = allowed - forbidden\n \ndiff --git a/plone/app/textfield/value.py b/plone/app/textfield/value.py\nindex d363648..268af97 100644\n--- a/plone/app/textfield/value.py\n+++ b/plone/app/textfield/value.py\n@@ -10,7 +10,7 @@\n import six\n \n \n-LOG = logging.getLogger(\'plone.app.textfield\')\n+LOG = logging.getLogger("plone.app.textfield")\n \n \n class RawValueHolder(Persistent):\n@@ -44,17 +44,25 @@ class RichTextValue(object):\n     being loaded.\n     """\n \n-    def __init__(self, raw=None, mimeType=None, outputMimeType=None,\n-                 encoding=\'utf-8\', output=None):\n+    def __init__(\n+        self,\n+        raw=None,\n+        mimeType=None,\n+        outputMimeType=None,\n+        encoding="utf-8",\n+        output=None,\n+    ):\n         self._raw_holder = RawValueHolder(raw)\n         self._mimeType = mimeType\n         self._outputMimeType = outputMimeType\n         self._encoding = encoding\n+\n     # the raw value - stored in a separate persistent object\n \n     @property\n     def raw(self):\n         return self._raw_holder.value\n+\n     # Encoded raw value\n \n     @property\n@@ -64,15 +72,15 @@ def encoding(self):\n     @property\n     def raw_encoded(self):\n         if self._raw_holder.value is None:\n-            return \'\'\n-        happy_value = safe_unicode(self._raw_holder.value,\n-                                   encoding=self.encoding)\n-        return happy_value.encode(self.encoding, \'ignore\')\n+            return ""\n+        happy_value = safe_unicode(self._raw_holder.value, encoding=self.encoding)\n+        return happy_value.encode(self.encoding, "ignore")\n \n     # the current mime type\n     @property\n     def mimeType(self):\n         return self._mimeType\n+\n     # the default mime type\n \n     @property\n@@ -114,8 +122,10 @@ def output_relative_to(self, context):\n         return transformer(self, self.outputMimeType)\n \n     def __repr__(self):\n-        return u"RichTextValue object. (Did you mean <attribute>.raw or "\\\n-               u"<attribute>.output?)"\n+        return (\n+            u"RichTextValue object. (Did you mean <attribute>.raw or "\n+            u"<attribute>.output?)"\n+        )\n \n     def __eq__(self, other):\n         if not isinstance(other, RichTextValue):\n@@ -129,4 +139,4 @@ def __ne__(self, other):\n         return not equal\n \n     def getSize(self):\n-        return len(safe_unicode(self.raw).encode(\'utf-8\'))\n+        return len(safe_unicode(self.raw).encode("utf-8"))\ndiff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py\nindex 08fcd1e..b79b535 100644\n--- a/plone/app/textfield/widget.py\n+++ b/plone/app/textfield/widget.py\n@@ -26,7 +26,6 @@\n \n \n class IRichTextWidget(ITextAreaWidget):\n-\n     def allowedMimeTypes():\n         """Get allowed MIME types\n         """\n@@ -35,7 +34,7 @@ def allowedMimeTypes():\n @implementer_only(IRichTextWidget)\n class RichTextWidget(TextAreaWidget):\n \n-    klass = u\'richTextWidget\'\n+    klass = u"richTextWidget"\n     value = None\n \n     def update(self):\n@@ -62,14 +61,13 @@ def extract(self, default=NOVALUE):\n             return default\n \n         mime_type = self.request.get(\n-            \'{0:s}.mimeType\'.format(self.name),\n-            self.field.default_mime_type\n+            "{0:s}.mimeType".format(self.name), self.field.default_mime_type\n         )\n         return RichTextValue(\n             raw=raw,\n             mimeType=mime_type,\n             outputMimeType=self.field.output_mime_type,\n-            encoding=\'utf-8\'\n+            encoding="utf-8",\n         )\n \n     def allowedMimeTypes(self):\n@@ -98,20 +96,20 @@ def toWidgetValue(self, value):\n         elif value is None:\n             return None\n         raise ValueError(\n-            \'Can not convert {0:s} to an IRichTextValue\'.format(repr(value))\n+            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n         )\n \n     def toFieldValue(self, value):\n         if IRichTextValue.providedBy(value):\n-            if value.raw == u\'\':\n+            if value.raw == u"":\n                 return self.field.missing_value\n             return value\n         elif isinstance(value, six.text_type):\n-            if value == u\'\':\n+            if value == u"":\n                 return self.field.missing_value\n             return self.field.fromUnicode(value)\n         raise ValueError(\n-            \'Can not convert {0:s} to an IRichTextValue\'.format(repr(value))\n+            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n         )\n \n \n@@ -125,32 +123,30 @@ class RichTextAreaConverter(BaseDataConverter):\n \n     def toWidgetValue(self, value):\n         if IRichTextValue.providedBy(value):\n-            if self.widget.mode in (\'input\', \'hidden\'):\n+            if self.widget.mode in ("input", "hidden"):\n                 return value.raw\n-            elif self.widget.mode == \'display\':\n+            elif self.widget.mode == "display":\n                 return value.output_relative_to(self.field.context)\n         if isinstance(value, six.text_type):\n             return value\n         elif value is None:\n             return None\n-        raise ValueError(\n-            \'Can not convert {0:s} to six.text_type\'.format(repr(value))\n-        )\n+        raise ValueError("Can not convert {0:s} to six.text_type".format(repr(value)))\n \n     def toFieldValue(self, value):\n-        if value == u\'\':\n+        if value == u"":\n             return self.field.missing_value\n         elif isinstance(value, six.text_type):\n             return RichTextValue(\n                 raw=value,\n                 mimeType=self.field.default_mime_type,\n                 outputMimeType=self.field.output_mime_type,\n-                encoding=\'utf-8\'\n+                encoding="utf-8",\n             )\n         elif IRichTextValue.providedBy(value):\n-            if value.raw == u\'\':\n+            if value.raw == u"":\n                 return self.field.missing_value\n             return value\n         raise ValueError(\n-            \'Can not convert {0:s} to an IRichTextValue\'.format(repr(value))\n+            "Can not convert {0:s} to an IRichTextValue".format(repr(value))\n         )\ndiff --git a/setup.py b/setup.py\nindex e70b871..56b304f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,14 +2,13 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'1.3.3.dev0\'\n+version = "1.3.3.dev0"\n \n setup(\n-    name=\'plone.app.textfield\',\n+    name="plone.app.textfield",\n     version=version,\n     description="Text field with MIME type support",\n-    long_description=open("README.rst").read() + "\\n" +\n-    open("CHANGES.rst").read(),\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     # Get more strings from https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n@@ -22,33 +21,30 @@\n         "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'plone schema field\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.app.textfield\',\n-    license=\'GPL\',\n+    keywords="plone schema field",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.app.textfield",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.schema\',\n-        \'zope.interface\',\n-        \'zope.component\',\n-        \'ZODB3 >= 3.8.1\',\n+        "setuptools",\n+        "six",\n+        "zope.schema",\n+        "zope.interface",\n+        "zope.component",\n+        "ZODB3 >= 3.8.1",\n     ],\n     extras_require={\n-        \'portaltransforms\': [\'Products.PortalTransforms\'],\n-        \'supermodel\': [\'plone.supermodel\'],\n-        \'widget\': [\'z3c.form\'],\n-        \'marshaler\': [\'plone.rfc822\'],\n-        \'editor\': [\'plone.schemaeditor\'],\n-        \'tests\': [\n-            \'plone.app.testing\',\n-            \'plone.supermodel [test]\',\n-        ],\n+        "portaltransforms": ["Products.PortalTransforms"],\n+        "supermodel": ["plone.supermodel"],\n+        "widget": ["z3c.form"],\n+        "marshaler": ["plone.rfc822"],\n+        "editor": ["plone.schemaeditor"],\n+        "tests": ["plone.app.testing", "plone.supermodel [test]",],\n     },\n     entry_points="""\n       """,\n'

