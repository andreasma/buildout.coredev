Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-11-05T13:17:39+01:00
Author: Thomas Buchberger (buchi) <thomas.buchberger@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ad2e9fa6b3c440622ffde2d95dcd7f846bae1832

Fix issue with serialization of vocabulary items (#815)

Vocabulary items are not hashable and thus we can't cast them to the
fields type. We always return lists as JSON doesn't support other
container types anyway.

Files changed:
A news/788.bugfix
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/test_dxfield_serializer.py

b'diff --git a/news/788.bugfix b/news/788.bugfix\nnew file mode 100644\nindex 00000000..d2f1aa37\n--- /dev/null\n+++ b/news/788.bugfix\n@@ -0,0 +1,2 @@\n+Fix serialization of vocabulary items for fields that need hashable items (e.g. sets).\n+[buchi]\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 98868216..cd2e09a6 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -68,7 +68,7 @@ def __call__(self):\n             for v in value:\n                 term = value_type.vocabulary.getTerm(v)\n                 values.append({u"token": term.token, u"title": term.title})\n-            value = self.field._type(values)\n+            value = values\n         return json_compatible(value)\n \n \ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex 688bdbe2..46a9eed0 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -193,6 +193,18 @@ class IDXTestDocumentSchema(model.Schema):\n         required=False,\n     )\n     test_set_field = schema.Set(required=False)\n+    test_set_field_with_choice_with_vocabulary = schema.Set(\n+        value_type=schema.Choice(\n+            vocabulary=SimpleVocabulary(\n+                [\n+                    SimpleTerm(u"value1", "token1", u"title1"),\n+                    SimpleTerm(u"value2", "token2", u"title2"),\n+                    SimpleTerm(u"value3", "token3", u"title3"),\n+                ]\n+            )\n+        ),\n+        required=False,\n+    )\n     test_text_field = schema.Text(required=False)\n     test_textline_field = schema.TextLine(required=False)\n     test_time_field = schema.Time(required=False)\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex c662642f..1df304da 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -156,6 +156,19 @@ def test_set_field_serialization_returns_list(self):\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual([u"a", u"b", u"c"], sorted(value))\n \n+    def test_set_field_with_vocabulary_choice_serialization_returns_terms(self):\n+        value = self.serialize(\n+            "test_set_field_with_choice_with_vocabulary", set([u"value1", u"value3"])\n+        )\n+        self.assertTrue(isinstance(value, list), "Not a <list>")\n+        self.assertEqual(\n+            [\n+                {u"token": u"token1", u"title": u"title1"},\n+                {u"token": u"token3", u"title": u"title3"},\n+            ],\n+            sorted(value, key=lambda x: x[u"token"]),\n+        )\n+\n     def test_text_field_serialization_returns_unicode(self):\n         value = self.serialize("test_text_field", u"K\xc3\xa4fer")\n         self.assertTrue(isinstance(value, six.text_type), "Not an <unicode>")\n'

