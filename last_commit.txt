Repository: plone.app.content


Branch: refs/heads/3.5.x
Date: 2018-10-06T15:24:07+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.content/commit/adb5f4d6907ec0121a517c42ec87162763969933

Use check_id function from CMFPlone.utils.

Still use check_id method or skin script first.

Files changed:
A news/170.bugfix
M plone/app/content/namechooser.py
M plone/app/content/namechooser.txt

b'diff --git a/news/170.bugfix b/news/170.bugfix\nnew file mode 100644\nindex 0000000..c69b025\n--- /dev/null\n+++ b/news/170.bugfix\n@@ -0,0 +1,3 @@\n+Use check_id function from CMFPlone.utils.\n+Still use check_id method or skin script first.\n+[maurits]\ndiff --git a/plone/app/content/namechooser.py b/plone/app/content/namechooser.py\nindex 659e580..a38fe94 100644\n--- a/plone/app/content/namechooser.py\n+++ b/plone/app/content/namechooser.py\n@@ -95,6 +95,8 @@ def _getCheckId(self, obj):\n         """Return a function that can act as the check_id script.\n         """\n         parent = aq_inner(self.context)\n+        # Check for a method or a skin script, like\n+        # Products/CMFPlone/skins/plone_scripts/check_id.py until Plone 5.1.\n         _check_id = getattr(obj, \'check_id\', None)\n \n         def do_Plone_check(newid, required):\n@@ -104,6 +106,16 @@ def do_Plone_check(newid, required):\n                     required=required,\n                     contained_by=parent\n                 )\n+\n+            # Function in CMFPlone added in 5.1.4/5,\n+            # which replaces the skin script that will be removed in 5.2.\n+            try:\n+                from Products.CMFPlone.utils import check_id\n+                return check_id(\n+                    obj, newid, required=required, contained_by=parent)\n+            except ImportError:\n+                pass\n+\n             # fallback to OFS\n             try:\n                 parent._checkId(newid)\ndiff --git a/plone/app/content/namechooser.txt b/plone/app/content/namechooser.txt\nindex ecd0915..47059ab 100644\n--- a/plone/app/content/namechooser.txt\n+++ b/plone/app/content/namechooser.txt\n@@ -34,6 +34,11 @@ Let\'s create some dummy content.\n \n     >>> container = MyContainer("my-container")\n \n+Allow anyone to access the contents information on the container.\n+This allows to check for existing content with the same id.\n+\n+    >>> container.manage_permission(\'Access contents information\', [\'Anonymous\'], acquire=1)\n+\n Then wire up the name chooser (this is normally done in this package\'s\n configure.zcml file).\n \n@@ -105,18 +110,25 @@ When a filename is used as an id, the extension is preserved.\n     >>> chooser.checkName(name, object)\n     True\n \n-If the chooser is used with a container that implementer the\n+If the chooser is used with a container that implements the\n IObjectManager interface from OFS, the checkValidId method\n of that interface will be used to check for validity of the\n chosen name. This catches various edge cases.\n+We need to force an ImportError for the check_id function in Plone.\n \n     >>> from OFS.ObjectManager import ObjectManager\n     >>> om = ObjectManager()\n     >>> om.title = \'foo\'\n     >>> alsoProvides(om, IFolderish)\n     >>> chooser2 = INameChooser(om)\n+    >>> from Products.CMFPlone import utils\n+    >>> orig_check_id = utils.check_id\n+    >>> def dummy_check_id(*args, **kwargs):\n+    ...     raise ImportError\n+    >>> utils.check_id = dummy_check_id\n     >>> chooser2.chooseName(\'title\', item)\n     \'title-1\'\n+    >>> utils.check_id = orig_check_id\n \n \n Choosing names based on type\n@@ -155,4 +167,4 @@ must implement or be adaptable to INameFromTitle.\n     >>> item = MyType("some-id")\n     >>> item.title = u"My funky item"\n     >>> chooser.chooseName(None, item)\n-    \'my-funky-item\'\n\\ No newline at end of file\n+    \'my-funky-item\'\n'

Repository: plone.app.content


Branch: refs/heads/3.5.x
Date: 2018-10-22T21:22:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.content/commit/7f77716776366c8093c83d319f8bc26523a21076

Merge pull request #172 from plone/use-check-id-function-35

Use check_id function from CMFPlone.utils. [3.5.x/5.1]

Files changed:
A news/170.bugfix
M plone/app/content/namechooser.py
M plone/app/content/namechooser.txt

b'diff --git a/news/170.bugfix b/news/170.bugfix\nnew file mode 100644\nindex 0000000..c69b025\n--- /dev/null\n+++ b/news/170.bugfix\n@@ -0,0 +1,3 @@\n+Use check_id function from CMFPlone.utils.\n+Still use check_id method or skin script first.\n+[maurits]\ndiff --git a/plone/app/content/namechooser.py b/plone/app/content/namechooser.py\nindex 659e580..a38fe94 100644\n--- a/plone/app/content/namechooser.py\n+++ b/plone/app/content/namechooser.py\n@@ -95,6 +95,8 @@ def _getCheckId(self, obj):\n         """Return a function that can act as the check_id script.\n         """\n         parent = aq_inner(self.context)\n+        # Check for a method or a skin script, like\n+        # Products/CMFPlone/skins/plone_scripts/check_id.py until Plone 5.1.\n         _check_id = getattr(obj, \'check_id\', None)\n \n         def do_Plone_check(newid, required):\n@@ -104,6 +106,16 @@ def do_Plone_check(newid, required):\n                     required=required,\n                     contained_by=parent\n                 )\n+\n+            # Function in CMFPlone added in 5.1.4/5,\n+            # which replaces the skin script that will be removed in 5.2.\n+            try:\n+                from Products.CMFPlone.utils import check_id\n+                return check_id(\n+                    obj, newid, required=required, contained_by=parent)\n+            except ImportError:\n+                pass\n+\n             # fallback to OFS\n             try:\n                 parent._checkId(newid)\ndiff --git a/plone/app/content/namechooser.txt b/plone/app/content/namechooser.txt\nindex ecd0915..47059ab 100644\n--- a/plone/app/content/namechooser.txt\n+++ b/plone/app/content/namechooser.txt\n@@ -34,6 +34,11 @@ Let\'s create some dummy content.\n \n     >>> container = MyContainer("my-container")\n \n+Allow anyone to access the contents information on the container.\n+This allows to check for existing content with the same id.\n+\n+    >>> container.manage_permission(\'Access contents information\', [\'Anonymous\'], acquire=1)\n+\n Then wire up the name chooser (this is normally done in this package\'s\n configure.zcml file).\n \n@@ -105,18 +110,25 @@ When a filename is used as an id, the extension is preserved.\n     >>> chooser.checkName(name, object)\n     True\n \n-If the chooser is used with a container that implementer the\n+If the chooser is used with a container that implements the\n IObjectManager interface from OFS, the checkValidId method\n of that interface will be used to check for validity of the\n chosen name. This catches various edge cases.\n+We need to force an ImportError for the check_id function in Plone.\n \n     >>> from OFS.ObjectManager import ObjectManager\n     >>> om = ObjectManager()\n     >>> om.title = \'foo\'\n     >>> alsoProvides(om, IFolderish)\n     >>> chooser2 = INameChooser(om)\n+    >>> from Products.CMFPlone import utils\n+    >>> orig_check_id = utils.check_id\n+    >>> def dummy_check_id(*args, **kwargs):\n+    ...     raise ImportError\n+    >>> utils.check_id = dummy_check_id\n     >>> chooser2.chooseName(\'title\', item)\n     \'title-1\'\n+    >>> utils.check_id = orig_check_id\n \n \n Choosing names based on type\n@@ -155,4 +167,4 @@ must implement or be adaptable to INameFromTitle.\n     >>> item = MyType("some-id")\n     >>> item.title = u"My funky item"\n     >>> chooser.chooseName(None, item)\n-    \'my-funky-item\'\n\\ No newline at end of file\n+    \'my-funky-item\'\n'

