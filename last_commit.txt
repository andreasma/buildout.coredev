Repository: plone.versioncheck


Branch: refs/heads/master
Date: 2019-03-08T14:57:42+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.versioncheck/commit/5fa1fb840d41b258650a4b5e0f4ea56172793f7d

new feature: patternmatching for filename

Files changed:
M CHANGES.rst
M README.rst
M setup.py
M src/plone/versioncheck/formatter.py
M src/plone/versioncheck/script.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex af95c5b..cb68ee2 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,8 +1,11 @@\n Changelog\n =========\n \n-1.6.11 (unreleased)\n--------------------\n+1.7.0 (unreleased)\n+------------------\n+\n+- Feature: Offers exclude pattern matching for cfg-files.\n+  [jensens]\n \n - Use pure black as code style.\n   [jensens]\ndiff --git a/README.rst b/README.rst\nindex ef20fbc..4a26622 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -84,50 +84,54 @@ commandline\n \n ::\n \n-    usage: versioncheck [-h] [-p] [-n] [-N] [-r] [-d] [-i] [-m] [--no-cache] [-b]\n-                        [-o [OUTPUT]] [--no-colors] [--debug-limit DEBUG_LIMIT]\n-                        [buildout]\n-\n-    Fetch information about pinned versions and its overrides in simple and complex/cascaded buildouts.\n-\n-    positional arguments:\n-      buildout              path to buildout.cfg or other *.cfg file\n-\n-    optional arguments:\n-      -h, --help            show this help message and exit\n-      -p, --pypi            check PyPI for newer versions\n-      -n, --newer           display only packages with newer version than active\n-      -N, --newer-orphaned  display orphaned packages only when newer versions\n-                            available\n-      -r, --required-by     show information about requirements (only if tracking\n-                            file is available)\n-      -d, --show-release-dates\n-                            show information about release dates (only for package\n-                            lookup from PyPI)\n-      -i, --ignore-tracking\n-                            ignore tracking file (if present)\n-      -m, --machine         show as machine readable output (json)\n-      --no-cache            do not use a cache for PyPI\n-      -b, --browser         show as html for webbrowser\n-      -o [OUTPUT], --output [OUTPUT]\n-                            safe output to output-file\n-      --no-colors           do not show colors\n-      --debug-limit DEBUG_LIMIT\n-                            Limit the number of PyPI versions fetched for\n-                            debugging\n-\n-    States and color codes:\n-      [A]ctive (white)\n-      [D]evelop (green)\n-      [O]rphaned (magenta)\n-      [I]nherited (older or same versions are gray, newer are yellow)\n-      [U]pdate of final release on PyPI available (cyan)\n-      [P]rerelease update on PyPI available (blue)\n-      [X] unpinned (red)\n-      [r] Requirement (gray)\n-      [a] Annotation (gray)\n-\n-    Color of package name helps to indicate overall state of a package.\n+  usage: versioncheck [-h] [-p] [-n] [-N] [-r] [-d] [-i] [-e EXCLUDE_CFG] [-m]\n+                      [--no-cache] [-b] [-o [OUTPUT]] [--no-colors]\n+                      [--debug-limit DEBUG_LIMIT]\n+                      [buildout]\n+\n+  Fetch information about pinned versions and its overrides in simple and complex/cascaded buildouts.\n+\n+  positional arguments:\n+    buildout              path to buildout.cfg or other *.cfg file\n+\n+  optional arguments:\n+    -h, --help            show this help message and exit\n+    -p, --pypi            check PyPI for newer versions\n+    -n, --newer           display only packages with newer version than active\n+    -N, --newer-orphaned  display orphaned packages only when newer versions\n+                          available\n+    -r, --required-by     show information about requirements (only if tracking\n+                          file is available)\n+    -d, --show-release-dates\n+                          show information about release dates (only for package\n+                          lookup from PyPI)\n+    -i, --ignore-tracking\n+                          ignore tracking file (if present)\n+    -e EXCLUDE_CFG, --exclude-cfg EXCLUDE_CFG\n+                          exclude in listing when cfg-filename pattern matches\n+                          (fnmatch) the given expression\n+    -m, --machine         show as machine readable output (json)\n+    --no-cache            do not use a cache for PyPI\n+    -b, --browser         show as html for webbrowser\n+    -o [OUTPUT], --output [OUTPUT]\n+                          safe output to output-file\n+    --no-colors           do not show colors\n+    --debug-limit DEBUG_LIMIT\n+                          Limit the number of PyPI versions fetched for\n+                          debugging\n+\n+  States and color codes:\n+    [A]ctive (white)\n+    [D]evelop (green)\n+    [O]rphaned (magenta)\n+    [I]nherited (older or same versions are gray, newer are yellow)\n+    [U]pdate of final release on PyPI available (cyan)\n+    [P]rerelease update on PyPI available (blue)\n+    [X] unpinned (red)\n+    [r] Requirement (gray)\n+    [a] Annotation (gray)\n+\n+  Color of package name helps to indicate overall state of a package.\n \n \n Files created\ndiff --git a/setup.py b/setup.py\nindex d9be95d..d9195e8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = "1.6.11.dev0"\n+version = "1.7.0.dev0"\n \n long_description = "{0}\\n\\n{1}".format(\n     open("README.rst").read(), open("CHANGES.rst").read()\ndiff --git a/src/plone/versioncheck/formatter.py b/src/plone/versioncheck/formatter.py\nindex 72c22f5..2f801a6 100644\n--- a/src/plone/versioncheck/formatter.py\n+++ b/src/plone/versioncheck/formatter.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from __future__ import print_function\n from collections import OrderedDict\n+from fnmatch import fnmatch\n from jinja2 import Environment\n from jinja2 import PackageLoader\n from plone.versioncheck import analyser\n@@ -81,6 +82,17 @@ def builder(\n \n     for nidx, name in enumerate(names):\n         current_pkg = pkgs.get(name, {})\n+\n+        # check excludes\n+        def match_patterns(filepath):\n+            for pattern in exclude_cfgs:\n+                if fnmatch(filepath, pattern):\n+                    return True\n+            return False\n+\n+        if list(filter(match_patterns, current_pkg)):\n+            continue\n+\n         record = dict()\n         versions = record["versions"] = list()\n         unpinned = False\n@@ -177,8 +189,6 @@ def builder(\n             and len(record["versions"]) == 1\n         ):\n             continue\n-        for version in record["versions"]:\n-            pass\n         result[name] = record\n     return result\n \n@@ -188,6 +198,7 @@ def human(\n     newer_only=False,\n     newer_orphaned_only=False,\n     limit=None,\n+    exclude_cfgs=[],\n     show_requiredby=False,\n ):\n     color_init()\n@@ -196,6 +207,7 @@ def human(\n         pkgsinfo,\n         newer_only=newer_only,\n         newer_orphaned_only=newer_orphaned_only,\n+        exclude_cfgs=exclude_cfgs,\n         limit=limit,\n     )\n     termx, termy = get_terminal_size()\n@@ -243,9 +255,8 @@ def json_serial(obj):\n     """JSON serializer for objects not serializable by default json code"""\n \n     if isinstance(obj, datetime.date):\n-        serial = obj.isoformat()\n-        return serial\n-    raise TypeError("Type not serializable")\n+        return obj.isoformat()\n+    raise TypeError("Type not serializable to JSON")\n \n \n def browser(\n@@ -253,6 +264,7 @@ def browser(\n     newer_only=False,\n     newer_orphaned_only=False,\n     limit=None,\n+    exclude_cfgs=[],\n     show_requiredby=False,\n     show_release_dates=False,\n     file=sys.stdout,\n@@ -263,6 +275,7 @@ def browser(\n         pkgsinfo,\n         newer_only=newer_only,\n         newer_orphaned_only=newer_orphaned_only,\n+        exclude_cfgs=exclude_cfgs,\n         limit=limit,\n     )\n     template = jenv.get_template("browser.jinja")\n@@ -273,13 +286,19 @@ def browser(\n \n \n def machine(\n-    pkgsinfo, newer_only=False, newer_orphaned_only=False, limit=None, file=sys.stdout\n+    pkgsinfo,\n+    newer_only=False,\n+    newer_orphaned_only=False,\n+    limit=None,\n+    file=sys.stdout,\n+    exclude_cfgs=[],\n ):\n     sys.stderr.write("\\nReport for machines\\n\\n")\n     data = builder(\n         pkgsinfo,\n         newer_only=newer_only,\n         newer_orphaned_only=newer_orphaned_only,\n+        exclude_cfgs=exclude_cfgs,\n         limit=limit,\n     )\n     print(json.dumps(data, indent=4, default=json_serial), file=file)\ndiff --git a/src/plone/versioncheck/script.py b/src/plone/versioncheck/script.py\nindex 0b15bfa..0fb977e 100644\n--- a/src/plone/versioncheck/script.py\n+++ b/src/plone/versioncheck/script.py\n@@ -80,7 +80,10 @@\n parser.add_argument(\n     "-e",\n     "--exclude-cfg",\n-    help="exclude in listing if cfg-filename globs the given expression",\n+    help=(\n+        "exclude in listing when cfg-filename pattern matches (fnmatch) the "\n+        "given expression"\n+    ),\n     action="append",\n )\n parser.add_argument(\n'

