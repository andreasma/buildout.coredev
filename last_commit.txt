Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-05-17T18:34:54+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/borg.localrole/commit/92856a19dc1cb60b9383a31f537029d63f357699

fix aq in localroles for py3

Files changed:
M borg/localrole/workspace.py

b'diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py\nindex c5b400c..3a69d37 100644\n--- a/borg/localrole/workspace.py\n+++ b/borg/localrole/workspace.py\n@@ -410,7 +410,7 @@ def _parent_chain(self, obj):\n                 raise StopIteration\n             new = aq_parent(aq_inner(obj))\n             # if the obj is a method we get the class\n-            obj = getattr(obj, \'im_self\', new)\n+            obj = getattr(obj, \'__self__\', new)\n \n     def _get_principal_ids(self, user):\n         """Returns a list of the ids of all involved security\n'

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-05-18T19:09:04+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/borg.localrole/commit/5df865f4842f35d710069a7fb248395582b159f6

fix setup_localrole_plugin for py3

Files changed:
M borg/localrole/utils.py

b'diff --git a/borg/localrole/utils.py b/borg/localrole/utils.py\nindex 17ce009..d69854e 100644\n--- a/borg/localrole/utils.py\n+++ b/borg/localrole/utils.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from __future__ import print_function\n from Acquisition import aq_base\n from borg.localrole.config import LOCALROLE_PLUGIN_NAME\n from borg.localrole.workspace import manage_addWorkspaceLocalRoleManager\n@@ -21,7 +22,7 @@ def setup_localrole_plugin(portal):\n         manage_addWorkspaceLocalRoleManager(uf, LOCALROLE_PLUGIN_NAME)\n         activatePluginInterfaces(portal, LOCALROLE_PLUGIN_NAME, out)\n     else:\n-        print >> out, "%s already installed" % LOCALROLE_PLUGIN_NAME\n+        print("%s already installed" % LOCALROLE_PLUGIN_NAME, file=out)\n \n     return out.getvalue()\n \n'

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-06-15T10:07:58+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/borg.localrole/commit/d58623f82eafaa63c4bf5f253684c25a90846bcd

fix tests in py3

Files changed:
M borg/localrole/factory_adapter.py
M borg/localrole/tests.py
M borg/localrole/workspace.py

b'diff --git a/borg/localrole/factory_adapter.py b/borg/localrole/factory_adapter.py\nindex 23e34af..da0c66b 100644\n--- a/borg/localrole/factory_adapter.py\n+++ b/borg/localrole/factory_adapter.py\n@@ -15,13 +15,14 @@ class FactoryTempFolderProvider(object):\n     the desired context::\n \n         >>> from zope.component import provideAdapter\n-        >>> from zope.interface import Interface, implements, directlyProvides\n+        >>> from zope.interface import Interface, implementer, directlyProvides\n         >>> from borg.localrole.workspace import WorkspaceLocalRoleManager\n         >>> rm = WorkspaceLocalRoleManager(\'rm\', \'A Role Manager\')\n \n         >>> from Acquisition import Implicit\n-        >>> class DummyObject(Implicit):\n-        ...     implements(Interface)\n+        >>> @implementer(Interface)\n+        ... class DummyObject(Implicit):\n+        ...     pass\n         >>> root = DummyObject()\n \n \n@@ -53,9 +54,8 @@ class FactoryTempFolderProvider(object):\n \n         >>> def getRolesInContext(user, context):\n         ...     return rm.getRolesInContext(user, context)\n-        >>> from new import instancemethod\n-        >>> user1.getRolesInContext = instancemethod(getRolesInContext, user1,\n-        ...                                          DummyUser)\n+        >>> from types import MethodType\n+        >>> user1.getRolesInContext = MethodType(getRolesInContext, user1)\n \n \n     We add special interface to our Folder which allows us to provide\ndiff --git a/borg/localrole/tests.py b/borg/localrole/tests.py\nindex 3c4cd14..49f0809 100644\n--- a/borg/localrole/tests.py\n+++ b/borg/localrole/tests.py\n@@ -8,6 +8,8 @@\n \n import borg.localrole\n import doctest\n+import re\n+import six\n import unittest\n \n \n@@ -45,6 +47,13 @@ def getRoles(self):\n         return ()\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub("set\\(\\[(.*?)\\]\\)", "{\\\\1}", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = [\n         layered(\n@@ -57,7 +66,8 @@ def test_suite():\n         layered(\n             doctest.DocTestSuite(\n                 borg.localrole.workspace,\n-                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE),\n+                checker=Py23DocChecker(),\n             ),\n             layer=zca.UNIT_TESTING\n         ),\ndiff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py\nindex 3a69d37..675110b 100644\n--- a/borg/localrole/workspace.py\n+++ b/borg/localrole/workspace.py\n@@ -56,9 +56,10 @@ def clra_cache_key(method, self, user, obj, object_roles):\n         To test we\'ll nee an adaptable object, a user and the method which\n         results\' we\'d like to cache:\n \n-          >>> from zope.interface import implements, Interface\n-          >>> class DummyObject(object):\n-          ...     implements(Interface)\n+          >>> from zope.interface import implementer, Interface\n+          >>> @implementer(Interface)\n+          ... class DummyObject(object):\n+          ...     pass\n           >>> obj = DummyObject()\n \n           >>> from borg.localrole.tests import DummyUser\n@@ -73,7 +74,7 @@ def clra_cache_key(method, self, user, obj, object_roles):\n           >>> clra_cache_key(fun, \'me\', john, obj, [\'foo\', \'bar\'])\n           Traceback (most recent call last):\n           ...\n-          DontCache\n+          plone.memoize.volatile.DontCache\n \n         So let\'s add one and try again.  Before we also need to mark it as\n         being annotatable, which normally happens elsewhere:\n@@ -190,7 +191,7 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         >>> rm.checkLocalRolesAllowed(user1, ob, [\'Bar\', \'Baz\']) is None\n         True\n         >>> rm.getAllLocalRolesInContext(ob)\n-        {\'bogus_user\': set([\'Foo\'])}\n+        {\'bogus_user\': {\'Foo\'}}\n \n \n     Multiple Role Providers\n@@ -224,7 +225,7 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         >>> rm.checkLocalRolesAllowed(user1, ob, [\'Bar\', \'Baz\']) is None\n         True\n         >>> rm.getAllLocalRolesInContext(ob)\n-        {\'bogus_user2\': set([\'Foo\', \'Baz\']), \'bogus_user\': set([\'Foo\'])}\n+        {\'bogus_user\': {\'Foo\'}, \'bogus_user2\': {\'Foo\', \'Baz\'}}\n \n     But our second user notices the change, note that even though two\n     of our local role providers grant the role \'Foo\', it is not duplicated::\n@@ -312,7 +313,7 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         >>> rm.checkLocalRolesAllowed(user1, next,  [\'Foo\', \'Baz\']) is None\n         True\n         >>> rm.getAllLocalRolesInContext(last)\n-        {\'bogus_user2\': set([\'Foo\', \'Baz\']), \'bogus_user\': set([\'Foo\', \'Bar\'])}\n+        {\'bogus_user\': {\'Foo\', \'Bar\'}, \'bogus_user2\': {\'Foo\', \'Baz\'}}\n \n     It\'s important to note, that roles are acquired only by\n     containment.  Additional wrapping cannot change the security on an\n'

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-06-27T00:01:40+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/9550abab1a97444a623e6bd494e0ec9158175a4c

InitializeClass was moved to AccessControl.class_init

Files changed:
M borg/localrole/workspace.py

b'diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py\nindex 675110b..966ef04 100644\n--- a/borg/localrole/workspace.py\n+++ b/borg/localrole/workspace.py\n@@ -3,7 +3,7 @@\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n # BBB interfaces, to be removed\n from borg.localrole.bbb.interfaces import IGroupAwareWorkspace\n from borg.localrole.bbb.interfaces import IWorkspace\n'

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-07-08T11:03:47+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/borg.localrole/commit/44122c8cce57df9c46137b9d200e6e1a271357ee

Fix exceptions match in doctests

Files changed:
M borg/localrole/tests.py

b'diff --git a/borg/localrole/tests.py b/borg/localrole/tests.py\nindex 49f0809..b659583 100644\n--- a/borg/localrole/tests.py\n+++ b/borg/localrole/tests.py\n@@ -51,6 +51,10 @@ class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n             got = re.sub("set\\(\\[(.*?)\\]\\)", "{\\\\1}", got)\n+            want = re.sub(\n+                \'plone.memoize.volatile.DontCache\',\n+                \'DontCache\', want\n+            )\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n'

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-07-08T11:06:33+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/borg.localrole/commit/87d165e360ac1d009aa657d1ee5385855fc7bad3

Fix dict comparison in tests

Files changed:
M borg/localrole/workspace.py

b"diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py\nindex 966ef04..8ec35dd 100644\n--- a/borg/localrole/workspace.py\n+++ b/borg/localrole/workspace.py\n@@ -224,8 +224,9 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         1\n         >>> rm.checkLocalRolesAllowed(user1, ob, ['Bar', 'Baz']) is None\n         True\n-        >>> rm.getAllLocalRolesInContext(ob)\n-        {'bogus_user': {'Foo'}, 'bogus_user2': {'Foo', 'Baz'}}\n+        >>> expected = {'bogus_user': {'Foo'}, 'bogus_user2': {'Foo', 'Baz'}}\n+        >>> rm.getAllLocalRolesInContext(ob) == expected\n+        True\n \n     But our second user notices the change, note that even though two\n     of our local role providers grant the role 'Foo', it is not duplicated::\n@@ -312,8 +313,9 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         1\n         >>> rm.checkLocalRolesAllowed(user1, next,  ['Foo', 'Baz']) is None\n         True\n-        >>> rm.getAllLocalRolesInContext(last)\n-        {'bogus_user': {'Foo', 'Bar'}, 'bogus_user2': {'Foo', 'Baz'}}\n+        >>> expected = {'bogus_user': {'Foo', 'Bar'}, 'bogus_user2': {'Foo', 'Baz'}}\n+        >>> rm.getAllLocalRolesInContext(last) == expected\n+        True\n \n     It's important to note, that roles are acquired only by\n     containment.  Additional wrapping cannot change the security on an\n"

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-07-08T11:15:43+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/borg.localrole/commit/f11485ec340281f4372ae027a9e7f31617142bf9

Do not expect a particular order for getRolesInContext

Files changed:
M borg/localrole/workspace.py

b"diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py\nindex 8ec35dd..9ee016a 100644\n--- a/borg/localrole/workspace.py\n+++ b/borg/localrole/workspace.py\n@@ -231,8 +231,8 @@ class WorkspaceLocalRoleManager(BasePlugin):\n     But our second user notices the change, note that even though two\n     of our local role providers grant the role 'Foo', it is not duplicated::\n \n-        >>> rm.getRolesInContext(user2, ob)\n-        ['Foo', 'Baz']\n+        >>> set(rm.getRolesInContext(user2, ob)) == {'Foo', 'Baz'}\n+        True\n         >>> rm.checkLocalRolesAllowed(user2, ob, ['Bar', 'Foo', 'Baz'])\n         1\n         >>> rm.checkLocalRolesAllowed(user2, ob, ['Bar', 'Baz'])\n@@ -289,19 +289,19 @@ class WorkspaceLocalRoleManager(BasePlugin):\n     SimpleLocalRoleProvider, and LessSimpleLocalRoleProvider, as well\n     as acquired from Adapter1 on 'next':\n \n-        >>> rm.getRolesInContext(user1, last)\n-        ['Foo', 'Bar']\n+        >>> set(rm.getRolesInContext(user1, last)) == {'Foo', 'Bar'}\n+        True\n \n-        >>> rm.getRolesInContext(user2, last)\n-        ['Foo', 'Baz']\n+        >>> set(rm.getRolesInContext(user2, last)) == {'Foo', 'Baz'}\n+        True\n \n     If we look at the parent, we get the same results, because the\n     SimpleLocalRoleProvider adapter also applies to the 'root'\n     object. However, if we enable local role blocking on 'next' we\n     won't see the roles from the 'root'::\n \n-        >>> rm.getRolesInContext(user1, next)\n-        ['Foo', 'Bar']\n+        >>> set(rm.getRolesInContext(user1, next)) == {'Foo', 'Bar'}\n+        True\n         >>> next.__ac_local_roles_block__ = True\n         >>> rm.getRolesInContext(user1, next)\n         ['Bar']\n@@ -325,16 +325,16 @@ class WorkspaceLocalRoleManager(BasePlugin):\n \n         >>> rm.getRolesInContext(user3, last)\n         ['Foo']\n-        >>> rm.getRolesInContext(user3, other)\n-        ['Foobar', 'Foo']\n+        >>> set(rm.getRolesInContext(user3, other)) == {'Foobar', 'Foo'}\n+        True\n         >>> rm.getRolesInContext(user3, last.__of__(other))\n         ['Foo']\n \n     It's also important that methods of objects yield the same local\n     roles as the objects would\n \n-        >>> rm.getRolesInContext(user3, other.stupid_method)\n-        ['Foobar', 'Foo']\n+        >>> set(rm.getRolesInContext(user3, other.stupid_method)) == {'Foobar', 'Foo'}\n+        True\n \n     Group Support\n     -------------\n@@ -353,8 +353,8 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         ...     roles = ('Foobar',)\n \n         >>> provideAdapter(Adapter3, adapts=(Interface,), name='group_adapter')\n-        >>> rm.getRolesInContext(user4, last)\n-        ['Foobar', 'Foo']\n+        >>> set(rm.getRolesInContext(user4, last)) == {'Foobar', 'Foo'}\n+        True\n \n \n     Wrong User Folder\n"

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-07-08T11:17:59+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/borg.localrole/commit/1931ff3849761acb65ac9ea65f6a08fe1f3e0232

Update changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 8fe3239..83224e1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Python 2 / 3 compatibility.\n+  [ale-rt, pbauer]\n \n \n 3.1.5 (2018-02-02)\n'

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-09-16T10:58:54+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/borg.localrole/commit/ef4cd203d67bb32716c48da657e0aa02dec94447

add classifiers

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 7b39b7d..16c719a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,12 +51,15 @@\n         'Framework :: Plone',\n         'Framework :: Plone :: 5.0',\n         'Framework :: Plone :: 5.1',\n+        'Framework :: Plone :: 5.2',\n         'Intended Audience :: Other Audience',\n         'Intended Audience :: System Administrators',\n         'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)',  # noqa\n         'Operating System :: OS Independent',\n         'Programming Language :: Python',\n         'Programming Language :: Python :: 2.7',\n+        'Programming Language :: Python :: 3.6',\n+        'Programming Language :: Python :: 3.7',\n         'Topic :: Software Development :: Libraries :: Python Modules',\n     ],\n )\n"

Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-09-16T10:59:34+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/borg.localrole/commit/1976179b458dcad95f0b138621f9f2a9410b29a8

Merge pull request #9 from plone/python3

Fix  setup_localrole_plugin and aq in localroles in Python 3

Files changed:
M CHANGES.rst
M borg/localrole/factory_adapter.py
M borg/localrole/tests.py
M borg/localrole/utils.py
M borg/localrole/workspace.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 8fe3239..83224e1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Python 2 / 3 compatibility.\n+  [ale-rt, pbauer]\n \n \n 3.1.5 (2018-02-02)\ndiff --git a/borg/localrole/factory_adapter.py b/borg/localrole/factory_adapter.py\nindex 23e34af..da0c66b 100644\n--- a/borg/localrole/factory_adapter.py\n+++ b/borg/localrole/factory_adapter.py\n@@ -15,13 +15,14 @@ class FactoryTempFolderProvider(object):\n     the desired context::\n \n         >>> from zope.component import provideAdapter\n-        >>> from zope.interface import Interface, implements, directlyProvides\n+        >>> from zope.interface import Interface, implementer, directlyProvides\n         >>> from borg.localrole.workspace import WorkspaceLocalRoleManager\n         >>> rm = WorkspaceLocalRoleManager(\'rm\', \'A Role Manager\')\n \n         >>> from Acquisition import Implicit\n-        >>> class DummyObject(Implicit):\n-        ...     implements(Interface)\n+        >>> @implementer(Interface)\n+        ... class DummyObject(Implicit):\n+        ...     pass\n         >>> root = DummyObject()\n \n \n@@ -53,9 +54,8 @@ class FactoryTempFolderProvider(object):\n \n         >>> def getRolesInContext(user, context):\n         ...     return rm.getRolesInContext(user, context)\n-        >>> from new import instancemethod\n-        >>> user1.getRolesInContext = instancemethod(getRolesInContext, user1,\n-        ...                                          DummyUser)\n+        >>> from types import MethodType\n+        >>> user1.getRolesInContext = MethodType(getRolesInContext, user1)\n \n \n     We add special interface to our Folder which allows us to provide\ndiff --git a/borg/localrole/tests.py b/borg/localrole/tests.py\nindex 3c4cd14..b659583 100644\n--- a/borg/localrole/tests.py\n+++ b/borg/localrole/tests.py\n@@ -8,6 +8,8 @@\n \n import borg.localrole\n import doctest\n+import re\n+import six\n import unittest\n \n \n@@ -45,6 +47,17 @@ def getRoles(self):\n         return ()\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub("set\\(\\[(.*?)\\]\\)", "{\\\\1}", got)\n+            want = re.sub(\n+                \'plone.memoize.volatile.DontCache\',\n+                \'DontCache\', want\n+            )\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = [\n         layered(\n@@ -57,7 +70,8 @@ def test_suite():\n         layered(\n             doctest.DocTestSuite(\n                 borg.localrole.workspace,\n-                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE),\n+                checker=Py23DocChecker(),\n             ),\n             layer=zca.UNIT_TESTING\n         ),\ndiff --git a/borg/localrole/utils.py b/borg/localrole/utils.py\nindex 17ce009..d69854e 100644\n--- a/borg/localrole/utils.py\n+++ b/borg/localrole/utils.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from __future__ import print_function\n from Acquisition import aq_base\n from borg.localrole.config import LOCALROLE_PLUGIN_NAME\n from borg.localrole.workspace import manage_addWorkspaceLocalRoleManager\n@@ -21,7 +22,7 @@ def setup_localrole_plugin(portal):\n         manage_addWorkspaceLocalRoleManager(uf, LOCALROLE_PLUGIN_NAME)\n         activatePluginInterfaces(portal, LOCALROLE_PLUGIN_NAME, out)\n     else:\n-        print >> out, "%s already installed" % LOCALROLE_PLUGIN_NAME\n+        print("%s already installed" % LOCALROLE_PLUGIN_NAME, file=out)\n \n     return out.getvalue()\n \ndiff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py\nindex c5b400c..9ee016a 100644\n--- a/borg/localrole/workspace.py\n+++ b/borg/localrole/workspace.py\n@@ -3,7 +3,7 @@\n from Acquisition import aq_get\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n # BBB interfaces, to be removed\n from borg.localrole.bbb.interfaces import IGroupAwareWorkspace\n from borg.localrole.bbb.interfaces import IWorkspace\n@@ -56,9 +56,10 @@ def clra_cache_key(method, self, user, obj, object_roles):\n         To test we\'ll nee an adaptable object, a user and the method which\n         results\' we\'d like to cache:\n \n-          >>> from zope.interface import implements, Interface\n-          >>> class DummyObject(object):\n-          ...     implements(Interface)\n+          >>> from zope.interface import implementer, Interface\n+          >>> @implementer(Interface)\n+          ... class DummyObject(object):\n+          ...     pass\n           >>> obj = DummyObject()\n \n           >>> from borg.localrole.tests import DummyUser\n@@ -73,7 +74,7 @@ def clra_cache_key(method, self, user, obj, object_roles):\n           >>> clra_cache_key(fun, \'me\', john, obj, [\'foo\', \'bar\'])\n           Traceback (most recent call last):\n           ...\n-          DontCache\n+          plone.memoize.volatile.DontCache\n \n         So let\'s add one and try again.  Before we also need to mark it as\n         being annotatable, which normally happens elsewhere:\n@@ -190,7 +191,7 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         >>> rm.checkLocalRolesAllowed(user1, ob, [\'Bar\', \'Baz\']) is None\n         True\n         >>> rm.getAllLocalRolesInContext(ob)\n-        {\'bogus_user\': set([\'Foo\'])}\n+        {\'bogus_user\': {\'Foo\'}}\n \n \n     Multiple Role Providers\n@@ -223,14 +224,15 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         1\n         >>> rm.checkLocalRolesAllowed(user1, ob, [\'Bar\', \'Baz\']) is None\n         True\n-        >>> rm.getAllLocalRolesInContext(ob)\n-        {\'bogus_user2\': set([\'Foo\', \'Baz\']), \'bogus_user\': set([\'Foo\'])}\n+        >>> expected = {\'bogus_user\': {\'Foo\'}, \'bogus_user2\': {\'Foo\', \'Baz\'}}\n+        >>> rm.getAllLocalRolesInContext(ob) == expected\n+        True\n \n     But our second user notices the change, note that even though two\n     of our local role providers grant the role \'Foo\', it is not duplicated::\n \n-        >>> rm.getRolesInContext(user2, ob)\n-        [\'Foo\', \'Baz\']\n+        >>> set(rm.getRolesInContext(user2, ob)) == {\'Foo\', \'Baz\'}\n+        True\n         >>> rm.checkLocalRolesAllowed(user2, ob, [\'Bar\', \'Foo\', \'Baz\'])\n         1\n         >>> rm.checkLocalRolesAllowed(user2, ob, [\'Bar\', \'Baz\'])\n@@ -287,19 +289,19 @@ class WorkspaceLocalRoleManager(BasePlugin):\n     SimpleLocalRoleProvider, and LessSimpleLocalRoleProvider, as well\n     as acquired from Adapter1 on \'next\':\n \n-        >>> rm.getRolesInContext(user1, last)\n-        [\'Foo\', \'Bar\']\n+        >>> set(rm.getRolesInContext(user1, last)) == {\'Foo\', \'Bar\'}\n+        True\n \n-        >>> rm.getRolesInContext(user2, last)\n-        [\'Foo\', \'Baz\']\n+        >>> set(rm.getRolesInContext(user2, last)) == {\'Foo\', \'Baz\'}\n+        True\n \n     If we look at the parent, we get the same results, because the\n     SimpleLocalRoleProvider adapter also applies to the \'root\'\n     object. However, if we enable local role blocking on \'next\' we\n     won\'t see the roles from the \'root\'::\n \n-        >>> rm.getRolesInContext(user1, next)\n-        [\'Foo\', \'Bar\']\n+        >>> set(rm.getRolesInContext(user1, next)) == {\'Foo\', \'Bar\'}\n+        True\n         >>> next.__ac_local_roles_block__ = True\n         >>> rm.getRolesInContext(user1, next)\n         [\'Bar\']\n@@ -311,8 +313,9 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         1\n         >>> rm.checkLocalRolesAllowed(user1, next,  [\'Foo\', \'Baz\']) is None\n         True\n-        >>> rm.getAllLocalRolesInContext(last)\n-        {\'bogus_user2\': set([\'Foo\', \'Baz\']), \'bogus_user\': set([\'Foo\', \'Bar\'])}\n+        >>> expected = {\'bogus_user\': {\'Foo\', \'Bar\'}, \'bogus_user2\': {\'Foo\', \'Baz\'}}\n+        >>> rm.getAllLocalRolesInContext(last) == expected\n+        True\n \n     It\'s important to note, that roles are acquired only by\n     containment.  Additional wrapping cannot change the security on an\n@@ -322,16 +325,16 @@ class WorkspaceLocalRoleManager(BasePlugin):\n \n         >>> rm.getRolesInContext(user3, last)\n         [\'Foo\']\n-        >>> rm.getRolesInContext(user3, other)\n-        [\'Foobar\', \'Foo\']\n+        >>> set(rm.getRolesInContext(user3, other)) == {\'Foobar\', \'Foo\'}\n+        True\n         >>> rm.getRolesInContext(user3, last.__of__(other))\n         [\'Foo\']\n \n     It\'s also important that methods of objects yield the same local\n     roles as the objects would\n \n-        >>> rm.getRolesInContext(user3, other.stupid_method)\n-        [\'Foobar\', \'Foo\']\n+        >>> set(rm.getRolesInContext(user3, other.stupid_method)) == {\'Foobar\', \'Foo\'}\n+        True\n \n     Group Support\n     -------------\n@@ -350,8 +353,8 @@ class WorkspaceLocalRoleManager(BasePlugin):\n         ...     roles = (\'Foobar\',)\n \n         >>> provideAdapter(Adapter3, adapts=(Interface,), name=\'group_adapter\')\n-        >>> rm.getRolesInContext(user4, last)\n-        [\'Foobar\', \'Foo\']\n+        >>> set(rm.getRolesInContext(user4, last)) == {\'Foobar\', \'Foo\'}\n+        True\n \n \n     Wrong User Folder\n@@ -410,7 +413,7 @@ def _parent_chain(self, obj):\n                 raise StopIteration\n             new = aq_parent(aq_inner(obj))\n             # if the obj is a method we get the class\n-            obj = getattr(obj, \'im_self\', new)\n+            obj = getattr(obj, \'__self__\', new)\n \n     def _get_principal_ids(self, user):\n         """Returns a list of the ids of all involved security\ndiff --git a/setup.py b/setup.py\nindex 7b39b7d..16c719a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,12 +51,15 @@\n         \'Framework :: Plone\',\n         \'Framework :: Plone :: 5.0\',\n         \'Framework :: Plone :: 5.1\',\n+        \'Framework :: Plone :: 5.2\',\n         \'Intended Audience :: Other Audience\',\n         \'Intended Audience :: System Administrators\',\n         \'License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\',  # noqa\n         \'Operating System :: OS Independent\',\n         \'Programming Language :: Python\',\n         \'Programming Language :: Python :: 2.7\',\n+        \'Programming Language :: Python :: 3.6\',\n+        \'Programming Language :: Python :: 3.7\',\n         \'Topic :: Software Development :: Libraries :: Python Modules\',\n     ],\n )\n'

