Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2019-10-08T22:39:01+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.querystring/commit/0c8992247dbcd57cd74c0d06bf4050ae68610e60

Integer criterions: try to convert all input to integers.

Most notably this did not happen for unicode on Python 2.
So a `u"42"` was passed as value to the catalog query, and this matched either all or nothing.

Fixes https://github.com/plone/plone.app.querystring/issues/93

Files changed:
A news/93.bugfix
M plone/app/querystring/queryparser.py
M plone/app/querystring/tests/testQueryParser.py

b'diff --git a/news/93.bugfix b/news/93.bugfix\nnew file mode 100644\nindex 0000000..2ca16cb\n--- /dev/null\n+++ b/news/93.bugfix\n@@ -0,0 +1,4 @@\n+Integer criterions: try to convert all input to integers.\n+Most notably this did not happen for unicode on Python 2.\n+So a ``u"42"`` was passed as value to the catalog query, and this matched either all or nothing.\n+[maurits]\ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex df3d8b2..1f28824 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -78,9 +78,15 @@ def _all(context, row):\n def _intEqual(context, row):\n     values = None\n     if type(row.values) is list:\n-        values = [int(v) for v in row.values]\n-    elif type(row.values) is str:\n-        values = int(row.values)\n+        try:\n+            values = [int(v) for v in row.values]\n+        except (ValueError, TypeError, AttributeError):\n+            pass\n+    elif not isinstance(row.values, int):\n+        try:\n+            values = int(row.values)\n+        except (ValueError, TypeError, AttributeError):\n+            pass\n     return {row.index: {\'query\': values, }}\n \n \n@@ -119,8 +125,11 @@ def _largerThan(context, row):\n \n def _intLargerThan(context, row):\n     value = None\n-    if type(row.values) is str:\n-        value = int(row.values)\n+    if not isinstance(row.values, int):\n+        try:\n+            value = int(row.values)\n+        except (ValueError, TypeError, AttributeError):\n+            pass\n     tmp = {row.index:\n            {\n                \'query\': value,\n@@ -142,8 +151,12 @@ def _lessThan(context, row):\n \n def _intLessThan(context, row):\n     value = None\n-    if type(row.values) is str:\n-        value = int(row.values)\n+    if not isinstance(row.values, int):\n+        try:\n+            value = int(row.values)\n+        except (ValueError, TypeError, AttributeError):\n+            # value = 0\n+            pass\n     tmp = {row.index:\n            {\n                \'query\': value,\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex cfe4263..767a87c 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -314,24 +314,66 @@ def test__equal(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intEqual(self):\n+        # bytes\n         data = Row(\n             index=\'modified\',\n             operator=\'_intEqual\',\n-            values=\'20\'\n+            values=b\'20\'\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20}}\n         self.assertEqual(parsed, expected)\n \n+        # list of bytes\n         data = Row(\n             index=\'modified\',\n             operator=\'_intEqual\',\n-            values=[\'20\', \'21\']\n+            values=[b\'20\', b\'21\']\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n         expected = {\'modified\': {\'query\': [20, 21]}}\n         self.assertEqual(parsed, expected)\n \n+        # text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intEqual\',\n+            values=u\'20\'\n+        )\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {\'modified\': {\'query\': 20}}\n+        self.assertEqual(parsed, expected)\n+\n+        # list of texts\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intEqual\',\n+            values=[u\'20\', u\'21\']\n+        )\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {\'modified\': {\'query\': [20, 21]}}\n+        self.assertEqual(parsed, expected)\n+\n+        # bad text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intEqual\',\n+            values=\'bad\'\n+        )\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {\'modified\': {\'query\': None}}\n+        self.assertEqual(parsed, expected)\n+\n+        # list of bad text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intEqual\',\n+            values=[b\'bad\', \'text\', u\'values\']\n+        )\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {\'modified\': {\'query\': None}}\n+        self.assertEqual(parsed, expected)\n+\n     def test__lessThan(self):\n         data = Row(\n             index=\'modified\',\n@@ -343,15 +385,36 @@ def test__lessThan(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intLessThan(self):\n+        # bytes\n         data = Row(\n             index=\'modified\',\n             operator=\'_intLessThan\',\n-            values=\'20\'\n+            values=b\'20\'\n         )\n         parsed = queryparser._intLessThan(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n         self.assertEqual(parsed, expected)\n \n+        # text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intLessThan\',\n+            values=u\'20\'\n+        )\n+        parsed = queryparser._intLessThan(MockSite(), data)\n+        expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n+        self.assertEqual(parsed, expected)\n+\n+        # bad value\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intLessThan\',\n+            values=\'bad\'\n+        )\n+        parsed = queryparser._intLessThan(MockSite(), data)\n+        expected = {\'modified\': {\'query\': None, \'range\': \'max\'}}\n+        self.assertEqual(parsed, expected)\n+\n     def test__largerThan(self):\n         data = Row(\n             index=\'modified\',\n@@ -363,15 +426,36 @@ def test__largerThan(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intLargerThan(self):\n+        # bytes\n         data = Row(\n             index=\'modified\',\n             operator=\'_intLargerThan\',\n-            values=\'20\'\n+            values=b\'20\'\n         )\n         parsed = queryparser._intLargerThan(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n         self.assertEqual(parsed, expected)\n \n+        # text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intLargerThan\',\n+            values=u\'20\'\n+        )\n+        parsed = queryparser._intLargerThan(MockSite(), data)\n+        expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n+        self.assertEqual(parsed, expected)\n+\n+        # bad value\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intLargerThan\',\n+            values=\'bad\'\n+        )\n+        parsed = queryparser._intLargerThan(MockSite(), data)\n+        expected = {\'modified\': {\'query\': None, \'range\': \'min\'}}\n+        self.assertEqual(parsed, expected)\n+\n     def test__currentUser(self):\n         # Anonymous user\n         u = MockUser()\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2019-10-09T11:05:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/98bf10fb9b593fb5623cf4a6488fc8b46017b003

Merge pull request #95 from plone/maurits/integer-criterion-issue-93-master

Integer criterions: try to convert all input to integers.

Files changed:
A news/93.bugfix
M plone/app/querystring/queryparser.py
M plone/app/querystring/tests/testQueryParser.py

b'diff --git a/news/93.bugfix b/news/93.bugfix\nnew file mode 100644\nindex 0000000..2ca16cb\n--- /dev/null\n+++ b/news/93.bugfix\n@@ -0,0 +1,4 @@\n+Integer criterions: try to convert all input to integers.\n+Most notably this did not happen for unicode on Python 2.\n+So a ``u"42"`` was passed as value to the catalog query, and this matched either all or nothing.\n+[maurits]\ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex df3d8b2..1f28824 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -78,9 +78,15 @@ def _all(context, row):\n def _intEqual(context, row):\n     values = None\n     if type(row.values) is list:\n-        values = [int(v) for v in row.values]\n-    elif type(row.values) is str:\n-        values = int(row.values)\n+        try:\n+            values = [int(v) for v in row.values]\n+        except (ValueError, TypeError, AttributeError):\n+            pass\n+    elif not isinstance(row.values, int):\n+        try:\n+            values = int(row.values)\n+        except (ValueError, TypeError, AttributeError):\n+            pass\n     return {row.index: {\'query\': values, }}\n \n \n@@ -119,8 +125,11 @@ def _largerThan(context, row):\n \n def _intLargerThan(context, row):\n     value = None\n-    if type(row.values) is str:\n-        value = int(row.values)\n+    if not isinstance(row.values, int):\n+        try:\n+            value = int(row.values)\n+        except (ValueError, TypeError, AttributeError):\n+            pass\n     tmp = {row.index:\n            {\n                \'query\': value,\n@@ -142,8 +151,12 @@ def _lessThan(context, row):\n \n def _intLessThan(context, row):\n     value = None\n-    if type(row.values) is str:\n-        value = int(row.values)\n+    if not isinstance(row.values, int):\n+        try:\n+            value = int(row.values)\n+        except (ValueError, TypeError, AttributeError):\n+            # value = 0\n+            pass\n     tmp = {row.index:\n            {\n                \'query\': value,\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex cfe4263..767a87c 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -314,24 +314,66 @@ def test__equal(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intEqual(self):\n+        # bytes\n         data = Row(\n             index=\'modified\',\n             operator=\'_intEqual\',\n-            values=\'20\'\n+            values=b\'20\'\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20}}\n         self.assertEqual(parsed, expected)\n \n+        # list of bytes\n         data = Row(\n             index=\'modified\',\n             operator=\'_intEqual\',\n-            values=[\'20\', \'21\']\n+            values=[b\'20\', b\'21\']\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n         expected = {\'modified\': {\'query\': [20, 21]}}\n         self.assertEqual(parsed, expected)\n \n+        # text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intEqual\',\n+            values=u\'20\'\n+        )\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {\'modified\': {\'query\': 20}}\n+        self.assertEqual(parsed, expected)\n+\n+        # list of texts\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intEqual\',\n+            values=[u\'20\', u\'21\']\n+        )\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {\'modified\': {\'query\': [20, 21]}}\n+        self.assertEqual(parsed, expected)\n+\n+        # bad text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intEqual\',\n+            values=\'bad\'\n+        )\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {\'modified\': {\'query\': None}}\n+        self.assertEqual(parsed, expected)\n+\n+        # list of bad text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intEqual\',\n+            values=[b\'bad\', \'text\', u\'values\']\n+        )\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {\'modified\': {\'query\': None}}\n+        self.assertEqual(parsed, expected)\n+\n     def test__lessThan(self):\n         data = Row(\n             index=\'modified\',\n@@ -343,15 +385,36 @@ def test__lessThan(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intLessThan(self):\n+        # bytes\n         data = Row(\n             index=\'modified\',\n             operator=\'_intLessThan\',\n-            values=\'20\'\n+            values=b\'20\'\n         )\n         parsed = queryparser._intLessThan(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n         self.assertEqual(parsed, expected)\n \n+        # text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intLessThan\',\n+            values=u\'20\'\n+        )\n+        parsed = queryparser._intLessThan(MockSite(), data)\n+        expected = {\'modified\': {\'query\': 20, \'range\': \'max\'}}\n+        self.assertEqual(parsed, expected)\n+\n+        # bad value\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intLessThan\',\n+            values=\'bad\'\n+        )\n+        parsed = queryparser._intLessThan(MockSite(), data)\n+        expected = {\'modified\': {\'query\': None, \'range\': \'max\'}}\n+        self.assertEqual(parsed, expected)\n+\n     def test__largerThan(self):\n         data = Row(\n             index=\'modified\',\n@@ -363,15 +426,36 @@ def test__largerThan(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intLargerThan(self):\n+        # bytes\n         data = Row(\n             index=\'modified\',\n             operator=\'_intLargerThan\',\n-            values=\'20\'\n+            values=b\'20\'\n         )\n         parsed = queryparser._intLargerThan(MockSite(), data)\n         expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n         self.assertEqual(parsed, expected)\n \n+        # text\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intLargerThan\',\n+            values=u\'20\'\n+        )\n+        parsed = queryparser._intLargerThan(MockSite(), data)\n+        expected = {\'modified\': {\'query\': 20, \'range\': \'min\'}}\n+        self.assertEqual(parsed, expected)\n+\n+        # bad value\n+        data = Row(\n+            index=\'modified\',\n+            operator=\'_intLargerThan\',\n+            values=\'bad\'\n+        )\n+        parsed = queryparser._intLargerThan(MockSite(), data)\n+        expected = {\'modified\': {\'query\': None, \'range\': \'min\'}}\n+        self.assertEqual(parsed, expected)\n+\n     def test__currentUser(self):\n         # Anonymous user\n         u = MockUser()\n'

