Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-04-29T00:30:10+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.subrequest/commit/12533d5c905097b1de4b97c3ed4ae0d7ffcccb98

fix imports without ZServer

Files changed:
M plone/subrequest/__init__.py

b'diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex 9d75fab..71be198 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -19,12 +19,16 @@\n from zope.site.hooks import setSite\n from ZPublisher.BaseRequest import RequestContainer\n from ZPublisher.mapply import mapply\n-from ZPublisher.Publish import dont_publish_class\n-from ZPublisher.Publish import missing_name\n \n import re\n import six\n \n+try:\n+    from ZPublisher.WSGIPublisher import dont_publish_class\n+    from ZPublisher.WSGIPublisher import missing_name\n+except ImportError:\n+    from ZPublisher.Publish import dont_publish_class\n+    from ZPublisher.Publish import missing_name\n \n try:\n     from plone.protect.auto import SAFE_WRITE_KEY\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-04-29T00:31:56+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.subrequest/commit/8837a2fbe465e2771c4946337e0270dfafe0e3d5

Do not encode on Python3

Files changed:
M plone/subrequest/__init__.py

b"diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex 71be198..62f2694 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -23,6 +23,7 @@\n import re\n import six\n \n+\n try:\n     from ZPublisher.WSGIPublisher import dont_publish_class\n     from ZPublisher.WSGIPublisher import missing_name\n@@ -77,7 +78,7 @@ class IDisableCSRFProtection(Interface):\n \n def subrequest(url, root=None, stdout=None, exception_handler=None):\n     assert url is not None, 'You must pass a url'\n-    if isinstance(url, six.text_type):\n+    if six.PY2 and isinstance(url, six.text_type):\n         url = url.encode('utf-8')\n     _, _, path, query, _ = urlsplit(url)\n     parent_request = getRequest()\n"

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-04-29T00:32:09+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.subrequest/commit/883092ca035db657a3c20b76dd9dd431a1cf97df

Changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 8b99b3e..cc02346 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,11 +10,13 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Fix importsi without ZServer\n+  [pbauer]\n \n Bug fixes:\n \n-- *add item here*\n+- More Python 3 compatibility\n+  [ale-rt]\n \n \n 1.8.5 (2018-01-30)\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-05-06T16:58:10-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.subrequest/commit/dc205e2433286f9dae0c95e3cc0da1b51c5f1354

remove hard test dependency on plone.app.blob

Files changed:
M plone/subrequest/testing.zcml
M plone/subrequest/tests.py
M setup.py

b'diff --git a/plone/subrequest/testing.zcml b/plone/subrequest/testing.zcml\nindex e259033..0871388 100644\n--- a/plone/subrequest/testing.zcml\n+++ b/plone/subrequest/testing.zcml\n@@ -72,6 +72,7 @@\n         for="*"\n         class="plone.subrequest.testing.BlobStreamIteratorView"\n         permission="zope.Public"\n+        zcml:condition="installed plone.app.blob"\n         />\n \n     <browser:defaultView\ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex d5667d6..787e637 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -11,6 +11,13 @@\n import manuel.testing\n import unittest\n \n+try:\n+    from plone.app.blob.iterators import BlobStreamIterator\n+except ImportError:\n+    HAS_BLOBSTREAM_ITERATOR = False\n+else:\n+    HAS_BLOBSTREAM_ITERATOR = True\n+\n \n def traverse(url):\n     request = getRequest()\n@@ -242,6 +249,7 @@ def test_filestream_iterator(self):\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n         self.assertEqual(response.getBody(), \'Test\')\n \n+    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR)\n     def test_blobstream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n         from ZServer.HTTPResponse import ZServerHTTPResponse\ndiff --git a/setup.py b/setup.py\nindex 7b9ba97..4c7c987 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -52,12 +52,13 @@\n             \'five.localsitemanager\',\n             \'manuel\',\n             \'plone.testing [z2]\',\n+        ],\n+        \'archetypes\': [\n             \'plone.app.blob\',\n-\n             # see https://github.com/plone/plone.app.blob/issues/19\n             \'Products.MimetypesRegistry\',\n-            ],\n-        },\n+        ],\n+    },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n     target = plone\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-05-06T17:01:07-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.subrequest/commit/ed36317ab180a0a6a7a25d2a01ab170d954b7a46

changelog

Files changed:
M CHANGES.rst
M plone/subrequest/tests.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex cc02346..c539904 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -18,6 +18,9 @@ Bug fixes:\n - More Python 3 compatibility\n   [ale-rt]\n \n+- Make test dependency on Archetypes optional.\n+  [davisagli]\n+\n \n 1.8.5 (2018-01-30)\n ------------------\ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex 787e637..d3c90d0 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -249,7 +249,7 @@ def test_filestream_iterator(self):\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n         self.assertEqual(response.getBody(), 'Test')\n \n-    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR)\n+    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, 'requires Archetypes')\n     def test_blobstream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n         from ZServer.HTTPResponse import ZServerHTTPResponse\n"

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-05-07T10:37:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/b223c42a952c1a4b1dbbf2c37f0c049ee6fd2949

Merge pull request #18 from plone/optional-archetypes

remove hard test dependency on plone.app.blob

Files changed:
M CHANGES.rst
M plone/subrequest/testing.zcml
M plone/subrequest/tests.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex cc02346..c539904 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -18,6 +18,9 @@ Bug fixes:\n - More Python 3 compatibility\n   [ale-rt]\n \n+- Make test dependency on Archetypes optional.\n+  [davisagli]\n+\n \n 1.8.5 (2018-01-30)\n ------------------\ndiff --git a/plone/subrequest/testing.zcml b/plone/subrequest/testing.zcml\nindex e259033..0871388 100644\n--- a/plone/subrequest/testing.zcml\n+++ b/plone/subrequest/testing.zcml\n@@ -72,6 +72,7 @@\n         for="*"\n         class="plone.subrequest.testing.BlobStreamIteratorView"\n         permission="zope.Public"\n+        zcml:condition="installed plone.app.blob"\n         />\n \n     <browser:defaultView\ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex d5667d6..d3c90d0 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -11,6 +11,13 @@\n import manuel.testing\n import unittest\n \n+try:\n+    from plone.app.blob.iterators import BlobStreamIterator\n+except ImportError:\n+    HAS_BLOBSTREAM_ITERATOR = False\n+else:\n+    HAS_BLOBSTREAM_ITERATOR = True\n+\n \n def traverse(url):\n     request = getRequest()\n@@ -242,6 +249,7 @@ def test_filestream_iterator(self):\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n         self.assertEqual(response.getBody(), \'Test\')\n \n+    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, \'requires Archetypes\')\n     def test_blobstream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n         from ZServer.HTTPResponse import ZServerHTTPResponse\ndiff --git a/setup.py b/setup.py\nindex 7b9ba97..4c7c987 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -52,12 +52,13 @@\n             \'five.localsitemanager\',\n             \'manuel\',\n             \'plone.testing [z2]\',\n+        ],\n+        \'archetypes\': [\n             \'plone.app.blob\',\n-\n             # see https://github.com/plone/plone.app.blob/issues/19\n             \'Products.MimetypesRegistry\',\n-            ],\n-        },\n+        ],\n+    },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n     target = plone\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-05-23T16:28:13+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.subrequest/commit/fb04a4c7c798cbeb795b78c0d904af1f031b99da

fix zcml

Files changed:
M plone/subrequest/testing.zcml

b'diff --git a/plone/subrequest/testing.zcml b/plone/subrequest/testing.zcml\nindex 0871388..d63d512 100644\n--- a/plone/subrequest/testing.zcml\n+++ b/plone/subrequest/testing.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:zcml="http://namespaces.zope.org/zcml">\n \n     <include package="plone.subrequest" />\n \n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-06-12T21:47:12+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.subrequest/commit/b901f248d32fc0d703fe52b8a7f364b41b9479bf

cosmetics

Files changed:
M plone/subrequest/subresponse.py

b'diff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex abb1b2f..ce0d4e3 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -13,7 +13,7 @@ class BlobStreamIterator:\n class SubResponse(HTTPResponse):\n \n     def setBody(self, body, title=\'\', is_error=0, **kw):\n-        """ Accept either a stream iterator or a string as the body """\n+        """Accept either a stream iterator or a string as the body."""\n         if not IStreamIterator.providedBy(body):\n             return HTTPResponse.setBody(self, body, title, is_error, **kw)\n         assert not self._wrote\n@@ -36,13 +36,13 @@ def __str__(self):\n         return str(self.body)\n \n     def outputBody(self):\n-        """Output the response body"""\n+        """Output the response body."""\n         if not self._wrote:\n             self.stdout.write(self.body)\n             self._wrote = 1\n \n     def getBody(self):\n-        """ Return the body, however it was written. """\n+        """Return the body, however it was written."""\n         if not self._wrote:\n             return self.body\n         stdout = self.stdout\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-06-13T01:09:01+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.subrequest/commit/7cf7d13d11d572db5e4f29f635e65bd2ee08ac18

Even more Python 3 compatibility.
Fixes all tests.
While at it I found two possible Python 3(.6) bugs:

- https://bugs.python.org/issue33846

- https://bugs.python.org/issue33848

Files changed:
M CHANGES.rst
M plone/subrequest/__init__.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M plone/subrequest/usage.txt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c539904..9505597 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,8 +15,8 @@ New features:\n \n Bug fixes:\n \n-- More Python 3 compatibility\n-  [ale-rt]\n+- More Python 3 compatibility.\n+  [ale-rt, thet]\n \n - Make test dependency on Archetypes optional.\n   [davisagli]\ndiff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex 62f2694..c9118aa 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -78,8 +78,8 @@ class IDisableCSRFProtection(Interface):\n \n def subrequest(url, root=None, stdout=None, exception_handler=None):\n     assert url is not None, \'You must pass a url\'\n-    if six.PY2 and isinstance(url, six.text_type):\n-        url = url.encode(\'utf-8\')\n+    if isinstance(url, six.binary_type):\n+        url = url.decode(\'utf-8\')\n     _, _, path, query, _ = urlsplit(url)\n     parent_request = getRequest()\n     assert parent_request is not None, \\\n@@ -109,10 +109,12 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n     else:\n         try:\n             parent_url = parent_request[\'URL\']\n-            if isinstance(parent_url, six.text_type):\n+            if isinstance(parent_url, six.binary_type):\n                 parent_url = parent_url.encode(\'utf-8\')\n             # extra is the hidden part of the url, e.g. a default view\n-            extra = unquote(parent_url[len(parent_request[\'ACTUAL_URL\']):])\n+            extra = unquote(\n+                parent_url[len(parent_request[\'ACTUAL_URL\']):]\n+            )\n         except KeyError:\n             extra = \'\'\n         here = parent_request[\'PATH_INFO\'] + extra\ndiff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex ce0d4e3..220f6e4 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -2,6 +2,9 @@\n from ZPublisher.HTTPResponse import HTTPResponse\n from ZPublisher.Iterators import IStreamIterator\n \n+import io\n+import six\n+\n \n try:\n     from plone.app.blob.iterators import BlobStreamIterator\n@@ -38,7 +41,14 @@ def __str__(self):\n     def outputBody(self):\n         """Output the response body."""\n         if not self._wrote:\n-            self.stdout.write(self.body)\n+            body = self.body\n+            if isinstance(self.stdout, io.BufferedIOBase)\\\n+                    and isinstance(body, six.text_type):\n+                body = body.encode(\'utf-8\')\n+            elif isinstance(self.stdout, io.TextIOBase)\\\n+                    and isinstance(body, six.binary_type):\n+                body = body.decode(\'utf-8\')\n+            self.stdout.write(body)\n             self._wrote = 1\n \n     def getBody(self):\ndiff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py\nindex 87b710e..e954ef8 100644\n--- a/plone/subrequest/testing.py\n+++ b/plone/subrequest/testing.py\n@@ -8,6 +8,8 @@\n from Products.Five.browser import BrowserView\n from zope.globalrequest import setRequest\n \n+import six\n+\n \n class CustomException(Exception):\n     """Custom exception"""\n@@ -16,7 +18,7 @@ class CustomException(Exception):\n class CustomExceptionHandler(BrowserView):\n     def __call__(self):\n         self.request.response.setStatus(500)\n-        return "Custom exception occurred: {0:s}".format(self.context)\n+        return "Custom exception occurred: {0}".format(self.context)\n \n \n class CookieView(BrowserView):\n@@ -40,8 +42,6 @@ class URLView(BrowserView):\n \n     def __call__(self):\n         url = self.context.absolute_url()\n-        # The absolute url is expected to be an encoded string, not unicode.\n-        assert isinstance(url, str)\n         return url\n \n \ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex d3c90d0..5b63fad 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -11,6 +11,15 @@\n import manuel.testing\n import unittest\n \n+\n+try:\n+    from ZServer.HTTPResponse import ZServerHTTPResponse\n+except ImportError:\n+    HAS_ZSERVER = False\n+else:\n+    HAS_ZSERVER = True\n+\n+\n try:\n     from plone.app.blob.iterators import BlobStreamIterator\n except ImportError:\n@@ -76,14 +85,14 @@ def test_absolute(self):\n         response = subrequest(\'/folder1/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://nohost/folder1\'\n+            b\'http://nohost/folder1\'\n         )\n \n     def test_absolute_query(self):\n         response = subrequest(\'/folder1/folder1A?url=/folder2/folder2A/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://nohost/folder2/folder2A\'\n+            b\'http://nohost/folder2/folder2A\'\n         )\n \n     def test_relative(self):\n@@ -91,14 +100,14 @@ def test_relative(self):\n         # /folder1 resolves to /folder1/@@test\n         self.assertEqual(\n             response.body,\n-            \'http://nohost/folder1/folder1B\'\n+            b\'http://nohost/folder1/folder1B\'\n         )\n \n     def test_root(self):\n         response = subrequest(\'/\')\n         self.assertEqual(\n             response.body,\n-            \'Root: http://nohost\'\n+            b\'Root: http://nohost\'\n         )\n \n     def test_virtual_hosting(self):\n@@ -106,7 +115,7 @@ def test_virtual_hosting(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n+            b\'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_unicode(self):\n@@ -114,7 +123,7 @@ def test_virtual_hosting_unicode(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n+            b\'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_relative(self):\n@@ -122,7 +131,7 @@ def test_virtual_hosting_relative(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_not_found(self):\n@@ -136,7 +145,7 @@ def test_virtual_host_root(self):\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_with_root(self):\n@@ -147,7 +156,7 @@ def test_virtual_host_root_with_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n+            b\'http://example.org/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n         )\n \n     def test_virtual_host_space(self):\n@@ -161,7 +170,7 @@ def test_virtual_host_space(self):\n         response = subrequest(\'/folder2A/@@url\', root=app.folder2)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/folder2A\'\n+            b\'http://example.org/folder2A\'\n         )\n \n     def test_virtual_host_root_at_root(self):\n@@ -173,7 +182,7 @@ def test_virtual_host_root_at_root(self):\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_at_root_trailing(self):\n@@ -185,7 +194,7 @@ def test_virtual_host_root_at_root_trailing(self):\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_with_root_double_slash(self):\n@@ -198,7 +207,7 @@ def test_virtual_host_with_root_double_slash(self):\n         response = subrequest(\'/folder1B/@@url\', root=root)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/folder1/folder1B\'\n+            b\'http://example.org/fizz/folder1/folder1B\'\n         )\n \n     def test_subrequest_root(self):\n@@ -206,7 +215,7 @@ def test_subrequest_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            \'http://nohost/folder1/folder1A/folder1Ai\'\n+            b\'http://nohost/folder1/folder1A/folder1Ai\'\n         )\n \n     def test_site(self):\n@@ -219,29 +228,29 @@ def test_site(self):\n \n     def test_parameter(self):\n         response = subrequest(\'/folder1/@@parameter?foo=bar\')\n-        self.assertTrue(\'foo\' in response.body)\n+        self.assertTrue(b\'foo\' in response.body)\n \n     def test_cookies(self):\n         request = getRequest()\n         request.response.setCookie(\'cookie_name\', \'cookie_value\')\n         response = subrequest(\'/folder1/@@parameter\')\n-        self.assertTrue("\'cookie_name\'" in response.body)\n+        self.assertTrue(b"\'cookie_name\'" in response.body)\n \n     def test_subrequest_cookies(self):\n         response = subrequest(\'/folder1/@@test?url=/folder1/cookie\')\n         self.assertTrue(\'cookie_name\' in response.cookies)\n \n+    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     def test_stream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n-        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@stream\')\n         self.assertEqual(response.getBody(), \'hello\')\n \n+    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     def test_filestream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n-        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@filestream\')\n@@ -249,10 +258,10 @@ def test_filestream_iterator(self):\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n         self.assertEqual(response.getBody(), \'Test\')\n \n+    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, \'requires Archetypes\')\n     def test_blobstream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n-        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@blobstream\')\n@@ -266,9 +275,9 @@ def test_other_variables(self):\n         request[\'VIRTUAL_URL\'] = \'parent\'\n         request[\'URL9\'] = \'parent\'\n         response = subrequest(\'/folder1/@@parameter\')\n-        self.assertTrue("\'foo\'" in response.body)\n-        self.assertFalse("\'URL9\'" in response.body)\n-        self.assertFalse("\'VIRTUAL_URL\'" in response.body)\n+        self.assertTrue(b"\'foo\'" in response.body)\n+        self.assertFalse(b"\'URL9\'" in response.body)\n+        self.assertFalse(b"\'VIRTUAL_URL\'" in response.body)\n \n \n def test_suite():\ndiff --git a/plone/subrequest/usage.txt b/plone/subrequest/usage.txt\nindex e3dab4d..ea1281d 100644\n--- a/plone/subrequest/usage.txt\n+++ b/plone/subrequest/usage.txt\n@@ -11,11 +11,12 @@ Call ``subrequest(url)``, it returns a response object.\n     >>> from plone.subrequest import subrequest\n     >>> response = subrequest(\'/folder1/@@url\')\n     >>> response.getBody()\n-    \'http://nohost/folder1\'\n+    b\'http://nohost/folder1\'\n \n .. test-case: response-write\n \n ``response.getBody()`` also works for code that calls ``response.write(data)``.\n+This one returns a text/non-byte value.\n \n     >>> response = subrequest(\'/@@response-write\')\n     >>> response.getBody()\n@@ -40,6 +41,7 @@ Some code may call ``response.write(data)``.\n In which case you may access response.stdout as file.\n \n     >>> response.stdout.seek(0, 0)\n+    0\n     >>> list(response.stdout)\n     [\'Some data.\\n\', \'Some more data.\\n\']\n \n@@ -63,6 +65,7 @@ Use ``response.outputBody()`` to ensure the body may be accessed as a file.\n     >>> response._wrote\n     1\n     >>> response.stdout.seek(0, 0)\n+    0\n     >>> list(response.stdout)\n     [\'http://nohost/folder1\']\n \n@@ -76,7 +79,7 @@ Relative paths are resolved relative to the parent request\'s location:\n     >>> request = traverse(\'/folder1/@@test\')\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n-    \'http://nohost/folder1/folder1A\'\n+    b\'http://nohost/folder1/folder1A\'\n \n .. test-case: relative-default-view\n \n@@ -87,7 +90,7 @@ This takes account of default view\'s url.\n     True\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n-    \'http://nohost/folder1/folder1A\'\n+    b\'http://nohost/folder1/folder1A\'\n \n Virtual hosting\n ---------------\n@@ -99,7 +102,7 @@ When virtual hosting is used, absolute paths are traversed from the virtual host\n     >>> request = traverse(\'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\')\n     >>> response = subrequest(\'/folder1A/@@url\')\n     >>> response.getBody()\n-    \'http://example.org/folder1A\'\n+    b\'http://example.org/folder1A\'\n \n Specifying the root\n -------------------\n@@ -111,7 +114,7 @@ You may also set the root object explicitly\n     >>> app = layer[\'app\']\n     >>> response = subrequest(\'/folder1A/@@url\', root=app.folder1)\n     >>> response.getBody()\n-    \'http://nohost/folder1/folder1A\'\n+    b\'http://nohost/folder1/folder1A\'\n \n Error responses\n ---------------\n@@ -138,7 +141,7 @@ Or might raise an error rendered by a custom error view.\n     >>> response.status\n     500\n     >>> response.body\n-    \'Custom exception occurred: A custom error\'\n+    b\'Custom exception occurred: A custom error\'\n \n .. test-case: status-ok\n \n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-06-13T14:24:22+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.subrequest/commit/8982ad4568afc24a6d7ea5f435b7125ce1c2bddc

py2 compat of doctests, cleanup and use nohost domain everywhere

Files changed:
A plone/subrequest/usage.rst
M plone/subrequest/tests.py
D plone/subrequest/usage.txt

b'diff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex 5b63fad..21eff3d 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -9,6 +9,10 @@\n import manuel.doctest\n import manuel.testcase\n import manuel.testing\n+\n+import doctest\n+import re\n+import six\n import unittest\n \n \n@@ -37,7 +41,7 @@ def traverse(url):\n \n \n VH_TPL = (\n-    \'/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot\'\n+    \'/VirtualHostBase/http/nohost:80/{0}/VirtualHostRoot\'\n     \'/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}\'\n )\n NOHOST_VH_TPL = \'http://nohost\' + VH_TPL\n@@ -57,7 +61,7 @@ def test_virtual_hosting(self):\n         parts = (\'folder1\', \'folder1A/@@url\')\n         expect = \'folder1A\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -65,7 +69,7 @@ def test_virtual_hosting_relative(self):\n         parts = (\'folder1\', \'folder1A?url=folder1Ai/@@url\')\n         expect = \'folder1A/folder1Ai\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -73,7 +77,7 @@ def test_virtual_hosting_absolute(self):\n         parts = (\'folder1\', \'folder1A?url=/folder1B/@@url\')\n         expect = \'folder1B\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -115,7 +119,7 @@ def test_virtual_hosting(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_unicode(self):\n@@ -123,7 +127,7 @@ def test_virtual_hosting_unicode(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_relative(self):\n@@ -131,7 +135,7 @@ def test_virtual_hosting_relative(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_not_found(self):\n@@ -145,7 +149,7 @@ def test_virtual_host_root(self):\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_with_root(self):\n@@ -156,13 +160,13 @@ def test_virtual_host_root_with_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n         )\n \n     def test_virtual_host_space(self):\n         parts = (\'folder2\', \'folder2A/folder2Ai space/@@url\')\n         url = (\n-            \'/VirtualHostBase/http/example.org:80/\'\n+            \'/VirtualHostBase/http/nohost:80/\'\n             \'{0}/VirtualHostRoot/{1}\'.format(*parts)\n         )\n         traverse(url)\n@@ -170,36 +174,36 @@ def test_virtual_host_space(self):\n         response = subrequest(\'/folder2A/@@url\', root=app.folder2)\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/folder2A\'\n+            b\'http://nohost/folder2A\'\n         )\n \n     def test_virtual_host_root_at_root(self):\n         url = (\n-            \'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n             \'_vh_fizz/_vh_buzz/_vh_fizzbuzz\'\n         )\n         traverse(url)\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_at_root_trailing(self):\n         url = (\n-            \'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n             \'_vh_fizz/_vh_buzz/_vh_fizzbuzz/\'\n         )\n         traverse(url)\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_with_root_double_slash(self):\n         url = (\n-            \'/VirtualHostBase/http/example.org:80/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/nohost:80/VirtualHostRoot/\'\n             \'_vh_fizz/folder1/folder2//folder2A\'\n         )\n         traverse(url)\n@@ -207,7 +211,7 @@ def test_virtual_host_with_root_double_slash(self):\n         response = subrequest(\'/folder1B/@@url\', root=root)\n         self.assertEqual(\n             response.body,\n-            b\'http://example.org/fizz/folder1/folder1B\'\n+            b\'http://nohost/fizz/folder1/folder1B\'\n         )\n \n     def test_subrequest_root(self):\n@@ -280,15 +284,22 @@ def test_other_variables(self):\n         self.assertFalse(b"\'VIRTUAL_URL\'" in response.body)\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = unittest.defaultTestLoader.loadTestsFromName(__name__)\n-    m = manuel.doctest.Manuel()\n+    m = manuel.doctest.Manuel(checker=Py23DocChecker())\n     m += manuel.testcase.MarkerManuel()\n     doctests = manuel.testing.TestSuite(\n         m,\n-        \'usage.txt\',\n+        \'usage.rst\',\n         globs=dict(subrequest=subrequest, traverse=traverse)\n-    )\n+     )\n     # Set the layer on the manuel doctests for now\n     for test in doctests:\n         test.layer = INTEGRATION_TESTING\ndiff --git a/plone/subrequest/usage.txt b/plone/subrequest/usage.rst\nsimilarity index 95%\nrename from plone/subrequest/usage.txt\nrename to plone/subrequest/usage.rst\nindex ea1281d..d43acb3 100644\n--- a/plone/subrequest/usage.txt\n+++ b/plone/subrequest/usage.rst\n@@ -76,6 +76,7 @@ Relative paths\n \n Relative paths are resolved relative to the parent request\'s location:\n \n+    >>> from plone.subrequest.tests import traverse\n     >>> request = traverse(\'/folder1/@@test\')\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n@@ -99,10 +100,10 @@ Virtual hosting\n \n When virtual hosting is used, absolute paths are traversed from the virtual host root.\n \n-    >>> request = traverse(\'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\')\n+    >>> request = traverse(\'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\')\n     >>> response = subrequest(\'/folder1A/@@url\')\n     >>> response.getBody()\n-    b\'http://example.org/folder1A\'\n+    b\'http://nohost/folder1A\'\n \n Specifying the root\n -------------------\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-06-13T15:20:14+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.subrequest/commit/471397bfdf435cd1d79f02826e3ad2e564f2a1f0

fix setup.py

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 4c7c987..e6004cf 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,7 +13,7 @@\n     description=\'Subrequests for Zope2\',\n     long_description=(\n         open("README.rst").read() + "\\n\\n" +\n-        open(os.path.join(\'plone\', \'subrequest\', \'usage.txt\')).read() +\n+        open(os.path.join(\'plone\', \'subrequest\', \'usage.rst\')).read() +\n         "\\n\\n" +\n         open("CHANGES.rst").read()),\n     classifiers=[\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-06-13T17:19:18+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.subrequest/commit/d34987e7ec051354237ff110e58af531262d23d2

Py2/3 fix: Py2 returns None when seeking (even though otherwise documented), Py3 returns the new position. Return None

Files changed:
M plone/subrequest/usage.rst

b"diff --git a/plone/subrequest/usage.rst b/plone/subrequest/usage.rst\nindex d43acb3..c9fc9e7 100644\n--- a/plone/subrequest/usage.rst\n+++ b/plone/subrequest/usage.rst\n@@ -40,7 +40,7 @@ Some code may call ``response.write(data)``.\n \n In which case you may access response.stdout as file.\n \n-    >>> response.stdout.seek(0, 0)\n+    >>> response.stdout.seek(0, 0) or 0  # Py2 returns None, Py3 returns new position\n     0\n     >>> list(response.stdout)\n     ['Some data.\\n', 'Some more data.\\n']\n@@ -64,7 +64,7 @@ Use ``response.outputBody()`` to ensure the body may be accessed as a file.\n     >>> response.outputBody()\n     >>> response._wrote\n     1\n-    >>> response.stdout.seek(0, 0)\n+    >>> response.stdout.seek(0, 0) or 0  # Py2 returns None, Py3 returns new position\n     0\n     >>> list(response.stdout)\n     ['http://nohost/folder1']\n"

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-08-17T10:58:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/1a728d4262fa84cb82aa179d2de5e9740a53196b

update troove classifier

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex e6004cf..882c914 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -27,8 +27,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.6",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n     ],\n     keywords=\'plone\',\n     author=\'Plone Foundation\',\n'

Repository: plone.subrequest


Branch: refs/heads/master
Date: 2018-08-17T10:58:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/5f325fdeade20807fdb8cbb36a0f70740a58e442

Merge pull request #19 from plone/python3

Python 3

Files changed:
A plone/subrequest/usage.rst
M CHANGES.rst
M plone/subrequest/__init__.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/testing.zcml
M plone/subrequest/tests.py
M setup.py
D plone/subrequest/usage.txt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 8b99b3e..9505597 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,11 +10,16 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Fix importsi without ZServer\n+  [pbauer]\n \n Bug fixes:\n \n-- *add item here*\n+- More Python 3 compatibility.\n+  [ale-rt, thet]\n+\n+- Make test dependency on Archetypes optional.\n+  [davisagli]\n \n \n 1.8.5 (2018-01-30)\ndiff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex 9d75fab..c9118aa 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -19,13 +19,18 @@\n from zope.site.hooks import setSite\n from ZPublisher.BaseRequest import RequestContainer\n from ZPublisher.mapply import mapply\n-from ZPublisher.Publish import dont_publish_class\n-from ZPublisher.Publish import missing_name\n \n import re\n import six\n \n \n+try:\n+    from ZPublisher.WSGIPublisher import dont_publish_class\n+    from ZPublisher.WSGIPublisher import missing_name\n+except ImportError:\n+    from ZPublisher.Publish import dont_publish_class\n+    from ZPublisher.Publish import missing_name\n+\n try:\n     from plone.protect.auto import SAFE_WRITE_KEY\n     from plone.protect.interfaces import IDisableCSRFProtection\n@@ -73,8 +78,8 @@ class IDisableCSRFProtection(Interface):\n \n def subrequest(url, root=None, stdout=None, exception_handler=None):\n     assert url is not None, \'You must pass a url\'\n-    if isinstance(url, six.text_type):\n-        url = url.encode(\'utf-8\')\n+    if isinstance(url, six.binary_type):\n+        url = url.decode(\'utf-8\')\n     _, _, path, query, _ = urlsplit(url)\n     parent_request = getRequest()\n     assert parent_request is not None, \\\n@@ -104,10 +109,12 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n     else:\n         try:\n             parent_url = parent_request[\'URL\']\n-            if isinstance(parent_url, six.text_type):\n+            if isinstance(parent_url, six.binary_type):\n                 parent_url = parent_url.encode(\'utf-8\')\n             # extra is the hidden part of the url, e.g. a default view\n-            extra = unquote(parent_url[len(parent_request[\'ACTUAL_URL\']):])\n+            extra = unquote(\n+                parent_url[len(parent_request[\'ACTUAL_URL\']):]\n+            )\n         except KeyError:\n             extra = \'\'\n         here = parent_request[\'PATH_INFO\'] + extra\ndiff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex abb1b2f..220f6e4 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -2,6 +2,9 @@\n from ZPublisher.HTTPResponse import HTTPResponse\n from ZPublisher.Iterators import IStreamIterator\n \n+import io\n+import six\n+\n \n try:\n     from plone.app.blob.iterators import BlobStreamIterator\n@@ -13,7 +16,7 @@ class BlobStreamIterator:\n class SubResponse(HTTPResponse):\n \n     def setBody(self, body, title=\'\', is_error=0, **kw):\n-        """ Accept either a stream iterator or a string as the body """\n+        """Accept either a stream iterator or a string as the body."""\n         if not IStreamIterator.providedBy(body):\n             return HTTPResponse.setBody(self, body, title, is_error, **kw)\n         assert not self._wrote\n@@ -36,13 +39,20 @@ def __str__(self):\n         return str(self.body)\n \n     def outputBody(self):\n-        """Output the response body"""\n+        """Output the response body."""\n         if not self._wrote:\n-            self.stdout.write(self.body)\n+            body = self.body\n+            if isinstance(self.stdout, io.BufferedIOBase)\\\n+                    and isinstance(body, six.text_type):\n+                body = body.encode(\'utf-8\')\n+            elif isinstance(self.stdout, io.TextIOBase)\\\n+                    and isinstance(body, six.binary_type):\n+                body = body.decode(\'utf-8\')\n+            self.stdout.write(body)\n             self._wrote = 1\n \n     def getBody(self):\n-        """ Return the body, however it was written. """\n+        """Return the body, however it was written."""\n         if not self._wrote:\n             return self.body\n         stdout = self.stdout\ndiff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py\nindex 87b710e..e954ef8 100644\n--- a/plone/subrequest/testing.py\n+++ b/plone/subrequest/testing.py\n@@ -8,6 +8,8 @@\n from Products.Five.browser import BrowserView\n from zope.globalrequest import setRequest\n \n+import six\n+\n \n class CustomException(Exception):\n     """Custom exception"""\n@@ -16,7 +18,7 @@ class CustomException(Exception):\n class CustomExceptionHandler(BrowserView):\n     def __call__(self):\n         self.request.response.setStatus(500)\n-        return "Custom exception occurred: {0:s}".format(self.context)\n+        return "Custom exception occurred: {0}".format(self.context)\n \n \n class CookieView(BrowserView):\n@@ -40,8 +42,6 @@ class URLView(BrowserView):\n \n     def __call__(self):\n         url = self.context.absolute_url()\n-        # The absolute url is expected to be an encoded string, not unicode.\n-        assert isinstance(url, str)\n         return url\n \n \ndiff --git a/plone/subrequest/testing.zcml b/plone/subrequest/testing.zcml\nindex e259033..d63d512 100644\n--- a/plone/subrequest/testing.zcml\n+++ b/plone/subrequest/testing.zcml\n@@ -1,6 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:browser="http://namespaces.zope.org/browser">\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:zcml="http://namespaces.zope.org/zcml">\n \n     <include package="plone.subrequest" />\n \n@@ -72,6 +73,7 @@\n         for="*"\n         class="plone.subrequest.testing.BlobStreamIteratorView"\n         permission="zope.Public"\n+        zcml:condition="installed plone.app.blob"\n         />\n \n     <browser:defaultView\ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex d5667d6..21eff3d 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -9,9 +9,29 @@\n import manuel.doctest\n import manuel.testcase\n import manuel.testing\n+\n+import doctest\n+import re\n+import six\n import unittest\n \n \n+try:\n+    from ZServer.HTTPResponse import ZServerHTTPResponse\n+except ImportError:\n+    HAS_ZSERVER = False\n+else:\n+    HAS_ZSERVER = True\n+\n+\n+try:\n+    from plone.app.blob.iterators import BlobStreamIterator\n+except ImportError:\n+    HAS_BLOBSTREAM_ITERATOR = False\n+else:\n+    HAS_BLOBSTREAM_ITERATOR = True\n+\n+\n def traverse(url):\n     request = getRequest()\n     request.traverse(url)\n@@ -21,7 +41,7 @@ def traverse(url):\n \n \n VH_TPL = (\n-    \'/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot\'\n+    \'/VirtualHostBase/http/nohost:80/{0}/VirtualHostRoot\'\n     \'/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}\'\n )\n NOHOST_VH_TPL = \'http://nohost\' + VH_TPL\n@@ -41,7 +61,7 @@ def test_virtual_hosting(self):\n         parts = (\'folder1\', \'folder1A/@@url\')\n         expect = \'folder1A\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -49,7 +69,7 @@ def test_virtual_hosting_relative(self):\n         parts = (\'folder1\', \'folder1A?url=folder1Ai/@@url\')\n         expect = \'folder1A/folder1Ai\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -57,7 +77,7 @@ def test_virtual_hosting_absolute(self):\n         parts = (\'folder1\', \'folder1A?url=/folder1B/@@url\')\n         expect = \'folder1B\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -69,14 +89,14 @@ def test_absolute(self):\n         response = subrequest(\'/folder1/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://nohost/folder1\'\n+            b\'http://nohost/folder1\'\n         )\n \n     def test_absolute_query(self):\n         response = subrequest(\'/folder1/folder1A?url=/folder2/folder2A/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://nohost/folder2/folder2A\'\n+            b\'http://nohost/folder2/folder2A\'\n         )\n \n     def test_relative(self):\n@@ -84,14 +104,14 @@ def test_relative(self):\n         # /folder1 resolves to /folder1/@@test\n         self.assertEqual(\n             response.body,\n-            \'http://nohost/folder1/folder1B\'\n+            b\'http://nohost/folder1/folder1B\'\n         )\n \n     def test_root(self):\n         response = subrequest(\'/\')\n         self.assertEqual(\n             response.body,\n-            \'Root: http://nohost\'\n+            b\'Root: http://nohost\'\n         )\n \n     def test_virtual_hosting(self):\n@@ -99,7 +119,7 @@ def test_virtual_hosting(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_unicode(self):\n@@ -107,7 +127,7 @@ def test_virtual_hosting_unicode(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_relative(self):\n@@ -115,7 +135,7 @@ def test_virtual_hosting_relative(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_not_found(self):\n@@ -129,7 +149,7 @@ def test_virtual_host_root(self):\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_with_root(self):\n@@ -140,13 +160,13 @@ def test_virtual_host_root_with_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n         )\n \n     def test_virtual_host_space(self):\n         parts = (\'folder2\', \'folder2A/folder2Ai space/@@url\')\n         url = (\n-            \'/VirtualHostBase/http/example.org:80/\'\n+            \'/VirtualHostBase/http/nohost:80/\'\n             \'{0}/VirtualHostRoot/{1}\'.format(*parts)\n         )\n         traverse(url)\n@@ -154,36 +174,36 @@ def test_virtual_host_space(self):\n         response = subrequest(\'/folder2A/@@url\', root=app.folder2)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/folder2A\'\n+            b\'http://nohost/folder2A\'\n         )\n \n     def test_virtual_host_root_at_root(self):\n         url = (\n-            \'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n             \'_vh_fizz/_vh_buzz/_vh_fizzbuzz\'\n         )\n         traverse(url)\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_at_root_trailing(self):\n         url = (\n-            \'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n             \'_vh_fizz/_vh_buzz/_vh_fizzbuzz/\'\n         )\n         traverse(url)\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n+            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_with_root_double_slash(self):\n         url = (\n-            \'/VirtualHostBase/http/example.org:80/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/nohost:80/VirtualHostRoot/\'\n             \'_vh_fizz/folder1/folder2//folder2A\'\n         )\n         traverse(url)\n@@ -191,7 +211,7 @@ def test_virtual_host_with_root_double_slash(self):\n         response = subrequest(\'/folder1B/@@url\', root=root)\n         self.assertEqual(\n             response.body,\n-            \'http://example.org/fizz/folder1/folder1B\'\n+            b\'http://nohost/fizz/folder1/folder1B\'\n         )\n \n     def test_subrequest_root(self):\n@@ -199,7 +219,7 @@ def test_subrequest_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            \'http://nohost/folder1/folder1A/folder1Ai\'\n+            b\'http://nohost/folder1/folder1A/folder1Ai\'\n         )\n \n     def test_site(self):\n@@ -212,29 +232,29 @@ def test_site(self):\n \n     def test_parameter(self):\n         response = subrequest(\'/folder1/@@parameter?foo=bar\')\n-        self.assertTrue(\'foo\' in response.body)\n+        self.assertTrue(b\'foo\' in response.body)\n \n     def test_cookies(self):\n         request = getRequest()\n         request.response.setCookie(\'cookie_name\', \'cookie_value\')\n         response = subrequest(\'/folder1/@@parameter\')\n-        self.assertTrue("\'cookie_name\'" in response.body)\n+        self.assertTrue(b"\'cookie_name\'" in response.body)\n \n     def test_subrequest_cookies(self):\n         response = subrequest(\'/folder1/@@test?url=/folder1/cookie\')\n         self.assertTrue(\'cookie_name\' in response.cookies)\n \n+    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     def test_stream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n-        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@stream\')\n         self.assertEqual(response.getBody(), \'hello\')\n \n+    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     def test_filestream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n-        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@filestream\')\n@@ -242,9 +262,10 @@ def test_filestream_iterator(self):\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n         self.assertEqual(response.getBody(), \'Test\')\n \n+    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n+    @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, \'requires Archetypes\')\n     def test_blobstream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n-        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@blobstream\')\n@@ -258,20 +279,27 @@ def test_other_variables(self):\n         request[\'VIRTUAL_URL\'] = \'parent\'\n         request[\'URL9\'] = \'parent\'\n         response = subrequest(\'/folder1/@@parameter\')\n-        self.assertTrue("\'foo\'" in response.body)\n-        self.assertFalse("\'URL9\'" in response.body)\n-        self.assertFalse("\'VIRTUAL_URL\'" in response.body)\n+        self.assertTrue(b"\'foo\'" in response.body)\n+        self.assertFalse(b"\'URL9\'" in response.body)\n+        self.assertFalse(b"\'VIRTUAL_URL\'" in response.body)\n+\n+\n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n     suite = unittest.defaultTestLoader.loadTestsFromName(__name__)\n-    m = manuel.doctest.Manuel()\n+    m = manuel.doctest.Manuel(checker=Py23DocChecker())\n     m += manuel.testcase.MarkerManuel()\n     doctests = manuel.testing.TestSuite(\n         m,\n-        \'usage.txt\',\n+        \'usage.rst\',\n         globs=dict(subrequest=subrequest, traverse=traverse)\n-    )\n+     )\n     # Set the layer on the manuel doctests for now\n     for test in doctests:\n         test.layer = INTEGRATION_TESTING\ndiff --git a/plone/subrequest/usage.txt b/plone/subrequest/usage.rst\nsimilarity index 84%\nrename from plone/subrequest/usage.txt\nrename to plone/subrequest/usage.rst\nindex e3dab4d..c9fc9e7 100644\n--- a/plone/subrequest/usage.txt\n+++ b/plone/subrequest/usage.rst\n@@ -11,11 +11,12 @@ Call ``subrequest(url)``, it returns a response object.\n     >>> from plone.subrequest import subrequest\n     >>> response = subrequest(\'/folder1/@@url\')\n     >>> response.getBody()\n-    \'http://nohost/folder1\'\n+    b\'http://nohost/folder1\'\n \n .. test-case: response-write\n \n ``response.getBody()`` also works for code that calls ``response.write(data)``.\n+This one returns a text/non-byte value.\n \n     >>> response = subrequest(\'/@@response-write\')\n     >>> response.getBody()\n@@ -39,7 +40,8 @@ Some code may call ``response.write(data)``.\n \n In which case you may access response.stdout as file.\n \n-    >>> response.stdout.seek(0, 0)\n+    >>> response.stdout.seek(0, 0) or 0  # Py2 returns None, Py3 returns new position\n+    0\n     >>> list(response.stdout)\n     [\'Some data.\\n\', \'Some more data.\\n\']\n \n@@ -62,7 +64,8 @@ Use ``response.outputBody()`` to ensure the body may be accessed as a file.\n     >>> response.outputBody()\n     >>> response._wrote\n     1\n-    >>> response.stdout.seek(0, 0)\n+    >>> response.stdout.seek(0, 0) or 0  # Py2 returns None, Py3 returns new position\n+    0\n     >>> list(response.stdout)\n     [\'http://nohost/folder1\']\n \n@@ -73,10 +76,11 @@ Relative paths\n \n Relative paths are resolved relative to the parent request\'s location:\n \n+    >>> from plone.subrequest.tests import traverse\n     >>> request = traverse(\'/folder1/@@test\')\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n-    \'http://nohost/folder1/folder1A\'\n+    b\'http://nohost/folder1/folder1A\'\n \n .. test-case: relative-default-view\n \n@@ -87,7 +91,7 @@ This takes account of default view\'s url.\n     True\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n-    \'http://nohost/folder1/folder1A\'\n+    b\'http://nohost/folder1/folder1A\'\n \n Virtual hosting\n ---------------\n@@ -96,10 +100,10 @@ Virtual hosting\n \n When virtual hosting is used, absolute paths are traversed from the virtual host root.\n \n-    >>> request = traverse(\'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\')\n+    >>> request = traverse(\'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\')\n     >>> response = subrequest(\'/folder1A/@@url\')\n     >>> response.getBody()\n-    \'http://example.org/folder1A\'\n+    b\'http://nohost/folder1A\'\n \n Specifying the root\n -------------------\n@@ -111,7 +115,7 @@ You may also set the root object explicitly\n     >>> app = layer[\'app\']\n     >>> response = subrequest(\'/folder1A/@@url\', root=app.folder1)\n     >>> response.getBody()\n-    \'http://nohost/folder1/folder1A\'\n+    b\'http://nohost/folder1/folder1A\'\n \n Error responses\n ---------------\n@@ -138,7 +142,7 @@ Or might raise an error rendered by a custom error view.\n     >>> response.status\n     500\n     >>> response.body\n-    \'Custom exception occurred: A custom error\'\n+    b\'Custom exception occurred: A custom error\'\n \n .. test-case: status-ok\n \ndiff --git a/setup.py b/setup.py\nindex 7b9ba97..882c914 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,7 +13,7 @@\n     description=\'Subrequests for Zope2\',\n     long_description=(\n         open("README.rst").read() + "\\n\\n" +\n-        open(os.path.join(\'plone\', \'subrequest\', \'usage.txt\')).read() +\n+        open(os.path.join(\'plone\', \'subrequest\', \'usage.rst\')).read() +\n         "\\n\\n" +\n         open("CHANGES.rst").read()),\n     classifiers=[\n@@ -27,8 +27,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.6",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n     ],\n     keywords=\'plone\',\n     author=\'Plone Foundation\',\n@@ -52,12 +52,13 @@\n             \'five.localsitemanager\',\n             \'manuel\',\n             \'plone.testing [z2]\',\n+        ],\n+        \'archetypes\': [\n             \'plone.app.blob\',\n-\n             # see https://github.com/plone/plone.app.blob/issues/19\n             \'Products.MimetypesRegistry\',\n-            ],\n-        },\n+        ],\n+    },\n     entry_points="""\n     [z3c.autoinclude.plugin]\n     target = plone\n'

