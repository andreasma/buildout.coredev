Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-02-05T14:07:46+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/fcb0253d2e5237e98ab1f159f77d23db2906b525

fix Deprecation-Warnings in tests

Files changed:
M buildout.cfg
M plone/dexterity/tests/test_fti.py

b'diff --git a/buildout.cfg b/buildout.cfg\nindex 7046f06..a903152 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -8,3 +8,4 @@ develop = .\n \n [versions]\n plone.dexterity =\n+zope.interface = 4.7.1\n\\ No newline at end of file\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex bc0c751..aa302c8 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -2,6 +2,7 @@\n from .case import MockTestCase\n from mock import Mock\n from plone.dexterity import utils\n+from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.fti import DexterityFTIModificationDescription\n@@ -73,7 +74,7 @@ def test_lookupSchema_with_dynamic_schema(self):\n         portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n         self.mock_utility(portal, ISiteRoot)\n \n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, ITestSchema)\n \n         self.assertEqual(ITestSchema, fti.lookupSchema())\n@@ -89,7 +90,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         fti.schema = \'model.wont.be.imported\'\n         portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n         self.mock_utility(portal, ISiteRoot)\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, ITestSchema)\n         self.assertEqual(ITestSchema, fti.lookupSchema())\n         delattr(plone.dexterity.schema.generated, schemaName)\n@@ -458,7 +459,7 @@ def test_components_registered_on_add(self):\n             None,\n             queryUtility(IDexterityFTI, name=portal_type)\n         )\n-        self.assertNotEquals(None, queryUtility(IFactory, name=portal_type))\n+        self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_not_registered_on_add_if_exist(self):\n         portal_type = u"testtype"\n@@ -653,7 +654,7 @@ class IBlank(Interface):\n             pass\n \n         # Set source interface\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n \n         # Sync this with schema\n@@ -689,7 +690,7 @@ class IBlank(Interface):\n             pass\n \n         # Set source interface\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n \n         # Sync this with schema\n@@ -732,7 +733,7 @@ def bases(self, schemaName, tree):\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # Set source interface\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n         original = getattr(plone.dexterity.schema.generated, schemaName)\n         self.assertNotIn(INew, original.__bases__)\n@@ -776,7 +777,7 @@ class INew(Interface):\n         assert not fti.hasDynamicSchema\n \n         # Set source for dynamic FTI - should not be used\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n \n         # Sync should not happen now\n'

