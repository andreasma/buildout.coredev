Repository: plone.rfc822


Branch: refs/heads/master
Date: 2017-05-04T09:42:45+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rfc822/commit/bf142c5b6905a1d86dc9f15e05cca229fd49ef9b

start porting to python3

Files changed:
M plone/rfc822/_utils.py

diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py
index 5753e44..4f7ee01 100644
--- a/plone/rfc822/_utils.py
+++ b/plone/rfc822/_utils.py
@@ -6,12 +6,14 @@
 See interfaces.py for details.
 """
 
-from cStringIO import StringIO
-from email.Generator import Generator
-from email.Header import decode_header
-from email.Header import Header
-# Note: We use capitalised module names to be compatible with Python 2.4
-from email.Message import Message
+try:
+    from io import StringIO
+except ImportError:
+    from cStringIO import StringIO
+from email.generator import Generator
+from email.header import decode_header
+from email.header import Header
+from email.message import Message
 from plone.rfc822.interfaces import IFieldMarshaler
 from plone.rfc822.interfaces import IPrimaryField
 from zope.component import queryMultiAdapter
@@ -54,7 +56,7 @@ def constructMessage(context, fields, charset='utf-8'):
 
         try:
             value = marshaler.marshal(charset, primary=False)
-        except ValueError, e:
+        except ValueError as e:
             LOG.debug("Marshaling of %s for %s failed: %s" %
                       (name, repr(context), str(e)))
             continue
@@ -224,7 +226,7 @@ def initializeObject(context, fields, message, defaultCharset='utf-8'):
                 contentType=contentType,
                 primary=False
             )
-        except ValueError, e:
+        except ValueError as e:
             # interface allows demarshal() to raise ValueError to indicate
             # marshalling failed
             LOG.debug("Demarshalling of %s for %s failed: %s" %
@@ -263,7 +265,7 @@ def initializeObject(context, fields, message, defaultCharset='utf-8'):
                         contentType=contentType,
                         primary=True
                     )
-                except ValueError, e:
+                except ValueError as e:
                     # interface allows demarshal() to raise ValueError to
                     # indicate marshalling failed
                     LOG.debug("Demarshalling of %s for %s failed: %s" %
@@ -313,7 +315,7 @@ def initializeObject(context, fields, message, defaultCharset='utf-8'):
                         contentType=contentType,
                         primary=True
                     )
-                except ValueError, e:
+                except ValueError as e:
                     # interface allows demarshal() to raise ValueError to
                     # indicate marshalling failed
                     LOG.debug("Demarshalling of %s for %s failed: %s" %


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2017-05-05T13:44:36+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rfc822/commit/8370430a943d710da3f29c7e0efa0488cb354c3e

More python 3 compatibility (no logic yet)

Files changed:
M plone/rfc822/__init__.py
M plone/rfc822/_utils.py
M plone/rfc822/defaultfields.py
M plone/rfc822/fields.rst
M plone/rfc822/message.rst
M plone/rfc822/supermodel.rst
M plone/rfc822/tests.py

diff --git a/plone/rfc822/__init__.py b/plone/rfc822/__init__.py
index 98157cb..d42d4dd 100644
--- a/plone/rfc822/__init__.py
+++ b/plone/rfc822/__init__.py
@@ -1,4 +1,13 @@
 # -*- coding: utf-8 -*-
+import sys
+PY3 = sys.version_info[0] == 3
+if PY3:
+    text_type = str
+    binary_type = bytes
+else:
+    text_type = unicode
+    binary_type = str
+
 from plone.rfc822._utils import constructMessage
 from plone.rfc822._utils import constructMessageFromSchema
 from plone.rfc822._utils import constructMessageFromSchemata
diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py
index 4f7ee01..57f1c12 100644
--- a/plone/rfc822/_utils.py
+++ b/plone/rfc822/_utils.py
@@ -14,6 +14,8 @@
 from email.header import decode_header
 from email.header import Header
 from email.message import Message
+from plone.rfc822 import PY3
+from plone.rfc822 import binary_type
 from plone.rfc822.interfaces import IFieldMarshaler
 from plone.rfc822.interfaces import IPrimaryField
 from zope.component import queryMultiAdapter
@@ -22,6 +24,15 @@
 import logging
 
 
+def b(s):
+    if PY3:
+        if not isinstance(s, str):
+            return s
+        return bytes(s, encoding='latin-1')
+    else:
+        return s
+
+
 LOG = logging.getLogger('plone.rfc822')
 
 
diff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py
index c775b9d..95c1ce6 100644
--- a/plone/rfc822/defaultfields.py
+++ b/plone/rfc822/defaultfields.py
@@ -117,7 +117,7 @@ def _query(self, default=None):
     def _set(self, value):
         try:
             self.field.set(self.instance, value)
-        except TypeError, e:
+        except TypeError as e:
             raise ValueError(e)
 
 
@@ -225,7 +225,7 @@ def decode(
         unicodeValue = value.decode(charset)
         try:
             return dateutil.parser.parse(unicodeValue)
-        except Exception, e:
+        except Exception as e:
             raise ValueError(e)
 
 
@@ -257,7 +257,7 @@ def decode(
         unicodeValue = value.decode(charset)
         try:
             return dateutil.parser.parse(unicodeValue).date()
-        except Exception, e:
+        except Exception as e:
             raise ValueError(e)
 
 
@@ -292,7 +292,7 @@ def decode(
         try:
             days, seconds, microseconds = [int(v) for v in value.split(":")]
             return datetime.timedelta(days, seconds, microseconds)
-        except Exception, e:
+        except Exception as e:
             raise ValueError(e)
 
 
diff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst
index afb5617..944ce41 100644
--- a/plone/rfc822/fields.rst
+++ b/plone/rfc822/fields.rst
@@ -18,7 +18,11 @@ First, we load the package's configuration:
     ... </configure>
     ... """
 
-    >>> from StringIO import StringIO
+    >>> from plone.rfc822 import PY3
+    >>> if PY3:
+    ...     from io import StringIO
+    ... else:
+    ...     from StringIO import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
@@ -60,11 +64,14 @@ we support.
 
 This interface is implemented by a the following class:
 
-    >>> from zope.interface import implements
+    >>> from zope.interface import implementer
     >>> import datetime
     >>> from decimal import Decimal
-    >>> class TestContent(object):
-    ...     implements(ITestContent)
+    >>> import sys
+    >>> if sys.version_info > (3,):
+    ...     long = int
+    >>> @implementer(ITestContent)
+    ... class TestContent(object):
     ...     _text = u"text\xd8"
     ...     _text2 = u"text" # ascii safe
     ...     _textLine = u"textline\xd8"
@@ -79,7 +86,7 @@ This interface is implemented by a the following class:
     ...     _id = 'some.id'
     ...     _dottedName = 'dotted.name'
     ...     _bool = True
-    ...     _int = -10l
+    ...     _int = long(-10)
     ...     _float = 0.3
     ...     _decimal = Decimal("5.0")
     ...     _choice1 = u"two"
@@ -113,7 +120,7 @@ Text
 ----
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_text']), IFieldMarshaler)
-    >>> marshaler.marshal()
+    >>> marshaler.marshal().decode('utf-8')
     'text\xc3\x98'
     >>> marshaler.decode('text\xc3\x98')
     u'text\xd8'
diff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst
index d44a256..15d46ce 100644
--- a/plone/rfc822/message.rst
+++ b/plone/rfc822/message.rst
@@ -21,7 +21,11 @@ annotations, which we will use later in this test.
     ... </configure>
     ... """
 
-    >>> from StringIO import StringIO
+    >>> from plone.rfc822 import PY3
+    >>> if PY3:
+    ...     from io import StringIO
+    ... else:
+    ...     from StringIO import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
@@ -54,9 +58,9 @@ Constructing a message
 Let's now say we have an instance providing this interface, which we want to
 marshal to a message.
 
-    >>> from zope.interface import implements
-    >>> class TestContent(object):
-    ...     implements(ITestContent)
+    >>> from zope.interface import implementer
+    >>> @implementer(ITestContent)
+    ... class TestContent(object):
     ...     title = u""
     ...     description = u""
     ...     body = u""
@@ -76,9 +80,9 @@ We could create a message form this instance and schema like this:
 The output looks like this:
 
     >>> from plone.rfc822 import renderMessage
-    >>> print renderMessage(msg)
+    >>> print(renderMessage(msg))
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
+    description: =?utf-8?q?Test_description...with_a_newline?=
     emptyfield: 
     Content-Type: text/plain; charset="utf-8"
     <BLANKLINE>
@@ -101,9 +105,9 @@ encoding.
 If we want to use a different content type, we could set it explicitly:
 
     >>> msg.set_type('text/html')
-    >>> print renderMessage(msg)
+    >>> print(renderMessage(msg))
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
+    description: =?utf-8?q?Test_description...with_a_newline?=
     emptyfield: 
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
@@ -153,9 +157,9 @@ above), or have the marshaler check the field name.
 Let's now try again:
 
     >>> msg = constructMessageFromSchema(content, ITestContent)
-    >>> print renderMessage(msg)
+    >>> print(renderMessage(msg))
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
+    description: =?utf-8?q?Test_description...with_a_newline?=
     emptyfield: 
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
@@ -250,8 +254,8 @@ in an annotation adapter:
 The annotation storage would look like this:
 
     >>> from persistent import Persistent
-    >>> class PersonalDetailsAnnotation(Persistent):
-    ...     implements(IPersonalDetails)
+    >>> @implementer(IPersonalDetails)
+    ... class PersonalDetailsAnnotation(Persistent):
     ...     adapts(ITestContent)
     ...     
     ...     def __init__(self):
@@ -298,9 +302,9 @@ primary fields, we will get a multipart message with two attachments.
     >>> from plone.rfc822 import constructMessageFromSchemata
     >>> msg = constructMessageFromSchemata(content, (ITestContent, IPersonalDetails,))
     >>> msgString = renderMessage(msg)
-    >>> print msgString
+    >>> print(msgString)
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
+    description: =?utf-8?q?Test_description...with_a_newline?=
     emptyfield: 
     description: <p>My description</p>
     currentAge: 21
@@ -371,19 +375,19 @@ own multipart message. To do that, we would simply use the
     >>> mainMessage = constructMessageFromSchema(content, ITestContent)
     >>> personalDetailsMessage = constructMessageFromSchema(content, IPersonalDetails)
 
-    >>> from email.MIMEMultipart import MIMEMultipart
+    >>> from email.mime.multipart import MIMEMultipart
     >>> envelope = MIMEMultipart()
     >>> envelope.attach(mainMessage)
     >>> envelope.attach(personalDetailsMessage)
 
     >>> envelopeString = renderMessage(envelope)
-    >>> print envelopeString
+    >>> print(envelopeString)
     Content-Type: multipart/mixed; boundary="===============...=="
     MIME-Version: 1.0
     <BLANKLINE>
     --===============...==
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
+    description: =?utf-8?q?Test_description...with_a_newline?=
     emptyfield: 
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
@@ -418,8 +422,9 @@ filename and content type:
     ...     contentType = schema.ASCIILine(title=u"MIME type")
     ...     filename = schema.ASCIILine(title=u"Filename")
 
-    >>> class FileValue(object):
-    ...     implements(IFileValue)
+    >>> @implementer(IFileValue)
+    ... class FileValue(object):
+    ...
     ...     def __init__(self, data, contentType, filename):
     ...         self.data = data
     ...         self.contentType = contentType
@@ -431,8 +436,8 @@ Suppose we had a custom field type to represent this:
     >>> class IFileField(IObject):
     ...     pass
 
-    >>> class FileField(schema.Object):
-    ...     implements(IFileField)
+    >>> @implementer(IFileField)
+    ... class FileField(schema.Object):
     ...     schema = IFileValue
     ...     def __init__(self, **kw):
     ...         if 'schema' in kw:
@@ -448,7 +453,7 @@ We can register a field marshaler for this field which will do the following:
 * Encode the payload using base64
 
     >>> from plone.rfc822.interfaces import IFieldMarshaler
-    >>> from email.Encoders import encode_base64
+    >>> from email.encoders import encode_base64
 
     >>> from zope.component import adapts
     >>> from plone.rfc822.defaultfields import BaseFieldMarshaler
@@ -501,8 +506,8 @@ fields.
     ...     file1 = FileField()
     ...     file2 = FileField()
 
-    >>> class FileContent(object):
-    ...     implements(IFileContent)
+    >>> @implementer(IFileContent)
+    ... class FileContent(object):
     ...     file1 = None
     ...     file2 = None
 
@@ -515,7 +520,7 @@ what happens when we attempt to construct a message from this schema.
 
     >>> from plone.rfc822 import constructMessageFromSchema
     >>> message = constructMessageFromSchema(fileContent, IFileContent)
-    >>> print renderMessage(message)
+    >>> print(renderMessage(message))
     <BLANKLINE>
     <BLANKLINE>
 
@@ -564,7 +569,7 @@ In this case, we should get a multipart document with two payloads.
     >>> alsoProvides(IFileContent['file2'], IPrimaryField)
     >>> message = constructMessageFromSchema(fileContent, IFileContent)
     >>> messageBody = renderMessage(message)
-    >>> print messageBody # doctest: +ELLIPSIS
+    >>> print(messageBody) # doctest: +ELLIPSIS
     MIME-Version: 1.0
     Content-Type: multipart/mixed; boundary="===============...=="
     <BLANKLINE>
diff --git a/plone/rfc822/supermodel.rst b/plone/rfc822/supermodel.rst
index ba726b6..8cb0f10 100644
--- a/plone/rfc822/supermodel.rst
+++ b/plone/rfc822/supermodel.rst
@@ -11,13 +11,17 @@ First, let's load this package's ZCML so that we can run the tests:
     >>> configuration = """\
     ... <configure xmlns="http://namespaces.zope.org/zope">
     ...
-    ...     <include package="Products.Five" file="configure.zcml" />
+    ...     <include package="zope.component" file="meta.zcml" />
     ...     <include package="plone.supermodel" />
     ...     <include package="plone.rfc822" />
     ...
     ... </configure>
     ... """
-    >>> from StringIO import StringIO
+    >>> from plone.rfc822 import PY3
+    >>> if PY3:
+    ...     from io import StringIO
+    ... else:
+    ...     from StringIO import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
@@ -63,7 +67,7 @@ on which it is marked:
     >>> alsoProvides(ITestSchema['body'], IPrimaryField)
 
     >>> from plone.supermodel import serializeSchema
-    >>> print serializeSchema(ITestSchema) # doctest: +NORMALIZE_WHITESPACE
+    >>> print(serializeSchema(ITestSchema).decode('utf-8'))  # doctest: +NORMALIZE_WHITESPACE
     <model xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema">
       <schema based-on="zope.interface.Interface">
         <field name="title" type="zope.schema.TextLine">
diff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py
index c58dbb2..29950cd 100644
--- a/plone/rfc822/tests.py
+++ b/plone/rfc822/tests.py
@@ -4,6 +4,8 @@
 
 import doctest
 import unittest
+import re
+import sys
 
 
 DOCFILES = [
@@ -12,7 +14,15 @@
     'supermodel.rst',
 ]
 
-optionflags = doctest.ELLIPSIS
+optionflags = doctest.ELLIPSIS | doctest.REPORT_UDIFF | doctest.NORMALIZE_WHITESPACE
+
+
+class Py23DocChecker(doctest.OutputChecker):
+    def check_output(self, want, got, optionflags):
+        if sys.version_info[0] > 2:
+            want = re.sub("u'(.*?)'", "'\\1'", want)
+            want = re.sub('u"(.*?)"', '"\\1"', want)
+        return doctest.OutputChecker.check_output(self, want, got, optionflags)
 
 
 def test_suite():
@@ -23,6 +33,7 @@ def test_suite():
             doctest.DocFileSuite(
                 docfile,
                 optionflags=optionflags,
+                checker=Py23DocChecker(),
             ),
             layer=UNIT_TESTING
         )


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2017-05-05T13:47:19+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rfc822/commit/86a53cebc9df1ea9dd9d695060a0cf935c1e0911

more python 3

Files changed:
M plone/rfc822/defaultfields.py
M plone/rfc822/fields.rst
M plone/rfc822/message.rst

diff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py
index 95c1ce6..7950a86 100644
--- a/plone/rfc822/defaultfields.py
+++ b/plone/rfc822/defaultfields.py
@@ -142,8 +142,8 @@ def decode(
     ):
         unicodeValue = value.decode(charset)
         try:
-            return self.field.fromUnicode(unicodeValue)
-        except Exception, e:
+            return self.field.fromUnicode(value)
+        except Exception as e:
             raise ValueError(e)
 
     def getCharset(self, default='utf-8'):
diff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst
index 944ce41..1a30a77 100644
--- a/plone/rfc822/fields.rst
+++ b/plone/rfc822/fields.rst
@@ -9,12 +9,12 @@ First, we load the package's configuration:
     ... <configure
     ...      xmlns="http://namespaces.zope.org/zope"
     ...      i18n_domain="plone.rfc822.tests">
-    ...      
+    ...
     ...     <include package="zope.component" file="meta.zcml" />
     ...     <include package="zope.annotation" />
-    ...     
+    ...
     ...     <include package="plone.rfc822" />
-    ...     
+    ...
     ... </configure>
     ... """
 
@@ -107,7 +107,7 @@ extraction methods.
     >>> from zope.component import getMultiAdapter
     >>> from plone.rfc822.interfaces import IFieldMarshaler
 
-Notes: 
+Notes:
 
 * Unicode \xd8 (capital letter O with stroke) is \xc3\x98 in UTF-8.
 * None of the default marshalers support getContentType(), i.e. they all
@@ -391,7 +391,7 @@ Choice
     'utf-8'
     >>> marshaler.ascii
     True
-    
+
     >>> marshaler = getMultiAdapter((t, ITestContent['_choice2']), IFieldMarshaler)
     >>> marshaler.marshal()
     'two'
diff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst
index 15d46ce..17cc446 100644
--- a/plone/rfc822/message.rst
+++ b/plone/rfc822/message.rst
@@ -12,12 +12,12 @@ annotations, which we will use later in this test.
     ... <configure
     ...      xmlns="http://namespaces.zope.org/zope"
     ...      i18n_domain="plone.rfc822.tests">
-    ...      
+    ...
     ...     <include package="zope.component" file="meta.zcml" />
     ...     <include package="zope.annotation" />
-    ...     
+    ...
     ...     <include package="plone.rfc822" />
-    ...     
+    ...
     ... </configure>
     ... """
 
@@ -83,7 +83,7 @@ The output looks like this:
     >>> print(renderMessage(msg))
     title: Test title
     description: =?utf-8?q?Test_description...with_a_newline?=
-    emptyfield: 
+    emptyfield:
     Content-Type: text/plain; charset="utf-8"
     <BLANKLINE>
     <p>Test body</p>
@@ -108,7 +108,7 @@ If we want to use a different content type, we could set it explicitly:
     >>> print(renderMessage(msg))
     title: Test title
     description: =?utf-8?q?Test_description...with_a_newline?=
-    emptyfield: 
+    emptyfield:
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
     <BLANKLINE>
@@ -139,7 +139,7 @@ the ``getContentType()``:
 
     >>> class TestBodyMarshaler(UnicodeValueFieldMarshaler):
     ...     adapts(ITestContent, IText)
-    ...     
+    ...
     ...     def getContentType(self):
     ...         return 'text/html'
 
@@ -160,7 +160,7 @@ Let's now try again:
     >>> print(renderMessage(msg))
     title: Test title
     description: =?utf-8?q?Test_description...with_a_newline?=
-    emptyfield: 
+    emptyfield:
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
     <BLANKLINE>
@@ -208,7 +208,7 @@ We can also consume messages with a transfer encoding and a charset:
     >>> messageBody = """\
     ... title: =?utf-8?q?Test_title?=
     ... description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
-    ... emptyfield: 
+    ... emptyfield:
     ... Content-Transfer-Encoding: base64
     ... Content-Type: text/html; charset="utf-8"
     ... <BLANKLINE>
@@ -220,7 +220,7 @@ We can also consume messages with a transfer encoding and a charset:
     'text/html'
     >>> msg.get_content_charset()
     'utf-8'
-    
+
     >>> initializeObjectFromSchema(newContent, ITestContent, msg)
 
     >>> newContent.title
@@ -248,16 +248,16 @@ in an annotation adapter:
     ...     description = schema.Text(title=u"Personal description")
     ...     currentAge = schema.Int(title=u"Age", min=0)
     ...     personalProfile = schema.Text(title=u"Profile")
-    
+
     >>> alsoProvides(IPersonalDetails['personalProfile'], IPrimaryField)
-    
+
 The annotation storage would look like this:
 
     >>> from persistent import Persistent
     >>> @implementer(IPersonalDetails)
     ... class PersonalDetailsAnnotation(Persistent):
     ...     adapts(ITestContent)
-    ...     
+    ...
     ...     def __init__(self):
     ...         self.description = None
     ...         self.currentAge = None
@@ -295,7 +295,7 @@ Here are the fields it will see:
     >>> [f[0] for f in allFields if IPrimaryField.providedBy(f[1])]
     ['body', 'personalProfile']
 
-Let's now construct a message. Since we now have two fields called 
+Let's now construct a message. Since we now have two fields called
 ``description``, we will get two headers by that name. Since we have two
 primary fields, we will get a multipart message with two attachments.
 
@@ -305,7 +305,7 @@ primary fields, we will get a multipart message with two attachments.
     >>> print(msgString)
     title: Test title
     description: =?utf-8?q?Test_description...with_a_newline?=
-    emptyfield: 
+    emptyfield:
     description: <p>My description</p>
     currentAge: 21
     MIME-Version: 1.0
@@ -344,7 +344,7 @@ attachments to the two primary fields:
 
     >>> newContent.title
     u'Test title'
-    
+
     >>> newContent.description
     u'Test description\nwith a newline'
 
@@ -357,10 +357,10 @@ attachments to the two primary fields:
 
     >>> newPersonalDetails.currentAge
     21
-    
+
     >>> newPersonalDetails.personalProfile
     u'<p>My profile</p>'
-    
+
 Alternative ways to deal with multiple schemata
 -----------------------------------------------
 
@@ -388,7 +388,7 @@ own multipart message. To do that, we would simply use the
     --===============...==
     title: Test title
     description: =?utf-8?q?Test_description...with_a_newline?=
-    emptyfield: 
+    emptyfield:
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
     <BLANKLINE>
@@ -414,9 +414,9 @@ marshaler in ``plone.namedfile``.
 Let's say we have a value type intended to represent a binary file with a
 filename and content type:
 
-    >>> from zope.interface import Interface, implements
+    >>> from zope.interface import Interface, implementer
     >>> from zope import schema
-    
+
     >>> class IFileValue(Interface):
     ...     data = schema.Bytes(title=u"Raw data")
     ...     contentType = schema.ASCIILine(title=u"MIME type")
@@ -457,7 +457,7 @@ We can register a field marshaler for this field which will do the following:
 
     >>> from zope.component import adapts
     >>> from plone.rfc822.defaultfields import BaseFieldMarshaler
-    
+
     >>> class FileFieldMarshaler(BaseFieldMarshaler):
     ...     adapts(Interface, IFileField)
     ...
@@ -469,14 +469,14 @@ We can register a field marshaler for this field which will do the following:
     ...         if value is None:
     ...             return None
     ...         return value.data
-    ...     
+    ...
     ...     def decode(self, value, message=None, charset='utf-8', contentType=None, primary=False):
     ...         filename = None
     ...         # get the filename from the Content-Disposition header if possible
     ...         if primary and message is not None:
     ...             filename = message.get_filename(None)
     ...         return FileValue(value, contentType, filename)
-    ...     
+    ...
     ...     def getContentType(self):
     ...         value = self._query()
     ...         if value is None:
@@ -495,13 +495,13 @@ We can register a field marshaler for this field which will do the following:
     ...                 message.add_header('Content-Disposition', 'attachment', filename=filename)
     ...         # Apply base64 encoding
     ...         encode_base64(message)
-    
+
     >>> from zope.component import provideAdapter
     >>> provideAdapter(FileFieldMarshaler)
 
 To illustrate marshaling, let's create a content object that contains two file
 fields.
-    
+
     >>> class IFileContent(Interface):
     ...     file1 = FileField()
     ...     file2 = FileField()
@@ -530,10 +530,10 @@ field as primary:
     >>> from plone.rfc822.interfaces import IPrimaryField
     >>> from zope.interface import alsoProvides
     >>> alsoProvides(IFileContent['file1'], IPrimaryField)
-    
+
     >>> message = constructMessageFromSchema(fileContent, IFileContent)
     >>> messageBody = renderMessage(message)
-    >>> print messageBody
+    >>> print(messageBody)
     MIME-Version: 1.0
     Content-Type: text/plain
     Content-Disposition: attachment; filename="dummy1.txt"
@@ -548,12 +548,12 @@ We can also reconstruct the object from this message.
 
     >>> from plone.rfc822 import initializeObjectFromSchema
     >>> from email import message_from_string
-    
+
     >>> inputMessage = message_from_string(messageBody)
     >>> newFileContent = FileContent()
     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)
-    
-    >>> newFileContent.file1.data
+
+    >>> newFileContent.file1.data.decode('latin1')
     'dummy file'
     >>> newFileContent.file1.contentType
     'text/plain'
@@ -594,15 +594,15 @@ And again, we can reconstruct the object, this time with both fields:
     >>> inputMessage = message_from_string(messageBody)
     >>> newFileContent = FileContent()
     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)
-    
-    >>> newFileContent.file1.data
+
+    >>> newFileContent.file1.data.decode('latin1')
     'dummy file'
     >>> newFileContent.file1.contentType
     'text/plain'
     >>> newFileContent.file1.filename
     'dummy1.txt'
 
-    >>> newFileContent.file2.data
+    >>> newFileContent.file2.data.decode('latin1')
     '<html><body>test</body></html>'
     >>> newFileContent.file2.contentType
     'text/html'


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2017-05-05T14:07:55+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rfc822/commit/291aa1b3fcff685148dabdbc58bd71e99a577d78

remove accidental commit

Files changed:
M plone/rfc822/defaultfields.py

diff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py
index 7950a86..04f434d 100644
--- a/plone/rfc822/defaultfields.py
+++ b/plone/rfc822/defaultfields.py
@@ -142,7 +142,7 @@ def decode(
     ):
         unicodeValue = value.decode(charset)
         try:
-            return self.field.fromUnicode(value)
+            return self.field.fromUnicode(unicodeValue)
         except Exception as e:
             raise ValueError(e)
 


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2017-05-05T15:45:51+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rfc822/commit/c0c3a1bb83b22bb79fff3e3b4980367e9aa22865

fix python2-compatability

Files changed:
M plone/rfc822/_utils.py
M plone/rfc822/fields.rst
M plone/rfc822/message.rst

diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py
index 57f1c12..b2b9825 100644
--- a/plone/rfc822/_utils.py
+++ b/plone/rfc822/_utils.py
@@ -7,9 +7,9 @@
 """
 
 try:
-    from io import StringIO
-except ImportError:
     from cStringIO import StringIO
+except ImportError:
+    from io import StringIO
 from email.generator import Generator
 from email.header import decode_header
 from email.header import Header
diff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst
index 1a30a77..708651b 100644
--- a/plone/rfc822/fields.rst
+++ b/plone/rfc822/fields.rst
@@ -120,7 +120,7 @@ Text
 ----
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_text']), IFieldMarshaler)
-    >>> marshaler.marshal().decode('utf-8')
+    >>> marshaler.marshal()
     'text\xc3\x98'
     >>> marshaler.decode('text\xc3\x98')
     u'text\xd8'
diff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst
index 17cc446..77acd95 100644
--- a/plone/rfc822/message.rst
+++ b/plone/rfc822/message.rst
@@ -553,7 +553,7 @@ We can also reconstruct the object from this message.
     >>> newFileContent = FileContent()
     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)
 
-    >>> newFileContent.file1.data.decode('latin1')
+    >>> newFileContent.file1.data
     'dummy file'
     >>> newFileContent.file1.contentType
     'text/plain'
@@ -595,14 +595,14 @@ And again, we can reconstruct the object, this time with both fields:
     >>> newFileContent = FileContent()
     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)
 
-    >>> newFileContent.file1.data.decode('latin1')
+    >>> newFileContent.file1.data
     'dummy file'
     >>> newFileContent.file1.contentType
     'text/plain'
     >>> newFileContent.file1.filename
     'dummy1.txt'
 
-    >>> newFileContent.file2.data.decode('latin1')
+    >>> newFileContent.file2.data
     '<html><body>test</body></html>'
     >>> newFileContent.file2.contentType
     'text/html'


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2017-05-05T15:49:01+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rfc822/commit/24c47a565e0f293b0dd270704ac5d851bb69ece7

add changenote

Files changed:
M CHANGES.rst
M plone/rfc822/_utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 1d83cc9..424b1dc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Start basic Python 3 support.
+  [pbauer, dhavlik]
 
 Bug fixes:
 
diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py
index b2b9825..0b90916 100644
--- a/plone/rfc822/_utils.py
+++ b/plone/rfc822/_utils.py
@@ -15,7 +15,6 @@
 from email.header import Header
 from email.message import Message
 from plone.rfc822 import PY3
-from plone.rfc822 import binary_type
 from plone.rfc822.interfaces import IFieldMarshaler
 from plone.rfc822.interfaces import IPrimaryField
 from zope.component import queryMultiAdapter


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2017-05-05T15:52:55+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rfc822/commit/15706f23fcc82c11eda99b2443f12d91a4b9cbb7

cleanup

Files changed:
M plone/rfc822/_utils.py

diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py
index 0b90916..02c92f1 100644
--- a/plone/rfc822/_utils.py
+++ b/plone/rfc822/_utils.py
@@ -14,7 +14,6 @@
 from email.header import decode_header
 from email.header import Header
 from email.message import Message
-from plone.rfc822 import PY3
 from plone.rfc822.interfaces import IFieldMarshaler
 from plone.rfc822.interfaces import IPrimaryField
 from zope.component import queryMultiAdapter
@@ -23,15 +22,6 @@
 import logging
 
 
-def b(s):
-    if PY3:
-        if not isinstance(s, str):
-            return s
-        return bytes(s, encoding='latin-1')
-    else:
-        return s
-
-
 LOG = logging.getLogger('plone.rfc822')
 
 


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2017-05-05T17:20:56+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.rfc822/commit/d6c967897a12a297a722c807bb94e9c7f596fd2a

cleanup

Files changed:
M plone/rfc822/__init__.py
M plone/rfc822/tests.py

diff --git a/plone/rfc822/__init__.py b/plone/rfc822/__init__.py
index d42d4dd..f7ee5c1 100644
--- a/plone/rfc822/__init__.py
+++ b/plone/rfc822/__init__.py
@@ -1,12 +1,6 @@
 # -*- coding: utf-8 -*-
 import sys
 PY3 = sys.version_info[0] == 3
-if PY3:
-    text_type = str
-    binary_type = bytes
-else:
-    text_type = unicode
-    binary_type = str
 
 from plone.rfc822._utils import constructMessage
 from plone.rfc822._utils import constructMessageFromSchema
diff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py
index 29950cd..c76833e 100644
--- a/plone/rfc822/tests.py
+++ b/plone/rfc822/tests.py
@@ -14,7 +14,7 @@
     'supermodel.rst',
 ]
 
-optionflags = doctest.ELLIPSIS | doctest.REPORT_UDIFF | doctest.NORMALIZE_WHITESPACE
+optionflags = doctest.ELLIPSIS | doctest.REPORT_UDIFF | doctest.NORMALIZE_WHITESPACE  # noqa: E501
 
 
 class Py23DocChecker(doctest.OutputChecker):


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2018-01-29T15:40:24+01:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/0582e462f0fceb84b7e14d358ebefd681b911208

WIP: More Python 2 / 3 adjustments

Files changed:
M plone/rfc822/__init__.py
M plone/rfc822/_utils.py
M plone/rfc822/defaultfields.py
M plone/rfc822/fields.rst
M plone/rfc822/interfaces.py
M plone/rfc822/message.rst
M plone/rfc822/supermodel.rst
M plone/rfc822/tests.py

diff --git a/plone/rfc822/__init__.py b/plone/rfc822/__init__.py
index f7ee5c1..98157cb 100644
--- a/plone/rfc822/__init__.py
+++ b/plone/rfc822/__init__.py
@@ -1,7 +1,4 @@
 # -*- coding: utf-8 -*-
-import sys
-PY3 = sys.version_info[0] == 3
-
 from plone.rfc822._utils import constructMessage
 from plone.rfc822._utils import constructMessageFromSchema
 from plone.rfc822._utils import constructMessageFromSchemata
diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py
index 02c92f1..e5cc901 100644
--- a/plone/rfc822/_utils.py
+++ b/plone/rfc822/_utils.py
@@ -6,21 +6,18 @@
 See interfaces.py for details.
 """
 
-try:
-    from cStringIO import StringIO
-except ImportError:
-    from io import StringIO
 from email.generator import Generator
 from email.header import decode_header
 from email.header import Header
 from email.message import Message
 from plone.rfc822.interfaces import IFieldMarshaler
 from plone.rfc822.interfaces import IPrimaryField
+from six import StringIO
 from zope.component import queryMultiAdapter
 from zope.schema import getFieldsInOrder
 
 import logging
-
+import six
 
 LOG = logging.getLogger('plone.rfc822')
 
@@ -63,7 +60,7 @@ def constructMessage(context, fields, charset='utf-8'):
 
         if value is None:
             value = ''
-        elif not isinstance(value, str):
+        elif not isinstance(value, six.binary_type):
             raise ValueError(
                 "Marshaler for field %s did not return a string" % name)
 
diff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py
index 04f434d..862143f 100644
--- a/plone/rfc822/defaultfields.py
+++ b/plone/rfc822/defaultfields.py
@@ -6,13 +6,13 @@
 
 These field implement IFromUnicode and are supported by a single marshaler:
 
-* Text, TextLine, Password - store unicode
+* Text, TextLine, Password - store six.text_type
 * Bytes, BytesLine, ASCII, ASCIILine, URI, Id, DottedName - store str
 * Bool - stores bool (incorrectly omits IFromUnicode specification)
 * Int - stores int, long
 * Float - stores float
 * Decimal - stores Decimal
-* Choice - string/unicode values supported
+* Choice - string/six.text_type values supported
 
 Do not implement IFromUnicode
 
@@ -46,6 +46,7 @@
 
 import datetime
 import dateutil.parser
+import six
 
 
 _marker = object()
@@ -68,17 +69,16 @@ def __init__(self, context, field):
 
     def marshal(self, charset='utf-8', primary=False):
         value = self._query(_marker)
-        if value is _marker:
-            return None
-        return self.encode(value, charset, primary)
+        return None if value is _marker else \
+            self.encode(value, charset, primary)
 
     def demarshal(
-        self,
-        value,
-        message=None,
-        charset='utf-8',
-        contentType=None,
-        primary=False
+            self,
+            value,
+            message=None,
+            charset='utf-8',
+            contentType=None,
+            primary=False
     ):
         fieldValue = self.field.missing_value
         if value:
@@ -90,12 +90,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return None
 
     def decode(
-        self,
-        value,
-        message=None,
-        charset='utf-8',
-        contentType=None,
-        primary=False
+            self,
+            value,
+            message=None,
+            charset='utf-8',
+            contentType=None,
+            primary=False
     ):
         raise ValueError("Demarshalling not implemented for %s" %
                          repr(self.field))
@@ -128,17 +128,15 @@ class UnicodeFieldMarshaler(BaseFieldMarshaler):
     adapts(Interface, IFromUnicode)
 
     def encode(self, value, charset='utf-8', primary=False):
-        if value is None:
-            return None
-        return unicode(value).encode(charset)
+        return None if value is None else six.text_type(value).encode(charset)
 
     def decode(
-        self,
-        value,
-        message=None,
-        charset='utf-8',
-        contentType=None,
-        primary=False
+            self,
+            value,
+            message=None,
+            charset='utf-8',
+            contentType=None,
+            primary=False
     ):
         unicodeValue = value.decode(charset)
         try:
@@ -156,15 +154,14 @@ class UnicodeValueFieldMarshaler(UnicodeFieldMarshaler):
     """
 
     def encode(self, value, charset='utf-8', primary=False):
-        value = super(UnicodeValueFieldMarshaler, self).encode(
+        encoded = super(UnicodeValueFieldMarshaler, self).encode(
             value, charset, primary)
-        if not value:
-            self.ascii = True
-        elif max(map(ord, value)) < 128:
+        # if not encoded or max(map(ord, str(encoded))) > 127:
+        if not encoded or max(map(ord, encoded)) > 127:
             self.ascii = True
         else:
             self.ascii = False
-        return value
+        return encoded
 
 
 class ASCIISafeFieldMarshaler(UnicodeFieldMarshaler):
@@ -191,12 +188,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return value
 
     def decode(
-        self,
-        value,
-        message=None,
-        charset='utf-8',
-        contentType=None,
-        primary=False
+            self,
+            value,
+            message=None,
+            charset='utf-8',
+            contentType=None,
+            primary=False
     ):
         return value
 
@@ -215,12 +212,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return value.isoformat()
 
     def decode(
-        self,
-        value,
-        message=None,
-        charset='utf-8',
-        contentType=None,
-        primary=False
+            self,
+            value,
+            message=None,
+            charset='utf-8',
+            contentType=None,
+            primary=False
     ):
         unicodeValue = value.decode(charset)
         try:
@@ -247,12 +244,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return value.isoformat()
 
     def decode(
-        self,
-        value,
-        message=None,
-        charset='utf-8',
-        contentType=None,
-        primary=False
+            self,
+            value,
+            message=None,
+            charset='utf-8',
+            contentType=None,
+            primary=False
     ):
         unicodeValue = value.decode(charset)
         try:
@@ -279,12 +276,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return "%d:%d:%d" % (value.days, value.seconds, value.microseconds)
 
     def decode(
-        self,
-        value,
-        message=None,
-        charset='utf-8',
-        contentType=None,
-        primary=False
+            self,
+            value,
+            message=None,
+            charset='utf-8',
+            contentType=None,
+            primary=False
     ):
         # this value is never used, should it be used later in the list
         # comprehension?
@@ -336,12 +333,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return '||'.join(value_lines)
 
     def decode(
-        self,
-        value,
-        message=None,
-        charset='utf-8',
-        contentType=None,
-        primary=False
+            self,
+            value,
+            message=None,
+            charset='utf-8',
+            contentType=None,
+            primary=False
     ):
         valueTypeMarshaler = queryMultiAdapter(
             (self.context, self.field.value_type,), IFieldMarshaler)
diff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst
index 708651b..7625e16 100644
--- a/plone/rfc822/fields.rst
+++ b/plone/rfc822/fields.rst
@@ -5,7 +5,7 @@ This test exercises the various standard field marshalers.
 
 First, we load the package's configuration:
 
-    >>> configuration = """\
+    >>> configuration = b"""\
     ... <configure
     ...      xmlns="http://namespaces.zope.org/zope"
     ...      i18n_domain="plone.rfc822.tests">
@@ -18,11 +18,7 @@ First, we load the package's configuration:
     ... </configure>
     ... """
 
-    >>> from plone.rfc822 import PY3
-    >>> if PY3:
-    ...     from io import StringIO
-    ... else:
-    ...     from StringIO import StringIO
+    >>> from six import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
@@ -64,12 +60,10 @@ we support.
 
 This interface is implemented by a the following class:
 
+    >>> from decimal import Decimal
     >>> from zope.interface import implementer
     >>> import datetime
-    >>> from decimal import Decimal
-    >>> import sys
-    >>> if sys.version_info > (3,):
-    ...     long = int
+    >>> import six
     >>> @implementer(ITestContent)
     ... class TestContent(object):
     ...     _text = u"text\xd8"
@@ -86,7 +80,7 @@ This interface is implemented by a the following class:
     ...     _id = 'some.id'
     ...     _dottedName = 'dotted.name'
     ...     _bool = True
-    ...     _int = long(-10)
+    ...     _int = long(-10) if six.PY2 else -10
     ...     _float = 0.3
     ...     _decimal = Decimal("5.0")
     ...     _choice1 = u"two"
@@ -122,7 +116,7 @@ Text
     >>> marshaler = getMultiAdapter((t, ITestContent['_text']), IFieldMarshaler)
     >>> marshaler.marshal()
     'text\xc3\x98'
-    >>> marshaler.decode('text\xc3\x98')
+    >>> marshaler.decode(b'text\xc3\x98')
     u'text\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -137,7 +131,7 @@ if the field value is within the ascii range.
     >>> marshaler = getMultiAdapter((t, ITestContent['_text2']), IFieldMarshaler)
     >>> marshaler.marshal()
     'text'
-    >>> marshaler.decode('text\xc3\x98')
+    >>> marshaler.decode(b'text\xc3\x98')
     u'text\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -152,7 +146,7 @@ TextLine
     >>> marshaler = getMultiAdapter((t, ITestContent['_textLine']), IFieldMarshaler)
     >>> marshaler.marshal()
     'textline\xc3\x98'
-    >>> marshaler.decode('textline\xc3\x98')
+    >>> marshaler.decode(b'textline\xc3\x98')
     u'textline\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -167,7 +161,7 @@ if the field value is within the ascii range.
     >>> marshaler = getMultiAdapter((t, ITestContent['_textLine2']), IFieldMarshaler)
     >>> marshaler.marshal()
     'textline'
-    >>> marshaler.decode('textline\xc3\x98')
+    >>> marshaler.decode(b'textline\xc3\x98')
     u'textline\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -182,7 +176,7 @@ Password
     >>> marshaler = getMultiAdapter((t, ITestContent['_password']), IFieldMarshaler)
     >>> marshaler.marshal()
     'password\xc3\x98'
-    >>> marshaler.decode('password\xc3\x98')
+    >>> marshaler.decode(b'password\xc3\x98')
     u'password\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -197,7 +191,7 @@ if the field value is within the ascii range.
     >>> marshaler = getMultiAdapter((t, ITestContent['_password2']), IFieldMarshaler)
     >>> marshaler.marshal()
     'password'
-    >>> marshaler.decode('password\xc3\x98')
+    >>> marshaler.decode(b'password\xc3\x98')
     u'password\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -212,7 +206,7 @@ Bytes
     >>> marshaler = getMultiAdapter((t, ITestContent['_bytes']), IFieldMarshaler)
     >>> marshaler.marshal()
     'bytes'
-    >>> marshaler.decode('bytes')
+    >>> marshaler.decode(b'bytes')
     'bytes'
     >>> marshaler.getContentType() is None
     True
@@ -227,7 +221,7 @@ BytesLine
     >>> marshaler = getMultiAdapter((t, ITestContent['_bytesLine']), IFieldMarshaler)
     >>> marshaler.marshal()
     'bytesline'
-    >>> marshaler.decode('bytesline')
+    >>> marshaler.decode(b'bytesline')
     'bytesline'
     >>> marshaler.getContentType() is None
     True
@@ -242,7 +236,7 @@ ASCII
     >>> marshaler = getMultiAdapter((t, ITestContent['_ascii']), IFieldMarshaler)
     >>> marshaler.marshal()
     'ascii'
-    >>> marshaler.decode('ascii')
+    >>> marshaler.decode(b'ascii')
     'ascii'
     >>> marshaler.getContentType() is None
     True
@@ -257,7 +251,7 @@ ASCIILine
     >>> marshaler = getMultiAdapter((t, ITestContent['_asciiLine']), IFieldMarshaler)
     >>> marshaler.marshal()
     'asciiline'
-    >>> marshaler.decode('asciiline')
+    >>> marshaler.decode(b'asciiline')
     'asciiline'
     >>> marshaler.getContentType() is None
     True
@@ -272,7 +266,7 @@ URI
     >>> marshaler = getMultiAdapter((t, ITestContent['_uri']), IFieldMarshaler)
     >>> marshaler.marshal()
     'http://plone.org'
-    >>> marshaler.decode('http://plone.org')
+    >>> marshaler.decode(b'http://plone.org')
     'http://plone.org'
     >>> marshaler.getContentType() is None
     True
@@ -287,7 +281,7 @@ Id
     >>> marshaler = getMultiAdapter((t, ITestContent['_id']), IFieldMarshaler)
     >>> marshaler.marshal()
     'some.id'
-    >>> marshaler.decode('some.id')
+    >>> marshaler.decode(b'some.id')
     'some.id'
     >>> marshaler.getCharset('utf-8') is None
     True
@@ -302,7 +296,7 @@ DottedName
     >>> marshaler = getMultiAdapter((t, ITestContent['_dottedName']), IFieldMarshaler)
     >>> marshaler.marshal()
     'dotted.name'
-    >>> marshaler.decode('dotted.name')
+    >>> marshaler.decode(b'dotted.name')
     'dotted.name'
     >>> marshaler.getContentType() is None
     True
@@ -321,9 +315,9 @@ Bool
     >>> marshaler.marshal()
     'False'
     >>> t._bool = True
-    >>> marshaler.decode('True')
+    >>> marshaler.decode(b'True')
     True
-    >>> marshaler.decode('False')
+    >>> marshaler.decode(b'False')
     False
     >>> marshaler.getContentType() is None
     True
@@ -338,7 +332,7 @@ Int
     >>> marshaler = getMultiAdapter((t, ITestContent['_int']), IFieldMarshaler)
     >>> marshaler.marshal()
     '-10'
-    >>> marshaler.decode('-10')
+    >>> marshaler.decode(b'-10')
     -10
     >>> marshaler.getContentType() is None
     True
@@ -353,7 +347,7 @@ Float
     >>> marshaler = getMultiAdapter((t, ITestContent['_float']), IFieldMarshaler)
     >>> marshaler.marshal()
     '0.3'
-    >>> marshaler.decode('0.25')
+    >>> marshaler.decode(b'0.25')
     0.25
     >>> marshaler.getContentType() is None
     True
@@ -368,7 +362,7 @@ Decimal
     >>> marshaler = getMultiAdapter((t, ITestContent['_decimal']), IFieldMarshaler)
     >>> marshaler.marshal()
     '5.0'
-    >>> marshaler.decode('5.0')
+    >>> marshaler.decode(b'5.0')
     Decimal('5.0')
     >>> marshaler.getContentType() is None
     True
@@ -383,7 +377,7 @@ Choice
     >>> marshaler = getMultiAdapter((t, ITestContent['_choice1']), IFieldMarshaler)
     >>> marshaler.marshal()
     'two'
-    >>> marshaler.decode('one')
+    >>> marshaler.decode(b'one')
     u'one'
     >>> marshaler.getContentType() is None
     True
@@ -395,7 +389,7 @@ Choice
     >>> marshaler = getMultiAdapter((t, ITestContent['_choice2']), IFieldMarshaler)
     >>> marshaler.marshal()
     'two'
-    >>> marshaler.decode('three')
+    >>> marshaler.decode(b'three')
     u'three'
     >>> marshaler.getContentType() is None
     True
@@ -410,7 +404,7 @@ Datetime
     >>> marshaler = getMultiAdapter((t, ITestContent['_datetime']), IFieldMarshaler)
     >>> marshaler.marshal()
     '2009-01-02T15:10:05.000001+01:00'
-    >>> marshaler.decode('2009-01-02T15:10:05.000001+01:00')
+    >>> marshaler.decode(b'2009-01-02T15:10:05.000001+01:00')
     datetime.datetime(2009, 1, 2, 15, 10, 5, 1, tzinfo=tzoffset(None, 3600))
     >>> marshaler.getContentType() is None
     True
@@ -425,7 +419,7 @@ Date
     >>> marshaler = getMultiAdapter((t, ITestContent['_date']), IFieldMarshaler)
     >>> marshaler.marshal()
     '2008-02-03'
-    >>> marshaler.decode('2008-02-03')
+    >>> marshaler.decode(b'2008-02-03')
     datetime.date(2008, 2, 3)
     >>> marshaler.getContentType() is None
     True
@@ -440,7 +434,7 @@ Timedelta
     >>> marshaler = getMultiAdapter((t, ITestContent['_timedelta']), IFieldMarshaler)
     >>> marshaler.marshal()
     '3:4:5'
-    >>> marshaler.decode('3:4:5')
+    >>> marshaler.decode(b'3:4:5')
     datetime.timedelta(3, 4, 5)
     >>> marshaler.getContentType() is None
     True
@@ -455,7 +449,7 @@ Tuple
     >>> marshaler = getMultiAdapter((t, ITestContent['_tuple']), IFieldMarshaler)
     >>> marshaler.marshal()
     'one\xc3\x98||two'
-    >>> marshaler.decode('one\xc3\x98||two')
+    >>> marshaler.decode(b'one\xc3\x98||two')
     (u'one\xd8', u'two')
     >>> marshaler.getContentType() is None
     True
@@ -470,7 +464,7 @@ List
     >>> marshaler = getMultiAdapter((t, ITestContent['_list']), IFieldMarshaler)
     >>> marshaler.marshal()
     'three||four'
-    >>> marshaler.decode('three||four')
+    >>> marshaler.decode(b'three||four')
     ['three', 'four']
     >>> marshaler.getContentType() is None
     True
@@ -483,9 +477,9 @@ Set
 ---
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_set']), IFieldMarshaler)
-    >>> marshaler.marshal() in ('False||True' or 'True||False',)
+    >>> marshaler.marshal() in (b'False||True', b'True||False')
     True
-    >>> marshaler.decode('True||False') == set([True, False])
+    >>> marshaler.decode(b'True||False') == set([True, False])
     True
     >>> marshaler.getContentType() is None
     True
@@ -498,9 +492,9 @@ Frozenset
 ---------
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_frozenset']), IFieldMarshaler)
-    >>> marshaler.marshal() in ('3:4:5||5:4:3', '5:4:3||3:4:5')
+    >>> marshaler.marshal() in (b'3:4:5||5:4:3', b'5:4:3||3:4:5')
     True
-    >>> marshaler.decode('3:4:5||5:4:3') == frozenset([datetime.timedelta(3, 4, 5), datetime.timedelta(5, 4, 3)])
+    >>> marshaler.decode(b'3:4:5||5:4:3') == frozenset([datetime.timedelta(3, 4, 5), datetime.timedelta(5, 4, 3)])
     True
     >>> marshaler.getContentType() is None
     True
diff --git a/plone/rfc822/interfaces.py b/plone/rfc822/interfaces.py
index 0d17c54..a2e3e02 100644
--- a/plone/rfc822/interfaces.py
+++ b/plone/rfc822/interfaces.py
@@ -3,6 +3,8 @@
 from zope.interface import Attribute
 from zope.interface import Interface
 
+import six
+
 
 class IPrimaryField(Interface):
     """Marker interface for the primary field in a schema
@@ -106,8 +108,8 @@ class IFieldMarshaler(Interface):
     """Multi-adapter on (context, field), used for marshalling to and
     demarshalling from RFC2822 message headers.
 
-    This interface deals in unicode strings, which will be encoded/decoded
-    elsewhere.
+    This interface deals in six.text_type strings, which will be
+    encoded/decoded elsewhere.
     """
 
     ascii = schema.Bool(
diff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst
index 77acd95..4ab8e58 100644
--- a/plone/rfc822/message.rst
+++ b/plone/rfc822/message.rst
@@ -8,7 +8,7 @@ based on its headers and body payload.
 Before we begin, let's load the default field marshalers and configure
 annotations, which we will use later in this test.
 
-    >>> configuration = """\
+    >>> configuration = u"""\
     ... <configure
     ...      xmlns="http://namespaces.zope.org/zope"
     ...      i18n_domain="plone.rfc822.tests">
@@ -21,11 +21,7 @@ annotations, which we will use later in this test.
     ... </configure>
     ... """
 
-    >>> from plone.rfc822 import PY3
-    >>> if PY3:
-    ...     from io import StringIO
-    ... else:
-    ...     from StringIO import StringIO
+    >>> from six import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
diff --git a/plone/rfc822/supermodel.rst b/plone/rfc822/supermodel.rst
index 8cb0f10..42287a9 100644
--- a/plone/rfc822/supermodel.rst
+++ b/plone/rfc822/supermodel.rst
@@ -8,7 +8,7 @@ This handler is installed so long as ``plone.supermodel`` is installed.
 
 First, let's load this package's ZCML so that we can run the tests:
 
-    >>> configuration = """\
+    >>> configuration = u"""\
     ... <configure xmlns="http://namespaces.zope.org/zope">
     ...
     ...     <include package="zope.component" file="meta.zcml" />
@@ -17,17 +17,13 @@ First, let's load this package's ZCML so that we can run the tests:
     ...
     ... </configure>
     ... """
-    >>> from plone.rfc822 import PY3
-    >>> if PY3:
-    ...     from io import StringIO
-    ... else:
-    ...     from StringIO import StringIO
+    >>> from six import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
 Next, let's define a sample model that exercises the 'marshal' attribute.
 
-    >>> schema = """\
+    >>> schema = b"""\
     ... <?xml version="1.0" encoding="UTF-8"?>
     ... <model xmlns="http://namespaces.plone.org/supermodel/schema"
     ...        xmlns:marshal="http://namespaces.plone.org/supermodel/marshal">
diff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py
index c76833e..7cf0a35 100644
--- a/plone/rfc822/tests.py
+++ b/plone/rfc822/tests.py
@@ -5,7 +5,7 @@
 import doctest
 import unittest
 import re
-import sys
+import six
 
 
 DOCFILES = [
@@ -14,12 +14,15 @@
     'supermodel.rst',
 ]
 
-optionflags = doctest.ELLIPSIS | doctest.REPORT_UDIFF | doctest.NORMALIZE_WHITESPACE  # noqa: E501
+optionflags = doctest.ELLIPSIS | \
+    doctest.REPORT_UDIFF | \
+    doctest.NORMALIZE_WHITESPACE | \
+    doctest.REPORT_ONLY_FIRST_FAILURE
 
 
 class Py23DocChecker(doctest.OutputChecker):
     def check_output(self, want, got, optionflags):
-        if sys.version_info[0] > 2:
+        if not six.PY2:
             want = re.sub("u'(.*?)'", "'\\1'", want)
             want = re.sub('u"(.*?)"', '"\\1"', want)
         return doctest.OutputChecker.check_output(self, want, got, optionflags)


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2018-05-05T14:07:55+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/cd26f69f1491afccd0bf598089069d3fbeedc69e

Fix tests

Files changed:
M plone/rfc822/_utils.py
M plone/rfc822/defaultfields.py
M plone/rfc822/fields.rst
M plone/rfc822/supermodel.rst
M plone/rfc822/tests.py

diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py
index e5cc901..b38bef1 100644
--- a/plone/rfc822/_utils.py
+++ b/plone/rfc822/_utils.py
@@ -10,15 +10,16 @@
 from email.header import decode_header
 from email.header import Header
 from email.message import Message
+from io import BytesIO
 from plone.rfc822.interfaces import IFieldMarshaler
 from plone.rfc822.interfaces import IPrimaryField
-from six import StringIO
 from zope.component import queryMultiAdapter
 from zope.schema import getFieldsInOrder
 
 import logging
 import six
 
+
 LOG = logging.getLogger('plone.rfc822')
 
 
@@ -59,12 +60,12 @@ def constructMessage(context, fields, charset='utf-8'):
             continue
 
         if value is None:
-            value = ''
+            value = b''
         elif not isinstance(value, six.binary_type):
             raise ValueError(
-                "Marshaler for field %s did not return a string" % name)
+                "Marshaler for field %s did not return bytes" % name)
 
-        if marshaler.ascii and '\n' not in value:
+        if marshaler.ascii and b'\n' not in value:
             msg[name] = value
         else:
             msg[name] = Header(value, charset)
@@ -136,7 +137,7 @@ def constructMessage(context, fields, charset='utf-8'):
 
 
 def renderMessage(message, mangleFromHeader=False):
-    out = StringIO()
+    out = BytesIO()
     generator = Generator(out, mangle_from_=mangleFromHeader)
     generator.flatten(message)
     return out.getvalue()
diff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py
index 862143f..7792899 100644
--- a/plone/rfc822/defaultfields.py
+++ b/plone/rfc822/defaultfields.py
@@ -73,12 +73,12 @@ def marshal(self, charset='utf-8', primary=False):
             self.encode(value, charset, primary)
 
     def demarshal(
-            self,
-            value,
-            message=None,
-            charset='utf-8',
-            contentType=None,
-            primary=False
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False
     ):
         fieldValue = self.field.missing_value
         if value:
@@ -90,12 +90,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return None
 
     def decode(
-            self,
-            value,
-            message=None,
-            charset='utf-8',
-            contentType=None,
-            primary=False
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False
     ):
         raise ValueError("Demarshalling not implemented for %s" %
                          repr(self.field))
@@ -128,15 +128,20 @@ class UnicodeFieldMarshaler(BaseFieldMarshaler):
     adapts(Interface, IFromUnicode)
 
     def encode(self, value, charset='utf-8', primary=False):
-        return None if value is None else six.text_type(value).encode(charset)
+        if value is None:
+            return
+        if isinstance(value, six.binary_type):
+            # value already encoded
+            return value
+        return six.text_type(value).encode(charset)
 
     def decode(
-            self,
-            value,
-            message=None,
-            charset='utf-8',
-            contentType=None,
-            primary=False
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False
     ):
         unicodeValue = value.decode(charset)
         try:
@@ -156,8 +161,7 @@ class UnicodeValueFieldMarshaler(UnicodeFieldMarshaler):
     def encode(self, value, charset='utf-8', primary=False):
         encoded = super(UnicodeValueFieldMarshaler, self).encode(
             value, charset, primary)
-        # if not encoded or max(map(ord, str(encoded))) > 127:
-        if not encoded or max(map(ord, encoded)) > 127:
+        if not encoded or max(six.iterbytes(encoded)) < 128:
             self.ascii = True
         else:
             self.ascii = False
@@ -188,12 +192,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return value
 
     def decode(
-            self,
-            value,
-            message=None,
-            charset='utf-8',
-            contentType=None,
-            primary=False
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False
     ):
         return value
 
@@ -212,12 +216,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return value.isoformat()
 
     def decode(
-            self,
-            value,
-            message=None,
-            charset='utf-8',
-            contentType=None,
-            primary=False
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False
     ):
         unicodeValue = value.decode(charset)
         try:
@@ -244,12 +248,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return value.isoformat()
 
     def decode(
-            self,
-            value,
-            message=None,
-            charset='utf-8',
-            contentType=None,
-            primary=False
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False
     ):
         unicodeValue = value.decode(charset)
         try:
@@ -276,16 +280,13 @@ def encode(self, value, charset='utf-8', primary=False):
         return "%d:%d:%d" % (value.days, value.seconds, value.microseconds)
 
     def decode(
-            self,
-            value,
-            message=None,
-            charset='utf-8',
-            contentType=None,
-            primary=False
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False
     ):
-        # this value is never used, should it be used later in the list
-        # comprehension?
-        unicodeValue = value.decode(charset)
         try:
             days, seconds, microseconds = [int(v) for v in value.split(":")]
             return datetime.timedelta(days, seconds, microseconds)
@@ -333,12 +334,12 @@ def encode(self, value, charset='utf-8', primary=False):
         return '||'.join(value_lines)
 
     def decode(
-            self,
-            value,
-            message=None,
-            charset='utf-8',
-            contentType=None,
-            primary=False
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False
     ):
         valueTypeMarshaler = queryMultiAdapter(
             (self.context, self.field.value_type,), IFieldMarshaler)
diff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst
index 7625e16..2bd430c 100644
--- a/plone/rfc822/fields.rst
+++ b/plone/rfc822/fields.rst
@@ -18,9 +18,9 @@ First, we load the package's configuration:
     ... </configure>
     ... """
 
-    >>> from six import StringIO
+    >>> from io import BytesIO
     >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
+    >>> xmlconfig.xmlconfig(BytesIO(configuration))
 
 Next, we'll create an interface which contains an instance of every field
 we support.
@@ -115,7 +115,7 @@ Text
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_text']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'text\xc3\x98'
+    b'text\xc3\x98'
     >>> marshaler.decode(b'text\xc3\x98')
     u'text\xd8'
     >>> marshaler.getContentType() is None
@@ -130,7 +130,7 @@ if the field value is within the ascii range.
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_text2']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'text'
+    b'text'
     >>> marshaler.decode(b'text\xc3\x98')
     u'text\xd8'
     >>> marshaler.getContentType() is None
@@ -145,7 +145,7 @@ TextLine
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_textLine']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'textline\xc3\x98'
+    b'textline\xc3\x98'
     >>> marshaler.decode(b'textline\xc3\x98')
     u'textline\xd8'
     >>> marshaler.getContentType() is None
@@ -160,7 +160,7 @@ if the field value is within the ascii range.
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_textLine2']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'textline'
+    b'textline'
     >>> marshaler.decode(b'textline\xc3\x98')
     u'textline\xd8'
     >>> marshaler.getContentType() is None
@@ -175,7 +175,7 @@ Password
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_password']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'password\xc3\x98'
+    b'password\xc3\x98'
     >>> marshaler.decode(b'password\xc3\x98')
     u'password\xd8'
     >>> marshaler.getContentType() is None
@@ -190,7 +190,7 @@ if the field value is within the ascii range.
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_password2']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'password'
+    b'password'
     >>> marshaler.decode(b'password\xc3\x98')
     u'password\xd8'
     >>> marshaler.getContentType() is None
@@ -207,7 +207,7 @@ Bytes
     >>> marshaler.marshal()
     'bytes'
     >>> marshaler.decode(b'bytes')
-    'bytes'
+    b'bytes'
     >>> marshaler.getContentType() is None
     True
     >>> marshaler.getCharset('utf-8') is None
@@ -222,7 +222,7 @@ BytesLine
     >>> marshaler.marshal()
     'bytesline'
     >>> marshaler.decode(b'bytesline')
-    'bytesline'
+    b'bytesline'
     >>> marshaler.getContentType() is None
     True
     >>> marshaler.getCharset('utf-8') is None
@@ -235,7 +235,7 @@ ASCII
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_ascii']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'ascii'
+    b'ascii'
     >>> marshaler.decode(b'ascii')
     'ascii'
     >>> marshaler.getContentType() is None
@@ -252,7 +252,7 @@ ASCIILine
     >>> marshaler.marshal()
     'asciiline'
     >>> marshaler.decode(b'asciiline')
-    'asciiline'
+    b'asciiline'
     >>> marshaler.getContentType() is None
     True
     >>> marshaler.getCharset('utf-8') is None
diff --git a/plone/rfc822/supermodel.rst b/plone/rfc822/supermodel.rst
index 42287a9..fe03470 100644
--- a/plone/rfc822/supermodel.rst
+++ b/plone/rfc822/supermodel.rst
@@ -8,7 +8,7 @@ This handler is installed so long as ``plone.supermodel`` is installed.
 
 First, let's load this package's ZCML so that we can run the tests:
 
-    >>> configuration = u"""\
+    >>> configuration = b"""\
     ... <configure xmlns="http://namespaces.zope.org/zope">
     ...
     ...     <include package="zope.component" file="meta.zcml" />
@@ -17,13 +17,13 @@ First, let's load this package's ZCML so that we can run the tests:
     ...
     ... </configure>
     ... """
-    >>> from six import StringIO
+    >>> from io import BytesIO
     >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
+    >>> xmlconfig.xmlconfig(BytesIO(configuration))
 
 Next, let's define a sample model that exercises the 'marshal' attribute.
 
-    >>> schema = b"""\
+    >>> schema = """\
     ... <?xml version="1.0" encoding="UTF-8"?>
     ... <model xmlns="http://namespaces.plone.org/supermodel/schema"
     ...        xmlns:marshal="http://namespaces.plone.org/supermodel/marshal">
@@ -63,7 +63,7 @@ on which it is marked:
     >>> alsoProvides(ITestSchema['body'], IPrimaryField)
 
     >>> from plone.supermodel import serializeSchema
-    >>> print(serializeSchema(ITestSchema).decode('utf-8'))  # doctest: +NORMALIZE_WHITESPACE
+    >>> print(serializeSchema(ITestSchema))  # doctest: +NORMALIZE_WHITESPACE
     <model xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema">
       <schema based-on="zope.interface.Interface">
         <field name="title" type="zope.schema.TextLine">
diff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py
index 7cf0a35..8d7b26d 100644
--- a/plone/rfc822/tests.py
+++ b/plone/rfc822/tests.py
@@ -3,9 +3,9 @@
 from plone.testing.zca import UNIT_TESTING
 
 import doctest
-import unittest
 import re
 import six
+import unittest
 
 
 DOCFILES = [
@@ -22,8 +22,9 @@
 
 class Py23DocChecker(doctest.OutputChecker):
     def check_output(self, want, got, optionflags):
-        if not six.PY2:
-            want = re.sub("u'(.*?)'", "'\\1'", want)
+        if six.PY2:
+            want = re.sub("b'(.*?)'", "'\\1'", want)
+        else:
             want = re.sub('u"(.*?)"', '"\\1"', want)
         return doctest.OutputChecker.check_output(self, want, got, optionflags)
 


Repository: plone.rfc822


Branch: refs/heads/master
Date: 2018-05-07T16:55:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.rfc822/commit/b035be18bd75caff226977b7d213f0ced93e4915

Merge pull request #4 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/rfc822/_utils.py
M plone/rfc822/defaultfields.py
M plone/rfc822/fields.rst
M plone/rfc822/interfaces.py
M plone/rfc822/message.rst
M plone/rfc822/supermodel.rst
M plone/rfc822/tests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 1d83cc9..424b1dc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Start basic Python 3 support.
+  [pbauer, dhavlik]
 
 Bug fixes:
 
diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py
index 5753e44..b38bef1 100644
--- a/plone/rfc822/_utils.py
+++ b/plone/rfc822/_utils.py
@@ -6,18 +6,18 @@
 See interfaces.py for details.
 """
 
-from cStringIO import StringIO
-from email.Generator import Generator
-from email.Header import decode_header
-from email.Header import Header
-# Note: We use capitalised module names to be compatible with Python 2.4
-from email.Message import Message
+from email.generator import Generator
+from email.header import decode_header
+from email.header import Header
+from email.message import Message
+from io import BytesIO
 from plone.rfc822.interfaces import IFieldMarshaler
 from plone.rfc822.interfaces import IPrimaryField
 from zope.component import queryMultiAdapter
 from zope.schema import getFieldsInOrder
 
 import logging
+import six
 
 
 LOG = logging.getLogger('plone.rfc822')
@@ -54,18 +54,18 @@ def constructMessage(context, fields, charset='utf-8'):
 
         try:
             value = marshaler.marshal(charset, primary=False)
-        except ValueError, e:
+        except ValueError as e:
             LOG.debug("Marshaling of %s for %s failed: %s" %
                       (name, repr(context), str(e)))
             continue
 
         if value is None:
-            value = ''
-        elif not isinstance(value, str):
+            value = b''
+        elif not isinstance(value, six.binary_type):
             raise ValueError(
-                "Marshaler for field %s did not return a string" % name)
+                "Marshaler for field %s did not return bytes" % name)
 
-        if marshaler.ascii and '\n' not in value:
+        if marshaler.ascii and b'\n' not in value:
             msg[name] = value
         else:
             msg[name] = Header(value, charset)
@@ -137,7 +137,7 @@ def constructMessage(context, fields, charset='utf-8'):
 
 
 def renderMessage(message, mangleFromHeader=False):
-    out = StringIO()
+    out = BytesIO()
     generator = Generator(out, mangle_from_=mangleFromHeader)
     generator.flatten(message)
     return out.getvalue()
@@ -224,7 +224,7 @@ def initializeObject(context, fields, message, defaultCharset='utf-8'):
                 contentType=contentType,
                 primary=False
             )
-        except ValueError, e:
+        except ValueError as e:
             # interface allows demarshal() to raise ValueError to indicate
             # marshalling failed
             LOG.debug("Demarshalling of %s for %s failed: %s" %
@@ -263,7 +263,7 @@ def initializeObject(context, fields, message, defaultCharset='utf-8'):
                         contentType=contentType,
                         primary=True
                     )
-                except ValueError, e:
+                except ValueError as e:
                     # interface allows demarshal() to raise ValueError to
                     # indicate marshalling failed
                     LOG.debug("Demarshalling of %s for %s failed: %s" %
@@ -313,7 +313,7 @@ def initializeObject(context, fields, message, defaultCharset='utf-8'):
                         contentType=contentType,
                         primary=True
                     )
-                except ValueError, e:
+                except ValueError as e:
                     # interface allows demarshal() to raise ValueError to
                     # indicate marshalling failed
                     LOG.debug("Demarshalling of %s for %s failed: %s" %
diff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py
index c775b9d..7792899 100644
--- a/plone/rfc822/defaultfields.py
+++ b/plone/rfc822/defaultfields.py
@@ -6,13 +6,13 @@
 
 These field implement IFromUnicode and are supported by a single marshaler:
 
-* Text, TextLine, Password - store unicode
+* Text, TextLine, Password - store six.text_type
 * Bytes, BytesLine, ASCII, ASCIILine, URI, Id, DottedName - store str
 * Bool - stores bool (incorrectly omits IFromUnicode specification)
 * Int - stores int, long
 * Float - stores float
 * Decimal - stores Decimal
-* Choice - string/unicode values supported
+* Choice - string/six.text_type values supported
 
 Do not implement IFromUnicode
 
@@ -46,6 +46,7 @@
 
 import datetime
 import dateutil.parser
+import six
 
 
 _marker = object()
@@ -68,9 +69,8 @@ def __init__(self, context, field):
 
     def marshal(self, charset='utf-8', primary=False):
         value = self._query(_marker)
-        if value is _marker:
-            return None
-        return self.encode(value, charset, primary)
+        return None if value is _marker else \
+            self.encode(value, charset, primary)
 
     def demarshal(
         self,
@@ -117,7 +117,7 @@ def _query(self, default=None):
     def _set(self, value):
         try:
             self.field.set(self.instance, value)
-        except TypeError, e:
+        except TypeError as e:
             raise ValueError(e)
 
 
@@ -129,8 +129,11 @@ class UnicodeFieldMarshaler(BaseFieldMarshaler):
 
     def encode(self, value, charset='utf-8', primary=False):
         if value is None:
-            return None
-        return unicode(value).encode(charset)
+            return
+        if isinstance(value, six.binary_type):
+            # value already encoded
+            return value
+        return six.text_type(value).encode(charset)
 
     def decode(
         self,
@@ -143,7 +146,7 @@ def decode(
         unicodeValue = value.decode(charset)
         try:
             return self.field.fromUnicode(unicodeValue)
-        except Exception, e:
+        except Exception as e:
             raise ValueError(e)
 
     def getCharset(self, default='utf-8'):
@@ -156,15 +159,13 @@ class UnicodeValueFieldMarshaler(UnicodeFieldMarshaler):
     """
 
     def encode(self, value, charset='utf-8', primary=False):
-        value = super(UnicodeValueFieldMarshaler, self).encode(
+        encoded = super(UnicodeValueFieldMarshaler, self).encode(
             value, charset, primary)
-        if not value:
-            self.ascii = True
-        elif max(map(ord, value)) < 128:
+        if not encoded or max(six.iterbytes(encoded)) < 128:
             self.ascii = True
         else:
             self.ascii = False
-        return value
+        return encoded
 
 
 class ASCIISafeFieldMarshaler(UnicodeFieldMarshaler):
@@ -225,7 +226,7 @@ def decode(
         unicodeValue = value.decode(charset)
         try:
             return dateutil.parser.parse(unicodeValue)
-        except Exception, e:
+        except Exception as e:
             raise ValueError(e)
 
 
@@ -257,7 +258,7 @@ def decode(
         unicodeValue = value.decode(charset)
         try:
             return dateutil.parser.parse(unicodeValue).date()
-        except Exception, e:
+        except Exception as e:
             raise ValueError(e)
 
 
@@ -286,13 +287,10 @@ def decode(
         contentType=None,
         primary=False
     ):
-        # this value is never used, should it be used later in the list
-        # comprehension?
-        unicodeValue = value.decode(charset)
         try:
             days, seconds, microseconds = [int(v) for v in value.split(":")]
             return datetime.timedelta(days, seconds, microseconds)
-        except Exception, e:
+        except Exception as e:
             raise ValueError(e)
 
 
diff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst
index afb5617..2bd430c 100644
--- a/plone/rfc822/fields.rst
+++ b/plone/rfc822/fields.rst
@@ -5,22 +5,22 @@ This test exercises the various standard field marshalers.
 
 First, we load the package's configuration:
 
-    >>> configuration = """\
+    >>> configuration = b"""\
     ... <configure
     ...      xmlns="http://namespaces.zope.org/zope"
     ...      i18n_domain="plone.rfc822.tests">
-    ...      
+    ...
     ...     <include package="zope.component" file="meta.zcml" />
     ...     <include package="zope.annotation" />
-    ...     
+    ...
     ...     <include package="plone.rfc822" />
-    ...     
+    ...
     ... </configure>
     ... """
 
-    >>> from StringIO import StringIO
+    >>> from io import BytesIO
     >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
+    >>> xmlconfig.xmlconfig(BytesIO(configuration))
 
 Next, we'll create an interface which contains an instance of every field
 we support.
@@ -60,11 +60,12 @@ we support.
 
 This interface is implemented by a the following class:
 
-    >>> from zope.interface import implements
-    >>> import datetime
     >>> from decimal import Decimal
-    >>> class TestContent(object):
-    ...     implements(ITestContent)
+    >>> from zope.interface import implementer
+    >>> import datetime
+    >>> import six
+    >>> @implementer(ITestContent)
+    ... class TestContent(object):
     ...     _text = u"text\xd8"
     ...     _text2 = u"text" # ascii safe
     ...     _textLine = u"textline\xd8"
@@ -79,7 +80,7 @@ This interface is implemented by a the following class:
     ...     _id = 'some.id'
     ...     _dottedName = 'dotted.name'
     ...     _bool = True
-    ...     _int = -10l
+    ...     _int = long(-10) if six.PY2 else -10
     ...     _float = 0.3
     ...     _decimal = Decimal("5.0")
     ...     _choice1 = u"two"
@@ -100,7 +101,7 @@ extraction methods.
     >>> from zope.component import getMultiAdapter
     >>> from plone.rfc822.interfaces import IFieldMarshaler
 
-Notes: 
+Notes:
 
 * Unicode \xd8 (capital letter O with stroke) is \xc3\x98 in UTF-8.
 * None of the default marshalers support getContentType(), i.e. they all
@@ -114,8 +115,8 @@ Text
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_text']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'text\xc3\x98'
-    >>> marshaler.decode('text\xc3\x98')
+    b'text\xc3\x98'
+    >>> marshaler.decode(b'text\xc3\x98')
     u'text\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -129,8 +130,8 @@ if the field value is within the ascii range.
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_text2']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'text'
-    >>> marshaler.decode('text\xc3\x98')
+    b'text'
+    >>> marshaler.decode(b'text\xc3\x98')
     u'text\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -144,8 +145,8 @@ TextLine
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_textLine']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'textline\xc3\x98'
-    >>> marshaler.decode('textline\xc3\x98')
+    b'textline\xc3\x98'
+    >>> marshaler.decode(b'textline\xc3\x98')
     u'textline\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -159,8 +160,8 @@ if the field value is within the ascii range.
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_textLine2']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'textline'
-    >>> marshaler.decode('textline\xc3\x98')
+    b'textline'
+    >>> marshaler.decode(b'textline\xc3\x98')
     u'textline\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -174,8 +175,8 @@ Password
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_password']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'password\xc3\x98'
-    >>> marshaler.decode('password\xc3\x98')
+    b'password\xc3\x98'
+    >>> marshaler.decode(b'password\xc3\x98')
     u'password\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -189,8 +190,8 @@ if the field value is within the ascii range.
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_password2']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'password'
-    >>> marshaler.decode('password\xc3\x98')
+    b'password'
+    >>> marshaler.decode(b'password\xc3\x98')
     u'password\xd8'
     >>> marshaler.getContentType() is None
     True
@@ -205,8 +206,8 @@ Bytes
     >>> marshaler = getMultiAdapter((t, ITestContent['_bytes']), IFieldMarshaler)
     >>> marshaler.marshal()
     'bytes'
-    >>> marshaler.decode('bytes')
-    'bytes'
+    >>> marshaler.decode(b'bytes')
+    b'bytes'
     >>> marshaler.getContentType() is None
     True
     >>> marshaler.getCharset('utf-8') is None
@@ -220,8 +221,8 @@ BytesLine
     >>> marshaler = getMultiAdapter((t, ITestContent['_bytesLine']), IFieldMarshaler)
     >>> marshaler.marshal()
     'bytesline'
-    >>> marshaler.decode('bytesline')
-    'bytesline'
+    >>> marshaler.decode(b'bytesline')
+    b'bytesline'
     >>> marshaler.getContentType() is None
     True
     >>> marshaler.getCharset('utf-8') is None
@@ -234,8 +235,8 @@ ASCII
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_ascii']), IFieldMarshaler)
     >>> marshaler.marshal()
-    'ascii'
-    >>> marshaler.decode('ascii')
+    b'ascii'
+    >>> marshaler.decode(b'ascii')
     'ascii'
     >>> marshaler.getContentType() is None
     True
@@ -250,8 +251,8 @@ ASCIILine
     >>> marshaler = getMultiAdapter((t, ITestContent['_asciiLine']), IFieldMarshaler)
     >>> marshaler.marshal()
     'asciiline'
-    >>> marshaler.decode('asciiline')
-    'asciiline'
+    >>> marshaler.decode(b'asciiline')
+    b'asciiline'
     >>> marshaler.getContentType() is None
     True
     >>> marshaler.getCharset('utf-8') is None
@@ -265,7 +266,7 @@ URI
     >>> marshaler = getMultiAdapter((t, ITestContent['_uri']), IFieldMarshaler)
     >>> marshaler.marshal()
     'http://plone.org'
-    >>> marshaler.decode('http://plone.org')
+    >>> marshaler.decode(b'http://plone.org')
     'http://plone.org'
     >>> marshaler.getContentType() is None
     True
@@ -280,7 +281,7 @@ Id
     >>> marshaler = getMultiAdapter((t, ITestContent['_id']), IFieldMarshaler)
     >>> marshaler.marshal()
     'some.id'
-    >>> marshaler.decode('some.id')
+    >>> marshaler.decode(b'some.id')
     'some.id'
     >>> marshaler.getCharset('utf-8') is None
     True
@@ -295,7 +296,7 @@ DottedName
     >>> marshaler = getMultiAdapter((t, ITestContent['_dottedName']), IFieldMarshaler)
     >>> marshaler.marshal()
     'dotted.name'
-    >>> marshaler.decode('dotted.name')
+    >>> marshaler.decode(b'dotted.name')
     'dotted.name'
     >>> marshaler.getContentType() is None
     True
@@ -314,9 +315,9 @@ Bool
     >>> marshaler.marshal()
     'False'
     >>> t._bool = True
-    >>> marshaler.decode('True')
+    >>> marshaler.decode(b'True')
     True
-    >>> marshaler.decode('False')
+    >>> marshaler.decode(b'False')
     False
     >>> marshaler.getContentType() is None
     True
@@ -331,7 +332,7 @@ Int
     >>> marshaler = getMultiAdapter((t, ITestContent['_int']), IFieldMarshaler)
     >>> marshaler.marshal()
     '-10'
-    >>> marshaler.decode('-10')
+    >>> marshaler.decode(b'-10')
     -10
     >>> marshaler.getContentType() is None
     True
@@ -346,7 +347,7 @@ Float
     >>> marshaler = getMultiAdapter((t, ITestContent['_float']), IFieldMarshaler)
     >>> marshaler.marshal()
     '0.3'
-    >>> marshaler.decode('0.25')
+    >>> marshaler.decode(b'0.25')
     0.25
     >>> marshaler.getContentType() is None
     True
@@ -361,7 +362,7 @@ Decimal
     >>> marshaler = getMultiAdapter((t, ITestContent['_decimal']), IFieldMarshaler)
     >>> marshaler.marshal()
     '5.0'
-    >>> marshaler.decode('5.0')
+    >>> marshaler.decode(b'5.0')
     Decimal('5.0')
     >>> marshaler.getContentType() is None
     True
@@ -376,7 +377,7 @@ Choice
     >>> marshaler = getMultiAdapter((t, ITestContent['_choice1']), IFieldMarshaler)
     >>> marshaler.marshal()
     'two'
-    >>> marshaler.decode('one')
+    >>> marshaler.decode(b'one')
     u'one'
     >>> marshaler.getContentType() is None
     True
@@ -384,11 +385,11 @@ Choice
     'utf-8'
     >>> marshaler.ascii
     True
-    
+
     >>> marshaler = getMultiAdapter((t, ITestContent['_choice2']), IFieldMarshaler)
     >>> marshaler.marshal()
     'two'
-    >>> marshaler.decode('three')
+    >>> marshaler.decode(b'three')
     u'three'
     >>> marshaler.getContentType() is None
     True
@@ -403,7 +404,7 @@ Datetime
     >>> marshaler = getMultiAdapter((t, ITestContent['_datetime']), IFieldMarshaler)
     >>> marshaler.marshal()
     '2009-01-02T15:10:05.000001+01:00'
-    >>> marshaler.decode('2009-01-02T15:10:05.000001+01:00')
+    >>> marshaler.decode(b'2009-01-02T15:10:05.000001+01:00')
     datetime.datetime(2009, 1, 2, 15, 10, 5, 1, tzinfo=tzoffset(None, 3600))
     >>> marshaler.getContentType() is None
     True
@@ -418,7 +419,7 @@ Date
     >>> marshaler = getMultiAdapter((t, ITestContent['_date']), IFieldMarshaler)
     >>> marshaler.marshal()
     '2008-02-03'
-    >>> marshaler.decode('2008-02-03')
+    >>> marshaler.decode(b'2008-02-03')
     datetime.date(2008, 2, 3)
     >>> marshaler.getContentType() is None
     True
@@ -433,7 +434,7 @@ Timedelta
     >>> marshaler = getMultiAdapter((t, ITestContent['_timedelta']), IFieldMarshaler)
     >>> marshaler.marshal()
     '3:4:5'
-    >>> marshaler.decode('3:4:5')
+    >>> marshaler.decode(b'3:4:5')
     datetime.timedelta(3, 4, 5)
     >>> marshaler.getContentType() is None
     True
@@ -448,7 +449,7 @@ Tuple
     >>> marshaler = getMultiAdapter((t, ITestContent['_tuple']), IFieldMarshaler)
     >>> marshaler.marshal()
     'one\xc3\x98||two'
-    >>> marshaler.decode('one\xc3\x98||two')
+    >>> marshaler.decode(b'one\xc3\x98||two')
     (u'one\xd8', u'two')
     >>> marshaler.getContentType() is None
     True
@@ -463,7 +464,7 @@ List
     >>> marshaler = getMultiAdapter((t, ITestContent['_list']), IFieldMarshaler)
     >>> marshaler.marshal()
     'three||four'
-    >>> marshaler.decode('three||four')
+    >>> marshaler.decode(b'three||four')
     ['three', 'four']
     >>> marshaler.getContentType() is None
     True
@@ -476,9 +477,9 @@ Set
 ---
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_set']), IFieldMarshaler)
-    >>> marshaler.marshal() in ('False||True' or 'True||False',)
+    >>> marshaler.marshal() in (b'False||True', b'True||False')
     True
-    >>> marshaler.decode('True||False') == set([True, False])
+    >>> marshaler.decode(b'True||False') == set([True, False])
     True
     >>> marshaler.getContentType() is None
     True
@@ -491,9 +492,9 @@ Frozenset
 ---------
 
     >>> marshaler = getMultiAdapter((t, ITestContent['_frozenset']), IFieldMarshaler)
-    >>> marshaler.marshal() in ('3:4:5||5:4:3', '5:4:3||3:4:5')
+    >>> marshaler.marshal() in (b'3:4:5||5:4:3', b'5:4:3||3:4:5')
     True
-    >>> marshaler.decode('3:4:5||5:4:3') == frozenset([datetime.timedelta(3, 4, 5), datetime.timedelta(5, 4, 3)])
+    >>> marshaler.decode(b'3:4:5||5:4:3') == frozenset([datetime.timedelta(3, 4, 5), datetime.timedelta(5, 4, 3)])
     True
     >>> marshaler.getContentType() is None
     True
diff --git a/plone/rfc822/interfaces.py b/plone/rfc822/interfaces.py
index 0d17c54..a2e3e02 100644
--- a/plone/rfc822/interfaces.py
+++ b/plone/rfc822/interfaces.py
@@ -3,6 +3,8 @@
 from zope.interface import Attribute
 from zope.interface import Interface
 
+import six
+
 
 class IPrimaryField(Interface):
     """Marker interface for the primary field in a schema
@@ -106,8 +108,8 @@ class IFieldMarshaler(Interface):
     """Multi-adapter on (context, field), used for marshalling to and
     demarshalling from RFC2822 message headers.
 
-    This interface deals in unicode strings, which will be encoded/decoded
-    elsewhere.
+    This interface deals in six.text_type strings, which will be
+    encoded/decoded elsewhere.
     """
 
     ascii = schema.Bool(
diff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst
index d44a256..4ab8e58 100644
--- a/plone/rfc822/message.rst
+++ b/plone/rfc822/message.rst
@@ -8,20 +8,20 @@ based on its headers and body payload.
 Before we begin, let's load the default field marshalers and configure
 annotations, which we will use later in this test.
 
-    >>> configuration = """\
+    >>> configuration = u"""\
     ... <configure
     ...      xmlns="http://namespaces.zope.org/zope"
     ...      i18n_domain="plone.rfc822.tests">
-    ...      
+    ...
     ...     <include package="zope.component" file="meta.zcml" />
     ...     <include package="zope.annotation" />
-    ...     
+    ...
     ...     <include package="plone.rfc822" />
-    ...     
+    ...
     ... </configure>
     ... """
 
-    >>> from StringIO import StringIO
+    >>> from six import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
@@ -54,9 +54,9 @@ Constructing a message
 Let's now say we have an instance providing this interface, which we want to
 marshal to a message.
 
-    >>> from zope.interface import implements
-    >>> class TestContent(object):
-    ...     implements(ITestContent)
+    >>> from zope.interface import implementer
+    >>> @implementer(ITestContent)
+    ... class TestContent(object):
     ...     title = u""
     ...     description = u""
     ...     body = u""
@@ -76,10 +76,10 @@ We could create a message form this instance and schema like this:
 The output looks like this:
 
     >>> from plone.rfc822 import renderMessage
-    >>> print renderMessage(msg)
+    >>> print(renderMessage(msg))
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
-    emptyfield: 
+    description: =?utf-8?q?Test_description...with_a_newline?=
+    emptyfield:
     Content-Type: text/plain; charset="utf-8"
     <BLANKLINE>
     <p>Test body</p>
@@ -101,10 +101,10 @@ encoding.
 If we want to use a different content type, we could set it explicitly:
 
     >>> msg.set_type('text/html')
-    >>> print renderMessage(msg)
+    >>> print(renderMessage(msg))
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
-    emptyfield: 
+    description: =?utf-8?q?Test_description...with_a_newline?=
+    emptyfield:
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
     <BLANKLINE>
@@ -135,7 +135,7 @@ the ``getContentType()``:
 
     >>> class TestBodyMarshaler(UnicodeValueFieldMarshaler):
     ...     adapts(ITestContent, IText)
-    ...     
+    ...
     ...     def getContentType(self):
     ...         return 'text/html'
 
@@ -153,10 +153,10 @@ above), or have the marshaler check the field name.
 Let's now try again:
 
     >>> msg = constructMessageFromSchema(content, ITestContent)
-    >>> print renderMessage(msg)
+    >>> print(renderMessage(msg))
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
-    emptyfield: 
+    description: =?utf-8?q?Test_description...with_a_newline?=
+    emptyfield:
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
     <BLANKLINE>
@@ -204,7 +204,7 @@ We can also consume messages with a transfer encoding and a charset:
     >>> messageBody = """\
     ... title: =?utf-8?q?Test_title?=
     ... description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
-    ... emptyfield: 
+    ... emptyfield:
     ... Content-Transfer-Encoding: base64
     ... Content-Type: text/html; charset="utf-8"
     ... <BLANKLINE>
@@ -216,7 +216,7 @@ We can also consume messages with a transfer encoding and a charset:
     'text/html'
     >>> msg.get_content_charset()
     'utf-8'
-    
+
     >>> initializeObjectFromSchema(newContent, ITestContent, msg)
 
     >>> newContent.title
@@ -244,16 +244,16 @@ in an annotation adapter:
     ...     description = schema.Text(title=u"Personal description")
     ...     currentAge = schema.Int(title=u"Age", min=0)
     ...     personalProfile = schema.Text(title=u"Profile")
-    
+
     >>> alsoProvides(IPersonalDetails['personalProfile'], IPrimaryField)
-    
+
 The annotation storage would look like this:
 
     >>> from persistent import Persistent
-    >>> class PersonalDetailsAnnotation(Persistent):
-    ...     implements(IPersonalDetails)
+    >>> @implementer(IPersonalDetails)
+    ... class PersonalDetailsAnnotation(Persistent):
     ...     adapts(ITestContent)
-    ...     
+    ...
     ...     def __init__(self):
     ...         self.description = None
     ...         self.currentAge = None
@@ -291,17 +291,17 @@ Here are the fields it will see:
     >>> [f[0] for f in allFields if IPrimaryField.providedBy(f[1])]
     ['body', 'personalProfile']
 
-Let's now construct a message. Since we now have two fields called 
+Let's now construct a message. Since we now have two fields called
 ``description``, we will get two headers by that name. Since we have two
 primary fields, we will get a multipart message with two attachments.
 
     >>> from plone.rfc822 import constructMessageFromSchemata
     >>> msg = constructMessageFromSchemata(content, (ITestContent, IPersonalDetails,))
     >>> msgString = renderMessage(msg)
-    >>> print msgString
+    >>> print(msgString)
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
-    emptyfield: 
+    description: =?utf-8?q?Test_description...with_a_newline?=
+    emptyfield:
     description: <p>My description</p>
     currentAge: 21
     MIME-Version: 1.0
@@ -340,7 +340,7 @@ attachments to the two primary fields:
 
     >>> newContent.title
     u'Test title'
-    
+
     >>> newContent.description
     u'Test description\nwith a newline'
 
@@ -353,10 +353,10 @@ attachments to the two primary fields:
 
     >>> newPersonalDetails.currentAge
     21
-    
+
     >>> newPersonalDetails.personalProfile
     u'<p>My profile</p>'
-    
+
 Alternative ways to deal with multiple schemata
 -----------------------------------------------
 
@@ -371,20 +371,20 @@ own multipart message. To do that, we would simply use the
     >>> mainMessage = constructMessageFromSchema(content, ITestContent)
     >>> personalDetailsMessage = constructMessageFromSchema(content, IPersonalDetails)
 
-    >>> from email.MIMEMultipart import MIMEMultipart
+    >>> from email.mime.multipart import MIMEMultipart
     >>> envelope = MIMEMultipart()
     >>> envelope.attach(mainMessage)
     >>> envelope.attach(personalDetailsMessage)
 
     >>> envelopeString = renderMessage(envelope)
-    >>> print envelopeString
+    >>> print(envelopeString)
     Content-Type: multipart/mixed; boundary="===============...=="
     MIME-Version: 1.0
     <BLANKLINE>
     --===============...==
     title: Test title
-    description: =?utf-8?q?Test_description=0D=0Awith_a_newline?=
-    emptyfield: 
+    description: =?utf-8?q?Test_description...with_a_newline?=
+    emptyfield:
     MIME-Version: 1.0
     Content-Type: text/html; charset="utf-8"
     <BLANKLINE>
@@ -410,16 +410,17 @@ marshaler in ``plone.namedfile``.
 Let's say we have a value type intended to represent a binary file with a
 filename and content type:
 
-    >>> from zope.interface import Interface, implements
+    >>> from zope.interface import Interface, implementer
     >>> from zope import schema
-    
+
     >>> class IFileValue(Interface):
     ...     data = schema.Bytes(title=u"Raw data")
     ...     contentType = schema.ASCIILine(title=u"MIME type")
     ...     filename = schema.ASCIILine(title=u"Filename")
 
-    >>> class FileValue(object):
-    ...     implements(IFileValue)
+    >>> @implementer(IFileValue)
+    ... class FileValue(object):
+    ...
     ...     def __init__(self, data, contentType, filename):
     ...         self.data = data
     ...         self.contentType = contentType
@@ -431,8 +432,8 @@ Suppose we had a custom field type to represent this:
     >>> class IFileField(IObject):
     ...     pass
 
-    >>> class FileField(schema.Object):
-    ...     implements(IFileField)
+    >>> @implementer(IFileField)
+    ... class FileField(schema.Object):
     ...     schema = IFileValue
     ...     def __init__(self, **kw):
     ...         if 'schema' in kw:
@@ -448,11 +449,11 @@ We can register a field marshaler for this field which will do the following:
 * Encode the payload using base64
 
     >>> from plone.rfc822.interfaces import IFieldMarshaler
-    >>> from email.Encoders import encode_base64
+    >>> from email.encoders import encode_base64
 
     >>> from zope.component import adapts
     >>> from plone.rfc822.defaultfields import BaseFieldMarshaler
-    
+
     >>> class FileFieldMarshaler(BaseFieldMarshaler):
     ...     adapts(Interface, IFileField)
     ...
@@ -464,14 +465,14 @@ We can register a field marshaler for this field which will do the following:
     ...         if value is None:
     ...             return None
     ...         return value.data
-    ...     
+    ...
     ...     def decode(self, value, message=None, charset='utf-8', contentType=None, primary=False):
     ...         filename = None
     ...         # get the filename from the Content-Disposition header if possible
     ...         if primary and message is not None:
     ...             filename = message.get_filename(None)
     ...         return FileValue(value, contentType, filename)
-    ...     
+    ...
     ...     def getContentType(self):
     ...         value = self._query()
     ...         if value is None:
@@ -490,19 +491,19 @@ We can register a field marshaler for this field which will do the following:
     ...                 message.add_header('Content-Disposition', 'attachment', filename=filename)
     ...         # Apply base64 encoding
     ...         encode_base64(message)
-    
+
     >>> from zope.component import provideAdapter
     >>> provideAdapter(FileFieldMarshaler)
 
 To illustrate marshaling, let's create a content object that contains two file
 fields.
-    
+
     >>> class IFileContent(Interface):
     ...     file1 = FileField()
     ...     file2 = FileField()
 
-    >>> class FileContent(object):
-    ...     implements(IFileContent)
+    >>> @implementer(IFileContent)
+    ... class FileContent(object):
     ...     file1 = None
     ...     file2 = None
 
@@ -515,7 +516,7 @@ what happens when we attempt to construct a message from this schema.
 
     >>> from plone.rfc822 import constructMessageFromSchema
     >>> message = constructMessageFromSchema(fileContent, IFileContent)
-    >>> print renderMessage(message)
+    >>> print(renderMessage(message))
     <BLANKLINE>
     <BLANKLINE>
 
@@ -525,10 +526,10 @@ field as primary:
     >>> from plone.rfc822.interfaces import IPrimaryField
     >>> from zope.interface import alsoProvides
     >>> alsoProvides(IFileContent['file1'], IPrimaryField)
-    
+
     >>> message = constructMessageFromSchema(fileContent, IFileContent)
     >>> messageBody = renderMessage(message)
-    >>> print messageBody
+    >>> print(messageBody)
     MIME-Version: 1.0
     Content-Type: text/plain
     Content-Disposition: attachment; filename="dummy1.txt"
@@ -543,11 +544,11 @@ We can also reconstruct the object from this message.
 
     >>> from plone.rfc822 import initializeObjectFromSchema
     >>> from email import message_from_string
-    
+
     >>> inputMessage = message_from_string(messageBody)
     >>> newFileContent = FileContent()
     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)
-    
+
     >>> newFileContent.file1.data
     'dummy file'
     >>> newFileContent.file1.contentType
@@ -564,7 +565,7 @@ In this case, we should get a multipart document with two payloads.
     >>> alsoProvides(IFileContent['file2'], IPrimaryField)
     >>> message = constructMessageFromSchema(fileContent, IFileContent)
     >>> messageBody = renderMessage(message)
-    >>> print messageBody # doctest: +ELLIPSIS
+    >>> print(messageBody) # doctest: +ELLIPSIS
     MIME-Version: 1.0
     Content-Type: multipart/mixed; boundary="===============...=="
     <BLANKLINE>
@@ -589,7 +590,7 @@ And again, we can reconstruct the object, this time with both fields:
     >>> inputMessage = message_from_string(messageBody)
     >>> newFileContent = FileContent()
     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)
-    
+
     >>> newFileContent.file1.data
     'dummy file'
     >>> newFileContent.file1.contentType
diff --git a/plone/rfc822/supermodel.rst b/plone/rfc822/supermodel.rst
index ba726b6..fe03470 100644
--- a/plone/rfc822/supermodel.rst
+++ b/plone/rfc822/supermodel.rst
@@ -8,18 +8,18 @@ This handler is installed so long as ``plone.supermodel`` is installed.
 
 First, let's load this package's ZCML so that we can run the tests:
 
-    >>> configuration = """\
+    >>> configuration = b"""\
     ... <configure xmlns="http://namespaces.zope.org/zope">
     ...
-    ...     <include package="Products.Five" file="configure.zcml" />
+    ...     <include package="zope.component" file="meta.zcml" />
     ...     <include package="plone.supermodel" />
     ...     <include package="plone.rfc822" />
     ...
     ... </configure>
     ... """
-    >>> from StringIO import StringIO
+    >>> from io import BytesIO
     >>> from zope.configuration import xmlconfig
-    >>> xmlconfig.xmlconfig(StringIO(configuration))
+    >>> xmlconfig.xmlconfig(BytesIO(configuration))
 
 Next, let's define a sample model that exercises the 'marshal' attribute.
 
@@ -63,7 +63,7 @@ on which it is marked:
     >>> alsoProvides(ITestSchema['body'], IPrimaryField)
 
     >>> from plone.supermodel import serializeSchema
-    >>> print serializeSchema(ITestSchema) # doctest: +NORMALIZE_WHITESPACE
+    >>> print(serializeSchema(ITestSchema))  # doctest: +NORMALIZE_WHITESPACE
     <model xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema">
       <schema based-on="zope.interface.Interface">
         <field name="title" type="zope.schema.TextLine">
diff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py
index c58dbb2..8d7b26d 100644
--- a/plone/rfc822/tests.py
+++ b/plone/rfc822/tests.py
@@ -3,6 +3,8 @@
 from plone.testing.zca import UNIT_TESTING
 
 import doctest
+import re
+import six
 import unittest
 
 
@@ -12,7 +14,19 @@
     'supermodel.rst',
 ]
 
-optionflags = doctest.ELLIPSIS
+optionflags = doctest.ELLIPSIS | \
+    doctest.REPORT_UDIFF | \
+    doctest.NORMALIZE_WHITESPACE | \
+    doctest.REPORT_ONLY_FIRST_FAILURE
+
+
+class Py23DocChecker(doctest.OutputChecker):
+    def check_output(self, want, got, optionflags):
+        if six.PY2:
+            want = re.sub("b'(.*?)'", "'\\1'", want)
+        else:
+            want = re.sub('u"(.*?)"', '"\\1"', want)
+        return doctest.OutputChecker.check_output(self, want, got, optionflags)
 
 
 def test_suite():
@@ -23,6 +37,7 @@ def test_suite():
             doctest.DocFileSuite(
                 docfile,
                 optionflags=optionflags,
+                checker=Py23DocChecker(),
             ),
             layer=UNIT_TESTING
         )


