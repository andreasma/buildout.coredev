Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-18T15:23:23+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/ed8972ac51d80c95079d4e3fcc2e3e26e9ea9d37

On form validation errors after submitting, keep the already uploaded image.

Files changed:
A plone/formwidget/namedfile/utils.py
M CHANGES.rst
M plone/formwidget/namedfile/configure.zcml
M plone/formwidget/namedfile/converter.py
M plone/formwidget/namedfile/file_input.pt
M plone/formwidget/namedfile/image_input.pt
M plone/formwidget/namedfile/interfaces.py
M plone/formwidget/namedfile/tests.py
M plone/formwidget/namedfile/validator.py
M plone/formwidget/namedfile/widget.py
M plone/formwidget/namedfile/widget.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ab2642d..fd447a5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,8 @@ Bug fixes:\n \n - Prepare for Python 2 / 3 compatibility\n   [ale-rt, pbauer]\n+- On form validation errors after submitting, keep the already uploaded image.\n+  [thet]\n \n \n 2.0.5 (2017-11-26)\ndiff --git a/plone/formwidget/namedfile/configure.zcml b/plone/formwidget/namedfile/configure.zcml\nindex fe2c412..ced1811 100644\n--- a/plone/formwidget/namedfile/configure.zcml\n+++ b/plone/formwidget/namedfile/configure.zcml\n@@ -12,6 +12,7 @@\n   <adapter factory=".converter.NamedDataConverter" />\n   <adapter factory=".converter.Base64Converter" />\n   <adapter factory=".validator.NamedFileWidgetValidator" />\n+  <adapter factory=".utils.FileUploadMap" />\n \n   <class class=".widget.NamedFileWidget">\n     <require\ndiff --git a/plone/formwidget/namedfile/converter.py b/plone/formwidget/namedfile/converter.py\nindex 0325160..58d4721 100644\n--- a/plone/formwidget/namedfile/converter.py\n+++ b/plone/formwidget/namedfile/converter.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.formwidget.namedfile import utils\n from plone.formwidget.namedfile.interfaces import INamedFileWidget\n from plone.formwidget.namedfile.interfaces import INamedImageWidget\n from plone.namedfile.file import NamedFile\n@@ -30,7 +31,8 @@ def toFieldValue(self, value):\n \n         if INamed.providedBy(value):\n             return value\n-        elif isinstance(value, FileUpload):\n+\n+        elif utils.is_file_upload(value):\n \n             filename = safe_basename(value.filename)\n \n@@ -107,7 +109,7 @@ def toFieldValue(self, value):\n             filename = value.filename\n             data = value.data\n \n-        elif isinstance(value, FileUpload):\n+        elif utils.is_file_upload(value):\n             filename = safe_basename(value.filename)\n             value.seek(0)\n             data = value.read()\ndiff --git a/plone/formwidget/namedfile/file_input.pt b/plone/formwidget/namedfile/file_input.pt\nindex 72e265b..b489ffd 100644\n--- a/plone/formwidget/namedfile/file_input.pt\n+++ b/plone/formwidget/namedfile/file_input.pt\n@@ -28,6 +28,11 @@\n                 doc_type view/file_content_type;\n                 icon view/file_icon;\n                 filename view/filename;">\n+    <input tal:define="up_id view/file_upload_id" tal:condition="up_id" type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n+    <span tal:condition="view/is_upload">\n+      <tal:i18n i18n:translate="file_already_uploaded">File already uploaded:</tal:i18n>\n+      ${view/value/filename}\n+    </span>\n     <span tal:condition="python: exists and download_url and action==\'nochange\'">\n         <img tal:condition="icon" src="" alt=""\n              tal:attributes="src icon;\n@@ -52,7 +57,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-nochange;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                            checked python:(action == \'nochange\') and \'checked\' or None;"\n+                            checked python:((action == \'nochange\') and \'checked\') or view.is_upload or None;"\n             />\n         <label\n             tal:attributes="for string:${view/id}-nochange" i18n:translate="file_keep">Keep existing file</label>\n@@ -65,7 +70,7 @@\n                 tal:attributes="name string:${view/name}.action;\n                                 id string:${view/id}-remove;\n                                 onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                                checked python:action == \'remove\' and \'checked\' or None;"\n+                                checked python:((action == \'remove\') and \'checked\') or None;"\n                 />\n             <label\n                 tal:attributes="for string:${view/id}-remove" i18n:translate="file_remove">Remove existing file</label>\n@@ -78,7 +83,8 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-replace;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=false;\n-                            checked python:action == \'replace\' and \'checked\' or None;" />\n+                            checked python:((action == \'replace\') and \'checked\' and not view.is_upload) or None;"\n+            />\n         <label\n             tal:attributes="for string:${view/id}-replace" i18n:translate="file_replace">Replace with new file</label>\n     </div>\ndiff --git a/plone/formwidget/namedfile/image_input.pt b/plone/formwidget/namedfile/image_input.pt\nindex a7a3dc9..7f60c7f 100644\n--- a/plone/formwidget/namedfile/image_input.pt\n+++ b/plone/formwidget/namedfile/image_input.pt\n@@ -28,6 +28,11 @@\n                 allow_nochange view/allow_nochange;\n                 doc_type view/file_content_type;\n                 icon view/file_icon;">\n+    <input tal:define="up_id view/file_upload_id" tal:condition="up_id" type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n+    <span tal:condition="view/is_upload">\n+      <tal:i18n i18n:translate="image_already_uploaded">Image already uploaded:</tal:i18n>\n+      ${view/value/filename}\n+    </span>\n     <span tal:condition="python:exists and download_url and action==\'nochange\'">\n       <a tal:attributes="href download_url">\n           <img tal:replace="structure view/thumb_tag"/>\n@@ -55,7 +60,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-nochange;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                            checked python:(action == \'nochange\') and \'checked\' or None;"\n+                            checked python:((action == \'nochange\') and \'checked\') or view.is_upload or None;"\n             />\n         <label\n             tal:attributes="for string:${view/id}-nochange" i18n:translate="image_keep">Keep existing image</label>\n@@ -68,7 +73,7 @@\n                 tal:attributes="name string:${view/name}.action;\n                                 id string:${view/id}-remove;\n                                 onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                                checked python:action== \'remove\' and \'checked\' or None;"\n+                                checked python:((action == \'remove\') and \'checked\') or None;"\n                 />\n             <label\n                 tal:attributes="for string:${view/id}-remove" i18n:translate="image_remove">Remove existing image</label>\n@@ -81,7 +86,8 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-replace;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=false;\n-                            checked python:action == \'replace\' and \'checked\' or None;" />\n+                            checked python:((action == \'replace\') and \'checked\' and not view.is_upload) or None;"\n+            />\n         <label\n             tal:attributes="for string:${view/id}-replace" i18n:translate="image_replace">Replace with new image</label>\n     </div>\ndiff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex 1c0f10d..71bcf94 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from z3c.form.interfaces import IFileWidget\n from zope import schema\n+from zope.interface import Interface\n \n \n class INamedFileWidget(IFileWidget):\n@@ -27,3 +28,9 @@ class INamedImageWidget(INamedFileWidget):\n     height = schema.Int(title=u"Image height", min=0, required=False)\n     thumb_tag = schema.Text(title=u"Thumbnail image tag", required=False)\n     alt = schema.TextLine(title=u"Image alternative text", required=False)\n+\n+\n+class IFileUploadMap(Interface):\n+    """Temporary storage adapter for file uploads.\n+    To be used to not need to re-upload files after form submission errors.\n+    """\ndiff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex 9e769b2..c1ee271 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -1,9 +1,10 @@\n # -*- coding: utf-8 -*-\n-import doctest\n-import unittest\n from plone.formwidget.namedfile.testing import INTEGRATION_TESTING\n from plone.testing import layered\n \n+import doctest\n+import unittest\n+\n \n def test_suite():\n     suite = unittest.TestSuite()\ndiff --git a/plone/formwidget/namedfile/utils.py b/plone/formwidget/namedfile/utils.py\nnew file mode 100644\nindex 0000000..50fefb2\n--- /dev/null\n+++ b/plone/formwidget/namedfile/utils.py\n@@ -0,0 +1,49 @@\n+# -*- coding: utf-8 -*-\n+from BTrees.OOBTree import OOBTree\n+from datetime import datetime\n+from datetime import timedelta\n+from plone.formwidget.namedfile.interfaces import IFileUploadMap\n+from random import randint\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from ZPublisher.HTTPRequest import FileUpload\n+\n+\n+FILE_UPLOAD_MAP_KEY = \'file_upload_map\'\n+FILE_UPLOAD_EXPIRATION_TIME = 30*60  # seconds\n+FALLBACK_DATE = datetime(2000, 2, 2)\n+\n+\n+def is_file_upload(item):\n+    """Check if ``item`` is a file upload.\n+    """\n+    return isinstance(item, FileUpload)\n+\n+\n+@implementer(IFileUploadMap)\n+@adapter(Interface)\n+class FileUploadMap(object):\n+    """Temporary storage adapter for file uploads.\n+    To be used to not need to re-upload files after form submission errors.\n+    """\n+\n+    def __init__(self, context):\n+        self.context = context\n+\n+    @property\n+    def upload_map(self):\n+        annotations = IAnnotations(self.context)\n+        # file_upload_id is of type long, therefore we need a OOBTree\n+        upload_map = annotations.get(FILE_UPLOAD_MAP_KEY, OOBTree())\n+\n+        for key, val in upload_map.items():\n+            if val.get(\'dt\', FALLBACK_DATE) < (\n+                datetime.now() - timedelta(\n+                    seconds=FILE_UPLOAD_EXPIRATION_TIME\n+                )\n+            ) and randint(0, 5) == 0:  # Avoid conflict errors by deleting only every fifth time  # noqa\n+                # Delete expired files or files without timestamp\n+                del upload_map[key]\n+        return upload_map\ndiff --git a/plone/formwidget/namedfile/validator.py b/plone/formwidget/namedfile/validator.py\nindex c1a19a8..0815f71 100644\n--- a/plone/formwidget/namedfile/validator.py\n+++ b/plone/formwidget/namedfile/validator.py\n@@ -18,6 +18,7 @@ def validate(self, value, force=False):\n             raise InvalidState()\n         return super(NamedFileWidgetValidator, self).validate(value, force)\n \n+\n validator.WidgetValidatorDiscriminators(\n     NamedFileWidgetValidator,\n     field=INamedField\ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 13f2920..2298998 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -1,12 +1,19 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import Explicit\n+from datetime import datetime\n+from plone.formwidget.namedfile import utils\n from plone.formwidget.namedfile.converter import b64decode_file\n+from plone.formwidget.namedfile.interfaces import IFileUploadMap\n from plone.formwidget.namedfile.interfaces import INamedFileWidget\n from plone.formwidget.namedfile.interfaces import INamedImageWidget\n+from plone.namedfile.file import NamedBlobFile\n+from plone.namedfile.file import NamedBlobImage\n from plone.namedfile.file import NamedFile\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamed\n+from plone.namedfile.interfaces import INamedBlobFileField\n+from plone.namedfile.interfaces import INamedBlobImageField\n from plone.namedfile.interfaces import INamedFileField\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.interfaces import INamedImageField\n@@ -34,9 +41,10 @@\n from zope.publisher.interfaces import NotFound\n from zope.schema.interfaces import IASCII\n from zope.size import byteDisplay\n-from ZPublisher.HTTPRequest import FileUpload\n \n import six\n+import uuid\n+\n \n try:\n     from os import SEEK_END\n@@ -48,12 +56,24 @@ def _make_namedfile(value, field, widget):\n     """Return a NamedImage or NamedFile instance, if it isn\'t already one -\n     e.g. when it\'s base64 encoded data.\n     """\n+    if INamed.providedBy(value):\n+        return value\n+\n     if isinstance(value, six.string_types) and IASCII.providedBy(field):\n         filename, data = b64decode_file(value)\n-        if INamedImageWidget.providedBy(widget):\n-            value = NamedImage(data=data, filename=filename)\n-        else:\n-            value = NamedFile(data=data, filename=filename)\n+    elif isinstance(value, dict):\n+        filename = value[\'filename\']\n+        data = value[\'data\']\n+\n+    if INamedBlobImageField.providedBy(field):\n+        value = NamedBlobImage(data=data, filename=filename)\n+    elif INamedImageField.providedBy(field):\n+        value = NamedImage(data=data, filename=filename)\n+    elif INamedBlobFileField.providedBy(field):\n+        value = NamedBlobFile(data=data, filename=filename)\n+    else:\n+        value = NamedFile(data=data, filename=filename)\n+\n     return value\n \n \n@@ -65,6 +85,28 @@ class NamedFileWidget(Explicit, file.FileWidget):\n     klass = u\'named-file-widget\'\n     value = None  # don\'t default to a string\n \n+    @property\n+    def is_upload(self):\n+        return utils.is_file_upload(self.value)\n+\n+    @property\n+    def file_upload_id(self):\n+        """Temporary store the uploaded file contents with a file_upload_id key.\n+        In case of form validation errors the already uploaded image can then\n+        be reused.\n+        """\n+        if self.is_upload:\n+            self.value.seek(0)\n+            upload_id = uuid.uuid4().int  # type long\n+            upload_map = IFileUploadMap(getSite()).upload_map\n+            upload_map[upload_id] = {\n+                \'filename\': self.value.filename,\n+                \'data\': self.value.read(),\n+                \'dt\': datetime.now(),\n+            }\n+            return upload_id\n+        return None\n+\n     @property\n     def allow_nochange(self):\n         return self.field is not None and \\\n@@ -77,7 +119,7 @@ def filename(self):\n             return None\n         elif INamed.providedBy(self.value):\n             return self.value.filename\n-        elif isinstance(self.value, FileUpload):\n+        elif utils.is_file_upload(self.value):\n             return safe_basename(self.value.filename)\n         else:\n             return None\n@@ -181,9 +223,11 @@ def action(self):\n         return action\n \n     def extract(self, default=NOVALUE):\n+        url = self.request.getURL()\n         action = self.request.get("%s.action" % self.name, None)\n-        if self.request.get(\n-                \'PATH_INFO\', \'\').endswith(\'kss_z3cform_inline_validation\'):\n+        if url.endswith(\'kss_z3cform_inline_validation\')\\\n+                or url.endswith(\'z3cform_validate_field\'):\n+            # Ignore validation requests.\n             action = \'nochange\'\n \n         if action == \'remove\':\n@@ -191,6 +235,42 @@ def extract(self, default=NOVALUE):\n         elif action == \'nochange\':\n             if self.value is not None:\n                 return self.value\n+\n+            if url.endswith(\'z3cform_validate_field\'):\n+                # Ignore validation requests.\n+                return None\n+\n+            # Handle already uploaded files in case of previous form errors\n+            file_upload_id = self.request.get(\n+                "%s.file_upload_id" % self.name\n+            ) or 0\n+            try:\n+                file_upload_id = int(file_upload_id)\n+            except ValueError:\n+                file_upload_id = None\n+            if file_upload_id:\n+                upload_map = IFileUploadMap(getSite()).upload_map\n+                fileinfo = upload_map.get(file_upload_id, {})\n+                filename = fileinfo.get(\'filename\')\n+                data = fileinfo.get(\'data\')\n+                if filename or data:\n+                    filename = safe_basename(filename)\n+                    if (\n+                            filename is not None\n+                            and not isinstance(filename, unicode)\n+                    ):\n+                        # work-around for\n+                        # https://bugs.launchpad.net/zope2/+bug/499696\n+                        filename = filename.decode(\'utf-8\')\n+                    del upload_map[file_upload_id]\n+                    value = {\n+                        \'data\': data,\n+                        \'filename\': filename,\n+                    }\n+                    ret = _make_namedfile(value, self.field, self)\n+\n+                    return ret\n+\n             if self.ignoreContext:\n                 return default\n             dm = getMultiAdapter((self.context, self.field,), IDataManager)\n@@ -201,7 +281,7 @@ def extract(self, default=NOVALUE):\n \n         # empty unnamed FileUploads should not count as a value\n         value = super(NamedFileWidget, self).extract(default)\n-        if isinstance(value, FileUpload):\n+        if utils.is_file_upload(value):\n             value.seek(0, SEEK_END)\n             empty = value.tell() == 0\n             value.seek(0)\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex fceee62..dc5230c 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -145,12 +145,22 @@ The rendering is unchanged::\n \n   >>> print(file_widget.render())\n   <span id="widget.id.file" class="named-file-widget">\n+      <input type="hidden" name="widget.name.file.file_upload_id" value="...\n+      <span>\n+        File already uploaded:\n+        foo.bar\n+      </span>\n       <input type="file" id="widget.id.file-input"\n              name="widget.name.file" />\n   </span>\n \n   >>> print(image_widget.render())\n   <span id="widget.id.image" class="named-image-widget">\n+      <input type="hidden" name="widget.name.image.file_upload_id" value="...\n+      <span>\n+        Image already uploaded:\n+        foo.bar\n+      </span>\n       <input type="file" id="widget.id.image-input"\n              name="widget.name.image" />\n   </span>\n@@ -659,7 +669,7 @@ Let\'s upload data::\n   >>> content.file_field\n   \'filenameb64:ZmlsZTEudHh0;datab64:ZmlsZSAxIGNvbnRlbnQu\'\n \n-Check that we have a good image that PIL can handle:\n+Check that we have a good image that PIL can handle::\n \n   >>> import PIL.Image\n   >>> PIL.Image.open(get_file(\'image.jpg\'))\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-27T14:12:16+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/48d2f7bbc0a6e83e72e304602b7d70f7bfa33357

fix problem with multiple submits where upload was lost

Files changed:
M plone/formwidget/namedfile/file_input.pt
M plone/formwidget/namedfile/image_input.pt
M plone/formwidget/namedfile/widget.py

b'diff --git a/plone/formwidget/namedfile/file_input.pt b/plone/formwidget/namedfile/file_input.pt\nindex b489ffd..ad7acde 100644\n--- a/plone/formwidget/namedfile/file_input.pt\n+++ b/plone/formwidget/namedfile/file_input.pt\n@@ -28,11 +28,13 @@\n                 doc_type view/file_content_type;\n                 icon view/file_icon;\n                 filename view/filename;">\n-    <input tal:define="up_id view/file_upload_id" tal:condition="up_id" type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n-    <span tal:condition="view/is_upload">\n-      <tal:i18n i18n:translate="file_already_uploaded">File already uploaded:</tal:i18n>\n-      ${view/value/filename}\n-    </span>\n+    <tal:if tal:define="up_id view/file_upload_id" tal:condition="up_id">\n+      <input type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n+      <span>\n+        <tal:i18n i18n:translate="file_already_uploaded">File already uploaded:</tal:i18n>\n+        ${view/value/filename}\n+      </span>\n+    </tal:if>\n     <span tal:condition="python: exists and download_url and action==\'nochange\'">\n         <img tal:condition="icon" src="" alt=""\n              tal:attributes="src icon;\ndiff --git a/plone/formwidget/namedfile/image_input.pt b/plone/formwidget/namedfile/image_input.pt\nindex 7f60c7f..e42e907 100644\n--- a/plone/formwidget/namedfile/image_input.pt\n+++ b/plone/formwidget/namedfile/image_input.pt\n@@ -28,11 +28,13 @@\n                 allow_nochange view/allow_nochange;\n                 doc_type view/file_content_type;\n                 icon view/file_icon;">\n-    <input tal:define="up_id view/file_upload_id" tal:condition="up_id" type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n-    <span tal:condition="view/is_upload">\n-      <tal:i18n i18n:translate="image_already_uploaded">Image already uploaded:</tal:i18n>\n-      ${view/value/filename}\n-    </span>\n+    <tal:if tal:define="up_id view/file_upload_id" tal:condition="up_id">\n+      <input type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n+      <span>\n+        <tal:i18n i18n:translate="image_already_uploaded">Image already uploaded:</tal:i18n>\n+        ${view/value/filename}\n+      </span>\n+    </tal:if>\n     <span tal:condition="python:exists and download_url and action==\'nochange\'">\n       <a tal:attributes="href download_url">\n           <img tal:replace="structure view/thumb_tag"/>\ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 2298998..8a61967 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -84,6 +84,7 @@ class NamedFileWidget(Explicit, file.FileWidget):\n \n     klass = u\'named-file-widget\'\n     value = None  # don\'t default to a string\n+    _file_upload_id = None\n \n     @property\n     def is_upload(self):\n@@ -95,17 +96,31 @@ def file_upload_id(self):\n         In case of form validation errors the already uploaded image can then\n         be reused.\n         """\n-        if self.is_upload:\n-            self.value.seek(0)\n+        if self._file_upload_id:\n+            # cache this property for multiple calls within one request.\n+            # This avoids storing a file upload multiple times.\n+            return self._file_upload_id\n+\n+        upload_id = None\n+        if self.is_upload or INamed.providedBy(self.value):\n+            data = None\n+            if INamed.providedBy(self.value):\n+                # previously uploaded and failed\n+                data = self.value.data\n+            else:\n+                self.value.seek(0)\n+                data = self.value.read()\n+\n             upload_id = uuid.uuid4().int  # type long\n             upload_map = IFileUploadMap(getSite()).upload_map\n             upload_map[upload_id] = {\n                 \'filename\': self.value.filename,\n-                \'data\': self.value.read(),\n+                \'data\': data,\n                 \'dt\': datetime.now(),\n             }\n-            return upload_id\n-        return None\n+\n+        self._file_upload_id = upload_id\n+        return upload_id\n \n     @property\n     def allow_nochange(self):\n@@ -115,9 +130,7 @@ def allow_nochange(self):\n \n     @property\n     def filename(self):\n-        if self.field is not None and self.value == self.field.missing_value:\n-            return None\n-        elif INamed.providedBy(self.value):\n+        if INamed.providedBy(self.value):\n             return self.value.filename\n         elif utils.is_file_upload(self.value):\n             return safe_basename(self.value.filename)\n@@ -268,7 +281,6 @@ def extract(self, default=NOVALUE):\n                         \'filename\': filename,\n                     }\n                     ret = _make_namedfile(value, self.field, self)\n-\n                     return ret\n \n             if self.ignoreContext:\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-27T15:17:03+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/ddf0bf13c636089dc783b465a0091bdb46be9627

template simplification

Files changed:
M plone/formwidget/namedfile/file_input.pt
M plone/formwidget/namedfile/image_input.pt
M plone/formwidget/namedfile/widget.py

b'diff --git a/plone/formwidget/namedfile/file_input.pt b/plone/formwidget/namedfile/file_input.pt\nindex ad7acde..635b0a7 100644\n--- a/plone/formwidget/namedfile/file_input.pt\n+++ b/plone/formwidget/namedfile/file_input.pt\n@@ -35,13 +35,13 @@\n         ${view/value/filename}\n       </span>\n     </tal:if>\n-    <span tal:condition="python: exists and download_url and action==\'nochange\'">\n+    <span tal:condition="python:exists and download_url and action==\'nochange\'">\n         <img tal:condition="icon" src="" alt=""\n              tal:attributes="src icon;\n                              alt doc_type;\n                              title filename;"/>\n         <a\n-            tal:content="view/filename"\n+            tal:content="filename"\n             tal:attributes="href download_url"\n             >Filename</a>\n         <span class="discreet"> &mdash;<tal:doc_type condition="doc_type">\n@@ -59,7 +59,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-nochange;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                            checked python:((action == \'nochange\') and \'checked\') or view.is_upload or None;"\n+                            checked python:\'checked\' if action == \'nochange\' else None"\n             />\n         <label\n             tal:attributes="for string:${view/id}-nochange" i18n:translate="file_keep">Keep existing file</label>\n@@ -72,7 +72,7 @@\n                 tal:attributes="name string:${view/name}.action;\n                                 id string:${view/id}-remove;\n                                 onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                                checked python:((action == \'remove\') and \'checked\') or None;"\n+                                checked python:\'checked\' if action == \'remove\' else None"\n                 />\n             <label\n                 tal:attributes="for string:${view/id}-remove" i18n:translate="file_remove">Remove existing file</label>\n@@ -85,7 +85,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-replace;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=false;\n-                            checked python:((action == \'replace\') and \'checked\' and not view.is_upload) or None;"\n+                            checked python:\'checked\' if action == \'replace\' else None"\n             />\n         <label\n             tal:attributes="for string:${view/id}-replace" i18n:translate="file_replace">Replace with new file</label>\ndiff --git a/plone/formwidget/namedfile/image_input.pt b/plone/formwidget/namedfile/image_input.pt\nindex e42e907..d376898 100644\n--- a/plone/formwidget/namedfile/image_input.pt\n+++ b/plone/formwidget/namedfile/image_input.pt\n@@ -22,12 +22,12 @@\n                     accesskey view/accesskey;\n                     onselect view/onselect;"\n     tal:define="download_url view/download_url;\n-                filename view/filename;\n                 exists python: view.value is not None;\n                 action view/action;\n                 allow_nochange view/allow_nochange;\n                 doc_type view/file_content_type;\n-                icon view/file_icon;">\n+                icon view/file_icon;\n+                filename view/filename;">\n     <tal:if tal:define="up_id view/file_upload_id" tal:condition="up_id">\n       <input type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n       <span>\n@@ -62,7 +62,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-nochange;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                            checked python:((action == \'nochange\') and \'checked\') or view.is_upload or None;"\n+                            checked python:\'checked\' if action == \'nochange\' else None"\n             />\n         <label\n             tal:attributes="for string:${view/id}-nochange" i18n:translate="image_keep">Keep existing image</label>\n@@ -75,7 +75,7 @@\n                 tal:attributes="name string:${view/name}.action;\n                                 id string:${view/id}-remove;\n                                 onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                                checked python:((action == \'remove\') and \'checked\') or None;"\n+                                checked python:\'checked\' if action == \'remove\' else None"\n                 />\n             <label\n                 tal:attributes="for string:${view/id}-remove" i18n:translate="image_remove">Remove existing image</label>\n@@ -88,7 +88,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-replace;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=false;\n-                            checked python:((action == \'replace\') and \'checked\' and not view.is_upload) or None;"\n+                            checked python:\'checked\' if action == \'replace\' else None"\n             />\n         <label\n             tal:attributes="for string:${view/id}-replace" i18n:translate="image_replace">Replace with new image</label>\ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 8a61967..0fcd64b 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -87,8 +87,9 @@ class NamedFileWidget(Explicit, file.FileWidget):\n     _file_upload_id = None\n \n     @property\n-    def is_upload(self):\n-        return utils.is_file_upload(self.value)\n+    def is_uploaded(self):\n+        return utils.is_file_upload(self.value)\\\n+            or INamed.providedBy(self.value)\n \n     @property\n     def file_upload_id(self):\n@@ -102,7 +103,7 @@ def file_upload_id(self):\n             return self._file_upload_id\n \n         upload_id = None\n-        if self.is_upload or INamed.providedBy(self.value):\n+        if self.is_uploaded:\n             data = None\n             if INamed.providedBy(self.value):\n                 # previously uploaded and failed\n@@ -229,8 +230,10 @@ def download_url(self):\n \n     def action(self):\n         action = self.request.get("%s.action" % self.name, "nochange")\n-        if hasattr(self.form, \'successMessage\')\\\n-                and self.form.status == self.form.successMessage:\n+        if self.is_uploaded or (\n+            hasattr(self.form, \'successMessage\')\n+            and self.form.status == self.form.successMessage\n+        ):\n             # if form action completed successfully, we want nochange\n             action = \'nochange\'\n         return action\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-07-02T18:04:20+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/9848787b3457a61916c35d280a21d5952689e4c5

setdefault, PersistentDict, cleanup, rename

- Need to setdefault upload_map otherwise a new object is always returned and cannot be persisted.
- Use PersistentDict for individual upload records.
- Cleanup factored out into own method and called only when map is being
modified.
- Rename adapter.

Files changed:
M plone/formwidget/namedfile/configure.zcml
M plone/formwidget/namedfile/interfaces.py
M plone/formwidget/namedfile/utils.py
M plone/formwidget/namedfile/widget.py

b'diff --git a/plone/formwidget/namedfile/configure.zcml b/plone/formwidget/namedfile/configure.zcml\nindex ced1811..393ad9b 100644\n--- a/plone/formwidget/namedfile/configure.zcml\n+++ b/plone/formwidget/namedfile/configure.zcml\n@@ -12,7 +12,7 @@\n   <adapter factory=".converter.NamedDataConverter" />\n   <adapter factory=".converter.Base64Converter" />\n   <adapter factory=".validator.NamedFileWidgetValidator" />\n-  <adapter factory=".utils.FileUploadMap" />\n+  <adapter factory=".utils.FileUploadTemporaryStorage" />\n \n   <class class=".widget.NamedFileWidget">\n     <require\ndiff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex 71bcf94..9bf2488 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from z3c.form.interfaces import IFileWidget\n from zope import schema\n+from zope.interface import Attribute\n from zope.interface import Interface\n \n \n@@ -30,7 +31,15 @@ class INamedImageWidget(INamedFileWidget):\n     alt = schema.TextLine(title=u"Image alternative text", required=False)\n \n \n-class IFileUploadMap(Interface):\n+class IFileUploadTemporaryStorage(Interface):\n     """Temporary storage adapter for file uploads.\n     To be used to not need to re-upload files after form submission errors.\n     """\n+    upload_map = Attribute("""\n+        Mapping for temporary uploads.\n+        Key is a uuid4.hex value.\n+        The default storage is the annotation storage of the poral root.\n+    """)\n+\n+    def cleanup():\n+        """Removes stale temporary uploads from the upload storage"""\ndiff --git a/plone/formwidget/namedfile/utils.py b/plone/formwidget/namedfile/utils.py\nindex 50fefb2..da16d48 100644\n--- a/plone/formwidget/namedfile/utils.py\n+++ b/plone/formwidget/namedfile/utils.py\n@@ -2,7 +2,8 @@\n from BTrees.OOBTree import OOBTree\n from datetime import datetime\n from datetime import timedelta\n-from plone.formwidget.namedfile.interfaces import IFileUploadMap\n+from persistent.dict import PersistentDict\n+from plone.formwidget.namedfile.interfaces import IFileUploadTemporaryStorage\n from random import randint\n from zope.annotation.interfaces import IAnnotations\n from zope.component import adapter\n@@ -22,9 +23,9 @@ def is_file_upload(item):\n     return isinstance(item, FileUpload)\n \n \n-@implementer(IFileUploadMap)\n+@implementer(IFileUploadTemporaryStorage)\n @adapter(Interface)\n-class FileUploadMap(object):\n+class FileUploadTemporaryStorage(object):\n     """Temporary storage adapter for file uploads.\n     To be used to not need to re-upload files after form submission errors.\n     """\n@@ -35,9 +36,13 @@ def __init__(self, context):\n     @property\n     def upload_map(self):\n         annotations = IAnnotations(self.context)\n-        # file_upload_id is of type long, therefore we need a OOBTree\n-        upload_map = annotations.get(FILE_UPLOAD_MAP_KEY, OOBTree())\n+        upload_map = annotations.setdefault(FILE_UPLOAD_MAP_KEY, OOBTree())\n+        return upload_map\n \n+    def cleanup(self):\n+        """Remove obsolete temporary uploads.\n+        """\n+        upload_map = self.upload_map\n         for key, val in upload_map.items():\n             if val.get(\'dt\', FALLBACK_DATE) < (\n                 datetime.now() - timedelta(\n@@ -46,4 +51,3 @@ def upload_map(self):\n             ) and randint(0, 5) == 0:  # Avoid conflict errors by deleting only every fifth time  # noqa\n                 # Delete expired files or files without timestamp\n                 del upload_map[key]\n-        return upload_map\ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 0fcd64b..0ba758a 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -4,7 +4,7 @@\n from datetime import datetime\n from plone.formwidget.namedfile import utils\n from plone.formwidget.namedfile.converter import b64decode_file\n-from plone.formwidget.namedfile.interfaces import IFileUploadMap\n+from plone.formwidget.namedfile.interfaces import IFileUploadTemporaryStorage\n from plone.formwidget.namedfile.interfaces import INamedFileWidget\n from plone.formwidget.namedfile.interfaces import INamedImageWidget\n from plone.namedfile.file import NamedBlobFile\n@@ -41,7 +41,7 @@\n from zope.publisher.interfaces import NotFound\n from zope.schema.interfaces import IASCII\n from zope.size import byteDisplay\n-\n+from persistent.dict import PersistentDict\n import six\n import uuid\n \n@@ -61,7 +61,7 @@ def _make_namedfile(value, field, widget):\n \n     if isinstance(value, six.string_types) and IASCII.providedBy(field):\n         filename, data = b64decode_file(value)\n-    elif isinstance(value, dict):\n+    elif isinstance(value, dict) or isinstance(value, PersistentDict):\n         filename = value[\'filename\']\n         data = value[\'data\']\n \n@@ -112,13 +112,14 @@ def file_upload_id(self):\n                 self.value.seek(0)\n                 data = self.value.read()\n \n-            upload_id = uuid.uuid4().int  # type long\n-            upload_map = IFileUploadMap(getSite()).upload_map\n-            upload_map[upload_id] = {\n-                \'filename\': self.value.filename,\n-                \'data\': data,\n-                \'dt\': datetime.now(),\n-            }\n+            upload_id = uuid.uuid4().hex\n+            up = IFileUploadTemporaryStorage(getSite())\n+            up.cleanup()\n+            up.upload_map[upload_id] = PersistentDict(\n+                filename=self.value.filename,\n+                data=data,\n+                dt=datetime.now(),\n+            )\n \n         self._file_upload_id = upload_id\n         return upload_id\n@@ -260,15 +261,12 @@ def extract(self, default=NOVALUE):\n             file_upload_id = self.request.get(\n                 "%s.file_upload_id" % self.name\n             ) or 0\n-            try:\n-                file_upload_id = int(file_upload_id)\n-            except ValueError:\n-                file_upload_id = None\n             if file_upload_id:\n-                upload_map = IFileUploadMap(getSite()).upload_map\n+                upload_map = IFileUploadTemporaryStorage(getSite()).upload_map\n                 fileinfo = upload_map.get(file_upload_id, {})\n                 filename = fileinfo.get(\'filename\')\n                 data = fileinfo.get(\'data\')\n+\n                 if filename or data:\n                     filename = safe_basename(filename)\n                     if (\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-07-04T09:39:19+02:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/6ff696977d0e09766b1c2f04eead16ede9e0bc13

Merge pull request #32 from plone/thet-fileuploadfix2

On form validation errors after submitting, keep the already uploaded image

Files changed:
A plone/formwidget/namedfile/utils.py
M CHANGES.rst
M plone/formwidget/namedfile/configure.zcml
M plone/formwidget/namedfile/converter.py
M plone/formwidget/namedfile/file_input.pt
M plone/formwidget/namedfile/image_input.pt
M plone/formwidget/namedfile/interfaces.py
M plone/formwidget/namedfile/tests.py
M plone/formwidget/namedfile/validator.py
M plone/formwidget/namedfile/widget.py
M plone/formwidget/namedfile/widget.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ab2642d..fd447a5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,8 @@ Bug fixes:\n \n - Prepare for Python 2 / 3 compatibility\n   [ale-rt, pbauer]\n+- On form validation errors after submitting, keep the already uploaded image.\n+  [thet]\n \n \n 2.0.5 (2017-11-26)\ndiff --git a/plone/formwidget/namedfile/configure.zcml b/plone/formwidget/namedfile/configure.zcml\nindex fe2c412..393ad9b 100644\n--- a/plone/formwidget/namedfile/configure.zcml\n+++ b/plone/formwidget/namedfile/configure.zcml\n@@ -12,6 +12,7 @@\n   <adapter factory=".converter.NamedDataConverter" />\n   <adapter factory=".converter.Base64Converter" />\n   <adapter factory=".validator.NamedFileWidgetValidator" />\n+  <adapter factory=".utils.FileUploadTemporaryStorage" />\n \n   <class class=".widget.NamedFileWidget">\n     <require\ndiff --git a/plone/formwidget/namedfile/converter.py b/plone/formwidget/namedfile/converter.py\nindex 0325160..58d4721 100644\n--- a/plone/formwidget/namedfile/converter.py\n+++ b/plone/formwidget/namedfile/converter.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.formwidget.namedfile import utils\n from plone.formwidget.namedfile.interfaces import INamedFileWidget\n from plone.formwidget.namedfile.interfaces import INamedImageWidget\n from plone.namedfile.file import NamedFile\n@@ -30,7 +31,8 @@ def toFieldValue(self, value):\n \n         if INamed.providedBy(value):\n             return value\n-        elif isinstance(value, FileUpload):\n+\n+        elif utils.is_file_upload(value):\n \n             filename = safe_basename(value.filename)\n \n@@ -107,7 +109,7 @@ def toFieldValue(self, value):\n             filename = value.filename\n             data = value.data\n \n-        elif isinstance(value, FileUpload):\n+        elif utils.is_file_upload(value):\n             filename = safe_basename(value.filename)\n             value.seek(0)\n             data = value.read()\ndiff --git a/plone/formwidget/namedfile/file_input.pt b/plone/formwidget/namedfile/file_input.pt\nindex 72e265b..635b0a7 100644\n--- a/plone/formwidget/namedfile/file_input.pt\n+++ b/plone/formwidget/namedfile/file_input.pt\n@@ -28,13 +28,20 @@\n                 doc_type view/file_content_type;\n                 icon view/file_icon;\n                 filename view/filename;">\n-    <span tal:condition="python: exists and download_url and action==\'nochange\'">\n+    <tal:if tal:define="up_id view/file_upload_id" tal:condition="up_id">\n+      <input type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n+      <span>\n+        <tal:i18n i18n:translate="file_already_uploaded">File already uploaded:</tal:i18n>\n+        ${view/value/filename}\n+      </span>\n+    </tal:if>\n+    <span tal:condition="python:exists and download_url and action==\'nochange\'">\n         <img tal:condition="icon" src="" alt=""\n              tal:attributes="src icon;\n                              alt doc_type;\n                              title filename;"/>\n         <a\n-            tal:content="view/filename"\n+            tal:content="filename"\n             tal:attributes="href download_url"\n             >Filename</a>\n         <span class="discreet"> &mdash;<tal:doc_type condition="doc_type">\n@@ -52,7 +59,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-nochange;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                            checked python:(action == \'nochange\') and \'checked\' or None;"\n+                            checked python:\'checked\' if action == \'nochange\' else None"\n             />\n         <label\n             tal:attributes="for string:${view/id}-nochange" i18n:translate="file_keep">Keep existing file</label>\n@@ -65,7 +72,7 @@\n                 tal:attributes="name string:${view/name}.action;\n                                 id string:${view/id}-remove;\n                                 onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                                checked python:action == \'remove\' and \'checked\' or None;"\n+                                checked python:\'checked\' if action == \'remove\' else None"\n                 />\n             <label\n                 tal:attributes="for string:${view/id}-remove" i18n:translate="file_remove">Remove existing file</label>\n@@ -78,7 +85,8 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-replace;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=false;\n-                            checked python:action == \'replace\' and \'checked\' or None;" />\n+                            checked python:\'checked\' if action == \'replace\' else None"\n+            />\n         <label\n             tal:attributes="for string:${view/id}-replace" i18n:translate="file_replace">Replace with new file</label>\n     </div>\ndiff --git a/plone/formwidget/namedfile/image_input.pt b/plone/formwidget/namedfile/image_input.pt\nindex a7a3dc9..d376898 100644\n--- a/plone/formwidget/namedfile/image_input.pt\n+++ b/plone/formwidget/namedfile/image_input.pt\n@@ -22,12 +22,19 @@\n                     accesskey view/accesskey;\n                     onselect view/onselect;"\n     tal:define="download_url view/download_url;\n-                filename view/filename;\n                 exists python: view.value is not None;\n                 action view/action;\n                 allow_nochange view/allow_nochange;\n                 doc_type view/file_content_type;\n-                icon view/file_icon;">\n+                icon view/file_icon;\n+                filename view/filename;">\n+    <tal:if tal:define="up_id view/file_upload_id" tal:condition="up_id">\n+      <input type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n+      <span>\n+        <tal:i18n i18n:translate="image_already_uploaded">Image already uploaded:</tal:i18n>\n+        ${view/value/filename}\n+      </span>\n+    </tal:if>\n     <span tal:condition="python:exists and download_url and action==\'nochange\'">\n       <a tal:attributes="href download_url">\n           <img tal:replace="structure view/thumb_tag"/>\n@@ -55,7 +62,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-nochange;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                            checked python:(action == \'nochange\') and \'checked\' or None;"\n+                            checked python:\'checked\' if action == \'nochange\' else None"\n             />\n         <label\n             tal:attributes="for string:${view/id}-nochange" i18n:translate="image_keep">Keep existing image</label>\n@@ -68,7 +75,7 @@\n                 tal:attributes="name string:${view/name}.action;\n                                 id string:${view/id}-remove;\n                                 onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                                checked python:action== \'remove\' and \'checked\' or None;"\n+                                checked python:\'checked\' if action == \'remove\' else None"\n                 />\n             <label\n                 tal:attributes="for string:${view/id}-remove" i18n:translate="image_remove">Remove existing image</label>\n@@ -81,7 +88,8 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-replace;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=false;\n-                            checked python:action == \'replace\' and \'checked\' or None;" />\n+                            checked python:\'checked\' if action == \'replace\' else None"\n+            />\n         <label\n             tal:attributes="for string:${view/id}-replace" i18n:translate="image_replace">Replace with new image</label>\n     </div>\ndiff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex 1c0f10d..9bf2488 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from z3c.form.interfaces import IFileWidget\n from zope import schema\n+from zope.interface import Attribute\n+from zope.interface import Interface\n \n \n class INamedFileWidget(IFileWidget):\n@@ -27,3 +29,17 @@ class INamedImageWidget(INamedFileWidget):\n     height = schema.Int(title=u"Image height", min=0, required=False)\n     thumb_tag = schema.Text(title=u"Thumbnail image tag", required=False)\n     alt = schema.TextLine(title=u"Image alternative text", required=False)\n+\n+\n+class IFileUploadTemporaryStorage(Interface):\n+    """Temporary storage adapter for file uploads.\n+    To be used to not need to re-upload files after form submission errors.\n+    """\n+    upload_map = Attribute("""\n+        Mapping for temporary uploads.\n+        Key is a uuid4.hex value.\n+        The default storage is the annotation storage of the poral root.\n+    """)\n+\n+    def cleanup():\n+        """Removes stale temporary uploads from the upload storage"""\ndiff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex 9e769b2..c1ee271 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -1,9 +1,10 @@\n # -*- coding: utf-8 -*-\n-import doctest\n-import unittest\n from plone.formwidget.namedfile.testing import INTEGRATION_TESTING\n from plone.testing import layered\n \n+import doctest\n+import unittest\n+\n \n def test_suite():\n     suite = unittest.TestSuite()\ndiff --git a/plone/formwidget/namedfile/utils.py b/plone/formwidget/namedfile/utils.py\nnew file mode 100644\nindex 0000000..da16d48\n--- /dev/null\n+++ b/plone/formwidget/namedfile/utils.py\n@@ -0,0 +1,53 @@\n+# -*- coding: utf-8 -*-\n+from BTrees.OOBTree import OOBTree\n+from datetime import datetime\n+from datetime import timedelta\n+from persistent.dict import PersistentDict\n+from plone.formwidget.namedfile.interfaces import IFileUploadTemporaryStorage\n+from random import randint\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from ZPublisher.HTTPRequest import FileUpload\n+\n+\n+FILE_UPLOAD_MAP_KEY = \'file_upload_map\'\n+FILE_UPLOAD_EXPIRATION_TIME = 30*60  # seconds\n+FALLBACK_DATE = datetime(2000, 2, 2)\n+\n+\n+def is_file_upload(item):\n+    """Check if ``item`` is a file upload.\n+    """\n+    return isinstance(item, FileUpload)\n+\n+\n+@implementer(IFileUploadTemporaryStorage)\n+@adapter(Interface)\n+class FileUploadTemporaryStorage(object):\n+    """Temporary storage adapter for file uploads.\n+    To be used to not need to re-upload files after form submission errors.\n+    """\n+\n+    def __init__(self, context):\n+        self.context = context\n+\n+    @property\n+    def upload_map(self):\n+        annotations = IAnnotations(self.context)\n+        upload_map = annotations.setdefault(FILE_UPLOAD_MAP_KEY, OOBTree())\n+        return upload_map\n+\n+    def cleanup(self):\n+        """Remove obsolete temporary uploads.\n+        """\n+        upload_map = self.upload_map\n+        for key, val in upload_map.items():\n+            if val.get(\'dt\', FALLBACK_DATE) < (\n+                datetime.now() - timedelta(\n+                    seconds=FILE_UPLOAD_EXPIRATION_TIME\n+                )\n+            ) and randint(0, 5) == 0:  # Avoid conflict errors by deleting only every fifth time  # noqa\n+                # Delete expired files or files without timestamp\n+                del upload_map[key]\ndiff --git a/plone/formwidget/namedfile/validator.py b/plone/formwidget/namedfile/validator.py\nindex c1a19a8..0815f71 100644\n--- a/plone/formwidget/namedfile/validator.py\n+++ b/plone/formwidget/namedfile/validator.py\n@@ -18,6 +18,7 @@ def validate(self, value, force=False):\n             raise InvalidState()\n         return super(NamedFileWidgetValidator, self).validate(value, force)\n \n+\n validator.WidgetValidatorDiscriminators(\n     NamedFileWidgetValidator,\n     field=INamedField\ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 13f2920..0ba758a 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -1,12 +1,19 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import Explicit\n+from datetime import datetime\n+from plone.formwidget.namedfile import utils\n from plone.formwidget.namedfile.converter import b64decode_file\n+from plone.formwidget.namedfile.interfaces import IFileUploadTemporaryStorage\n from plone.formwidget.namedfile.interfaces import INamedFileWidget\n from plone.formwidget.namedfile.interfaces import INamedImageWidget\n+from plone.namedfile.file import NamedBlobFile\n+from plone.namedfile.file import NamedBlobImage\n from plone.namedfile.file import NamedFile\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamed\n+from plone.namedfile.interfaces import INamedBlobFileField\n+from plone.namedfile.interfaces import INamedBlobImageField\n from plone.namedfile.interfaces import INamedFileField\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.interfaces import INamedImageField\n@@ -34,9 +41,10 @@\n from zope.publisher.interfaces import NotFound\n from zope.schema.interfaces import IASCII\n from zope.size import byteDisplay\n-from ZPublisher.HTTPRequest import FileUpload\n-\n+from persistent.dict import PersistentDict\n import six\n+import uuid\n+\n \n try:\n     from os import SEEK_END\n@@ -48,12 +56,24 @@ def _make_namedfile(value, field, widget):\n     """Return a NamedImage or NamedFile instance, if it isn\'t already one -\n     e.g. when it\'s base64 encoded data.\n     """\n+    if INamed.providedBy(value):\n+        return value\n+\n     if isinstance(value, six.string_types) and IASCII.providedBy(field):\n         filename, data = b64decode_file(value)\n-        if INamedImageWidget.providedBy(widget):\n-            value = NamedImage(data=data, filename=filename)\n-        else:\n-            value = NamedFile(data=data, filename=filename)\n+    elif isinstance(value, dict) or isinstance(value, PersistentDict):\n+        filename = value[\'filename\']\n+        data = value[\'data\']\n+\n+    if INamedBlobImageField.providedBy(field):\n+        value = NamedBlobImage(data=data, filename=filename)\n+    elif INamedImageField.providedBy(field):\n+        value = NamedImage(data=data, filename=filename)\n+    elif INamedBlobFileField.providedBy(field):\n+        value = NamedBlobFile(data=data, filename=filename)\n+    else:\n+        value = NamedFile(data=data, filename=filename)\n+\n     return value\n \n \n@@ -64,6 +84,45 @@ class NamedFileWidget(Explicit, file.FileWidget):\n \n     klass = u\'named-file-widget\'\n     value = None  # don\'t default to a string\n+    _file_upload_id = None\n+\n+    @property\n+    def is_uploaded(self):\n+        return utils.is_file_upload(self.value)\\\n+            or INamed.providedBy(self.value)\n+\n+    @property\n+    def file_upload_id(self):\n+        """Temporary store the uploaded file contents with a file_upload_id key.\n+        In case of form validation errors the already uploaded image can then\n+        be reused.\n+        """\n+        if self._file_upload_id:\n+            # cache this property for multiple calls within one request.\n+            # This avoids storing a file upload multiple times.\n+            return self._file_upload_id\n+\n+        upload_id = None\n+        if self.is_uploaded:\n+            data = None\n+            if INamed.providedBy(self.value):\n+                # previously uploaded and failed\n+                data = self.value.data\n+            else:\n+                self.value.seek(0)\n+                data = self.value.read()\n+\n+            upload_id = uuid.uuid4().hex\n+            up = IFileUploadTemporaryStorage(getSite())\n+            up.cleanup()\n+            up.upload_map[upload_id] = PersistentDict(\n+                filename=self.value.filename,\n+                data=data,\n+                dt=datetime.now(),\n+            )\n+\n+        self._file_upload_id = upload_id\n+        return upload_id\n \n     @property\n     def allow_nochange(self):\n@@ -73,11 +132,9 @@ def allow_nochange(self):\n \n     @property\n     def filename(self):\n-        if self.field is not None and self.value == self.field.missing_value:\n-            return None\n-        elif INamed.providedBy(self.value):\n+        if INamed.providedBy(self.value):\n             return self.value.filename\n-        elif isinstance(self.value, FileUpload):\n+        elif utils.is_file_upload(self.value):\n             return safe_basename(self.value.filename)\n         else:\n             return None\n@@ -174,16 +231,20 @@ def download_url(self):\n \n     def action(self):\n         action = self.request.get("%s.action" % self.name, "nochange")\n-        if hasattr(self.form, \'successMessage\')\\\n-                and self.form.status == self.form.successMessage:\n+        if self.is_uploaded or (\n+            hasattr(self.form, \'successMessage\')\n+            and self.form.status == self.form.successMessage\n+        ):\n             # if form action completed successfully, we want nochange\n             action = \'nochange\'\n         return action\n \n     def extract(self, default=NOVALUE):\n+        url = self.request.getURL()\n         action = self.request.get("%s.action" % self.name, None)\n-        if self.request.get(\n-                \'PATH_INFO\', \'\').endswith(\'kss_z3cform_inline_validation\'):\n+        if url.endswith(\'kss_z3cform_inline_validation\')\\\n+                or url.endswith(\'z3cform_validate_field\'):\n+            # Ignore validation requests.\n             action = \'nochange\'\n \n         if action == \'remove\':\n@@ -191,6 +252,38 @@ def extract(self, default=NOVALUE):\n         elif action == \'nochange\':\n             if self.value is not None:\n                 return self.value\n+\n+            if url.endswith(\'z3cform_validate_field\'):\n+                # Ignore validation requests.\n+                return None\n+\n+            # Handle already uploaded files in case of previous form errors\n+            file_upload_id = self.request.get(\n+                "%s.file_upload_id" % self.name\n+            ) or 0\n+            if file_upload_id:\n+                upload_map = IFileUploadTemporaryStorage(getSite()).upload_map\n+                fileinfo = upload_map.get(file_upload_id, {})\n+                filename = fileinfo.get(\'filename\')\n+                data = fileinfo.get(\'data\')\n+\n+                if filename or data:\n+                    filename = safe_basename(filename)\n+                    if (\n+                            filename is not None\n+                            and not isinstance(filename, unicode)\n+                    ):\n+                        # work-around for\n+                        # https://bugs.launchpad.net/zope2/+bug/499696\n+                        filename = filename.decode(\'utf-8\')\n+                    del upload_map[file_upload_id]\n+                    value = {\n+                        \'data\': data,\n+                        \'filename\': filename,\n+                    }\n+                    ret = _make_namedfile(value, self.field, self)\n+                    return ret\n+\n             if self.ignoreContext:\n                 return default\n             dm = getMultiAdapter((self.context, self.field,), IDataManager)\n@@ -201,7 +294,7 @@ def extract(self, default=NOVALUE):\n \n         # empty unnamed FileUploads should not count as a value\n         value = super(NamedFileWidget, self).extract(default)\n-        if isinstance(value, FileUpload):\n+        if utils.is_file_upload(value):\n             value.seek(0, SEEK_END)\n             empty = value.tell() == 0\n             value.seek(0)\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex fceee62..dc5230c 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -145,12 +145,22 @@ The rendering is unchanged::\n \n   >>> print(file_widget.render())\n   <span id="widget.id.file" class="named-file-widget">\n+      <input type="hidden" name="widget.name.file.file_upload_id" value="...\n+      <span>\n+        File already uploaded:\n+        foo.bar\n+      </span>\n       <input type="file" id="widget.id.file-input"\n              name="widget.name.file" />\n   </span>\n \n   >>> print(image_widget.render())\n   <span id="widget.id.image" class="named-image-widget">\n+      <input type="hidden" name="widget.name.image.file_upload_id" value="...\n+      <span>\n+        Image already uploaded:\n+        foo.bar\n+      </span>\n       <input type="file" id="widget.id.image-input"\n              name="widget.name.image" />\n   </span>\n@@ -659,7 +669,7 @@ Let\'s upload data::\n   >>> content.file_field\n   \'filenameb64:ZmlsZTEudHh0;datab64:ZmlsZSAxIGNvbnRlbnQu\'\n \n-Check that we have a good image that PIL can handle:\n+Check that we have a good image that PIL can handle::\n \n   >>> import PIL.Image\n   >>> PIL.Image.open(get_file(\'image.jpg\'))\n'

