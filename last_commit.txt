Repository: Products.ExtendedPathIndex


Branch: refs/heads/master
Date: 2018-11-24T14:55:14+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.ExtendedPathIndex/commit/10093bdc4d3ada6bd45d25a2d48cf6668ce5c802

Support allow multi value results for virtual paths.

Files changed:
A news/7-feature
M .travis.yml
M Products/ExtendedPathIndex/ExtendedPathIndex.py
M README.rst
M setup.py

b'diff --git a/.travis.yml b/.travis.yml\nindex e002327..95faf32 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,15 +1,14 @@\n language: python\n sudo: false\n+dist: xenial\n python:\n     - 2.7\n-    - 3.4\n-    - 3.5\n     - 3.6\n+    - 3.7\n install:\n-    - pip install six==1.10.0  # force here to avoid conflict with zc.recipe.testrunner\n-    - pip install -U setuptools==33.1.1\n+    - pip install -U setuptools pip\n     - pip install zc.buildout\n-    - buildout bootstrap\n+    - buildout annotate\n     - buildout\n script:\n     - bin/test -v1\ndiff --git a/Products/ExtendedPathIndex/ExtendedPathIndex.py b/Products/ExtendedPathIndex/ExtendedPathIndex.py\nindex 22087a2..6977032 100644\n--- a/Products/ExtendedPathIndex/ExtendedPathIndex.py\n+++ b/Products/ExtendedPathIndex/ExtendedPathIndex.py\n@@ -53,6 +53,7 @@ class ExtendedPathIndex(PathIndex):\n     )\n \n     indexed_attrs = None\n+    multi_valued = False\n     query_options = ("query", "level", "operator",\n                      "depth", "navtree", "navtree_start")\n \n@@ -62,8 +63,10 @@ def __init__(self, id, extra=None, caller=None):\n \n         if isinstance(extra, dict):\n             attrs = extra.get(\'indexed_attrs\', None)\n+            self.multi_valued = extra.get(\'multi_valued\', False)\n         else:\n             attrs = getattr(extra, \'indexed_attrs\', None)\n+            self.multi_valued = getattr(extra, \'multi_valued\', False)\n \n         if attrs is None:\n             return\n@@ -245,7 +248,7 @@ def search(self, path, default_level=0, depth=-1, navtree=0,\n                 # Optimized absolute path navtree and breadcrumbs cases\n                 result = []\n                 add = lambda x: x is not None and result.append(x)\n-                if depth == 1:\n+                if depth == 1 and not self.multi_valued:\n                     # Navtree case, all sibling elements along the path\n                     convert = multiunion\n                     index = self._index_parents\n@@ -261,7 +264,7 @@ def search(self, path, default_level=0, depth=-1, navtree=0,\n \n             if not path.startswith(\'/\'):\n                 path = \'/\' + path\n-            if depth == 0:\n+            if depth == 0 and not self.multi_valued:\n                 # Specific object search\n                 res = self._index_items.get(path)\n                 return res and IISet([res]) or IISet()\ndiff --git a/README.rst b/README.rst\nindex 6780c06..23f0e7f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -24,6 +24,36 @@ Features\n \n - Can construct a navigation tree with a single catalog query\n \n+Configuration\n+=============\n+\n+In a GenericSetup profile, provide th following snippet to create an index::\n+\n+  <index\n+      meta_type="ExtendedPathIndex"\n+      name="my_path">\n+    <extra\n+        name="indexed_attrs"\n+        value="my_path"\n+    />\n+  </index>\n+\n+For multi valued paths, provide an extra::\n+\n+  <index\n+      meta_type="ExtendedPathIndex"\n+      name="my_path">\n+    <extra\n+        name="indexed_attrs"\n+        value="my_path"\n+    />\n+    <extra\n+        name="multi_valued"\n+        value="True"\n+    />\n+  </index>\n+\n+\n Usage\n =====\n \n@@ -32,6 +62,7 @@ Usage\n \n ``catalog(path=dict(query=\'some/path\', depth=0))``\n   search for the object with the given path.\n+  For multi valued paths, multiple objects are returned.\n \n ``catalog(path=dict(query=\'some/path\', depth=2))``\n   search for all objects below some/path but only down to a depth of 2\n@@ -58,7 +89,7 @@ Usage\n   lower level in the portal than the start parameter would allow.\n \n ``catalog(path=dict(query=\'some/path\', level=2))``\n-  search for all objects whose path contains some/path at level 2. This \n+  search for all objects whose path contains some/path at level 2. This\n   includes paths like /foo/bar/some/path and /spam/eggs/some/path, plus all\n   children of those paths.\n \ndiff --git a/news/7-feature b/news/7-feature\nnew file mode 100644\nindex 0000000..a551528\n--- /dev/null\n+++ b/news/7-feature\n@@ -0,0 +1,2 @@\n+Support allow multi value results for "virtual" paths.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex 7a2b698..eda8c6c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,13 +1,16 @@\n from setuptools import setup, find_packages\n \n-version = \'3.3.2.dev0\'\n+version = \'3.4.0.dev0\'\n \n setup(\n     name=\'Products.ExtendedPathIndex\',\n     version=version,\n     description="Zope catalog index for paths",\n-    long_description=(open("README.rst").read() + "\\n" + \\\n-                      open("CHANGES.rst").read()),\n+    long_description=(\n+        open("README.rst").read() +\n+        "\\n" +\n+        open("CHANGES.rst").read()\n+    ),\n     classifiers=[\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n@@ -19,11 +22,9 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.4",\n-        "Programming Language :: Python :: 3.5",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n-      ],\n+    ],\n     keywords=\'Zope catalog index\',\n     author=\'Plone Foundation\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n@@ -41,4 +42,4 @@\n         \'Zope2 >= 2.13.0a3\',\n         \'zope.interface\',\n     ],\n-    )\n+)\n'

Repository: Products.ExtendedPathIndex


Branch: refs/heads/master
Date: 2018-12-06T18:37:35+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.ExtendedPathIndex/commit/3a8d78f381d63e4601d16f0ce27bbfcdeaed67c5

overhaul doc

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 23f0e7f..a815077 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,21 +1,19 @@\n Introduction\n ============\n \n-This is an index that supports depth limiting, and the ability to build a\n-structure usable for navtrees and sitemaps. The actual navtree implementations\n-are not (and should not) be in this Product, this is the index implementation\n-only.\n+This is an Zope Catalog index to query treeish structures in the ZODB by path.\n+It supports depth limiting, and has the ability to build a structure usable for navtrees and sitemaps.\n+The actual navtree implementations are not (and should not) be in this package.\n+This is the index implementation only.\n \n Assumptions\n ===========\n \n-EPI makes an assumption about the catalog and index being in the\n-same container as all the content. This makes a lot of sense in a\n-Plone setting, but might not work as expected in other scenarios.\n+EPI makes an assumption about the catalog and index being in the same container as all the content.\n+This makes a lot of sense in a Plone setting, but might not work as expected in other scenarios.\n \n-A query like ``/plonesite/folder, level=0`` is transformed internally to\n-``/folder, level=1``. This avoids touching the rather large plonesite set\n-which contains reference to all content in your site.\n+A query like ``/plonesite/folder, level=0`` is transformed internally to ``/folder, level=1``.\n+This avoids touching the rather large plonesite set which contains reference to all content in your site.\n \n Features\n ========\n@@ -38,7 +36,8 @@ In a GenericSetup profile, provide th following snippet to create an index::\n     />\n   </index>\n \n-For multi valued paths, provide an extra::\n+For multi valued paths, provide an extra\n+(switches off an breaking optimization not needed for this cases)::\n \n   <index\n       meta_type="ExtendedPathIndex"\n@@ -53,6 +52,13 @@ For multi valued paths, provide an extra::\n     />\n   </index>\n \n+An example for an index with multiple values per path element:\n+Imagine to index multilingual content.\n+Every item is translated and all translated items share a common unique identifier\n+(this is how plone.app.multilingual works).\n+Now create an indexer returing this unique identifier instead of the items ID as a path element.\n+With this it is possible to query all elements of all languages in a folder in one go\n+(for an advanced usage of this pattern look at ``plone.app.multilingualindexes``).\n \n Usage\n =====\n@@ -68,40 +74,39 @@ Usage\n   search for all objects below some/path but only down to a depth of 2\n \n ``catalog(path=dict(query=\'some/path\', navtree=True))``\n-  search for all objects below some/path for rendering a navigation tree. This\n-  includes all objects below some/path up to a depth of 1 and all parent\n-  objects.\n+  search for all objects below some/path for rendering a navigation tree.\n+  This includes all objects below some/path up to a depth of 1 and all parent objects.\n \n ``catalog(path=dict(query=\'some/path\', navtree=True, depth=0))``\n   search for all objects below some/path for rendering a breadcrumb trail.\n   This includes only the parent objects themselves.\n \n ``catalog(path=dict(query=\'some/path\', navtree=True, navtree_start=1))``\n-  search for all objects below some/path for rendering a partial\n-  navigation tree. This includes all objects below the path but stops\n-  1 level above the root.  The given path is included, even if it is at a\n-  shorter path in the portal than the level parameter would allow.\n+  search for all objects below some/path for rendering a partial navigation tree.\n+  This includes all objects below the path but stops 1 level above the root.\n+  The given path is included,\n+  even if it is at a shorter path in the portal than the level parameter would allow.\n \n ``catalog(path=dict(query=\'some/path\', navtree=True, depth=0, navtree_start=1))``\n-  search for all objects below some/path for rendering a partial\n-  breadcrumb trail. This includes all parents below the path but stops\n-  1 level above the root.  The given path is included, even if it is at a\n-  lower level in the portal than the start parameter would allow.\n+  search for all objects below some/path for rendering a partial breadcrumb trail.\n+  This includes all parents below the path but stops 1 level above the root.\n+  The given path is included, even if it is at a lower level in the portal than the start parameter would allow.\n \n ``catalog(path=dict(query=\'some/path\', level=2))``\n-  search for all objects whose path contains some/path at level 2. This\n-  includes paths like /foo/bar/some/path and /spam/eggs/some/path, plus all\n-  children of those paths.\n+  search for all objects whose path contains some/path at level 2.\n+  This includes paths like /foo/bar/some/path and /spam/eggs/some/path,\n+  plus all children of those paths.\n \n ``catalog(path=dict(query=\'some/path\', level=-1, depth=0))``\n-  search for all objects whose path contains some/path at *any* level. This\n-  includes paths like /spam/some/path as well as /foo/bar/baz/some/path, but\n-  only those exact matches are included in the result because depth is set to\n-  0.\n+  search for all objects whose path contains some/path at *any* level.\n+  This includes paths like /spam/some/path as well as /foo/bar/baz/some/path,\n+  but only those exact matches are included in the result because depth is set to 0.\n \n ``catalog(path=dict(query=((\'foo/bar\', 2), (\'bar/baz\'), 1), depth=0))``\n-  search for multiple paths, each at different levels (foo/bar at level 2,\n-  and bar/baz at level 1), and return exact matches only.\n+  search for multiple paths,\n+  each at different levels\n+  (foo/bar at level 2, and bar/baz at level 1),\n+  and return exact matches only.\n \n Credits\n =======\n@@ -118,5 +123,5 @@ Credits\n License\n =======\n \n-This software is released under the GPL license.\n+This software is released under the GPLv2 license.\n \n'

Repository: Products.ExtendedPathIndex


Branch: refs/heads/master
Date: 2018-12-12T10:02:30+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.ExtendedPathIndex/commit/27a41270fb9c72b6dd0304755975a76ef448a2f9

Merge pull request #8 from plone/feature/7

Support allow multi value results for virtual paths.

Files changed:
A news/7-feature
M .travis.yml
M Products/ExtendedPathIndex/ExtendedPathIndex.py
M README.rst
M setup.py

b'diff --git a/.travis.yml b/.travis.yml\nindex e002327..95faf32 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,15 +1,14 @@\n language: python\n sudo: false\n+dist: xenial\n python:\n     - 2.7\n-    - 3.4\n-    - 3.5\n     - 3.6\n+    - 3.7\n install:\n-    - pip install six==1.10.0  # force here to avoid conflict with zc.recipe.testrunner\n-    - pip install -U setuptools==33.1.1\n+    - pip install -U setuptools pip\n     - pip install zc.buildout\n-    - buildout bootstrap\n+    - buildout annotate\n     - buildout\n script:\n     - bin/test -v1\ndiff --git a/Products/ExtendedPathIndex/ExtendedPathIndex.py b/Products/ExtendedPathIndex/ExtendedPathIndex.py\nindex 22087a2..6977032 100644\n--- a/Products/ExtendedPathIndex/ExtendedPathIndex.py\n+++ b/Products/ExtendedPathIndex/ExtendedPathIndex.py\n@@ -53,6 +53,7 @@ class ExtendedPathIndex(PathIndex):\n     )\n \n     indexed_attrs = None\n+    multi_valued = False\n     query_options = ("query", "level", "operator",\n                      "depth", "navtree", "navtree_start")\n \n@@ -62,8 +63,10 @@ def __init__(self, id, extra=None, caller=None):\n \n         if isinstance(extra, dict):\n             attrs = extra.get(\'indexed_attrs\', None)\n+            self.multi_valued = extra.get(\'multi_valued\', False)\n         else:\n             attrs = getattr(extra, \'indexed_attrs\', None)\n+            self.multi_valued = getattr(extra, \'multi_valued\', False)\n \n         if attrs is None:\n             return\n@@ -245,7 +248,7 @@ def search(self, path, default_level=0, depth=-1, navtree=0,\n                 # Optimized absolute path navtree and breadcrumbs cases\n                 result = []\n                 add = lambda x: x is not None and result.append(x)\n-                if depth == 1:\n+                if depth == 1 and not self.multi_valued:\n                     # Navtree case, all sibling elements along the path\n                     convert = multiunion\n                     index = self._index_parents\n@@ -261,7 +264,7 @@ def search(self, path, default_level=0, depth=-1, navtree=0,\n \n             if not path.startswith(\'/\'):\n                 path = \'/\' + path\n-            if depth == 0:\n+            if depth == 0 and not self.multi_valued:\n                 # Specific object search\n                 res = self._index_items.get(path)\n                 return res and IISet([res]) or IISet()\ndiff --git a/README.rst b/README.rst\nindex 6780c06..a815077 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -1,21 +1,19 @@\n Introduction\n ============\n \n-This is an index that supports depth limiting, and the ability to build a\n-structure usable for navtrees and sitemaps. The actual navtree implementations\n-are not (and should not) be in this Product, this is the index implementation\n-only.\n+This is an Zope Catalog index to query treeish structures in the ZODB by path.\n+It supports depth limiting, and has the ability to build a structure usable for navtrees and sitemaps.\n+The actual navtree implementations are not (and should not) be in this package.\n+This is the index implementation only.\n \n Assumptions\n ===========\n \n-EPI makes an assumption about the catalog and index being in the\n-same container as all the content. This makes a lot of sense in a\n-Plone setting, but might not work as expected in other scenarios.\n+EPI makes an assumption about the catalog and index being in the same container as all the content.\n+This makes a lot of sense in a Plone setting, but might not work as expected in other scenarios.\n \n-A query like ``/plonesite/folder, level=0`` is transformed internally to\n-``/folder, level=1``. This avoids touching the rather large plonesite set\n-which contains reference to all content in your site.\n+A query like ``/plonesite/folder, level=0`` is transformed internally to ``/folder, level=1``.\n+This avoids touching the rather large plonesite set which contains reference to all content in your site.\n \n Features\n ========\n@@ -24,6 +22,44 @@ Features\n \n - Can construct a navigation tree with a single catalog query\n \n+Configuration\n+=============\n+\n+In a GenericSetup profile, provide th following snippet to create an index::\n+\n+  <index\n+      meta_type="ExtendedPathIndex"\n+      name="my_path">\n+    <extra\n+        name="indexed_attrs"\n+        value="my_path"\n+    />\n+  </index>\n+\n+For multi valued paths, provide an extra\n+(switches off an breaking optimization not needed for this cases)::\n+\n+  <index\n+      meta_type="ExtendedPathIndex"\n+      name="my_path">\n+    <extra\n+        name="indexed_attrs"\n+        value="my_path"\n+    />\n+    <extra\n+        name="multi_valued"\n+        value="True"\n+    />\n+  </index>\n+\n+An example for an index with multiple values per path element:\n+Imagine to index multilingual content.\n+Every item is translated and all translated items share a common unique identifier\n+(this is how plone.app.multilingual works).\n+Now create an indexer returing this unique identifier instead of the items ID as a path element.\n+With this it is possible to query all elements of all languages in a folder in one go\n+(for an advanced usage of this pattern look at ``plone.app.multilingualindexes``).\n+\n Usage\n =====\n \n@@ -32,45 +68,45 @@ Usage\n \n ``catalog(path=dict(query=\'some/path\', depth=0))``\n   search for the object with the given path.\n+  For multi valued paths, multiple objects are returned.\n \n ``catalog(path=dict(query=\'some/path\', depth=2))``\n   search for all objects below some/path but only down to a depth of 2\n \n ``catalog(path=dict(query=\'some/path\', navtree=True))``\n-  search for all objects below some/path for rendering a navigation tree. This\n-  includes all objects below some/path up to a depth of 1 and all parent\n-  objects.\n+  search for all objects below some/path for rendering a navigation tree.\n+  This includes all objects below some/path up to a depth of 1 and all parent objects.\n \n ``catalog(path=dict(query=\'some/path\', navtree=True, depth=0))``\n   search for all objects below some/path for rendering a breadcrumb trail.\n   This includes only the parent objects themselves.\n \n ``catalog(path=dict(query=\'some/path\', navtree=True, navtree_start=1))``\n-  search for all objects below some/path for rendering a partial\n-  navigation tree. This includes all objects below the path but stops\n-  1 level above the root.  The given path is included, even if it is at a\n-  shorter path in the portal than the level parameter would allow.\n+  search for all objects below some/path for rendering a partial navigation tree.\n+  This includes all objects below the path but stops 1 level above the root.\n+  The given path is included,\n+  even if it is at a shorter path in the portal than the level parameter would allow.\n \n ``catalog(path=dict(query=\'some/path\', navtree=True, depth=0, navtree_start=1))``\n-  search for all objects below some/path for rendering a partial\n-  breadcrumb trail. This includes all parents below the path but stops\n-  1 level above the root.  The given path is included, even if it is at a\n-  lower level in the portal than the start parameter would allow.\n+  search for all objects below some/path for rendering a partial breadcrumb trail.\n+  This includes all parents below the path but stops 1 level above the root.\n+  The given path is included, even if it is at a lower level in the portal than the start parameter would allow.\n \n ``catalog(path=dict(query=\'some/path\', level=2))``\n-  search for all objects whose path contains some/path at level 2. This \n-  includes paths like /foo/bar/some/path and /spam/eggs/some/path, plus all\n-  children of those paths.\n+  search for all objects whose path contains some/path at level 2.\n+  This includes paths like /foo/bar/some/path and /spam/eggs/some/path,\n+  plus all children of those paths.\n \n ``catalog(path=dict(query=\'some/path\', level=-1, depth=0))``\n-  search for all objects whose path contains some/path at *any* level. This\n-  includes paths like /spam/some/path as well as /foo/bar/baz/some/path, but\n-  only those exact matches are included in the result because depth is set to\n-  0.\n+  search for all objects whose path contains some/path at *any* level.\n+  This includes paths like /spam/some/path as well as /foo/bar/baz/some/path,\n+  but only those exact matches are included in the result because depth is set to 0.\n \n ``catalog(path=dict(query=((\'foo/bar\', 2), (\'bar/baz\'), 1), depth=0))``\n-  search for multiple paths, each at different levels (foo/bar at level 2,\n-  and bar/baz at level 1), and return exact matches only.\n+  search for multiple paths,\n+  each at different levels\n+  (foo/bar at level 2, and bar/baz at level 1),\n+  and return exact matches only.\n \n Credits\n =======\n@@ -87,5 +123,5 @@ Credits\n License\n =======\n \n-This software is released under the GPL license.\n+This software is released under the GPLv2 license.\n \ndiff --git a/news/7-feature b/news/7-feature\nnew file mode 100644\nindex 0000000..a551528\n--- /dev/null\n+++ b/news/7-feature\n@@ -0,0 +1,2 @@\n+Support allow multi value results for "virtual" paths.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex 882cd57..a3c7c1c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,13 +1,16 @@\n from setuptools import setup, find_packages\n \n-version = \'3.3.2.dev0\'\n+version = \'3.4.0.dev0\'\n \n setup(\n     name=\'Products.ExtendedPathIndex\',\n     version=version,\n     description="Zope catalog index for paths",\n-    long_description=(open("README.rst").read() + "\\n" + \\\n-                      open("CHANGES.rst").read()),\n+    long_description=(\n+        open("README.rst").read() +\n+        "\\n" +\n+        open("CHANGES.rst").read()\n+    ),\n     classifiers=[\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n@@ -19,11 +22,9 @@\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.4",\n-        "Programming Language :: Python :: 3.5",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n-      ],\n+    ],\n     keywords=\'Zope catalog index\',\n     author=\'Plone Foundation\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n@@ -41,4 +42,4 @@\n         \'Zope2 >= 2.13.0a3\',\n         \'zope.interface\',\n     ],\n-    )\n+)\n'

