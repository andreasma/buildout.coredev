Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-04-01T01:07:51+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/998c1006a0dc12912259780671389208e51c3b80

fix type-check

Files changed:
M plone/formwidget/namedfile/converter.py

b"diff --git a/plone/formwidget/namedfile/converter.py b/plone/formwidget/namedfile/converter.py\nindex 0325160..d040c0e 100644\n--- a/plone/formwidget/namedfile/converter.py\n+++ b/plone/formwidget/namedfile/converter.py\n@@ -34,8 +34,7 @@ def toFieldValue(self, value):\n \n             filename = safe_basename(value.filename)\n \n-            if filename is not None and not isinstance(\n-                    filename, six.text_type):\n+            if filename is not None and isinstance(filename, six.binary_type):\n                 # Work-around for\n                 # https://bugs.launchpad.net/zope2/+bug/499696\n                 filename = filename.decode('utf-8')\n"

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-15T12:29:32+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/b639774e75275bfa828c4088dda493bdb9d71799

fix some issues with converting files in py3

Files changed:
M plone/formwidget/namedfile/converter.py

b'diff --git a/plone/formwidget/namedfile/converter.py b/plone/formwidget/namedfile/converter.py\nindex d040c0e..6991542 100644\n--- a/plone/formwidget/namedfile/converter.py\n+++ b/plone/formwidget/namedfile/converter.py\n@@ -49,7 +49,7 @@ def toFieldValue(self, value):\n         else:\n             if isinstance(value, six.text_type):\n                 value = value.encode(\'utf-8\')\n-            return self.field._type(data=str(value))\n+            return self.field._type(data=value)\n \n \n def b64encode_file(filename, data):\n@@ -59,20 +59,20 @@ def b64encode_file(filename, data):\n         filename = filename.encode(\'utf-8\')\n     filenameb64 = base64.standard_b64encode(filename or \'\')\n     datab64 = base64.standard_b64encode(data)\n-    filename = "filenameb64:%s;datab64:%s" % (\n+    filename = b"filenameb64:%s;datab64:%s" % (\n         filenameb64, datab64\n     )\n-    return filename.encode(\'ascii\')\n+    return filename\n \n \n def b64decode_file(value):\n-    filename, data = value.split(\';\')\n+    filename, data = value.split(b\';\')\n \n-    filename = filename.split(\':\')[1]\n+    filename = filename.split(b\':\')[1]\n     filename = base64.standard_b64decode(filename)\n     filename = filename.decode(\'utf-8\')\n \n-    data = data.split(\':\')[1]\n+    data = data.split(b\':\')[1]\n     data = base64.standard_b64decode(data)\n \n     return filename, data\n@@ -86,7 +86,7 @@ class Base64Converter(BaseDataConverter):\n \n     def toWidgetValue(self, value):\n \n-        if not isinstance(value, six.string_types):\n+        if not isinstance(value, (six.text_type, six.binary_type)):\n             return None\n \n         filename, data = b64decode_file(value)\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-15T12:31:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/d5365276ad3503a3f981306cb47f4f119509fa73

start fixing tests in py3

Files changed:
M plone/formwidget/namedfile/testing.py
M plone/formwidget/namedfile/tests.py
M plone/formwidget/namedfile/widget.rst

b'diff --git a/plone/formwidget/namedfile/testing.py b/plone/formwidget/namedfile/testing.py\nindex cae1987..0d88d98 100644\n--- a/plone/formwidget/namedfile/testing.py\n+++ b/plone/formwidget/namedfile/testing.py\n@@ -11,7 +11,7 @@\n def get_file(filename):\n     """Return contents of the file with the given name."""\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    return open(filename, \'r\')\n+    return open(filename, \'rb\')\n \n \n class PloneFormwidgetNamedfileLayer(PloneSandboxLayer):\ndiff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex 9e769b2..7e521f7 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -3,6 +3,18 @@\n import unittest\n from plone.formwidget.namedfile.testing import INTEGRATION_TESTING\n from plone.testing import layered\n+import re\n+import six\n+\n+\n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub(\'zope.publisher.interfaces.NotFound\', \'NotFound\', got)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n \n \n def test_suite():\n@@ -11,7 +23,9 @@ def test_suite():\n         layered(doctest.DocFileSuite(\n             \'widget.rst\',\n             optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,\n-            encoding=\'utf-8\'),\n+            encoding=\'utf-8\',\n+            checker=Py23DocChecker(),\n+            ),\n             layer=INTEGRATION_TESTING),\n     )\n     return suite\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex fceee62..5fc504a 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -86,18 +86,18 @@ Later, we will show more advanced functionality when using a field-widget::\n \n We can extract simple file data from the widget like this::\n \n-  >>> import cStringIO\n-  >>> myfile = cStringIO.StringIO(\'My file contents.\')\n+  >>> import six\n+  >>> myfile = six.BytesIO(b\'My file contents.\')\n \n   >>> file_widget.request = make_request(form={\'widget.name.file\': myfile})\n   >>> file_widget.update()\n   >>> file_widget.extract()\n-  <cStringIO.StringI object at ...>\n+  <...IO object at ...>\n \n   >>> image_widget.request = make_request(form={\'widget.name.image\': myfile})\n   >>> image_widget.update()\n   >>> image_widget.extract()\n-  <cStringIO.StringI object at ...>\n+  <...IO object at ...>\n \n If nothing is found in the request, the default is returned::\n \n@@ -113,7 +113,6 @@ If nothing is found in the request, the default is returned::\n \n We can also handle file-upload objects::\n \n-  >>> import cStringIO\n   >>> from ZPublisher.HTTPRequest import FileUpload\n \n Let\'s define a FieldStorage stub for easy use with the FileUpload::\n@@ -127,7 +126,7 @@ Let\'s define a FieldStorage stub for easy use with the FileUpload::\n \n Now build a FileUpload::\n \n-  >>> myfile = cStringIO.StringIO(\'File upload contents.\')\n+  >>> myfile = six.BytesIO(b\'File upload contents.\')\n   >>> aFieldStorage = FieldStorageStub(myfile)\n   >>> myUpload = FileUpload(aFieldStorage)\n \n@@ -157,7 +156,7 @@ The rendering is unchanged::\n \n Empty, unnamed FileUploads are treated as having no value::\n \n-  >>> emptyfile = cStringIO.StringIO(\'\')\n+  >>> emptyfile = six.BytesIO(b\'\')\n   >>> aFieldStorage = FieldStorageStub(emptyfile, filename=\'\')\n   >>> myEmptyUpload = FileUpload(aFieldStorage)\n \n@@ -183,7 +182,7 @@ For this to work, we need a context and a data manager::\n \n   >>> from DateTime import DateTime\n   >>> from plone.namedfile import field\n-  >>> from zope.interface import implements, Interface\n+  >>> from zope.interface import implementer, Interface\n   >>> from plone.namedfile.interfaces import IImageScaleTraversable\n   >>> from zope.annotation.interfaces import IAttributeAnnotatable\n   >>> class IContent(Interface):\n@@ -191,8 +190,8 @@ For this to work, we need a context and a data manager::\n   ...     image_field = field.NamedImage(title=u"Image")\n \n   >>> root_url = TestRequest().getURL()\n-  >>> class Content(object):\n-  ...     implements(IContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  >>> @implementer(IContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  ... class Content(object):\n   ...     def __init__(self, file, image):\n   ...         self.file_field = file\n   ...         self.image_field = image\n@@ -254,8 +253,8 @@ characters::\n   >>> from plone.namedfile import NamedFile, NamedImage\n   >>> from plone.formwidget.namedfile.testing import get_file\n   >>> image_data = get_file(\'image.jpg\').read()\n-  >>> file_widget.value = NamedFile(data=\'My file data\',\n-  ...                               filename=unicode(\'data_\xe6\xb7\xb1.txt\', \'utf-8\'))\n+  >>> file_widget.value = NamedFile(data=b\'My file data\',\n+  ...                               filename=u\'data_\xe6\xb7\xb1.txt\')\n   >>> aFieldStorage = FieldStorageStub(get_file(\'image.jpg\'), filename=\'faux.jpg\')\n   >>> myUpload = FileUpload(aFieldStorage)\n   >>> image_widget.request = make_request(form={\'widget.name.image\': myUpload})\n@@ -281,7 +280,7 @@ Notice how there are radio buttons to decide whether to upload a new file or\n keep the existing one. If the \'.action\' field is not submitted or is\n empty, the behaviour is the same as before::\n \n-  >>> myfile = cStringIO.StringIO(\'File upload contents.\')\n+  >>> myfile = six.BytesIO(b\'File upload contents.\')\n   >>> aFieldStorage = FieldStorageStub(myfile, filename=\'test2.txt\')\n   >>> myUpload = FileUpload(aFieldStorage)\n \n@@ -323,7 +322,7 @@ If the widgets are rendered again, the newly uploaded files will be shown::\n However, if we provide the \'.action\' field, we get back the value currently\n stored in the field::\n \n-  >>> content.file_field = NamedFile(data=\'My file data\', filename=u\'data.txt\')\n+  >>> content.file_field = NamedFile(data=b\'My file data\', filename=u\'data.txt\')\n   >>> content.image_field = NamedImage(data=image_data, filename=u\'faux.jpg\')\n \n   >>> file_widget.value = content.file_field\n@@ -360,7 +359,7 @@ this view to display the image itself or link to the file::\n   >>> request = make_request()\n   >>> view = Download(file_widget, request)\n   >>> view()\n-  \'My file data\'\n+  b\'My file data\'\n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'data.txt"\n \n@@ -371,7 +370,7 @@ doesn\'t stop it being found::\n   >>> view = Download(file_widget, request)\n   >>> view = view.publishTraverse(request, \'daisy.txt\')\n   >>> view()\n-  \'My file data\'\n+  b\'My file data\'\n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'daisy.txt"\n \n@@ -383,7 +382,7 @@ Any additional traversal will result in an error::\n   >>> view = view.publishTraverse(request, \'daisy.txt\')\n   Traceback (most recent call last):\n   ...\n-  NotFound: ... \'daisy.txt\'\n+  zope.publisher.interfaces.NotFound: ... \'daisy.txt\'\n \n \n The converter\n@@ -426,7 +425,7 @@ A data string is converted to the appropriate type::\n   >>> file_converter.toFieldValue(\'some file content\')\n   <plone.namedfile.file.NamedFile object at ...>\n \n-  >>> image_converter.toFieldValue(\'random data\')\n+  >>> image_converter.toFieldValue(b\'random data\')\n   <plone.namedfile.file.NamedImage object at ...>\n \n A FileUpload object is converted to the appropriate type, preserving filename,\n@@ -435,15 +434,15 @@ The content type sent by the browser will be ignored because it\'s unreliable\n - it\'s left to the implementation of the file field to determine the proper\n content type::\n \n-  >>> myfile = cStringIO.StringIO(\'File upload contents.\')\n+  >>> myfile = six.BytesIO(b\'File upload contents.\')\n   >>> # \\xc3\\xb8 is UTF-8 for a small letter o with slash\n-  >>> aFieldStorage = FieldStorageStub(myfile, filename=\'rand\\xc3\\xb8m.txt\',\n+  >>> aFieldStorage = FieldStorageStub(myfile, filename=b\'rand\\xc3\\xb8m.txt\'.decode(\'utf8\'),\n   ...     headers={\'Content-Type\': \'text/x-dummy\'})\n   >>> file_obj = file_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> file_obj.data\n-  \'File upload contents.\'\n-  >>> file_obj.filename\n-  u\'rand\\xf8m.txt\'\n+  b\'File upload contents.\'\n+  >>> print(file_obj.filename.encode(\'utf8\'))\n+  b\'rand\\xc3\\xb8m.txt\'\n \n Content type from headers sent by browser should be ignored::\n \n@@ -455,7 +454,7 @@ Content type from headers sent by browser should be ignored::\n   >>> image_obj.data == image_data\n   True\n   >>> image_obj.filename\n-  u\'random.png\'\n+  \'random.png\'\n   >>> image_obj.contentType != \'image/x-dummy\'\n   True\n \n@@ -463,7 +462,7 @@ Content type from headers sent by browser should be ignored::\n However, a zero-length, unnamed FileUpload results in the field\'s missing_value\n being returned::\n \n-  >>> myfile = cStringIO.StringIO(\'\')\n+  >>> myfile = six.BytesIO(b\'\')\n   >>> aFieldStorage = FieldStorageStub(myfile, filename=\'\', headers={\'Content-Type\': \'application/octet-stream\'})\n   >>> field_value = file_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> field_value is IContent[\'file_field\'].missing_value\n@@ -480,7 +479,7 @@ There is another converter, which converts between a NamedFile or file upload\n instance and base64 encoded data, which can be stored in a ASCII field::\n \n   >>> from zope import schema\n-  >>> from zope.interface import implements, Interface\n+  >>> from zope.interface import implementer, Interface\n   >>> class IASCIIContent(Interface):\n   ...     file_field = schema.ASCII(title=u"File")\n   ...     image_field = schema.ASCII(title=u"Image")\n@@ -520,32 +519,32 @@ following form::\n Like so::\n \n   >>> ascii_file_converter.toFieldValue(\n-  ...     NamedFile(data=\'testfile\', filename=u\'test.txt\'))\n-  \'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\'\n+  ...     NamedFile(data=b\'testfile\', filename=u\'test.txt\'))\n+  b\'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\'\n   >>> ascii_image_converter.toFieldValue(\n-  ...     NamedImage(data=\'testimage\', filename=u\'test.png\'))\n-  \'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\'\n+  ...     NamedImage(data=b\'testimage\', filename=u\'test.png\'))\n+  b\'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\'\n \n A Base 64 encoded structure like descibed above is converted to the appropriate\n type::\n \n   >>> afile = ascii_file_converter.toWidgetValue(\n-  ...     \'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\')\n+  ...     b\'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\')\n   >>> afile\n   <plone.namedfile.file.NamedFile object at ...>\n   >>> afile.data\n-  \'testfile\'\n+  b\'testfile\'\n   >>> afile.filename\n-  u\'test.txt\'\n+  \'test.txt\'\n \n   >>> aimage = ascii_image_converter.toWidgetValue(\n-  ...     \'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\')\n+  ...     b\'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\')\n   >>> aimage\n   <plone.namedfile.file.NamedImage object at ...>\n   >>> aimage.data\n-  \'testimage\'\n+  b\'testimage\'\n   >>> aimage.filename\n-  u\'test.png\'\n+  \'test.png\'\n \n Finally, some tests with image uploads converted to the field value.\n \n@@ -553,17 +552,17 @@ Convert a file upload to the Base 64 encoded field value and handle the\n filename too::\n \n \n-  >>> myfile = cStringIO.StringIO(\'File upload contents.\')\n+  >>> myfile = six.BytesIO(b\'File upload contents.\')\n   >>> # \\xc3\\xb8 is UTF-8 for a small letter o with slash\n-  >>> aFieldStorage = FieldStorageStub(myfile, filename=\'rand\\xc3\\xb8m.txt\',\n+  >>> aFieldStorage = FieldStorageStub(myfile, filename=b\'rand\\xc3\\xb8m.txt\'.decode(\'utf8\'),\n   ...     headers={\'Content-Type\': \'text/x-dummy\'})\n   >>> ascii_file_converter.toFieldValue(FileUpload(aFieldStorage))\n-  \'filenameb64:cmFuZMO4bS50eHQ=;datab64:RmlsZSB1cGxvYWQgY29udGVudHMu\'\n+  b\'filenameb64:cmFuZMO4bS50eHQ=;datab64:RmlsZSB1cGxvYWQgY29udGVudHMu\'\n \n A zero-length, unnamed FileUpload results in the field\'s missing_value\n being returned::\n \n-  >>> myfile = cStringIO.StringIO(\'\')\n+  >>> myfile = six.BytesIO(b\'\')\n   >>> aFieldStorage = FieldStorageStub(myfile, filename=\'\', headers={\'Content-Type\': \'application/octet-stream\'})\n   >>> field_value = ascii_file_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> field_value is IASCIIContent[\'file_field\'].missing_value\n@@ -580,8 +579,8 @@ The widgets let the user to upload file and image data and select, if previous d\n \n First, let\'s do the setup::\n \n-  >>> class ASCIIContent(object):\n-  ...     implements(IASCIIContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  >>> @implementer(IASCIIContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  ... class ASCIIContent(object):\n   ...     def __init__(self, file, image):\n   ...         self.file_field = file\n   ...         self.image_field = image\n@@ -645,7 +644,7 @@ Our content has no value yet::\n \n Let\'s upload data::\n \n-  >>> data = cStringIO.StringIO(\'file 1 content.\')\n+  >>> data = six.BytesIO(b\'file 1 content.\')\n   >>> field_storage = FieldStorageStub(data, filename=\'file1.txt\')\n   >>> upload = FileUpload(field_storage)\n \n@@ -657,7 +656,7 @@ Let\'s upload data::\n \n   >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n-  \'filenameb64:ZmlsZTEudHh0;datab64:ZmlsZSAxIGNvbnRlbnQu\'\n+  b\'filenameb64:ZmlsZTEudHh0;datab64:ZmlsZSAxIGNvbnRlbnQu\'\n \n Check that we have a good image that PIL can handle:\n \n@@ -674,15 +673,15 @@ Check that we have a good image that PIL can handle:\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n   >>> content.image_field = ascii_image_converter.toFieldValue(uploaded)\n-  >>> print(content.image_field)\n-  filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\n+  >>> content.image_field\n+  b\'filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\n \n Note that PIL cannot open this ascii image, so we cannot scale it::\n \n-  >>> PIL.Image.open(cStringIO.StringIO(content.image_field))\n+  >>> PIL.Image.open(six.BytesIO(content.image_field))\n   Traceback (most recent call last):\n   ...\n-  IOError: cannot identify image file <cStringIO.StringI object at ...>\n+  OSError: cannot identify image file...\n \n Prepare for a new request cycle::\n \n@@ -720,7 +719,7 @@ Prepare for a new request cycle::\n \n Now overwrite with other data::\n \n-  >>> data = cStringIO.StringIO(\'random file content\')\n+  >>> data = six.BytesIO(b\'random file content\')\n   >>> field_storage = FieldStorageStub(data, filename=\'plone.pdf\')\n   >>> upload = FileUpload(field_storage)\n \n@@ -732,10 +731,10 @@ Now overwrite with other data::\n \n   >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n-  \'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n+  b\'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n \n \n-  >>> data = cStringIO.StringIO(\'no image\')\n+  >>> data = six.BytesIO(b\'no image\')\n   >>> field_storage = FieldStorageStub(data, filename=\'logo.tiff\')\n   >>> upload = FileUpload(field_storage)\n \n@@ -747,7 +746,7 @@ Now overwrite with other data::\n \n   >>> content.image_field = ascii_file_converter.toFieldValue(uploaded)\n   >>> content.image_field\n-  \'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n+  b\'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n \n \n Prepare for a new request cycle::\n@@ -792,7 +791,7 @@ Resubmit, but keep the data::\n \n   >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n-  \'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n+  b\'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n \n \n   >>> image_widget.request = make_request(form={\'widget.name.image\': \'\', \'widget.name.image.action\': \'nochange\'})\n@@ -803,7 +802,7 @@ Resubmit, but keep the data::\n \n   >>> content.image_field = ascii_file_converter.toFieldValue(uploaded)\n   >>> content.image_field\n-  \'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n+  b\'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n \n \n Prepare for a new request cycle::\n@@ -835,8 +834,8 @@ The Download view on ASCII fields\n ---------------------------------\n ::\n \n-  >>> class ASCIIContent(object):\n-  ...     implements(IASCIIContent)\n+  >>> @implementer(IASCIIContent)\n+  ... class ASCIIContent(object):\n   ...     def __init__(self, file, image):\n   ...         self.file_field = file\n   ...         self.image_field = image\n@@ -846,8 +845,8 @@ The Download view on ASCII fields\n   ...         return root_url + self.path\n \n   >>> content = ASCIIContent(\n-  ...     NamedFile(data="testfile", filename=u"test.txt"),\n-  ...     NamedImage(data="testimage", filename=u"test.jpg"))\n+  ...     NamedFile(data=b"testfile", filename=u"test.txt"),\n+  ...     NamedImage(data=b"testimage", filename=u"test.jpg"))\n \n   >>> from z3c.form.widget import FieldWidget\n \n@@ -860,14 +859,14 @@ The Download view on ASCII fields\n   >>> request = make_request()\n   >>> view = Download(ascii_file_widget, request)\n   >>> view()\n-  \'testfile\'\n+  b\'testfile\'\n \n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'test.txt"\n \n   >>> view = Download(ascii_image_widget, request)\n   >>> view()\n-  \'testimage\'\n+  b\'testimage\'\n \n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'test.jpg"\n@@ -889,7 +888,7 @@ only when the field is required::\n   >>> validator.validate(None) is None\n   Traceback (most recent call last):\n   ...\n-  RequiredMissing...\n+  zope.schema._bootstrapinterfaces.RequiredMissing...\n   >>> IContent[\'file_field\'].required = False\n   >>> validator.validate(None) is None\n   True\n@@ -903,7 +902,7 @@ user)::\n   >>> validator.validate(None)\n   Traceback (most recent call last):\n   ...\n-  InvalidState\n+  plone.formwidget.namedfile.validator.InvalidState\n \n If we provide a file, all is good::\n \n@@ -923,7 +922,7 @@ we again make the field required::\n   >>> validator.validate(None) is None\n   Traceback (most recent call last):\n   ...\n-  RequiredMissing...\n+  zope.schema._bootstrapinterfaces.RequiredMissing...\n \n \n The Download URL\n@@ -945,7 +944,7 @@ The download URL without a form and without a value::\n \n Now we add a value::\n \n-  >>> content.file_field = NamedFile(data=\'My file data\', filename=u\'data.txt\')\n+  >>> content.file_field = NamedFile(data=b\'My file data\', filename=u\'data.txt\')\n   >>> file_widget.value = content.file_field\n   >>> file_widget.download_url\n   \'http://127.0.0.1/content1/++widget++file_field/@@download/data.txt\'\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-22T22:17:14+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/aef87e2e426ee6b51979eb67f3cfca2c8201e59a

fix test in plone.app.layout

Files changed:
M plone/formwidget/namedfile/converter.py

b"diff --git a/plone/formwidget/namedfile/converter.py b/plone/formwidget/namedfile/converter.py\nindex 6991542..012aff5 100644\n--- a/plone/formwidget/namedfile/converter.py\n+++ b/plone/formwidget/namedfile/converter.py\n@@ -66,6 +66,8 @@ def b64encode_file(filename, data):\n \n \n def b64decode_file(value):\n+    if isinstance(value, six.text_type):\n+        value = value.encode('utf8')\n     filename, data = value.split(b';')\n \n     filename = filename.split(b':')[1]\n"

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-26T17:12:44+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/abc51a75f91e741e7a229eed019cc485cd11c36d

Base64Converter is meant to work with bytes, not native string ASCII

Files changed:
M plone/formwidget/namedfile/converter.py
M plone/formwidget/namedfile/interfaces.py

b'diff --git a/plone/formwidget/namedfile/converter.py b/plone/formwidget/namedfile/converter.py\nindex 012aff5..58497b8 100644\n--- a/plone/formwidget/namedfile/converter.py\n+++ b/plone/formwidget/namedfile/converter.py\n@@ -8,7 +8,7 @@\n from plone.namedfile.utils import safe_basename\n from z3c.form.converter import BaseDataConverter\n from zope.component import adapts\n-from zope.schema.interfaces import IASCII\n+from zope.schema.interfaces import IBytes\n from ZPublisher.HTTPRequest import FileUpload\n \n import base64\n@@ -81,10 +81,10 @@ def b64decode_file(value):\n \n \n class Base64Converter(BaseDataConverter):\n-    """Converts between ASCII fields with base64 encoded data and a filename\n+    """Converts between Bytes fields with base64 encoded data and a filename\n     and INamedImage/INamedFile values.\n     """\n-    adapts(IASCII, INamedFileWidget)\n+    adapts(IBytes, INamedFileWidget)\n \n     def toWidgetValue(self, value):\n \ndiff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex 1c0f10d..5e4eeb2 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from z3c.form.interfaces import IFileWidget\n+from z3c.form.interfaces import IWidget\n from zope import schema\n \n \n-class INamedFileWidget(IFileWidget):\n+class INamedFileWidget(IWidget):\n     """A widget for a named file field\n     """\n \n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-26T17:58:25+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/4a26f7227a4e7d7fe1d6d5238bab2f71b24b331c

fix more ascii/bytes issues

Files changed:
M plone/formwidget/namedfile/interfaces.py
M plone/formwidget/namedfile/widget.py
M plone/formwidget/namedfile/widget.rst

b'diff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex 5e4eeb2..1c0f10d 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from z3c.form.interfaces import IWidget\n+from z3c.form.interfaces import IFileWidget\n from zope import schema\n \n \n-class INamedFileWidget(IWidget):\n+class INamedFileWidget(IFileWidget):\n     """A widget for a named file field\n     """\n \ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 13f2920..0dfb579 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -32,7 +32,7 @@\n from zope.interface import implementer_only\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n-from zope.schema.interfaces import IASCII\n+from zope.schema.interfaces import IBytes\n from zope.size import byteDisplay\n from ZPublisher.HTTPRequest import FileUpload\n \n@@ -48,7 +48,7 @@ def _make_namedfile(value, field, widget):\n     """Return a NamedImage or NamedFile instance, if it isn\'t already one -\n     e.g. when it\'s base64 encoded data.\n     """\n-    if isinstance(value, six.string_types) and IASCII.providedBy(field):\n+    if isinstance(value, six.binary_type) and IBytes.providedBy(field):\n         filename, data = b64decode_file(value)\n         if INamedImageWidget.providedBy(widget):\n             value = NamedImage(data=data, filename=filename)\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex 5fc504a..8aac84f 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -472,17 +472,17 @@ being returned::\n   True\n \n \n-The Base64Converter for ASCII fields\n+The Base64Converter for Bytes fields\n ------------------------------------\n \n There is another converter, which converts between a NamedFile or file upload\n-instance and base64 encoded data, which can be stored in a ASCII field::\n+instance and base64 encoded data, which can be stored in a Bytes field::\n \n   >>> from zope import schema\n   >>> from zope.interface import implementer, Interface\n-  >>> class IASCIIContent(Interface):\n-  ...     file_field = schema.ASCII(title=u"File")\n-  ...     image_field = schema.ASCII(title=u"Image")\n+  >>> class IBytesContent(Interface):\n+  ...     file_field = schema.Bytes(title=u"File")\n+  ...     image_field = schema.Bytes(title=u"Image")\n \n   >>> from plone.formwidget.namedfile.converter import Base64Converter\n   >>> provideAdapter(Base64Converter)\n@@ -490,25 +490,25 @@ instance and base64 encoded data, which can be stored in a ASCII field::\n   >>> from zope.component import getMultiAdapter\n   >>> from z3c.form.interfaces import IDataConverter\n \n-  >>> ascii_file_converter = getMultiAdapter(\n-  ...     (IASCIIContent[\'file_field\'], file_widget),\n+  >>> bytes_file_converter = getMultiAdapter(\n+  ...     (IBytesContent[\'file_field\'], file_widget),\n   ...     IDataConverter\n   ... )\n-  >>> ascii_image_converter = getMultiAdapter(\n-  ...     (IASCIIContent[\'image_field\'], image_widget),\n+  >>> bytes_image_converter = getMultiAdapter(\n+  ...     (IBytesContent[\'image_field\'], image_widget),\n   ...     IDataConverter\n   ... )\n \n A value of None or \'\' results in the field\'s missing_value being returned::\n \n-  >>> ascii_file_converter.toFieldValue(u\'\') is IASCIIContent[\'file_field\'].missing_value\n+  >>> bytes_file_converter.toFieldValue(u\'\') is IBytesContent[\'file_field\'].missing_value\n   True\n-  >>> ascii_file_converter.toFieldValue(None) is IASCIIContent[\'file_field\'].missing_value\n+  >>> bytes_file_converter.toFieldValue(None) is IBytesContent[\'file_field\'].missing_value\n   True\n \n-  >>> ascii_image_converter.toFieldValue(u\'\') is IASCIIContent[\'image_field\'].missing_value\n+  >>> bytes_image_converter.toFieldValue(u\'\') is IBytesContent[\'image_field\'].missing_value\n   True\n-  >>> ascii_image_converter.toFieldValue(None) is IASCIIContent[\'image_field\'].missing_value\n+  >>> bytes_image_converter.toFieldValue(None) is IBytesContent[\'image_field\'].missing_value\n   True\n \n A named file/image instance is returned as Base 64 encoded string in the\n@@ -518,17 +518,17 @@ following form::\n \n Like so::\n \n-  >>> ascii_file_converter.toFieldValue(\n+  >>> bytes_file_converter.toFieldValue(\n   ...     NamedFile(data=b\'testfile\', filename=u\'test.txt\'))\n   b\'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\'\n-  >>> ascii_image_converter.toFieldValue(\n+  >>> bytes_image_converter.toFieldValue(\n   ...     NamedImage(data=b\'testimage\', filename=u\'test.png\'))\n   b\'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\'\n \n A Base 64 encoded structure like descibed above is converted to the appropriate\n type::\n \n-  >>> afile = ascii_file_converter.toWidgetValue(\n+  >>> afile = bytes_file_converter.toWidgetValue(\n   ...     b\'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\')\n   >>> afile\n   <plone.namedfile.file.NamedFile object at ...>\n@@ -537,7 +537,7 @@ type::\n   >>> afile.filename\n   \'test.txt\'\n \n-  >>> aimage = ascii_image_converter.toWidgetValue(\n+  >>> aimage = bytes_image_converter.toWidgetValue(\n   ...     b\'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\')\n   >>> aimage\n   <plone.namedfile.file.NamedImage object at ...>\n@@ -556,7 +556,7 @@ filename too::\n   >>> # \\xc3\\xb8 is UTF-8 for a small letter o with slash\n   >>> aFieldStorage = FieldStorageStub(myfile, filename=b\'rand\\xc3\\xb8m.txt\'.decode(\'utf8\'),\n   ...     headers={\'Content-Type\': \'text/x-dummy\'})\n-  >>> ascii_file_converter.toFieldValue(FileUpload(aFieldStorage))\n+  >>> bytes_file_converter.toFieldValue(FileUpload(aFieldStorage))\n   b\'filenameb64:cmFuZMO4bS50eHQ=;datab64:RmlsZSB1cGxvYWQgY29udGVudHMu\'\n \n A zero-length, unnamed FileUpload results in the field\'s missing_value\n@@ -564,23 +564,23 @@ being returned::\n \n   >>> myfile = six.BytesIO(b\'\')\n   >>> aFieldStorage = FieldStorageStub(myfile, filename=\'\', headers={\'Content-Type\': \'application/octet-stream\'})\n-  >>> field_value = ascii_file_converter.toFieldValue(FileUpload(aFieldStorage))\n-  >>> field_value is IASCIIContent[\'file_field\'].missing_value\n+  >>> field_value = bytes_file_converter.toFieldValue(FileUpload(aFieldStorage))\n+  >>> field_value is IBytesContent[\'file_field\'].missing_value\n   True\n-  >>> field_value = ascii_image_converter.toFieldValue(FileUpload(aFieldStorage))\n-  >>> field_value is IASCIIContent[\'image_field\'].missing_value\n+  >>> field_value = bytes_image_converter.toFieldValue(FileUpload(aFieldStorage))\n+  >>> field_value is IBytesContent[\'image_field\'].missing_value\n   True\n \n \n-Rendering ASCII field widgets\n+Rendering Bytes field widgets\n -----------------------------\n \n The widgets let the user to upload file and image data and select, if previous data should be kept, deleted or overwritten.\n \n First, let\'s do the setup::\n \n-  >>> @implementer(IASCIIContent, IImageScaleTraversable, IAttributeAnnotatable)\n-  ... class ASCIIContent(object):\n+  >>> @implementer(IBytesContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  ... class BytesContent(object):\n   ...     def __init__(self, file, image):\n   ...         self.file_field = file\n   ...         self.image_field = image\n@@ -594,7 +594,7 @@ First, let\'s do the setup::\n   ...     def Title(self):\n   ...         return \'A content item\'\n \n-  >>> content = ASCIIContent(None, None)\n+  >>> content = BytesContent(None, None)\n \n   >>> from z3c.form.datamanager import AttributeField\n   >>> from zope.component import provideAdapter\n@@ -609,7 +609,7 @@ First, let\'s do the setup::\n   ...     else:\n   ...         widget = NamedFileFieldWidget\n   ...     widget = widget(\n-  ...         IASCIIContent[\'{0}_field\'.format(widget_type)],\n+  ...         IBytesContent[\'{0}_field\'.format(widget_type)],\n   ...         make_request()\n   ...     )\n   ...     widget.context = context\n@@ -617,7 +617,7 @@ First, let\'s do the setup::\n   ...     widget.name = \'widget.name.{0}\'.format(widget_type)\n   ...\n   ...     if set_widget_value:\n-  ...         converter = globals()[\'ascii_{0}_converter\'.format(widget_type)]\n+  ...         converter = globals()[\'bytes_{0}_converter\'.format(widget_type)]\n   ...         value = getattr(context, \'{0}_field\'.format(widget_type))\n   ...         widget.value = converter.toWidgetValue(value)\n   ...\n@@ -631,13 +631,13 @@ Our content has no value yet::\n \n   >>> file_widget.update()\n   >>> print(file_widget.render())\n-  <span id="widget.id.file" class="named-file-widget required ascii-field">\n+  <span id="widget.id.file" class="named-file-widget required bytes-field">\n       <input type="file" id="widget.id.file-input" name="widget.name.file" />\n   </span>\n \n   >>> image_widget.update()\n   >>> print(image_widget.render())\n-  <span id="widget.id.image" class="named-image-widget required ascii-field">\n+  <span id="widget.id.image" class="named-image-widget required bytes-field">\n       <input type="file" id="widget.id.image-input" name="widget.name.image" />\n   </span>\n \n@@ -654,7 +654,7 @@ Let\'s upload data::\n   >>> uploaded\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.file_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n   b\'filenameb64:ZmlsZTEudHh0;datab64:ZmlsZSAxIGNvbnRlbnQu\'\n \n@@ -672,11 +672,11 @@ Check that we have a good image that PIL can handle:\n   >>> uploaded\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> content.image_field = ascii_image_converter.toFieldValue(uploaded)\n+  >>> content.image_field = bytes_image_converter.toFieldValue(uploaded)\n   >>> content.image_field\n   b\'filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\n \n-Note that PIL cannot open this ascii image, so we cannot scale it::\n+Note that PIL cannot open this bytes image, so we cannot scale it::\n \n   >>> PIL.Image.open(six.BytesIO(content.image_field))\n   Traceback (most recent call last):\n@@ -693,7 +693,7 @@ The upload shows up in the rendered widget::\n \n   >>> file_widget.update()\n   >>> print(file_widget.render())\n-  <... id="widget.id.file" class="named-file-widget required ascii-field">...\n+  <... id="widget.id.file" class="named-file-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.file/@@download/file1.txt" >file1.txt</a>...\n   <input type="radio"... id="widget.id.file-nochange"...\n   <input type="radio"... id="widget.id.file-replace"...\n@@ -701,13 +701,13 @@ The upload shows up in the rendered widget::\n \n   >>> image_widget.update()\n   >>> print(image_widget.render())\n-  <... id="widget.id.image" class="named-image-widget required ascii-field">...\n+  <... id="widget.id.image" class="named-image-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.image/@@download/image.jpg" >image.jpg</a>...\n   <input type="radio"... id="widget.id.image-nochange"...\n   <input type="radio"... id="widget.id.image-replace"...\n   <input type="file"... id="widget.id.image-input"...\n \n-Like we said, we cannot scale this ascii image, so the thumb tag is empty::\n+Like we said, we cannot scale this bytes image, so the thumb tag is empty::\n \n   >>> print(image_widget.thumb_tag)\n \n@@ -729,7 +729,7 @@ Now overwrite with other data::\n   >>> uploaded\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.file_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n   b\'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n \n@@ -744,7 +744,7 @@ Now overwrite with other data::\n   >>> uploaded\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> content.image_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.image_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.image_field\n   b\'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n \n@@ -759,7 +759,7 @@ The new image/file shows up in the rendered widget::\n \n   >>> file_widget.update()\n   >>> print(file_widget.render())\n-  <... id="widget.id.file" class="named-file-widget required ascii-field">...\n+  <... id="widget.id.file" class="named-file-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.file/@@download/plone.pdf" >plone.pdf</a>...\n   <input type="radio"... id="widget.id.file-nochange"...\n   <input type="radio"... id="widget.id.file-replace"...\n@@ -767,7 +767,7 @@ The new image/file shows up in the rendered widget::\n \n   >>> image_widget.update()\n   >>> print(image_widget.render())\n-  <... id="widget.id.image" class="named-image-widget required ascii-field">...\n+  <... id="widget.id.image" class="named-image-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.image/@@download/logo.tiff" >logo.tiff</a>...\n   <input type="radio"... id="widget.id.image-nochange"...\n   <input type="radio"... id="widget.id.image-replace"...\n@@ -789,7 +789,7 @@ Resubmit, but keep the data::\n   >>> uploaded\n   <plone.namedfile.file.NamedFile object at ...>\n \n-  >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.file_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n   b\'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n \n@@ -800,7 +800,7 @@ Resubmit, but keep the data::\n   >>> uploaded\n   <plone.namedfile.file.NamedFile object at ...>\n \n-  >>> content.image_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.image_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.image_field\n   b\'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n \n@@ -815,7 +815,7 @@ The previous image/file should be kept::\n \n   >>> file_widget.update()\n   >>> print(file_widget.render())\n-  <... id="widget.id.file" class="named-file-widget required ascii-field">...\n+  <... id="widget.id.file" class="named-file-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.file/@@download/plone.pdf" >plone.pdf</a>...\n   <input type="radio"... id="widget.id.file-nochange"...\n   <input type="radio"... id="widget.id.file-replace"...\n@@ -823,19 +823,19 @@ The previous image/file should be kept::\n \n   >>> image_widget.update()\n   >>> print(image_widget.render())\n-  <... id="widget.id.image" class="named-image-widget required ascii-field">...\n+  <... id="widget.id.image" class="named-image-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.image/@@download/logo.tiff" >logo.tiff</a>...\n   <input type="radio"... id="widget.id.image-nochange"...\n   <input type="radio"... id="widget.id.image-replace"...\n   <input type="file"... id="widget.id.image-input"...\n \n \n-The Download view on ASCII fields\n+The Download view on Bytes fields\n ---------------------------------\n ::\n \n-  >>> @implementer(IASCIIContent)\n-  ... class ASCIIContent(object):\n+  >>> @implementer(IBytesContent)\n+  ... class BytesContent(object):\n   ...     def __init__(self, file, image):\n   ...         self.file_field = file\n   ...         self.image_field = image\n@@ -844,27 +844,27 @@ The Download view on ASCII fields\n   ...     def absolute_url(self):\n   ...         return root_url + self.path\n \n-  >>> content = ASCIIContent(\n+  >>> content = BytesContent(\n   ...     NamedFile(data=b"testfile", filename=u"test.txt"),\n   ...     NamedImage(data=b"testimage", filename=u"test.jpg"))\n \n   >>> from z3c.form.widget import FieldWidget\n \n-  >>> ascii_file_widget = FieldWidget(IASCIIContent[\'file_field\'], NamedFileWidget(make_request()))\n-  >>> ascii_file_widget.context = content\n+  >>> bytes_file_widget = FieldWidget(IBytesContent[\'file_field\'], NamedFileWidget(make_request()))\n+  >>> bytes_file_widget.context = content\n \n-  >>> ascii_image_widget = FieldWidget(IASCIIContent[\'image_field\'], NamedImageWidget(make_request()))\n-  >>> ascii_image_widget.context = content\n+  >>> bytes_image_widget = FieldWidget(IBytesContent[\'image_field\'], NamedImageWidget(make_request()))\n+  >>> bytes_image_widget.context = content\n \n   >>> request = make_request()\n-  >>> view = Download(ascii_file_widget, request)\n+  >>> view = Download(bytes_file_widget, request)\n   >>> view()\n   b\'testfile\'\n \n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'test.txt"\n \n-  >>> view = Download(ascii_image_widget, request)\n+  >>> view = Download(bytes_image_widget, request)\n   >>> view()\n   b\'testimage\'\n \n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-26T20:25:55+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/f1bb1155c6e74d814d51f28110be48b4345ccdb3

fix

Files changed:
M plone/formwidget/namedfile/interfaces.py

b'diff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex 1c0f10d..5e4eeb2 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from z3c.form.interfaces import IFileWidget\n+from z3c.form.interfaces import IWidget\n from zope import schema\n \n \n-class INamedFileWidget(IFileWidget):\n+class INamedFileWidget(IWidget):\n     """A widget for a named file field\n     """\n \n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-06-26T22:30:27+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/a7865ca1fa2982915c9fe37c5ab172224dd199bf

reduce deprecation warnings

Files changed:
M plone/formwidget/namedfile/widget.py

b'diff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 0dfb579..9565c53 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -15,7 +15,7 @@\n from plone.namedfile.utils import stream_data\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n-from Products.MimetypesRegistry.common import MimeTypeException\n+from Products.MimetypesRegistry.interfaces import MimeTypeException\n from six.moves import urllib\n from z3c.form.browser import file\n from z3c.form.group import Group\n@@ -237,8 +237,10 @@ def thumb_tag(self):\n         """ Return a img tag with a url to the preview scale and the width and\n             height of a thumbnail scale.\n \n-            This way on high pixel density screens the image is displayed in screen pixels.\n-            On non-high pixel density screens the browser will downsize them as used to.\n+            This way on high pixel density screens the image is displayed in\n+            screen pixels.\n+            On non-high pixel density screens the browser will downsize them\n+            as used to.\n         """\n         try:\n             scales = getMultiAdapter(\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-09-15T16:33:15+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/17e86639434a76f4b8dbadbacc432dbd6ce14020

fix test with py2

Files changed:
M plone/formwidget/namedfile/tests.py

b'diff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex 7e521f7..8f800b0 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n-import doctest\n-import unittest\n from plone.formwidget.namedfile.testing import INTEGRATION_TESTING\n from plone.testing import layered\n+\n+import doctest\n import re\n import six\n+import unittest\n \n \n class Py23DocChecker(doctest.OutputChecker):\n@@ -12,11 +13,9 @@ def check_output(self, want, got, optionflags):\n         if six.PY2:\n             got = re.sub(\'zope.publisher.interfaces.NotFound\', \'NotFound\', got)\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n-\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTest(\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-09-15T16:36:55+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/605c1dabe591307ac42c9f6c4d12680f84ee893e

add changenote

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ab2642d..857e388 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,8 +14,8 @@ New features:\n \n Bug fixes:\n \n-- Prepare for Python 2 / 3 compatibility\n-  [ale-rt, pbauer]\n+- Python 2 / 3 compatibility\n+  [ale-rt, pbauer, davisagli]\n \n \n 2.0.5 (2017-11-26)\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-10-02T15:40:57-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/6892791175732a750d04f92ee974896b19e49ef5

Merge branch 'master' into python3

Files changed:
A plone/formwidget/namedfile/utils.py
M CHANGES.rst
M plone/formwidget/namedfile/configure.zcml
M plone/formwidget/namedfile/converter.py
M plone/formwidget/namedfile/file_input.pt
M plone/formwidget/namedfile/image_input.pt
M plone/formwidget/namedfile/interfaces.py
M plone/formwidget/namedfile/validator.py
M plone/formwidget/namedfile/widget.py
M plone/formwidget/namedfile/widget.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 857e388..8385a9d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,7 @@\n Changelog\n =========\n \n-2.0.6 (unreleased)\n+2.0.7 (unreleased)\n ------------------\n \n Breaking changes:\n@@ -18,6 +18,18 @@ Bug fixes:\n   [ale-rt, pbauer, davisagli]\n \n \n+2.0.6 (2018-09-26)\n+------------------\n+\n+Bug fixes:\n+\n+- Prepare for Python 2 / 3 compatibility\n+  [ale-rt, pbauer]\n+\n+- On form validation errors after submitting, keep the already uploaded image.\n+  [thet]\n+\n+\n 2.0.5 (2017-11-26)\n ------------------\n \ndiff --git a/plone/formwidget/namedfile/configure.zcml b/plone/formwidget/namedfile/configure.zcml\nindex fe2c412..393ad9b 100644\n--- a/plone/formwidget/namedfile/configure.zcml\n+++ b/plone/formwidget/namedfile/configure.zcml\n@@ -12,6 +12,7 @@\n   <adapter factory=".converter.NamedDataConverter" />\n   <adapter factory=".converter.Base64Converter" />\n   <adapter factory=".validator.NamedFileWidgetValidator" />\n+  <adapter factory=".utils.FileUploadTemporaryStorage" />\n \n   <class class=".widget.NamedFileWidget">\n     <require\ndiff --git a/plone/formwidget/namedfile/converter.py b/plone/formwidget/namedfile/converter.py\nindex 58497b8..a648cd7 100644\n--- a/plone/formwidget/namedfile/converter.py\n+++ b/plone/formwidget/namedfile/converter.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.formwidget.namedfile import utils\n from plone.formwidget.namedfile.interfaces import INamedFileWidget\n from plone.formwidget.namedfile.interfaces import INamedImageWidget\n from plone.namedfile.file import NamedFile\n@@ -30,7 +31,8 @@ def toFieldValue(self, value):\n \n         if INamed.providedBy(value):\n             return value\n-        elif isinstance(value, FileUpload):\n+\n+        elif utils.is_file_upload(value):\n \n             filename = safe_basename(value.filename)\n \n@@ -108,7 +110,7 @@ def toFieldValue(self, value):\n             filename = value.filename\n             data = value.data\n \n-        elif isinstance(value, FileUpload):\n+        elif utils.is_file_upload(value):\n             filename = safe_basename(value.filename)\n             value.seek(0)\n             data = value.read()\ndiff --git a/plone/formwidget/namedfile/file_input.pt b/plone/formwidget/namedfile/file_input.pt\nindex 72e265b..635b0a7 100644\n--- a/plone/formwidget/namedfile/file_input.pt\n+++ b/plone/formwidget/namedfile/file_input.pt\n@@ -28,13 +28,20 @@\n                 doc_type view/file_content_type;\n                 icon view/file_icon;\n                 filename view/filename;">\n-    <span tal:condition="python: exists and download_url and action==\'nochange\'">\n+    <tal:if tal:define="up_id view/file_upload_id" tal:condition="up_id">\n+      <input type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n+      <span>\n+        <tal:i18n i18n:translate="file_already_uploaded">File already uploaded:</tal:i18n>\n+        ${view/value/filename}\n+      </span>\n+    </tal:if>\n+    <span tal:condition="python:exists and download_url and action==\'nochange\'">\n         <img tal:condition="icon" src="" alt=""\n              tal:attributes="src icon;\n                              alt doc_type;\n                              title filename;"/>\n         <a\n-            tal:content="view/filename"\n+            tal:content="filename"\n             tal:attributes="href download_url"\n             >Filename</a>\n         <span class="discreet"> &mdash;<tal:doc_type condition="doc_type">\n@@ -52,7 +59,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-nochange;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                            checked python:(action == \'nochange\') and \'checked\' or None;"\n+                            checked python:\'checked\' if action == \'nochange\' else None"\n             />\n         <label\n             tal:attributes="for string:${view/id}-nochange" i18n:translate="file_keep">Keep existing file</label>\n@@ -65,7 +72,7 @@\n                 tal:attributes="name string:${view/name}.action;\n                                 id string:${view/id}-remove;\n                                 onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                                checked python:action == \'remove\' and \'checked\' or None;"\n+                                checked python:\'checked\' if action == \'remove\' else None"\n                 />\n             <label\n                 tal:attributes="for string:${view/id}-remove" i18n:translate="file_remove">Remove existing file</label>\n@@ -78,7 +85,8 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-replace;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=false;\n-                            checked python:action == \'replace\' and \'checked\' or None;" />\n+                            checked python:\'checked\' if action == \'replace\' else None"\n+            />\n         <label\n             tal:attributes="for string:${view/id}-replace" i18n:translate="file_replace">Replace with new file</label>\n     </div>\ndiff --git a/plone/formwidget/namedfile/image_input.pt b/plone/formwidget/namedfile/image_input.pt\nindex a7a3dc9..d376898 100644\n--- a/plone/formwidget/namedfile/image_input.pt\n+++ b/plone/formwidget/namedfile/image_input.pt\n@@ -22,12 +22,19 @@\n                     accesskey view/accesskey;\n                     onselect view/onselect;"\n     tal:define="download_url view/download_url;\n-                filename view/filename;\n                 exists python: view.value is not None;\n                 action view/action;\n                 allow_nochange view/allow_nochange;\n                 doc_type view/file_content_type;\n-                icon view/file_icon;">\n+                icon view/file_icon;\n+                filename view/filename;">\n+    <tal:if tal:define="up_id view/file_upload_id" tal:condition="up_id">\n+      <input type="hidden" name="${view/name}.file_upload_id" value="${up_id}"/>\n+      <span>\n+        <tal:i18n i18n:translate="image_already_uploaded">Image already uploaded:</tal:i18n>\n+        ${view/value/filename}\n+      </span>\n+    </tal:if>\n     <span tal:condition="python:exists and download_url and action==\'nochange\'">\n       <a tal:attributes="href download_url">\n           <img tal:replace="structure view/thumb_tag"/>\n@@ -55,7 +62,7 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-nochange;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                            checked python:(action == \'nochange\') and \'checked\' or None;"\n+                            checked python:\'checked\' if action == \'nochange\' else None"\n             />\n         <label\n             tal:attributes="for string:${view/id}-nochange" i18n:translate="image_keep">Keep existing image</label>\n@@ -68,7 +75,7 @@\n                 tal:attributes="name string:${view/name}.action;\n                                 id string:${view/id}-remove;\n                                 onclick string:document.getElementById(\'${view/id}-input\').disabled=true;\n-                                checked python:action== \'remove\' and \'checked\' or None;"\n+                                checked python:\'checked\' if action == \'remove\' else None"\n                 />\n             <label\n                 tal:attributes="for string:${view/id}-remove" i18n:translate="image_remove">Remove existing image</label>\n@@ -81,7 +88,8 @@\n             tal:attributes="name string:${view/name}.action;\n                             id string:${view/id}-replace;\n                             onclick string:document.getElementById(\'${view/id}-input\').disabled=false;\n-                            checked python:action == \'replace\' and \'checked\' or None;" />\n+                            checked python:\'checked\' if action == \'replace\' else None"\n+            />\n         <label\n             tal:attributes="for string:${view/id}-replace" i18n:translate="image_replace">Replace with new image</label>\n     </div>\ndiff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex 5e4eeb2..5746762 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from z3c.form.interfaces import IWidget\n from zope import schema\n+from zope.interface import Attribute\n+from zope.interface import Interface\n \n \n class INamedFileWidget(IWidget):\n@@ -27,3 +29,17 @@ class INamedImageWidget(INamedFileWidget):\n     height = schema.Int(title=u"Image height", min=0, required=False)\n     thumb_tag = schema.Text(title=u"Thumbnail image tag", required=False)\n     alt = schema.TextLine(title=u"Image alternative text", required=False)\n+\n+\n+class IFileUploadTemporaryStorage(Interface):\n+    """Temporary storage adapter for file uploads.\n+    To be used to not need to re-upload files after form submission errors.\n+    """\n+    upload_map = Attribute("""\n+        Mapping for temporary uploads.\n+        Key is a uuid4.hex value.\n+        The default storage is the annotation storage of the poral root.\n+    """)\n+\n+    def cleanup():\n+        """Removes stale temporary uploads from the upload storage"""\ndiff --git a/plone/formwidget/namedfile/utils.py b/plone/formwidget/namedfile/utils.py\nnew file mode 100644\nindex 0000000..da16d48\n--- /dev/null\n+++ b/plone/formwidget/namedfile/utils.py\n@@ -0,0 +1,53 @@\n+# -*- coding: utf-8 -*-\n+from BTrees.OOBTree import OOBTree\n+from datetime import datetime\n+from datetime import timedelta\n+from persistent.dict import PersistentDict\n+from plone.formwidget.namedfile.interfaces import IFileUploadTemporaryStorage\n+from random import randint\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from ZPublisher.HTTPRequest import FileUpload\n+\n+\n+FILE_UPLOAD_MAP_KEY = \'file_upload_map\'\n+FILE_UPLOAD_EXPIRATION_TIME = 30*60  # seconds\n+FALLBACK_DATE = datetime(2000, 2, 2)\n+\n+\n+def is_file_upload(item):\n+    """Check if ``item`` is a file upload.\n+    """\n+    return isinstance(item, FileUpload)\n+\n+\n+@implementer(IFileUploadTemporaryStorage)\n+@adapter(Interface)\n+class FileUploadTemporaryStorage(object):\n+    """Temporary storage adapter for file uploads.\n+    To be used to not need to re-upload files after form submission errors.\n+    """\n+\n+    def __init__(self, context):\n+        self.context = context\n+\n+    @property\n+    def upload_map(self):\n+        annotations = IAnnotations(self.context)\n+        upload_map = annotations.setdefault(FILE_UPLOAD_MAP_KEY, OOBTree())\n+        return upload_map\n+\n+    def cleanup(self):\n+        """Remove obsolete temporary uploads.\n+        """\n+        upload_map = self.upload_map\n+        for key, val in upload_map.items():\n+            if val.get(\'dt\', FALLBACK_DATE) < (\n+                datetime.now() - timedelta(\n+                    seconds=FILE_UPLOAD_EXPIRATION_TIME\n+                )\n+            ) and randint(0, 5) == 0:  # Avoid conflict errors by deleting only every fifth time  # noqa\n+                # Delete expired files or files without timestamp\n+                del upload_map[key]\ndiff --git a/plone/formwidget/namedfile/validator.py b/plone/formwidget/namedfile/validator.py\nindex c1a19a8..0815f71 100644\n--- a/plone/formwidget/namedfile/validator.py\n+++ b/plone/formwidget/namedfile/validator.py\n@@ -18,6 +18,7 @@ def validate(self, value, force=False):\n             raise InvalidState()\n         return super(NamedFileWidgetValidator, self).validate(value, force)\n \n+\n validator.WidgetValidatorDiscriminators(\n     NamedFileWidgetValidator,\n     field=INamedField\ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 9565c53..5f83ac3 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -1,12 +1,19 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import Explicit\n+from datetime import datetime\n+from plone.formwidget.namedfile import utils\n from plone.formwidget.namedfile.converter import b64decode_file\n+from plone.formwidget.namedfile.interfaces import IFileUploadTemporaryStorage\n from plone.formwidget.namedfile.interfaces import INamedFileWidget\n from plone.formwidget.namedfile.interfaces import INamedImageWidget\n+from plone.namedfile.file import NamedBlobFile\n+from plone.namedfile.file import NamedBlobImage\n from plone.namedfile.file import NamedFile\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamed\n+from plone.namedfile.interfaces import INamedBlobFileField\n+from plone.namedfile.interfaces import INamedBlobImageField\n from plone.namedfile.interfaces import INamedFileField\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.interfaces import INamedImageField\n@@ -34,9 +41,10 @@\n from zope.publisher.interfaces import NotFound\n from zope.schema.interfaces import IBytes\n from zope.size import byteDisplay\n-from ZPublisher.HTTPRequest import FileUpload\n-\n+from persistent.dict import PersistentDict\n import six\n+import uuid\n+\n \n try:\n     from os import SEEK_END\n@@ -48,12 +56,25 @@ def _make_namedfile(value, field, widget):\n     """Return a NamedImage or NamedFile instance, if it isn\'t already one -\n     e.g. when it\'s base64 encoded data.\n     """\n-    if isinstance(value, six.binary_type) and IBytes.providedBy(field):\n+\n+    if INamed.providedBy(value):\n+        return value\n+\n+    if isinstance(value, six.string_types) and IASCII.providedBy(field):\n         filename, data = b64decode_file(value)\n-        if INamedImageWidget.providedBy(widget):\n-            value = NamedImage(data=data, filename=filename)\n-        else:\n-            value = NamedFile(data=data, filename=filename)\n+    elif isinstance(value, dict) or isinstance(value, PersistentDict):\n+        filename = value[\'filename\']\n+        data = value[\'data\']\n+\n+    if INamedBlobImageField.providedBy(field):\n+        value = NamedBlobImage(data=data, filename=filename)\n+    elif INamedImageField.providedBy(field):\n+        value = NamedImage(data=data, filename=filename)\n+    elif INamedBlobFileField.providedBy(field):\n+        value = NamedBlobFile(data=data, filename=filename)\n+    else:\n+        value = NamedFile(data=data, filename=filename)\n+\n     return value\n \n \n@@ -64,6 +85,45 @@ class NamedFileWidget(Explicit, file.FileWidget):\n \n     klass = u\'named-file-widget\'\n     value = None  # don\'t default to a string\n+    _file_upload_id = None\n+\n+    @property\n+    def is_uploaded(self):\n+        return utils.is_file_upload(self.value)\\\n+            or INamed.providedBy(self.value)\n+\n+    @property\n+    def file_upload_id(self):\n+        """Temporary store the uploaded file contents with a file_upload_id key.\n+        In case of form validation errors the already uploaded image can then\n+        be reused.\n+        """\n+        if self._file_upload_id:\n+            # cache this property for multiple calls within one request.\n+            # This avoids storing a file upload multiple times.\n+            return self._file_upload_id\n+\n+        upload_id = None\n+        if self.is_uploaded:\n+            data = None\n+            if INamed.providedBy(self.value):\n+                # previously uploaded and failed\n+                data = self.value.data\n+            else:\n+                self.value.seek(0)\n+                data = self.value.read()\n+\n+            upload_id = uuid.uuid4().hex\n+            up = IFileUploadTemporaryStorage(getSite())\n+            up.cleanup()\n+            up.upload_map[upload_id] = PersistentDict(\n+                filename=self.value.filename,\n+                data=data,\n+                dt=datetime.now(),\n+            )\n+\n+        self._file_upload_id = upload_id\n+        return upload_id\n \n     @property\n     def allow_nochange(self):\n@@ -73,11 +133,9 @@ def allow_nochange(self):\n \n     @property\n     def filename(self):\n-        if self.field is not None and self.value == self.field.missing_value:\n-            return None\n-        elif INamed.providedBy(self.value):\n+        if INamed.providedBy(self.value):\n             return self.value.filename\n-        elif isinstance(self.value, FileUpload):\n+        elif utils.is_file_upload(self.value):\n             return safe_basename(self.value.filename)\n         else:\n             return None\n@@ -174,16 +232,20 @@ def download_url(self):\n \n     def action(self):\n         action = self.request.get("%s.action" % self.name, "nochange")\n-        if hasattr(self.form, \'successMessage\')\\\n-                and self.form.status == self.form.successMessage:\n+        if self.is_uploaded or (\n+            hasattr(self.form, \'successMessage\')\n+            and self.form.status == self.form.successMessage\n+        ):\n             # if form action completed successfully, we want nochange\n             action = \'nochange\'\n         return action\n \n     def extract(self, default=NOVALUE):\n+        url = self.request.getURL()\n         action = self.request.get("%s.action" % self.name, None)\n-        if self.request.get(\n-                \'PATH_INFO\', \'\').endswith(\'kss_z3cform_inline_validation\'):\n+        if url.endswith(\'kss_z3cform_inline_validation\')\\\n+                or url.endswith(\'z3cform_validate_field\'):\n+            # Ignore validation requests.\n             action = \'nochange\'\n \n         if action == \'remove\':\n@@ -191,6 +253,38 @@ def extract(self, default=NOVALUE):\n         elif action == \'nochange\':\n             if self.value is not None:\n                 return self.value\n+\n+            if url.endswith(\'z3cform_validate_field\'):\n+                # Ignore validation requests.\n+                return None\n+\n+            # Handle already uploaded files in case of previous form errors\n+            file_upload_id = self.request.get(\n+                "%s.file_upload_id" % self.name\n+            ) or 0\n+            if file_upload_id:\n+                upload_map = IFileUploadTemporaryStorage(getSite()).upload_map\n+                fileinfo = upload_map.get(file_upload_id, {})\n+                filename = fileinfo.get(\'filename\')\n+                data = fileinfo.get(\'data\')\n+\n+                if filename or data:\n+                    filename = safe_basename(filename)\n+                    if (\n+                            filename is not None\n+                            and not isinstance(filename, unicode)\n+                    ):\n+                        # work-around for\n+                        # https://bugs.launchpad.net/zope2/+bug/499696\n+                        filename = filename.decode(\'utf-8\')\n+                    del upload_map[file_upload_id]\n+                    value = {\n+                        \'data\': data,\n+                        \'filename\': filename,\n+                    }\n+                    ret = _make_namedfile(value, self.field, self)\n+                    return ret\n+\n             if self.ignoreContext:\n                 return default\n             dm = getMultiAdapter((self.context, self.field,), IDataManager)\n@@ -201,7 +295,7 @@ def extract(self, default=NOVALUE):\n \n         # empty unnamed FileUploads should not count as a value\n         value = super(NamedFileWidget, self).extract(default)\n-        if isinstance(value, FileUpload):\n+        if utils.is_file_upload(value):\n             value.seek(0, SEEK_END)\n             empty = value.tell() == 0\n             value.seek(0)\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex 8aac84f..29aba65 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -144,12 +144,22 @@ The rendering is unchanged::\n \n   >>> print(file_widget.render())\n   <span id="widget.id.file" class="named-file-widget">\n+      <input type="hidden" name="widget.name.file.file_upload_id" value="...\n+      <span>\n+        File already uploaded:\n+        foo.bar\n+      </span>\n       <input type="file" id="widget.id.file-input"\n              name="widget.name.file" />\n   </span>\n \n   >>> print(image_widget.render())\n   <span id="widget.id.image" class="named-image-widget">\n+      <input type="hidden" name="widget.name.image.file_upload_id" value="...\n+      <span>\n+        Image already uploaded:\n+        foo.bar\n+      </span>\n       <input type="file" id="widget.id.image-input"\n              name="widget.name.image" />\n   </span>\n@@ -658,7 +668,7 @@ Let\'s upload data::\n   >>> content.file_field\n   b\'filenameb64:ZmlsZTEudHh0;datab64:ZmlsZSAxIGNvbnRlbnQu\'\n \n-Check that we have a good image that PIL can handle:\n+Check that we have a good image that PIL can handle::\n \n   >>> import PIL.Image\n   >>> PIL.Image.open(get_file(\'image.jpg\'))\ndiff --git a/setup.py b/setup.py\nindex cddddbe..c593cca 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.0.6.dev0\'\n+version = \'2.0.7.dev0\'\n \n setup(\n     name=\'plone.formwidget.namedfile\',\n@@ -14,6 +14,7 @@\n     classifiers=[\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n@@ -22,9 +23,9 @@\n     keywords=\'plone image widget z3c.form\',\n     author=\'Martin Aspeli\',\n     author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.python.org/pypi/plone.formwidget.namedfile\',\n+    url=\'https://pypi.org/project/plone.formwidget.namedfile\',\n     license=\'GPL\',\n-    packages=find_packages(exclude=[\'ez_setup\']),\n+    packages=find_packages(),\n     namespace_packages=[\'plone\', \'plone.formwidget\'],\n     include_package_data=True,\n     zip_safe=False,\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-10-02T22:24:53+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/e384476c35599b741a4c3bf4c1384e5e1c224a0a

fix extract

Files changed:
M plone/formwidget/namedfile/widget.py

b'diff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 5f83ac3..5f9d2b5 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -272,7 +272,7 @@ def extract(self, default=NOVALUE):\n                     filename = safe_basename(filename)\n                     if (\n                             filename is not None\n-                            and not isinstance(filename, unicode)\n+                            and not isinstance(filename, six.text_type)\n                     ):\n                         # work-around for\n                         # https://bugs.launchpad.net/zope2/+bug/499696\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-10-02T19:15:06-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/f0a97aa0bd00b1e6d12655ea55fad60dd6d1c7cc

Fix basestring-ish check

Files changed:
M plone/formwidget/namedfile/widget.py

b"diff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 5f9d2b5..2bc21d4 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -60,7 +60,8 @@ def _make_namedfile(value, field, widget):\n     if INamed.providedBy(value):\n         return value\n \n-    if isinstance(value, six.string_types) and IASCII.providedBy(field):\n+    string_types = (six.binary_type, six.text_type)\n+    if isinstance(value, string_types) and IBytes.providedBy(field):\n         filename, data = b64decode_file(value)\n     elif isinstance(value, dict) or isinstance(value, PersistentDict):\n         filename = value['filename']\n"

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2018-10-17T11:46:19+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/9a1b3196c193830be3cbe7b88a3b7a316910bb16

Merge pull request #33 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/formwidget/namedfile/converter.py
M plone/formwidget/namedfile/interfaces.py
M plone/formwidget/namedfile/testing.py
M plone/formwidget/namedfile/tests.py
M plone/formwidget/namedfile/widget.py
M plone/formwidget/namedfile/widget.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d676e0a..8385a9d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Python 2 / 3 compatibility\n+  [ale-rt, pbauer, davisagli]\n \n \n 2.0.6 (2018-09-26)\ndiff --git a/plone/formwidget/namedfile/converter.py b/plone/formwidget/namedfile/converter.py\nindex 58d4721..a648cd7 100644\n--- a/plone/formwidget/namedfile/converter.py\n+++ b/plone/formwidget/namedfile/converter.py\n@@ -9,7 +9,7 @@\n from plone.namedfile.utils import safe_basename\n from z3c.form.converter import BaseDataConverter\n from zope.component import adapts\n-from zope.schema.interfaces import IASCII\n+from zope.schema.interfaces import IBytes\n from ZPublisher.HTTPRequest import FileUpload\n \n import base64\n@@ -36,8 +36,7 @@ def toFieldValue(self, value):\n \n             filename = safe_basename(value.filename)\n \n-            if filename is not None and not isinstance(\n-                    filename, six.text_type):\n+            if filename is not None and isinstance(filename, six.binary_type):\n                 # Work-around for\n                 # https://bugs.launchpad.net/zope2/+bug/499696\n                 filename = filename.decode(\'utf-8\')\n@@ -52,7 +51,7 @@ def toFieldValue(self, value):\n         else:\n             if isinstance(value, six.text_type):\n                 value = value.encode(\'utf-8\')\n-            return self.field._type(data=str(value))\n+            return self.field._type(data=value)\n \n \n def b64encode_file(filename, data):\n@@ -62,34 +61,36 @@ def b64encode_file(filename, data):\n         filename = filename.encode(\'utf-8\')\n     filenameb64 = base64.standard_b64encode(filename or \'\')\n     datab64 = base64.standard_b64encode(data)\n-    filename = "filenameb64:%s;datab64:%s" % (\n+    filename = b"filenameb64:%s;datab64:%s" % (\n         filenameb64, datab64\n     )\n-    return filename.encode(\'ascii\')\n+    return filename\n \n \n def b64decode_file(value):\n-    filename, data = value.split(\';\')\n+    if isinstance(value, six.text_type):\n+        value = value.encode(\'utf8\')\n+    filename, data = value.split(b\';\')\n \n-    filename = filename.split(\':\')[1]\n+    filename = filename.split(b\':\')[1]\n     filename = base64.standard_b64decode(filename)\n     filename = filename.decode(\'utf-8\')\n \n-    data = data.split(\':\')[1]\n+    data = data.split(b\':\')[1]\n     data = base64.standard_b64decode(data)\n \n     return filename, data\n \n \n class Base64Converter(BaseDataConverter):\n-    """Converts between ASCII fields with base64 encoded data and a filename\n+    """Converts between Bytes fields with base64 encoded data and a filename\n     and INamedImage/INamedFile values.\n     """\n-    adapts(IASCII, INamedFileWidget)\n+    adapts(IBytes, INamedFileWidget)\n \n     def toWidgetValue(self, value):\n \n-        if not isinstance(value, six.string_types):\n+        if not isinstance(value, (six.text_type, six.binary_type)):\n             return None\n \n         filename, data = b64decode_file(value)\ndiff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex 9bf2488..5746762 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -1,11 +1,11 @@\n # -*- coding: utf-8 -*-\n-from z3c.form.interfaces import IFileWidget\n+from z3c.form.interfaces import IWidget\n from zope import schema\n from zope.interface import Attribute\n from zope.interface import Interface\n \n \n-class INamedFileWidget(IFileWidget):\n+class INamedFileWidget(IWidget):\n     """A widget for a named file field\n     """\n \ndiff --git a/plone/formwidget/namedfile/testing.py b/plone/formwidget/namedfile/testing.py\nindex cae1987..0d88d98 100644\n--- a/plone/formwidget/namedfile/testing.py\n+++ b/plone/formwidget/namedfile/testing.py\n@@ -11,7 +11,7 @@\n def get_file(filename):\n     """Return contents of the file with the given name."""\n     filename = os.path.join(os.path.dirname(__file__), filename)\n-    return open(filename, \'r\')\n+    return open(filename, \'rb\')\n \n \n class PloneFormwidgetNamedfileLayer(PloneSandboxLayer):\ndiff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex c1ee271..8f800b0 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -3,16 +3,28 @@\n from plone.testing import layered\n \n import doctest\n+import re\n+import six\n import unittest\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub(\'zope.publisher.interfaces.NotFound\', \'NotFound\', got)\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTest(\n         layered(doctest.DocFileSuite(\n             \'widget.rst\',\n             optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,\n-            encoding=\'utf-8\'),\n+            encoding=\'utf-8\',\n+            checker=Py23DocChecker(),\n+            ),\n             layer=INTEGRATION_TESTING),\n     )\n     return suite\ndiff --git a/plone/formwidget/namedfile/widget.py b/plone/formwidget/namedfile/widget.py\nindex 0ba758a..2bc21d4 100644\n--- a/plone/formwidget/namedfile/widget.py\n+++ b/plone/formwidget/namedfile/widget.py\n@@ -22,7 +22,7 @@\n from plone.namedfile.utils import stream_data\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n-from Products.MimetypesRegistry.common import MimeTypeException\n+from Products.MimetypesRegistry.interfaces import MimeTypeException\n from six.moves import urllib\n from z3c.form.browser import file\n from z3c.form.group import Group\n@@ -39,7 +39,7 @@\n from zope.interface import implementer_only\n from zope.publisher.interfaces import IPublishTraverse\n from zope.publisher.interfaces import NotFound\n-from zope.schema.interfaces import IASCII\n+from zope.schema.interfaces import IBytes\n from zope.size import byteDisplay\n from persistent.dict import PersistentDict\n import six\n@@ -56,10 +56,12 @@ def _make_namedfile(value, field, widget):\n     """Return a NamedImage or NamedFile instance, if it isn\'t already one -\n     e.g. when it\'s base64 encoded data.\n     """\n+\n     if INamed.providedBy(value):\n         return value\n \n-    if isinstance(value, six.string_types) and IASCII.providedBy(field):\n+    string_types = (six.binary_type, six.text_type)\n+    if isinstance(value, string_types) and IBytes.providedBy(field):\n         filename, data = b64decode_file(value)\n     elif isinstance(value, dict) or isinstance(value, PersistentDict):\n         filename = value[\'filename\']\n@@ -271,7 +273,7 @@ def extract(self, default=NOVALUE):\n                     filename = safe_basename(filename)\n                     if (\n                             filename is not None\n-                            and not isinstance(filename, unicode)\n+                            and not isinstance(filename, six.text_type)\n                     ):\n                         # work-around for\n                         # https://bugs.launchpad.net/zope2/+bug/499696\n@@ -330,8 +332,10 @@ def thumb_tag(self):\n         """ Return a img tag with a url to the preview scale and the width and\n             height of a thumbnail scale.\n \n-            This way on high pixel density screens the image is displayed in screen pixels.\n-            On non-high pixel density screens the browser will downsize them as used to.\n+            This way on high pixel density screens the image is displayed in\n+            screen pixels.\n+            On non-high pixel density screens the browser will downsize them\n+            as used to.\n         """\n         try:\n             scales = getMultiAdapter(\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex dc5230c..29aba65 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -86,18 +86,18 @@ Later, we will show more advanced functionality when using a field-widget::\n \n We can extract simple file data from the widget like this::\n \n-  >>> import cStringIO\n-  >>> myfile = cStringIO.StringIO(\'My file contents.\')\n+  >>> import six\n+  >>> myfile = six.BytesIO(b\'My file contents.\')\n \n   >>> file_widget.request = make_request(form={\'widget.name.file\': myfile})\n   >>> file_widget.update()\n   >>> file_widget.extract()\n-  <cStringIO.StringI object at ...>\n+  <...IO object at ...>\n \n   >>> image_widget.request = make_request(form={\'widget.name.image\': myfile})\n   >>> image_widget.update()\n   >>> image_widget.extract()\n-  <cStringIO.StringI object at ...>\n+  <...IO object at ...>\n \n If nothing is found in the request, the default is returned::\n \n@@ -113,7 +113,6 @@ If nothing is found in the request, the default is returned::\n \n We can also handle file-upload objects::\n \n-  >>> import cStringIO\n   >>> from ZPublisher.HTTPRequest import FileUpload\n \n Let\'s define a FieldStorage stub for easy use with the FileUpload::\n@@ -127,7 +126,7 @@ Let\'s define a FieldStorage stub for easy use with the FileUpload::\n \n Now build a FileUpload::\n \n-  >>> myfile = cStringIO.StringIO(\'File upload contents.\')\n+  >>> myfile = six.BytesIO(b\'File upload contents.\')\n   >>> aFieldStorage = FieldStorageStub(myfile)\n   >>> myUpload = FileUpload(aFieldStorage)\n \n@@ -167,7 +166,7 @@ The rendering is unchanged::\n \n Empty, unnamed FileUploads are treated as having no value::\n \n-  >>> emptyfile = cStringIO.StringIO(\'\')\n+  >>> emptyfile = six.BytesIO(b\'\')\n   >>> aFieldStorage = FieldStorageStub(emptyfile, filename=\'\')\n   >>> myEmptyUpload = FileUpload(aFieldStorage)\n \n@@ -193,7 +192,7 @@ For this to work, we need a context and a data manager::\n \n   >>> from DateTime import DateTime\n   >>> from plone.namedfile import field\n-  >>> from zope.interface import implements, Interface\n+  >>> from zope.interface import implementer, Interface\n   >>> from plone.namedfile.interfaces import IImageScaleTraversable\n   >>> from zope.annotation.interfaces import IAttributeAnnotatable\n   >>> class IContent(Interface):\n@@ -201,8 +200,8 @@ For this to work, we need a context and a data manager::\n   ...     image_field = field.NamedImage(title=u"Image")\n \n   >>> root_url = TestRequest().getURL()\n-  >>> class Content(object):\n-  ...     implements(IContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  >>> @implementer(IContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  ... class Content(object):\n   ...     def __init__(self, file, image):\n   ...         self.file_field = file\n   ...         self.image_field = image\n@@ -264,8 +263,8 @@ characters::\n   >>> from plone.namedfile import NamedFile, NamedImage\n   >>> from plone.formwidget.namedfile.testing import get_file\n   >>> image_data = get_file(\'image.jpg\').read()\n-  >>> file_widget.value = NamedFile(data=\'My file data\',\n-  ...                               filename=unicode(\'data_\xe6\xb7\xb1.txt\', \'utf-8\'))\n+  >>> file_widget.value = NamedFile(data=b\'My file data\',\n+  ...                               filename=u\'data_\xe6\xb7\xb1.txt\')\n   >>> aFieldStorage = FieldStorageStub(get_file(\'image.jpg\'), filename=\'faux.jpg\')\n   >>> myUpload = FileUpload(aFieldStorage)\n   >>> image_widget.request = make_request(form={\'widget.name.image\': myUpload})\n@@ -291,7 +290,7 @@ Notice how there are radio buttons to decide whether to upload a new file or\n keep the existing one. If the \'.action\' field is not submitted or is\n empty, the behaviour is the same as before::\n \n-  >>> myfile = cStringIO.StringIO(\'File upload contents.\')\n+  >>> myfile = six.BytesIO(b\'File upload contents.\')\n   >>> aFieldStorage = FieldStorageStub(myfile, filename=\'test2.txt\')\n   >>> myUpload = FileUpload(aFieldStorage)\n \n@@ -333,7 +332,7 @@ If the widgets are rendered again, the newly uploaded files will be shown::\n However, if we provide the \'.action\' field, we get back the value currently\n stored in the field::\n \n-  >>> content.file_field = NamedFile(data=\'My file data\', filename=u\'data.txt\')\n+  >>> content.file_field = NamedFile(data=b\'My file data\', filename=u\'data.txt\')\n   >>> content.image_field = NamedImage(data=image_data, filename=u\'faux.jpg\')\n \n   >>> file_widget.value = content.file_field\n@@ -370,7 +369,7 @@ this view to display the image itself or link to the file::\n   >>> request = make_request()\n   >>> view = Download(file_widget, request)\n   >>> view()\n-  \'My file data\'\n+  b\'My file data\'\n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'data.txt"\n \n@@ -381,7 +380,7 @@ doesn\'t stop it being found::\n   >>> view = Download(file_widget, request)\n   >>> view = view.publishTraverse(request, \'daisy.txt\')\n   >>> view()\n-  \'My file data\'\n+  b\'My file data\'\n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'daisy.txt"\n \n@@ -393,7 +392,7 @@ Any additional traversal will result in an error::\n   >>> view = view.publishTraverse(request, \'daisy.txt\')\n   Traceback (most recent call last):\n   ...\n-  NotFound: ... \'daisy.txt\'\n+  zope.publisher.interfaces.NotFound: ... \'daisy.txt\'\n \n \n The converter\n@@ -436,7 +435,7 @@ A data string is converted to the appropriate type::\n   >>> file_converter.toFieldValue(\'some file content\')\n   <plone.namedfile.file.NamedFile object at ...>\n \n-  >>> image_converter.toFieldValue(\'random data\')\n+  >>> image_converter.toFieldValue(b\'random data\')\n   <plone.namedfile.file.NamedImage object at ...>\n \n A FileUpload object is converted to the appropriate type, preserving filename,\n@@ -445,15 +444,15 @@ The content type sent by the browser will be ignored because it\'s unreliable\n - it\'s left to the implementation of the file field to determine the proper\n content type::\n \n-  >>> myfile = cStringIO.StringIO(\'File upload contents.\')\n+  >>> myfile = six.BytesIO(b\'File upload contents.\')\n   >>> # \\xc3\\xb8 is UTF-8 for a small letter o with slash\n-  >>> aFieldStorage = FieldStorageStub(myfile, filename=\'rand\\xc3\\xb8m.txt\',\n+  >>> aFieldStorage = FieldStorageStub(myfile, filename=b\'rand\\xc3\\xb8m.txt\'.decode(\'utf8\'),\n   ...     headers={\'Content-Type\': \'text/x-dummy\'})\n   >>> file_obj = file_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> file_obj.data\n-  \'File upload contents.\'\n-  >>> file_obj.filename\n-  u\'rand\\xf8m.txt\'\n+  b\'File upload contents.\'\n+  >>> print(file_obj.filename.encode(\'utf8\'))\n+  b\'rand\\xc3\\xb8m.txt\'\n \n Content type from headers sent by browser should be ignored::\n \n@@ -465,7 +464,7 @@ Content type from headers sent by browser should be ignored::\n   >>> image_obj.data == image_data\n   True\n   >>> image_obj.filename\n-  u\'random.png\'\n+  \'random.png\'\n   >>> image_obj.contentType != \'image/x-dummy\'\n   True\n \n@@ -473,7 +472,7 @@ Content type from headers sent by browser should be ignored::\n However, a zero-length, unnamed FileUpload results in the field\'s missing_value\n being returned::\n \n-  >>> myfile = cStringIO.StringIO(\'\')\n+  >>> myfile = six.BytesIO(b\'\')\n   >>> aFieldStorage = FieldStorageStub(myfile, filename=\'\', headers={\'Content-Type\': \'application/octet-stream\'})\n   >>> field_value = file_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> field_value is IContent[\'file_field\'].missing_value\n@@ -483,17 +482,17 @@ being returned::\n   True\n \n \n-The Base64Converter for ASCII fields\n+The Base64Converter for Bytes fields\n ------------------------------------\n \n There is another converter, which converts between a NamedFile or file upload\n-instance and base64 encoded data, which can be stored in a ASCII field::\n+instance and base64 encoded data, which can be stored in a Bytes field::\n \n   >>> from zope import schema\n-  >>> from zope.interface import implements, Interface\n-  >>> class IASCIIContent(Interface):\n-  ...     file_field = schema.ASCII(title=u"File")\n-  ...     image_field = schema.ASCII(title=u"Image")\n+  >>> from zope.interface import implementer, Interface\n+  >>> class IBytesContent(Interface):\n+  ...     file_field = schema.Bytes(title=u"File")\n+  ...     image_field = schema.Bytes(title=u"Image")\n \n   >>> from plone.formwidget.namedfile.converter import Base64Converter\n   >>> provideAdapter(Base64Converter)\n@@ -501,25 +500,25 @@ instance and base64 encoded data, which can be stored in a ASCII field::\n   >>> from zope.component import getMultiAdapter\n   >>> from z3c.form.interfaces import IDataConverter\n \n-  >>> ascii_file_converter = getMultiAdapter(\n-  ...     (IASCIIContent[\'file_field\'], file_widget),\n+  >>> bytes_file_converter = getMultiAdapter(\n+  ...     (IBytesContent[\'file_field\'], file_widget),\n   ...     IDataConverter\n   ... )\n-  >>> ascii_image_converter = getMultiAdapter(\n-  ...     (IASCIIContent[\'image_field\'], image_widget),\n+  >>> bytes_image_converter = getMultiAdapter(\n+  ...     (IBytesContent[\'image_field\'], image_widget),\n   ...     IDataConverter\n   ... )\n \n A value of None or \'\' results in the field\'s missing_value being returned::\n \n-  >>> ascii_file_converter.toFieldValue(u\'\') is IASCIIContent[\'file_field\'].missing_value\n+  >>> bytes_file_converter.toFieldValue(u\'\') is IBytesContent[\'file_field\'].missing_value\n   True\n-  >>> ascii_file_converter.toFieldValue(None) is IASCIIContent[\'file_field\'].missing_value\n+  >>> bytes_file_converter.toFieldValue(None) is IBytesContent[\'file_field\'].missing_value\n   True\n \n-  >>> ascii_image_converter.toFieldValue(u\'\') is IASCIIContent[\'image_field\'].missing_value\n+  >>> bytes_image_converter.toFieldValue(u\'\') is IBytesContent[\'image_field\'].missing_value\n   True\n-  >>> ascii_image_converter.toFieldValue(None) is IASCIIContent[\'image_field\'].missing_value\n+  >>> bytes_image_converter.toFieldValue(None) is IBytesContent[\'image_field\'].missing_value\n   True\n \n A named file/image instance is returned as Base 64 encoded string in the\n@@ -529,33 +528,33 @@ following form::\n \n Like so::\n \n-  >>> ascii_file_converter.toFieldValue(\n-  ...     NamedFile(data=\'testfile\', filename=u\'test.txt\'))\n-  \'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\'\n-  >>> ascii_image_converter.toFieldValue(\n-  ...     NamedImage(data=\'testimage\', filename=u\'test.png\'))\n-  \'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\'\n+  >>> bytes_file_converter.toFieldValue(\n+  ...     NamedFile(data=b\'testfile\', filename=u\'test.txt\'))\n+  b\'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\'\n+  >>> bytes_image_converter.toFieldValue(\n+  ...     NamedImage(data=b\'testimage\', filename=u\'test.png\'))\n+  b\'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\'\n \n A Base 64 encoded structure like descibed above is converted to the appropriate\n type::\n \n-  >>> afile = ascii_file_converter.toWidgetValue(\n-  ...     \'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\')\n+  >>> afile = bytes_file_converter.toWidgetValue(\n+  ...     b\'filenameb64:dGVzdC50eHQ=;datab64:dGVzdGZpbGU=\')\n   >>> afile\n   <plone.namedfile.file.NamedFile object at ...>\n   >>> afile.data\n-  \'testfile\'\n+  b\'testfile\'\n   >>> afile.filename\n-  u\'test.txt\'\n+  \'test.txt\'\n \n-  >>> aimage = ascii_image_converter.toWidgetValue(\n-  ...     \'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\')\n+  >>> aimage = bytes_image_converter.toWidgetValue(\n+  ...     b\'filenameb64:dGVzdC5wbmc=;datab64:dGVzdGltYWdl\')\n   >>> aimage\n   <plone.namedfile.file.NamedImage object at ...>\n   >>> aimage.data\n-  \'testimage\'\n+  b\'testimage\'\n   >>> aimage.filename\n-  u\'test.png\'\n+  \'test.png\'\n \n Finally, some tests with image uploads converted to the field value.\n \n@@ -563,35 +562,35 @@ Convert a file upload to the Base 64 encoded field value and handle the\n filename too::\n \n \n-  >>> myfile = cStringIO.StringIO(\'File upload contents.\')\n+  >>> myfile = six.BytesIO(b\'File upload contents.\')\n   >>> # \\xc3\\xb8 is UTF-8 for a small letter o with slash\n-  >>> aFieldStorage = FieldStorageStub(myfile, filename=\'rand\\xc3\\xb8m.txt\',\n+  >>> aFieldStorage = FieldStorageStub(myfile, filename=b\'rand\\xc3\\xb8m.txt\'.decode(\'utf8\'),\n   ...     headers={\'Content-Type\': \'text/x-dummy\'})\n-  >>> ascii_file_converter.toFieldValue(FileUpload(aFieldStorage))\n-  \'filenameb64:cmFuZMO4bS50eHQ=;datab64:RmlsZSB1cGxvYWQgY29udGVudHMu\'\n+  >>> bytes_file_converter.toFieldValue(FileUpload(aFieldStorage))\n+  b\'filenameb64:cmFuZMO4bS50eHQ=;datab64:RmlsZSB1cGxvYWQgY29udGVudHMu\'\n \n A zero-length, unnamed FileUpload results in the field\'s missing_value\n being returned::\n \n-  >>> myfile = cStringIO.StringIO(\'\')\n+  >>> myfile = six.BytesIO(b\'\')\n   >>> aFieldStorage = FieldStorageStub(myfile, filename=\'\', headers={\'Content-Type\': \'application/octet-stream\'})\n-  >>> field_value = ascii_file_converter.toFieldValue(FileUpload(aFieldStorage))\n-  >>> field_value is IASCIIContent[\'file_field\'].missing_value\n+  >>> field_value = bytes_file_converter.toFieldValue(FileUpload(aFieldStorage))\n+  >>> field_value is IBytesContent[\'file_field\'].missing_value\n   True\n-  >>> field_value = ascii_image_converter.toFieldValue(FileUpload(aFieldStorage))\n-  >>> field_value is IASCIIContent[\'image_field\'].missing_value\n+  >>> field_value = bytes_image_converter.toFieldValue(FileUpload(aFieldStorage))\n+  >>> field_value is IBytesContent[\'image_field\'].missing_value\n   True\n \n \n-Rendering ASCII field widgets\n+Rendering Bytes field widgets\n -----------------------------\n \n The widgets let the user to upload file and image data and select, if previous data should be kept, deleted or overwritten.\n \n First, let\'s do the setup::\n \n-  >>> class ASCIIContent(object):\n-  ...     implements(IASCIIContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  >>> @implementer(IBytesContent, IImageScaleTraversable, IAttributeAnnotatable)\n+  ... class BytesContent(object):\n   ...     def __init__(self, file, image):\n   ...         self.file_field = file\n   ...         self.image_field = image\n@@ -605,7 +604,7 @@ First, let\'s do the setup::\n   ...     def Title(self):\n   ...         return \'A content item\'\n \n-  >>> content = ASCIIContent(None, None)\n+  >>> content = BytesContent(None, None)\n \n   >>> from z3c.form.datamanager import AttributeField\n   >>> from zope.component import provideAdapter\n@@ -620,7 +619,7 @@ First, let\'s do the setup::\n   ...     else:\n   ...         widget = NamedFileFieldWidget\n   ...     widget = widget(\n-  ...         IASCIIContent[\'{0}_field\'.format(widget_type)],\n+  ...         IBytesContent[\'{0}_field\'.format(widget_type)],\n   ...         make_request()\n   ...     )\n   ...     widget.context = context\n@@ -628,7 +627,7 @@ First, let\'s do the setup::\n   ...     widget.name = \'widget.name.{0}\'.format(widget_type)\n   ...\n   ...     if set_widget_value:\n-  ...         converter = globals()[\'ascii_{0}_converter\'.format(widget_type)]\n+  ...         converter = globals()[\'bytes_{0}_converter\'.format(widget_type)]\n   ...         value = getattr(context, \'{0}_field\'.format(widget_type))\n   ...         widget.value = converter.toWidgetValue(value)\n   ...\n@@ -642,20 +641,20 @@ Our content has no value yet::\n \n   >>> file_widget.update()\n   >>> print(file_widget.render())\n-  <span id="widget.id.file" class="named-file-widget required ascii-field">\n+  <span id="widget.id.file" class="named-file-widget required bytes-field">\n       <input type="file" id="widget.id.file-input" name="widget.name.file" />\n   </span>\n \n   >>> image_widget.update()\n   >>> print(image_widget.render())\n-  <span id="widget.id.image" class="named-image-widget required ascii-field">\n+  <span id="widget.id.image" class="named-image-widget required bytes-field">\n       <input type="file" id="widget.id.image-input" name="widget.name.image" />\n   </span>\n \n \n Let\'s upload data::\n \n-  >>> data = cStringIO.StringIO(\'file 1 content.\')\n+  >>> data = six.BytesIO(b\'file 1 content.\')\n   >>> field_storage = FieldStorageStub(data, filename=\'file1.txt\')\n   >>> upload = FileUpload(field_storage)\n \n@@ -665,9 +664,9 @@ Let\'s upload data::\n   >>> uploaded\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.file_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n-  \'filenameb64:ZmlsZTEudHh0;datab64:ZmlsZSAxIGNvbnRlbnQu\'\n+  b\'filenameb64:ZmlsZTEudHh0;datab64:ZmlsZSAxIGNvbnRlbnQu\'\n \n Check that we have a good image that PIL can handle::\n \n@@ -683,16 +682,16 @@ Check that we have a good image that PIL can handle::\n   >>> uploaded\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> content.image_field = ascii_image_converter.toFieldValue(uploaded)\n-  >>> print(content.image_field)\n-  filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\n+  >>> content.image_field = bytes_image_converter.toFieldValue(uploaded)\n+  >>> content.image_field\n+  b\'filenameb64:aW1hZ2UuanBn;datab64:/9j/4AAQSkZJRgABAQEAYABgAAD/...\n \n-Note that PIL cannot open this ascii image, so we cannot scale it::\n+Note that PIL cannot open this bytes image, so we cannot scale it::\n \n-  >>> PIL.Image.open(cStringIO.StringIO(content.image_field))\n+  >>> PIL.Image.open(six.BytesIO(content.image_field))\n   Traceback (most recent call last):\n   ...\n-  IOError: cannot identify image file <cStringIO.StringI object at ...>\n+  OSError: cannot identify image file...\n \n Prepare for a new request cycle::\n \n@@ -704,7 +703,7 @@ The upload shows up in the rendered widget::\n \n   >>> file_widget.update()\n   >>> print(file_widget.render())\n-  <... id="widget.id.file" class="named-file-widget required ascii-field">...\n+  <... id="widget.id.file" class="named-file-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.file/@@download/file1.txt" >file1.txt</a>...\n   <input type="radio"... id="widget.id.file-nochange"...\n   <input type="radio"... id="widget.id.file-replace"...\n@@ -712,13 +711,13 @@ The upload shows up in the rendered widget::\n \n   >>> image_widget.update()\n   >>> print(image_widget.render())\n-  <... id="widget.id.image" class="named-image-widget required ascii-field">...\n+  <... id="widget.id.image" class="named-image-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.image/@@download/image.jpg" >image.jpg</a>...\n   <input type="radio"... id="widget.id.image-nochange"...\n   <input type="radio"... id="widget.id.image-replace"...\n   <input type="file"... id="widget.id.image-input"...\n \n-Like we said, we cannot scale this ascii image, so the thumb tag is empty::\n+Like we said, we cannot scale this bytes image, so the thumb tag is empty::\n \n   >>> print(image_widget.thumb_tag)\n \n@@ -730,7 +729,7 @@ Prepare for a new request cycle::\n \n Now overwrite with other data::\n \n-  >>> data = cStringIO.StringIO(\'random file content\')\n+  >>> data = six.BytesIO(b\'random file content\')\n   >>> field_storage = FieldStorageStub(data, filename=\'plone.pdf\')\n   >>> upload = FileUpload(field_storage)\n \n@@ -740,12 +739,12 @@ Now overwrite with other data::\n   >>> uploaded\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.file_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n-  \'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n+  b\'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n \n \n-  >>> data = cStringIO.StringIO(\'no image\')\n+  >>> data = six.BytesIO(b\'no image\')\n   >>> field_storage = FieldStorageStub(data, filename=\'logo.tiff\')\n   >>> upload = FileUpload(field_storage)\n \n@@ -755,9 +754,9 @@ Now overwrite with other data::\n   >>> uploaded\n   <ZPublisher.HTTPRequest.FileUpload ...>\n \n-  >>> content.image_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.image_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.image_field\n-  \'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n+  b\'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n \n \n Prepare for a new request cycle::\n@@ -770,7 +769,7 @@ The new image/file shows up in the rendered widget::\n \n   >>> file_widget.update()\n   >>> print(file_widget.render())\n-  <... id="widget.id.file" class="named-file-widget required ascii-field">...\n+  <... id="widget.id.file" class="named-file-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.file/@@download/plone.pdf" >plone.pdf</a>...\n   <input type="radio"... id="widget.id.file-nochange"...\n   <input type="radio"... id="widget.id.file-replace"...\n@@ -778,7 +777,7 @@ The new image/file shows up in the rendered widget::\n \n   >>> image_widget.update()\n   >>> print(image_widget.render())\n-  <... id="widget.id.image" class="named-image-widget required ascii-field">...\n+  <... id="widget.id.image" class="named-image-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.image/@@download/logo.tiff" >logo.tiff</a>...\n   <input type="radio"... id="widget.id.image-nochange"...\n   <input type="radio"... id="widget.id.image-replace"...\n@@ -800,9 +799,9 @@ Resubmit, but keep the data::\n   >>> uploaded\n   <plone.namedfile.file.NamedFile object at ...>\n \n-  >>> content.file_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.file_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.file_field\n-  \'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n+  b\'filenameb64:cGxvbmUucGRm;datab64:cmFuZG9tIGZpbGUgY29udGVudA==\'\n \n \n   >>> image_widget.request = make_request(form={\'widget.name.image\': \'\', \'widget.name.image.action\': \'nochange\'})\n@@ -811,9 +810,9 @@ Resubmit, but keep the data::\n   >>> uploaded\n   <plone.namedfile.file.NamedFile object at ...>\n \n-  >>> content.image_field = ascii_file_converter.toFieldValue(uploaded)\n+  >>> content.image_field = bytes_file_converter.toFieldValue(uploaded)\n   >>> content.image_field\n-  \'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n+  b\'filenameb64:bG9nby50aWZm;datab64:bm8gaW1hZ2U=\'\n \n \n Prepare for a new request cycle::\n@@ -826,7 +825,7 @@ The previous image/file should be kept::\n \n   >>> file_widget.update()\n   >>> print(file_widget.render())\n-  <... id="widget.id.file" class="named-file-widget required ascii-field">...\n+  <... id="widget.id.file" class="named-file-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.file/@@download/plone.pdf" >plone.pdf</a>...\n   <input type="radio"... id="widget.id.file-nochange"...\n   <input type="radio"... id="widget.id.file-replace"...\n@@ -834,19 +833,19 @@ The previous image/file should be kept::\n \n   >>> image_widget.update()\n   >>> print(image_widget.render())\n-  <... id="widget.id.image" class="named-image-widget required ascii-field">...\n+  <... id="widget.id.image" class="named-image-widget required bytes-field">...\n   <a href="http://127.0.0.1/content2/++widget++widget.name.image/@@download/logo.tiff" >logo.tiff</a>...\n   <input type="radio"... id="widget.id.image-nochange"...\n   <input type="radio"... id="widget.id.image-replace"...\n   <input type="file"... id="widget.id.image-input"...\n \n \n-The Download view on ASCII fields\n+The Download view on Bytes fields\n ---------------------------------\n ::\n \n-  >>> class ASCIIContent(object):\n-  ...     implements(IASCIIContent)\n+  >>> @implementer(IBytesContent)\n+  ... class BytesContent(object):\n   ...     def __init__(self, file, image):\n   ...         self.file_field = file\n   ...         self.image_field = image\n@@ -855,29 +854,29 @@ The Download view on ASCII fields\n   ...     def absolute_url(self):\n   ...         return root_url + self.path\n \n-  >>> content = ASCIIContent(\n-  ...     NamedFile(data="testfile", filename=u"test.txt"),\n-  ...     NamedImage(data="testimage", filename=u"test.jpg"))\n+  >>> content = BytesContent(\n+  ...     NamedFile(data=b"testfile", filename=u"test.txt"),\n+  ...     NamedImage(data=b"testimage", filename=u"test.jpg"))\n \n   >>> from z3c.form.widget import FieldWidget\n \n-  >>> ascii_file_widget = FieldWidget(IASCIIContent[\'file_field\'], NamedFileWidget(make_request()))\n-  >>> ascii_file_widget.context = content\n+  >>> bytes_file_widget = FieldWidget(IBytesContent[\'file_field\'], NamedFileWidget(make_request()))\n+  >>> bytes_file_widget.context = content\n \n-  >>> ascii_image_widget = FieldWidget(IASCIIContent[\'image_field\'], NamedImageWidget(make_request()))\n-  >>> ascii_image_widget.context = content\n+  >>> bytes_image_widget = FieldWidget(IBytesContent[\'image_field\'], NamedImageWidget(make_request()))\n+  >>> bytes_image_widget.context = content\n \n   >>> request = make_request()\n-  >>> view = Download(ascii_file_widget, request)\n+  >>> view = Download(bytes_file_widget, request)\n   >>> view()\n-  \'testfile\'\n+  b\'testfile\'\n \n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'test.txt"\n \n-  >>> view = Download(ascii_image_widget, request)\n+  >>> view = Download(bytes_image_widget, request)\n   >>> view()\n-  \'testimage\'\n+  b\'testimage\'\n \n   >>> request.response.getHeader(\'Content-Disposition\')\n   "attachment; filename*=UTF-8\'\'test.jpg"\n@@ -899,7 +898,7 @@ only when the field is required::\n   >>> validator.validate(None) is None\n   Traceback (most recent call last):\n   ...\n-  RequiredMissing...\n+  zope.schema._bootstrapinterfaces.RequiredMissing...\n   >>> IContent[\'file_field\'].required = False\n   >>> validator.validate(None) is None\n   True\n@@ -913,7 +912,7 @@ user)::\n   >>> validator.validate(None)\n   Traceback (most recent call last):\n   ...\n-  InvalidState\n+  plone.formwidget.namedfile.validator.InvalidState\n \n If we provide a file, all is good::\n \n@@ -933,7 +932,7 @@ we again make the field required::\n   >>> validator.validate(None) is None\n   Traceback (most recent call last):\n   ...\n-  RequiredMissing...\n+  zope.schema._bootstrapinterfaces.RequiredMissing...\n \n \n The Download URL\n@@ -955,7 +954,7 @@ The download URL without a form and without a value::\n \n Now we add a value::\n \n-  >>> content.file_field = NamedFile(data=\'My file data\', filename=u\'data.txt\')\n+  >>> content.file_field = NamedFile(data=b\'My file data\', filename=u\'data.txt\')\n   >>> file_widget.value = content.file_field\n   >>> file_widget.download_url\n   \'http://127.0.0.1/content1/++widget++file_field/@@download/data.txt\'\n'

