Repository: Products.CMFPlone


Branch: refs/heads/5.1.x
Date: 2018-12-11T18:00:04+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/9458d9896d49a3642a6bcd926a48052bd6d5d5ad

Do not load the production bundles with async or defer
Hotfix: default.js and logged-in.js are not loaded asynchronously.
You also need to empty the ``merge_with`` property of your bundle, because production bundles (``default.js`` and ``logged-in.js``) are never loaded with async or defer.
The default.js includes jQuery and requirejs and those are needed at many places and therefore cannot be loaded asynchronously.

Files changed:
A news/2656.feature
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/static/plone.js
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py\nindex c5d5a227e..80d35b85a 100644\n--- a/Products/CMFPlone/resources/browser/scripts.py\n+++ b/Products/CMFPlone/resources/browser/scripts.py\n@@ -155,11 +155,6 @@ def scripts(self):\n             result = self.default_resources()\n             result.extend(self.ordered_bundles_result())\n         else:\n-            # Acquire load_async and load_defer bundle options from the plone\n-            # bundle and use it for the ``default`` meta bundle.\n-            bundles = self.get_bundles()\n-            load_async = getattr(bundles.get(\'plone\'), \'load_async\', False)\n-            load_defer = getattr(bundles.get(\'plone\'), \'load_defer\', False)\n             result = [{\n                 \'src\': \'{0}/++plone++{1}\'.format(\n                     self.site_url,\n@@ -167,15 +162,10 @@ def scripts(self):\n                 ),\n                 \'conditionalcomment\': None,\n                 \'bundle\': \'production\',\n-                \'async\': \'async\' if load_async else None,\n-                \'defer\': \'defer\' if load_defer else None\n-            }, ]\n+                \'async\': None,  # Do not load ``async`` or\n+                \'defer\': None   # ``defer`` for production bundles.\n+            }]\n             if not self.anonymous:\n-                # Acquire load_async and load_defer bundle options from the\n-                # plone-logged-in bundle and use it for the ``logged-in`` meta\n-                # bundle.\n-                load_async = getattr(bundles.get(\'plone-logged-in\'), \'load_async\', False)  # noqa\n-                load_defer = getattr(bundles.get(\'plone-logged-in\'), \'load_defer\', False)  # noqa\n                 result.append({\n                     \'src\': \'{0}/++plone++{1}\'.format(\n                         self.site_url,\n@@ -183,8 +173,8 @@ def scripts(self):\n                     ),\n                     \'conditionalcomment\': None,\n                     \'bundle\': \'production\',\n-                    \'async\': \'async\' if load_async else None,\n-                    \'defer\': \'defer\' if load_defer else None\n+                    \'async\': None,  # Do not load ``async`` or\n+                    \'defer\': None   # ``defer`` for production bundles.\n                 })\n             result.extend(self.ordered_bundles_result(production=True))\n \ndiff --git a/Products/CMFPlone/static/plone.js b/Products/CMFPlone/static/plone.js\nindex f89a02a65..f79f1fe81 100644\n--- a/Products/CMFPlone/static/plone.js\n+++ b/Products/CMFPlone/static/plone.js\n@@ -94,6 +94,6 @@ require([\n         var select = $(\'#form-widgets-highpixeldensity_scales\');\n         select.change(autohide_quality_fields);\n     }\n-});\n+  });\n \n });\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex fec5c0fce..3a080dca2 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -255,6 +255,10 @@ def test_bundle_defer_async(self):\n         self.assertTrue(\'defer="defer"\' not in view.index(view))\n \n     def test_bundle_defer_async_production(self):\n+        """The default and logged-in production bundles should never be loaded\n+        async or defered.\n+        For bundles to be loaded async or defered, you need to empty merge_with\n+        """\n         registry = getUtility(IRegistry)\n \n         bundles = registry.collectionOfInterface(\n@@ -277,17 +281,20 @@ def test_bundle_defer_async_production(self):\n         self.assertTrue(\'defer="defer"\' not in view.index(view))\n \n         bundles[\'plone\'].load_async = True\n-        bundles[\'plone\'].load_defer = False\n-        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n+        bundles[\'plone\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 0)\n \n-        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].merge_with = \'\'\n+        bundles[\'plone\'].load_async = True\n         bundles[\'plone\'].load_defer = True\n-        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 1)\n \n+        bundles[\'plone\'].merge_with = \'\'\n         bundles[\'plone\'].load_async = True\n         bundles[\'plone\'].load_defer = True\n+        bundles[\'plone-logged-in\'].merge_with = \'\'\n         bundles[\'plone-logged-in\'].load_async = True\n         bundles[\'plone-logged-in\'].load_defer = True\n         self.assertEqual(view.index(view).count(\'async="async"\'), 2)\ndiff --git a/news/2656.feature b/news/2656.feature\nnew file mode 100644\nindex 000000000..30542a43c\n--- /dev/null\n+++ b/news/2656.feature\n@@ -0,0 +1,5 @@\n+- Add ``load_async`` and ``load_defer`` attributes to resource registries bundle settings.\n+  When set, ``<script>`` tags are rendered with ``async="async"`` resp. ``defer="defer"`` attributes.\n+  You also need to empty the ``merge_with`` property of your bundle, because production bundles (``default.js`` and ``logged-in.js``) are never loaded with async or defer.\n+  The default.js includes jQuery and requirejs and those are needed at many places and therefore cannot be loaded asynchronously.\n+  [thet]\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.1.x
Date: 2018-12-13T16:56:04+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/294fc1a7667a78e77cb59053b4291394ad2e8294

Merge pull request #2656 from plone/thet-async-defer-hotfix

Do not load the production bundles with async or defer (Plone 5.1)

Files changed:
A news/2656.feature
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/static/plone.js
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py\nindex c5d5a227e..80d35b85a 100644\n--- a/Products/CMFPlone/resources/browser/scripts.py\n+++ b/Products/CMFPlone/resources/browser/scripts.py\n@@ -155,11 +155,6 @@ def scripts(self):\n             result = self.default_resources()\n             result.extend(self.ordered_bundles_result())\n         else:\n-            # Acquire load_async and load_defer bundle options from the plone\n-            # bundle and use it for the ``default`` meta bundle.\n-            bundles = self.get_bundles()\n-            load_async = getattr(bundles.get(\'plone\'), \'load_async\', False)\n-            load_defer = getattr(bundles.get(\'plone\'), \'load_defer\', False)\n             result = [{\n                 \'src\': \'{0}/++plone++{1}\'.format(\n                     self.site_url,\n@@ -167,15 +162,10 @@ def scripts(self):\n                 ),\n                 \'conditionalcomment\': None,\n                 \'bundle\': \'production\',\n-                \'async\': \'async\' if load_async else None,\n-                \'defer\': \'defer\' if load_defer else None\n-            }, ]\n+                \'async\': None,  # Do not load ``async`` or\n+                \'defer\': None   # ``defer`` for production bundles.\n+            }]\n             if not self.anonymous:\n-                # Acquire load_async and load_defer bundle options from the\n-                # plone-logged-in bundle and use it for the ``logged-in`` meta\n-                # bundle.\n-                load_async = getattr(bundles.get(\'plone-logged-in\'), \'load_async\', False)  # noqa\n-                load_defer = getattr(bundles.get(\'plone-logged-in\'), \'load_defer\', False)  # noqa\n                 result.append({\n                     \'src\': \'{0}/++plone++{1}\'.format(\n                         self.site_url,\n@@ -183,8 +173,8 @@ def scripts(self):\n                     ),\n                     \'conditionalcomment\': None,\n                     \'bundle\': \'production\',\n-                    \'async\': \'async\' if load_async else None,\n-                    \'defer\': \'defer\' if load_defer else None\n+                    \'async\': None,  # Do not load ``async`` or\n+                    \'defer\': None   # ``defer`` for production bundles.\n                 })\n             result.extend(self.ordered_bundles_result(production=True))\n \ndiff --git a/Products/CMFPlone/static/plone.js b/Products/CMFPlone/static/plone.js\nindex f89a02a65..f79f1fe81 100644\n--- a/Products/CMFPlone/static/plone.js\n+++ b/Products/CMFPlone/static/plone.js\n@@ -94,6 +94,6 @@ require([\n         var select = $(\'#form-widgets-highpixeldensity_scales\');\n         select.change(autohide_quality_fields);\n     }\n-});\n+  });\n \n });\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex fec5c0fce..3a080dca2 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -255,6 +255,10 @@ def test_bundle_defer_async(self):\n         self.assertTrue(\'defer="defer"\' not in view.index(view))\n \n     def test_bundle_defer_async_production(self):\n+        """The default and logged-in production bundles should never be loaded\n+        async or defered.\n+        For bundles to be loaded async or defered, you need to empty merge_with\n+        """\n         registry = getUtility(IRegistry)\n \n         bundles = registry.collectionOfInterface(\n@@ -277,17 +281,20 @@ def test_bundle_defer_async_production(self):\n         self.assertTrue(\'defer="defer"\' not in view.index(view))\n \n         bundles[\'plone\'].load_async = True\n-        bundles[\'plone\'].load_defer = False\n-        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n+        bundles[\'plone\'].load_defer = True\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 0)\n \n-        bundles[\'plone\'].load_async = False\n+        bundles[\'plone\'].merge_with = \'\'\n+        bundles[\'plone\'].load_async = True\n         bundles[\'plone\'].load_defer = True\n-        self.assertEqual(view.index(view).count(\'async="async"\'), 0)\n+        self.assertEqual(view.index(view).count(\'async="async"\'), 1)\n         self.assertEqual(view.index(view).count(\'defer="defer"\'), 1)\n \n+        bundles[\'plone\'].merge_with = \'\'\n         bundles[\'plone\'].load_async = True\n         bundles[\'plone\'].load_defer = True\n+        bundles[\'plone-logged-in\'].merge_with = \'\'\n         bundles[\'plone-logged-in\'].load_async = True\n         bundles[\'plone-logged-in\'].load_defer = True\n         self.assertEqual(view.index(view).count(\'async="async"\'), 2)\ndiff --git a/news/2656.feature b/news/2656.feature\nnew file mode 100644\nindex 000000000..30542a43c\n--- /dev/null\n+++ b/news/2656.feature\n@@ -0,0 +1,5 @@\n+- Add ``load_async`` and ``load_defer`` attributes to resource registries bundle settings.\n+  When set, ``<script>`` tags are rendered with ``async="async"`` resp. ``defer="defer"`` attributes.\n+  You also need to empty the ``merge_with`` property of your bundle, because production bundles (``default.js`` and ``logged-in.js``) are never loaded with async or defer.\n+  The default.js includes jQuery and requirejs and those are needed at many places and therefore cannot be loaded asynchronously.\n+  [thet]\n'

