Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-05-22T16:09:45+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.z3cform/commit/9c114aea7446add41ace51767b450557b79b1d82

fix test-isolation issue (no layer = no teardown)

Files changed:
M plone/app/z3cform/tests/test_widget.py

b'diff --git a/plone/app/z3cform/tests/test_widget.py b/plone/app/z3cform/tests/test_widget.py\nindex 7698977..1c24857 100644\n--- a/plone/app/z3cform/tests/test_widget.py\n+++ b/plone/app/z3cform/tests/test_widget.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.app.z3cform.interfaces import IPloneFormLayer\n+from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING\n from plone.app.z3cform.wysiwyg.widget import WysiwygWidget\n from zope import publisher\n from zope.globalrequest import setRequest\n@@ -24,6 +25,8 @@ class NoAcquisitionAware(object):\n \n class TestWidget(unittest.TestCase):\n \n+    layer = PAZ3CForm_INTEGRATION_TESTING\n+\n     def setUp(self):\n         self.request = TestRequest()\n         setRequest(self.request)\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-05-22T16:10:25+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.z3cform/commit/2173e3ec0b674789edbe0fb7024d6276e71611ed

fix converter for linesfield holding bytes

Files changed:
M plone/app/z3cform/converters.py

b"diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex eba3966..ef85bcb 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -273,6 +273,9 @@ def toFieldValue(self, value):\n             valueType = getattr(self.field.value_type, '_type', six.text_type)\n             if valueType is None:\n                 valueType = six.text_type\n+            if valueType == six.binary_type:\n+                return collectionType(\n+                    valueType(v, encoding='utf8') for v in value)\n             return collectionType(valueType(v) for v in value)\n \n \n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-06-11T23:15:39+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/c723f026b1004870c708c7626397c82d9304da37

Use the print function

Files changed:
M plone/app/z3cform/inline_validation.rst

b'diff --git a/plone/app/z3cform/inline_validation.rst b/plone/app/z3cform/inline_validation.rst\nindex 09bf41d..caff5a8 100644\n--- a/plone/app/z3cform/inline_validation.rst\n+++ b/plone/app/z3cform/inline_validation.rst\n@@ -27,6 +27,7 @@ Then we create a simple z3c form\n     >>> class MySchema(interface.Interface):\n     ...     age = schema.Int(title=u"Age")\n \n+    >>> from __future__ import print_function\n     >>> class MyForm(form.Form):\n     ...     fields = field.Fields(MySchema)\n     ...     ignoreContext = True # don\'t use context to get widget data\n@@ -34,7 +35,7 @@ Then we create a simple z3c form\n     ...     @button.buttonAndHandler(u\'Apply\')\n     ...     def handleApply(self, action):\n     ...         data, errors = self.extractData()\n-    ...         print data[\'age\'] # ... or do stuff\n+    ...         print(data[\'age\'])  # ... or do stuff\n \n     >>> class MyFormWrapper(FormWrapper):\n     ...     form = MyForm\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-06-11T23:17:16+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/b59bb0abeaf65a9a50223b23269dd6dcd1e1490c

Cast filter to list for Python 3 compatibility

Files changed:
M plone/app/z3cform/inline_validation.py

b"diff --git a/plone/app/z3cform/inline_validation.py b/plone/app/z3cform/inline_validation.py\nindex 10a91c6..54beed9 100644\n--- a/plone/app/z3cform/inline_validation.py\n+++ b/plone/app/z3cform/inline_validation.py\n@@ -43,10 +43,10 @@ def __call__(self, fname=None, fset=None):\n                 # try to match fieldset on group name\n                 def _name(group):\n                     return getattr(group, '__name__', group.label)\n-                group_match = filter(\n+                group_match = list(filter(\n                     lambda group: normalizeString(_name(group)) == fset,\n                     form.groups,\n-                )\n+                ))\n                 if not group_match:\n                     raise ValueError('Fieldset specified, but not found.')\n                 form = group_match[0]\n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-06-11T23:45:11+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/df8efdb6d7254f1420efb64746f92508ad24a6fe

Test does not suffer from dict being unordered

Files changed:
M plone/app/z3cform/tests/test_widgets.py

b'diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 30607b7..32f0f8d 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from datetime import date\n from datetime import datetime\n+from json import loads\n from mock import Mock\n+from lxml import html\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING\n@@ -143,14 +145,32 @@ def test_widget_base_pattern_options_with_functions(self):\n                 \'subsubtuple\': (7, 8, 9, lambda x: x),\n             },\n         }\n-\n-        self.assertEqual(\n-            \'<input class="pat-example" type="text" \'\n-            \'data-pat-example="{&quot;subdict&quot;: \'\n-            \'{&quot;subsubtuple&quot;: [7, 8, 9, &quot;testcontext&quot;], \'\n-            \'&quot;subsublist&quot;: [7, 8, 9, &quot;testcontext&quot;], \'\n-            \'&quot;subsubnormal&quot;: 789}}"/>\',\n-            widget.render(),\n+        output = widget.render()\n+        # output is something like\n+        #\n+        # <input class="pat-example"\n+        #        type="text"\n+        #        data-pat-example="$JSON_ENCODED_OPTIONS" />\'\n+        self.assertRegexpMatches(widget.render(), \'<input .*/>\')\n+        # We cannot foresee how the options are encoded\n+        # so we will extract the attributes with lxml\n+        # and be sure that they will match what we expect\n+        observed_attrib = html.fromstring(output).attrib\n+        self.assertEqual(\n+            sorted(observed_attrib),\n+            [\'class\', \'data-pat-example\', \'type\']\n+        )\n+        self.assertEqual(observed_attrib[\'class\'], \'pat-example\')\n+        self.assertEqual(observed_attrib[\'type\'], \'text\')\n+        self.assertDictEqual(\n+            loads(observed_attrib[\'data-pat-example\']),\n+            {\n+                \'subdict\': {\n+                    \'subsubnormal\': 789,\n+                    \'subsublist\': [7, 8, 9, \'testcontext\'],\n+                    \'subsubtuple\': [7, 8, 9, \'testcontext\']\n+                }\n+            },\n         )\n \n \n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-06-12T00:02:59+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/cf907a42a06ce66b490aec576009bb81b984b5b6

We need to convert only in Python 3

Files changed:
M plone/app/z3cform/converters.py

b"diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex ef85bcb..9f04f46 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -273,7 +273,7 @@ def toFieldValue(self, value):\n             valueType = getattr(self.field.value_type, '_type', six.text_type)\n             if valueType is None:\n                 valueType = six.text_type\n-            if valueType == six.binary_type:\n+            if not six.PY2 and valueType == six.binary_type:\n                 return collectionType(\n                     valueType(v, encoding='utf8') for v in value)\n             return collectionType(valueType(v) for v in value)\n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-06-12T00:03:53+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/fc9fbd3157eed005e978dacfaab3c3e6c39630ab

Fix expected values across Python versions

Files changed:
M plone/app/z3cform/tests/test_widgets.py

b"diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 32f0f8d..117bbd4 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -1299,9 +1299,13 @@ def test_converter_List_of_Choice(self):\n             )\n \n             self.assertEqual(converter.toFieldValue(None), None)\n+            if not six.PY2 and expected_value_type == six.binary_type:\n+                expected = [b'id1', b'id2']\n+            else:\n+                expected = ['id1', 'id2']\n             self.assertEqual(\n                 converter.toFieldValue('id1;id2'),\n-                ['id1', 'id2'],\n+                expected,\n             )\n \n             self.assertEqual(converter.toFieldValue(None), None)\n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-06-12T00:08:45+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/cc30f8162ba8a7fdcbdea23247d4dd545a6cb5ea

Encode paths only in Python2

Files changed:
M plone/app/z3cform/converters.py

b"diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 9f04f46..e4004af 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -358,7 +358,8 @@ def toWidgetValue(self, value):\n                 else:\n                     path = utils.replace_link_variables_by_paths(\n                         portal, parsed.path)\n-                    path = path.encode('ascii', 'ignore')\n+                    if six.PY2:\n+                        path = path.encode('ascii', 'ignore')\n                     obj = portal.unrestrictedTraverse(path=path, default=None)\n                     if obj is not None:\n                         uuid = IUUID(obj, None)\n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-06-12T00:09:21+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/2d3758527a6b5c0dd33e876c3a6996ee9727a580

Changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c3c6db4..089896e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -21,7 +21,7 @@ Bug fixes:\n   [allusa]\n \n - Prepare for Python 2 / 3 compatibility\n-  [pbauer, MatthewWilkes]\n+  [pbauer, MatthewWilkes, ale-rt]\n \n - Render mimetype selection box correctly for a ``RichTextWidget`` which also\n   brings back the TinyMCE.\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-08-09T00:03:12+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/d7648c19bf632e8068f01e0e9e996c7c07243e84

Merge remote-tracking branch 'origin/master' into python3

Files changed:
M CHANGES.rst
M plone/app/z3cform/widget.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 089896e..61307b1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,7 @@\n Changelog\n =========\n \n-3.0.5 (unreleased)\n+3.0.6 (unreleased)\n ------------------\n \n Breaking changes:\n@@ -14,6 +14,14 @@ New features:\n \n Bug fixes:\n \n+- *add item here*\n+\n+\n+3.0.5 (2018-06-19)\n+------------------\n+\n+Bug fixes:\n+\n - Cleanup code analysis problems.\n   [jensens]\n \n@@ -27,6 +35,8 @@ Bug fixes:\n   brings back the TinyMCE.\n   [sallner]\n \n+- Allow RelatedItems widget to be used in subforms\n+  [tomgross]\n \n 3.0.4 (2018-02-04)\n ------------------\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 269bf76..a671c5a 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n+from Acquisition import aq_base\n from Acquisition import ImplicitAcquisitionWrapper\n+from OFS.interfaces import ISimpleItem\n from lxml import etree\n from plone.app.textfield.value import RichTextValue\n from plone.app.textfield.widget import RichTextWidget as patext_RichTextWidget\n@@ -35,6 +37,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IEditingSchema\n from Products.CMFPlone.utils import safe_unicode\n+from six.moves import UserDict\n from z3c.form.browser.checkbox import SingleCheckBoxWidget\n from z3c.form.browser.select import SelectWidget as z3cform_SelectWidget\n from z3c.form.browser.text import TextWidget as z3cform_TextWidget\n@@ -65,12 +68,6 @@\n import six\n \n \n-try:\n-    from collections import UserDict\n-except ImportError:\n-    from UserDict import UserDict\n-\n-\n class BaseWidget(Widget):\n     """Base widget for z3c.form."""\n \n@@ -125,6 +122,9 @@ def render(self):\n             )\n         return pattern_widget.render()\n \n+    def is_subform_widget(self):\n+        return getattr(aq_base(self.form), \'parentForm\', None) is not None\n+\n \n @implementer_only(IDateWidget)\n class DateWidget(BaseWidget, HTMLInputWidget):\n@@ -486,11 +486,18 @@ def _base_args(self):\n         view_context = get_widget_form(self)\n         # For EditForms and non-Forms (in tests), the vocabulary is looked\n         # up on the context, otherwise on the view\n-        if (\n-            IEditForm.providedBy(view_context) or\n-            not IForm.providedBy(view_context)\n-        ):\n+        if IEditForm.providedBy(view_context):\n+            if self.is_subform_widget():\n+                view_context = self.form.parentForm.context\n+            elif not ISimpleItem.providedBy(context):\n+                view_context = self.form.context\n+            else:\n+                view_context = context\n+        elif not IForm.providedBy(view_context):\n             view_context = context\n+        else:\n+            pass\n+            # view_context is defined above already\n \n         root_search_mode = (\n             args[\'pattern_options\'].get(\'mode\', None) and\ndiff --git a/setup.py b/setup.py\nindex 96f1a01..be21152 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,7 +8,7 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-version = \'3.0.5.dev0\'\n+version = \'3.0.6.dev0\'\n \n long_description = (\n     read(\'README.rst\') +\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-08-09T09:40:59+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/666adc1a01052cd8a1ba4f18b132191078393a20

Merge pull request #93 from plone/python3

Python 3 conpatibility

Files changed:
M CHANGES.rst
M plone/app/z3cform/converters.py
M plone/app/z3cform/inline_validation.py
M plone/app/z3cform/inline_validation.rst
M plone/app/z3cform/tests/test_widget.py
M plone/app/z3cform/tests/test_widgets.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ae2d919..61307b1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -29,7 +29,7 @@ Bug fixes:\n   [allusa]\n \n - Prepare for Python 2 / 3 compatibility\n-  [pbauer, MatthewWilkes]\n+  [pbauer, MatthewWilkes, ale-rt]\n \n - Render mimetype selection box correctly for a ``RichTextWidget`` which also\n   brings back the TinyMCE.\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex eba3966..e4004af 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -273,6 +273,9 @@ def toFieldValue(self, value):\n             valueType = getattr(self.field.value_type, \'_type\', six.text_type)\n             if valueType is None:\n                 valueType = six.text_type\n+            if not six.PY2 and valueType == six.binary_type:\n+                return collectionType(\n+                    valueType(v, encoding=\'utf8\') for v in value)\n             return collectionType(valueType(v) for v in value)\n \n \n@@ -355,7 +358,8 @@ def toWidgetValue(self, value):\n                 else:\n                     path = utils.replace_link_variables_by_paths(\n                         portal, parsed.path)\n-                    path = path.encode(\'ascii\', \'ignore\')\n+                    if six.PY2:\n+                        path = path.encode(\'ascii\', \'ignore\')\n                     obj = portal.unrestrictedTraverse(path=path, default=None)\n                     if obj is not None:\n                         uuid = IUUID(obj, None)\ndiff --git a/plone/app/z3cform/inline_validation.py b/plone/app/z3cform/inline_validation.py\nindex 10a91c6..54beed9 100644\n--- a/plone/app/z3cform/inline_validation.py\n+++ b/plone/app/z3cform/inline_validation.py\n@@ -43,10 +43,10 @@ def __call__(self, fname=None, fset=None):\n                 # try to match fieldset on group name\n                 def _name(group):\n                     return getattr(group, \'__name__\', group.label)\n-                group_match = filter(\n+                group_match = list(filter(\n                     lambda group: normalizeString(_name(group)) == fset,\n                     form.groups,\n-                )\n+                ))\n                 if not group_match:\n                     raise ValueError(\'Fieldset specified, but not found.\')\n                 form = group_match[0]\ndiff --git a/plone/app/z3cform/inline_validation.rst b/plone/app/z3cform/inline_validation.rst\nindex 09bf41d..caff5a8 100644\n--- a/plone/app/z3cform/inline_validation.rst\n+++ b/plone/app/z3cform/inline_validation.rst\n@@ -27,6 +27,7 @@ Then we create a simple z3c form\n     >>> class MySchema(interface.Interface):\n     ...     age = schema.Int(title=u"Age")\n \n+    >>> from __future__ import print_function\n     >>> class MyForm(form.Form):\n     ...     fields = field.Fields(MySchema)\n     ...     ignoreContext = True # don\'t use context to get widget data\n@@ -34,7 +35,7 @@ Then we create a simple z3c form\n     ...     @button.buttonAndHandler(u\'Apply\')\n     ...     def handleApply(self, action):\n     ...         data, errors = self.extractData()\n-    ...         print data[\'age\'] # ... or do stuff\n+    ...         print(data[\'age\'])  # ... or do stuff\n \n     >>> class MyFormWrapper(FormWrapper):\n     ...     form = MyForm\ndiff --git a/plone/app/z3cform/tests/test_widget.py b/plone/app/z3cform/tests/test_widget.py\nindex 7698977..1c24857 100644\n--- a/plone/app/z3cform/tests/test_widget.py\n+++ b/plone/app/z3cform/tests/test_widget.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.app.z3cform.interfaces import IPloneFormLayer\n+from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING\n from plone.app.z3cform.wysiwyg.widget import WysiwygWidget\n from zope import publisher\n from zope.globalrequest import setRequest\n@@ -24,6 +25,8 @@ class NoAcquisitionAware(object):\n \n class TestWidget(unittest.TestCase):\n \n+    layer = PAZ3CForm_INTEGRATION_TESTING\n+\n     def setUp(self):\n         self.request = TestRequest()\n         setRequest(self.request)\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 30607b7..117bbd4 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from datetime import date\n from datetime import datetime\n+from json import loads\n from mock import Mock\n+from lxml import html\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING\n@@ -143,14 +145,32 @@ def test_widget_base_pattern_options_with_functions(self):\n                 \'subsubtuple\': (7, 8, 9, lambda x: x),\n             },\n         }\n-\n-        self.assertEqual(\n-            \'<input class="pat-example" type="text" \'\n-            \'data-pat-example="{&quot;subdict&quot;: \'\n-            \'{&quot;subsubtuple&quot;: [7, 8, 9, &quot;testcontext&quot;], \'\n-            \'&quot;subsublist&quot;: [7, 8, 9, &quot;testcontext&quot;], \'\n-            \'&quot;subsubnormal&quot;: 789}}"/>\',\n-            widget.render(),\n+        output = widget.render()\n+        # output is something like\n+        #\n+        # <input class="pat-example"\n+        #        type="text"\n+        #        data-pat-example="$JSON_ENCODED_OPTIONS" />\'\n+        self.assertRegexpMatches(widget.render(), \'<input .*/>\')\n+        # We cannot foresee how the options are encoded\n+        # so we will extract the attributes with lxml\n+        # and be sure that they will match what we expect\n+        observed_attrib = html.fromstring(output).attrib\n+        self.assertEqual(\n+            sorted(observed_attrib),\n+            [\'class\', \'data-pat-example\', \'type\']\n+        )\n+        self.assertEqual(observed_attrib[\'class\'], \'pat-example\')\n+        self.assertEqual(observed_attrib[\'type\'], \'text\')\n+        self.assertDictEqual(\n+            loads(observed_attrib[\'data-pat-example\']),\n+            {\n+                \'subdict\': {\n+                    \'subsubnormal\': 789,\n+                    \'subsublist\': [7, 8, 9, \'testcontext\'],\n+                    \'subsubtuple\': [7, 8, 9, \'testcontext\']\n+                }\n+            },\n         )\n \n \n@@ -1279,9 +1299,13 @@ def test_converter_List_of_Choice(self):\n             )\n \n             self.assertEqual(converter.toFieldValue(None), None)\n+            if not six.PY2 and expected_value_type == six.binary_type:\n+                expected = [b\'id1\', b\'id2\']\n+            else:\n+                expected = [\'id1\', \'id2\']\n             self.assertEqual(\n                 converter.toFieldValue(\'id1;id2\'),\n-                [\'id1\', \'id2\'],\n+                expected,\n             )\n \n             self.assertEqual(converter.toFieldValue(None), None)\n'

