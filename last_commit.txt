Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-10-02T08:45:08+02:00
Author: Stephan Geulette (sgeulette) <s.geulette@imio.be>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/1a6134dcbd78ca20391654d73208a2f9afa37cbe

Display titles in diff of zope.schema.List using vocabulary

Files changed:
M CHANGES.rst
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/testListDiff.py
M buildout.cfg

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 82b61a7..d49b66c 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,18 +4,10 @@ Changelog\n 3.2.2 (unreleased)\n ------------------\n \n-Breaking changes:\n-\n-- *add item here*\n-\n-New features:\n-\n-- *add item here*\n-\n Bug fixes:\n \n-- *add item here*\n-\n+- Display titles in diff of zope.schema.List using vocabulary\n+  [sgeulette]\n \n 3.2.1 (2018-09-23)\n ------------------\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex edfa344..638dcd4 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -1,34 +1,58 @@\n # -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n+from plone.dexterity.interfaces import IDexterityContent\n+from Products.CMFDiffTool.choicediff import get_field_object\n+from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n from six.moves import range\n \n \n-def chk_hashable(value):\n-    try:\n-        hash(value)\n-    except TypeError as e:\n-        value = repr(e) + ": " + repr(value)\n-    return value\n-\n-\n class ListDiff(FieldDiff):\n     """Text difference"""\n \n     meta_type = \'List Diff\'\n \n+    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n+                 field_label=None, schemata=None):\n+        FieldDiff.__init__(self, obj1, obj2, field, id1, id2, field_name,\n+                           field_label, schemata)\n+        self._vocabulary = None\n+\n+        # Tries to find a vocabulary. First we need to find an object and\n+        # the field instance.\n+        obj = obj1 if (obj1 is not None) else obj2\n+        field_name = field_name or field\n+        if obj and field_name and IDexterityContent.providedBy(obj):\n+            field_instance = get_field_object(obj, field_name)\n+            if field_instance is not None:\n+                # Binding the field to an object will construct the vocabulary\n+                # using a factory if necessary.\n+                try:\n+                    self._vocabulary = field_instance.value_type.bind(obj).vocabulary\n+                except:\n+                    pass\n+\n+    def chk_hashable(self, value):\n+        if self._vocabulary is not None:\n+            value = title_or_value(self._vocabulary, value)\n+        try:\n+            hash(value)\n+        except TypeError as e:\n+            value = repr(e) + ": " + repr(value)\n+        return value\n+\n     def _parseField(self, value, filename=None):\n         """Parse a field value in preparation for diffing"""\n         if type(value) is list or type(value) is tuple:\n             values = []\n             for v in value:\n-                values.append(chk_hashable(v))\n+                values.append(self.chk_hashable(v))\n             return values\n         else:\n             if type(value) is set:\n                 return list(value)\n             else:\n-                return [chk_hashable(value)]\n+                return [self.chk_hashable(value)]\n \n \n class RelationListDiff(FieldDiff):\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex f909170..4603345 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -17,6 +17,7 @@\n VOCABULARY_TUPLES = [\n     (u\'first_value\', u\'First Title\'),\n     (u\'second_value\', None),\n+    (u\'third_value\', u\'Third Title\'),\n ]\n \n VOCABULARY = SimpleVocabulary(\n@@ -82,6 +83,13 @@ def setUpPloneSite(self, portal):\n                         <required>False</required>\n                         <vocabulary>Products.CMFDiffTool.testing.VOCABULARY</vocabulary>\n                     </field>\n+                    <field name="choices" type="zope.schema.List">\n+                        <title>Choices</title>\n+                        <required>False</required>\n+                        <value_type type="zope.schema.Choice">\n+                            <vocabulary>Products.CMFDiffTool.testing.VOCABULARY</vocabulary>\n+                        </value_type>\n+                    </field>\n                 </schema>\n             </model>\n             \'\'\'\ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex e8d95a9..4d71463 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -3,10 +3,13 @@\n # CMFDiffTool tests\n #\n from os import linesep\n-from plone.app.testing import PLONE_INTEGRATION_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from Products.CMFDiffTool import testing\n+from Products.CMFDiffTool.choicediff import title_or_value\n+from Products.CMFDiffTool.interfaces import IDifference\n from Products.CMFDiffTool.ListDiff import ListDiff\n-from unittest import TestCase\n-\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n _marker = []\n \n@@ -27,14 +30,26 @@ class D:\n     attribute = {"a": 1, "b": 2, "c": 3}\n \n \n-class TestListDiff(TestCase):\n+class TestListDiff(BaseDXTestCase):\n     """Test the ListDiff class"""\n \n-    layer = PLONE_INTEGRATION_TESTING\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal.invokeFactory(\n+            testing.TEST_CONTENT_TYPE_ID,\n+            \'obj1\',\n+        )\n+        self.portal.invokeFactory(\n+            testing.TEST_CONTENT_TYPE_ID,\n+            \'obj2\',\n+        )\n+\n+        self.obj1 = self.portal[\'obj1\']\n+        self.obj2 = self.portal[\'obj2\']\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n-        from Products.CMFDiffTool.interfaces.portal_diff import IDifference\n         self.assertTrue(IDifference.implementedBy(ListDiff))\n \n     def testInvalidValue(self):\n@@ -112,6 +127,76 @@ def test_inline_diff(self):\n         diff = ListDiff(a, b, \'attribute\')\n         self.assertEqual(diff.inline_diff(), expected)\n \n+    def test_inline_diff_vocabulary(self):\n+        # unchanged, with vocabulary title\n+        expected = u\'<div class="InlineDiff">First Title</div>\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n+                             [testing.VOCABULARY_TUPLES[0][0]], True, expected)\n+        # unchanged, without vocabulary title\n+        expected = u\'<div class="InlineDiff">second_value</div>\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[1][0]],\n+                             [testing.VOCABULARY_TUPLES[1][0]], True, expected)\n+        # changed: add value, with vocabulary title\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub"></div>\n+    <div class="diff_add">First Title</div>\n+</div>\'\'\'\n+        self._test_diff_list([],\n+                             [testing.VOCABULARY_TUPLES[0][0]], False, expected)\n+        # changed: replaced unique value by another one, displaying titles\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub">First Title</div>\n+    <div class="diff_add"></div>\n+</div>\n+<div class="InlineDiff">\n+    <div class="diff_sub"></div>\n+    <div class="diff_add">Third Title</div>\n+</div>\'\'\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n+                             [testing.VOCABULARY_TUPLES[2][0]], False, expected)\n+        # changed: replaced multiple values by others, displaying titles\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub">First Title</div>\n+    <div class="diff_add"></div>\n+</div>\n+<div class="InlineDiff">second_value</div>\n+<div class="InlineDiff">\n+    <div class="diff_sub"></div>\n+    <div class="diff_add">Third Title</div>\n+</div>\'\'\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+                             [testing.VOCABULARY_TUPLES[1][0], testing.VOCABULARY_TUPLES[2][0]], False, expected)\n+        # changed: replaced multiple values by others, displaying titles\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub"></div>\n+    <div class="diff_add">Third Title</div>\n+</div>\n+<div class="InlineDiff">First Title</div>\n+<div class="InlineDiff">\n+    <div class="diff_sub">second_value</div>\n+    <div class="diff_add"></div>\n+</div>\'\'\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+                             [testing.VOCABULARY_TUPLES[2][0], testing.VOCABULARY_TUPLES[0][0]], False, expected)\n+        # changed: removed values, displaying titles\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub">First Title</div>\n+    <div class="diff_add"></div>\n+</div>\n+<div class="InlineDiff">\n+    <div class="diff_sub">second_value</div>\n+    <div class="diff_add"></div>\n+</div>\'\'\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+                             [], False, expected)\n+\n+    def _test_diff_list(self, value1, value2, same, expected):\n+        self.obj1.choices = value1\n+        self.obj2.choices = value2\n+        diff = ListDiff(self.obj1, self.obj2, \'choices\')\n+        self.assertEqual(diff.same, same)\n+        self.assertEqual(diff.inline_diff(), expected)\n+\n     def testGetLineDictDiffsSame(self):\n         """test getLineDiffs() method with dict same value"""\n         c = C()\n@@ -125,4 +210,4 @@ def testGetLineDictDiffsDifferent(self):\n         d = D()\n         diff = ListDiff(c, d, \'attribute\')\n         expected = [(\'replace\', 0, 1, 0, 1)]\n-        self.assertEqual(diff.getLineDiffs(), expected)\n\\ No newline at end of file\n+        self.assertEqual(diff.getLineDiffs(), expected)\ndiff --git a/buildout.cfg b/buildout.cfg\nindex d30eab7..08c08e8 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,7 +1,6 @@\n [buildout]\n extends =\n-    https://raw.github.com/collective/buildout.plonetest/master/test-4.3.x.cfg\n-    plone-4.3.x.cfg\n+    https://raw.github.com/collective/buildout.plonetest/master/test-5.x.cfg\n package-name = Products.CMFDiffTool\n package-extras = [test]\n test-eggs = Pillow\n@@ -19,6 +18,10 @@ allow-hosts =\n     effbot.org\n     dist.plone.org\n \n+[test]\n+eggs +=\n+    ipdb\n+\n [omelette]\n recipe = collective.recipe.omelette\n eggs = ${test:eggs}\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-10-02T09:44:18+02:00
Author: Stephan Geulette (sgeulette) <s.geulette@imio.be>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/7221805aafe3f969febea65ea9bac596a587d231

Flake8 corrections

Files changed:
M .gitignore
M CHANGES.rst
M Products/CMFDiffTool/ATCompoundDiff.py
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/testATCompoundDiff.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M buildout.cfg

b'diff --git a/.gitignore b/.gitignore\nindex 6f0c371..eccadf0 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -2,6 +2,8 @@\n *.py[co]\n build\n dist\n+include/\n+lib/\n *.mo\n .installed.cfg\n bin/\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex d49b66c..7bcc6bc 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,8 @@ Bug fixes:\n \n - Display titles in diff of zope.schema.List using vocabulary\n   [sgeulette]\n+- Flake8 corrections\n+  [sgeulette]\n \n 3.2.1 (2018-09-23)\n ------------------\ndiff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py\nindex dbfd605..bc9b9f7 100644\n--- a/Products/CMFDiffTool/ATCompoundDiff.py\n+++ b/Products/CMFDiffTool/ATCompoundDiff.py\n@@ -126,4 +126,5 @@ def getFields(self, obj1, obj2):\n                                        \'schemata\': schemata_name})\n         return fields\n \n+\n InitializeClass(ATCompoundDiff)\ndiff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex e951c7a..1ab004a 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -4,8 +4,8 @@\n    Calculate differences between content objects\n """\n \n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.interfaces import IDifference\n@@ -63,7 +63,7 @@ def applyChanges(self, ob):\n     def filenameTitle(self, filename):\n         """Translate the filename leading text\n         """\n-        msg = _(u"Filename: ${filename}",\n+        msg = _(u\'Filename: ${filename}\',\n                 mapping={\'filename\': filename})\n         return translate(msg)\n \n@@ -73,8 +73,8 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n     # grab it *with* acquisition, so things like ComputedAttribute\n     # will work\n     if IDexterityContent.providedBy(ob) and field:\n-        # we need a special handling for subjects because the field is stored as\n-        # `subject` attribute but the schema name is `subjects`\n+        # we need a special handling for subjects because the field is stored\n+        # as `subject` attribute but the schema name is `subjects`\n         # see plone.app.dexterity.behaviors.metadata.ICategorization and\n         # plone.dexterity.content.DexterityContent\n         if field == \'subjects\':\n@@ -105,7 +105,7 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n             if isinstance(val, RelationValue):\n                 try:\n                     obj = val.to_object\n-                except:\n+                except Exception:\n                     obj = None\n                 new_value.append(obj)\n             else:\n@@ -117,7 +117,7 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n     if isinstance(value, RelationValue):\n         try:\n             obj = value.to_object\n-        except:\n+        except Exception:\n             obj = None\n         value = obj\n \n@@ -131,4 +131,5 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n \n     return value\n \n+\n InitializeClass(BaseDiff)\ndiff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex c4a5e1e..288b1f3 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -51,10 +51,11 @@ def inline_diff(self):\n             html.append(\n                 self.inlinediff_fmt % (css_class,\n                                        self.filenameTitle(self.oldFilename),\n-                                       self.filenameTitle(self.newFilename))\n+                                       self.filenameTitle(self.newFilename)),\n             )\n \n         if html:\n             return linesep.join(html)\n \n+\n InitializeClass(BinaryDiff)\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 45dde7f..40edf65 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -28,4 +28,5 @@ def _parseField(self, value, filename=None):\n             value = getattr(value, \'raw\', value)\n         return TextDiff._parseField(self, value, filename)\n \n+\n InitializeClass(CMFDTHtmlDiff)\ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex 7b2f05f..ef302f8 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -4,8 +4,8 @@\n    Calculate differences between content objects\n """\n from AccessControl import ClassSecurityInfo\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import registerToolInterface\n@@ -177,5 +177,6 @@ def unregisterDiffType(klass):\n \n     del CMFDiffTool._difftypes[klass.meta_type]\n \n+\n InitializeClass(CMFDiffTool)\n registerToolInterface(\'portal_diff\', IDiffTool)\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 2a7691f..2c56271 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -27,7 +27,7 @@ def _parseField(self, value, filename=None):\n         else:\n             return [\n                 self.filenameTitle(filename),\n-                value\n+                value,\n             ]\n \n     def getLineDiffs(self):\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex 638dcd4..de8ce7b 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -28,8 +28,9 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n                 # Binding the field to an object will construct the vocabulary\n                 # using a factory if necessary.\n                 try:\n-                    self._vocabulary = field_instance.value_type.bind(obj).vocabulary\n-                except:\n+                    self._vocabulary = field_instance.value_type.bind(obj).\\\n+                        vocabulary\n+                except Exception:\n                     pass\n \n     def chk_hashable(self, value):\n@@ -38,7 +39,7 @@ def chk_hashable(self, value):\n         try:\n             hash(value)\n         except TypeError as e:\n-            value = repr(e) + ": " + repr(value)\n+            value = repr(e) + \': \' + repr(value)\n         return value\n \n     def _parseField(self, value, filename=None):\n@@ -65,7 +66,8 @@ class RelationListDiff(FieldDiff):\n     </div>"""\n \n     def _parseField(self, value, filename=None):\n-        """Take RelationValues and just return the target UID so we can compare"""\n+        """ Take RelationValues and just return the target UID\n+            so we can compare """\n \n         if filename is None:\n             # Since we only want to compare a single field, make a\n@@ -74,7 +76,7 @@ def _parseField(self, value, filename=None):\n         else:\n             return [\n                 self.filenameTitle(filename),\n-                [\'/\'.join(val.getPhysicalPath()) for val in value]\n+                [\'/\'.join(val.getPhysicalPath()) for val in value],\n             ]\n \n     def inline_diff(self):\n@@ -89,27 +91,27 @@ def inline_diff(self):\n                     obj_title = obj.Title()\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n-                             (css_class, "diff_sub", obj_url, obj_title))\n+                             (css_class, \'diff_sub\', obj_url, obj_title))\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_title = obj.Title()\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n-                             (css_class, "diff_add", obj_url, obj_title))\n+                             (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_title = obj.Title()\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n-                             (css_class, "diff_sub", obj_url, obj_title))\n+                             (css_class, \'diff_sub\', obj_url, obj_title))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_title = obj.Title()\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n-                             (css_class, "diff_add", obj_url, obj_title))\n+                             (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n@@ -121,33 +123,33 @@ def inline_diff(self):\n         return \'\\n\'.join(r)\n \n     def ndiff(self):\n-        """Return a textual diff"""\n+        """ Return a textual diff """\n         r = []\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("- %s" % obj_url)\n+                    r.append(\'- %s\' % obj_url)\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("+ %s" % obj_url)\n+                    r.append(\'+ %s\' % obj_url)\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("- %s" % obj_url)\n+                    r.append(\'- %s\' % obj_url)\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("+ %s" % obj_url)\n+                    r.append(\'+ %s\' % obj_url)\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("  %s" % obj_url)\n+                    r.append(\'  %s\' % obj_url)\n             else:\n                 raise ValueError(\'unknown tag %r\', tag)\n         return \'\\n\'.join(r)\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 7494f44..56241fb 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -87,15 +87,16 @@ def inline_diff(self):\n         if old_fname != new_fname:\n             html.append(\n                 self.inlinediff_fmt % (\'%s FilenameDiff\' % css_class,\n-                                       old_fname, new_fname)\n+                                       old_fname, new_fname),\n             )\n         if a != b:\n             html.append(\n-                self.inlinediff_fmt % (css_class, a, b)\n+                self.inlinediff_fmt % (css_class, a, b),\n             )\n         if html:\n             return linesep.join(html)\n \n+\n InitializeClass(TextDiff)\n \n \n@@ -118,4 +119,5 @@ def _parseField(self, value, filename=None):\n \n         return TextDiff._parseField(self, safe_unicode(value), filename)\n \n+\n InitializeClass(AsTextDiff)\ndiff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py\nindex 92c1e46..13937d9 100644\n--- a/Products/CMFDiffTool/__init__.py\n+++ b/Products/CMFDiffTool/__init__.py\n@@ -47,5 +47,5 @@\n def initialize(context):\n     ToolInit(\'CMF Diff Tool\',\n              tools=tools,\n-             icon=\'tool.gif\'\n+             icon=\'tool.gif\',\n              ).initialize(context)\ndiff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py\nindex 1a25410..0c69fcd 100644\n--- a/Products/CMFDiffTool/choicediff.py\n+++ b/Products/CMFDiffTool/choicediff.py\n@@ -80,4 +80,5 @@ def _parseField(self, value, filename=None):\n \n         return AsTextDiff._parseField(self, value, filename)\n \n+\n InitializeClass(ChoiceDiff)\ndiff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py\nindex c1b2ebc..e24bce4 100644\n--- a/Products/CMFDiffTool/dexteritydiff.py\n+++ b/Products/CMFDiffTool/dexteritydiff.py\n@@ -122,7 +122,7 @@ def _diff_field(self, obj1, obj2, field, schema_name):\n             id2=self.id2,\n             field_name=field.getName(),\n             field_label=field.title,\n-            schemata=schema_name\n+            schemata=schema_name,\n         )\n \n     def _get_diff_type(self, field):\n@@ -176,6 +176,7 @@ def _compute_fields_order(self, obj):\n         all_fields += [(form.fields[name].field, name) for name in form.fields]\n         if form.groups:\n             for group in form.groups:\n-                all_fields += [(group.fields[name].field, name) for name in group.fields]\n+                all_fields += [(group.fields[name].field, name)\n+                               for name in group.fields]\n \n         return all_fields\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex 4666ef5..5ddd595 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -62,7 +62,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n     def _parseField(self, value, filename=None):\n         return [\n             \'\' if (value is None)\n-            else named_file_as_str(NamedFile(data=value, filename=filename))\n+            else named_file_as_str(NamedFile(data=value, filename=filename)),\n         ]\n \n     def inline_diff(self):\n@@ -72,6 +72,7 @@ def inline_diff(self):\n \n         return \'\' if self.same else self.inlinediff_fmt % (css_class, old, new)\n \n+\n InitializeClass(NamedFileBinaryDiff)\n \n \n@@ -131,7 +132,7 @@ def inline_diff(self):\n \n         def is_same_dict(d1, d2):\n             return is_same(\n-                d1[\'data\'], d1[\'filename\'], d2[\'data\'], d2[\'filename\']\n+                d1[\'data\'], d1[\'filename\'], d2[\'data\'], d2[\'filename\'],\n             )\n \n         return \'\\n\'.join([\n@@ -140,4 +141,5 @@ def is_same_dict(d1, d2):\n              % (css_class, d_old[\'repr\'], d_new[\'repr\'])\n              ) for (d_old, d_new) in zip(old_data, new_data)])\n \n+\n InitializeClass(NamedFileListDiff)\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex 4603345..b183c9f 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -43,7 +43,7 @@ def setUpPloneSite(self, portal):\n         sm.registerUtility(\n             component=vocabulary_factory,\n             provided=IVocabularyFactory,\n-            name=u\'Products.CMFDiffTool.testing.VOCABULARY\'\n+            name=u\'Products.CMFDiffTool.testing.VOCABULARY\',\n         )\n \n         fti = DexterityFTI(\n@@ -92,10 +92,11 @@ def setUpPloneSite(self, portal):\n                     </field>\n                 </schema>\n             </model>\n-            \'\'\'\n+            \'\'\',\n         )\n         types_tool._setObject(TEST_CONTENT_TYPE_ID, fti)\n \n+\n PACKAGE_DX_FIXTURE = DXLayer()\n \n if six.PY2:\n@@ -115,7 +116,8 @@ def setUpZope(self, app, configurationContext):\n \n     PACKAGE_AT_FIXTURE = ATLayer()\n     CMFDiffToolATLayer = FunctionalTesting(\n-        bases=(PACKAGE_AT_FIXTURE, ), name=\'Products.CMFDiffTool.AT:functional\')\n+        bases=(PACKAGE_AT_FIXTURE, ),\n+        name=\'Products.CMFDiffTool.AT:functional\')\n \n \n CMFDiffToolDXLayer = FunctionalTesting(\ndiff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py\nindex 5742ac5..9dd8e28 100644\n--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py\n+++ b/Products/CMFDiffTool/tests/testATCompoundDiff.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n import six\n \n+\n if six.PY2:\n     from .BaseTestCase import BaseATTestCase\n     from Products.Archetypes import atapi\n@@ -11,14 +12,14 @@\n     from zope.interface import alsoProvides\n     from zope.interface import noLongerProvides\n \n-\n     class TestATCompoundDiff(BaseATTestCase):\n         """Test the portal_diff tool"""\n \n         def testCompoundDiff(self):\n             first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n             first = self.folder[first]\n-            second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n+            second = self.folder.invokeFactory(\'Document\',\n+                                               \'extended-document2\')\n             second = self.folder[second]\n             # Change a value\n             first.setText(\'<p>Body1</p>\', mimetype=\'text/html\')\n@@ -68,7 +69,7 @@ def set(self, instance, value, **kwargs):\n                         noLongerProvides(instance, IHighlighted)\n \n             class TestSchemaExtender(Extender):\n-                adapts(ATDocument)\n+                adapts(ATDocument)  # noqa: D001\n                 fields = [\n                     HighlightedField(\'schemaextender_test\',\n                                      schemata=\'settings\',\n@@ -78,13 +79,15 @@ class TestSchemaExtender(Extender):\n                                      ),\n                 ]\n \n-            """Ensure that tool instances implement the portal_diff interface"""\n+            """ Ensure that tool instances implement the portal_diff\n+            interface """\n             provideAdapter(TestSchemaExtender,\n-                           name=u"archetypes.schemaextender.tests")\n+                           name=u\'archetypes.schemaextender.tests\')\n \n             first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n             first = self.folder[first]\n-            second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n+            second = self.folder.invokeFactory(\'Document\',\n+                                               \'extended-document2\')\n             second = self.folder[second]\n             # Change the value\n             alsoProvides(second, IHighlighted)\ndiff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex d5e9eb4..6b9206e 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -37,7 +37,8 @@ def setupTestObjects(self):\n         self.folder.invokeFactory(\'Document\', \'doc1\', title=\'My Title\')\n         self.folder.manage_pasteObjects(\n             self.folder.manage_copyObjects([\'doc1\']))\n-        cdd = DexterityCompoundDiff(self.folder[\'doc1\'], self.folder[\'doc1\'], \'\')\n+        cdd = DexterityCompoundDiff(self.folder[\'doc1\'], self.folder[\'doc1\'],\n+                                    \'\')\n         self.len_diff = len(cdd._diffs)\n \n     def setupTestFolders(self):\n@@ -220,7 +221,8 @@ def testChangeSetFolderComplex(self):\n             # We don\'t have an orderable folder give up\n             return\n \n-        self.cs.computeDiff(self.folder[\'folder1\'], self.folder[\'copy_of_folder1\'])\n+        self.cs.computeDiff(self.folder[\'folder1\'],\n+                            self.folder[\'copy_of_folder1\'])\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n         self.assertFalse(diffs[0].same)\ndiff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py\nindex 8400cab..e3976bb 100644\n--- a/Products/CMFDiffTool/tests/testFieldDiff.py\n+++ b/Products/CMFDiffTool/tests/testFieldDiff.py\n@@ -27,10 +27,10 @@ def method(self):\n \n \n class U:\n-    attribute = u"\\xfcnicode value"\n+    attribute = u\'\\xfcnicode value\'\n \n     def method(self):\n-        return u"different method val\\xfce"\n+        return u\'different method val\\xfce\'\n \n \n class TestFieldDiff(TestCase):\n@@ -121,7 +121,7 @@ def testDiffText(self):\n         expected = \'- value%s+ different value\' % linesep\n         fd = FieldDiff(a, b, \'attribute\')\n         self.assertEqual(fd.ndiff(), expected)\n-        expected = u"- value%s+ \\xfcnicode value" % linesep\n+        expected = u\'- value%s+ \\xfcnicode value\' % linesep\n         fd = FieldDiff(a, uu, \'attribute\')\n         self.assertEqual(fd.ndiff(), expected)\n \ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex 4d71463..7844ab3 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -6,11 +6,11 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFDiffTool import testing\n-from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.interfaces import IDifference\n from Products.CMFDiffTool.ListDiff import ListDiff\n from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n+\n _marker = []\n \n \n@@ -23,11 +23,11 @@ class B:\n \n \n class C:\n-    attribute = {"a": 1, "b": 2}\n+    attribute = {\'a\': 1, \'b\': 2}\n \n \n class D:\n-    attribute = {"a": 1, "b": 2, "c": 3}\n+    attribute = {\'a\': 1, \'b\': 2, \'c\': 3}\n \n \n class TestListDiff(BaseDXTestCase):\n@@ -66,7 +66,7 @@ def testInvalidValue(self):\n         diff = ListDiff(a, b, \'attribute\')\n         self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n \n-        b.attribute = ""\n+        b.attribute = \'\'\n         diff = ListDiff(a, b, \'attribute\')\n         self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n \n@@ -142,7 +142,8 @@ def test_inline_diff_vocabulary(self):\n     <div class="diff_add">First Title</div>\n </div>\'\'\'\n         self._test_diff_list([],\n-                             [testing.VOCABULARY_TUPLES[0][0]], False, expected)\n+                             [testing.VOCABULARY_TUPLES[0][0]],\n+                             False, expected)\n         # changed: replaced unique value by another one, displaying titles\n         expected = u\'\'\'<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n@@ -153,7 +154,8 @@ def test_inline_diff_vocabulary(self):\n     <div class="diff_add">Third Title</div>\n </div>\'\'\'\n         self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n-                             [testing.VOCABULARY_TUPLES[2][0]], False, expected)\n+                             [testing.VOCABULARY_TUPLES[2][0]],\n+                             False, expected)\n         # changed: replaced multiple values by others, displaying titles\n         expected = u\'\'\'<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n@@ -164,8 +166,11 @@ def test_inline_diff_vocabulary(self):\n     <div class="diff_sub"></div>\n     <div class="diff_add">Third Title</div>\n </div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n-                             [testing.VOCABULARY_TUPLES[1][0], testing.VOCABULARY_TUPLES[2][0]], False, expected)\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n+                              testing.VOCABULARY_TUPLES[1][0]],\n+                             [testing.VOCABULARY_TUPLES[1][0],\n+                              testing.VOCABULARY_TUPLES[2][0]],\n+                             False, expected)\n         # changed: replaced multiple values by others, displaying titles\n         expected = u\'\'\'<div class="InlineDiff">\n     <div class="diff_sub"></div>\n@@ -176,8 +181,11 @@ def test_inline_diff_vocabulary(self):\n     <div class="diff_sub">second_value</div>\n     <div class="diff_add"></div>\n </div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n-                             [testing.VOCABULARY_TUPLES[2][0], testing.VOCABULARY_TUPLES[0][0]], False, expected)\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n+                              testing.VOCABULARY_TUPLES[1][0]],\n+                             [testing.VOCABULARY_TUPLES[2][0],\n+                              testing.VOCABULARY_TUPLES[0][0]],\n+                             False, expected)\n         # changed: removed values, displaying titles\n         expected = u\'\'\'<div class="InlineDiff">\n     <div class="diff_sub">First Title</div>\n@@ -187,7 +195,8 @@ def test_inline_diff_vocabulary(self):\n     <div class="diff_sub">second_value</div>\n     <div class="diff_add"></div>\n </div>\'\'\'\n-        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0], testing.VOCABULARY_TUPLES[1][0]],\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n+                              testing.VOCABULARY_TUPLES[1][0]],\n                              [], False, expected)\n \n     def _test_diff_list(self, value1, value2, same, expected):\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex 542d263..feb7138 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -5,8 +5,6 @@\n from Products.CMFDiffTool.TextDiff import TextDiff\n from unittest import TestCase\n \n-import six\n-\n \n _marker = []\n \ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex 51bff32..b224e96 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -16,14 +16,14 @@ def test_should_detect_different_filename(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'blah.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'blah.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=u\'bleh.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'bleh.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -36,14 +36,14 @@ def test_should_detect_different_data(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'different contents\', filename=u\'f.txt\')\n+            file=NamedFile(data=\'different contents\', filename=u\'f.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -56,14 +56,14 @@ def test_should_detect_same_data_and_filename(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \ndiff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py\nindex 61a15f6..c75223b 100644\n--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py\n+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py\n@@ -13,7 +13,6 @@\n from zope.intid.interfaces import IIntIds\n \n \n-\n class DexterityDiffTestCase(BaseDXTestCase):\n \n     def setUp(self):\n@@ -26,7 +25,7 @@ def test_should_diff(self):\n             \'obj1\',\n             title=u\'Object 1\',\n             description=u\'Desc 1\',\n-            text=u\'Text 1\'\n+            text=u\'Text 1\',\n         )\n         obj1 = self.portal[\'obj1\']\n \n@@ -34,7 +33,7 @@ def test_should_diff(self):\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n             title=u\'Object 2\',\n-            text=u\'Text 2\'\n+            text=u\'Text 2\',\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -118,7 +117,7 @@ def test_should_provide_diff_for_related_fields(self):\n             \'obj1\',\n             title=u\'Object 1\',\n             description=u\'Desc 1\',\n-            text=u\'Text 1\'\n+            text=u\'Text 1\',\n         )\n         obj1 = self.portal[\'obj1\']\n \ndiff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py\nindex f123a6d..0bd0a6d 100644\n--- a/Products/CMFDiffTool/tests/test_filelistdiff.py\n+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py\n@@ -19,42 +19,42 @@ def test_should_diff_file_lists_correctly(self):\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\')],\n             [(\'data2\', u\'filename2\')],\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             [(\'data1\', u\'filename1\'), (\'datay\', u\'filenamey\')],\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             [(\'datax\', u\'filenamex\'), (\'data1\', u\'filename1\')],\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\')],\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\')],\n             [(\'data1\', u\'filename1\')],\n-            True\n+            True,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            True\n+            True,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             None,\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             [],\n-            False\n+            False,\n         )\n         self._test_diff_files(None, None, True)\n         self._test_diff_files([], [], True)\ndiff --git a/buildout.cfg b/buildout.cfg\nindex 08c08e8..001d11e 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -29,7 +29,7 @@ eggs = ${test:eggs}\n [code-analysis]\n recipe = plone.recipe.codeanalysis [recommended]\n directory = ${buildout:directory}/Products\n-flake8-max-complexity = 20\n+flake8-max-complexity = 22\n # If todo markers are marked as problems, no todomarkers will be written\n # Don\'t show plone.api advertisement\n # Don\'t checko for % formatter\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2018-10-02T13:26:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/b683b12628c522d256e155adc76139c6b1631a86

Merge pull request #34 from sgeulette/master

When displaying differences on a zope.schema.List field, vocabulary terms titles are displayed (if a vocabulary is linked to the field)

Files changed:
M .gitignore
M CHANGES.rst
M Products/CMFDiffTool/ATCompoundDiff.py
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/choicediff.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/testATCompoundDiff.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M buildout.cfg

b'diff --git a/.gitignore b/.gitignore\nindex 6f0c371..eccadf0 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -2,6 +2,8 @@\n *.py[co]\n build\n dist\n+include/\n+lib/\n *.mo\n .installed.cfg\n bin/\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 82b61a7..7bcc6bc 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,18 +4,12 @@ Changelog\n 3.2.2 (unreleased)\n ------------------\n \n-Breaking changes:\n-\n-- *add item here*\n-\n-New features:\n-\n-- *add item here*\n-\n Bug fixes:\n \n-- *add item here*\n-\n+- Display titles in diff of zope.schema.List using vocabulary\n+  [sgeulette]\n+- Flake8 corrections\n+  [sgeulette]\n \n 3.2.1 (2018-09-23)\n ------------------\ndiff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py\nindex dbfd605..bc9b9f7 100644\n--- a/Products/CMFDiffTool/ATCompoundDiff.py\n+++ b/Products/CMFDiffTool/ATCompoundDiff.py\n@@ -126,4 +126,5 @@ def getFields(self, obj1, obj2):\n                                        \'schemata\': schemata_name})\n         return fields\n \n+\n InitializeClass(ATCompoundDiff)\ndiff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex e951c7a..1ab004a 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -4,8 +4,8 @@\n    Calculate differences between content objects\n """\n \n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.interfaces import IDifference\n@@ -63,7 +63,7 @@ def applyChanges(self, ob):\n     def filenameTitle(self, filename):\n         """Translate the filename leading text\n         """\n-        msg = _(u"Filename: ${filename}",\n+        msg = _(u\'Filename: ${filename}\',\n                 mapping={\'filename\': filename})\n         return translate(msg)\n \n@@ -73,8 +73,8 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n     # grab it *with* acquisition, so things like ComputedAttribute\n     # will work\n     if IDexterityContent.providedBy(ob) and field:\n-        # we need a special handling for subjects because the field is stored as\n-        # `subject` attribute but the schema name is `subjects`\n+        # we need a special handling for subjects because the field is stored\n+        # as `subject` attribute but the schema name is `subjects`\n         # see plone.app.dexterity.behaviors.metadata.ICategorization and\n         # plone.dexterity.content.DexterityContent\n         if field == \'subjects\':\n@@ -105,7 +105,7 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n             if isinstance(val, RelationValue):\n                 try:\n                     obj = val.to_object\n-                except:\n+                except Exception:\n                     obj = None\n                 new_value.append(obj)\n             else:\n@@ -117,7 +117,7 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n     if isinstance(value, RelationValue):\n         try:\n             obj = value.to_object\n-        except:\n+        except Exception:\n             obj = None\n         value = obj\n \n@@ -131,4 +131,5 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n \n     return value\n \n+\n InitializeClass(BaseDiff)\ndiff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex c4a5e1e..288b1f3 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -51,10 +51,11 @@ def inline_diff(self):\n             html.append(\n                 self.inlinediff_fmt % (css_class,\n                                        self.filenameTitle(self.oldFilename),\n-                                       self.filenameTitle(self.newFilename))\n+                                       self.filenameTitle(self.newFilename)),\n             )\n \n         if html:\n             return linesep.join(html)\n \n+\n InitializeClass(BinaryDiff)\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 45dde7f..40edf65 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -28,4 +28,5 @@ def _parseField(self, value, filename=None):\n             value = getattr(value, \'raw\', value)\n         return TextDiff._parseField(self, value, filename)\n \n+\n InitializeClass(CMFDTHtmlDiff)\ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex 7b2f05f..ef302f8 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -4,8 +4,8 @@\n    Calculate differences between content objects\n """\n from AccessControl import ClassSecurityInfo\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import registerToolInterface\n@@ -177,5 +177,6 @@ def unregisterDiffType(klass):\n \n     del CMFDiffTool._difftypes[klass.meta_type]\n \n+\n InitializeClass(CMFDiffTool)\n registerToolInterface(\'portal_diff\', IDiffTool)\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 2a7691f..2c56271 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -27,7 +27,7 @@ def _parseField(self, value, filename=None):\n         else:\n             return [\n                 self.filenameTitle(filename),\n-                value\n+                value,\n             ]\n \n     def getLineDiffs(self):\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex edfa344..de8ce7b 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -1,34 +1,59 @@\n # -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n+from plone.dexterity.interfaces import IDexterityContent\n+from Products.CMFDiffTool.choicediff import get_field_object\n+from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n from six.moves import range\n \n \n-def chk_hashable(value):\n-    try:\n-        hash(value)\n-    except TypeError as e:\n-        value = repr(e) + ": " + repr(value)\n-    return value\n-\n-\n class ListDiff(FieldDiff):\n     """Text difference"""\n \n     meta_type = \'List Diff\'\n \n+    def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n+                 field_label=None, schemata=None):\n+        FieldDiff.__init__(self, obj1, obj2, field, id1, id2, field_name,\n+                           field_label, schemata)\n+        self._vocabulary = None\n+\n+        # Tries to find a vocabulary. First we need to find an object and\n+        # the field instance.\n+        obj = obj1 if (obj1 is not None) else obj2\n+        field_name = field_name or field\n+        if obj and field_name and IDexterityContent.providedBy(obj):\n+            field_instance = get_field_object(obj, field_name)\n+            if field_instance is not None:\n+                # Binding the field to an object will construct the vocabulary\n+                # using a factory if necessary.\n+                try:\n+                    self._vocabulary = field_instance.value_type.bind(obj).\\\n+                        vocabulary\n+                except Exception:\n+                    pass\n+\n+    def chk_hashable(self, value):\n+        if self._vocabulary is not None:\n+            value = title_or_value(self._vocabulary, value)\n+        try:\n+            hash(value)\n+        except TypeError as e:\n+            value = repr(e) + \': \' + repr(value)\n+        return value\n+\n     def _parseField(self, value, filename=None):\n         """Parse a field value in preparation for diffing"""\n         if type(value) is list or type(value) is tuple:\n             values = []\n             for v in value:\n-                values.append(chk_hashable(v))\n+                values.append(self.chk_hashable(v))\n             return values\n         else:\n             if type(value) is set:\n                 return list(value)\n             else:\n-                return [chk_hashable(value)]\n+                return [self.chk_hashable(value)]\n \n \n class RelationListDiff(FieldDiff):\n@@ -41,7 +66,8 @@ class RelationListDiff(FieldDiff):\n     </div>"""\n \n     def _parseField(self, value, filename=None):\n-        """Take RelationValues and just return the target UID so we can compare"""\n+        """ Take RelationValues and just return the target UID\n+            so we can compare """\n \n         if filename is None:\n             # Since we only want to compare a single field, make a\n@@ -50,7 +76,7 @@ def _parseField(self, value, filename=None):\n         else:\n             return [\n                 self.filenameTitle(filename),\n-                [\'/\'.join(val.getPhysicalPath()) for val in value]\n+                [\'/\'.join(val.getPhysicalPath()) for val in value],\n             ]\n \n     def inline_diff(self):\n@@ -65,27 +91,27 @@ def inline_diff(self):\n                     obj_title = obj.Title()\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n-                             (css_class, "diff_sub", obj_url, obj_title))\n+                             (css_class, \'diff_sub\', obj_url, obj_title))\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_title = obj.Title()\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n-                             (css_class, "diff_add", obj_url, obj_title))\n+                             (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_title = obj.Title()\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n-                             (css_class, "diff_sub", obj_url, obj_title))\n+                             (css_class, \'diff_sub\', obj_url, obj_title))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_title = obj.Title()\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n-                             (css_class, "diff_add", obj_url, obj_title))\n+                             (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n@@ -97,33 +123,33 @@ def inline_diff(self):\n         return \'\\n\'.join(r)\n \n     def ndiff(self):\n-        """Return a textual diff"""\n+        """ Return a textual diff """\n         r = []\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("- %s" % obj_url)\n+                    r.append(\'- %s\' % obj_url)\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("+ %s" % obj_url)\n+                    r.append(\'+ %s\' % obj_url)\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("- %s" % obj_url)\n+                    r.append(\'- %s\' % obj_url)\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("+ %s" % obj_url)\n+                    r.append(\'+ %s\' % obj_url)\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n                     obj_url = obj.absolute_url()\n-                    r.append("  %s" % obj_url)\n+                    r.append(\'  %s\' % obj_url)\n             else:\n                 raise ValueError(\'unknown tag %r\', tag)\n         return \'\\n\'.join(r)\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 7494f44..56241fb 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -87,15 +87,16 @@ def inline_diff(self):\n         if old_fname != new_fname:\n             html.append(\n                 self.inlinediff_fmt % (\'%s FilenameDiff\' % css_class,\n-                                       old_fname, new_fname)\n+                                       old_fname, new_fname),\n             )\n         if a != b:\n             html.append(\n-                self.inlinediff_fmt % (css_class, a, b)\n+                self.inlinediff_fmt % (css_class, a, b),\n             )\n         if html:\n             return linesep.join(html)\n \n+\n InitializeClass(TextDiff)\n \n \n@@ -118,4 +119,5 @@ def _parseField(self, value, filename=None):\n \n         return TextDiff._parseField(self, safe_unicode(value), filename)\n \n+\n InitializeClass(AsTextDiff)\ndiff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py\nindex 92c1e46..13937d9 100644\n--- a/Products/CMFDiffTool/__init__.py\n+++ b/Products/CMFDiffTool/__init__.py\n@@ -47,5 +47,5 @@\n def initialize(context):\n     ToolInit(\'CMF Diff Tool\',\n              tools=tools,\n-             icon=\'tool.gif\'\n+             icon=\'tool.gif\',\n              ).initialize(context)\ndiff --git a/Products/CMFDiffTool/choicediff.py b/Products/CMFDiffTool/choicediff.py\nindex 1a25410..0c69fcd 100644\n--- a/Products/CMFDiffTool/choicediff.py\n+++ b/Products/CMFDiffTool/choicediff.py\n@@ -80,4 +80,5 @@ def _parseField(self, value, filename=None):\n \n         return AsTextDiff._parseField(self, value, filename)\n \n+\n InitializeClass(ChoiceDiff)\ndiff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py\nindex c1b2ebc..e24bce4 100644\n--- a/Products/CMFDiffTool/dexteritydiff.py\n+++ b/Products/CMFDiffTool/dexteritydiff.py\n@@ -122,7 +122,7 @@ def _diff_field(self, obj1, obj2, field, schema_name):\n             id2=self.id2,\n             field_name=field.getName(),\n             field_label=field.title,\n-            schemata=schema_name\n+            schemata=schema_name,\n         )\n \n     def _get_diff_type(self, field):\n@@ -176,6 +176,7 @@ def _compute_fields_order(self, obj):\n         all_fields += [(form.fields[name].field, name) for name in form.fields]\n         if form.groups:\n             for group in form.groups:\n-                all_fields += [(group.fields[name].field, name) for name in group.fields]\n+                all_fields += [(group.fields[name].field, name)\n+                               for name in group.fields]\n \n         return all_fields\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex 4666ef5..5ddd595 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -62,7 +62,7 @@ def __init__(self, obj1, obj2, field, id1=None, id2=None, field_name=None,\n     def _parseField(self, value, filename=None):\n         return [\n             \'\' if (value is None)\n-            else named_file_as_str(NamedFile(data=value, filename=filename))\n+            else named_file_as_str(NamedFile(data=value, filename=filename)),\n         ]\n \n     def inline_diff(self):\n@@ -72,6 +72,7 @@ def inline_diff(self):\n \n         return \'\' if self.same else self.inlinediff_fmt % (css_class, old, new)\n \n+\n InitializeClass(NamedFileBinaryDiff)\n \n \n@@ -131,7 +132,7 @@ def inline_diff(self):\n \n         def is_same_dict(d1, d2):\n             return is_same(\n-                d1[\'data\'], d1[\'filename\'], d2[\'data\'], d2[\'filename\']\n+                d1[\'data\'], d1[\'filename\'], d2[\'data\'], d2[\'filename\'],\n             )\n \n         return \'\\n\'.join([\n@@ -140,4 +141,5 @@ def is_same_dict(d1, d2):\n              % (css_class, d_old[\'repr\'], d_new[\'repr\'])\n              ) for (d_old, d_new) in zip(old_data, new_data)])\n \n+\n InitializeClass(NamedFileListDiff)\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex f909170..b183c9f 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -17,6 +17,7 @@\n VOCABULARY_TUPLES = [\n     (u\'first_value\', u\'First Title\'),\n     (u\'second_value\', None),\n+    (u\'third_value\', u\'Third Title\'),\n ]\n \n VOCABULARY = SimpleVocabulary(\n@@ -42,7 +43,7 @@ def setUpPloneSite(self, portal):\n         sm.registerUtility(\n             component=vocabulary_factory,\n             provided=IVocabularyFactory,\n-            name=u\'Products.CMFDiffTool.testing.VOCABULARY\'\n+            name=u\'Products.CMFDiffTool.testing.VOCABULARY\',\n         )\n \n         fti = DexterityFTI(\n@@ -82,12 +83,20 @@ def setUpPloneSite(self, portal):\n                         <required>False</required>\n                         <vocabulary>Products.CMFDiffTool.testing.VOCABULARY</vocabulary>\n                     </field>\n+                    <field name="choices" type="zope.schema.List">\n+                        <title>Choices</title>\n+                        <required>False</required>\n+                        <value_type type="zope.schema.Choice">\n+                            <vocabulary>Products.CMFDiffTool.testing.VOCABULARY</vocabulary>\n+                        </value_type>\n+                    </field>\n                 </schema>\n             </model>\n-            \'\'\'\n+            \'\'\',\n         )\n         types_tool._setObject(TEST_CONTENT_TYPE_ID, fti)\n \n+\n PACKAGE_DX_FIXTURE = DXLayer()\n \n if six.PY2:\n@@ -107,7 +116,8 @@ def setUpZope(self, app, configurationContext):\n \n     PACKAGE_AT_FIXTURE = ATLayer()\n     CMFDiffToolATLayer = FunctionalTesting(\n-        bases=(PACKAGE_AT_FIXTURE, ), name=\'Products.CMFDiffTool.AT:functional\')\n+        bases=(PACKAGE_AT_FIXTURE, ),\n+        name=\'Products.CMFDiffTool.AT:functional\')\n \n \n CMFDiffToolDXLayer = FunctionalTesting(\ndiff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py\nindex 5742ac5..9dd8e28 100644\n--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py\n+++ b/Products/CMFDiffTool/tests/testATCompoundDiff.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n import six\n \n+\n if six.PY2:\n     from .BaseTestCase import BaseATTestCase\n     from Products.Archetypes import atapi\n@@ -11,14 +12,14 @@\n     from zope.interface import alsoProvides\n     from zope.interface import noLongerProvides\n \n-\n     class TestATCompoundDiff(BaseATTestCase):\n         """Test the portal_diff tool"""\n \n         def testCompoundDiff(self):\n             first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n             first = self.folder[first]\n-            second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n+            second = self.folder.invokeFactory(\'Document\',\n+                                               \'extended-document2\')\n             second = self.folder[second]\n             # Change a value\n             first.setText(\'<p>Body1</p>\', mimetype=\'text/html\')\n@@ -68,7 +69,7 @@ def set(self, instance, value, **kwargs):\n                         noLongerProvides(instance, IHighlighted)\n \n             class TestSchemaExtender(Extender):\n-                adapts(ATDocument)\n+                adapts(ATDocument)  # noqa: D001\n                 fields = [\n                     HighlightedField(\'schemaextender_test\',\n                                      schemata=\'settings\',\n@@ -78,13 +79,15 @@ class TestSchemaExtender(Extender):\n                                      ),\n                 ]\n \n-            """Ensure that tool instances implement the portal_diff interface"""\n+            """ Ensure that tool instances implement the portal_diff\n+            interface """\n             provideAdapter(TestSchemaExtender,\n-                           name=u"archetypes.schemaextender.tests")\n+                           name=u\'archetypes.schemaextender.tests\')\n \n             first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n             first = self.folder[first]\n-            second = self.folder.invokeFactory(\'Document\', \'extended-document2\')\n+            second = self.folder.invokeFactory(\'Document\',\n+                                               \'extended-document2\')\n             second = self.folder[second]\n             # Change the value\n             alsoProvides(second, IHighlighted)\ndiff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex d5e9eb4..6b9206e 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -37,7 +37,8 @@ def setupTestObjects(self):\n         self.folder.invokeFactory(\'Document\', \'doc1\', title=\'My Title\')\n         self.folder.manage_pasteObjects(\n             self.folder.manage_copyObjects([\'doc1\']))\n-        cdd = DexterityCompoundDiff(self.folder[\'doc1\'], self.folder[\'doc1\'], \'\')\n+        cdd = DexterityCompoundDiff(self.folder[\'doc1\'], self.folder[\'doc1\'],\n+                                    \'\')\n         self.len_diff = len(cdd._diffs)\n \n     def setupTestFolders(self):\n@@ -220,7 +221,8 @@ def testChangeSetFolderComplex(self):\n             # We don\'t have an orderable folder give up\n             return\n \n-        self.cs.computeDiff(self.folder[\'folder1\'], self.folder[\'copy_of_folder1\'])\n+        self.cs.computeDiff(self.folder[\'folder1\'],\n+                            self.folder[\'copy_of_folder1\'])\n         diffs = self.cs.getDiffs()\n         self.assertEqual(len(diffs), 14)\n         self.assertFalse(diffs[0].same)\ndiff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py\nindex 8400cab..e3976bb 100644\n--- a/Products/CMFDiffTool/tests/testFieldDiff.py\n+++ b/Products/CMFDiffTool/tests/testFieldDiff.py\n@@ -27,10 +27,10 @@ def method(self):\n \n \n class U:\n-    attribute = u"\\xfcnicode value"\n+    attribute = u\'\\xfcnicode value\'\n \n     def method(self):\n-        return u"different method val\\xfce"\n+        return u\'different method val\\xfce\'\n \n \n class TestFieldDiff(TestCase):\n@@ -121,7 +121,7 @@ def testDiffText(self):\n         expected = \'- value%s+ different value\' % linesep\n         fd = FieldDiff(a, b, \'attribute\')\n         self.assertEqual(fd.ndiff(), expected)\n-        expected = u"- value%s+ \\xfcnicode value" % linesep\n+        expected = u\'- value%s+ \\xfcnicode value\' % linesep\n         fd = FieldDiff(a, uu, \'attribute\')\n         self.assertEqual(fd.ndiff(), expected)\n \ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex e8d95a9..7844ab3 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -3,9 +3,12 @@\n # CMFDiffTool tests\n #\n from os import linesep\n-from plone.app.testing import PLONE_INTEGRATION_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from Products.CMFDiffTool import testing\n+from Products.CMFDiffTool.interfaces import IDifference\n from Products.CMFDiffTool.ListDiff import ListDiff\n-from unittest import TestCase\n+from Products.CMFDiffTool.tests.BaseTestCase import BaseDXTestCase\n \n \n _marker = []\n@@ -20,21 +23,33 @@ class B:\n \n \n class C:\n-    attribute = {"a": 1, "b": 2}\n+    attribute = {\'a\': 1, \'b\': 2}\n \n \n class D:\n-    attribute = {"a": 1, "b": 2, "c": 3}\n+    attribute = {\'a\': 1, \'b\': 2, \'c\': 3}\n \n \n-class TestListDiff(TestCase):\n+class TestListDiff(BaseDXTestCase):\n     """Test the ListDiff class"""\n \n-    layer = PLONE_INTEGRATION_TESTING\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal.invokeFactory(\n+            testing.TEST_CONTENT_TYPE_ID,\n+            \'obj1\',\n+        )\n+        self.portal.invokeFactory(\n+            testing.TEST_CONTENT_TYPE_ID,\n+            \'obj2\',\n+        )\n+\n+        self.obj1 = self.portal[\'obj1\']\n+        self.obj2 = self.portal[\'obj2\']\n \n     def testInterface(self):\n         """Ensure that tool instances implement the portal_diff interface"""\n-        from Products.CMFDiffTool.interfaces.portal_diff import IDifference\n         self.assertTrue(IDifference.implementedBy(ListDiff))\n \n     def testInvalidValue(self):\n@@ -51,7 +66,7 @@ def testInvalidValue(self):\n         diff = ListDiff(a, b, \'attribute\')\n         self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n \n-        b.attribute = ""\n+        b.attribute = \'\'\n         diff = ListDiff(a, b, \'attribute\')\n         self.assertEqual([(\'insert\', 0, 0, 0, 1)], diff.getLineDiffs())\n \n@@ -112,6 +127,85 @@ def test_inline_diff(self):\n         diff = ListDiff(a, b, \'attribute\')\n         self.assertEqual(diff.inline_diff(), expected)\n \n+    def test_inline_diff_vocabulary(self):\n+        # unchanged, with vocabulary title\n+        expected = u\'<div class="InlineDiff">First Title</div>\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n+                             [testing.VOCABULARY_TUPLES[0][0]], True, expected)\n+        # unchanged, without vocabulary title\n+        expected = u\'<div class="InlineDiff">second_value</div>\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[1][0]],\n+                             [testing.VOCABULARY_TUPLES[1][0]], True, expected)\n+        # changed: add value, with vocabulary title\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub"></div>\n+    <div class="diff_add">First Title</div>\n+</div>\'\'\'\n+        self._test_diff_list([],\n+                             [testing.VOCABULARY_TUPLES[0][0]],\n+                             False, expected)\n+        # changed: replaced unique value by another one, displaying titles\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub">First Title</div>\n+    <div class="diff_add"></div>\n+</div>\n+<div class="InlineDiff">\n+    <div class="diff_sub"></div>\n+    <div class="diff_add">Third Title</div>\n+</div>\'\'\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0]],\n+                             [testing.VOCABULARY_TUPLES[2][0]],\n+                             False, expected)\n+        # changed: replaced multiple values by others, displaying titles\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub">First Title</div>\n+    <div class="diff_add"></div>\n+</div>\n+<div class="InlineDiff">second_value</div>\n+<div class="InlineDiff">\n+    <div class="diff_sub"></div>\n+    <div class="diff_add">Third Title</div>\n+</div>\'\'\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n+                              testing.VOCABULARY_TUPLES[1][0]],\n+                             [testing.VOCABULARY_TUPLES[1][0],\n+                              testing.VOCABULARY_TUPLES[2][0]],\n+                             False, expected)\n+        # changed: replaced multiple values by others, displaying titles\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub"></div>\n+    <div class="diff_add">Third Title</div>\n+</div>\n+<div class="InlineDiff">First Title</div>\n+<div class="InlineDiff">\n+    <div class="diff_sub">second_value</div>\n+    <div class="diff_add"></div>\n+</div>\'\'\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n+                              testing.VOCABULARY_TUPLES[1][0]],\n+                             [testing.VOCABULARY_TUPLES[2][0],\n+                              testing.VOCABULARY_TUPLES[0][0]],\n+                             False, expected)\n+        # changed: removed values, displaying titles\n+        expected = u\'\'\'<div class="InlineDiff">\n+    <div class="diff_sub">First Title</div>\n+    <div class="diff_add"></div>\n+</div>\n+<div class="InlineDiff">\n+    <div class="diff_sub">second_value</div>\n+    <div class="diff_add"></div>\n+</div>\'\'\'\n+        self._test_diff_list([testing.VOCABULARY_TUPLES[0][0],\n+                              testing.VOCABULARY_TUPLES[1][0]],\n+                             [], False, expected)\n+\n+    def _test_diff_list(self, value1, value2, same, expected):\n+        self.obj1.choices = value1\n+        self.obj2.choices = value2\n+        diff = ListDiff(self.obj1, self.obj2, \'choices\')\n+        self.assertEqual(diff.same, same)\n+        self.assertEqual(diff.inline_diff(), expected)\n+\n     def testGetLineDictDiffsSame(self):\n         """test getLineDiffs() method with dict same value"""\n         c = C()\n@@ -125,4 +219,4 @@ def testGetLineDictDiffsDifferent(self):\n         d = D()\n         diff = ListDiff(c, d, \'attribute\')\n         expected = [(\'replace\', 0, 1, 0, 1)]\n-        self.assertEqual(diff.getLineDiffs(), expected)\n\\ No newline at end of file\n+        self.assertEqual(diff.getLineDiffs(), expected)\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex 542d263..feb7138 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -5,8 +5,6 @@\n from Products.CMFDiffTool.TextDiff import TextDiff\n from unittest import TestCase\n \n-import six\n-\n \n _marker = []\n \ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex 51bff32..b224e96 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -16,14 +16,14 @@ def test_should_detect_different_filename(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'blah.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'blah.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=u\'bleh.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'bleh.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -36,14 +36,14 @@ def test_should_detect_different_data(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'different contents\', filename=u\'f.txt\')\n+            file=NamedFile(data=\'different contents\', filename=u\'f.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -56,14 +56,14 @@ def test_should_detect_same_data_and_filename(self):\n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj1\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n         )\n         obj1 = self.portal[\'obj1\']\n \n         self.portal.invokeFactory(\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n-            file=NamedFile(data=\'contents\', filename=u\'f.txt\')\n+            file=NamedFile(data=\'contents\', filename=u\'f.txt\'),\n         )\n         obj2 = self.portal[\'obj2\']\n \ndiff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py\nindex 61a15f6..c75223b 100644\n--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py\n+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py\n@@ -13,7 +13,6 @@\n from zope.intid.interfaces import IIntIds\n \n \n-\n class DexterityDiffTestCase(BaseDXTestCase):\n \n     def setUp(self):\n@@ -26,7 +25,7 @@ def test_should_diff(self):\n             \'obj1\',\n             title=u\'Object 1\',\n             description=u\'Desc 1\',\n-            text=u\'Text 1\'\n+            text=u\'Text 1\',\n         )\n         obj1 = self.portal[\'obj1\']\n \n@@ -34,7 +33,7 @@ def test_should_diff(self):\n             testing.TEST_CONTENT_TYPE_ID,\n             \'obj2\',\n             title=u\'Object 2\',\n-            text=u\'Text 2\'\n+            text=u\'Text 2\',\n         )\n         obj2 = self.portal[\'obj2\']\n \n@@ -118,7 +117,7 @@ def test_should_provide_diff_for_related_fields(self):\n             \'obj1\',\n             title=u\'Object 1\',\n             description=u\'Desc 1\',\n-            text=u\'Text 1\'\n+            text=u\'Text 1\',\n         )\n         obj1 = self.portal[\'obj1\']\n \ndiff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py\nindex f123a6d..0bd0a6d 100644\n--- a/Products/CMFDiffTool/tests/test_filelistdiff.py\n+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py\n@@ -19,42 +19,42 @@ def test_should_diff_file_lists_correctly(self):\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\')],\n             [(\'data2\', u\'filename2\')],\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             [(\'data1\', u\'filename1\'), (\'datay\', u\'filenamey\')],\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             [(\'datax\', u\'filenamex\'), (\'data1\', u\'filename1\')],\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\')],\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\')],\n             [(\'data1\', u\'filename1\')],\n-            True\n+            True,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n-            True\n+            True,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             None,\n-            False\n+            False,\n         )\n         self._test_diff_files(\n             [(\'data1\', u\'filename1\'), (\'datax\', u\'filenamex\')],\n             [],\n-            False\n+            False,\n         )\n         self._test_diff_files(None, None, True)\n         self._test_diff_files([], [], True)\ndiff --git a/buildout.cfg b/buildout.cfg\nindex d30eab7..001d11e 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,7 +1,6 @@\n [buildout]\n extends =\n-    https://raw.github.com/collective/buildout.plonetest/master/test-4.3.x.cfg\n-    plone-4.3.x.cfg\n+    https://raw.github.com/collective/buildout.plonetest/master/test-5.x.cfg\n package-name = Products.CMFDiffTool\n package-extras = [test]\n test-eggs = Pillow\n@@ -19,6 +18,10 @@ allow-hosts =\n     effbot.org\n     dist.plone.org\n \n+[test]\n+eggs +=\n+    ipdb\n+\n [omelette]\n recipe = collective.recipe.omelette\n eggs = ${test:eggs}\n@@ -26,7 +29,7 @@ eggs = ${test:eggs}\n [code-analysis]\n recipe = plone.recipe.codeanalysis [recommended]\n directory = ${buildout:directory}/Products\n-flake8-max-complexity = 20\n+flake8-max-complexity = 22\n # If todo markers are marked as problems, no todomarkers will be written\n # Don\'t show plone.api advertisement\n # Don\'t checko for % formatter\n'

