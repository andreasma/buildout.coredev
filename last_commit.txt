Repository: plone.subrequest


Branch: refs/heads/1.8.x
Date: 2019-12-11T11:04:26+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.subrequest/commit/25359743db7de5bd324b0187293ad171e017df85

Restored to 1.8.4 version.  Kept only the optional Archetypes test dependency.

Plone 4.3, 5,0 and 5.1 do not need the Python 3 and Zope 4 fixes, and may give errors.
Plone 5.2 does not use this branch.
Fixes https://github.com/plone/Products.CMFPlone/issues/2995.

Also kept minor changes, like removing `bootstrap.py`.
The best way to review is probably to checkout the branch and do `git diff 1.8.4`.

Files changed:
A plone/subrequest/usage.txt
M CHANGES.rst
M plone/subrequest/__init__.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M setup.py
D plone/subrequest/usage.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2e3d0ed..1fe3a43 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,17 +4,12 @@ Changelog\n 1.8.7 (unreleased)\n ------------------\n \n-Breaking changes:\n-\n-- *add item here*\n-\n-New features:\n-\n-- *add item here*\n-\n Bug fixes:\n \n-- *add item here*\n+- Restored to 1.8.4 version.  Kept only the optional Archetypes test dependency.\n+  Plone 4.3, 5,0 and 5.1 do not need the Python 3 and Zope 4 fixes, and may give errors.\n+  Plone 5.2 does not use this branch.\n+  Fixes `issue 2995 <https://github.com/plone/Products.CMFPlone/issues/2995>`_.  [maurits]\n \n \n 1.8.6 (2018-09-23)\ndiff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex c9118aa..02be088 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -3,14 +3,14 @@\n from AccessControl import Unauthorized\n from AccessControl.SecurityManagement import setSecurityManager\n from Acquisition import aq_base\n+from cStringIO import StringIO\n from logging import getLogger\n from plone.subrequest.interfaces import ISubRequest\n from plone.subrequest.subresponse import SubResponse\n from posixpath import normpath\n-from six.moves import cStringIO as StringIO\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urljoin\n-from six.moves.urllib.parse import urlsplit\n+from urllib import unquote  # Python2.4 does not have urlparse.unquote\n+from urlparse import urljoin\n+from urlparse import urlsplit\n from zope.component import queryMultiAdapter\n from zope.globalrequest import getRequest\n from zope.globalrequest import setRequest\n@@ -19,18 +19,12 @@\n from zope.site.hooks import setSite\n from ZPublisher.BaseRequest import RequestContainer\n from ZPublisher.mapply import mapply\n+from ZPublisher.Publish import dont_publish_class\n+from ZPublisher.Publish import missing_name\n \n import re\n-import six\n \n \n-try:\n-    from ZPublisher.WSGIPublisher import dont_publish_class\n-    from ZPublisher.WSGIPublisher import missing_name\n-except ImportError:\n-    from ZPublisher.Publish import dont_publish_class\n-    from ZPublisher.Publish import missing_name\n-\n try:\n     from plone.protect.auto import SAFE_WRITE_KEY\n     from plone.protect.interfaces import IDisableCSRFProtection\n@@ -78,8 +72,8 @@ class IDisableCSRFProtection(Interface):\n \n def subrequest(url, root=None, stdout=None, exception_handler=None):\n     assert url is not None, \'You must pass a url\'\n-    if isinstance(url, six.binary_type):\n-        url = url.decode(\'utf-8\')\n+    if isinstance(url, unicode):\n+        url = url.encode(\'utf-8\')\n     _, _, path, query, _ = urlsplit(url)\n     parent_request = getRequest()\n     assert parent_request is not None, \\\n@@ -109,12 +103,10 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n     else:\n         try:\n             parent_url = parent_request[\'URL\']\n-            if isinstance(parent_url, six.binary_type):\n+            if isinstance(parent_url, unicode):\n                 parent_url = parent_url.encode(\'utf-8\')\n             # extra is the hidden part of the url, e.g. a default view\n-            extra = unquote(\n-                parent_url[len(parent_request[\'ACTUAL_URL\']):]\n-            )\n+            extra = unquote(parent_url[len(parent_request[\'ACTUAL_URL\']):])\n         except KeyError:\n             extra = \'\'\n         here = parent_request[\'PATH_INFO\'] + extra\n@@ -166,7 +158,7 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n                 response.setBody(result)\n             for key, value in request.response.cookies.items():\n                 parent_request.response.cookies[key] = value\n-        except Exception as e:\n+        except Exception, e:\n             logger.exception(\'Error handling subrequest to {0}\'.format(url))\n             if exception_handler is not None:\n                 exception_handler(response, e)\ndiff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex 220f6e4..83b2daa 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -2,9 +2,6 @@\n from ZPublisher.HTTPResponse import HTTPResponse\n from ZPublisher.Iterators import IStreamIterator\n \n-import io\n-import six\n-\n \n try:\n     from plone.app.blob.iterators import BlobStreamIterator\n@@ -16,7 +13,7 @@ class BlobStreamIterator:\n class SubResponse(HTTPResponse):\n \n     def setBody(self, body, title=\'\', is_error=0, **kw):\n-        """Accept either a stream iterator or a string as the body."""\n+        """ Accept either a stream iterator or a string as the body """\n         if not IStreamIterator.providedBy(body):\n             return HTTPResponse.setBody(self, body, title, is_error, **kw)\n         assert not self._wrote\n@@ -30,7 +27,7 @@ def setBody(self, body, title=\'\', is_error=0, **kw):\n             return\n         try:\n             while True:\n-                chunk = next(body)\n+                chunk = body.next()\n                 self.write(chunk)\n         except StopIteration:\n             pass\n@@ -39,20 +36,13 @@ def __str__(self):\n         return str(self.body)\n \n     def outputBody(self):\n-        """Output the response body."""\n+        """Output the response body"""\n         if not self._wrote:\n-            body = self.body\n-            if isinstance(self.stdout, io.BufferedIOBase)\\\n-                    and isinstance(body, six.text_type):\n-                body = body.encode(\'utf-8\')\n-            elif isinstance(self.stdout, io.TextIOBase)\\\n-                    and isinstance(body, six.binary_type):\n-                body = body.decode(\'utf-8\')\n-            self.stdout.write(body)\n+            self.stdout.write(self.body)\n             self._wrote = 1\n \n     def getBody(self):\n-        """Return the body, however it was written."""\n+        """ Return the body, however it was written. """\n         if not self._wrote:\n             return self.body\n         stdout = self.stdout\ndiff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py\nindex e954ef8..87b710e 100644\n--- a/plone/subrequest/testing.py\n+++ b/plone/subrequest/testing.py\n@@ -8,8 +8,6 @@\n from Products.Five.browser import BrowserView\n from zope.globalrequest import setRequest\n \n-import six\n-\n \n class CustomException(Exception):\n     """Custom exception"""\n@@ -18,7 +16,7 @@ class CustomException(Exception):\n class CustomExceptionHandler(BrowserView):\n     def __call__(self):\n         self.request.response.setStatus(500)\n-        return "Custom exception occurred: {0}".format(self.context)\n+        return "Custom exception occurred: {0:s}".format(self.context)\n \n \n class CookieView(BrowserView):\n@@ -42,6 +40,8 @@ class URLView(BrowserView):\n \n     def __call__(self):\n         url = self.context.absolute_url()\n+        # The absolute url is expected to be an encoded string, not unicode.\n+        assert isinstance(url, str)\n         return url\n \n \ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex 21eff3d..1828603 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -9,21 +9,9 @@\n import manuel.doctest\n import manuel.testcase\n import manuel.testing\n-\n-import doctest\n-import re\n-import six\n import unittest\n \n \n-try:\n-    from ZServer.HTTPResponse import ZServerHTTPResponse\n-except ImportError:\n-    HAS_ZSERVER = False\n-else:\n-    HAS_ZSERVER = True\n-\n-\n try:\n     from plone.app.blob.iterators import BlobStreamIterator\n except ImportError:\n@@ -41,7 +29,7 @@ def traverse(url):\n \n \n VH_TPL = (\n-    \'/VirtualHostBase/http/nohost:80/{0}/VirtualHostRoot\'\n+    \'/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot\'\n     \'/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}\'\n )\n NOHOST_VH_TPL = \'http://nohost\' + VH_TPL\n@@ -61,7 +49,7 @@ def test_virtual_hosting(self):\n         parts = (\'folder1\', \'folder1A/@@url\')\n         expect = \'folder1A\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -69,7 +57,7 @@ def test_virtual_hosting_relative(self):\n         parts = (\'folder1\', \'folder1A?url=folder1Ai/@@url\')\n         expect = \'folder1A/folder1Ai\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -77,7 +65,7 @@ def test_virtual_hosting_absolute(self):\n         parts = (\'folder1\', \'folder1A?url=/folder1B/@@url\')\n         expect = \'folder1B\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -89,14 +77,14 @@ def test_absolute(self):\n         response = subrequest(\'/folder1/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder1\'\n+            \'http://nohost/folder1\'\n         )\n \n     def test_absolute_query(self):\n         response = subrequest(\'/folder1/folder1A?url=/folder2/folder2A/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder2/folder2A\'\n+            \'http://nohost/folder2/folder2A\'\n         )\n \n     def test_relative(self):\n@@ -104,14 +92,14 @@ def test_relative(self):\n         # /folder1 resolves to /folder1/@@test\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder1/folder1B\'\n+            \'http://nohost/folder1/folder1B\'\n         )\n \n     def test_root(self):\n         response = subrequest(\'/\')\n         self.assertEqual(\n             response.body,\n-            b\'Root: http://nohost\'\n+            \'Root: http://nohost\'\n         )\n \n     def test_virtual_hosting(self):\n@@ -119,7 +107,7 @@ def test_virtual_hosting(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_unicode(self):\n@@ -127,7 +115,7 @@ def test_virtual_hosting_unicode(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_relative(self):\n@@ -135,7 +123,7 @@ def test_virtual_hosting_relative(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_not_found(self):\n@@ -149,7 +137,7 @@ def test_virtual_host_root(self):\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_with_root(self):\n@@ -160,13 +148,13 @@ def test_virtual_host_root_with_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n         )\n \n     def test_virtual_host_space(self):\n         parts = (\'folder2\', \'folder2A/folder2Ai space/@@url\')\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/\'\n+            \'/VirtualHostBase/http/example.org:80/\'\n             \'{0}/VirtualHostRoot/{1}\'.format(*parts)\n         )\n         traverse(url)\n@@ -174,36 +162,36 @@ def test_virtual_host_space(self):\n         response = subrequest(\'/folder2A/@@url\', root=app.folder2)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder2A\'\n+            \'http://example.org/folder2A\'\n         )\n \n     def test_virtual_host_root_at_root(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\'\n             \'_vh_fizz/_vh_buzz/_vh_fizzbuzz\'\n         )\n         traverse(url)\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_at_root_trailing(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\'\n             \'_vh_fizz/_vh_buzz/_vh_fizzbuzz/\'\n         )\n         traverse(url)\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_with_root_double_slash(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/example.org:80/VirtualHostRoot/\'\n             \'_vh_fizz/folder1/folder2//folder2A\'\n         )\n         traverse(url)\n@@ -211,7 +199,7 @@ def test_virtual_host_with_root_double_slash(self):\n         response = subrequest(\'/folder1B/@@url\', root=root)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/folder1/folder1B\'\n+            \'http://example.org/fizz/folder1/folder1B\'\n         )\n \n     def test_subrequest_root(self):\n@@ -219,7 +207,7 @@ def test_subrequest_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder1/folder1A/folder1Ai\'\n+            \'http://nohost/folder1/folder1A/folder1Ai\'\n         )\n \n     def test_site(self):\n@@ -232,29 +220,29 @@ def test_site(self):\n \n     def test_parameter(self):\n         response = subrequest(\'/folder1/@@parameter?foo=bar\')\n-        self.assertTrue(b\'foo\' in response.body)\n+        self.assertTrue(\'foo\' in response.body)\n \n     def test_cookies(self):\n         request = getRequest()\n         request.response.setCookie(\'cookie_name\', \'cookie_value\')\n         response = subrequest(\'/folder1/@@parameter\')\n-        self.assertTrue(b"\'cookie_name\'" in response.body)\n+        self.assertTrue("\'cookie_name\'" in response.body)\n \n     def test_subrequest_cookies(self):\n         response = subrequest(\'/folder1/@@test?url=/folder1/cookie\')\n         self.assertTrue(\'cookie_name\' in response.cookies)\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     def test_stream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n+        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@stream\')\n         self.assertEqual(response.getBody(), \'hello\')\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     def test_filestream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n+        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@filestream\')\n@@ -262,10 +250,10 @@ def test_filestream_iterator(self):\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n         self.assertEqual(response.getBody(), \'Test\')\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, \'requires Archetypes\')\n     def test_blobstream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n+        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@blobstream\')\n@@ -279,27 +267,20 @@ def test_other_variables(self):\n         request[\'VIRTUAL_URL\'] = \'parent\'\n         request[\'URL9\'] = \'parent\'\n         response = subrequest(\'/folder1/@@parameter\')\n-        self.assertTrue(b"\'foo\'" in response.body)\n-        self.assertFalse(b"\'URL9\'" in response.body)\n-        self.assertFalse(b"\'VIRTUAL_URL\'" in response.body)\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+        self.assertTrue("\'foo\'" in response.body)\n+        self.assertFalse("\'URL9\'" in response.body)\n+        self.assertFalse("\'VIRTUAL_URL\'" in response.body)\n \n \n def test_suite():\n     suite = unittest.defaultTestLoader.loadTestsFromName(__name__)\n-    m = manuel.doctest.Manuel(checker=Py23DocChecker())\n+    m = manuel.doctest.Manuel()\n     m += manuel.testcase.MarkerManuel()\n     doctests = manuel.testing.TestSuite(\n         m,\n-        \'usage.rst\',\n+        \'usage.txt\',\n         globs=dict(subrequest=subrequest, traverse=traverse)\n-     )\n+    )\n     # Set the layer on the manuel doctests for now\n     for test in doctests:\n         test.layer = INTEGRATION_TESTING\ndiff --git a/plone/subrequest/usage.rst b/plone/subrequest/usage.txt\nsimilarity index 84%\nrename from plone/subrequest/usage.rst\nrename to plone/subrequest/usage.txt\nindex c9fc9e7..e3dab4d 100644\n--- a/plone/subrequest/usage.rst\n+++ b/plone/subrequest/usage.txt\n@@ -11,12 +11,11 @@ Call ``subrequest(url)``, it returns a response object.\n     >>> from plone.subrequest import subrequest\n     >>> response = subrequest(\'/folder1/@@url\')\n     >>> response.getBody()\n-    b\'http://nohost/folder1\'\n+    \'http://nohost/folder1\'\n \n .. test-case: response-write\n \n ``response.getBody()`` also works for code that calls ``response.write(data)``.\n-This one returns a text/non-byte value.\n \n     >>> response = subrequest(\'/@@response-write\')\n     >>> response.getBody()\n@@ -40,8 +39,7 @@ Some code may call ``response.write(data)``.\n \n In which case you may access response.stdout as file.\n \n-    >>> response.stdout.seek(0, 0) or 0  # Py2 returns None, Py3 returns new position\n-    0\n+    >>> response.stdout.seek(0, 0)\n     >>> list(response.stdout)\n     [\'Some data.\\n\', \'Some more data.\\n\']\n \n@@ -64,8 +62,7 @@ Use ``response.outputBody()`` to ensure the body may be accessed as a file.\n     >>> response.outputBody()\n     >>> response._wrote\n     1\n-    >>> response.stdout.seek(0, 0) or 0  # Py2 returns None, Py3 returns new position\n-    0\n+    >>> response.stdout.seek(0, 0)\n     >>> list(response.stdout)\n     [\'http://nohost/folder1\']\n \n@@ -76,11 +73,10 @@ Relative paths\n \n Relative paths are resolved relative to the parent request\'s location:\n \n-    >>> from plone.subrequest.tests import traverse\n     >>> request = traverse(\'/folder1/@@test\')\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n-    b\'http://nohost/folder1/folder1A\'\n+    \'http://nohost/folder1/folder1A\'\n \n .. test-case: relative-default-view\n \n@@ -91,7 +87,7 @@ This takes account of default view\'s url.\n     True\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n-    b\'http://nohost/folder1/folder1A\'\n+    \'http://nohost/folder1/folder1A\'\n \n Virtual hosting\n ---------------\n@@ -100,10 +96,10 @@ Virtual hosting\n \n When virtual hosting is used, absolute paths are traversed from the virtual host root.\n \n-    >>> request = traverse(\'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\')\n+    >>> request = traverse(\'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\')\n     >>> response = subrequest(\'/folder1A/@@url\')\n     >>> response.getBody()\n-    b\'http://nohost/folder1A\'\n+    \'http://example.org/folder1A\'\n \n Specifying the root\n -------------------\n@@ -115,7 +111,7 @@ You may also set the root object explicitly\n     >>> app = layer[\'app\']\n     >>> response = subrequest(\'/folder1A/@@url\', root=app.folder1)\n     >>> response.getBody()\n-    b\'http://nohost/folder1/folder1A\'\n+    \'http://nohost/folder1/folder1A\'\n \n Error responses\n ---------------\n@@ -142,7 +138,7 @@ Or might raise an error rendered by a custom error view.\n     >>> response.status\n     500\n     >>> response.body\n-    b\'Custom exception occurred: A custom error\'\n+    \'Custom exception occurred: A custom error\'\n \n .. test-case: status-ok\n \ndiff --git a/setup.py b/setup.py\nindex efbfc2b..aa5b6fe 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,7 +13,7 @@\n     description=\'Subrequests for Zope2\',\n     long_description=(\n         open("README.rst").read() + "\\n\\n" +\n-        open(os.path.join(\'plone\', \'subrequest\', \'usage.rst\')).read() +\n+        open(os.path.join(\'plone\', \'subrequest\', \'usage.txt\')).read() +\n         "\\n\\n" +\n         open("CHANGES.rst").read()),\n     classifiers=[\n@@ -27,8 +27,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.6",\n         "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n     ],\n     keywords=\'plone\',\n     author=\'Plone Foundation\',\n@@ -44,7 +44,6 @@\n         # \'Acquisition\',\n         \'five.globalrequest\',\n         \'setuptools\',\n-        \'six\',\n         \'zope.globalrequest\',\n         ],\n     extras_require={\n@@ -55,6 +54,7 @@\n         ],\n         \'archetypes\': [\n             \'plone.app.blob\',\n+\n             # see https://github.com/plone/plone.app.blob/issues/19\n             \'Products.MimetypesRegistry\',\n         ],\n'

Repository: plone.subrequest


Branch: refs/heads/1.8.x
Date: 2019-12-13T09:45:33+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/e1a0f1e56422731ba58550889cb2d972a4c51dd9

Merge pull request #23 from plone/maurits/1.8-without-python3-zope4-fixes

Revert Python 3 and Zope 4 changes on 1.8.x branch

Files changed:
A plone/subrequest/usage.txt
M CHANGES.rst
M plone/subrequest/__init__.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M setup.py
D plone/subrequest/usage.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2e3d0ed..1fe3a43 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,17 +4,12 @@ Changelog\n 1.8.7 (unreleased)\n ------------------\n \n-Breaking changes:\n-\n-- *add item here*\n-\n-New features:\n-\n-- *add item here*\n-\n Bug fixes:\n \n-- *add item here*\n+- Restored to 1.8.4 version.  Kept only the optional Archetypes test dependency.\n+  Plone 4.3, 5,0 and 5.1 do not need the Python 3 and Zope 4 fixes, and may give errors.\n+  Plone 5.2 does not use this branch.\n+  Fixes `issue 2995 <https://github.com/plone/Products.CMFPlone/issues/2995>`_.  [maurits]\n \n \n 1.8.6 (2018-09-23)\ndiff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py\nindex c9118aa..02be088 100644\n--- a/plone/subrequest/__init__.py\n+++ b/plone/subrequest/__init__.py\n@@ -3,14 +3,14 @@\n from AccessControl import Unauthorized\n from AccessControl.SecurityManagement import setSecurityManager\n from Acquisition import aq_base\n+from cStringIO import StringIO\n from logging import getLogger\n from plone.subrequest.interfaces import ISubRequest\n from plone.subrequest.subresponse import SubResponse\n from posixpath import normpath\n-from six.moves import cStringIO as StringIO\n-from six.moves.urllib.parse import unquote\n-from six.moves.urllib.parse import urljoin\n-from six.moves.urllib.parse import urlsplit\n+from urllib import unquote  # Python2.4 does not have urlparse.unquote\n+from urlparse import urljoin\n+from urlparse import urlsplit\n from zope.component import queryMultiAdapter\n from zope.globalrequest import getRequest\n from zope.globalrequest import setRequest\n@@ -19,18 +19,12 @@\n from zope.site.hooks import setSite\n from ZPublisher.BaseRequest import RequestContainer\n from ZPublisher.mapply import mapply\n+from ZPublisher.Publish import dont_publish_class\n+from ZPublisher.Publish import missing_name\n \n import re\n-import six\n \n \n-try:\n-    from ZPublisher.WSGIPublisher import dont_publish_class\n-    from ZPublisher.WSGIPublisher import missing_name\n-except ImportError:\n-    from ZPublisher.Publish import dont_publish_class\n-    from ZPublisher.Publish import missing_name\n-\n try:\n     from plone.protect.auto import SAFE_WRITE_KEY\n     from plone.protect.interfaces import IDisableCSRFProtection\n@@ -78,8 +72,8 @@ class IDisableCSRFProtection(Interface):\n \n def subrequest(url, root=None, stdout=None, exception_handler=None):\n     assert url is not None, \'You must pass a url\'\n-    if isinstance(url, six.binary_type):\n-        url = url.decode(\'utf-8\')\n+    if isinstance(url, unicode):\n+        url = url.encode(\'utf-8\')\n     _, _, path, query, _ = urlsplit(url)\n     parent_request = getRequest()\n     assert parent_request is not None, \\\n@@ -109,12 +103,10 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n     else:\n         try:\n             parent_url = parent_request[\'URL\']\n-            if isinstance(parent_url, six.binary_type):\n+            if isinstance(parent_url, unicode):\n                 parent_url = parent_url.encode(\'utf-8\')\n             # extra is the hidden part of the url, e.g. a default view\n-            extra = unquote(\n-                parent_url[len(parent_request[\'ACTUAL_URL\']):]\n-            )\n+            extra = unquote(parent_url[len(parent_request[\'ACTUAL_URL\']):])\n         except KeyError:\n             extra = \'\'\n         here = parent_request[\'PATH_INFO\'] + extra\n@@ -166,7 +158,7 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):\n                 response.setBody(result)\n             for key, value in request.response.cookies.items():\n                 parent_request.response.cookies[key] = value\n-        except Exception as e:\n+        except Exception, e:\n             logger.exception(\'Error handling subrequest to {0}\'.format(url))\n             if exception_handler is not None:\n                 exception_handler(response, e)\ndiff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py\nindex 220f6e4..83b2daa 100644\n--- a/plone/subrequest/subresponse.py\n+++ b/plone/subrequest/subresponse.py\n@@ -2,9 +2,6 @@\n from ZPublisher.HTTPResponse import HTTPResponse\n from ZPublisher.Iterators import IStreamIterator\n \n-import io\n-import six\n-\n \n try:\n     from plone.app.blob.iterators import BlobStreamIterator\n@@ -16,7 +13,7 @@ class BlobStreamIterator:\n class SubResponse(HTTPResponse):\n \n     def setBody(self, body, title=\'\', is_error=0, **kw):\n-        """Accept either a stream iterator or a string as the body."""\n+        """ Accept either a stream iterator or a string as the body """\n         if not IStreamIterator.providedBy(body):\n             return HTTPResponse.setBody(self, body, title, is_error, **kw)\n         assert not self._wrote\n@@ -30,7 +27,7 @@ def setBody(self, body, title=\'\', is_error=0, **kw):\n             return\n         try:\n             while True:\n-                chunk = next(body)\n+                chunk = body.next()\n                 self.write(chunk)\n         except StopIteration:\n             pass\n@@ -39,20 +36,13 @@ def __str__(self):\n         return str(self.body)\n \n     def outputBody(self):\n-        """Output the response body."""\n+        """Output the response body"""\n         if not self._wrote:\n-            body = self.body\n-            if isinstance(self.stdout, io.BufferedIOBase)\\\n-                    and isinstance(body, six.text_type):\n-                body = body.encode(\'utf-8\')\n-            elif isinstance(self.stdout, io.TextIOBase)\\\n-                    and isinstance(body, six.binary_type):\n-                body = body.decode(\'utf-8\')\n-            self.stdout.write(body)\n+            self.stdout.write(self.body)\n             self._wrote = 1\n \n     def getBody(self):\n-        """Return the body, however it was written."""\n+        """ Return the body, however it was written. """\n         if not self._wrote:\n             return self.body\n         stdout = self.stdout\ndiff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py\nindex e954ef8..87b710e 100644\n--- a/plone/subrequest/testing.py\n+++ b/plone/subrequest/testing.py\n@@ -8,8 +8,6 @@\n from Products.Five.browser import BrowserView\n from zope.globalrequest import setRequest\n \n-import six\n-\n \n class CustomException(Exception):\n     """Custom exception"""\n@@ -18,7 +16,7 @@ class CustomException(Exception):\n class CustomExceptionHandler(BrowserView):\n     def __call__(self):\n         self.request.response.setStatus(500)\n-        return "Custom exception occurred: {0}".format(self.context)\n+        return "Custom exception occurred: {0:s}".format(self.context)\n \n \n class CookieView(BrowserView):\n@@ -42,6 +40,8 @@ class URLView(BrowserView):\n \n     def __call__(self):\n         url = self.context.absolute_url()\n+        # The absolute url is expected to be an encoded string, not unicode.\n+        assert isinstance(url, str)\n         return url\n \n \ndiff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py\nindex 21eff3d..1828603 100644\n--- a/plone/subrequest/tests.py\n+++ b/plone/subrequest/tests.py\n@@ -9,21 +9,9 @@\n import manuel.doctest\n import manuel.testcase\n import manuel.testing\n-\n-import doctest\n-import re\n-import six\n import unittest\n \n \n-try:\n-    from ZServer.HTTPResponse import ZServerHTTPResponse\n-except ImportError:\n-    HAS_ZSERVER = False\n-else:\n-    HAS_ZSERVER = True\n-\n-\n try:\n     from plone.app.blob.iterators import BlobStreamIterator\n except ImportError:\n@@ -41,7 +29,7 @@ def traverse(url):\n \n \n VH_TPL = (\n-    \'/VirtualHostBase/http/nohost:80/{0}/VirtualHostRoot\'\n+    \'/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot\'\n     \'/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}\'\n )\n NOHOST_VH_TPL = \'http://nohost\' + VH_TPL\n@@ -61,7 +49,7 @@ def test_virtual_hosting(self):\n         parts = (\'folder1\', \'folder1A/@@url\')\n         expect = \'folder1A\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -69,7 +57,7 @@ def test_virtual_hosting_relative(self):\n         parts = (\'folder1\', \'folder1A?url=folder1Ai/@@url\')\n         expect = \'folder1A/folder1Ai\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -77,7 +65,7 @@ def test_virtual_hosting_absolute(self):\n         parts = (\'folder1\', \'folder1A?url=/folder1B/@@url\')\n         expect = \'folder1B\'\n         url = NOHOST_VH_TPL.format(*parts)\n-        expect_url = \'http://nohost/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n+        expect_url = \'http://example.org/fizz/buzz/fizzbuzz/{0}\'.format(expect)\n         self.browser.open(url)\n         self.assertEqual(self.browser.contents, expect_url)\n \n@@ -89,14 +77,14 @@ def test_absolute(self):\n         response = subrequest(\'/folder1/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder1\'\n+            \'http://nohost/folder1\'\n         )\n \n     def test_absolute_query(self):\n         response = subrequest(\'/folder1/folder1A?url=/folder2/folder2A/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder2/folder2A\'\n+            \'http://nohost/folder2/folder2A\'\n         )\n \n     def test_relative(self):\n@@ -104,14 +92,14 @@ def test_relative(self):\n         # /folder1 resolves to /folder1/@@test\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder1/folder1B\'\n+            \'http://nohost/folder1/folder1B\'\n         )\n \n     def test_root(self):\n         response = subrequest(\'/\')\n         self.assertEqual(\n             response.body,\n-            b\'Root: http://nohost\'\n+            \'Root: http://nohost\'\n         )\n \n     def test_virtual_hosting(self):\n@@ -119,7 +107,7 @@ def test_virtual_hosting(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_unicode(self):\n@@ -127,7 +115,7 @@ def test_virtual_hosting_unicode(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1A\'\n         )\n \n     def test_virtual_hosting_relative(self):\n@@ -135,7 +123,7 @@ def test_virtual_hosting_relative(self):\n         response = subrequest(url)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_not_found(self):\n@@ -149,7 +137,7 @@ def test_virtual_host_root(self):\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_with_root(self):\n@@ -160,13 +148,13 @@ def test_virtual_host_root_with_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1A/folder1Ai\'\n         )\n \n     def test_virtual_host_space(self):\n         parts = (\'folder2\', \'folder2A/folder2Ai space/@@url\')\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/\'\n+            \'/VirtualHostBase/http/example.org:80/\'\n             \'{0}/VirtualHostRoot/{1}\'.format(*parts)\n         )\n         traverse(url)\n@@ -174,36 +162,36 @@ def test_virtual_host_space(self):\n         response = subrequest(\'/folder2A/@@url\', root=app.folder2)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder2A\'\n+            \'http://example.org/folder2A\'\n         )\n \n     def test_virtual_host_root_at_root(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\'\n             \'_vh_fizz/_vh_buzz/_vh_fizzbuzz\'\n         )\n         traverse(url)\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_root_at_root_trailing(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\'\n             \'_vh_fizz/_vh_buzz/_vh_fizzbuzz/\'\n         )\n         traverse(url)\n         response = subrequest(\'/folder1B/@@url\')\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/buzz/fizzbuzz/folder1B\'\n+            \'http://example.org/fizz/buzz/fizzbuzz/folder1B\'\n         )\n \n     def test_virtual_host_with_root_double_slash(self):\n         url = (\n-            \'/VirtualHostBase/http/nohost:80/VirtualHostRoot/\'\n+            \'/VirtualHostBase/http/example.org:80/VirtualHostRoot/\'\n             \'_vh_fizz/folder1/folder2//folder2A\'\n         )\n         traverse(url)\n@@ -211,7 +199,7 @@ def test_virtual_host_with_root_double_slash(self):\n         response = subrequest(\'/folder1B/@@url\', root=root)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/fizz/folder1/folder1B\'\n+            \'http://example.org/fizz/folder1/folder1B\'\n         )\n \n     def test_subrequest_root(self):\n@@ -219,7 +207,7 @@ def test_subrequest_root(self):\n         response = subrequest(\'/folder1Ai/@@url\', root=app.folder1.folder1A)\n         self.assertEqual(\n             response.body,\n-            b\'http://nohost/folder1/folder1A/folder1Ai\'\n+            \'http://nohost/folder1/folder1A/folder1Ai\'\n         )\n \n     def test_site(self):\n@@ -232,29 +220,29 @@ def test_site(self):\n \n     def test_parameter(self):\n         response = subrequest(\'/folder1/@@parameter?foo=bar\')\n-        self.assertTrue(b\'foo\' in response.body)\n+        self.assertTrue(\'foo\' in response.body)\n \n     def test_cookies(self):\n         request = getRequest()\n         request.response.setCookie(\'cookie_name\', \'cookie_value\')\n         response = subrequest(\'/folder1/@@parameter\')\n-        self.assertTrue(b"\'cookie_name\'" in response.body)\n+        self.assertTrue("\'cookie_name\'" in response.body)\n \n     def test_subrequest_cookies(self):\n         response = subrequest(\'/folder1/@@test?url=/folder1/cookie\')\n         self.assertTrue(\'cookie_name\' in response.cookies)\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     def test_stream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n+        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@stream\')\n         self.assertEqual(response.getBody(), \'hello\')\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     def test_filestream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n+        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@filestream\')\n@@ -262,10 +250,10 @@ def test_filestream_iterator(self):\n         self.assertTrue(isinstance(response.stdout, filestream_iterator))\n         self.assertEqual(response.getBody(), \'Test\')\n \n-    @unittest.skipUnless(HAS_ZSERVER, \'needs ZServer\')\n     @unittest.skipUnless(HAS_BLOBSTREAM_ITERATOR, \'requires Archetypes\')\n     def test_blobstream_iterator(self):\n         # Only a ZServerHTTPResponse is IStreamIterator Aware\n+        from ZServer.HTTPResponse import ZServerHTTPResponse\n         request = getRequest()\n         request.response.__class__ = ZServerHTTPResponse\n         response = subrequest(\'/@@blobstream\')\n@@ -279,27 +267,20 @@ def test_other_variables(self):\n         request[\'VIRTUAL_URL\'] = \'parent\'\n         request[\'URL9\'] = \'parent\'\n         response = subrequest(\'/folder1/@@parameter\')\n-        self.assertTrue(b"\'foo\'" in response.body)\n-        self.assertFalse(b"\'URL9\'" in response.body)\n-        self.assertFalse(b"\'VIRTUAL_URL\'" in response.body)\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+        self.assertTrue("\'foo\'" in response.body)\n+        self.assertFalse("\'URL9\'" in response.body)\n+        self.assertFalse("\'VIRTUAL_URL\'" in response.body)\n \n \n def test_suite():\n     suite = unittest.defaultTestLoader.loadTestsFromName(__name__)\n-    m = manuel.doctest.Manuel(checker=Py23DocChecker())\n+    m = manuel.doctest.Manuel()\n     m += manuel.testcase.MarkerManuel()\n     doctests = manuel.testing.TestSuite(\n         m,\n-        \'usage.rst\',\n+        \'usage.txt\',\n         globs=dict(subrequest=subrequest, traverse=traverse)\n-     )\n+    )\n     # Set the layer on the manuel doctests for now\n     for test in doctests:\n         test.layer = INTEGRATION_TESTING\ndiff --git a/plone/subrequest/usage.rst b/plone/subrequest/usage.txt\nsimilarity index 84%\nrename from plone/subrequest/usage.rst\nrename to plone/subrequest/usage.txt\nindex c9fc9e7..e3dab4d 100644\n--- a/plone/subrequest/usage.rst\n+++ b/plone/subrequest/usage.txt\n@@ -11,12 +11,11 @@ Call ``subrequest(url)``, it returns a response object.\n     >>> from plone.subrequest import subrequest\n     >>> response = subrequest(\'/folder1/@@url\')\n     >>> response.getBody()\n-    b\'http://nohost/folder1\'\n+    \'http://nohost/folder1\'\n \n .. test-case: response-write\n \n ``response.getBody()`` also works for code that calls ``response.write(data)``.\n-This one returns a text/non-byte value.\n \n     >>> response = subrequest(\'/@@response-write\')\n     >>> response.getBody()\n@@ -40,8 +39,7 @@ Some code may call ``response.write(data)``.\n \n In which case you may access response.stdout as file.\n \n-    >>> response.stdout.seek(0, 0) or 0  # Py2 returns None, Py3 returns new position\n-    0\n+    >>> response.stdout.seek(0, 0)\n     >>> list(response.stdout)\n     [\'Some data.\\n\', \'Some more data.\\n\']\n \n@@ -64,8 +62,7 @@ Use ``response.outputBody()`` to ensure the body may be accessed as a file.\n     >>> response.outputBody()\n     >>> response._wrote\n     1\n-    >>> response.stdout.seek(0, 0) or 0  # Py2 returns None, Py3 returns new position\n-    0\n+    >>> response.stdout.seek(0, 0)\n     >>> list(response.stdout)\n     [\'http://nohost/folder1\']\n \n@@ -76,11 +73,10 @@ Relative paths\n \n Relative paths are resolved relative to the parent request\'s location:\n \n-    >>> from plone.subrequest.tests import traverse\n     >>> request = traverse(\'/folder1/@@test\')\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n-    b\'http://nohost/folder1/folder1A\'\n+    \'http://nohost/folder1/folder1A\'\n \n .. test-case: relative-default-view\n \n@@ -91,7 +87,7 @@ This takes account of default view\'s url.\n     True\n     >>> response = subrequest(\'folder1A/@@url\')\n     >>> response.getBody()\n-    b\'http://nohost/folder1/folder1A\'\n+    \'http://nohost/folder1/folder1A\'\n \n Virtual hosting\n ---------------\n@@ -100,10 +96,10 @@ Virtual hosting\n \n When virtual hosting is used, absolute paths are traversed from the virtual host root.\n \n-    >>> request = traverse(\'/VirtualHostBase/http/nohost:80/folder1/VirtualHostRoot/\')\n+    >>> request = traverse(\'/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/\')\n     >>> response = subrequest(\'/folder1A/@@url\')\n     >>> response.getBody()\n-    b\'http://nohost/folder1A\'\n+    \'http://example.org/folder1A\'\n \n Specifying the root\n -------------------\n@@ -115,7 +111,7 @@ You may also set the root object explicitly\n     >>> app = layer[\'app\']\n     >>> response = subrequest(\'/folder1A/@@url\', root=app.folder1)\n     >>> response.getBody()\n-    b\'http://nohost/folder1/folder1A\'\n+    \'http://nohost/folder1/folder1A\'\n \n Error responses\n ---------------\n@@ -142,7 +138,7 @@ Or might raise an error rendered by a custom error view.\n     >>> response.status\n     500\n     >>> response.body\n-    b\'Custom exception occurred: A custom error\'\n+    \'Custom exception occurred: A custom error\'\n \n .. test-case: status-ok\n \ndiff --git a/setup.py b/setup.py\nindex efbfc2b..aa5b6fe 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,7 +13,7 @@\n     description=\'Subrequests for Zope2\',\n     long_description=(\n         open("README.rst").read() + "\\n\\n" +\n-        open(os.path.join(\'plone\', \'subrequest\', \'usage.rst\')).read() +\n+        open(os.path.join(\'plone\', \'subrequest\', \'usage.txt\')).read() +\n         "\\n\\n" +\n         open("CHANGES.rst").read()),\n     classifiers=[\n@@ -27,8 +27,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.6",\n         "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n     ],\n     keywords=\'plone\',\n     author=\'Plone Foundation\',\n@@ -44,7 +44,6 @@\n         # \'Acquisition\',\n         \'five.globalrequest\',\n         \'setuptools\',\n-        \'six\',\n         \'zope.globalrequest\',\n         ],\n     extras_require={\n@@ -55,6 +54,7 @@\n         ],\n         \'archetypes\': [\n             \'plone.app.blob\',\n+\n             # see https://github.com/plone/plone.app.blob/issues/19\n             \'Products.MimetypesRegistry\',\n         ],\n'

