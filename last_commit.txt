Repository: plone.caching


Branch: refs/heads/master
Date: 2018-05-25T09:54:31+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.caching/commit/03833575dfa4089d65d6d182c8113c8e8cd3fcb1

fix caching and tests in python 3

Files changed:
M plone/caching/tests/test_hooks.py
M plone/caching/utils.py

b"diff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py\nindex a64490e..1d93d42 100644\n--- a/plone/caching/tests/test_hooks.py\n+++ b/plone/caching/tests/test_hooks.py\n@@ -32,7 +32,7 @@ class DummyView(object):\n \n class DummyResource(object):\n     def index_html(self):\n-        return 'binary data'\n+        return b'binary data'\n \n \n class DummyResponse(dict):\n@@ -922,12 +922,12 @@ def interceptResponse(self, rulename, response):\n         try:\n             intercept(DummyEvent(request))\n             self.fail()\n-        except Intercepted, e:\n+        except Intercepted as e:\n             self.assertEqual(u'dummy', e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n-        except Exception, e:\n+        except Exception as e:\n             self.fail(str(e))\n \n         self.assertEqual({'PUBLISHED': view}, dict(request))\n@@ -977,12 +977,12 @@ def interceptResponse(self, rulename, response):\n         try:\n             intercept(DummyEvent(request))\n             self.fail()\n-        except Intercepted, e:\n+        except Intercepted as e:\n             self.assertEqual(u'dummy', e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n-        except Exception, e:\n+        except Exception as e:\n             self.fail(str(e))\n \n         self.assertEqual({'PUBLISHED': view}, dict(request))\n@@ -1031,12 +1031,12 @@ def interceptResponse(self, rulename, response):\n         try:\n             intercept(DummyEvent(request))\n             self.fail()\n-        except Intercepted, e:\n+        except Intercepted as e:\n             self.assertEqual(u'dummy', e.responseBody)\n             self.assertEqual(200, e.status)\n             self.assertEqual(200, request.response.status)\n             self.assertEqual(True, request.response.locked)\n-        except Exception, e:\n+        except Exception as e:\n             self.fail(str(e))\n \n         self.assertEqual({'PUBLISHED': resource.index_html}, dict(request))\ndiff --git a/plone/caching/utils.py b/plone/caching/utils.py\nindex f07def5..58a8cc0 100644\n--- a/plone/caching/utils.py\n+++ b/plone/caching/utils.py\n@@ -85,7 +85,7 @@ def findOperation(request):\n \n     # If we get a method, try to look up its class\n     if isinstance(published, types.MethodType):\n-        published = getattr(published, 'im_self', published)\n+        published = getattr(published, '__self__', published)\n \n     registry = queryUtility(IRegistry)\n     if registry is None:\n"

Repository: plone.caching


Branch: refs/heads/master
Date: 2018-09-17T23:45:34+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/c66eac1487562c12ff42cfb4ed99195188b845c1

Fix more tests

Files changed:
M plone/caching/tests/test_operations.py

b"diff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py\nindex 73472d4..3c0ce14 100644\n--- a/plone/caching/tests/test_operations.py\n+++ b/plone/caching/tests/test_operations.py\n@@ -61,7 +61,7 @@ def test_operations_list_not_set(self):\n \n         self.registry.records[\n             '{0}.operations'.format(Chain.prefix)\n-        ] = Record(field.List())\n+        ] = Record(field.List(value_type=field.Text()))\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -78,7 +78,7 @@ def test_operations_empty(self):\n \n         self.registry.records[\n             '{0}.operations'.format(Chain.prefix)\n-        ] = Record(field.List(), [])\n+        ] = Record(field.List(value_type=field.Text()), [])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -95,7 +95,7 @@ def test_chained_operations_not_found(self):\n \n         self.registry.records[\n             '{0}.operations'.format(Chain.prefix)\n-        ] = Record(field.List(), ['op1'])\n+        ] = Record(field.List(value_type=field.Text()), [u'op1'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -109,7 +109,7 @@ def test_chained_operations_not_found(self):\n     def test_multiple_operations_one_found(self):\n         self.registry.records[\n             '{0}.operations'.format(Chain.prefix)\n-        ] = Record(field.List(), ['op1', 'op2'])\n+        ] = Record(field.List(value_type=field.Text()), [u'op1', u'op2'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -154,7 +154,7 @@ def modifyResponse(self, rulename, response):\n     def test_multiple_operations_multiple_found(self):\n         self.registry.records[\n             '{0}.operations'.format(Chain.prefix)\n-        ] = Record(field.List(), ['op1', 'op2'])\n+        ] = Record(field.List(value_type=field.Text()), [u'op1', u'op2'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n"

Repository: plone.caching


Branch: refs/heads/master
Date: 2018-09-17T23:45:49+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/b17a1b939d3cf6b055f4b6fbfb05b1eb1919226b

Added a changelog line

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex a4aa129..748681e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,7 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix caching and tests in python 3 [ale-rt, pbauer]\n \n \n 1.1.2 (2016-09-16)\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2018-09-18T15:28:16+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.caching/commit/78bd33d548b461a47258ca68631b52c4af677d6c

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 748681e..92ab372 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,11 +10,13 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Add support for Python 3.\n+  [pbauer]\n \n Bug fixes:\n \n-- Fix caching and tests in python 3 [ale-rt, pbauer]\n+- Fix caching and tests in python 3\n+  [ale-rt, pbauer]\n \n \n 1.1.2 (2016-09-16)\ndiff --git a/setup.py b/setup.py\nindex e4c88ec..c95128e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -24,9 +24,12 @@ def read(*rnames):\n           "Framework :: Plone",\n           "Framework :: Plone :: 5.0",\n           "Framework :: Plone :: 5.1",\n+          "Framework :: Plone :: 5.2",\n           "License :: OSI Approved :: GNU General Public License (GPL)",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n           "Topic :: Software Development :: Libraries :: Python Modules",\n           ],\n       keywords=\'plone http caching\',\n'

Repository: plone.caching


Branch: refs/heads/master
Date: 2018-09-19T14:15:09+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.caching/commit/b4e7d2f54b7c6556b60cb816240cc9c42776c43d

Merge pull request #5 from plone/python3

fix caching and tests in python 3

Files changed:
M CHANGES.rst
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_operations.py
M plone/caching/utils.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex a4aa129..92ab372 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,11 +10,13 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Add support for Python 3.\n+  [pbauer]\n \n Bug fixes:\n \n-- *add item here*\n+- Fix caching and tests in python 3\n+  [ale-rt, pbauer]\n \n \n 1.1.2 (2016-09-16)\ndiff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py\nindex a64490e..1d93d42 100644\n--- a/plone/caching/tests/test_hooks.py\n+++ b/plone/caching/tests/test_hooks.py\n@@ -32,7 +32,7 @@ class DummyView(object):\n \n class DummyResource(object):\n     def index_html(self):\n-        return \'binary data\'\n+        return b\'binary data\'\n \n \n class DummyResponse(dict):\n@@ -922,12 +922,12 @@ def interceptResponse(self, rulename, response):\n         try:\n             intercept(DummyEvent(request))\n             self.fail()\n-        except Intercepted, e:\n+        except Intercepted as e:\n             self.assertEqual(u\'dummy\', e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n-        except Exception, e:\n+        except Exception as e:\n             self.fail(str(e))\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n@@ -977,12 +977,12 @@ def interceptResponse(self, rulename, response):\n         try:\n             intercept(DummyEvent(request))\n             self.fail()\n-        except Intercepted, e:\n+        except Intercepted as e:\n             self.assertEqual(u\'dummy\', e.responseBody)\n             self.assertEqual(304, e.status)\n             self.assertEqual(304, request.response.status)\n             self.assertEqual(True, request.response.locked)\n-        except Exception, e:\n+        except Exception as e:\n             self.fail(str(e))\n \n         self.assertEqual({\'PUBLISHED\': view}, dict(request))\n@@ -1031,12 +1031,12 @@ def interceptResponse(self, rulename, response):\n         try:\n             intercept(DummyEvent(request))\n             self.fail()\n-        except Intercepted, e:\n+        except Intercepted as e:\n             self.assertEqual(u\'dummy\', e.responseBody)\n             self.assertEqual(200, e.status)\n             self.assertEqual(200, request.response.status)\n             self.assertEqual(True, request.response.locked)\n-        except Exception, e:\n+        except Exception as e:\n             self.fail(str(e))\n \n         self.assertEqual({\'PUBLISHED\': resource.index_html}, dict(request))\ndiff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py\nindex 73472d4..3c0ce14 100644\n--- a/plone/caching/tests/test_operations.py\n+++ b/plone/caching/tests/test_operations.py\n@@ -61,7 +61,7 @@ def test_operations_list_not_set(self):\n \n         self.registry.records[\n             \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List())\n+        ] = Record(field.List(value_type=field.Text()))\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -78,7 +78,7 @@ def test_operations_empty(self):\n \n         self.registry.records[\n             \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(), [])\n+        ] = Record(field.List(value_type=field.Text()), [])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -95,7 +95,7 @@ def test_chained_operations_not_found(self):\n \n         self.registry.records[\n             \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(), [\'op1\'])\n+        ] = Record(field.List(value_type=field.Text()), [u\'op1\'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -109,7 +109,7 @@ def test_chained_operations_not_found(self):\n     def test_multiple_operations_one_found(self):\n         self.registry.records[\n             \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(), [\'op1\', \'op2\'])\n+        ] = Record(field.List(value_type=field.Text()), [u\'op1\', u\'op2\'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\n@@ -154,7 +154,7 @@ def modifyResponse(self, rulename, response):\n     def test_multiple_operations_multiple_found(self):\n         self.registry.records[\n             \'{0}.operations\'.format(Chain.prefix)\n-        ] = Record(field.List(), [\'op1\', \'op2\'])\n+        ] = Record(field.List(value_type=field.Text()), [u\'op1\', u\'op2\'])\n \n         view = DummyView()\n         request = DummyRequest(view, DummyResponse())\ndiff --git a/plone/caching/utils.py b/plone/caching/utils.py\nindex f07def5..58a8cc0 100644\n--- a/plone/caching/utils.py\n+++ b/plone/caching/utils.py\n@@ -85,7 +85,7 @@ def findOperation(request):\n \n     # If we get a method, try to look up its class\n     if isinstance(published, types.MethodType):\n-        published = getattr(published, \'im_self\', published)\n+        published = getattr(published, \'__self__\', published)\n \n     registry = queryUtility(IRegistry)\n     if registry is None:\ndiff --git a/setup.py b/setup.py\nindex e4c88ec..c95128e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -24,9 +24,12 @@ def read(*rnames):\n           "Framework :: Plone",\n           "Framework :: Plone :: 5.0",\n           "Framework :: Plone :: 5.1",\n+          "Framework :: Plone :: 5.2",\n           "License :: OSI Approved :: GNU General Public License (GPL)",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n+          "Programming Language :: Python :: 3.6",\n+          "Programming Language :: Python :: 3.7",\n           "Topic :: Software Development :: Libraries :: Python Modules",\n           ],\n       keywords=\'plone http caching\',\n'

