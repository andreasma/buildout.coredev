Repository: plone.app.registry


Branch: refs/heads/master
Date: 2018-06-19T10:32:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.registry/commit/a3f04df98efe85e48dd601dba0625396506172ed

added a pragmatic XML exporter for registry records

Files changed:
A plone/app/registry/browser/exportxml.py
A plone/app/registry/browser/templates/exportxml.pt
M CHANGES.rst
M plone/app/registry/browser/configure.zcml
M plone/app/registry/browser/templates/records.pt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1b21f3f..a075242 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Added a pragmatic XML exporter for registry records in a format meant to be used in add-ons or policy profiles.\n+  [jensens]\n \n Bug fixes:\n \ndiff --git a/plone/app/registry/browser/configure.zcml b/plone/app/registry/browser/configure.zcml\nindex 71f7a21..a1f5b22 100644\n--- a/plone/app/registry/browser/configure.zcml\n+++ b/plone/app/registry/browser/configure.zcml\n@@ -6,6 +6,11 @@\n     <include package="plone.app.z3cform" />\n     <include package="plone.autoform" />\n \n+    <browser:resourceDirectory\n+        name="plone.app.registry"\n+        directory="resources"\n+        />\n+\n     <browser:defaultView\n         for="plone.registry.interfaces.IRegistry"\n         name="configuration_registry"\n@@ -34,9 +39,11 @@\n         permission="cmf.ManagePortal"\n         />\n \n-    <browser:resourceDirectory\n-        name="plone.app.registry"\n-        directory="resources"\n+    <browser:page\n+        for="plone.registry.interfaces.IRegistry"\n+        name="configuration_registry_export_xml"\n+        class=".exportxml.RegistryExporterView"\n+        permission="cmf.ManagePortal"\n         />\n \n </configure>\ndiff --git a/plone/app/registry/browser/exportxml.py b/plone/app/registry/browser/exportxml.py\nnew file mode 100644\nindex 0000000..4fccfd4\n--- /dev/null\n+++ b/plone/app/registry/browser/exportxml.py\n@@ -0,0 +1,138 @@\n+# -*- coding: utf-8 -*-\n+from lxml import etree\n+from plone.registry.interfaces import IRegistry\n+from Products.Five import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component import getUtility\n+\n+import os\n+\n+_current_dir = os.path.dirname(__file__)\n+\n+\n+def _sort_first_lower(key):\n+    return key[0].lower()\n+\n+\n+class RegistryExporterView(BrowserView):\n+    """this view make sane exports of the registry.\n+\n+    Main goal is to export in a way, that the output can be reused as\n+    best practive settings\n+    """\n+\n+    template = ViewPageTemplateFile(\n+        os.path.join(_current_dir, \'templates\', \'exportxml.pt\')\n+    )\n+\n+    def __call__(self):\n+        interface = self.request.form.get(\'interface\', None)\n+        name = self.request.form.get(\'name\', None)\n+        if not interface and not name:\n+            return self.template()\n+        return self.export(sinterface=interface, sname=name)\n+\n+    def interfaces(self):\n+        prefixes = []\n+        registry = getUtility(IRegistry)\n+        baseurl = \'{0}/@@configuration_registry_export_xml?interface=\'.format(\n+            self.context.absolute_url()\n+        )\n+        for record in registry.records.values():\n+            if record.interfaceName is None:\n+                continue\n+            name = record.interfaceName\n+            url = \'{0}{1}\'.format(baseurl, record.interfaceName)\n+            pair = (name, url)\n+            if pair not in prefixes:\n+                prefixes.append(pair)\n+\n+        return sorted(prefixes, key=_sort_first_lower)\n+\n+    def prefixes(self):\n+        prefixes = []\n+        registry = getUtility(IRegistry)\n+        baseurl = \'{0}/@@configuration_registry_export_xml?\'.format(\n+            self.context.absolute_url()\n+        )\n+        for record in registry.records.values():\n+            if record.interfaceName == record.__name__:\n+                continue\n+\n+            def add_split(part):\n+                url = \'{0}name={1}\'.format(baseurl, part)\n+                pair = (part, url)\n+                if pair not in prefixes:\n+                    prefixes.append(pair)\n+                if part.rfind(\'/\') > part.rfind(\'.\'):\n+                    new_parts = part.rsplit(\'/\', 1)\n+                else:\n+                    new_parts = part.rsplit(\'.\', 1)\n+                if len(new_parts) > 1:\n+                    add_split(new_parts[0])\n+\n+            add_split(record.__name__)\n+        return sorted(prefixes, key=_sort_first_lower)\n+\n+    def export(self, sinterface=None, sname=None):\n+        registry = getUtility(IRegistry)\n+        root = etree.Element(\'registry\')\n+        values = {}  # full prefix to valuerecord\n+        interface2values = {}\n+        interface2prefix = {}\n+        for record in registry.records.values():\n+            if sinterface and sinterface != record.interfaceName:\n+                continue\n+            if sname and not record.__name__.startswith(sname):\n+                continue\n+            prefix, value_key = record.__name__.rsplit(\'.\', 1)\n+            xmlvalue = etree.Element(\'value\')\n+            if record.value is None:\n+                continue\n+            if isinstance(record.value, (list, tuple)):\n+                for element in record.value:\n+                    xmlel = etree.SubElement(xmlvalue, \'element\')\n+                    xmlel.text = element\n+            elif isinstance(record.value, bool):\n+                xmlvalue.text = \'True\' if record.value else \'False\'\n+            elif isinstance(record.value, basestring):\n+                xmlvalue.text = record.value\n+            else:\n+                xmlvalue.text = str(record.value)\n+\n+            if record.interfaceName:\n+                xmlvalue.attrib[\'key\'] = value_key\n+                if record.interfaceName not in interface2values:\n+                    interface2values[record.interfaceName] = []\n+                interface2values[record.interfaceName].append(record.__name__)\n+                interface2prefix[record.interfaceName] = prefix\n+            values[record.__name__] = xmlvalue\n+\n+        for ifname in sorted(interface2values):\n+            xmlrecord = etree.SubElement(root, \'records\')\n+            xmlrecord.attrib[\'interface\'] = ifname\n+            xmlrecord.attrib[\'prefix\'] = interface2prefix[ifname]\n+            for value in sorted(interface2values[ifname]):\n+                xmlrecord.append(values.pop(value))\n+        for name, xmlvalue in values.items():\n+            xmlrecord = etree.SubElement(root, \'records\')\n+            xmlrecord.attrib[\'prefix\'] = name\n+            xmlrecord.append(xmlvalue)\n+\n+        self.request.response.setHeader(\'Content-Type\', \'text/xml\')\n+        filename = \'\'\n+        if sinterface:\n+            filename += sinterface\n+        if sinterface and sname:\n+            filename += \'_-_\'\n+        if sname:\n+            filename += sname\n+        self.request.response.setHeader(\n+            \'Content-Disposition\',\n+            \'attachment; filename={0}.xml\'.format(filename))\n+        return etree.tostring(\n+            root,\n+            pretty_print=True,\n+            xml_declaration=True,\n+            encoding=\'UTF-8\'\n+        )\ndiff --git a/plone/app/registry/browser/templates/exportxml.pt b/plone/app/registry/browser/templates/exportxml.pt\nnew file mode 100644\nindex 0000000..168620f\n--- /dev/null\n+++ b/plone/app/registry/browser/templates/exportxml.pt\n@@ -0,0 +1,25 @@\n+<tal>\n+    <h3 i18n:translate="registry_export_parts_heading">Export parts</h3>\n+    <p i18n:translate="registry_export_parts_text">\n+      Download of a XML-file optimized to be used in a GenericSetup profile of an add-on or policy profile.\n+      It contains only the selected parts.\n+    </p>\n+\n+    <div class="pat-autotoc autotabs"\n+         data-pat-autotoc="levels: h3; section: div.exporttab; className: autotabs">\n+        <div class="exporttab"\n+             id="export-section-interfaces">\n+          <h3 i18n:translate="registry_export_parts_label_iface" id="h3-interfaces">by Interface</h3>\n+          <ul class="collapse_interfaces hidden">\n+            <li tal:repeat="prefix python:view.interfaces()"><a target="_blank" href="${python:prefix[1]}">${python:prefix[0]}</a></li>\n+          </ul>\n+        </div>\n+        <div class="exporttab"\n+             id="export-section-prefixes">\n+          <h3 i18n:translate="registry_export_parts_label_prefix" id="h3-prefixes">by Prefix</h3>\n+          <ul>\n+            <li tal:repeat="prefix python:view.prefixes()"><a target="_blank" href="${python:prefix[1]}">${python:prefix[0]}</a></li>\n+          </ul>\n+        </div>\n+    </div>\n+</tal>\ndiff --git a/plone/app/registry/browser/templates/records.pt b/plone/app/registry/browser/templates/records.pt\nindex 140f72c..0008417 100644\n--- a/plone/app/registry/browser/templates/records.pt\n+++ b/plone/app/registry/browser/templates/records.pt\n@@ -132,6 +132,8 @@\n               <button type="submit" i18n:translate="export_button">Export Now</button>\n             </div>\n           </form>\n+          <hr />\n+          <div tal:replace="structure python:context.restrictedTraverse(\'@@configuration_registry_export_xml\')()" />\n         </div>\n         <div class="tab">\n           <h2 i18n:translate="import">Import</h2>\n'

Repository: plone.app.registry


Branch: refs/heads/master
Date: 2018-06-19T14:18:32+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.registry/commit/f83160e1e175365583779f25df62f0983164eedb

Merge pull request #26 from plone/jensens-exporter

added a pragmatic XML exporter for registry records

Files changed:
A plone/app/registry/browser/exportxml.py
A plone/app/registry/browser/templates/exportxml.pt
M CHANGES.rst
M plone/app/registry/browser/configure.zcml
M plone/app/registry/browser/templates/records.pt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1b21f3f..a075242 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Added a pragmatic XML exporter for registry records in a format meant to be used in add-ons or policy profiles.\n+  [jensens]\n \n Bug fixes:\n \ndiff --git a/plone/app/registry/browser/configure.zcml b/plone/app/registry/browser/configure.zcml\nindex 71f7a21..a1f5b22 100644\n--- a/plone/app/registry/browser/configure.zcml\n+++ b/plone/app/registry/browser/configure.zcml\n@@ -6,6 +6,11 @@\n     <include package="plone.app.z3cform" />\n     <include package="plone.autoform" />\n \n+    <browser:resourceDirectory\n+        name="plone.app.registry"\n+        directory="resources"\n+        />\n+\n     <browser:defaultView\n         for="plone.registry.interfaces.IRegistry"\n         name="configuration_registry"\n@@ -34,9 +39,11 @@\n         permission="cmf.ManagePortal"\n         />\n \n-    <browser:resourceDirectory\n-        name="plone.app.registry"\n-        directory="resources"\n+    <browser:page\n+        for="plone.registry.interfaces.IRegistry"\n+        name="configuration_registry_export_xml"\n+        class=".exportxml.RegistryExporterView"\n+        permission="cmf.ManagePortal"\n         />\n \n </configure>\ndiff --git a/plone/app/registry/browser/exportxml.py b/plone/app/registry/browser/exportxml.py\nnew file mode 100644\nindex 0000000..4fccfd4\n--- /dev/null\n+++ b/plone/app/registry/browser/exportxml.py\n@@ -0,0 +1,138 @@\n+# -*- coding: utf-8 -*-\n+from lxml import etree\n+from plone.registry.interfaces import IRegistry\n+from Products.Five import BrowserView\n+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from zope.component import getUtility\n+\n+import os\n+\n+_current_dir = os.path.dirname(__file__)\n+\n+\n+def _sort_first_lower(key):\n+    return key[0].lower()\n+\n+\n+class RegistryExporterView(BrowserView):\n+    """this view make sane exports of the registry.\n+\n+    Main goal is to export in a way, that the output can be reused as\n+    best practive settings\n+    """\n+\n+    template = ViewPageTemplateFile(\n+        os.path.join(_current_dir, \'templates\', \'exportxml.pt\')\n+    )\n+\n+    def __call__(self):\n+        interface = self.request.form.get(\'interface\', None)\n+        name = self.request.form.get(\'name\', None)\n+        if not interface and not name:\n+            return self.template()\n+        return self.export(sinterface=interface, sname=name)\n+\n+    def interfaces(self):\n+        prefixes = []\n+        registry = getUtility(IRegistry)\n+        baseurl = \'{0}/@@configuration_registry_export_xml?interface=\'.format(\n+            self.context.absolute_url()\n+        )\n+        for record in registry.records.values():\n+            if record.interfaceName is None:\n+                continue\n+            name = record.interfaceName\n+            url = \'{0}{1}\'.format(baseurl, record.interfaceName)\n+            pair = (name, url)\n+            if pair not in prefixes:\n+                prefixes.append(pair)\n+\n+        return sorted(prefixes, key=_sort_first_lower)\n+\n+    def prefixes(self):\n+        prefixes = []\n+        registry = getUtility(IRegistry)\n+        baseurl = \'{0}/@@configuration_registry_export_xml?\'.format(\n+            self.context.absolute_url()\n+        )\n+        for record in registry.records.values():\n+            if record.interfaceName == record.__name__:\n+                continue\n+\n+            def add_split(part):\n+                url = \'{0}name={1}\'.format(baseurl, part)\n+                pair = (part, url)\n+                if pair not in prefixes:\n+                    prefixes.append(pair)\n+                if part.rfind(\'/\') > part.rfind(\'.\'):\n+                    new_parts = part.rsplit(\'/\', 1)\n+                else:\n+                    new_parts = part.rsplit(\'.\', 1)\n+                if len(new_parts) > 1:\n+                    add_split(new_parts[0])\n+\n+            add_split(record.__name__)\n+        return sorted(prefixes, key=_sort_first_lower)\n+\n+    def export(self, sinterface=None, sname=None):\n+        registry = getUtility(IRegistry)\n+        root = etree.Element(\'registry\')\n+        values = {}  # full prefix to valuerecord\n+        interface2values = {}\n+        interface2prefix = {}\n+        for record in registry.records.values():\n+            if sinterface and sinterface != record.interfaceName:\n+                continue\n+            if sname and not record.__name__.startswith(sname):\n+                continue\n+            prefix, value_key = record.__name__.rsplit(\'.\', 1)\n+            xmlvalue = etree.Element(\'value\')\n+            if record.value is None:\n+                continue\n+            if isinstance(record.value, (list, tuple)):\n+                for element in record.value:\n+                    xmlel = etree.SubElement(xmlvalue, \'element\')\n+                    xmlel.text = element\n+            elif isinstance(record.value, bool):\n+                xmlvalue.text = \'True\' if record.value else \'False\'\n+            elif isinstance(record.value, basestring):\n+                xmlvalue.text = record.value\n+            else:\n+                xmlvalue.text = str(record.value)\n+\n+            if record.interfaceName:\n+                xmlvalue.attrib[\'key\'] = value_key\n+                if record.interfaceName not in interface2values:\n+                    interface2values[record.interfaceName] = []\n+                interface2values[record.interfaceName].append(record.__name__)\n+                interface2prefix[record.interfaceName] = prefix\n+            values[record.__name__] = xmlvalue\n+\n+        for ifname in sorted(interface2values):\n+            xmlrecord = etree.SubElement(root, \'records\')\n+            xmlrecord.attrib[\'interface\'] = ifname\n+            xmlrecord.attrib[\'prefix\'] = interface2prefix[ifname]\n+            for value in sorted(interface2values[ifname]):\n+                xmlrecord.append(values.pop(value))\n+        for name, xmlvalue in values.items():\n+            xmlrecord = etree.SubElement(root, \'records\')\n+            xmlrecord.attrib[\'prefix\'] = name\n+            xmlrecord.append(xmlvalue)\n+\n+        self.request.response.setHeader(\'Content-Type\', \'text/xml\')\n+        filename = \'\'\n+        if sinterface:\n+            filename += sinterface\n+        if sinterface and sname:\n+            filename += \'_-_\'\n+        if sname:\n+            filename += sname\n+        self.request.response.setHeader(\n+            \'Content-Disposition\',\n+            \'attachment; filename={0}.xml\'.format(filename))\n+        return etree.tostring(\n+            root,\n+            pretty_print=True,\n+            xml_declaration=True,\n+            encoding=\'UTF-8\'\n+        )\ndiff --git a/plone/app/registry/browser/templates/exportxml.pt b/plone/app/registry/browser/templates/exportxml.pt\nnew file mode 100644\nindex 0000000..168620f\n--- /dev/null\n+++ b/plone/app/registry/browser/templates/exportxml.pt\n@@ -0,0 +1,25 @@\n+<tal>\n+    <h3 i18n:translate="registry_export_parts_heading">Export parts</h3>\n+    <p i18n:translate="registry_export_parts_text">\n+      Download of a XML-file optimized to be used in a GenericSetup profile of an add-on or policy profile.\n+      It contains only the selected parts.\n+    </p>\n+\n+    <div class="pat-autotoc autotabs"\n+         data-pat-autotoc="levels: h3; section: div.exporttab; className: autotabs">\n+        <div class="exporttab"\n+             id="export-section-interfaces">\n+          <h3 i18n:translate="registry_export_parts_label_iface" id="h3-interfaces">by Interface</h3>\n+          <ul class="collapse_interfaces hidden">\n+            <li tal:repeat="prefix python:view.interfaces()"><a target="_blank" href="${python:prefix[1]}">${python:prefix[0]}</a></li>\n+          </ul>\n+        </div>\n+        <div class="exporttab"\n+             id="export-section-prefixes">\n+          <h3 i18n:translate="registry_export_parts_label_prefix" id="h3-prefixes">by Prefix</h3>\n+          <ul>\n+            <li tal:repeat="prefix python:view.prefixes()"><a target="_blank" href="${python:prefix[1]}">${python:prefix[0]}</a></li>\n+          </ul>\n+        </div>\n+    </div>\n+</tal>\ndiff --git a/plone/app/registry/browser/templates/records.pt b/plone/app/registry/browser/templates/records.pt\nindex 140f72c..0008417 100644\n--- a/plone/app/registry/browser/templates/records.pt\n+++ b/plone/app/registry/browser/templates/records.pt\n@@ -132,6 +132,8 @@\n               <button type="submit" i18n:translate="export_button">Export Now</button>\n             </div>\n           </form>\n+          <hr />\n+          <div tal:replace="structure python:context.restrictedTraverse(\'@@configuration_registry_export_xml\')()" />\n         </div>\n         <div class="tab">\n           <h2 i18n:translate="import">Import</h2>\n'

