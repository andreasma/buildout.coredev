Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-16T18:33:56+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.content/commit/1ca7ff64b0026af01b5dd5d8b55c0d037f7125c7

fix comparing string to int in py3

Files changed:
M plone/app/content/browser/templates/content_status_history.pt

b'diff --git a/plone/app/content/browser/templates/content_status_history.pt b/plone/app/content/browser/templates/content_status_history.pt\nindex 9d51734..737b048 100644\n--- a/plone/app/content/browser/templates/content_status_history.pt\n+++ b/plone/app/content/browser/templates/content_status_history.pt\n@@ -159,8 +159,8 @@\n                                             (item_folderish and item_url+\'/folder_contents\'or item_url+\'/\');">\n                                 <img class="thumb-tile"\n                                      tal:define="getIcon string:$item_url/@@images/image/tile\'"\n-                                     tal:condition="item_has_image"                          \n-                                     tal:attributes="src  string:$getIcon">    \n+                                     tal:condition="item_has_image"\n+                                     tal:attributes="src  string:$getIcon">\n                                     <a href="#" tal:attributes="href  url;\n                                                               title string:$item_type: $item_description;\n                                                               class string:$item_wf_state_class $item_type_class;">\n@@ -179,7 +179,7 @@\n \n                             <td>\n                               <span tal:condition="not: item_size"> &nbsp; </span>\n-                              <span tal:condition="python:item_size>0"\n+                              <span tal:condition="python:item_size"\n                                     tal:content="item_size"\n                                     tal:attributes="class item_wf_state_class"> size </span>\n                             </td>\n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-16T18:33:56+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.content/commit/18206843ae9f7dfa1c68d5ef870fe393ba71a40c

fix dumping VocabLookupException in py3

Files changed:
M plone/app/content/browser/vocabulary.py

b"diff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py\nindex 8f7955a..21532fa 100644\n--- a/plone/app/content/browser/vocabulary.py\n+++ b/plone/app/content/browser/vocabulary.py\n@@ -151,7 +151,7 @@ def __call__(self):\n         try:\n             vocabulary = self.get_vocabulary()\n         except VocabLookupException as e:\n-            return json_dumps({'error': e.message})\n+            return json_dumps({'error': e.args[0]})\n \n         results_are_brains = False\n         if hasattr(vocabulary, 'search_catalog'):\n"

Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-16T18:33:56+02:00
Author: Thomas Lotze (tlotze) <thomas@thomas-lotze.net>
Commit: https://github.com/plone/plone.app.content/commit/200a03ec528c462b8810f9a3e09ce6ce443f9a0f

update deprecated assert method calls

Files changed:
M plone/app/content/tests/test_folder.py
M plone/app/content/tests/test_widgets.py

b'diff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py\nindex 9f77b45..521b81b 100644\n--- a/plone/app/content/tests/test_folder.py\n+++ b/plone/app/content/tests/test_folder.py\n@@ -72,7 +72,7 @@ def testEffective(self):\n         self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.effective_date,\n+        self.assertEqual(self.portal.page.effective_date,\n                           DateTime(\'1999/01/01 09:00\'))\n \n     def testExpires(self):\n@@ -80,7 +80,7 @@ def testExpires(self):\n         self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.expiration_date,\n+        self.assertEqual(self.portal.page.expiration_date,\n                           DateTime(\'1999/01/01 09:00\'))\n \n     def testSetDexterityExcludeFromNav(self):\n@@ -88,28 +88,28 @@ def testSetDexterityExcludeFromNav(self):\n         self.request.form[\'exclude-from-nav\'] = \'yes\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.exclude_from_nav, True)\n+        self.assertEqual(self.portal.page.exclude_from_nav, True)\n \n     def testRights(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'copyright\'] = \'foobar\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.rights, \'foobar\')\n+        self.assertEqual(self.portal.page.rights, \'foobar\')\n \n     def testContributors(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'contributors\'] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.contributors, (\'one\', \'two\'))\n+        self.assertEqual(self.portal.page.contributors, (\'one\', \'two\'))\n \n     def testCreators(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'creators\'] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(\n+        self.assertEqual(\n             self.portal.page.creators,\n             (\'one\', \'two\')\n         )\n@@ -123,14 +123,14 @@ def testExcludeFromNav(self):\n         self.request.form[\'exclude-from-nav\'] = \'yes\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.getExcludeFromNav(), True)\n+        self.assertEqual(self.portal.page.getExcludeFromNav(), True)\n \n     def testEffective(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(\n+        self.assertEqual(\n             DateTime(self.portal.page.EffectiveDate()).toZone(\'UTC\'),\n             DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n \n@@ -139,7 +139,7 @@ def testExpires(self):\n         self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(\n+        self.assertEqual(\n             DateTime(self.portal.page.ExpirationDate()).toZone(\'UTC\'),\n             DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n \n@@ -148,21 +148,21 @@ def testRights(self):\n         self.request.form[\'copyright\'] = \'foobar\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.Rights(), \'foobar\')\n+        self.assertEqual(self.portal.page.Rights(), \'foobar\')\n \n     def testContributors(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'contributors\'] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.Contributors(), (\'one\', \'two\'))\n+        self.assertEqual(self.portal.page.Contributors(), (\'one\', \'two\'))\n \n     def testCreators(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'creators\'] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.Creators(), (\'one\', \'two\'))\n+        self.assertEqual(self.portal.page.Creators(), (\'one\', \'two\'))\n \n \n class WorkflowTest(BaseTest):\n@@ -197,7 +197,7 @@ def testStateChange(self):\n         view = WorkflowActionView(self.portal.page, self.request)\n         view()\n         workflowTool = getToolByName(self.portal, "portal_workflow")\n-        self.assertEquals(\n+        self.assertEqual(\n             workflowTool.getInfoFor(self.portal.page, \'review_state\'),\n             \'published\')\n         # commit to update indexes in catalog\n@@ -254,7 +254,7 @@ def testStateChange(self):\n         from plone.app.content.browser.contents import ContextInfo\n         view = ContextInfo(self.portal.page, self.request)\n         result = json.loads(view())\n-        self.assertEquals(result[\'object\'][\'Title\'], \'page\')\n+        self.assertEqual(result[\'object\'][\'Title\'], \'page\')\n         self.assertTrue(len(result[\'breadcrumbs\']) > 0)\n \n \n@@ -287,7 +287,7 @@ def test_cut_object_when_locked(self):\n         lockable.lock()\n         view = CutActionView(self.portal, self.request)\n         view()\n-        self.assertEquals(len(view.errors), 1)\n+        self.assertEqual(len(view.errors), 1)\n \n \n class DeleteDXTest(BaseTest):\n@@ -333,7 +333,7 @@ def test_delete_object_when_locked(self):\n         lockable.lock()\n         view = DeleteActionView(self.portal, self.request)\n         view()\n-        self.assertEquals(len(view.errors), 1)\n+        self.assertEqual(len(view.errors), 1)\n \n     def test_delete_wrong_object_by_acquisition(self):\n         page_id = self.portal.page.id\n@@ -344,7 +344,7 @@ def test_delete_wrong_object_by_acquisition(self):\n             id=page_id,\n             title="page"\n         )\n-        self.assertEquals(p1, page_id)\n+        self.assertEqual(p1, page_id)\n         request2 = self.make_request()\n \n         # both pages exist before we delete on\ndiff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py\nindex f9fc948..bc54bd4 100644\n--- a/plone/app/content/tests/test_widgets.py\n+++ b/plone/app/content/tests/test_widgets.py\n@@ -102,7 +102,7 @@ def testVocabularyQueryString(self):\n             \'query\': \'three\'\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n+        self.assertEqual(len(data[\'results\']), 1)\n \n     def testVocabularyFunctionQueryString(self):\n         """Test querying a function based vocabulary with a search string.\n@@ -113,7 +113,7 @@ def testVocabularyFunctionQueryString(self):\n             \'query\': \'third\'\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n+        self.assertEqual(len(data[\'results\']), 1)\n \n     def testVocabularyNoResults(self):\n         """Tests that the widgets displays correctly\n@@ -133,7 +133,7 @@ def testVocabularyNoResults(self):\n             \'query\': json.dumps(query)\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 0)\n+        self.assertEqual(len(data[\'results\']), 0)\n \n     def testVocabularyCatalogResults(self):\n         self.portal.invokeFactory(\'Document\', id="page", title="page")\n@@ -154,7 +154,7 @@ def testVocabularyCatalogResults(self):\n             \'attributes\': [\'UID\', \'id\', \'title\', \'path\']\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n+        self.assertEqual(len(data[\'results\']), 1)\n \n     def testVocabularyCatalogUnsafeMetadataAllowed(self):\n         """Users with permission "Modify portal content" are allowed to see\n@@ -183,7 +183,7 @@ def testVocabularyCatalogUnsafeMetadataAllowed(self):\n             ]\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(list(data[\'results\'][0].keys())), 4)\n+        self.assertEqual(len(list(data[\'results\'][0].keys())), 4)\n \n     def testVocabularyCatalogUnsafeMetadataDisallowed(self):\n         """Users without permission "Modify portal content" are not allowed to\n@@ -217,7 +217,7 @@ def testVocabularyCatalogUnsafeMetadataDisallowed(self):\n         # Only one result key should be returned, as ``commentors``,\n         # ``Creator`` and ``listCreators`` is considered unsafe and thus\n         # skipped.\n-        self.assertEquals(len(list(data[\'results\'][0].keys())), 1)\n+        self.assertEqual(len(list(data[\'results\'][0].keys())), 1)\n \n     def testVocabularyBatching(self):\n         amount = 30\n@@ -246,8 +246,8 @@ def testVocabularyBatching(self):\n             }\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 10)\n-        self.assertEquals(data[\'total\'], amount)\n+        self.assertEqual(len(data[\'results\']), 10)\n+        self.assertEqual(data[\'total\'], amount)\n \n     def testVocabularyEncoding(self):\n         """The vocabulary should not return the binary encoded token\n@@ -270,8 +270,8 @@ def testVocabularyEncoding(self):\n         results = json.loads(results)\n         result = results[\'results\'][0]\n \n-        self.assertEquals(result[\'text\'], test_val)\n-        self.assertEquals(result[\'id\'], test_val)\n+        self.assertEqual(result[\'text\'], test_val)\n+        self.assertEqual(result[\'id\'], test_val)\n \n     def testVocabularyUnauthorized(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n@@ -281,7 +281,7 @@ def testVocabularyUnauthorized(self):\n             \'query\': TEST_USER_NAME\n         })\n         data = json.loads(view())\n-        self.assertEquals(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n \n     def testVocabularyMissing(self):\n         view = VocabularyView(self.portal, self.request)\n@@ -289,7 +289,7 @@ def testVocabularyMissing(self):\n             \'name\': \'vocabulary.that.does.not.exist\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n \n     def testPermissionCheckerAllowed(self):\n         # Setup a custom permission checker on the portal\n@@ -302,7 +302,7 @@ def testPermissionCheckerAllowed(self):\n             \'field\': \'allowed_field\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']),\n+        self.assertEqual(len(data[\'results\']),\n                           len(self.portal.portal_types.objectIds()))\n         _disable_permission_checker(self.portal)\n \n@@ -315,7 +315,7 @@ def testPermissionCheckerUnknownVocab(self):\n             \'field\': \'allowed_field\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(\n+        self.assertEqual(\n             data[\'error\'],\n             \'No factory with name "{}" exists.\'.format(\n                 \'vocab.does.not.exist\'))\n@@ -331,7 +331,7 @@ def testPermissionCheckerDisallowed(self):\n             \'field\': \'disallowed_field\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerShortCircuit(self):\n@@ -345,7 +345,7 @@ def testPermissionCheckerShortCircuit(self):\n             \'field\': \'disallowed_field\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(data[\'results\'], [])\n+        self.assertEqual(data[\'results\'], [])\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerUnknownField(self):\n@@ -411,8 +411,8 @@ def search_catalog(self, query):\n             \'attributes\': \'id\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n-        self.assertEquals(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n \n     def testSourceCollectionField(self):\n         # This test uses a collection field\n@@ -454,8 +454,8 @@ def search(self, query):\n             \'batch\': json.dumps({\'size\': 10, \'page\': 1}),\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n-        self.assertEquals(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n \n     def testSourcePermissionDenied(self):\n         from z3c.form.browser.text import TextWidget\n@@ -491,7 +491,7 @@ def search_catalog(self, query):\n         })\n         logout()\n         data = json.loads(view())\n-        self.assertEquals(data[\'error\'], \'Vocabulary lookup not allowed.\')\n+        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed.\')\n \n     def testSourceTextQuery(self):\n         from z3c.form.browser.text import TextWidget\n@@ -517,8 +517,8 @@ def search(self, query):\n             \'attributes\': \'id\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n-        self.assertEquals(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n \n     def testQueryStringConfiguration(self):\n         view = QueryStringIndexOptions(self.portal, self.request)\n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-16T18:33:56+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.content/commit/8e176b29643fa2f717a80883a528dcac44e8bb1c

fix ObjectCutView in py3

Files changed:
M plone/app/content/browser/actions.py

b"diff --git a/plone/app/content/browser/actions.py b/plone/app/content/browser/actions.py\nindex c72a5c3..94932dd 100644\n--- a/plone/app/content/browser/actions.py\n+++ b/plone/app/content/browser/actions.py\n@@ -189,7 +189,9 @@ class ObjectCutView(LockingBase):\n \n     @property\n     def title(self):\n-        return self.context.Title().decode('utf8')\n+        if six.PY2:\n+            return self.context.Title().decode('utf8')\n+        return self.context.Title()\n \n     @property\n     def parent(self):\n"

Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-16T18:33:56+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.content/commit/4f7fb87c7ee21353e930af681768cd352c479206

add forgotten import

Files changed:
M plone/app/content/browser/actions.py

b'diff --git a/plone/app/content/browser/actions.py b/plone/app/content/browser/actions.py\nindex 94932dd..ed68aeb 100644\n--- a/plone/app/content/browser/actions.py\n+++ b/plone/app/content/browser/actions.py\n@@ -22,6 +22,8 @@\n from zope.event import notify\n from zope.interface import Interface\n from zope.lifecycleevent import ObjectModifiedEvent\n+\n+import six\n import transaction\n \n \n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-16T18:33:56+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.content/commit/6a42ccbfb96c982e89e46b4d050644411ade780a

fix all tests for py3

Files changed:
M plone/app/content/basecontent.rst
M plone/app/content/browser/contents/paste.py
M plone/app/content/browser/contents/rename.py
M plone/app/content/browser/tableview.py
M plone/app/content/container.py
M plone/app/content/namechooser.txt
M plone/app/content/testing.py
M plone/app/content/tests/test_actions.py
M plone/app/content/tests/test_adding.py
M plone/app/content/tests/test_folder.py
M plone/app/content/tests/test_reviewlist.py
M plone/app/content/tests/test_selectdefaultpage.py
M plone/app/content/tests/test_widgets.py

b'diff --git a/plone/app/content/basecontent.rst b/plone/app/content/basecontent.rst\nindex f8dc5fb..40e1c93 100644\n--- a/plone/app/content/basecontent.rst\n+++ b/plone/app/content/basecontent.rst\n@@ -22,7 +22,7 @@ utilities.\n Note that we need to define a portal_type to keep CMF happy.\n .. code-block:: python\n \n-    >>> from zope.interface import implements, Interface\n+    >>> from zope.interface import implementer, Interface\n     >>> from zope import schema\n     >>> from zope.component.factory import Factory\n \n@@ -33,8 +33,8 @@ First, a container:\n     ...     title = schema.TextLine(title=u"My title")\n     ...     description = schema.TextLine(title=u"My other title")\n \n-    >>> class MyContainer(container.Container):\n-    ...     implements(IMyContainer)\n+    >>> @implementer(IMyContainer)\n+    ... class MyContainer(container.Container):\n     ...     portal_type = "My container"\n     ...     title = u""\n     ...     description = u""\n@@ -48,8 +48,8 @@ Then, an item:\n     ...     title = schema.TextLine(title=u"My title")\n     ...     description = schema.TextLine(title=u"My other title")\n \n-    >>> class MyType(item.Item):\n-    ...     implements(IMyType)\n+    >>> @implementer(IMyType)\n+    ... class MyType(item.Item):\n     ...     portal_type = "My type"\n     ...     title = u""\n     ...     description = u""\ndiff --git a/plone/app/content/browser/contents/paste.py b/plone/app/content/browser/contents/paste.py\nindex 45ff2ea..18bd892 100644\n--- a/plone/app/content/browser/contents/paste.py\n+++ b/plone/app/content/browser/contents/paste.py\n@@ -51,8 +51,8 @@ def __call__(self):\n                 _(u\'You are not authorized to paste ${title} here.\',\n                     mapping={u\'title\': self.objectTitle(self.dest)}))\n         except ValueError as e:\n-            if \'Disallowed subobject type: \' in e.message:\n-                msg_parts = e.message.split(\':\')\n+            if \'Disallowed subobject type: \' in e.args[0]:\n+                msg_parts = e.args[0].split(\':\')\n                 self.errors.append(\n                     _(u\'Disallowed subobject type "${type}"\',\n                         mapping={u\'type\': msg_parts[1].strip()}))\ndiff --git a/plone/app/content/browser/contents/rename.py b/plone/app/content/browser/contents/rename.py\nindex 2108587..db61450 100644\n--- a/plone/app/content/browser/contents/rename.py\n+++ b/plone/app/content/browser/contents/rename.py\n@@ -2,7 +2,6 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-import logging\n from plone.app.content.browser.contents import ContentsBaseAction\n from plone.app.content.interfaces import IStructureAction\n from Products.CMFCore.utils import getToolByName\n@@ -15,6 +14,10 @@\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.lifecycleevent import ObjectModifiedEvent\n+\n+\n+import logging\n+import six\n import transaction\n \n \n@@ -74,7 +77,9 @@ def __call__(self):\n \n             sp = transaction.savepoint(optimistic=True)\n \n-            newid = self.request.form[\'newid_\' + index].encode(\'utf8\')\n+            newid = self.request.form[\'newid_\' + index]\n+            if six.PY2:\n+                newid = newid.encode(\'utf8\')\n             newtitle = self.request.form[\'newtitle_\' + index]\n             try:\n                 obid = obj.getId()\n@@ -102,9 +107,11 @@ def __call__(self):\n                 raise\n             except Exception as e:\n                 sp.rollback()\n+                if six.PY2:\n+                    title = title.decode(\'utf8\')\n                 logger.error(u\'Error renaming "{title}": "{exception}"\'\n-                    .format(title=title.decode(\'utf8\'), exception=e))\n+                    .format(title=title, exception=e))\n                 self.errors.append(_(u\'Error renaming ${title}\', mapping={\n-                    \'title\': title.decode(\'utf8\')}))\n+                    \'title\': title}))\n \n         return self.message(missing)\ndiff --git a/plone/app/content/browser/tableview.py b/plone/app/content/browser/tableview.py\nindex 9c20cba..ea978a4 100644\n--- a/plone/app/content/browser/tableview.py\n+++ b/plone/app/content/browser/tableview.py\n@@ -87,7 +87,7 @@ def batch(self):\n         b = Batch.fromPagenumber(self.items,\n                                  pagesize=pagesize,\n                                  pagenumber=self.pagenumber)\n-        map(self.set_checked, b)\n+        list(map(self.set_checked, b))\n         return b\n \n     render = ViewPageTemplateFile("table.pt")\ndiff --git a/plone/app/content/container.py b/plone/app/content/container.py\nindex 7bd20ed..07ddda6 100644\n--- a/plone/app/content/container.py\n+++ b/plone/app/content/container.py\n@@ -8,6 +8,8 @@\n from zope.container.interfaces import IContainer\n from zope.interface import implementer\n \n+import six\n+\n \n @implementer(IContainer)\n class OFSContainer(object):\n@@ -37,7 +39,8 @@ def get(self, name, default=None):\n     # __getitem__ is already implemented by ObjectManager\n \n     def __setitem__(self, name, obj):\n-        name = name.encode(\'ascii\')  # may raise if there\'s a bugus id\n+        if six.PY2 and isinstance(name, six.text_type):\n+            name = name.encode(\'ascii\')  # may raise if there\'s a bugus id\n         self._setObject(name, obj)\n \n     def __delitem__(self, name):\ndiff --git a/plone/app/content/namechooser.txt b/plone/app/content/namechooser.txt\nindex 43df6e0..ecd0915 100644\n--- a/plone/app/content/namechooser.txt\n+++ b/plone/app/content/namechooser.txt\n@@ -9,15 +9,15 @@ and can provide uniqueness.\n Let\'s create some dummy content.\n \n     >>> from plone.app.content import container, item\n-    >>> from zope.interface import implements, Interface, alsoProvides\n+    >>> from zope.interface import implementer, Interface, alsoProvides\n     >>> from zope import schema\n \n     >>> class IMyContainer(Interface):\n     ...     title = schema.TextLine(title=u"My title")\n     ...     description = schema.TextLine(title=u"My other title")\n \n-    >>> class MyContainer(container.Container):\n-    ...     implements(IMyContainer)\n+    >>> @implementer(IMyContainer)\n+    ... class MyContainer(container.Container):\n     ...     portal_type = "My container"\n     ...     title = IMyContainer[\'title\']\n     ...     description = IMyContainer[\'description\']\n@@ -26,8 +26,8 @@ Let\'s create some dummy content.\n     ...     title = schema.TextLine(title=u"My title")\n     ...     description = schema.TextLine(title=u"My other title")\n \n-    >>> class MyType(item.Item):\n-    ...     implements(IMyType)\n+    >>> @implementer(IMyType)\n+    ... class MyType(item.Item):\n     ...     portal_type = "My portal type"\n     ...     title = IMyType[\'title\']\n     ...     description = IMyType[\'description\']\n@@ -37,7 +37,7 @@ Let\'s create some dummy content.\n Then wire up the name chooser (this is normally done in this package\'s\n configure.zcml file).\n \n-    >>> from zope.component import adapts, provideAdapter, provideUtility\n+    >>> from zope.component import adapter, provideAdapter, provideUtility\n     >>> from Products.CMFCore.interfaces import IFolderish\n     >>> from plone.app.content.namechooser import NormalizingNameChooser\n     >>> provideAdapter(adapts=(IFolderish,), factory=NormalizingNameChooser)\n@@ -105,7 +105,7 @@ When a filename is used as an id, the extension is preserved.\n     >>> chooser.checkName(name, object)\n     True\n \n-If the chooser is used with a container that implements the\n+If the chooser is used with a container that implementer the\n IObjectManager interface from OFS, the checkValidId method\n of that interface will be used to check for validity of the\n chosen name. This catches various edge cases.\n@@ -141,9 +141,9 @@ must implement or be adaptable to INameFromTitle.\n \n     >>> from plone.app.content.interfaces import INameFromTitle\n \n-    >>> class TitleAdapter(object):\n-    ...     implements(INameFromTitle)\n-    ...     adapts(IMyType)\n+    >>> @implementer(INameFromTitle)\n+    ... @adapter(IMyType)\n+    ... class TitleAdapter(object):\n     ...     def __init__(self, context):\n     ...         self.context = context\n     ...     @property\ndiff --git a/plone/app/content/testing.py b/plone/app/content/testing.py\nindex d28e268..792077a 100644\n--- a/plone/app/content/testing.py\n+++ b/plone/app/content/testing.py\n@@ -15,6 +15,12 @@\n \n import doctest\n \n+try:\n+    import Products.Archetypes\n+    HAS_AT= True\n+except ImportError:\n+    HAS_AT = False\n+\n \n @implementer(IVocabularyFactory)\n class ExampleVocabulary(object):\n@@ -101,19 +107,20 @@ def setUpPloneSite(self, portal):\n         portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n \n \n-class PloneAppContentAT(PloneAppContent):\n+if HAS_AT:\n+    class PloneAppContentAT(PloneAppContent):\n \n-    def setUpZope(self, app, configurationContext):\n-        super(PloneAppContentAT, self).setUpZope(app, configurationContext)\n-        import Products.ATContentTypes\n-        xmlconfig.file(\'configure.zcml\',\n-                       Products.ATContentTypes,\n-                       context=configurationContext)\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n+        def setUpZope(self, app, configurationContext):\n+            super(PloneAppContentAT, self).setUpZope(app, configurationContext)\n+            import Products.ATContentTypes\n+            xmlconfig.file(\'configure.zcml\',\n+                           Products.ATContentTypes,\n+                           context=configurationContext)\n+            z2.installProduct(app, \'Products.ATContentTypes\')\n \n-    def setUpPloneSite(self, portal):\n-        super(PloneAppContentAT, self).setUpPloneSite(portal)\n-        self.applyProfile(portal, \'Products.ATContentTypes:default\')\n+        def setUpPloneSite(self, portal):\n+            super(PloneAppContentAT, self).setUpPloneSite(portal)\n+            self.applyProfile(portal, \'Products.ATContentTypes:default\')\n \n \n PLONE_APP_CONTENT_FIXTURE = PloneAppContent()\n@@ -134,14 +141,15 @@ def setUpPloneSite(self, portal):\n     name="PloneAppContentDX:Functional")\n \n \n-# AT test layers\n-PLONE_APP_CONTENT_AT_FIXTURE = PloneAppContentAT()\n-PLONE_APP_CONTENT_AT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENT_AT_FIXTURE, ),\n-    name="PloneAppContentAT:Integration")\n-PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENT_AT_FIXTURE, ),\n-    name="PloneAppContentAT:Functional")\n+if HAS_AT:\n+    # AT test layers\n+    PLONE_APP_CONTENT_AT_FIXTURE = PloneAppContentAT()\n+    PLONE_APP_CONTENT_AT_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_APP_CONTENT_AT_FIXTURE, ),\n+        name="PloneAppContentAT:Integration")\n+    PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(PLONE_APP_CONTENT_AT_FIXTURE, ),\n+        name="PloneAppContentAT:Functional")\n \n \n optionflags = (\ndiff --git a/plone/app/content/tests/test_actions.py b/plone/app/content/tests/test_actions.py\nindex d6489c5..cb4b481 100644\n--- a/plone/app/content/tests/test_actions.py\n+++ b/plone/app/content/tests/test_actions.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.app.content.testing import PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+from plone.app.content.testing import HAS_AT\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n@@ -16,6 +16,8 @@\n import transaction\n import unittest\n \n+if HAS_AT:\n+    from plone.app.content.testing import PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n \n class ActionsDXTestCase(unittest.TestCase):\n \n@@ -447,6 +449,7 @@ def test_object_copy_and_paste_multiple_times(self):\n         self.assertIn(\'Item(s) pasted.\', self.browser.contents)\n \n \n-class ActionsATTestCase(ActionsDXTestCase):\n+if HAS_AT:\n+    class ActionsATTestCase(ActionsDXTestCase):\n \n-    layer = PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+        layer = PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\ndiff --git a/plone/app/content/tests/test_adding.py b/plone/app/content/tests/test_adding.py\nindex 3df20b0..9667b61 100644\n--- a/plone/app/content/tests/test_adding.py\n+++ b/plone/app/content/tests/test_adding.py\n@@ -1,9 +1,16 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_get\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n+import unittest\n \n-class AddingTests(PloneTestCase):\n+\n+class AddingTests(unittest.TestCase):\n+\n+    layer = PLONE_APP_CONTENT_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n \n     def test_adding_acquisition(self):\n         adding = self.portal.unrestrictedTraverse(\'+\')\ndiff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py\nindex 521b81b..8225131 100644\n--- a/plone/app/content/tests/test_folder.py\n+++ b/plone/app/content/tests/test_folder.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n-from plone.app.content.testing import PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n+from plone.app.content.testing import HAS_AT\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n from plone.app.testing import login\n@@ -22,6 +22,9 @@\n import json\n import unittest\n \n+if HAS_AT:\n+    from plone.app.content.testing import PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n+\n \n class BaseTest(unittest.TestCase):\n \n@@ -114,55 +117,55 @@ def testCreators(self):\n             (\'one\', \'two\')\n         )\n \n+if HAS_AT:\n+    class PropertiesArchetypesTest(BaseTest):\n+        layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n \n-class PropertiesArchetypesTest(BaseTest):\n-    layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n-\n-    def testExcludeFromNav(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'exclude-from-nav\'] = \'yes\'\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEqual(self.portal.page.getExcludeFromNav(), True)\n-\n-    def testEffective(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEqual(\n-            DateTime(self.portal.page.EffectiveDate()).toZone(\'UTC\'),\n-            DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n-\n-    def testExpires(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEqual(\n-            DateTime(self.portal.page.ExpirationDate()).toZone(\'UTC\'),\n-            DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n+        def testExcludeFromNav(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'exclude-from-nav\'] = \'yes\'\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(self.portal.page.getExcludeFromNav(), True)\n \n-    def testRights(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'copyright\'] = \'foobar\'\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEqual(self.portal.page.Rights(), \'foobar\')\n+        def testEffective(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(\n+                DateTime(self.portal.page.EffectiveDate()).toZone(\'UTC\'),\n+                DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n+\n+        def testExpires(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(\n+                DateTime(self.portal.page.ExpirationDate()).toZone(\'UTC\'),\n+                DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n+\n+        def testRights(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'copyright\'] = \'foobar\'\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(self.portal.page.Rights(), \'foobar\')\n \n-    def testContributors(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'contributors\'] = self.userList\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEqual(self.portal.page.Contributors(), (\'one\', \'two\'))\n+        def testContributors(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'contributors\'] = self.userList\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(self.portal.page.Contributors(), (\'one\', \'two\'))\n \n-    def testCreators(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'creators\'] = self.userList\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEqual(self.portal.page.Creators(), (\'one\', \'two\'))\n+        def testCreators(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'creators\'] = self.userList\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(self.portal.page.Creators(), (\'one\', \'two\'))\n \n \n class WorkflowTest(BaseTest):\n@@ -368,9 +371,10 @@ def test_delete_wrong_object_by_acquisition(self):\n         self.assertFalse(p1 in self.portal[f1])\n \n \n-class DeleteATTest(DeleteDXTest):\n+if HAS_AT:\n+    class DeleteATTest(DeleteDXTest):\n \n-    layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n+        layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n \n \n class RearrangeDXTest(BaseTest):\n@@ -541,10 +545,10 @@ def test_item_order_move_by_delta_in_plone_root(self):\n             ]\n         )\n \n+if HAS_AT:\n+    class RearrangeATTest(RearrangeDXTest):\n \n-class RearrangeATTest(RearrangeDXTest):\n-\n-    layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n+        layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n \n \n class FolderFactoriesTest(unittest.TestCase):\ndiff --git a/plone/app/content/tests/test_reviewlist.py b/plone/app/content/tests/test_reviewlist.py\nindex ec1666c..6032f1f 100644\n--- a/plone/app/content/tests/test_reviewlist.py\n+++ b/plone/app/content/tests/test_reviewlist.py\n@@ -1,28 +1,36 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.testing.z2 import Browser\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+\n import transaction\n+import unittest\n \n \n-class ReviewListTestCase(PloneTestCase):\n+class ReviewListTestCase(unittest.TestCase):\n     """dsfsdaf"""\n \n-    def afterSetUp(self):\n+    layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.uf = self.portal.acl_users\n         self.uf.userFolderAddUser(\'reviewer\', \'secret\', [\'Reviewer\'], [])\n         transaction.commit()\n         self.browser = Browser(self.layer[\'app\'])\n+        self.browser.handleErrors = True\n         self.wftool = getToolByName(self.portal, \'portal_workflow\')\n \n     def createDocument(self, id, title, description):\n-        self.setRoles([\'Manager\', ])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n         self.portal.invokeFactory(id=id, type_name=\'Document\')\n         doc = getattr(self.portal, id)\n-        doc.setTitle(title)\n-        doc.setDescription(description)\n+        doc.title = title\n+        doc.description = description\n         # we don\'t want it in the navigation\n-        doc.setExcludeFromNav(True)\n+        doc.exclude_from_nav = True\n         doc.reindexObject()\n         transaction.commit()\n         return doc\ndiff --git a/plone/app/content/tests/test_selectdefaultpage.py b/plone/app/content/tests/test_selectdefaultpage.py\nindex 58a07bb..76779f4 100644\n--- a/plone/app/content/tests/test_selectdefaultpage.py\n+++ b/plone/app/content/tests/test_selectdefaultpage.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.app.content.testing import PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+from plone.app.content.testing import HAS_AT\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n@@ -7,6 +7,9 @@\n import transaction\n import unittest\n \n+if HAS_AT:\n+    from plone.app.content.testing import PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+\n FOLDER = {\'id\': \'testfolder\',\n           \'title\': \'Test Folder\',\n           \'description\': \'Test Folder Description\'}\n@@ -109,6 +112,7 @@ def test_default_page_action_save(self):\n         self.assertEqual(folder.getDefaultPage(), \'testdoc\')\n \n \n-class SelectDefaultPageATTestCase(SelectDefaultPageDXTestCase):\n+if HAS_AT:\n+    class SelectDefaultPageATTestCase(SelectDefaultPageDXTestCase):\n \n-    layer = PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+        layer = PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\ndiff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py\nindex bc54bd4..9bef312 100644\n--- a/plone/app/content/tests/test_widgets.py\n+++ b/plone/app/content/tests/test_widgets.py\n@@ -580,7 +580,7 @@ def setUp(self):\n     def testFileUpload(self):\n         view = FileUploadView(self.portal, self.request)\n         from plone.namedfile.file import FileChunk\n-        chunk = FileChunk(\'foobar\')\n+        chunk = FileChunk(b\'foobar\')\n         chunk.filename = \'test.xml\'\n         self.request.form[\'file\'] = chunk\n         self.request.REQUEST_METHOD = \'POST\'\n@@ -596,7 +596,7 @@ def testFileUpload(self):\n     def testFileUploadTxt(self):\n         view = FileUploadView(self.portal, self.request)\n         from plone.namedfile.file import FileChunk\n-        chunk = FileChunk(\'foobar\')\n+        chunk = FileChunk(b\'foobar\')\n         chunk.filename = \'test.txt\'\n         self.request.form[\'file\'] = chunk\n         self.request.REQUEST_METHOD = \'POST\'\n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-16T18:33:56+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.content/commit/63541aeaf521103b2564e51d01f16f301994efdb

fix behavior-tuple

Files changed:
M plone/app/content/tests/test_contents.py

b"diff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py\nindex b0666e7..42b22fd 100644\n--- a/plone/app/content/tests/test_contents.py\n+++ b/plone/app/content/tests/test_contents.py\n@@ -62,7 +62,7 @@ def _test_order(sel):\n                 [ob.id for ob in view.oblist],\n                 sel\n             )\n-        \n+\n         _test_order(['it1', 'it2', 'it3'])\n         _test_order(['it3', 'it1', 'it2'])\n \n@@ -340,7 +340,7 @@ def setUp(self):\n         type1_fti.filter_content_types = True\n         type1_fti.allowed_content_types = []\n         type1_fti.behaviors = (\n-            'plone.app.dexterity.behaviors.metadata.IBasic'\n+            'plone.app.dexterity.behaviors.metadata.IBasic',\n         )\n         self.portal.portal_types._setObject('type1', type1_fti)\n         self.type1_fti = type1_fti\n@@ -351,7 +351,7 @@ def setUp(self):\n         type2_fti.filter_content_types = True\n         type2_fti.allowed_content_types = []\n         type2_fti.behaviors = (\n-            'plone.app.dexterity.behaviors.metadata.IBasic'\n+            'plone.app.dexterity.behaviors.metadata.IBasic',\n         )\n         self.portal.portal_types._setObject('type2', type2_fti)\n         self.type2_fti = type2_fti\n"

Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-16T18:41:10+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.content/commit/1819ec7e30704183852b07b7b6d55941d2433575

add changenote and classifiers

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 95c3180..4cd7d7c 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -22,6 +22,9 @@ Bug fixes:\n   updated only when the state was changed from the toolbar.\n   [cekk]\n \n+- Fix various issues in with py3.\n+  [pbauer]\n+\n 3.5.3 (2018-06-18)\n ------------------\n \ndiff --git a/setup.py b/setup.py\nindex 132c47c..40e08eb 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -19,6 +19,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'plone content views viewlet\',\n     author=\'Plone Foundation\',\n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-09-17T06:18:22+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.content/commit/6a09f210faaecddd93343819d9964d54e3f5151b

Merge pull request #155 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/app/content/basecontent.rst
M plone/app/content/browser/actions.py
M plone/app/content/browser/contents/paste.py
M plone/app/content/browser/contents/rename.py
M plone/app/content/browser/tableview.py
M plone/app/content/browser/templates/content_status_history.pt
M plone/app/content/browser/vocabulary.py
M plone/app/content/container.py
M plone/app/content/namechooser.txt
M plone/app/content/testing.py
M plone/app/content/tests/test_actions.py
M plone/app/content/tests/test_adding.py
M plone/app/content/tests/test_contents.py
M plone/app/content/tests/test_folder.py
M plone/app/content/tests/test_reviewlist.py
M plone/app/content/tests/test_selectdefaultpage.py
M plone/app/content/tests/test_widgets.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 95c3180..4cd7d7c 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -22,6 +22,9 @@ Bug fixes:\n   updated only when the state was changed from the toolbar.\n   [cekk]\n \n+- Fix various issues in with py3.\n+  [pbauer]\n+\n 3.5.3 (2018-06-18)\n ------------------\n \ndiff --git a/plone/app/content/basecontent.rst b/plone/app/content/basecontent.rst\nindex f8dc5fb..40e1c93 100644\n--- a/plone/app/content/basecontent.rst\n+++ b/plone/app/content/basecontent.rst\n@@ -22,7 +22,7 @@ utilities.\n Note that we need to define a portal_type to keep CMF happy.\n .. code-block:: python\n \n-    >>> from zope.interface import implements, Interface\n+    >>> from zope.interface import implementer, Interface\n     >>> from zope import schema\n     >>> from zope.component.factory import Factory\n \n@@ -33,8 +33,8 @@ First, a container:\n     ...     title = schema.TextLine(title=u"My title")\n     ...     description = schema.TextLine(title=u"My other title")\n \n-    >>> class MyContainer(container.Container):\n-    ...     implements(IMyContainer)\n+    >>> @implementer(IMyContainer)\n+    ... class MyContainer(container.Container):\n     ...     portal_type = "My container"\n     ...     title = u""\n     ...     description = u""\n@@ -48,8 +48,8 @@ Then, an item:\n     ...     title = schema.TextLine(title=u"My title")\n     ...     description = schema.TextLine(title=u"My other title")\n \n-    >>> class MyType(item.Item):\n-    ...     implements(IMyType)\n+    >>> @implementer(IMyType)\n+    ... class MyType(item.Item):\n     ...     portal_type = "My type"\n     ...     title = u""\n     ...     description = u""\ndiff --git a/plone/app/content/browser/actions.py b/plone/app/content/browser/actions.py\nindex c72a5c3..ed68aeb 100644\n--- a/plone/app/content/browser/actions.py\n+++ b/plone/app/content/browser/actions.py\n@@ -22,6 +22,8 @@\n from zope.event import notify\n from zope.interface import Interface\n from zope.lifecycleevent import ObjectModifiedEvent\n+\n+import six\n import transaction\n \n \n@@ -189,7 +191,9 @@ class ObjectCutView(LockingBase):\n \n     @property\n     def title(self):\n-        return self.context.Title().decode(\'utf8\')\n+        if six.PY2:\n+            return self.context.Title().decode(\'utf8\')\n+        return self.context.Title()\n \n     @property\n     def parent(self):\ndiff --git a/plone/app/content/browser/contents/paste.py b/plone/app/content/browser/contents/paste.py\nindex 45ff2ea..18bd892 100644\n--- a/plone/app/content/browser/contents/paste.py\n+++ b/plone/app/content/browser/contents/paste.py\n@@ -51,8 +51,8 @@ def __call__(self):\n                 _(u\'You are not authorized to paste ${title} here.\',\n                     mapping={u\'title\': self.objectTitle(self.dest)}))\n         except ValueError as e:\n-            if \'Disallowed subobject type: \' in e.message:\n-                msg_parts = e.message.split(\':\')\n+            if \'Disallowed subobject type: \' in e.args[0]:\n+                msg_parts = e.args[0].split(\':\')\n                 self.errors.append(\n                     _(u\'Disallowed subobject type "${type}"\',\n                         mapping={u\'type\': msg_parts[1].strip()}))\ndiff --git a/plone/app/content/browser/contents/rename.py b/plone/app/content/browser/contents/rename.py\nindex 2108587..db61450 100644\n--- a/plone/app/content/browser/contents/rename.py\n+++ b/plone/app/content/browser/contents/rename.py\n@@ -2,7 +2,6 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-import logging\n from plone.app.content.browser.contents import ContentsBaseAction\n from plone.app.content.interfaces import IStructureAction\n from Products.CMFCore.utils import getToolByName\n@@ -15,6 +14,10 @@\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.lifecycleevent import ObjectModifiedEvent\n+\n+\n+import logging\n+import six\n import transaction\n \n \n@@ -74,7 +77,9 @@ def __call__(self):\n \n             sp = transaction.savepoint(optimistic=True)\n \n-            newid = self.request.form[\'newid_\' + index].encode(\'utf8\')\n+            newid = self.request.form[\'newid_\' + index]\n+            if six.PY2:\n+                newid = newid.encode(\'utf8\')\n             newtitle = self.request.form[\'newtitle_\' + index]\n             try:\n                 obid = obj.getId()\n@@ -102,9 +107,11 @@ def __call__(self):\n                 raise\n             except Exception as e:\n                 sp.rollback()\n+                if six.PY2:\n+                    title = title.decode(\'utf8\')\n                 logger.error(u\'Error renaming "{title}": "{exception}"\'\n-                    .format(title=title.decode(\'utf8\'), exception=e))\n+                    .format(title=title, exception=e))\n                 self.errors.append(_(u\'Error renaming ${title}\', mapping={\n-                    \'title\': title.decode(\'utf8\')}))\n+                    \'title\': title}))\n \n         return self.message(missing)\ndiff --git a/plone/app/content/browser/tableview.py b/plone/app/content/browser/tableview.py\nindex 9c20cba..ea978a4 100644\n--- a/plone/app/content/browser/tableview.py\n+++ b/plone/app/content/browser/tableview.py\n@@ -87,7 +87,7 @@ def batch(self):\n         b = Batch.fromPagenumber(self.items,\n                                  pagesize=pagesize,\n                                  pagenumber=self.pagenumber)\n-        map(self.set_checked, b)\n+        list(map(self.set_checked, b))\n         return b\n \n     render = ViewPageTemplateFile("table.pt")\ndiff --git a/plone/app/content/browser/templates/content_status_history.pt b/plone/app/content/browser/templates/content_status_history.pt\nindex 9d51734..737b048 100644\n--- a/plone/app/content/browser/templates/content_status_history.pt\n+++ b/plone/app/content/browser/templates/content_status_history.pt\n@@ -159,8 +159,8 @@\n                                             (item_folderish and item_url+\'/folder_contents\'or item_url+\'/\');">\n                                 <img class="thumb-tile"\n                                      tal:define="getIcon string:$item_url/@@images/image/tile\'"\n-                                     tal:condition="item_has_image"                          \n-                                     tal:attributes="src  string:$getIcon">    \n+                                     tal:condition="item_has_image"\n+                                     tal:attributes="src  string:$getIcon">\n                                     <a href="#" tal:attributes="href  url;\n                                                               title string:$item_type: $item_description;\n                                                               class string:$item_wf_state_class $item_type_class;">\n@@ -179,7 +179,7 @@\n \n                             <td>\n                               <span tal:condition="not: item_size"> &nbsp; </span>\n-                              <span tal:condition="python:item_size>0"\n+                              <span tal:condition="python:item_size"\n                                     tal:content="item_size"\n                                     tal:attributes="class item_wf_state_class"> size </span>\n                             </td>\ndiff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py\nindex 8f7955a..21532fa 100644\n--- a/plone/app/content/browser/vocabulary.py\n+++ b/plone/app/content/browser/vocabulary.py\n@@ -151,7 +151,7 @@ def __call__(self):\n         try:\n             vocabulary = self.get_vocabulary()\n         except VocabLookupException as e:\n-            return json_dumps({\'error\': e.message})\n+            return json_dumps({\'error\': e.args[0]})\n \n         results_are_brains = False\n         if hasattr(vocabulary, \'search_catalog\'):\ndiff --git a/plone/app/content/container.py b/plone/app/content/container.py\nindex 7bd20ed..07ddda6 100644\n--- a/plone/app/content/container.py\n+++ b/plone/app/content/container.py\n@@ -8,6 +8,8 @@\n from zope.container.interfaces import IContainer\n from zope.interface import implementer\n \n+import six\n+\n \n @implementer(IContainer)\n class OFSContainer(object):\n@@ -37,7 +39,8 @@ def get(self, name, default=None):\n     # __getitem__ is already implemented by ObjectManager\n \n     def __setitem__(self, name, obj):\n-        name = name.encode(\'ascii\')  # may raise if there\'s a bugus id\n+        if six.PY2 and isinstance(name, six.text_type):\n+            name = name.encode(\'ascii\')  # may raise if there\'s a bugus id\n         self._setObject(name, obj)\n \n     def __delitem__(self, name):\ndiff --git a/plone/app/content/namechooser.txt b/plone/app/content/namechooser.txt\nindex 43df6e0..ecd0915 100644\n--- a/plone/app/content/namechooser.txt\n+++ b/plone/app/content/namechooser.txt\n@@ -9,15 +9,15 @@ and can provide uniqueness.\n Let\'s create some dummy content.\n \n     >>> from plone.app.content import container, item\n-    >>> from zope.interface import implements, Interface, alsoProvides\n+    >>> from zope.interface import implementer, Interface, alsoProvides\n     >>> from zope import schema\n \n     >>> class IMyContainer(Interface):\n     ...     title = schema.TextLine(title=u"My title")\n     ...     description = schema.TextLine(title=u"My other title")\n \n-    >>> class MyContainer(container.Container):\n-    ...     implements(IMyContainer)\n+    >>> @implementer(IMyContainer)\n+    ... class MyContainer(container.Container):\n     ...     portal_type = "My container"\n     ...     title = IMyContainer[\'title\']\n     ...     description = IMyContainer[\'description\']\n@@ -26,8 +26,8 @@ Let\'s create some dummy content.\n     ...     title = schema.TextLine(title=u"My title")\n     ...     description = schema.TextLine(title=u"My other title")\n \n-    >>> class MyType(item.Item):\n-    ...     implements(IMyType)\n+    >>> @implementer(IMyType)\n+    ... class MyType(item.Item):\n     ...     portal_type = "My portal type"\n     ...     title = IMyType[\'title\']\n     ...     description = IMyType[\'description\']\n@@ -37,7 +37,7 @@ Let\'s create some dummy content.\n Then wire up the name chooser (this is normally done in this package\'s\n configure.zcml file).\n \n-    >>> from zope.component import adapts, provideAdapter, provideUtility\n+    >>> from zope.component import adapter, provideAdapter, provideUtility\n     >>> from Products.CMFCore.interfaces import IFolderish\n     >>> from plone.app.content.namechooser import NormalizingNameChooser\n     >>> provideAdapter(adapts=(IFolderish,), factory=NormalizingNameChooser)\n@@ -105,7 +105,7 @@ When a filename is used as an id, the extension is preserved.\n     >>> chooser.checkName(name, object)\n     True\n \n-If the chooser is used with a container that implements the\n+If the chooser is used with a container that implementer the\n IObjectManager interface from OFS, the checkValidId method\n of that interface will be used to check for validity of the\n chosen name. This catches various edge cases.\n@@ -141,9 +141,9 @@ must implement or be adaptable to INameFromTitle.\n \n     >>> from plone.app.content.interfaces import INameFromTitle\n \n-    >>> class TitleAdapter(object):\n-    ...     implements(INameFromTitle)\n-    ...     adapts(IMyType)\n+    >>> @implementer(INameFromTitle)\n+    ... @adapter(IMyType)\n+    ... class TitleAdapter(object):\n     ...     def __init__(self, context):\n     ...         self.context = context\n     ...     @property\ndiff --git a/plone/app/content/testing.py b/plone/app/content/testing.py\nindex d28e268..792077a 100644\n--- a/plone/app/content/testing.py\n+++ b/plone/app/content/testing.py\n@@ -15,6 +15,12 @@\n \n import doctest\n \n+try:\n+    import Products.Archetypes\n+    HAS_AT= True\n+except ImportError:\n+    HAS_AT = False\n+\n \n @implementer(IVocabularyFactory)\n class ExampleVocabulary(object):\n@@ -101,19 +107,20 @@ def setUpPloneSite(self, portal):\n         portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n \n \n-class PloneAppContentAT(PloneAppContent):\n+if HAS_AT:\n+    class PloneAppContentAT(PloneAppContent):\n \n-    def setUpZope(self, app, configurationContext):\n-        super(PloneAppContentAT, self).setUpZope(app, configurationContext)\n-        import Products.ATContentTypes\n-        xmlconfig.file(\'configure.zcml\',\n-                       Products.ATContentTypes,\n-                       context=configurationContext)\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n+        def setUpZope(self, app, configurationContext):\n+            super(PloneAppContentAT, self).setUpZope(app, configurationContext)\n+            import Products.ATContentTypes\n+            xmlconfig.file(\'configure.zcml\',\n+                           Products.ATContentTypes,\n+                           context=configurationContext)\n+            z2.installProduct(app, \'Products.ATContentTypes\')\n \n-    def setUpPloneSite(self, portal):\n-        super(PloneAppContentAT, self).setUpPloneSite(portal)\n-        self.applyProfile(portal, \'Products.ATContentTypes:default\')\n+        def setUpPloneSite(self, portal):\n+            super(PloneAppContentAT, self).setUpPloneSite(portal)\n+            self.applyProfile(portal, \'Products.ATContentTypes:default\')\n \n \n PLONE_APP_CONTENT_FIXTURE = PloneAppContent()\n@@ -134,14 +141,15 @@ def setUpPloneSite(self, portal):\n     name="PloneAppContentDX:Functional")\n \n \n-# AT test layers\n-PLONE_APP_CONTENT_AT_FIXTURE = PloneAppContentAT()\n-PLONE_APP_CONTENT_AT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENT_AT_FIXTURE, ),\n-    name="PloneAppContentAT:Integration")\n-PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CONTENT_AT_FIXTURE, ),\n-    name="PloneAppContentAT:Functional")\n+if HAS_AT:\n+    # AT test layers\n+    PLONE_APP_CONTENT_AT_FIXTURE = PloneAppContentAT()\n+    PLONE_APP_CONTENT_AT_INTEGRATION_TESTING = IntegrationTesting(\n+        bases=(PLONE_APP_CONTENT_AT_FIXTURE, ),\n+        name="PloneAppContentAT:Integration")\n+    PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING = FunctionalTesting(\n+        bases=(PLONE_APP_CONTENT_AT_FIXTURE, ),\n+        name="PloneAppContentAT:Functional")\n \n \n optionflags = (\ndiff --git a/plone/app/content/tests/test_actions.py b/plone/app/content/tests/test_actions.py\nindex d6489c5..cb4b481 100644\n--- a/plone/app/content/tests/test_actions.py\n+++ b/plone/app/content/tests/test_actions.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.app.content.testing import PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+from plone.app.content.testing import HAS_AT\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n@@ -16,6 +16,8 @@\n import transaction\n import unittest\n \n+if HAS_AT:\n+    from plone.app.content.testing import PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n \n class ActionsDXTestCase(unittest.TestCase):\n \n@@ -447,6 +449,7 @@ def test_object_copy_and_paste_multiple_times(self):\n         self.assertIn(\'Item(s) pasted.\', self.browser.contents)\n \n \n-class ActionsATTestCase(ActionsDXTestCase):\n+if HAS_AT:\n+    class ActionsATTestCase(ActionsDXTestCase):\n \n-    layer = PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+        layer = PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\ndiff --git a/plone/app/content/tests/test_adding.py b/plone/app/content/tests/test_adding.py\nindex 3df20b0..9667b61 100644\n--- a/plone/app/content/tests/test_adding.py\n+++ b/plone/app/content/tests/test_adding.py\n@@ -1,9 +1,16 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_get\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.content.testing import PLONE_APP_CONTENT_INTEGRATION_TESTING\n \n+import unittest\n \n-class AddingTests(PloneTestCase):\n+\n+class AddingTests(unittest.TestCase):\n+\n+    layer = PLONE_APP_CONTENT_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n \n     def test_adding_acquisition(self):\n         adding = self.portal.unrestrictedTraverse(\'+\')\ndiff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py\nindex b0666e7..42b22fd 100644\n--- a/plone/app/content/tests/test_contents.py\n+++ b/plone/app/content/tests/test_contents.py\n@@ -62,7 +62,7 @@ def _test_order(sel):\n                 [ob.id for ob in view.oblist],\n                 sel\n             )\n-        \n+\n         _test_order([\'it1\', \'it2\', \'it3\'])\n         _test_order([\'it3\', \'it1\', \'it2\'])\n \n@@ -340,7 +340,7 @@ def setUp(self):\n         type1_fti.filter_content_types = True\n         type1_fti.allowed_content_types = []\n         type1_fti.behaviors = (\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            \'plone.app.dexterity.behaviors.metadata.IBasic\',\n         )\n         self.portal.portal_types._setObject(\'type1\', type1_fti)\n         self.type1_fti = type1_fti\n@@ -351,7 +351,7 @@ def setUp(self):\n         type2_fti.filter_content_types = True\n         type2_fti.allowed_content_types = []\n         type2_fti.behaviors = (\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\'\n+            \'plone.app.dexterity.behaviors.metadata.IBasic\',\n         )\n         self.portal.portal_types._setObject(\'type2\', type2_fti)\n         self.type2_fti = type2_fti\ndiff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py\nindex 9f77b45..8225131 100644\n--- a/plone/app/content/tests/test_folder.py\n+++ b/plone/app/content/tests/test_folder.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n-from plone.app.content.testing import PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n+from plone.app.content.testing import HAS_AT\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n from plone.app.testing import login\n@@ -22,6 +22,9 @@\n import json\n import unittest\n \n+if HAS_AT:\n+    from plone.app.content.testing import PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n+\n \n class BaseTest(unittest.TestCase):\n \n@@ -72,7 +75,7 @@ def testEffective(self):\n         self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.effective_date,\n+        self.assertEqual(self.portal.page.effective_date,\n                           DateTime(\'1999/01/01 09:00\'))\n \n     def testExpires(self):\n@@ -80,7 +83,7 @@ def testExpires(self):\n         self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.expiration_date,\n+        self.assertEqual(self.portal.page.expiration_date,\n                           DateTime(\'1999/01/01 09:00\'))\n \n     def testSetDexterityExcludeFromNav(self):\n@@ -88,81 +91,81 @@ def testSetDexterityExcludeFromNav(self):\n         self.request.form[\'exclude-from-nav\'] = \'yes\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.exclude_from_nav, True)\n+        self.assertEqual(self.portal.page.exclude_from_nav, True)\n \n     def testRights(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'copyright\'] = \'foobar\'\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.rights, \'foobar\')\n+        self.assertEqual(self.portal.page.rights, \'foobar\')\n \n     def testContributors(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'contributors\'] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(self.portal.page.contributors, (\'one\', \'two\'))\n+        self.assertEqual(self.portal.page.contributors, (\'one\', \'two\'))\n \n     def testCreators(self):\n         from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n         self.request.form[\'creators\'] = self.userList\n         view = PropertiesActionView(self.portal.page, self.request)\n         view()\n-        self.assertEquals(\n+        self.assertEqual(\n             self.portal.page.creators,\n             (\'one\', \'two\')\n         )\n \n+if HAS_AT:\n+    class PropertiesArchetypesTest(BaseTest):\n+        layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n \n-class PropertiesArchetypesTest(BaseTest):\n-    layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n-\n-    def testExcludeFromNav(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'exclude-from-nav\'] = \'yes\'\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEquals(self.portal.page.getExcludeFromNav(), True)\n-\n-    def testEffective(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEquals(\n-            DateTime(self.portal.page.EffectiveDate()).toZone(\'UTC\'),\n-            DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n-\n-    def testExpires(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEquals(\n-            DateTime(self.portal.page.ExpirationDate()).toZone(\'UTC\'),\n-            DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n+        def testExcludeFromNav(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'exclude-from-nav\'] = \'yes\'\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(self.portal.page.getExcludeFromNav(), True)\n \n-    def testRights(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'copyright\'] = \'foobar\'\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEquals(self.portal.page.Rights(), \'foobar\')\n+        def testEffective(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'effectiveDate\'] = \'1999/01/01 09:00\'\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(\n+                DateTime(self.portal.page.EffectiveDate()).toZone(\'UTC\'),\n+                DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n+\n+        def testExpires(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'expirationDate\'] = \'1999/01/01 09:00\'\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(\n+                DateTime(self.portal.page.ExpirationDate()).toZone(\'UTC\'),\n+                DateTime(\'1999/01/01 09:00\').toZone(\'UTC\'))\n+\n+        def testRights(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'copyright\'] = \'foobar\'\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(self.portal.page.Rights(), \'foobar\')\n \n-    def testContributors(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'contributors\'] = self.userList\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEquals(self.portal.page.Contributors(), (\'one\', \'two\'))\n+        def testContributors(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'contributors\'] = self.userList\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(self.portal.page.Contributors(), (\'one\', \'two\'))\n \n-    def testCreators(self):\n-        from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n-        self.request.form[\'creators\'] = self.userList\n-        view = PropertiesActionView(self.portal.page, self.request)\n-        view()\n-        self.assertEquals(self.portal.page.Creators(), (\'one\', \'two\'))\n+        def testCreators(self):\n+            from plone.app.content.browser.contents.properties import PropertiesActionView  # noqa\n+            self.request.form[\'creators\'] = self.userList\n+            view = PropertiesActionView(self.portal.page, self.request)\n+            view()\n+            self.assertEqual(self.portal.page.Creators(), (\'one\', \'two\'))\n \n \n class WorkflowTest(BaseTest):\n@@ -197,7 +200,7 @@ def testStateChange(self):\n         view = WorkflowActionView(self.portal.page, self.request)\n         view()\n         workflowTool = getToolByName(self.portal, "portal_workflow")\n-        self.assertEquals(\n+        self.assertEqual(\n             workflowTool.getInfoFor(self.portal.page, \'review_state\'),\n             \'published\')\n         # commit to update indexes in catalog\n@@ -254,7 +257,7 @@ def testStateChange(self):\n         from plone.app.content.browser.contents import ContextInfo\n         view = ContextInfo(self.portal.page, self.request)\n         result = json.loads(view())\n-        self.assertEquals(result[\'object\'][\'Title\'], \'page\')\n+        self.assertEqual(result[\'object\'][\'Title\'], \'page\')\n         self.assertTrue(len(result[\'breadcrumbs\']) > 0)\n \n \n@@ -287,7 +290,7 @@ def test_cut_object_when_locked(self):\n         lockable.lock()\n         view = CutActionView(self.portal, self.request)\n         view()\n-        self.assertEquals(len(view.errors), 1)\n+        self.assertEqual(len(view.errors), 1)\n \n \n class DeleteDXTest(BaseTest):\n@@ -333,7 +336,7 @@ def test_delete_object_when_locked(self):\n         lockable.lock()\n         view = DeleteActionView(self.portal, self.request)\n         view()\n-        self.assertEquals(len(view.errors), 1)\n+        self.assertEqual(len(view.errors), 1)\n \n     def test_delete_wrong_object_by_acquisition(self):\n         page_id = self.portal.page.id\n@@ -344,7 +347,7 @@ def test_delete_wrong_object_by_acquisition(self):\n             id=page_id,\n             title="page"\n         )\n-        self.assertEquals(p1, page_id)\n+        self.assertEqual(p1, page_id)\n         request2 = self.make_request()\n \n         # both pages exist before we delete on\n@@ -368,9 +371,10 @@ def test_delete_wrong_object_by_acquisition(self):\n         self.assertFalse(p1 in self.portal[f1])\n \n \n-class DeleteATTest(DeleteDXTest):\n+if HAS_AT:\n+    class DeleteATTest(DeleteDXTest):\n \n-    layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n+        layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n \n \n class RearrangeDXTest(BaseTest):\n@@ -541,10 +545,10 @@ def test_item_order_move_by_delta_in_plone_root(self):\n             ]\n         )\n \n+if HAS_AT:\n+    class RearrangeATTest(RearrangeDXTest):\n \n-class RearrangeATTest(RearrangeDXTest):\n-\n-    layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n+        layer = PLONE_APP_CONTENT_AT_INTEGRATION_TESTING\n \n \n class FolderFactoriesTest(unittest.TestCase):\ndiff --git a/plone/app/content/tests/test_reviewlist.py b/plone/app/content/tests/test_reviewlist.py\nindex ec1666c..6032f1f 100644\n--- a/plone/app/content/tests/test_reviewlist.py\n+++ b/plone/app/content/tests/test_reviewlist.py\n@@ -1,28 +1,36 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.testing.z2 import Browser\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+\n import transaction\n+import unittest\n \n \n-class ReviewListTestCase(PloneTestCase):\n+class ReviewListTestCase(unittest.TestCase):\n     """dsfsdaf"""\n \n-    def afterSetUp(self):\n+    layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.uf = self.portal.acl_users\n         self.uf.userFolderAddUser(\'reviewer\', \'secret\', [\'Reviewer\'], [])\n         transaction.commit()\n         self.browser = Browser(self.layer[\'app\'])\n+        self.browser.handleErrors = True\n         self.wftool = getToolByName(self.portal, \'portal_workflow\')\n \n     def createDocument(self, id, title, description):\n-        self.setRoles([\'Manager\', ])\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\', ])\n         self.portal.invokeFactory(id=id, type_name=\'Document\')\n         doc = getattr(self.portal, id)\n-        doc.setTitle(title)\n-        doc.setDescription(description)\n+        doc.title = title\n+        doc.description = description\n         # we don\'t want it in the navigation\n-        doc.setExcludeFromNav(True)\n+        doc.exclude_from_nav = True\n         doc.reindexObject()\n         transaction.commit()\n         return doc\ndiff --git a/plone/app/content/tests/test_selectdefaultpage.py b/plone/app/content/tests/test_selectdefaultpage.py\nindex 58a07bb..76779f4 100644\n--- a/plone/app/content/tests/test_selectdefaultpage.py\n+++ b/plone/app/content/tests/test_selectdefaultpage.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.app.content.testing import PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+from plone.app.content.testing import HAS_AT\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n@@ -7,6 +7,9 @@\n import transaction\n import unittest\n \n+if HAS_AT:\n+    from plone.app.content.testing import PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+\n FOLDER = {\'id\': \'testfolder\',\n           \'title\': \'Test Folder\',\n           \'description\': \'Test Folder Description\'}\n@@ -109,6 +112,7 @@ def test_default_page_action_save(self):\n         self.assertEqual(folder.getDefaultPage(), \'testdoc\')\n \n \n-class SelectDefaultPageATTestCase(SelectDefaultPageDXTestCase):\n+if HAS_AT:\n+    class SelectDefaultPageATTestCase(SelectDefaultPageDXTestCase):\n \n-    layer = PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\n+        layer = PLONE_APP_CONTENT_AT_FUNCTIONAL_TESTING\ndiff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py\nindex f9fc948..9bef312 100644\n--- a/plone/app/content/tests/test_widgets.py\n+++ b/plone/app/content/tests/test_widgets.py\n@@ -102,7 +102,7 @@ def testVocabularyQueryString(self):\n             \'query\': \'three\'\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n+        self.assertEqual(len(data[\'results\']), 1)\n \n     def testVocabularyFunctionQueryString(self):\n         """Test querying a function based vocabulary with a search string.\n@@ -113,7 +113,7 @@ def testVocabularyFunctionQueryString(self):\n             \'query\': \'third\'\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n+        self.assertEqual(len(data[\'results\']), 1)\n \n     def testVocabularyNoResults(self):\n         """Tests that the widgets displays correctly\n@@ -133,7 +133,7 @@ def testVocabularyNoResults(self):\n             \'query\': json.dumps(query)\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 0)\n+        self.assertEqual(len(data[\'results\']), 0)\n \n     def testVocabularyCatalogResults(self):\n         self.portal.invokeFactory(\'Document\', id="page", title="page")\n@@ -154,7 +154,7 @@ def testVocabularyCatalogResults(self):\n             \'attributes\': [\'UID\', \'id\', \'title\', \'path\']\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n+        self.assertEqual(len(data[\'results\']), 1)\n \n     def testVocabularyCatalogUnsafeMetadataAllowed(self):\n         """Users with permission "Modify portal content" are allowed to see\n@@ -183,7 +183,7 @@ def testVocabularyCatalogUnsafeMetadataAllowed(self):\n             ]\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(list(data[\'results\'][0].keys())), 4)\n+        self.assertEqual(len(list(data[\'results\'][0].keys())), 4)\n \n     def testVocabularyCatalogUnsafeMetadataDisallowed(self):\n         """Users without permission "Modify portal content" are not allowed to\n@@ -217,7 +217,7 @@ def testVocabularyCatalogUnsafeMetadataDisallowed(self):\n         # Only one result key should be returned, as ``commentors``,\n         # ``Creator`` and ``listCreators`` is considered unsafe and thus\n         # skipped.\n-        self.assertEquals(len(list(data[\'results\'][0].keys())), 1)\n+        self.assertEqual(len(list(data[\'results\'][0].keys())), 1)\n \n     def testVocabularyBatching(self):\n         amount = 30\n@@ -246,8 +246,8 @@ def testVocabularyBatching(self):\n             }\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 10)\n-        self.assertEquals(data[\'total\'], amount)\n+        self.assertEqual(len(data[\'results\']), 10)\n+        self.assertEqual(data[\'total\'], amount)\n \n     def testVocabularyEncoding(self):\n         """The vocabulary should not return the binary encoded token\n@@ -270,8 +270,8 @@ def testVocabularyEncoding(self):\n         results = json.loads(results)\n         result = results[\'results\'][0]\n \n-        self.assertEquals(result[\'text\'], test_val)\n-        self.assertEquals(result[\'id\'], test_val)\n+        self.assertEqual(result[\'text\'], test_val)\n+        self.assertEqual(result[\'id\'], test_val)\n \n     def testVocabularyUnauthorized(self):\n         setRoles(self.portal, TEST_USER_ID, [])\n@@ -281,7 +281,7 @@ def testVocabularyUnauthorized(self):\n             \'query\': TEST_USER_NAME\n         })\n         data = json.loads(view())\n-        self.assertEquals(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n \n     def testVocabularyMissing(self):\n         view = VocabularyView(self.portal, self.request)\n@@ -289,7 +289,7 @@ def testVocabularyMissing(self):\n             \'name\': \'vocabulary.that.does.not.exist\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n \n     def testPermissionCheckerAllowed(self):\n         # Setup a custom permission checker on the portal\n@@ -302,7 +302,7 @@ def testPermissionCheckerAllowed(self):\n             \'field\': \'allowed_field\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']),\n+        self.assertEqual(len(data[\'results\']),\n                           len(self.portal.portal_types.objectIds()))\n         _disable_permission_checker(self.portal)\n \n@@ -315,7 +315,7 @@ def testPermissionCheckerUnknownVocab(self):\n             \'field\': \'allowed_field\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(\n+        self.assertEqual(\n             data[\'error\'],\n             \'No factory with name "{}" exists.\'.format(\n                 \'vocab.does.not.exist\'))\n@@ -331,7 +331,7 @@ def testPermissionCheckerDisallowed(self):\n             \'field\': \'disallowed_field\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(data[\'error\'], \'Vocabulary lookup not allowed\')\n+        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed\')\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerShortCircuit(self):\n@@ -345,7 +345,7 @@ def testPermissionCheckerShortCircuit(self):\n             \'field\': \'disallowed_field\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(data[\'results\'], [])\n+        self.assertEqual(data[\'results\'], [])\n         _disable_permission_checker(self.portal)\n \n     def testPermissionCheckerUnknownField(self):\n@@ -411,8 +411,8 @@ def search_catalog(self, query):\n             \'attributes\': \'id\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n-        self.assertEquals(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n \n     def testSourceCollectionField(self):\n         # This test uses a collection field\n@@ -454,8 +454,8 @@ def search(self, query):\n             \'batch\': json.dumps({\'size\': 10, \'page\': 1}),\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n-        self.assertEquals(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n \n     def testSourcePermissionDenied(self):\n         from z3c.form.browser.text import TextWidget\n@@ -491,7 +491,7 @@ def search_catalog(self, query):\n         })\n         logout()\n         data = json.loads(view())\n-        self.assertEquals(data[\'error\'], \'Vocabulary lookup not allowed.\')\n+        self.assertEqual(data[\'error\'], \'Vocabulary lookup not allowed.\')\n \n     def testSourceTextQuery(self):\n         from z3c.form.browser.text import TextWidget\n@@ -517,8 +517,8 @@ def search(self, query):\n             \'attributes\': \'id\',\n         })\n         data = json.loads(view())\n-        self.assertEquals(len(data[\'results\']), 1)\n-        self.assertEquals(data[\'results\'][0][\'id\'], \'foo\')\n+        self.assertEqual(len(data[\'results\']), 1)\n+        self.assertEqual(data[\'results\'][0][\'id\'], \'foo\')\n \n     def testQueryStringConfiguration(self):\n         view = QueryStringIndexOptions(self.portal, self.request)\n@@ -580,7 +580,7 @@ def setUp(self):\n     def testFileUpload(self):\n         view = FileUploadView(self.portal, self.request)\n         from plone.namedfile.file import FileChunk\n-        chunk = FileChunk(\'foobar\')\n+        chunk = FileChunk(b\'foobar\')\n         chunk.filename = \'test.xml\'\n         self.request.form[\'file\'] = chunk\n         self.request.REQUEST_METHOD = \'POST\'\n@@ -596,7 +596,7 @@ def testFileUpload(self):\n     def testFileUploadTxt(self):\n         view = FileUploadView(self.portal, self.request)\n         from plone.namedfile.file import FileChunk\n-        chunk = FileChunk(\'foobar\')\n+        chunk = FileChunk(b\'foobar\')\n         chunk.filename = \'test.txt\'\n         self.request.form[\'file\'] = chunk\n         self.request.REQUEST_METHOD = \'POST\'\ndiff --git a/setup.py b/setup.py\nindex 132c47c..40e08eb 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -19,6 +19,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'plone content views viewlet\',\n     author=\'Plone Foundation\',\n'

