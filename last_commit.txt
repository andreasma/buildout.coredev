Repository: mockup


Branch: refs/heads/master
Date: 2020-01-21T14:58:26+01:00
Author: Thomas Desvenain (tdesvenain) <thomas.desvenain@gmail.com>
Commit: https://github.com/plone/mockup/commit/7c09c611b0c61f4c1e7f568ec25453c1111c8ec7

pat-plone-modal: onSuccess, onError and onFormError value can be the name of a function

this fixes: #825

Files changed:
A news/825.feature
M mockup/patterns/modal/pattern.js

b'diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js\nindex 565bdfacb..7fd4da6a1 100644\n--- a/mockup/patterns/modal/pattern.js\n+++ b/mockup/patterns/modal/pattern.js\n@@ -16,6 +16,9 @@\n  *    automaticallyAddButtonActions(boolean): Automatically create actions for elements matched with the buttons selector. They will use the options provided in actionOptions. (true)\n  *    loadLinksWithinModal(boolean): Automatically load links inside of the modal using AJAX. (true)\n  *    actionOptions(object): A hash of selector to options. Where options can include any of the defaults from actionOptions. Allows for the binding of events to elements in the content and provides options for handling ajax requests and displaying them in the modal. ({})\n+ *        onSuccess(Function|string): function which is called with parameters (modal, response, state, xhr, form) when form has been successfully submitted. if value is a string, this is the name of a function at window level\n+ *        onFormError(Function|string): function which is called with parameters (modal, response, state, xhr, form) when backend has sent an error after form submission. if value is a string, this is the name of a function at window level\n+ *        onError(Function|string): function which is called with parameters (xhr, textStatus, errorStatus) when form submission has failed. if value is a string, this is the name of a function at window level\n  *\n  *\n  * Documentation:\n@@ -271,10 +274,14 @@ define([\n               options.onTimeout.apply(self, xhr, errorStatus);\n             // on "error", "abort", and "parsererror"\n             } else if (options.onError) {\n-              options.onError(xhr, textStatus, errorStatus);\n+              if (typeof options.onError === \'string\') {\n+                window[options.onError](xhr, textStatus, errorStatus);\n+              } else {\n+                  options.onError(xhr, textStatus, errorStatus);\n+              }\n             } else {\n               // window.alert(_t(\'There was an error submitting the form.\'));\n-              console.log(\'error happened do something\');\n+              console.log(\'error happened\', textStatus, \' do something\');\n             }\n             self.emit(\'formActionError\', [xhr, textStatus, errorStatus]);\n           },\n@@ -285,7 +292,11 @@ define([\n             if ($(options.error, response).size() !== 0 ||\n                 $(options.formFieldError, response).size() !== 0) {\n               if (options.onFormError) {\n-                options.onFormError(self, response, state, xhr, form);\n+                if (typeof options.onFormError === \'string\') {\n+                  window[options.onFormError](self, response, state, xhr, form);\n+                } else {\n+                  options.onFormError(self, response, state, xhr, form);\n+                }\n               } else {\n                 self.redraw(response, patternOptions);\n               }\n@@ -302,7 +313,11 @@ define([\n             }\n \n             if (options.onSuccess) {\n-              options.onSuccess(self, response, state, xhr, form);\n+              if (typeof options.onSuccess === \'string\') {\n+                window[options.onSuccess](self, response, state, xhr, form);\n+              } else {\n+                  options.onSuccess(self, response, state, xhr, form);\n+              }\n             }\n \n             if (options.displayInModal === true) {\n@@ -361,8 +376,13 @@ define([\n         }).done(function(response, state, xhr) {\n           self.redraw(response, patternOptions);\n           if (options.onSuccess) {\n-            options.onSuccess(self, response, state, xhr);\n+            if (typeof options.onSuccess === \'string\') {\n+              window[options.onSuccess](self, response, state, xhr);\n+            } else {\n+                options.onSuccess(self, response, state, xhr);\n+            }\n           }\n+\n           self.emit(\'linkActionSuccess\', [response, state, xhr]);\n         }).always(function(){\n           self.loading.hide();\ndiff --git a/news/825.feature b/news/825.feature\nnew file mode 100644\nindex 000000000..9e60f0631\n--- /dev/null\n+++ b/news/825.feature\n@@ -0,0 +1,4 @@\n+pat-plone-modal: We can set a string for onSuccess, onError and onFormError\n+which is the name of a global function to call, on the model of sortable pattern.\n+This fixes https://github.com/plone/mockup/issues/825\n+[thomasdesvenain]\n'

Repository: mockup


Branch: refs/heads/master
Date: 2020-01-21T14:58:26+01:00
Author: Thomas Desvenain (tdesvenain) <thomas.desvenain@gmail.com>
Commit: https://github.com/plone/mockup/commit/a20c45d327628334fda0ff3e02779546b87d2191

pat-plone-modal: add a onRender option. fixes #891

Files changed:
A news/891.feature
M mockup/patterns/modal/pattern.js

b"diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js\nindex 7fd4da6a1..e575552e8 100644\n--- a/mockup/patterns/modal/pattern.js\n+++ b/mockup/patterns/modal/pattern.js\n@@ -111,6 +111,7 @@ define([\n       automaticallyAddButtonActions: true,\n       loadLinksWithinModal: true,\n       prependContent: '.portalMessage',\n+      onRender: null,\n       templateOptions: {\n         className: 'plone-modal fade',\n         classDialog: 'plone-modal-dialog',\n@@ -513,6 +514,14 @@ define([\n         }\n         self.$modal.data('pattern-' + self.name, self);\n         self.emit('after-render');\n+        if (options.onRender) {\n+          if (typeof options.onRender === 'string') {\n+            window[options.onRender](self);\n+          } else {\n+              options.onRender(self);\n+          }\n+        }\n+\n       }\n     },\n     reloadWindow: function() {\ndiff --git a/news/891.feature b/news/891.feature\nnew file mode 100644\nindex 000000000..7cbf7715c\n--- /dev/null\n+++ b/news/891.feature\n@@ -0,0 +1,3 @@\n+pat-plone-modal: Added an onRender option to set a callback that is called when modal is rendered.\n+This fixes https://github.com/plone/mockup/issues/891\n+[thomasdesvenain]\n"

Repository: mockup


Branch: refs/heads/master
Date: 2020-01-21T14:58:26+01:00
Author: Thomas Desvenain (tdesvenain) <thomas.desvenain@gmail.com>
Commit: https://github.com/plone/mockup/commit/9a48f5b454d3397e96b46468ba1f1abeac20170d

pat-plone-modal: If we click on a pat-plone-modal link into a mockup modal, the page is not reloaded. fixes #884

Files changed:
A news/884.fix
M mockup/patterns/modal/pattern.js

b"diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js\nindex e575552e8..c00bf80d1 100644\n--- a/mockup/patterns/modal/pattern.js\n+++ b/mockup/patterns/modal/pattern.js\n@@ -337,6 +337,10 @@ define([\n       handleLinkAction: function($action, options, patternOptions) {\n         var self = this;\n         var url;\n+        if ($action.hasClass('pat-plone-modal')) {\n+          // if link is a modal pattern, do not reload the page\n+          return ;\n+        }\n \n         // Figure out URL\n         if (options.ajaxUrl) {\ndiff --git a/news/884.fix b/news/884.fix\nnew file mode 100644\nindex 000000000..a07597b5f\n--- /dev/null\n+++ b/news/884.fix\n@@ -0,0 +1,3 @@\n+pat-plone-modal: If we click on a pat-plone-modal link into a mockup modal, the page is not reloaded.\n+This fixes https://github.com/plone/mockup/issues/884\n+[thomasdesvenain]\n"

Repository: mockup


Branch: refs/heads/master
Date: 2020-01-21T14:58:26+01:00
Author: Thomas Desvenain (tdesvenain) <thomas.desvenain@gmail.com>
Commit: https://github.com/plone/mockup/commit/d5395c786f4c37b7aef8c1adb14f0249b08f80bd

pat-select2: We can set actions on events: selecting, select, deselecting, deselect

closes #886

Files changed:
A news/886.feature
M mockup/patterns/select2/pattern.js

b"diff --git a/mockup/patterns/select2/pattern.js b/mockup/patterns/select2/pattern.js\nindex 90791699b..e191b317c 100644\n--- a/mockup/patterns/select2/pattern.js\n+++ b/mockup/patterns/select2/pattern.js\n@@ -5,6 +5,10 @@\n  *    initialValues(string): This can be a json encoded string, or a list of id:text values. Ex: Red:The Color Red,Orange:The Color Orange  This is used inside the initSelection method, if AJAX options are NOT set. (null)\n  *    vocabularyUrl(string): This is a URL to a JSON-formatted file used to populate the list (null)\n  *    allowNewItems(string): All new items to be entered into the widget(true)\n+ *    onSelecting(string|function): Name of global function or function to call when value is selecting (null)\n+ *    onSelected(string|function): Name of global function or function to call when value has been selected (null)\n+ *    onDeselecting(string|function): Name of global function or function to call when value is deselecting (null)\n+ *    onDeselected(string|function): Name of global function or function to call when value has been deselected (null)\n  *    OTHER OPTIONS(): For more options on select2 go to http://ivaynberg.github.io/select2/#documentation ()\n  *\n  * Documentation:\n@@ -205,7 +209,34 @@ define([\n           return 'select2-option-' + ob.id.toLowerCase().replace(/[ \\:\\)\\(\\[\\]\\{\\}\\_\\+\\=\\&\\*\\%\\#]/g, '-');\n         }\n       };\n+\n+      function callback(action, e) {\n+        if (!!action) {\n+          if (self.options.debug) {\n+            console.debug('callback', action, e)\n+          }\n+          if (typeof action === 'string') {\n+            action = window[action];\n+          }\n+          return action(e);\n+        } else {\n+          return action;\n+        }\n+      }\n+\n       self.$el.select2(self.options);\n+      self.$el.on('select2-selected', function(e) {\n+          callback(self.options.onSelected, e);\n+      });\n+      self.$el.on('select2-selecting', function(e) {\n+          callback(self.options.onSelecting, e);\n+      });\n+      self.$el.on('select2-deselecting', function(e) {\n+          callback(self.options.onDeselecting, e);\n+      });\n+      self.$el.on('select2-deselected', function(e) {\n+          callback(self.options.onDeselected, e);\n+      });\n       self.$select2 = self.$el.parent().find('.select2-container');\n       self.$el.parent().off('close.plone-modal.patterns');\n       if (self.options.orderable) {\ndiff --git a/news/886.feature b/news/886.feature\nnew file mode 100644\nindex 000000000..9524941ef\n--- /dev/null\n+++ b/news/886.feature\n@@ -0,0 +1 @@\n+pat-select2: we can set actions on events: selecting, select, deselecting, deselect\n"

Repository: mockup


Branch: refs/heads/master
Date: 2020-01-21T14:58:26+01:00
Author: Thomas Desvenain (tdesvenain) <thomas.desvenain@gmail.com>
Commit: https://github.com/plone/mockup/commit/8c3f8d818ac8dfed4186ccff0701692bd288f553

pat-tooltip: allow ajax content. fixes #892

Files changed:
A news/892.feature
M mockup/patterns/tooltip/pattern.js

b'diff --git a/mockup/patterns/tooltip/pattern.js b/mockup/patterns/tooltip/pattern.js\nindex 430f6eff8..a1198757b 100644\n--- a/mockup/patterns/tooltip/pattern.js\n+++ b/mockup/patterns/tooltip/pattern.js\n@@ -4,6 +4,10 @@\n  *    enterEvent(string): Event used to trigger tooltip. (\'mouseenter\')\n  *    exitEvent(string): Event used to dismiss tooltip. (\'mouseleave\')\n  *\n+ * data-pat-tooltip Configuration\n+ *    ajaxUrl(string): the ajax source of tooltip content (null). if null, tooltip displays content of title\n+ *    contentSelector(string): selects a subset of content (null)\n+ *\n  * Documentation:\n  *    # Directions\n  *\n@@ -137,6 +141,8 @@ define([\n       $(obj.currentTarget).data(\'bs.\' + this.type, self)\n     }\n \n+    self.leaving = false;\n+\n     clearTimeout(self.timeout)\n \n     self.hoverState = \'in\'\n@@ -151,6 +157,7 @@ define([\n   bootstrapTooltip.prototype.leave = function (obj) {\n     var self = obj instanceof this.constructor ?\n       obj : $(obj.currentTarget).data(\'bs.\' + this.type)\n+    self.leaving = true;\n \n     if (!self) {\n       self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n@@ -173,24 +180,22 @@ define([\n \n     if (this.hasContent() && this.enabled) {\n       this.$element.trigger(e)\n-\n       var inDom = $.contains(document.documentElement, this.$element[0])\n       if (e.isDefaultPrevented() || !inDom) return\n-      var that = this\n \n       var $tip = this.tip()\n \n       var tipId = this.getUID(this.type)\n-\n-      this.setContent()\n+      var self = this;\n+      this.setContent().then(function() {\n       $tip.attr(\'id\', tipId)\n-      this.$element.attr(\'aria-describedby\', tipId)\n+      self.$element.attr(\'aria-describedby\', tipId)\n \n-      if (this.options.animation) $tip.addClass(\'fade\')\n+      if (self.options.animation) $tip.addClass(\'fade\')\n \n-      var placement = typeof this.options.placement == \'function\' ?\n-        this.options.placement.call(this, $tip[0], this.$element[0]) :\n-        this.options.placement\n+      var placement = typeof self.options.placement == \'function\' ?\n+        self.options.placement.call(self, $tip[0], self.$element[0]) :\n+        self.options.placement\n \n       var autoToken = /\\s?auto?\\s?/i\n       var autoPlace = autoToken.test(placement)\n@@ -200,18 +205,18 @@ define([\n         .detach()\n         .css({ top: 0, left: 0, display: \'block\' })\n         .addClass(placement)\n-        .data(\'bs.\' + this.type, this)\n+        .data(\'bs.\' + self.type, self)\n \n-      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\n+      self.options.container ? $tip.appendTo(self.options.container) : $tip.insertAfter(self.$element)\n \n-      var pos          = this.getPosition()\n+      var pos          = self.getPosition()\n       var actualWidth  = $tip[0].offsetWidth\n       var actualHeight = $tip[0].offsetHeight\n \n       if (autoPlace) {\n         var orgPlacement = placement\n-        var $parent      = this.$element.parent()\n-        var parentDim    = this.getPosition($parent)\n+        var $parent      = self.$element.parent()\n+        var parentDim    = self.getPosition($parent)\n \n         placement = placement == \'bottom\' && pos.top   + pos.height       + actualHeight - parentDim.scroll > parentDim.height ? \'top\'    :\n                     placement == \'top\'    && pos.top   - parentDim.scroll - actualHeight < 0                                   ? \'bottom\' :\n@@ -224,22 +229,26 @@ define([\n           .addClass(placement)\n       }\n \n-      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n+      var calculatedOffset = self.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n \n-      this.applyPlacement(calculatedOffset, placement)\n+      self.applyPlacement(calculatedOffset, placement)\n \n       var complete = function () {\n-        that.$element.trigger(\'shown.bs.\' + that.type)\n-        that.hoverState = null\n+        self.$element.trigger(\'shown.bs.\' + self.type);\n+        self.hoverState = null;\n+        if (self.leaving) {  // prevent a race condition bug when user has leaved before complete\n+          self.leave(self);\n+        }\n       }\n \n-      $.support.transition && this.$tip.hasClass(\'fade\') ?\n+      $.support.transition && self.$tip.hasClass(\'fade\') ?\n         $tip\n           .one(\'bsTransitionEnd\', complete)\n           .emulateTransitionEnd(150) :\n         complete()\n+      })\n     }\n-  }\n+  };\n \n   bootstrapTooltip.prototype.applyPlacement = function (offset, placement) {\n     var $tip   = this.tip()\n@@ -296,12 +305,39 @@ define([\n   }\n \n   bootstrapTooltip.prototype.setContent = function () {\n-    var $tip  = this.tip()\n-    var title = this.getTitle()\n+    var $tip  = this.tip();\n+    var type = this.options.html ? \'html\' : \'text\';\n+    var selector = this.options.patTooltip ? this.options.patTooltip.contentSelector : null;\n \n-    $tip.find(\'.tooltip-inner\')[this.options.html ? \'html\' : \'text\'](title)\n-    $tip.removeClass(\'fade in top bottom left right\')\n-  }\n+    function setContent(content) {\n+      if (type === \'html\' && !!selector) {\n+        content = $(content).find(selector).html();\n+      }\n+      $tip.find(\'.tooltip-inner\')[type](content);\n+    }\n+    function removeClasses() {\n+      $tip.removeClass(\'fade in top bottom left right\')\n+    }\n+    var title = this.getTitle();\n+    var url = this.getUrl();\n+      if (!!url) {\n+        removeClasses();\n+        return $.get(url).then(function(content) {\n+          setContent(content);\n+        });\n+      } else {\n+        removeClasses();\n+        setContent(title);\n+        return new Promise(function(resolve, reject) {\n+          resolve(title)\n+        });\n+      }\n+\n+  };\n+\n+  bootstrapTooltip.prototype.getUrl = function () {\n+    return this.options.patTooltip ? this.options.patTooltip.ajaxUrl : null;\n+  };\n \n   bootstrapTooltip.prototype.hide = function () {\n     var that = this\n@@ -340,8 +376,8 @@ define([\n   }\n \n   bootstrapTooltip.prototype.hasContent = function () {\n-    return this.getTitle()\n-  }\n+    return this.getTitle() || this.getUrl();\n+  };\n \n   bootstrapTooltip.prototype.getPosition = function ($element) {\n     $element   = $element || this.$element\n@@ -394,7 +430,6 @@ define([\n     var title\n     var $e = this.$element\n     var o  = this.options\n-\n     title = $e.attr(\'data-original-title\')\n       || (typeof o.title == \'function\' ? o.title.call($e[0]) :  o.title)\n \n@@ -462,7 +497,7 @@ define([\n       placement: \'top\'\n     },\n     init: function() {\n-        if (this.options.html === \'true\') {\n+        if (this.options.html === \'true\' || this.options.html === true) {\n           // TODO: fix the parser!\n           this.options.html = true;\n         } else {\ndiff --git a/news/892.feature b/news/892.feature\nnew file mode 100644\nindex 000000000..e266ef325\n--- /dev/null\n+++ b/news/892.feature\n@@ -0,0 +1,4 @@\n+pat-tooltip: allow ajax content\n+  data-pat-tooltip can get two values:\n+  - "ajaxUrl": the url of tooltip ajax content\n+  - "contentSelector" a js selector of content to display from source content\n'

Repository: mockup


Branch: refs/heads/master
Date: 2020-01-21T14:58:26+01:00
Author: Thomas Desvenain (tdesvenain) <thomas.desvenain@gmail.com>
Commit: https://github.com/plone/mockup/commit/d9d457e923aa7f0c5f6fdf8c40720ae1d36e1f96

pat-tooltip: we can add classes and style into tooltip. fixes #893

Files changed:
A news/893.feature
M mockup/patterns/tooltip/pattern.js

b"diff --git a/mockup/patterns/tooltip/pattern.js b/mockup/patterns/tooltip/pattern.js\nindex a1198757b..dec983a83 100644\n--- a/mockup/patterns/tooltip/pattern.js\n+++ b/mockup/patterns/tooltip/pattern.js\n@@ -7,6 +7,9 @@\n  * data-pat-tooltip Configuration\n  *    ajaxUrl(string): the ajax source of tooltip content (null). if null, tooltip displays content of title\n  *    contentSelector(string): selects a subset of content (null)\n+ *    class(string): add one or several (white space separated) class to tooltip, at the .tooltip.mockup-tooltip level\n+ *    style(object): add css styles to tooltip, at the .tooltip.mockup-tooltip level\n+ *    innerStyle(object): add css styles to tooltip, at the .tooltip-inner level\n  *\n  * Documentation:\n  *    # Directions\n@@ -443,7 +446,24 @@ define([\n   }\n \n   bootstrapTooltip.prototype.tip = function () {\n-    return (this.$tip = this.$tip || $(this.options.template))\n+    if (!!this.$tip) {\n+      return this.$tip;\n+    }\n+    var $tip = this.$tip || $(this.options.template);\n+    if (this.options.patTooltip) {\n+\n+    if (this.options.patTooltip.style) {\n+      $tip.css(this.options.patTooltip.style)\n+    }\n+    if (this.options.patTooltip['class']) {\n+      $tip.addClass(this.options.patTooltip['class'])\n+    }\n+    if (this.options.patTooltip.innerStyle) {\n+      $tip.find('.tooltip-inner').css(this.options.patTooltip.innerStyle)\n+    }\n+    }\n+    this.$tip = $tip;\n+    return $tip;\n   }\n \n   bootstrapTooltip.prototype.arrow = function () {\ndiff --git a/news/893.feature b/news/893.feature\nnew file mode 100644\nindex 000000000..d169317de\n--- /dev/null\n+++ b/news/893.feature\n@@ -0,0 +1 @@\n+pat-tooltip: we can add classes and style into tooltip\n"

Repository: mockup


Branch: refs/heads/master
Date: 2020-01-21T15:00:27+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/ac06b4207e37a136811394a4b3eda87105478b40

Merge pull request #934 from plone/thomasdesvenain

fix for #891, pat-plone-modal improvement - master

Files changed:
A news/825.feature
A news/884.fix
A news/886.feature
A news/891.feature
A news/892.feature
A news/893.feature
M mockup/patterns/modal/pattern.js
M mockup/patterns/select2/pattern.js
M mockup/patterns/tooltip/pattern.js

b'diff --git a/mockup/patterns/modal/pattern.js b/mockup/patterns/modal/pattern.js\nindex 565bdfacb..c00bf80d1 100644\n--- a/mockup/patterns/modal/pattern.js\n+++ b/mockup/patterns/modal/pattern.js\n@@ -16,6 +16,9 @@\n  *    automaticallyAddButtonActions(boolean): Automatically create actions for elements matched with the buttons selector. They will use the options provided in actionOptions. (true)\n  *    loadLinksWithinModal(boolean): Automatically load links inside of the modal using AJAX. (true)\n  *    actionOptions(object): A hash of selector to options. Where options can include any of the defaults from actionOptions. Allows for the binding of events to elements in the content and provides options for handling ajax requests and displaying them in the modal. ({})\n+ *        onSuccess(Function|string): function which is called with parameters (modal, response, state, xhr, form) when form has been successfully submitted. if value is a string, this is the name of a function at window level\n+ *        onFormError(Function|string): function which is called with parameters (modal, response, state, xhr, form) when backend has sent an error after form submission. if value is a string, this is the name of a function at window level\n+ *        onError(Function|string): function which is called with parameters (xhr, textStatus, errorStatus) when form submission has failed. if value is a string, this is the name of a function at window level\n  *\n  *\n  * Documentation:\n@@ -108,6 +111,7 @@ define([\n       automaticallyAddButtonActions: true,\n       loadLinksWithinModal: true,\n       prependContent: \'.portalMessage\',\n+      onRender: null,\n       templateOptions: {\n         className: \'plone-modal fade\',\n         classDialog: \'plone-modal-dialog\',\n@@ -271,10 +275,14 @@ define([\n               options.onTimeout.apply(self, xhr, errorStatus);\n             // on "error", "abort", and "parsererror"\n             } else if (options.onError) {\n-              options.onError(xhr, textStatus, errorStatus);\n+              if (typeof options.onError === \'string\') {\n+                window[options.onError](xhr, textStatus, errorStatus);\n+              } else {\n+                  options.onError(xhr, textStatus, errorStatus);\n+              }\n             } else {\n               // window.alert(_t(\'There was an error submitting the form.\'));\n-              console.log(\'error happened do something\');\n+              console.log(\'error happened\', textStatus, \' do something\');\n             }\n             self.emit(\'formActionError\', [xhr, textStatus, errorStatus]);\n           },\n@@ -285,7 +293,11 @@ define([\n             if ($(options.error, response).size() !== 0 ||\n                 $(options.formFieldError, response).size() !== 0) {\n               if (options.onFormError) {\n-                options.onFormError(self, response, state, xhr, form);\n+                if (typeof options.onFormError === \'string\') {\n+                  window[options.onFormError](self, response, state, xhr, form);\n+                } else {\n+                  options.onFormError(self, response, state, xhr, form);\n+                }\n               } else {\n                 self.redraw(response, patternOptions);\n               }\n@@ -302,7 +314,11 @@ define([\n             }\n \n             if (options.onSuccess) {\n-              options.onSuccess(self, response, state, xhr, form);\n+              if (typeof options.onSuccess === \'string\') {\n+                window[options.onSuccess](self, response, state, xhr, form);\n+              } else {\n+                  options.onSuccess(self, response, state, xhr, form);\n+              }\n             }\n \n             if (options.displayInModal === true) {\n@@ -321,6 +337,10 @@ define([\n       handleLinkAction: function($action, options, patternOptions) {\n         var self = this;\n         var url;\n+        if ($action.hasClass(\'pat-plone-modal\')) {\n+          // if link is a modal pattern, do not reload the page\n+          return ;\n+        }\n \n         // Figure out URL\n         if (options.ajaxUrl) {\n@@ -361,8 +381,13 @@ define([\n         }).done(function(response, state, xhr) {\n           self.redraw(response, patternOptions);\n           if (options.onSuccess) {\n-            options.onSuccess(self, response, state, xhr);\n+            if (typeof options.onSuccess === \'string\') {\n+              window[options.onSuccess](self, response, state, xhr);\n+            } else {\n+                options.onSuccess(self, response, state, xhr);\n+            }\n           }\n+\n           self.emit(\'linkActionSuccess\', [response, state, xhr]);\n         }).always(function(){\n           self.loading.hide();\n@@ -493,6 +518,14 @@ define([\n         }\n         self.$modal.data(\'pattern-\' + self.name, self);\n         self.emit(\'after-render\');\n+        if (options.onRender) {\n+          if (typeof options.onRender === \'string\') {\n+            window[options.onRender](self);\n+          } else {\n+              options.onRender(self);\n+          }\n+        }\n+\n       }\n     },\n     reloadWindow: function() {\ndiff --git a/mockup/patterns/select2/pattern.js b/mockup/patterns/select2/pattern.js\nindex 90791699b..e191b317c 100644\n--- a/mockup/patterns/select2/pattern.js\n+++ b/mockup/patterns/select2/pattern.js\n@@ -5,6 +5,10 @@\n  *    initialValues(string): This can be a json encoded string, or a list of id:text values. Ex: Red:The Color Red,Orange:The Color Orange  This is used inside the initSelection method, if AJAX options are NOT set. (null)\n  *    vocabularyUrl(string): This is a URL to a JSON-formatted file used to populate the list (null)\n  *    allowNewItems(string): All new items to be entered into the widget(true)\n+ *    onSelecting(string|function): Name of global function or function to call when value is selecting (null)\n+ *    onSelected(string|function): Name of global function or function to call when value has been selected (null)\n+ *    onDeselecting(string|function): Name of global function or function to call when value is deselecting (null)\n+ *    onDeselected(string|function): Name of global function or function to call when value has been deselected (null)\n  *    OTHER OPTIONS(): For more options on select2 go to http://ivaynberg.github.io/select2/#documentation ()\n  *\n  * Documentation:\n@@ -205,7 +209,34 @@ define([\n           return \'select2-option-\' + ob.id.toLowerCase().replace(/[ \\:\\)\\(\\[\\]\\{\\}\\_\\+\\=\\&\\*\\%\\#]/g, \'-\');\n         }\n       };\n+\n+      function callback(action, e) {\n+        if (!!action) {\n+          if (self.options.debug) {\n+            console.debug(\'callback\', action, e)\n+          }\n+          if (typeof action === \'string\') {\n+            action = window[action];\n+          }\n+          return action(e);\n+        } else {\n+          return action;\n+        }\n+      }\n+\n       self.$el.select2(self.options);\n+      self.$el.on(\'select2-selected\', function(e) {\n+          callback(self.options.onSelected, e);\n+      });\n+      self.$el.on(\'select2-selecting\', function(e) {\n+          callback(self.options.onSelecting, e);\n+      });\n+      self.$el.on(\'select2-deselecting\', function(e) {\n+          callback(self.options.onDeselecting, e);\n+      });\n+      self.$el.on(\'select2-deselected\', function(e) {\n+          callback(self.options.onDeselected, e);\n+      });\n       self.$select2 = self.$el.parent().find(\'.select2-container\');\n       self.$el.parent().off(\'close.plone-modal.patterns\');\n       if (self.options.orderable) {\ndiff --git a/mockup/patterns/tooltip/pattern.js b/mockup/patterns/tooltip/pattern.js\nindex 430f6eff8..dec983a83 100644\n--- a/mockup/patterns/tooltip/pattern.js\n+++ b/mockup/patterns/tooltip/pattern.js\n@@ -4,6 +4,13 @@\n  *    enterEvent(string): Event used to trigger tooltip. (\'mouseenter\')\n  *    exitEvent(string): Event used to dismiss tooltip. (\'mouseleave\')\n  *\n+ * data-pat-tooltip Configuration\n+ *    ajaxUrl(string): the ajax source of tooltip content (null). if null, tooltip displays content of title\n+ *    contentSelector(string): selects a subset of content (null)\n+ *    class(string): add one or several (white space separated) class to tooltip, at the .tooltip.mockup-tooltip level\n+ *    style(object): add css styles to tooltip, at the .tooltip.mockup-tooltip level\n+ *    innerStyle(object): add css styles to tooltip, at the .tooltip-inner level\n+ *\n  * Documentation:\n  *    # Directions\n  *\n@@ -137,6 +144,8 @@ define([\n       $(obj.currentTarget).data(\'bs.\' + this.type, self)\n     }\n \n+    self.leaving = false;\n+\n     clearTimeout(self.timeout)\n \n     self.hoverState = \'in\'\n@@ -151,6 +160,7 @@ define([\n   bootstrapTooltip.prototype.leave = function (obj) {\n     var self = obj instanceof this.constructor ?\n       obj : $(obj.currentTarget).data(\'bs.\' + this.type)\n+    self.leaving = true;\n \n     if (!self) {\n       self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n@@ -173,24 +183,22 @@ define([\n \n     if (this.hasContent() && this.enabled) {\n       this.$element.trigger(e)\n-\n       var inDom = $.contains(document.documentElement, this.$element[0])\n       if (e.isDefaultPrevented() || !inDom) return\n-      var that = this\n \n       var $tip = this.tip()\n \n       var tipId = this.getUID(this.type)\n-\n-      this.setContent()\n+      var self = this;\n+      this.setContent().then(function() {\n       $tip.attr(\'id\', tipId)\n-      this.$element.attr(\'aria-describedby\', tipId)\n+      self.$element.attr(\'aria-describedby\', tipId)\n \n-      if (this.options.animation) $tip.addClass(\'fade\')\n+      if (self.options.animation) $tip.addClass(\'fade\')\n \n-      var placement = typeof this.options.placement == \'function\' ?\n-        this.options.placement.call(this, $tip[0], this.$element[0]) :\n-        this.options.placement\n+      var placement = typeof self.options.placement == \'function\' ?\n+        self.options.placement.call(self, $tip[0], self.$element[0]) :\n+        self.options.placement\n \n       var autoToken = /\\s?auto?\\s?/i\n       var autoPlace = autoToken.test(placement)\n@@ -200,18 +208,18 @@ define([\n         .detach()\n         .css({ top: 0, left: 0, display: \'block\' })\n         .addClass(placement)\n-        .data(\'bs.\' + this.type, this)\n+        .data(\'bs.\' + self.type, self)\n \n-      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\n+      self.options.container ? $tip.appendTo(self.options.container) : $tip.insertAfter(self.$element)\n \n-      var pos          = this.getPosition()\n+      var pos          = self.getPosition()\n       var actualWidth  = $tip[0].offsetWidth\n       var actualHeight = $tip[0].offsetHeight\n \n       if (autoPlace) {\n         var orgPlacement = placement\n-        var $parent      = this.$element.parent()\n-        var parentDim    = this.getPosition($parent)\n+        var $parent      = self.$element.parent()\n+        var parentDim    = self.getPosition($parent)\n \n         placement = placement == \'bottom\' && pos.top   + pos.height       + actualHeight - parentDim.scroll > parentDim.height ? \'top\'    :\n                     placement == \'top\'    && pos.top   - parentDim.scroll - actualHeight < 0                                   ? \'bottom\' :\n@@ -224,22 +232,26 @@ define([\n           .addClass(placement)\n       }\n \n-      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n+      var calculatedOffset = self.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n \n-      this.applyPlacement(calculatedOffset, placement)\n+      self.applyPlacement(calculatedOffset, placement)\n \n       var complete = function () {\n-        that.$element.trigger(\'shown.bs.\' + that.type)\n-        that.hoverState = null\n+        self.$element.trigger(\'shown.bs.\' + self.type);\n+        self.hoverState = null;\n+        if (self.leaving) {  // prevent a race condition bug when user has leaved before complete\n+          self.leave(self);\n+        }\n       }\n \n-      $.support.transition && this.$tip.hasClass(\'fade\') ?\n+      $.support.transition && self.$tip.hasClass(\'fade\') ?\n         $tip\n           .one(\'bsTransitionEnd\', complete)\n           .emulateTransitionEnd(150) :\n         complete()\n+      })\n     }\n-  }\n+  };\n \n   bootstrapTooltip.prototype.applyPlacement = function (offset, placement) {\n     var $tip   = this.tip()\n@@ -296,12 +308,39 @@ define([\n   }\n \n   bootstrapTooltip.prototype.setContent = function () {\n-    var $tip  = this.tip()\n-    var title = this.getTitle()\n+    var $tip  = this.tip();\n+    var type = this.options.html ? \'html\' : \'text\';\n+    var selector = this.options.patTooltip ? this.options.patTooltip.contentSelector : null;\n \n-    $tip.find(\'.tooltip-inner\')[this.options.html ? \'html\' : \'text\'](title)\n-    $tip.removeClass(\'fade in top bottom left right\')\n-  }\n+    function setContent(content) {\n+      if (type === \'html\' && !!selector) {\n+        content = $(content).find(selector).html();\n+      }\n+      $tip.find(\'.tooltip-inner\')[type](content);\n+    }\n+    function removeClasses() {\n+      $tip.removeClass(\'fade in top bottom left right\')\n+    }\n+    var title = this.getTitle();\n+    var url = this.getUrl();\n+      if (!!url) {\n+        removeClasses();\n+        return $.get(url).then(function(content) {\n+          setContent(content);\n+        });\n+      } else {\n+        removeClasses();\n+        setContent(title);\n+        return new Promise(function(resolve, reject) {\n+          resolve(title)\n+        });\n+      }\n+\n+  };\n+\n+  bootstrapTooltip.prototype.getUrl = function () {\n+    return this.options.patTooltip ? this.options.patTooltip.ajaxUrl : null;\n+  };\n \n   bootstrapTooltip.prototype.hide = function () {\n     var that = this\n@@ -340,8 +379,8 @@ define([\n   }\n \n   bootstrapTooltip.prototype.hasContent = function () {\n-    return this.getTitle()\n-  }\n+    return this.getTitle() || this.getUrl();\n+  };\n \n   bootstrapTooltip.prototype.getPosition = function ($element) {\n     $element   = $element || this.$element\n@@ -394,7 +433,6 @@ define([\n     var title\n     var $e = this.$element\n     var o  = this.options\n-\n     title = $e.attr(\'data-original-title\')\n       || (typeof o.title == \'function\' ? o.title.call($e[0]) :  o.title)\n \n@@ -408,7 +446,24 @@ define([\n   }\n \n   bootstrapTooltip.prototype.tip = function () {\n-    return (this.$tip = this.$tip || $(this.options.template))\n+    if (!!this.$tip) {\n+      return this.$tip;\n+    }\n+    var $tip = this.$tip || $(this.options.template);\n+    if (this.options.patTooltip) {\n+\n+    if (this.options.patTooltip.style) {\n+      $tip.css(this.options.patTooltip.style)\n+    }\n+    if (this.options.patTooltip[\'class\']) {\n+      $tip.addClass(this.options.patTooltip[\'class\'])\n+    }\n+    if (this.options.patTooltip.innerStyle) {\n+      $tip.find(\'.tooltip-inner\').css(this.options.patTooltip.innerStyle)\n+    }\n+    }\n+    this.$tip = $tip;\n+    return $tip;\n   }\n \n   bootstrapTooltip.prototype.arrow = function () {\n@@ -462,7 +517,7 @@ define([\n       placement: \'top\'\n     },\n     init: function() {\n-        if (this.options.html === \'true\') {\n+        if (this.options.html === \'true\' || this.options.html === true) {\n           // TODO: fix the parser!\n           this.options.html = true;\n         } else {\ndiff --git a/news/825.feature b/news/825.feature\nnew file mode 100644\nindex 000000000..9e60f0631\n--- /dev/null\n+++ b/news/825.feature\n@@ -0,0 +1,4 @@\n+pat-plone-modal: We can set a string for onSuccess, onError and onFormError\n+which is the name of a global function to call, on the model of sortable pattern.\n+This fixes https://github.com/plone/mockup/issues/825\n+[thomasdesvenain]\ndiff --git a/news/884.fix b/news/884.fix\nnew file mode 100644\nindex 000000000..a07597b5f\n--- /dev/null\n+++ b/news/884.fix\n@@ -0,0 +1,3 @@\n+pat-plone-modal: If we click on a pat-plone-modal link into a mockup modal, the page is not reloaded.\n+This fixes https://github.com/plone/mockup/issues/884\n+[thomasdesvenain]\ndiff --git a/news/886.feature b/news/886.feature\nnew file mode 100644\nindex 000000000..9524941ef\n--- /dev/null\n+++ b/news/886.feature\n@@ -0,0 +1 @@\n+pat-select2: we can set actions on events: selecting, select, deselecting, deselect\ndiff --git a/news/891.feature b/news/891.feature\nnew file mode 100644\nindex 000000000..7cbf7715c\n--- /dev/null\n+++ b/news/891.feature\n@@ -0,0 +1,3 @@\n+pat-plone-modal: Added an onRender option to set a callback that is called when modal is rendered.\n+This fixes https://github.com/plone/mockup/issues/891\n+[thomasdesvenain]\ndiff --git a/news/892.feature b/news/892.feature\nnew file mode 100644\nindex 000000000..e266ef325\n--- /dev/null\n+++ b/news/892.feature\n@@ -0,0 +1,4 @@\n+pat-tooltip: allow ajax content\n+  data-pat-tooltip can get two values:\n+  - "ajaxUrl": the url of tooltip ajax content\n+  - "contentSelector" a js selector of content to display from source content\ndiff --git a/news/893.feature b/news/893.feature\nnew file mode 100644\nindex 000000000..d169317de\n--- /dev/null\n+++ b/news/893.feature\n@@ -0,0 +1 @@\n+pat-tooltip: we can add classes and style into tooltip\n'

