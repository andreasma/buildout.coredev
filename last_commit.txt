Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-12T01:09:26+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/1155edeac109c1fae1f88959854f2f5c64b0ffd0

isort

Files changed:
M plone/app/upgrade/__init__.py
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v40/tests.py
M plone/app/upgrade/v41/alphas.py
M plone/app/upgrade/v41/betas.py
M plone/app/upgrade/v41/final.py
M plone/app/upgrade/v41/tests.py
M plone/app/upgrade/v42/alphas.py
M plone/app/upgrade/v42/betas.py
M plone/app/upgrade/v42/final.py
M plone/app/upgrade/v42/tests.py
M plone/app/upgrade/v43/alphas.py
M plone/app/upgrade/v43/final.py
M plone/app/upgrade/v43/tests.py
M plone/app/upgrade/v50/alphas.py
M plone/app/upgrade/v50/betas.py
M plone/app/upgrade/v50/testing.py
M plone/app/upgrade/v50/tests.py
M plone/app/upgrade/v51/betas.py
M plone/app/upgrade/v51/tests.py
M plone/app/upgrade/v52/tests.py
M setup.py

diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index ea81e09a..dce1e94e 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -1,8 +1,10 @@
-import pkg_resources
-import sys
 from plone.app.upgrade.utils import alias_module
+
 import bbb
 import bbbd
+import pkg_resources
+import sys
+
 
 try:
     from zope.app.cache.interfaces.ram import IRAMCache
diff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py
index a9a58b50..d1b64012 100644
--- a/plone/app/upgrade/tests/base.py
+++ b/plone/app/upgrade/tests/base.py
@@ -2,11 +2,11 @@
 from os.path import abspath
 from os.path import dirname
 from os.path import join
-from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import FunctionalTesting
-from plone.app.testing.bbb import PTC_FIXTURE
+from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.bbb import PloneTestCase
+from plone.app.testing.bbb import PTC_FIXTURE
 from Products.CMFCore.interfaces import IActionCategory
 from Products.CMFCore.interfaces import IActionInfo
 from Products.CMFCore.utils import getToolByName
@@ -17,6 +17,7 @@
 import transaction
 import warnings
 
+
 #
 # Base TestCase for upgrades
 #
diff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py
index 67714634..ed7b7808 100644
--- a/plone/app/upgrade/tests/test_upgrade.py
+++ b/plone/app/upgrade/tests/test_upgrade.py
@@ -1,7 +1,8 @@
-from Products.CMFPlone.factory import _DEFAULT_PROFILE
-from Products.CMFCore.utils import getToolByName
-from plone.app.upgrade.utils import version_match
 from plone.app.upgrade.tests.base import MigrationTest
+from plone.app.upgrade.utils import version_match
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.factory import _DEFAULT_PROFILE
+
 import mock
 
 
diff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py
index 55db3446..1343f103 100644
--- a/plone/app/upgrade/tests/test_utils.py
+++ b/plone/app/upgrade/tests/test_utils.py
@@ -1,6 +1,6 @@
-from Products.CMFCore.utils import getToolByName
-from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade import utils
+from plone.app.upgrade.tests.base import MigrationTest
+from Products.CMFCore.utils import getToolByName
 
 
 class TestUtils(MigrationTest):
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index b2bbc3ba..757e2771 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -1,33 +1,31 @@
-import transaction
-
-from zope.component import queryMultiAdapter
-from zope.component import getUtilitiesFor
-from zope.component import getSiteManager, getUtility
-from zope.ramcache.interfaces.ram import IRAMCache
-from zope.ramcache.ram import RAMCache
-
 from Acquisition import aq_base
 from Acquisition import aq_get
-from Products.CMFCore.CachingPolicyManager import manage_addCachingPolicyManager
-from Products.CMFCore.interfaces import ICachingPolicyManager
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.setuphandlers import addCacheHandlers
-from Products.CMFPlone.setuphandlers import addCacheForResourceRegistry
-from Products.MailHost.MailHost import MailHost
-from Products.MailHost.interfaces import IMailHost
-from zExceptions import NotFound
-from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
-
 from plone.app.upgrade.utils import cleanUpSkinsTool as generalCleanUpSkinsTool
-from plone.app.upgrade.utils import logger
 from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import logger
 from plone.app.upgrade.utils import unregisterSteps
+from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
 from plone.portlet.static.static import IStaticPortlet
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletAssignmentSettings
 from plone.portlets.interfaces import IPortletManager
-
+from Products.CMFCore.CachingPolicyManager import manage_addCachingPolicyManager
 from Products.CMFCore.Expression import Expression
+from Products.CMFCore.interfaces import ICachingPolicyManager
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.setuphandlers import addCacheForResourceRegistry
+from Products.CMFPlone.setuphandlers import addCacheHandlers
+from Products.MailHost.interfaces import IMailHost
+from Products.MailHost.MailHost import MailHost
+from zExceptions import NotFound
+from zope.component import getSiteManager
+from zope.component import getUtilitiesFor
+from zope.component import getUtility
+from zope.component import queryMultiAdapter
+from zope.ramcache.interfaces.ram import IRAMCache
+from zope.ramcache.ram import RAMCache
+
+import transaction
 
 
 _KNOWN_ACTION_ICONS = {
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index 75bee1b5..eedff5ee 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -1,11 +1,11 @@
-import transaction
+from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import logger
+from plone.app.upgrade.utils import updateIconsInBrains
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.CatalogTool import BLACKLISTED_INTERFACES
 from zope.dottedname.resolve import resolve
 
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import updateIconsInBrains
+import transaction
 
 
 def alpha5_beta1(context):
diff --git a/plone/app/upgrade/v40/tests.py b/plone/app/upgrade/v40/tests.py
index 2a5b836f..d1ec2b35 100644
--- a/plone/app/upgrade/v40/tests.py
+++ b/plone/app/upgrade/v40/tests.py
@@ -1,41 +1,38 @@
-import time
-
-from zope.component import getMultiAdapter
-from zope.component import getSiteManager
-from zope.component import getUtility
-from zope.component import queryUtility
-from zope.ramcache.interfaces.ram import IRAMCache
-
-from Products.CMFCore.ActionInformation import Action
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.utils import getToolByName
-from Products.MailHost.interfaces import IMailHost
-
+from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import version_match
 from plone.app.upgrade.v40.alphas import _KNOWN_ACTION_ICONS
-from plone.app.upgrade.v40.alphas import migrateActionIcons
-from plone.app.upgrade.v40.alphas import migrateTypeIcons
 from plone.app.upgrade.v40.alphas import addOrReplaceRamCache
-from plone.app.upgrade.v40.alphas import changeWorkflowActorVariableExpression
+from plone.app.upgrade.v40.alphas import addRecursiveGroupsPlugin
 from plone.app.upgrade.v40.alphas import changeAuthenticatedResourcesCondition
-from plone.app.upgrade.v40.alphas import setupReferencebrowser
-from plone.app.upgrade.v40.alphas import migrateMailHost
+from plone.app.upgrade.v40.alphas import changeWorkflowActorVariableExpression
+from plone.app.upgrade.v40.alphas import cleanUpClassicThemeResources
+from plone.app.upgrade.v40.alphas import migrateActionIcons
 from plone.app.upgrade.v40.alphas import migrateFolders
+from plone.app.upgrade.v40.alphas import migrateMailHost
+from plone.app.upgrade.v40.alphas import migrateStaticTextPortlets
+from plone.app.upgrade.v40.alphas import migrateTypeIcons
 from plone.app.upgrade.v40.alphas import renameJoinFormFields
+from plone.app.upgrade.v40.alphas import setupReferencebrowser
 from plone.app.upgrade.v40.alphas import updateLargeFolderType
-from plone.app.upgrade.v40.alphas import addRecursiveGroupsPlugin
-from plone.app.upgrade.v40.alphas import cleanUpClassicThemeResources
-from plone.app.upgrade.v40.alphas import migrateStaticTextPortlets
+from plone.app.upgrade.v40.betas import removeLargePloneFolder
 from plone.app.upgrade.v40.betas import repositionRecursiveGroupsPlugin
 from plone.app.upgrade.v40.betas import updateIconMetadata
-from plone.app.upgrade.v40.betas import removeLargePloneFolder
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import version_match
-
 from plone.portlet.static import static
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletAssignmentSettings
 from plone.portlets.interfaces import IPortletManager
+from Products.CMFCore.ActionInformation import Action
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.utils import getToolByName
+from Products.MailHost.interfaces import IMailHost
+from zope.component import getMultiAdapter
+from zope.component import getSiteManager
+from zope.component import getUtility
+from zope.component import queryUtility
+from zope.ramcache.interfaces.ram import IRAMCache
+
+import time
 
 
 class FakeSecureMailHost(object):
diff --git a/plone/app/upgrade/v41/alphas.py b/plone/app/upgrade/v41/alphas.py
index ea410a57..ac26f417 100644
--- a/plone/app/upgrade/v41/alphas.py
+++ b/plone/app/upgrade/v41/alphas.py
@@ -1,12 +1,9 @@
-import logging
-
-import pkg_resources
-import transaction
 from BTrees.IIBTree import IIBTree
 from BTrees.IIBTree import IISet
 from BTrees.IIBTree import IITreeSet
-from BTrees.OIBTree import OIBTree
 from BTrees.Length import Length
+from BTrees.OIBTree import OIBTree
+from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.rolemap import RolemapExportConfigurator
 from Products.PluginIndexes.BooleanIndex.BooleanIndex import BooleanIndex
@@ -15,7 +12,10 @@
 from Products.PluginIndexes.KeywordIndex.KeywordIndex import KeywordIndex
 from Products.PluginIndexes.UUIDIndex.UUIDIndex import UUIDIndex
 
-from plone.app.upgrade.utils import loadMigrationProfile
+import logging
+import pkg_resources
+import transaction
+
 
 logger = logging.getLogger('plone.app.upgrade')
 
diff --git a/plone/app/upgrade/v41/betas.py b/plone/app/upgrade/v41/betas.py
index 946608a4..be6f5e76 100644
--- a/plone/app/upgrade/v41/betas.py
+++ b/plone/app/upgrade/v41/betas.py
@@ -1,16 +1,15 @@
-import transaction
+from BTrees.IIBTree import IISet
+from BTrees.IIBTree import IITreeSet
+from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import logger
+from plone.app.upgrade.v40.betas import fix_cataloged_interface_names
 from Products.CMFCore.utils import getToolByName
 from Products.PluginIndexes.BooleanIndex.BooleanIndex import BooleanIndex
 from Products.PluginIndexes.DateRangeIndex.DateRangeIndex import DateRangeIndex
-from BTrees.IIBTree import IISet
-from BTrees.IIBTree import IITreeSet
-
 from zope.event import notify
 from zope.lifecycleevent import ObjectCreatedEvent
 
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.v40.betas import fix_cataloged_interface_names
+import transaction
 
 
 def optimize_rangeindex_floor_ceiling(index):
diff --git a/plone/app/upgrade/v41/final.py b/plone/app/upgrade/v41/final.py
index 85475d55..f5d5cd42 100644
--- a/plone/app/upgrade/v41/final.py
+++ b/plone/app/upgrade/v41/final.py
@@ -1,10 +1,11 @@
-import logging
-
-from plone.app.upgrade.utils import loadMigrationProfile
+from BTrees.Length import Length
 from plone.app.upgrade.utils import installOrReinstallProduct
+from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
 from Products.ZCTextIndex.OkapiIndex import OkapiIndex
-from BTrees.Length import Length
+
+import logging
+
 
 logger = logging.getLogger('plone.app.upgrade')
 
diff --git a/plone/app/upgrade/v41/tests.py b/plone/app/upgrade/v41/tests.py
index 6792b883..3a4cc631 100644
--- a/plone/app/upgrade/v41/tests.py
+++ b/plone/app/upgrade/v41/tests.py
@@ -1,7 +1,9 @@
-import unittest
 from Products.ZCatalog.ZCatalog import ZCatalog
-from Products.ZCTextIndex.ZCTextIndex import ZCTextIndex, PLexicon
 from Products.ZCTextIndex.OkapiIndex import OkapiIndex
+from Products.ZCTextIndex.ZCTextIndex import PLexicon
+from Products.ZCTextIndex.ZCTextIndex import ZCTextIndex
+
+import unittest
 
 
 class MigrationUnitTests(unittest.TestCase):
diff --git a/plone/app/upgrade/v42/alphas.py b/plone/app/upgrade/v42/alphas.py
index c095f3bc..73712c56 100644
--- a/plone/app/upgrade/v42/alphas.py
+++ b/plone/app/upgrade/v42/alphas.py
@@ -1,6 +1,8 @@
-import logging
 from plone.app.upgrade.utils import loadMigrationProfile
 
+import logging
+
+
 logger = logging.getLogger('plone.app.upgrade')
 
 
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index 61efd5ba..734381b4 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -1,11 +1,11 @@
-import logging
-
 from AccessControl.Permission import Permission
-
-from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import installOrReinstallProduct
+from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
 
+import logging
+
+
 logger = logging.getLogger('plone.app.upgrade')
 
 
diff --git a/plone/app/upgrade/v42/final.py b/plone/app/upgrade/v42/final.py
index f1eea51b..46100980 100644
--- a/plone/app/upgrade/v42/final.py
+++ b/plone/app/upgrade/v42/final.py
@@ -1,8 +1,9 @@
-import logging
 from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.upgrade import _upgrade_registry
 
+import logging
+
 
 logger = logging.getLogger('plone.app.upgrade')
 
diff --git a/plone/app/upgrade/v42/tests.py b/plone/app/upgrade/v42/tests.py
index c5aa5991..6db94fef 100644
--- a/plone/app/upgrade/v42/tests.py
+++ b/plone/app/upgrade/v42/tests.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import loadMigrationProfile
+
 import betas
 
 
diff --git a/plone/app/upgrade/v43/alphas.py b/plone/app/upgrade/v43/alphas.py
index 8588c08a..d92e65ca 100644
--- a/plone/app/upgrade/v43/alphas.py
+++ b/plone/app/upgrade/v43/alphas.py
@@ -1,12 +1,14 @@
-import logging
-import re
 from Acquisition import aq_get
-from Products.CMFCore.utils import getToolByName
-from Products.ZCatalog.ProgressHandler import ZLogHandler
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.v40.alphas import cleanUpToolRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.ZCatalog.ProgressHandler import ZLogHandler
 from Products.ZCTextIndex.interfaces import IZCTextIndex
 
+import logging
+import re
+
+
 logger = logging.getLogger('plone.app.upgrade')
 num_sort_regex = re.compile('\d+')
 
diff --git a/plone/app/upgrade/v43/final.py b/plone/app/upgrade/v43/final.py
index 13b9317f..bf18dc33 100644
--- a/plone/app/upgrade/v43/final.py
+++ b/plone/app/upgrade/v43/final.py
@@ -1,15 +1,14 @@
-import logging
+from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import unregisterSteps
+from plone.app.upgrade.v43.alphas import upgradeTinyMCEAgain
+from plone.contentrules.engine.assignments import check_rules_with_dotted_name_moved
+from plone.contentrules.engine.interfaces import IRuleStorage
 from Products.CMFCore.utils import getToolByName
-
 from zope.component import getAllUtilitiesRegisteredFor
 from zope.component import queryUtility
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.engine.assignments import \
-    check_rules_with_dotted_name_moved
 
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import unregisterSteps
-from plone.app.upgrade.v43.alphas import upgradeTinyMCEAgain
+import logging
+
 
 # We had our own version of this, but it was just a copy.  We keep a
 # reference here to avoid breakage if someone imports it.
diff --git a/plone/app/upgrade/v43/tests.py b/plone/app/upgrade/v43/tests.py
index e075d43e..aa074d7d 100644
--- a/plone/app/upgrade/v43/tests.py
+++ b/plone/app/upgrade/v43/tests.py
@@ -1,9 +1,3 @@
-from zope.component import getAdapters, queryMultiAdapter
-from zope.component import getSiteManager
-from zope.contentprovider.interfaces import IContentProvider
-from zope.interface import implementer
-from zope.viewlet.interfaces import IViewlet
-
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
@@ -11,9 +5,16 @@
 from Products.CMFPlone.utils import getFSVersionTuple
 from Products.GenericSetup import profile_registry
 from Products.GenericSetup.interfaces import EXTENSION
+from zope.component import getAdapters
+from zope.component import getSiteManager
+from zope.component import queryMultiAdapter
+from zope.contentprovider.interfaces import IContentProvider
+from zope.interface import implementer
+from zope.viewlet.interfaces import IViewlet
 
 import alphas
 
+
 try:
     from Products.CMFCore.indexing import processQueue
 except ImportError:
diff --git a/plone/app/upgrade/v50/alphas.py b/plone/app/upgrade/v50/alphas.py
index 87c9a20b..c31a79b5 100644
--- a/plone/app/upgrade/v50/alphas.py
+++ b/plone/app/upgrade/v50/alphas.py
@@ -1,18 +1,9 @@
 # -*- coding: utf-8 -*-
-import logging
-import pkg_resources
-
-from Acquisition import aq_parent, aq_base
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces import IEditingSchema
-from Products.CMFPlone.interfaces import IMaintenanceSchema
-from Products.CMFPlone.interfaces import INavigationSchema
-from Products.CMFPlone.interfaces import ISearchSchema
-from Products.CMFPlone.interfaces import ISiteSchema
-from Products.CMFPlone.utils import safe_unicode
+from Acquisition import aq_base
+from Acquisition import aq_parent
 from plone.app.theming.interfaces import IThemeSettings
-from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import get_property
+from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.v40.alphas import cleanUpToolRegistry
 from plone.app.vocabularies.types import BAD_TYPES
 from plone.keyring.interfaces import IKeyManager
@@ -20,6 +11,13 @@
 from plone.keyring.keyring import Keyring
 from plone.protect.interfaces import IDisableCSRFProtection
 from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import IEditingSchema
+from Products.CMFPlone.interfaces import IMaintenanceSchema
+from Products.CMFPlone.interfaces import INavigationSchema
+from Products.CMFPlone.interfaces import ISearchSchema
+from Products.CMFPlone.interfaces import ISiteSchema
+from Products.CMFPlone.utils import safe_unicode
 from zope.component import getSiteManager
 from zope.component import getUtility
 from zope.component.hooks import getSite
@@ -27,6 +25,10 @@
 from zope.interface import alsoProvides
 from zope.schema.interfaces import ConstraintNotSatisfied
 
+import logging
+import pkg_resources
+
+
 try:
     pkg_resources.get_distribution('plone.app.caching')
 except pkg_resources.DistributionNotFound:
diff --git a/plone/app/upgrade/v50/betas.py b/plone/app/upgrade/v50/betas.py
index ce1af4d8..c2e14956 100644
--- a/plone/app/upgrade/v50/betas.py
+++ b/plone/app/upgrade/v50/betas.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.linkintegrity.upgrades import migrate_linkintegrity_relations
-from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import get_property
+from plone.app.upgrade.utils import loadMigrationProfile
 from plone.registry.interfaces import IRegistry
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.utils import getToolByName
diff --git a/plone/app/upgrade/v50/testing.py b/plone/app/upgrade/v50/testing.py
index 165f5a1e..e48a0447 100644
--- a/plone/app/upgrade/v50/testing.py
+++ b/plone/app/upgrade/v50/testing.py
@@ -1,13 +1,16 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import PloneSandboxLayer
 from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import PloneSandboxLayer
 from plone.app.upgrade.utils import loadMigrationProfile
-from plone.testing.z2 import FunctionalTesting, login
+from plone.testing.z2 import FunctionalTesting
+from plone.testing.z2 import login
 from zope.component.hooks import setSite
 from zope.configuration import xmlconfig
+
 import logging
 import os
 
+
 logger = logging.getLogger(__file__)
 
 
diff --git a/plone/app/upgrade/v50/tests.py b/plone/app/upgrade/v50/tests.py
index f66f456f..3cd60bd4 100644
--- a/plone/app/upgrade/v50/tests.py
+++ b/plone/app/upgrade/v50/tests.py
@@ -14,6 +14,7 @@
 
 import unittest
 
+
 try:
     from Products.CMFPlone.factory import _IMREALLYPLONE5
     _IMREALLYPLONE5  # pyflakes
diff --git a/plone/app/upgrade/v51/betas.py b/plone/app/upgrade/v51/betas.py
index b0d45ffb..3ed32ca5 100644
--- a/plone/app/upgrade/v51/betas.py
+++ b/plone/app/upgrade/v51/betas.py
@@ -8,6 +8,7 @@
 from Products.ZCatalog.ProgressHandler import ZLogHandler
 from zExceptions import NotFound
 from zope.component import getUtility
+
 import logging
 
 
diff --git a/plone/app/upgrade/v51/tests.py b/plone/app/upgrade/v51/tests.py
index 0007e63f..d6bb77a9 100644
--- a/plone/app/upgrade/v51/tests.py
+++ b/plone/app/upgrade/v51/tests.py
@@ -1,12 +1,13 @@
 # -*- coding: utf-8 -*-
 from plone.app.testing import PLONE_INTEGRATION_TESTING
 from plone.app.upgrade.v50.testing import REAL_UPGRADE_FUNCTIONAL
-from zope.component import getUtility
 from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import IFilterSchema
+from zope.component import getUtility
 
 import unittest
 
+
 try:
     from Products.CMFPlone.factory import _IMREALLYPLONE5
     _IMREALLYPLONE5  # pyflakes
diff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py
index b4b2b2b8..29d91f32 100644
--- a/plone/app/upgrade/v52/tests.py
+++ b/plone/app/upgrade/v52/tests.py
@@ -1,12 +1,13 @@
 # -*- coding: utf-8 -*-
 from plone.app.testing import PLONE_INTEGRATION_TESTING
 from plone.app.upgrade.v50.testing import REAL_UPGRADE_FUNCTIONAL
-from zope.component import getUtility
 from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import IFilterSchema
+from zope.component import getUtility
 
 import unittest
 
+
 try:
     from Products.CMFPlone.factory import _IMREALLYPLONE5
     _IMREALLYPLONE5  # pyflakes
diff --git a/setup.py b/setup.py
index c972debc..ce4130d4 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,6 @@
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '2.0.15.dev0'
 


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-12T01:09:53+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/4c5f71b222206a77b7eec8c4ca4bc4461e22f1ef

safe autopep8

Files changed:
M plone/app/upgrade/atcontentypes_bbb.py
M plone/app/upgrade/bbb.py
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v43/final.py
M plone/app/upgrade/v50/betas.py
M plone/app/upgrade/v52/alphas.py
M plone/app/upgrade/v52/tests.py

diff --git a/plone/app/upgrade/atcontentypes_bbb.py b/plone/app/upgrade/atcontentypes_bbb.py
index 42dea06c..d5db5589 100644
--- a/plone/app/upgrade/atcontentypes_bbb.py
+++ b/plone/app/upgrade/atcontentypes_bbb.py
@@ -18,4 +18,6 @@ def __nonzero__(self):
 
 class IFactoryTool(Interface):
     pass
+
+
 registerToolInterface('portal_factory', IFactoryTool)
diff --git a/plone/app/upgrade/bbb.py b/plone/app/upgrade/bbb.py
index 9c7a28b6..377cedec 100644
--- a/plone/app/upgrade/bbb.py
+++ b/plone/app/upgrade/bbb.py
@@ -26,6 +26,8 @@ class ICalendarTool(Interface):
 
 class IActionIconsTool(Interface):
     pass
+
+
 registerToolInterface('portal_actionicons', IActionIconsTool)
 
 
diff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py
index 1343f103..50a333b9 100644
--- a/plone/app/upgrade/tests/test_utils.py
+++ b/plone/app/upgrade/tests/test_utils.py
@@ -25,7 +25,8 @@ def layers_in_selection(selection_name):
         difference = set(existing) ^ set(skins)
         self.assertEqual(len(skins.keys()), len(existing),
                          msg='Skink difference is: {}'.format(list(difference)))
-        difference = set(layers_in_selection(selection)) ^ set(existing_layers_in_selection)
+        difference = set(layers_in_selection(selection)) ^ set(
+            existing_layers_in_selection)
         self.assertEqual(len(layers_in_selection(selection)),
                          len(existing_layers_in_selection),
                          msg='Layer difference is: {}'.format(list(difference)))
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index 757e2771..5d683e0f 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -91,7 +91,7 @@ def threeX_alpha1(context):
         if qi.is_product_installed('plonetheme.classic'):
             stool.runAllImportStepsFromProfile(
                 'profile-plonetheme.classic:default'
-                )
+            )
     # Install packages that are needed for Plone 4,
     # but don't break on Plone 5 where they are gone
     for profile in ('archetypes.referencebrowserwidget:default',
diff --git a/plone/app/upgrade/v43/final.py b/plone/app/upgrade/v43/final.py
index bf18dc33..f2aea891 100644
--- a/plone/app/upgrade/v43/final.py
+++ b/plone/app/upgrade/v43/final.py
@@ -325,7 +325,8 @@ def addSortOnProperty(context):
 
     The default value of this field is relevance.
     """
-    site_properties = getToolByName(context, 'portal_properties').site_properties
+    site_properties = getToolByName(
+        context, 'portal_properties').site_properties
     if not site_properties.hasProperty('sort_on'):
         if 'sort_on' in site_properties.__dict__:
             # fix bug if 4.3.1 pending has been tested
diff --git a/plone/app/upgrade/v50/betas.py b/plone/app/upgrade/v50/betas.py
index c2e14956..56e35b45 100644
--- a/plone/app/upgrade/v50/betas.py
+++ b/plone/app/upgrade/v50/betas.py
@@ -200,6 +200,7 @@ def to50beta2(context):
         # will only be there if from older plone instance
         pass
 
+
 # configlet id -> category
 cp_mapping = {
     # General
diff --git a/plone/app/upgrade/v52/alphas.py b/plone/app/upgrade/v52/alphas.py
index b46e8eea..1e234362 100644
--- a/plone/app/upgrade/v52/alphas.py
+++ b/plone/app/upgrade/v52/alphas.py
@@ -8,5 +8,6 @@
 
 logger = logging.getLogger('plone.app.upgrade')
 
+
 def to52alpha1(context):
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v52:to52alpha1')
diff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py
index 29d91f32..3def00c9 100644
--- a/plone/app/upgrade/v52/tests.py
+++ b/plone/app/upgrade/v52/tests.py
@@ -17,7 +17,6 @@
     PLONE_5 = True
 
 
-
 def test_suite():
     # Skip these tests on Plone 4
     if not PLONE_5:


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-12T01:10:20+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/7ea1ff603b55cf7e03804939799b15f2046306a1

Nuke trailing white space.

Files changed:
M plone/app/upgrade/v50/profiles/to_beta1/registry.xml
M plone/app/upgrade/v51/profiles/to_rc1/actions.xml

diff --git a/plone/app/upgrade/v50/profiles/to_beta1/registry.xml b/plone/app/upgrade/v50/profiles/to_beta1/registry.xml
index 98a4a0cd..f334dab4 100644
--- a/plone/app/upgrade/v50/profiles/to_beta1/registry.xml
+++ b/plone/app/upgrade/v50/profiles/to_beta1/registry.xml
@@ -136,7 +136,7 @@
 
 
   <!-- add theme mapper related -->
-  
+
     <!-- pattern -->
     <records prefix="plone.resources/mockup-patterns-filemanager"
             interface='Products.CMFPlone.interfaces.IResourceRegistry'>
diff --git a/plone/app/upgrade/v51/profiles/to_rc1/actions.xml b/plone/app/upgrade/v51/profiles/to_rc1/actions.xml
index 84096223..dc7d1272 100644
--- a/plone/app/upgrade/v51/profiles/to_rc1/actions.xml
+++ b/plone/app/upgrade/v51/profiles/to_rc1/actions.xml
@@ -1,7 +1,7 @@
 <object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">  
+   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
  <object name="user" meta_type="CMF Action Category">
-  <property name="title" i18n:translate="">User actions</property>  
+  <property name="title" i18n:translate="">User actions</property>
   <object name="dashboard" meta_type="CMF Action" i18n:domain="plone">
    <property name="title" i18n:translate="">Dashboard</property>
    <property name="description" i18n:translate=""></property>
@@ -13,6 +13,6 @@
     <element value="Portlets: Manage own portlets"/>
    </property>
    <property name="visible">True</property>
-  </object> 
- </object> 
-</object> 
+  </object>
+ </object>
+</object>


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-12T01:11:57+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/630562ce76f1341b990feb126d4545140993e7ed

More aggressive autopep8

autopep8 --in-place --ignore W690,E711,E721 --aggressive -r .

Files changed:
M plone/app/upgrade/__init__.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v43/alphas.py
M plone/app/upgrade/v50/betas.py
M plone/app/upgrade/v50/testing.py

diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index dce1e94e..52284662 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -69,7 +69,7 @@
 except ImportError:
     try:
         pkg_resources.get_distribution('Products.ATContentTypes')
-    except:
+    except BaseException:
         from plone.app.upgrade import atcontentypes_bbb
         alias_module('Products.CMFPlone.FactoryTool', atcontentypes_bbb)
     else:
@@ -82,7 +82,7 @@
 except ImportError:
     try:
         pkg_resources.get_distribution('Products.ATContentTypes')
-    except:
+    except BaseException:
         from plone.app.upgrade import atcontentypes_bbb
         alias_module('Products.CMFPlone.MetadataTool', atcontentypes_bbb)
     else:
@@ -95,7 +95,7 @@
 except ImportError:
     try:
         pkg_resources.get_distribution('Products.ATContentTypes')
-    except:
+    except BaseException:
         from plone.app.upgrade import atcontentypes_bbb
         alias_module('Products.CMFDefault.MetadataTool', atcontentypes_bbb)
     else:
@@ -126,7 +126,7 @@
     # No package in this environment requires CMFPlacefulWorkflow,
     # so no patching necessary
     pass
-except:
+except BaseException:
     from Products.CMFPlacefulWorkflow import interfaces
     alias_module(
         'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow', interfaces)
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index eedff5ee..55dd9f77 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -21,7 +21,8 @@ def repositionRecursiveGroupsPlugin(context):
     plugins = acl.plugins
     existingGroupsPlugins = plugins.listPlugins(IGroupsPlugin)
     if 'recursive_groups' in [a[0] for a in existingGroupsPlugins]:
-        while plugins.getAllPlugins('IGroupsPlugin')['active'].index('recursive_groups') < len(existingGroupsPlugins) - 1:
+        while plugins.getAllPlugins('IGroupsPlugin')['active'].index(
+                'recursive_groups') < len(existingGroupsPlugins) - 1:
             plugins.movePluginsDown(IGroupsPlugin, ['recursive_groups'])
 
 
diff --git a/plone/app/upgrade/v43/alphas.py b/plone/app/upgrade/v43/alphas.py
index d92e65ca..13a6677f 100644
--- a/plone/app/upgrade/v43/alphas.py
+++ b/plone/app/upgrade/v43/alphas.py
@@ -106,7 +106,8 @@ def upgradePloneAppTheming(context):
         return
 
     portal_setup = getToolByName(context, 'portal_setup')
-    return portal_setup.runAllImportStepsFromProfile('profile-plone.app.theming:default')
+    return portal_setup.runAllImportStepsFromProfile(
+        'profile-plone.app.theming:default')
 
 
 def upgradePloneAppJQuery(context):
diff --git a/plone/app/upgrade/v50/betas.py b/plone/app/upgrade/v50/betas.py
index 56e35b45..2f7cdeb0 100644
--- a/plone/app/upgrade/v50/betas.py
+++ b/plone/app/upgrade/v50/betas.py
@@ -168,7 +168,8 @@ def _get_enable_self_reg():
     settings.allow_anon_views_about = site_properties.getProperty(
         'allowAnonymousViewAbout', False)
 
-    # suppress migrating login names while setting use_email_as_login to existing value
+    # suppress migrating login names while setting use_email_as_login to
+    # existing value
     from Products.CMFPlone.controlpanel import events
     migrate_to_email_login = events.migrate_to_email_login
     migrate_from_email_login = events.migrate_from_email_login
diff --git a/plone/app/upgrade/v50/testing.py b/plone/app/upgrade/v50/testing.py
index e48a0447..58b33e80 100644
--- a/plone/app/upgrade/v50/testing.py
+++ b/plone/app/upgrade/v50/testing.py
@@ -37,7 +37,7 @@ def setUpPloneSite(self, portal):
             path = os.path.join(os.path.abspath(
                 os.path.dirname(__file__)), 'data', 'test-full.zexp')
             app._importObjectFromFile(path, verify=0)
-        except:
+        except BaseException:
             logger.exception('Failed to import ZEXP from old site.')
         else:
             # run upgrades


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-12T01:13:03+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/adcd9fdf9d17ee08557570c3aa3633d290d073f3

full autopep8

Files changed:
M plone/app/upgrade/utils.py
M plone/app/upgrade/v41/tests.py

diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index fe81240d..019b792c 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -50,15 +50,15 @@ def safeEditProperty(obj, key, value, data_type='string'):
 def addLinesToProperty(obj, key, values):
     if obj.hasProperty(key):
         data = getattr(obj, key)
-        if type(data) is TupleType:
+        if isinstance(data, TupleType):
             data = list(data)
-        if type(values) is ListType:
+        if isinstance(values, ListType):
             data.extend(values)
         else:
             data.append(values)
         obj._updateProperty(key, data)
     else:
-        if type(values) is not ListType:
+        if not isinstance(values, ListType):
             values = [values]
         obj._setProperty(key, values, 'lines')
 
diff --git a/plone/app/upgrade/v41/tests.py b/plone/app/upgrade/v41/tests.py
index 3a4cc631..50e50d94 100644
--- a/plone/app/upgrade/v41/tests.py
+++ b/plone/app/upgrade/v41/tests.py
@@ -18,4 +18,4 @@ def test_fixOkapiIndexes(self):
 
         from plone.app.upgrade.v41.final import fixOkapiIndexes
         fixOkapiIndexes(catalog)
-        self.assertEqual(0L, catalog.Indexes['test'].index._totaldoclen())
+        self.assertEqual(0, catalog.Indexes['test'].index._totaldoclen())


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-12T01:19:25+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/13ce07c5b0ca31f0bc67f5ae30901ef52eb9a714

Removed tabs

Files changed:
M plone/app/upgrade/v50/profiles/to_501/registry.xml
M plone/app/upgrade/v50/profiles/to_rc1/registry.xml
M plone/app/upgrade/v50/profiles/to_rc1/skins.xml

diff --git a/plone/app/upgrade/v50/profiles/to_501/registry.xml b/plone/app/upgrade/v50/profiles/to_501/registry.xml
index 0ed25745..3f2c11f0 100644
--- a/plone/app/upgrade/v50/profiles/to_501/registry.xml
+++ b/plone/app/upgrade/v50/profiles/to_501/registry.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <registry>
   <records interface="Products.CMFPlone.interfaces.ISiteSchema"
-           prefix="plone" />	
+           prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.ITinyMCESchema" prefix="plone" />
   <records prefix="plone.resources/mockup-patterns-base"
             interface='Products.CMFPlone.interfaces.IResourceRegistry'>
@@ -68,4 +68,4 @@
     </value>
   </records>
 
-</registry>
\ No newline at end of file
+</registry>
diff --git a/plone/app/upgrade/v50/profiles/to_rc1/registry.xml b/plone/app/upgrade/v50/profiles/to_rc1/registry.xml
index 9fcfb191..36002e4c 100644
--- a/plone/app/upgrade/v50/profiles/to_rc1/registry.xml
+++ b/plone/app/upgrade/v50/profiles/to_rc1/registry.xml
@@ -4,4 +4,4 @@
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IUserGroupsSettingsSchema"
            prefix="plone" />
-</registry>
\ No newline at end of file
+</registry>
diff --git a/plone/app/upgrade/v50/profiles/to_rc1/skins.xml b/plone/app/upgrade/v50/profiles/to_rc1/skins.xml
index 26d6a83d..7ac7af1e 100644
--- a/plone/app/upgrade/v50/profiles/to_rc1/skins.xml
+++ b/plone/app/upgrade/v50/profiles/to_rc1/skins.xml
@@ -2,6 +2,6 @@
 <object name="portal_skins">
  <object name="plone_forms" remove="True"/>
   <skin-path name="*">
-  	<layer name="plone_forms" remove="True"/>
- </skin-path>
+    <layer name="plone_forms" remove="True"/>
+  </skin-path>
 </object>


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-12T01:31:15+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/e8e0fa995f94dfe1c2ec6846723b7e0d16465b40

Replaced double quotes with single quotes.

Files changed:
M plone/app/upgrade/atcontentypes_bbb.py
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/tests.py
M plone/app/upgrade/v41/final.py
M plone/app/upgrade/v42/betas.py
M plone/app/upgrade/v43/alphas.py
M plone/app/upgrade/v43/final.py
M plone/app/upgrade/v43/tests.py
M plone/app/upgrade/v50/alphas.py
M plone/app/upgrade/v50/betas.py
M plone/app/upgrade/v50/tests.py
M plone/app/upgrade/v51/alphas.py
M plone/app/upgrade/v51/betas.py
M plone/app/upgrade/v51/tests.py

diff --git a/plone/app/upgrade/atcontentypes_bbb.py b/plone/app/upgrade/atcontentypes_bbb.py
index d5db5589..62b26174 100644
--- a/plone/app/upgrade/atcontentypes_bbb.py
+++ b/plone/app/upgrade/atcontentypes_bbb.py
@@ -7,12 +7,12 @@
 
 
 class FactoryTool(SimpleItem):
-    ''' Compatibility code for portal_factory
-    '''
+    """ Compatibility code for portal_factory
+    """
 
     def __nonzero__(self):
-        ''' Always evaluate to False
-        '''
+        """ Always evaluate to False
+        """
         return 0
 
 
diff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py
index ed7b7808..fb10c36a 100644
--- a/plone/app/upgrade/tests/test_upgrade.py
+++ b/plone/app/upgrade/tests/test_upgrade.py
@@ -9,7 +9,7 @@
 class TestUpgrade(MigrationTest):
 
     def afterSetUp(self):
-        self.setup = getToolByName(self.portal, "portal_setup")
+        self.setup = getToolByName(self.portal, 'portal_setup')
 
     def testListUpgradeSteps(self):
         # There should be no upgrade steps from the current version
diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index 019b792c..bb9a7ea2 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -20,7 +20,7 @@
 
 logger = logging.getLogger('plone.app.upgrade')
 
-plone_version = pkg_resources.get_distribution("Products.CMFPlone").version
+plone_version = pkg_resources.get_distribution('Products.CMFPlone').version
 
 
 def version_match(target):
@@ -70,7 +70,7 @@ def saveCloneActions(actionprovider):
         # Stumbled across ancient dictionary actions
         if not hasattr(aq_base(actionprovider), '_convertActions'):
             return False, ("Can't convert actions of %s! Jumping to next "
-                           "action." % actionprovider.getId(), logging.ERROR)
+                           'action.' % actionprovider.getId(), logging.ERROR)
         else:
             actionprovider._convertActions()
             return True, actionprovider._cloneActions()
@@ -168,15 +168,15 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):
     if old_qi:
         if not qi.isProductInstalled(product_name):
             qi.installProduct(product_name, hidden=hidden)
-            logger.info("Installed %s" % product_name)
+            logger.info('Installed %s' % product_name)
         elif old_qi:
             info = qi._getOb(product_name)
             installed_version = info.getInstalledVersion()
             product_version = qi.getProductVersion(product_name)
             if installed_version != product_version:
                 qi.reinstallProducts([product_name])
-                logger.info("%s is out of date (installed: %s/ "
-                            "filesystem: %s), reinstalled." % (
+                logger.info('%s is out of date (installed: %s/ '
+                            'filesystem: %s), reinstalled.' % (
                                 product_name, installed_version,
                                 product_version))
             else:
@@ -185,10 +185,10 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):
         # New QI browser view.
         if not qi.is_product_installed(product_name):
             qi.install_product(product_name, allow_hidden=True)
-            logger.info("Installed %s" % product_name)
+            logger.info('Installed %s' % product_name)
         else:
             qi.upgrade_product(product_name)
-            logger.info("Upgraded %s", product_name)
+            logger.info('Upgraded %s', product_name)
     # Refresh skins
     portal.clearCurrentSkin()
     if getattr(portal, 'REQUEST', None):
@@ -197,7 +197,7 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):
 
 def loadMigrationProfile(context, profile, steps=_marker):
     if not ISetupTool.providedBy(context):
-        context = getToolByName(context, "portal_setup")
+        context = getToolByName(context, 'portal_setup')
     if steps is _marker:
         context.runAllImportStepsFromProfile(profile, purge_old=False)
     else:
@@ -292,7 +292,7 @@ def updateIconsInBrains(context, typesToUpdate=None):
             if not icon_expr:
                 empty_icons.append(name)
 
-    brains = search(portal_type=empty_icons, sort_on="path")
+    brains = search(portal_type=empty_icons, sort_on='path')
     num_objects = len(brains)
     pghandler = ZLogHandler(1000)
     pghandler.init('Updating getIcon metadata', num_objects)
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index 5d683e0f..65f29573 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -533,7 +533,7 @@ def update(brain):
         update(brain)
     for brain in search(Type='Large Folder'):   # just to make sure...
         update(brain)
-    logger.info('Updated `portal_type` for former "Large Folder" content')
+    logger.info("Updated `portal_type` for former 'Large Folder' content")
 
 
 def addRecursiveGroupsPlugin(context):
@@ -553,7 +553,7 @@ def addRecursiveGroupsPlugin(context):
 
     if not 'recursive_groups' in acl:
         addRecursiveGroupsPlugin(
-            acl, 'recursive_groups', "Recursive Groups Plugin")
+            acl, 'recursive_groups', 'Recursive Groups Plugin')
 
 
 def cleanUpClassicThemeResources(context):
@@ -579,7 +579,7 @@ def migrateTypeIcons(context):
         if 'content_icon' in type.__dict__:
             icon = type.content_icon
             if icon and not getattr(type, 'icon_expr', False):
-                type.icon_expr = "string:${portal_url}/%s" % icon
+                type.icon_expr = 'string:${portal_url}/%s' % icon
                 type.icon_expr_object = Expression(type.icon_expr)
                 del type.content_icon
 
diff --git a/plone/app/upgrade/v40/tests.py b/plone/app/upgrade/v40/tests.py
index d1ec2b35..5b5a4ee3 100644
--- a/plone/app/upgrade/v40/tests.py
+++ b/plone/app/upgrade/v40/tests.py
@@ -52,7 +52,7 @@ def manage_fixupOwnershipAfterAdd(self):
 
 class TestMigrations_v4_0alpha1(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:3-4alpha1"
+    profile = 'profile-plone.app.upgrade.v40:3-4alpha1'
 
     def afterSetUp(self):
         self.atool = getToolByName(self.portal, 'portal_actions')
@@ -157,37 +157,37 @@ def testContentTypeIconExpressions(self):
         FTIs should now be using icon_expr instead of content_icon.
         (The former caches the expression object.)
         """
-        tt = getToolByName(self.portal, "portal_types")
+        tt = getToolByName(self.portal, 'portal_types')
         tt.Document.icon_expr = None
         loadMigrationProfile(self.portal, self.profile, ('typeinfo', ))
         self.assertEqual(tt.Document.icon_expr,
-                         "string:${portal_url}/document_icon.png")
+                         'string:${portal_url}/document_icon.png')
 
     def testMigrateTypeIcons(self):
         """
         FTIs having content_icon should be upgraded to icon_expr.
         """
-        tt = getToolByName(self.portal, "portal_types")
+        tt = getToolByName(self.portal, 'portal_types')
         del tt.Document.icon_expr
         tt.Document.content_icon = 'document_icon.gif'
         migrateTypeIcons(self.portal)
         self.assertEqual(tt.Document.icon_expr,
-                         "string:${portal_url}/document_icon.gif")
+                         'string:${portal_url}/document_icon.gif')
         self.assertTrue(hasattr(tt.Document, 'icon_expr_object'))
 
         # Don't upgrade if there is already an icon_expr.
-        tt.Document.icon_expr = "string:${portal_url}/document_icon.png"
+        tt.Document.icon_expr = 'string:${portal_url}/document_icon.png'
         tt.Document.content_icon = 'document_icon.gif'
         migrateTypeIcons(self.portal)
         self.assertEqual(tt.Document.icon_expr,
-                         "string:${portal_url}/document_icon.png")
+                         'string:${portal_url}/document_icon.png')
 
     def testPngContentIcons(self):
-        tt = getToolByName(self.portal, "portal_types")
-        tt.Document.icon_expr = "string:${portal_url}/document_icon.gif"
+        tt = getToolByName(self.portal, 'portal_types')
+        tt.Document.icon_expr = 'string:${portal_url}/document_icon.gif'
         loadMigrationProfile(self.portal, self.profile, ('typeinfo', ))
         self.assertEqual(tt.Document.icon_expr,
-                         "string:${portal_url}/document_icon.png")
+                         'string:${portal_url}/document_icon.png')
 
     def testAddRAMCache(self):
         # Test it twice
@@ -342,8 +342,8 @@ def testMigrateStaticTextPortlets(self):
         class HiddenAssignment(static.Assignment):
             hide = True
 
-        self.setRoles(["Manager"])
-        self.portal.invokeFactory('Folder', id="statictest")
+        self.setRoles(['Manager'])
+        self.portal.invokeFactory('Folder', id='statictest')
         folder = self.portal['statictest']
 
         manager = getUtility(
@@ -384,7 +384,7 @@ def testMigrateJoinFormFields(self):
 
 class TestMigrations_v4_0alpha3(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:4alpha2-4alpha3"
+    profile = 'profile-plone.app.upgrade.v40:4alpha2-4alpha3'
 
     def testProfile(self):
         # This tests the whole upgrade profile can be loaded
@@ -400,7 +400,7 @@ def testJoinActionURL(self):
 
 class TestMigrations_v4_0alpha5(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:4alpha4-4alpha5"
+    profile = 'profile-plone.app.upgrade.v40:4alpha4-4alpha5'
 
     def testProfile(self):
         # This tests the whole upgrade profile can be loaded
@@ -476,7 +476,7 @@ def testGetEventTypeIndex(self):
 
 class TestMigrations_v4_0beta1(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:4alpha5-4beta1"
+    profile = 'profile-plone.app.upgrade.v40:4alpha5-4beta1'
 
     def testProfile(self):
         # This tests the whole upgrade profile can be loaded
@@ -510,7 +510,7 @@ def testRepositionRecursiveGroupsPlugin(self):
 
 class TestMigrations_v4_0beta2(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:4beta1-4beta2"
+    profile = 'profile-plone.app.upgrade.v40:4beta1-4beta2'
 
     def testProfile(self):
         # This tests the whole upgrade profile can be loaded
@@ -526,7 +526,7 @@ def testCoreContentIconExprCleared(self):
         front = self.portal['front-page']
         catalog.reindexObject(front)
         old_modified = front.modified()
-        # Make sure the getIcon metadata column shows the "original" value
+        # Make sure the getIcon metadata column shows the 'original' value
         brains = catalog(id='front-page')
         self.assertEqual(brains[0].getIcon, 'document_icon.png')
         # Run the migration
diff --git a/plone/app/upgrade/v41/final.py b/plone/app/upgrade/v41/final.py
index f5d5cd42..e963fa1c 100644
--- a/plone/app/upgrade/v41/final.py
+++ b/plone/app/upgrade/v41/final.py
@@ -35,7 +35,7 @@ def installPloneAppDiscussion(portal):
     # Make sure plone.app.discussion is properly installed.
     installOrReinstallProduct(
         portal,
-        "plone.app.discussion",
+        'plone.app.discussion',
         out=None,
         hidden=True)
 
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index 734381b4..8a747501 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -25,7 +25,7 @@ def installPloneAppDiscussion(portal):
     # Make sure plone.app.discussion is properly installed.
     installOrReinstallProduct(
         portal,
-        "plone.app.discussion",
+        'plone.app.discussion',
         out=None,
         hidden=True)
 
@@ -74,17 +74,17 @@ def to42rc1_discussion(context):
 
 
 def to42rc1_member_dashboard(context):
-    """Add Member role to "Portlets: View dashboard" permission
+    """Add Member role to 'Portlets: View dashboard' permission
     """
 
     p = 'Portlets: View dashboard'
     portal = getToolByName(context, 'portal_url').getPortalObject()
     roles = Permission(p, (), portal).getRoles(default=[])
-    if not "Member" in roles:
+    if not 'Member' in roles:
         acquire = isinstance(roles, list) and True or False
         roles = list(roles)
-        roles.append("Member")
-        portal.manage_permission("Portlets: View dashboard",
+        roles.append('Member')
+        portal.manage_permission('Portlets: View dashboard',
                                  roles,
                                  acquire,
                                  )
diff --git a/plone/app/upgrade/v43/alphas.py b/plone/app/upgrade/v43/alphas.py
index 13a6677f..9855d56c 100644
--- a/plone/app/upgrade/v43/alphas.py
+++ b/plone/app/upgrade/v43/alphas.py
@@ -62,7 +62,7 @@ def upgradeToI18NCaseNormalizer(context):
     for index in catalog.Indexes.objectValues():
         if IZCTextIndex.providedBy(index):
             index_id = index.getId()
-            logger.info("Reindex %s index with I18N Case Normalizer",
+            logger.info('Reindex %s index with I18N Case Normalizer',
                         index_id)
             catalog.manage_clearIndex([index_id])
             catalog.reindexIndex(index_id,
diff --git a/plone/app/upgrade/v43/final.py b/plone/app/upgrade/v43/final.py
index f2aea891..1fdbe005 100644
--- a/plone/app/upgrade/v43/final.py
+++ b/plone/app/upgrade/v43/final.py
@@ -191,7 +191,7 @@ def markProductsInstalledForUninstallableProfiles(context):
         qi.notifyInstalled(
             product_id,
             locked=False,
-            logmsg="Marked as installed by plone.app.upgrade",
+            logmsg='Marked as installed by plone.app.upgrade',
             settings={},
             installedversion=version,
             status='installed',
@@ -280,7 +280,7 @@ def removeFakeKupu(context):
             elif kupu_id in expression:
                 # We are tempted to remove this, but who knows if the
                 # expression is something like this:
-                # "'kupu_library_tool' not in portal"
+                # ''kupu_library_tool' not in portal'
                 logger.warn('%s in %s has %s in expression. You probably '
                             'want to change the expression or remove the '
                             'resource.', resource_id, tool_id, kupu_id)
diff --git a/plone/app/upgrade/v43/tests.py b/plone/app/upgrade/v43/tests.py
index aa074d7d..24cc9d6d 100644
--- a/plone/app/upgrade/v43/tests.py
+++ b/plone/app/upgrade/v43/tests.py
@@ -71,7 +71,7 @@ def testUpgradeTinyMCE(self):
                 '++resource++tinymce.kss/tinymce.kss' in kssresourceids)
 
         request = self.app.REQUEST
-        plone_view = queryMultiAdapter((self.portal, request), name="plone")
+        plone_view = queryMultiAdapter((self.portal, request), name='plone')
         manager = queryMultiAdapter(
             (self.portal, request, plone_view), IContentProvider, 'plone.htmlhead')
         viewlets = getAdapters(
@@ -103,14 +103,14 @@ def testInstallThemingPreviouslyInstalled(self):
         try:
             registry.forInterface(IThemeSettings)
         except KeyError:
-            self.fail("plone.app.theming not installed")
+            self.fail('plone.app.theming not installed')
 
     def testReindexNumericalTitle(self):
         from Products.CMFCore.utils import getToolByName
 
         # Create 2 pages, one with a numerical title
         portal = self.portal
-        self.setRoles(["Manager"])
+        self.setRoles(['Manager'])
         catalog = getToolByName(portal, 'portal_catalog')
         portal.invokeFactory(
             id='num-title', type_name='Document',
@@ -180,7 +180,7 @@ def afterSetUp(self):
         self.site_properties = pprops.site_properties
         bad_expr = ('python:portal.kupu_library_tool.isKupuEnabled'
                     '(REQUEST=request)')
-        allowed_expr = 'python:"kupu_library_tool" not in portal'
+        allowed_expr = "python:'kupu_library_tool' not in portal"
         # Setup a fake kupu with resources and settings
         self.kupu_id = 'kupu_library_tool'
         portal._setObject(self.kupu_id, PloneKupuLibraryTool(id=self.kupu_id))
diff --git a/plone/app/upgrade/v50/alphas.py b/plone/app/upgrade/v50/alphas.py
index c31a79b5..9ebc6d72 100644
--- a/plone/app/upgrade/v50/alphas.py
+++ b/plone/app/upgrade/v50/alphas.py
@@ -144,7 +144,7 @@ def lowercase_email_login(context):
     ptool = getToolByName(context, 'portal_properties')
     if ptool.site_properties.getProperty('use_email_as_login'):
         # We want the login name to be lowercase here.  This is new in PAS.
-        logger.info("Email is used as login, setting PAS login_transform to "
+        logger.info('Email is used as login, setting PAS login_transform to '
                     "'lower'.")
         # This can take a while for large sites, as it automatically
         # transforms existing login names to lowercase.  It will fail
@@ -237,7 +237,7 @@ def upgrade_editing_controlpanel_settings(context):
        registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     # get the new registry
     registry = getUtility(IRegistry)
@@ -278,7 +278,7 @@ def upgrade_maintenance_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     # get the new registry
     registry = getUtility(IRegistry)
@@ -298,10 +298,10 @@ def upgrade_navigation_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     navigation_properties = portal_properties.navtree_properties
-    types_tool = getToolByName(context, "portal_types")
+    types_tool = getToolByName(context, 'portal_types')
     # get the new registry
     registry = getUtility(IRegistry)
     settings = registry.forInterface(
@@ -336,9 +336,9 @@ def upgrade_search_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
-    types_tool = getToolByName(context, "portal_types")
+    types_tool = getToolByName(context, 'portal_types')
     # get the new registry
     registry = getUtility(IRegistry)
     settings = registry.forInterface(
@@ -365,7 +365,7 @@ def upgrade_site_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     portal = getSite()
     # get the new registry
diff --git a/plone/app/upgrade/v50/betas.py b/plone/app/upgrade/v50/betas.py
index 2f7cdeb0..8b1bbe90 100644
--- a/plone/app/upgrade/v50/betas.py
+++ b/plone/app/upgrade/v50/betas.py
@@ -58,7 +58,7 @@ def upgrade_portal_language(context):
     portal = getUtility(ISiteRoot)
     default_lang = portal.getProperty('default_language', 'en')
 
-    portal_properties = getToolByName(context, "portal_properties", None)
+    portal_properties = getToolByName(context, 'portal_properties', None)
     if portal_properties is not None:
         site_properties = getattr(portal_properties, 'site_properties', None)
         if site_properties is not None:
@@ -105,7 +105,7 @@ def upgrade_markup_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     # get the new registry
     registry = getUtility(IRegistry)
@@ -147,7 +147,7 @@ def _get_enable_self_reg():
     # get the old site properties
     portal_url = getToolByName(context, 'portal_url')
     portal = portal_url.getPortalObject()
-    portal_properties = getToolByName(portal, "portal_properties")
+    portal_properties = getToolByName(portal, 'portal_properties')
     site_properties = portal_properties.site_properties
 
     # get the new registry
@@ -190,7 +190,7 @@ def to50beta2(context):
     portal = getSite()
 
     registry = getUtility(IRegistry)
-    settings = registry.forInterface(IImagingSchema, prefix="plone")
+    settings = registry.forInterface(IImagingSchema, prefix='plone')
 
     try:
         iprops = portal.portal_properties.imaging_properties
@@ -253,9 +253,9 @@ def to50beta3(context):
         x for x in configlets
         if x.id == 'TypesSettings'
     ][0]
-    configlet.title = "Content Settings"
+    configlet.title = 'Content Settings'
     configlet.setActionExpression(
-        "string:${portal_url}/@@content-controlpanel")
+        'string:${portal_url}/@@content-controlpanel')
 
 
 def to50beta4(context):
@@ -276,7 +276,7 @@ def upgrade_usergroups_controlpanel_settings(context):
     # get the old site properties
     portal_url = getToolByName(context, 'portal_url')
     portal = portal_url.getPortalObject()
-    portal_properties = getToolByName(portal, "portal_properties")
+    portal_properties = getToolByName(portal, 'portal_properties')
     site_properties = portal_properties.site_properties
 
     # get the new registry
@@ -291,7 +291,7 @@ def upgrade_usergroups_controlpanel_settings(context):
 
 
 def migrate_displayPublicationDateInByline(context):
-    """ Migrate the "display publication date" setting to the configuration
+    """ Migrate the 'display publication date' setting to the configuration
     registry
     """
 
@@ -303,7 +303,7 @@ def migrate_displayPublicationDateInByline(context):
     # get the old site properties
     portal_url = getToolByName(context, 'portal_url')
     portal = portal_url.getPortalObject()
-    portal_properties = getToolByName(portal, "portal_properties")
+    portal_properties = getToolByName(portal, 'portal_properties')
     site_properties = portal_properties.site_properties
 
     value = site_properties.getProperty('displayPublicationDateInByline',
@@ -441,7 +441,7 @@ def upgrade_navigation_controlpanel_settings_2(context):
        only missing values not migrated before
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     navigation_properties = portal_properties.navtree_properties
     # get the new registry
     registry = getUtility(IRegistry)
diff --git a/plone/app/upgrade/v50/tests.py b/plone/app/upgrade/v50/tests.py
index 3cd60bd4..4115fce7 100644
--- a/plone/app/upgrade/v50/tests.py
+++ b/plone/app/upgrade/v50/tests.py
@@ -50,7 +50,7 @@ def test_upgrade_with_email_login(self):
         registry = getUtility(IRegistry)
         from Products.CMFPlone.interfaces import ISecuritySchema
         security_settings = registry.forInterface(ISecuritySchema,
-                                                  prefix="plone")
+                                                  prefix='plone')
         security_settings.use_email_as_login = True
 
         # Second call.
@@ -72,7 +72,7 @@ def test_footer_portletmanager_added(self):
     def test_footer_viewlets_hidden(self):
 
         storage = getUtility(IViewletSettingsStorage)
-        manager = "plone.portalfooter"
+        manager = 'plone.portalfooter'
         skinname = self.portal.getCurrentSkinName()
 
         hidden_viewlets = storage.getHidden(manager, skinname)
diff --git a/plone/app/upgrade/v51/alphas.py b/plone/app/upgrade/v51/alphas.py
index d7d81c59..55279f22 100644
--- a/plone/app/upgrade/v51/alphas.py
+++ b/plone/app/upgrade/v51/alphas.py
@@ -19,8 +19,8 @@ def _fix_typo_in_toolbar_less_variable(context):
         return
     if 'plone-toolbar-font-secondary' in registry[plv]:
         logger.warn(
-            'Try to migrate registry value "plone-toolbar-font-secundary" to '
-            '"plone-toolbar-font-secondary", but latter already exists. '
+            "Try to migrate registry value 'plone-toolbar-font-secundary' to "
+            "'plone-toolbar-font-secondary', but latter already exists. "
             'Migration to fix the typo is not executed.'
         )
         return
diff --git a/plone/app/upgrade/v51/betas.py b/plone/app/upgrade/v51/betas.py
index 3ed32ca5..0470bd5d 100644
--- a/plone/app/upgrade/v51/betas.py
+++ b/plone/app/upgrade/v51/betas.py
@@ -27,7 +27,7 @@ def addSortOnProperty(context):
     The default value of this field is relevance.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     # get the new registry
     registry = getUtility(IRegistry)
diff --git a/plone/app/upgrade/v51/tests.py b/plone/app/upgrade/v51/tests.py
index d6bb77a9..6338c605 100644
--- a/plone/app/upgrade/v51/tests.py
+++ b/plone/app/upgrade/v51/tests.py
@@ -31,7 +31,7 @@ def test_migrate_less_variable_typo(self):
 
         # set to a defined state
         plv = 'plone.lessvariables'
-        registry[plv]['plone-toolbar-font-secundary'] = "Foo"
+        registry[plv]['plone-toolbar-font-secundary'] = 'Foo'
         if 'plone-toolbar-font-secondary' in registry[plv]:
             del registry[plv]['plone-toolbar-font-secondary']
 
@@ -55,7 +55,7 @@ def setUp(self):
         self.pt = self.portal.portal_transforms
         registry = getUtility(IRegistry)
         self.settings = registry.forInterface(
-            IFilterSchema, prefix="plone")
+            IFilterSchema, prefix='plone')
 
     def test_migrate_safe_html_settings(self):
         from plone.app.upgrade.v51.betas import \


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:11:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/977b52fcb9e4094b9cdf13b4ca1f30761845e73f

Added coding magic comment.

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/upgrade/__init__.py
M plone/app/upgrade/atcontentypes_bbb.py
M plone/app/upgrade/bbb.py
M plone/app/upgrade/bbbd/LanguageTool.py
M plone/app/upgrade/bbbd/__init__.py
M plone/app/upgrade/kupu_bbb.py
M plone/app/upgrade/tests/__init__.py
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v40/__init__.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v40/tests.py
M plone/app/upgrade/v41/__init__.py
M plone/app/upgrade/v41/alphas.py
M plone/app/upgrade/v41/betas.py
M plone/app/upgrade/v41/final.py
M plone/app/upgrade/v41/tests.py
M plone/app/upgrade/v42/__init__.py
M plone/app/upgrade/v42/alphas.py
M plone/app/upgrade/v42/betas.py
M plone/app/upgrade/v42/final.py
M plone/app/upgrade/v43/__init__.py
M plone/app/upgrade/v43/alphas.py
M plone/app/upgrade/v43/betas.py
M plone/app/upgrade/v43/final.py
M plone/app/upgrade/v43/tests.py
M plone/app/upgrade/v50/__init__.py

diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad105..85880ef0 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad105..85880ef0 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index 52284662..2e433e60 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import alias_module
 
 import bbb
diff --git a/plone/app/upgrade/atcontentypes_bbb.py b/plone/app/upgrade/atcontentypes_bbb.py
index 62b26174..743f8174 100644
--- a/plone/app/upgrade/atcontentypes_bbb.py
+++ b/plone/app/upgrade/atcontentypes_bbb.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import registerToolInterface
 from zope.interface import Interface
diff --git a/plone/app/upgrade/bbb.py b/plone/app/upgrade/bbb.py
index 377cedec..89c3fc7a 100644
--- a/plone/app/upgrade/bbb.py
+++ b/plone/app/upgrade/bbb.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import registerToolInterface
 from zope.interface import Interface
diff --git a/plone/app/upgrade/bbbd/LanguageTool.py b/plone/app/upgrade/bbbd/LanguageTool.py
index fe827636..398958b9 100644
--- a/plone/app/upgrade/bbbd/LanguageTool.py
+++ b/plone/app/upgrade/bbbd/LanguageTool.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import registerToolInterface
 from zope.interface import Interface
diff --git a/plone/app/upgrade/bbbd/__init__.py b/plone/app/upgrade/bbbd/__init__.py
index 56fc51d2..f3a87461 100644
--- a/plone/app/upgrade/bbbd/__init__.py
+++ b/plone/app/upgrade/bbbd/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 from .LanguageTool import LanguageTool
diff --git a/plone/app/upgrade/kupu_bbb.py b/plone/app/upgrade/kupu_bbb.py
index 6dd9fd52..21c55c57 100644
--- a/plone/app/upgrade/kupu_bbb.py
+++ b/plone/app/upgrade/kupu_bbb.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS import SimpleItem
 
 
diff --git a/plone/app/upgrade/tests/__init__.py b/plone/app/upgrade/tests/__init__.py
index 792d6005..ec51c5a2 100644
--- a/plone/app/upgrade/tests/__init__.py
+++ b/plone/app/upgrade/tests/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 #
diff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py
index fb10c36a..fabc4886 100644
--- a/plone/app/upgrade/tests/test_upgrade.py
+++ b/plone/app/upgrade/tests/test_upgrade.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import version_match
 from Products.CMFCore.utils import getToolByName
diff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py
index 50a333b9..4d5a68fb 100644
--- a/plone/app/upgrade/tests/test_utils.py
+++ b/plone/app/upgrade/tests/test_utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade import utils
 from plone.app.upgrade.tests.base import MigrationTest
 from Products.CMFCore.utils import getToolByName
diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index bb9a7ea2..4c1f6608 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.CMFCore.DirectoryView import _dirreg
 from Products.CMFCore.utils import getToolByName
diff --git a/plone/app/upgrade/v40/__init__.py b/plone/app/upgrade/v40/__init__.py
index fafec795..bf5f7be3 100644
--- a/plone/app/upgrade/v40/__init__.py
+++ b/plone/app/upgrade/v40/__init__.py
@@ -1,2 +1,3 @@
+# -*- coding: utf-8 -*-
 import alphas
 import betas
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index 65f29573..bc9156ea 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Acquisition import aq_get
 from plone.app.upgrade.utils import cleanUpSkinsTool as generalCleanUpSkinsTool
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index 55dd9f77..d807f677 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import logger
 from plone.app.upgrade.utils import updateIconsInBrains
diff --git a/plone/app/upgrade/v40/tests.py b/plone/app/upgrade/v40/tests.py
index 5b5a4ee3..2992578e 100644
--- a/plone/app/upgrade/v40/tests.py
+++ b/plone/app/upgrade/v40/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import version_match
diff --git a/plone/app/upgrade/v41/__init__.py b/plone/app/upgrade/v41/__init__.py
index cb55214a..ea6111a4 100644
--- a/plone/app/upgrade/v41/__init__.py
+++ b/plone/app/upgrade/v41/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import alphas
 import betas
 import final
diff --git a/plone/app/upgrade/v41/alphas.py b/plone/app/upgrade/v41/alphas.py
index ac26f417..e10efb0e 100644
--- a/plone/app/upgrade/v41/alphas.py
+++ b/plone/app/upgrade/v41/alphas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from BTrees.IIBTree import IIBTree
 from BTrees.IIBTree import IISet
 from BTrees.IIBTree import IITreeSet
diff --git a/plone/app/upgrade/v41/betas.py b/plone/app/upgrade/v41/betas.py
index be6f5e76..114337b0 100644
--- a/plone/app/upgrade/v41/betas.py
+++ b/plone/app/upgrade/v41/betas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from BTrees.IIBTree import IISet
 from BTrees.IIBTree import IITreeSet
 from plone.app.upgrade.utils import loadMigrationProfile
diff --git a/plone/app/upgrade/v41/final.py b/plone/app/upgrade/v41/final.py
index e963fa1c..aca6f6f4 100644
--- a/plone/app/upgrade/v41/final.py
+++ b/plone/app/upgrade/v41/final.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from BTrees.Length import Length
 from plone.app.upgrade.utils import installOrReinstallProduct
 from plone.app.upgrade.utils import loadMigrationProfile
diff --git a/plone/app/upgrade/v41/tests.py b/plone/app/upgrade/v41/tests.py
index 50e50d94..8d27b6c9 100644
--- a/plone/app/upgrade/v41/tests.py
+++ b/plone/app/upgrade/v41/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.ZCatalog.ZCatalog import ZCatalog
 from Products.ZCTextIndex.OkapiIndex import OkapiIndex
 from Products.ZCTextIndex.ZCTextIndex import PLexicon
diff --git a/plone/app/upgrade/v42/__init__.py b/plone/app/upgrade/v42/__init__.py
index cb55214a..ea6111a4 100644
--- a/plone/app/upgrade/v42/__init__.py
+++ b/plone/app/upgrade/v42/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import alphas
 import betas
 import final
diff --git a/plone/app/upgrade/v42/alphas.py b/plone/app/upgrade/v42/alphas.py
index 73712c56..5067e0d7 100644
--- a/plone/app/upgrade/v42/alphas.py
+++ b/plone/app/upgrade/v42/alphas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 
 import logging
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index 8a747501..470bc4fa 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl.Permission import Permission
 from plone.app.upgrade.utils import installOrReinstallProduct
 from plone.app.upgrade.utils import loadMigrationProfile
diff --git a/plone/app/upgrade/v42/final.py b/plone/app/upgrade/v42/final.py
index 46100980..b9caab18 100644
--- a/plone/app/upgrade/v42/final.py
+++ b/plone/app/upgrade/v42/final.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.upgrade import _upgrade_registry
diff --git a/plone/app/upgrade/v43/__init__.py b/plone/app/upgrade/v43/__init__.py
index b40f1d89..7da8308f 100644
--- a/plone/app/upgrade/v43/__init__.py
+++ b/plone/app/upgrade/v43/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 import alphas
diff --git a/plone/app/upgrade/v43/alphas.py b/plone/app/upgrade/v43/alphas.py
index 9855d56c..f4379b93 100644
--- a/plone/app/upgrade/v43/alphas.py
+++ b/plone/app/upgrade/v43/alphas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_get
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.v40.alphas import cleanUpToolRegistry
diff --git a/plone/app/upgrade/v43/betas.py b/plone/app/upgrade/v43/betas.py
index 0b344978..eaebf65f 100644
--- a/plone/app/upgrade/v43/betas.py
+++ b/plone/app/upgrade/v43/betas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.v43.alphas import upgradeToI18NCaseNormalizer
 
diff --git a/plone/app/upgrade/v43/final.py b/plone/app/upgrade/v43/final.py
index 1fdbe005..ad876e77 100644
--- a/plone/app/upgrade/v43/final.py
+++ b/plone/app/upgrade/v43/final.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import unregisterSteps
 from plone.app.upgrade.v43.alphas import upgradeTinyMCEAgain
diff --git a/plone/app/upgrade/v43/tests.py b/plone/app/upgrade/v43/tests.py
index 24cc9d6d..328424b6 100644
--- a/plone/app/upgrade/v43/tests.py
+++ b/plone/app/upgrade/v43/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
diff --git a/plone/app/upgrade/v50/__init__.py b/plone/app/upgrade/v50/__init__.py
index e69de29b..40a96afc 100644
--- a/plone/app/upgrade/v50/__init__.py
+++ b/plone/app/upgrade/v50/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:11:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/fbfe976c30f3591a64727caabca2c611493eebd1

various qa fixes

Files changed:
M plone/app/upgrade/v50/betas.py
M plone/app/upgrade/v50/testing.py
M plone/app/upgrade/v50/tests.py
M plone/app/upgrade/v51/alphas.py
M plone/app/upgrade/v51/betas.py
M plone/app/upgrade/v51/tests.py

diff --git a/plone/app/upgrade/v50/betas.py b/plone/app/upgrade/v50/betas.py
index 8b1bbe90..9cd42a25 100644
--- a/plone/app/upgrade/v50/betas.py
+++ b/plone/app/upgrade/v50/betas.py
@@ -65,13 +65,17 @@ def upgrade_portal_language(context):
             if site_properties.hasProperty('default_language'):
                 default_lang = site_properties.getProperty('default_language')
     lang_settings.default_language = default_lang
-    if hasattr(portal, 'portal_languages'):
-        portal_languages = getSite().portal_languages
-        for old, new in LANGUAGE_OPTION_MAPPING.items():
-            if hasattr(portal_languages, old):
-                setattr(lang_settings, new, getattr(portal_languages, old))
-        # Remove the old tool
-        portal.manage_delObjects('portal_languages')
+    try:
+        portal_languages = portal.portal_languages
+    except AttributeError:
+        return
+    for old, new in LANGUAGE_OPTION_MAPPING.items():
+        try:
+            setattr(lang_settings, new, getattr(portal_languages, old))
+        except AttributeError:
+            continue
+    # Remove the old tool
+    portal.manage_delObjects('portal_languages')
 
 
 def upgrade_mail_controlpanel_settings(context):
@@ -425,7 +429,7 @@ def to50rc2(context):
     for p in properties_to_migrate:
         if site_properties.hasProperty(p):
             value = site_properties.getProperty(p)
-            registry['plone.%s' % p] = value
+            registry['plone.{0}'.format(p)] = value
             site_properties._delProperty(p)
 
     if site_properties.hasProperty('allow_external_login_sites'):
@@ -522,10 +526,10 @@ def to50rc3(context):
                 elif value.lower() == 'false':
                     value = False
             try:
-                registry['plone.%s' % p] = value
+                registry['plone.{0}'.format(p)] = value
                 site_properties._delProperty(p)
             except KeyError:
-                logger.warn('could not upgrade %s property' % p)
+                logger.warn('could not upgrade %s property', p)
 
     if site_properties.hasProperty('checkout_workflow_policy'):
         value = site_properties.getProperty('checkout_workflow_policy')
@@ -557,7 +561,7 @@ def _migrate_list(original_id, new_id=None):
         if site_properties.hasProperty(original_id):
             value = site_properties.getProperty(original_id)
             value = [safe_unicode(a) for a in value]
-            registry['plone.%s' % new_id] = value
+            registry['plone.{0}'.format(new_id)] = value
             site_properties._delProperty(original_id)
 
     _migrate_list('typesUseViewActionInListings',
diff --git a/plone/app/upgrade/v50/testing.py b/plone/app/upgrade/v50/testing.py
index 58b33e80..bef21840 100644
--- a/plone/app/upgrade/v50/testing.py
+++ b/plone/app/upgrade/v50/testing.py
@@ -5,7 +5,6 @@
 from plone.testing.z2 import FunctionalTesting
 from plone.testing.z2 import login
 from zope.component.hooks import setSite
-from zope.configuration import xmlconfig
 
 import logging
 import os
@@ -22,10 +21,9 @@ def setUpZope(self, app, configurationContext):
         # In 5.0 alpha we install or upgrade plone.app.caching,
         # so it must be available to Zope..
         import plone.app.caching
-        xmlconfig.file(
-            'configure.zcml',
-            plone.app.caching,
-            context=configurationContext
+        self.loadZCML(
+            name='configure.zcml',
+            package=plone.app.caching,
         )
 
     def setUpPloneSite(self, portal):
diff --git a/plone/app/upgrade/v50/tests.py b/plone/app/upgrade/v50/tests.py
index 4115fce7..afc31f2c 100644
--- a/plone/app/upgrade/v50/tests.py
+++ b/plone/app/upgrade/v50/tests.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import PLONE_INTEGRATION_TESTING
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.v50.testing import REAL_UPGRADE_FUNCTIONAL
 from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
@@ -132,7 +131,6 @@ class VariousTest(MigrationTest):
     def test_fix_double_smaxage(self):
         from plone.registry.interfaces import IRegistry
         from plone.registry.record import Record
-        from plone.registry import field
         from plone.registry import FieldRef
         from plone.app.upgrade.v50.final import fix_double_smaxage
         # Run the upgrade before plone.app.caching is installed,
@@ -145,7 +143,7 @@ def test_fix_double_smaxage(self):
         def_smaxage = 'plone.app.caching.strongCaching.smaxage'
         # Install default caching profile.
         portal_setup.runAllImportStepsFromProfile(
-            'plone.app.caching:default'
+            'plone.app.caching:default',
         )
         self.assertTrue(def_maxage in registry)
         self.assertTrue(def_smaxage in registry)
@@ -153,7 +151,7 @@ def test_fix_double_smaxage(self):
         fix_double_smaxage(portal_setup)
         # Install the with-caching-proxy settings.
         portal_setup.runAllImportStepsFromProfile(
-            'plone.app.caching:with-caching-proxy'
+            'plone.app.caching:with-caching-proxy',
         )
         # Run upgrade.
         fix_double_smaxage(portal_setup)
diff --git a/plone/app/upgrade/v51/alphas.py b/plone/app/upgrade/v51/alphas.py
index 55279f22..5a9d78c3 100644
--- a/plone/app/upgrade/v51/alphas.py
+++ b/plone/app/upgrade/v51/alphas.py
@@ -21,8 +21,7 @@ def _fix_typo_in_toolbar_less_variable(context):
         logger.warn(
             "Try to migrate registry value 'plone-toolbar-font-secundary' to "
             "'plone-toolbar-font-secondary', but latter already exists. "
-            'Migration to fix the typo is not executed.'
-        )
+            'Migration to fix the typo is not executed.')
         return
     registry[plv]['plone-toolbar-font-secondary'] = value
     del registry[plv]['plone-toolbar-font-secundary']
diff --git a/plone/app/upgrade/v51/betas.py b/plone/app/upgrade/v51/betas.py
index 0470bd5d..7bfa6c93 100644
--- a/plone/app/upgrade/v51/betas.py
+++ b/plone/app/upgrade/v51/betas.py
@@ -97,7 +97,7 @@ def remove_displayContentsTab_from_action_expressions(context):
     if not actions:
         return []
     script_name = 'displayContentsTab'
-    text = 'object/{}'.format(script_name)
+    text = 'object/{0}'.format(script_name)
     for ac in actions:
         if script_name not in ac.available_expr:
             continue
@@ -181,7 +181,7 @@ def reindex_mime_type(context):
         catalog.data[brain.getRID()] = tuple(record)
         cnt += 1
     pghandler.finish()
-    logger.info('Reindexed `mime_type` for %s items' % str(cnt))
+    logger.info('Reindexed `mime_type` for %s items', str(cnt))
 
 
 def move_safe_html_settings_to_registry(context):
diff --git a/plone/app/upgrade/v51/tests.py b/plone/app/upgrade/v51/tests.py
index 6338c605..457f6e02 100644
--- a/plone/app/upgrade/v51/tests.py
+++ b/plone/app/upgrade/v51/tests.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 from plone.app.testing import PLONE_INTEGRATION_TESTING
-from plone.app.upgrade.v50.testing import REAL_UPGRADE_FUNCTIONAL
 from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import IFilterSchema
 from zope.component import getUtility
@@ -41,9 +40,7 @@ def test_migrate_less_variable_typo(self):
             registry[plv]['plone-toolbar-font-secondary'],
             'Foo',
         )
-        self.assertTrue(
-            'plone-toolbar-font-secundary' not in registry[plv]
-        )
+        self.assertNotIn('plone-toolbar-font-secundary', registry[plv])
 
 
 class UpgradePortalTransforms51beta4to51beta5Test(unittest.TestCase):
@@ -75,9 +72,9 @@ def test_suite():
 
     suite = unittest.TestSuite()
     suite.addTest(
-        unittest.makeSuite(UpgradeRegistry503to51alpha1Test)
+        unittest.makeSuite(UpgradeRegistry503to51alpha1Test),
     )
     suite.addTest(
-        unittest.makeSuite(UpgradePortalTransforms51beta4to51beta5Test)
+        unittest.makeSuite(UpgradePortalTransforms51beta4to51beta5Test),
     )
     return suite


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:11:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/5ad40a2d56c263a26b63a84cff6145d633a77221

QA: fixed S001 found module formatter

Files changed:
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v41/alphas.py
M plone/app/upgrade/v41/betas.py
M plone/app/upgrade/v41/final.py
M plone/app/upgrade/v42/betas.py
M plone/app/upgrade/v50/final.py

diff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py
index 4d5a68fb..ac9506d0 100644
--- a/plone/app/upgrade/tests/test_utils.py
+++ b/plone/app/upgrade/tests/test_utils.py
@@ -24,13 +24,16 @@ def layers_in_selection(selection_name):
         # An initial cleanup should do nothing.
         utils.cleanUpSkinsTool(self.portal)
         difference = set(existing) ^ set(skins)
-        self.assertEqual(len(skins.keys()), len(existing),
-                         msg='Skink difference is: {}'.format(list(difference)))
+        self.assertEqual(
+            len(skins.keys()),
+            len(existing),
+            msg='Skink difference is: {0}'.format(list(difference)))
         difference = set(layers_in_selection(selection)) ^ set(
             existing_layers_in_selection)
-        self.assertEqual(len(layers_in_selection(selection)),
-                         len(existing_layers_in_selection),
-                         msg='Layer difference is: {}'.format(list(difference)))
+        self.assertEqual(
+            len(layers_in_selection(selection)),
+            len(existing_layers_in_selection),
+            msg='Layer difference is: {0}'.format(list(difference)))
 
         # A second cleanup should also do nothing.  We used to rename
         # plone_styles to classic_styles on the first run, which would get
@@ -52,7 +55,7 @@ def layers_in_selection(selection_name):
         registerDirectory(skin_name, globals(), subdirs=1)
         # Add the DirectoryView object to portal_skins.
         directory_info = DirectoryView(
-            skin_name, reg_key='plone.app.upgrade.tests:%s' % skin_name)
+            skin_name, reg_key='plone.app.upgrade.tests:{0}'.format(skin_name))
         skins._setObject(skin_name, directory_info)
 
         # Add its sub skins to a skin selection.
diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index 4c1f6608..b6fe5b69 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -70,8 +70,9 @@ def saveCloneActions(actionprovider):
     except AttributeError:
         # Stumbled across ancient dictionary actions
         if not hasattr(aq_base(actionprovider), '_convertActions'):
-            return False, ("Can't convert actions of %s! Jumping to next "
-                           'action.' % actionprovider.getId(), logging.ERROR)
+            return False, (
+                "Can't convert actions of {0}! Jumping to next "
+                'action.'.format(actionprovider.getId()), logging.ERROR)
         else:
             actionprovider._convertActions()
             return True, actionprovider._cloneActions()
@@ -169,24 +170,24 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):
     if old_qi:
         if not qi.isProductInstalled(product_name):
             qi.installProduct(product_name, hidden=hidden)
-            logger.info('Installed %s' % product_name)
+            logger.info('Installed %s', product_name)
         elif old_qi:
             info = qi._getOb(product_name)
             installed_version = info.getInstalledVersion()
             product_version = qi.getProductVersion(product_name)
             if installed_version != product_version:
                 qi.reinstallProducts([product_name])
-                logger.info('%s is out of date (installed: %s/ '
-                            'filesystem: %s), reinstalled.' % (
-                                product_name, installed_version,
-                                product_version))
+                logger.info(
+                    '%s is out of date (installed: %s/ filesystem: %s), '
+                    'reinstalled.',
+                    product_name, installed_version, product_version)
             else:
-                logger.info('%s already installed.' % product_name)
+                logger.info('%s already installed.', product_name)
     else:
         # New QI browser view.
         if not qi.is_product_installed(product_name):
             qi.install_product(product_name, allow_hidden=True)
-            logger.info('Installed %s' % product_name)
+            logger.info('Installed %s', product_name)
         else:
             qi.upgrade_product(product_name)
             logger.info('Upgraded %s', product_name)
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index bc9156ea..ebd93c4e 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -218,14 +218,16 @@ def migrateActionIcons(context):
             action = atool[new_cat].get(ident)
             if action is not None:
                 if not action.icon_expr:
-                    action._setPropValue('icon_expr', '%s%s' % (prefix, expr))
+                    action._setPropValue(
+                        'icon_expr', '{0}{1}'.format(prefix, expr))
         elif cat == 'controlpanel':
             # control panel tool
             action_infos = [a for a in cptool.listActions()
                             if a.getId() == ident]
             if len(action_infos):
                 if not action_infos[0].getIconExpression():
-                    action_infos[0].setIconExpression('%s%s' % (prefix, expr))
+                    action_infos[0].setIconExpression(
+                        '{0}{1}'.format(prefix, expr))
 
         # Remove the action icon
         aitool.removeActionIcon(cat, ident)
@@ -421,7 +423,7 @@ def migrate_portlets_for_object(obj, path):
                 if IStaticPortlet.providedBy(portlet) and \
                         getattr(portlet, 'hide', False):
                     logger.info(
-                        'Found hidden static text portlet %s at %s' %
+                        'Found hidden static text portlet %s at %s',
                         (portlet_id, path))
                     settings = IPortletAssignmentSettings(portlet)
                     settings['visible'] = False
@@ -550,7 +552,8 @@ def addRecursiveGroupsPlugin(context):
             if IRecursiveGroupsPlugin.providedBy(p):
                 plugins.deactivatePlugin(IGroupsPlugin, id)
                 logger.warn(
-                    'Found an existing Recursive Groups plugin, %s, in acl_users, deactivating.' % id)
+                    'Found an existing Recursive Groups plugin, %s, '
+                    'in acl_users, deactivating.', id)
 
     if not 'recursive_groups' in acl:
         addRecursiveGroupsPlugin(
@@ -580,7 +583,8 @@ def migrateTypeIcons(context):
         if 'content_icon' in type.__dict__:
             icon = type.content_icon
             if icon and not getattr(type, 'icon_expr', False):
-                type.icon_expr = 'string:${portal_url}/%s' % icon
+                # Replacing %s with .format would give a KeyError portal_url.
+                type.icon_expr = 'string:${portal_url}/%s' % icon  # noqa S001
                 type.icon_expr_object = Expression(type.icon_expr)
                 del type.content_icon
 
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index d807f677..6038b9a4 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -152,13 +152,13 @@ def convertToBlobs(context):
 
     output = migrateATBlobFiles(context)
     count = len(output.split('\n')) - 1
-    logger.info('Migrated %s files to blobs.' % count)
+    logger.info('Migrated %s files to blobs.', count)
 
     logger.info('Started migration of images to blobs.')
     from plone.app.blob.migrations import migrateATBlobImages
     output = migrateATBlobImages(context)
     count = len(output.split('\n')) - 1
-    logger.info('Migrated %s images to blobs.' % count)
+    logger.info('Migrated %s images to blobs.', count)
     if ori_enable_link_integrity_checks:
         logger.info('Restored original link integrity checking setting')
         sprop.enable_link_integrity_checks = ori_enable_link_integrity_checks
@@ -246,8 +246,9 @@ def fix_cataloged_interface_names(context):
                 new_value = list(sorted((set(value) - delete).union(rename)))
                 if value != new_value:
                     _unindex[docid] = new_value
-                if pos and pos % 10000 == 0:
-                    logger.info('Processed %s items.' % pos)
+                # Note: flake8 erroneously complains about module formatter.
+                if pos and pos % 10000 == 0:  # noqa S001
+                    logger.info('Processed %s items.', pos)
                     transaction.savepoint(optimistic=True)
 
     transaction.savepoint(optimistic=True)
diff --git a/plone/app/upgrade/v41/alphas.py b/plone/app/upgrade/v41/alphas.py
index e10efb0e..32ba28c3 100644
--- a/plone/app/upgrade/v41/alphas.py
+++ b/plone/app/upgrade/v41/alphas.py
@@ -157,7 +157,7 @@ def to41alpha2(context):
 def convert_to_booleanindex(catalog, index):
     if isinstance(index, BooleanIndex):
         return
-    logger.info('Converting index `%s` to BooleanIndex.' % index.getId())
+    logger.info('Converting index `%s` to BooleanIndex.', index.getId())
     index.__class__ = BooleanIndex
     index._p_changed = True
     catalog._catalog._p_changed = True
@@ -195,7 +195,7 @@ def convert_to_booleanindex(catalog, index):
 def convert_to_uuidindex(catalog, index):
     if isinstance(index, UUIDIndex):
         return
-    logger.info('Converting index `%s` to UUIDIndex.' % index.getId())
+    logger.info('Converting index `%s` to UUIDIndex.', index.getId())
     index.__class__ = UUIDIndex
     index._p_changed = True
     catalog._catalog._p_changed = True
@@ -218,7 +218,7 @@ def convert_to_uuidindex(catalog, index):
                         if path[:len(shortest)] != shortest:
                             raise ValueError(
                                 'Inconsistent UID index, UID %s is associated '
-                                'with multiple docids: %r' % (k, paths))
+                                'with multiple docids: %r', k, paths)
 
                     # All other docids are sub-paths of another
                     # indicating the UID was just acquired,
@@ -235,12 +235,13 @@ def optimize_dateindex(index):
     if isinstance(old_unindex, IIBTree):
         return
     index._unindex = _unindex = IIBTree()
-    logger.info('Converting to IIBTree for index `%s`.' % index.getId())
+    logger.info('Converting to IIBTree for index `%s`.', index.getId())
     for pos, (k, v) in enumerate(old_unindex.items()):
         _unindex[k] = v
-        if pos and pos % 10000 == 0:
+        # Note: flake8 erroneously complains about module formatter.
+        if pos and pos % 10000 == 0:  # noqa S001
             transaction.savepoint(optimistic=True)
-            logger.info('Processed %s items.' % pos)
+            logger.info('Processed %s items.', pos)
 
     transaction.savepoint(optimistic=True)
     logger.info('Finished conversion.')
@@ -251,15 +252,15 @@ def optimize_unindex(index):
     # allow conflict resolution inside the treeset to happen
     _index = getattr(index, '_index', None)
     if _index is not None:
-        logger.info('Converting to IITreeSet for index `%s`.' % index.getId())
+        logger.info('Converting to IITreeSet for index `%s`.', index.getId())
         i = 0
         for k, v in enumerate(_index.items()):
             if isinstance(v, int):
                 _index[k] = IITreeSet((v, ))
                 i += 1
-                if i % 10000 == 0:
+                if i % 10000 == 0:  # noqa S001
                     transaction.savepoint(optimistic=True)
-                    logger.info('Processed %s items.' % i)
+                    logger.info('Processed %s items.', i)
         transaction.savepoint(optimistic=True)
         logger.info('Finished conversion.')
 
diff --git a/plone/app/upgrade/v41/betas.py b/plone/app/upgrade/v41/betas.py
index 114337b0..eb752953 100644
--- a/plone/app/upgrade/v41/betas.py
+++ b/plone/app/upgrade/v41/betas.py
@@ -16,7 +16,7 @@
 def optimize_rangeindex_floor_ceiling(index):
     # respect the new ceiling and floor values
     logger.info('Optimizing range index `%s` to respect floor and ceiling '
-                'dates' % index.getId())
+                'dates', index.getId())
     ceiling_value = index.ceiling_value
     floor_value = index.floor_value
 
@@ -42,8 +42,9 @@ def optimize_rangeindex_floor_ceiling(index):
             # safely iterate over it while modifying it
             _unindex[docid] = (since, until)
             i += 1
-            if i % 10000 == 0:
-                logger.info('Processed %s items.' % i)
+            # Note: flake8 erroneously complains about module formatter.
+            if i % 10000 == 0:  # noqa S001
+                logger.info('Processed %s items.', i)
                 transaction.savepoint(optimistic=True)
 
     transaction.savepoint(optimistic=True)
@@ -52,11 +53,11 @@ def optimize_rangeindex_floor_ceiling(index):
 
 def optimize_rangeindex_int_iiset(index):
     # migrate internal int and IISet to IITreeSet
-    logger.info('Converting to IITreeSet for index `%s`.' % index.getId())
+    logger.info('Converting to IITreeSet for index `%s`.', index.getId())
     for name in ('_since', '_since_only', '_until', '_until_only'):
         tree = getattr(index, name, None)
         if tree is not None:
-            logger.info('Converting tree `%s`.' % name)
+            logger.info('Converting tree `%s`.', name)
             i = 0
             for k, v in tree.items():
                 if isinstance(v, IISet):
@@ -65,9 +66,9 @@ def optimize_rangeindex_int_iiset(index):
                 elif isinstance(v, int):
                     tree[k] = IITreeSet((v, ))
                     i += 1
-                if i and i % 10000 == 0:
+                if i and i % 10000 == 0:  # noqa S001
                     transaction.savepoint(optimistic=True)
-                    logger.info('Processed %s items.' % i)
+                    logger.info('Processed %s items.', i)
 
     transaction.savepoint(optimistic=True)
     logger.info('Finished conversion.')
@@ -77,9 +78,9 @@ def update_boolean_index(index):
     index_length = index._index_length
     if index_length is not None:
         return
-    logger.info('Updating BooleanIndex `%s`.' % index.getId())
+    logger.info('Updating BooleanIndex `%s`.', index.getId())
     index._inline_migration()
-    logger.info('Updated BooleanIndex `%s`.' % index.getId())
+    logger.info('Updated BooleanIndex `%s`.', index.getId())
 
 
 def optimize_indexes(context):
diff --git a/plone/app/upgrade/v41/final.py b/plone/app/upgrade/v41/final.py
index aca6f6f4..fcd5dff4 100644
--- a/plone/app/upgrade/v41/final.py
+++ b/plone/app/upgrade/v41/final.py
@@ -27,7 +27,7 @@ def fixOwnerTuple(obj, path):
         old = obj.getOwnerTuple()
         if old and old[0][-1] == 'portal_memberdata':
             new = (['acl_users'], old[1])
-            logger.info('Repairing %s: %r -> %r' % (path, old, new))
+            logger.info('Repairing %s: %r -> %r', path, old, new)
             obj._owner = new
     portal.ZopeFindAndApply(portal, search_sub=True, apply_func=fixOwnerTuple)
 
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index 470bc4fa..45f2d257 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -17,7 +17,7 @@ def fixOwnerTuple(obj, path):
         old = obj.getOwnerTuple()
         if old and old[0][-1] == 'portal_memberdata':
             new = (['acl_users'], old[1])
-            logger.info('Repairing %s: %r -> %r' % (path, old, new))
+            logger.info('Repairing %s: %r -> %r', path, old, new)
             obj._owner = new
     portal.ZopeFindAndApply(portal, search_sub=True, apply_func=fixOwnerTuple)
 
diff --git a/plone/app/upgrade/v50/final.py b/plone/app/upgrade/v50/final.py
index ab980353..bab8b97f 100644
--- a/plone/app/upgrade/v50/final.py
+++ b/plone/app/upgrade/v50/final.py
@@ -30,7 +30,7 @@ def _migrate_list(original_id, new_id=None):
         if site_properties.hasProperty(original_id):
             value = site_properties.getProperty(original_id)
             value = [safe_unicode(a) for a in value]
-            registry['plone.%s' % new_id] = value
+            registry['plone.{0}'.format(new_id)] = value
             site_properties._delProperty(original_id)
 
     # Old versions of to50rc3 migrated values from
@@ -91,7 +91,7 @@ def refresh_getIcon_catalog_metadata(context):
             cnt += 1  # we are curious
         # done
         pghandler.finish()
-        logger.info('Reindexed `getIcon` for %s items' % str(cnt))
+        logger.info('Reindexed `getIcon` for %s items', str(cnt))
 
     refresh_getIcon_catalog_metadata(context)
 
@@ -146,4 +146,4 @@ def fix_double_smaxage(context):
     field_ref = FieldRef(def_maxage, registry.records[def_maxage].field)
     old_value = registry[maxage]
     registry.records[maxage] = Record(field_ref, old_value)
-    logger.info('Fixed {} to refer to {}.'.format(maxage, def_maxage))
+    logger.info('Fixed {0} to refer to {1}.'.format(maxage, def_maxage))


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:11:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/6212391a2593bb8e204644b7168b3bf7d0f0e265

QA: fixed P002 found "hasattr", consider replacing it.

Files changed:
M plone/app/upgrade/utils.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v43/alphas.py

diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index b6fe5b69..506776bb 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -2,6 +2,7 @@
 from Acquisition import aq_base
 from Products.CMFCore.DirectoryView import _dirreg
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import base_hasattr
 from Products.GenericSetup.interfaces import ISetupTool
 from Products.GenericSetup.registry import _export_step_registry
 from Products.GenericSetup.registry import _import_step_registry
@@ -69,7 +70,7 @@ def saveCloneActions(actionprovider):
         return True, actionprovider._cloneActions()
     except AttributeError:
         # Stumbled across ancient dictionary actions
-        if not hasattr(aq_base(actionprovider), '_convertActions'):
+        if not base_hasattr(actionprovider, '_convertActions'):
             return False, (
                 "Can't convert actions of {0}! Jumping to next "
                 'action.'.format(actionprovider.getId()), logging.ERROR)
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index 6038b9a4..56988697 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -1,9 +1,11 @@
 # -*- coding: utf-8 -*-
+from Acquisition import aq_base
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import logger
 from plone.app.upgrade.utils import updateIconsInBrains
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.CatalogTool import BLACKLISTED_INTERFACES
+from Products.CMFPlone.utils import safe_hasattr
 from zope.dottedname.resolve import resolve
 
 import transaction
@@ -44,14 +46,15 @@ def updateSafeHTMLConfig(context):
     list_conf = []
     # Kupu sets its attributes on first use, rather than providing class level
     # defaults.
-    if hasattr(kupu_tool.aq_base, 'style_whitelist'):
+    kupu_tool_base = aq_base(kupu_tool)
+    if safe_hasattr(kupu_tool_base, 'style_whitelist'):
         styles = list(kupu_tool.style_whitelist)
         if 'padding-left' not in styles:
             styles.append('padding-left')
         list_conf.append(('style_whitelist', styles))
-    if hasattr(kupu_tool.aq_base, 'class_blacklist'):
+    if safe_hasattr(kupu_tool_base, 'class_blacklist'):
         list_conf.append(('class_blacklist', kupu_tool.class_blacklist))
-    if hasattr(kupu_tool.aq_base, 'html_exclusions'):
+    if safe_hasattr(kupu_tool_base, 'html_exclusions'):
         list_conf.append(
             ('stripped_attributes', kupu_tool.get_stripped_attributes()))
     for k, v in list_conf:
@@ -61,7 +64,7 @@ def updateSafeHTMLConfig(context):
         while tdata:
             tdata.pop()
         tdata.extend(v)
-    if hasattr(kupu_tool.aq_base, 'html_exclusions'):
+    if safe_hasattr(kupu_tool_base, 'html_exclusions'):
         ksc = dict((str(' '.join(k)), str(' '.join(v)))
                    for k, v in kupu_tool.get_stripped_combinations())
         tsc = transform._config['stripped_combinations']
diff --git a/plone/app/upgrade/v43/alphas.py b/plone/app/upgrade/v43/alphas.py
index f4379b93..908c7e75 100644
--- a/plone/app/upgrade/v43/alphas.py
+++ b/plone/app/upgrade/v43/alphas.py
@@ -32,10 +32,12 @@ def reindex_sortable_title(context):
     for i, (name, rids) in enumerate(sort_title_index._index.iteritems()):
         pghandler.report(i)
         if len(name) > MAX_SORTABLE_TITLE or num_sort_regex.match(name):
-            if hasattr(rids, 'keys'):
-                change.extend(list(rids.keys()))
-            else:
+            try:
+                keys = rids.keys()
+            except AttributeError:
                 change.append(rids)
+            else:
+                change.extend(list(keys))
     pghandler.finish()
     update_metadata = 'sortable_title' in _catalog.schema
     pghandler = ZLogHandler(1000)


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:13:47+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/32cf269906e246c4c7fd3ff1f7a47ecd1641dd05

QA: fixed C812 missing trailing comma

Files changed:
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v43/tests.py

diff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py
index d1b64012..7cd3ecea 100644
--- a/plone/app/upgrade/tests/base.py
+++ b/plone/app/upgrade/tests/base.py
@@ -34,7 +34,7 @@ def setUpZope(self, app, configurationContext):
         xmlconfig.file(
             'configure.zcml',
             plone.app.caching,
-            context=configurationContext
+            context=configurationContext,
         )
 
 
@@ -52,7 +52,7 @@ def removeActionFromTool(
         self,
         action_id,
         category=None,
-        action_provider='portal_actions'
+        action_provider='portal_actions',
     ):
         # Removes an action from portal_actions
         tool = getToolByName(self.portal, action_provider)
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index ebd93c4e..06e1b270 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -81,7 +81,7 @@ def threeX_alpha1(context):
     if qi is not None:
         if 'plonetheme.classic' in qi:
             stool.runAllImportStepsFromProfile(
-                'profile-plonetheme.classic:default'
+                'profile-plonetheme.classic:default',
             )
     else:
         # Plone 5.1 and higher.
@@ -91,7 +91,7 @@ def threeX_alpha1(context):
         # Plone 5, which is fine, but we will try it anyway.
         if qi.is_product_installed('plonetheme.classic'):
             stool.runAllImportStepsFromProfile(
-                'profile-plonetheme.classic:default'
+                'profile-plonetheme.classic:default',
             )
     # Install packages that are needed for Plone 4,
     # but don't break on Plone 5 where they are gone
diff --git a/plone/app/upgrade/v43/tests.py b/plone/app/upgrade/v43/tests.py
index 328424b6..9f8202ee 100644
--- a/plone/app/upgrade/v43/tests.py
+++ b/plone/app/upgrade/v43/tests.py
@@ -141,7 +141,7 @@ def testReindexNumericalTitle(self):
         alphas.reindex_sortable_title(portal.portal_setup)
         self.assertEqual(
             catalog(id=portal['num-title'].id)[0].Title,
-            '9 green bottles, hanging on the wall'
+            '9 green bottles, hanging on the wall',
         )
         self.assertEqual(
             catalog(id=portal['accidentally-fall'].id)[0].Title,


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:23:46+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/dc755146ebd7072d3461ea33be3bdd2028e8a1d7

QA: fixed F401 imported but unused, and F811 redifinition of unused.

Files changed:
M plone/app/upgrade/__init__.py
M plone/app/upgrade/bbbd/LanguageTool.py
M plone/app/upgrade/bbbd/__init__.py
M plone/app/upgrade/v40/__init__.py
M plone/app/upgrade/v41/__init__.py
M plone/app/upgrade/v42/__init__.py
M plone/app/upgrade/v42/betas.py
M plone/app/upgrade/v42/final.py
M plone/app/upgrade/v43/__init__.py
M plone/app/upgrade/v50/final.py
M plone/app/upgrade/v52/alphas.py
M plone/app/upgrade/v52/tests.py

diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index 2e433e60..f9f9d26a 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -8,7 +8,7 @@
 
 
 try:
-    from zope.app.cache.interfaces.ram import IRAMCache
+    from zope.app.cache.interfaces.ram import IRAMCache  # noqa F401
 except ImportError:
     import zope.ramcache.interfaces.ram
     alias_module('zope.app.cache.interfaces.ram', zope.ramcache.interfaces.ram)
@@ -25,27 +25,27 @@
     alias_module('Products.CMFCalendar.interfaces', bbb)
 
 try:
-    from Products.CMFPlone import CalendarTool
+    from Products.CMFPlone import CalendarTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.CalendarTool'] = bbb
 
 try:
-    from Products.CMFPlone import DiscussionTool
+    from Products.CMFPlone import DiscussionTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.DiscussionTool'] = bbb
 
 try:
-    from Products.CMFPlone import InterfaceTool
+    from Products.CMFPlone import InterfaceTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.InterfaceTool'] = bbb
 
 try:
-    from Products.CMFPlone import SyndicationTool
+    from Products.CMFPlone import SyndicationTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.SyndicationTool'] = bbb
 
 try:
-    from Products.CMFPlone import UndoTool
+    from Products.CMFPlone import UndoTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.UndoTool'] = bbb
 
@@ -110,7 +110,7 @@
     sys.modules['Products.CMFDefault.SyndicationInfo'] = bbb
 
 try:
-    from Products.PloneLanguageTool import interfaces
+    from Products.PloneLanguageTool import interfaces  # noqa F811
 except ImportError:
     alias_module('Products.PloneLanguageTool.interfaces', bbb)
     alias_module('Products.PloneLanguageTool', bbbd)
@@ -122,13 +122,14 @@
 # changed on 1.6.1
 try:
     pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
-    from Products.CMFPlacefulWorkflow.interfaces import portal_placeful_workflow
+    from Products.CMFPlacefulWorkflow.interfaces import (  # noqa F401
+        portal_placeful_workflow)
 except pkg_resources.DistributionNotFound:
     # No package in this environment requires CMFPlacefulWorkflow,
     # so no patching necessary
     pass
 except BaseException:
-    from Products.CMFPlacefulWorkflow import interfaces
+    from Products.CMFPlacefulWorkflow import interfaces  # noqa F811
     alias_module(
         'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow', interfaces)
 
diff --git a/plone/app/upgrade/bbbd/LanguageTool.py b/plone/app/upgrade/bbbd/LanguageTool.py
index 398958b9..16bc01bc 100644
--- a/plone/app/upgrade/bbbd/LanguageTool.py
+++ b/plone/app/upgrade/bbbd/LanguageTool.py
@@ -1,7 +1,5 @@
 # -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import registerToolInterface
-from zope.interface import Interface
 from ZPublisher import BeforeTraverse
 
 
diff --git a/plone/app/upgrade/bbbd/__init__.py b/plone/app/upgrade/bbbd/__init__.py
index f3a87461..87cd06e7 100644
--- a/plone/app/upgrade/bbbd/__init__.py
+++ b/plone/app/upgrade/bbbd/__init__.py
@@ -1,2 +1,2 @@
 # -*- coding: utf-8 -*-
-from .LanguageTool import LanguageTool
+from .LanguageTool import LanguageTool  # noqa F401
diff --git a/plone/app/upgrade/v40/__init__.py b/plone/app/upgrade/v40/__init__.py
index bf5f7be3..8b8d5f7d 100644
--- a/plone/app/upgrade/v40/__init__.py
+++ b/plone/app/upgrade/v40/__init__.py
@@ -1,3 +1,3 @@
 # -*- coding: utf-8 -*-
-import alphas
-import betas
+import alphas  # noqa F401
+import betas  # noqa F401
diff --git a/plone/app/upgrade/v41/__init__.py b/plone/app/upgrade/v41/__init__.py
index ea6111a4..401f1ca0 100644
--- a/plone/app/upgrade/v41/__init__.py
+++ b/plone/app/upgrade/v41/__init__.py
@@ -1,4 +1,4 @@
 # -*- coding: utf-8 -*-
-import alphas
-import betas
-import final
+import alphas  # noqa F401
+import betas  # noqa F401
+import final  # noqa F401
diff --git a/plone/app/upgrade/v42/__init__.py b/plone/app/upgrade/v42/__init__.py
index ea6111a4..401f1ca0 100644
--- a/plone/app/upgrade/v42/__init__.py
+++ b/plone/app/upgrade/v42/__init__.py
@@ -1,4 +1,4 @@
 # -*- coding: utf-8 -*-
-import alphas
-import betas
-import final
+import alphas  # noqa F401
+import betas  # noqa F401
+import final  # noqa F401
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index 45f2d257..cb7cafb4 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -60,7 +60,7 @@ def to42rc1(context):
     """4.2b2 -> 4.2rc1
     """
     try:
-        import plone.app.jquerytools
+        import plone.app.jquerytools  # noqa F401
         loadMigrationProfile(context, 'profile-plone.app.jquery:default')
     except ImportError:
         pass
diff --git a/plone/app/upgrade/v42/final.py b/plone/app/upgrade/v42/final.py
index b9caab18..d7648979 100644
--- a/plone/app/upgrade/v42/final.py
+++ b/plone/app/upgrade/v42/final.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
-from Products.GenericSetup.upgrade import _upgrade_registry
 
 import logging
 
diff --git a/plone/app/upgrade/v43/__init__.py b/plone/app/upgrade/v43/__init__.py
index 7da8308f..ae3ecbfd 100644
--- a/plone/app/upgrade/v43/__init__.py
+++ b/plone/app/upgrade/v43/__init__.py
@@ -1,2 +1,2 @@
 # -*- coding: utf-8 -*-
-import alphas
+import alphas  # noqa F401
diff --git a/plone/app/upgrade/v50/final.py b/plone/app/upgrade/v50/final.py
index bab8b97f..c737c465 100644
--- a/plone/app/upgrade/v50/final.py
+++ b/plone/app/upgrade/v50/final.py
@@ -126,11 +126,8 @@ def fix_double_smaxage(context):
     plone.resource.maxage has title and description from shared maxage.
     See https://github.com/plone/Products.CMFPlone/issues/1989
     """
-    from plone.registry.interfaces import IPersistentField
     from plone.registry.record import Record
-    from plone.registry import field
     from plone.registry import FieldRef
-    from zope.component import queryAdapter
     registry = getUtility(IRegistry)
     # If these three registry records are not defined,
     # we do no fix.
diff --git a/plone/app/upgrade/v52/alphas.py b/plone/app/upgrade/v52/alphas.py
index 1e234362..32a4d4af 100644
--- a/plone/app/upgrade/v52/alphas.py
+++ b/plone/app/upgrade/v52/alphas.py
@@ -1,7 +1,5 @@
 # -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
 
 import logging
 
diff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py
index 3def00c9..71ef2370 100644
--- a/plone/app/upgrade/v52/tests.py
+++ b/plone/app/upgrade/v52/tests.py
@@ -1,10 +1,4 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import PLONE_INTEGRATION_TESTING
-from plone.app.upgrade.v50.testing import REAL_UPGRADE_FUNCTIONAL
-from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import IFilterSchema
-from zope.component import getUtility
-
 import unittest
 
 


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:26:03+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/6366e03fd4ed05f9e754bbbacd0e312a4d0896d9

various

Files changed:
M plone/app/upgrade/tests/base.py

diff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py
index 7cd3ecea..322380fc 100644
--- a/plone/app/upgrade/tests/base.py
+++ b/plone/app/upgrade/tests/base.py
@@ -11,7 +11,6 @@
 from Products.CMFCore.interfaces import IActionInfo
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.context import TarballImportContext
-from zope.configuration import xmlconfig
 from zope.site.hooks import setSite
 
 import transaction
@@ -31,10 +30,9 @@ def setUpZope(self, app, configurationContext):
         # In 5.0 alpha we install or upgrade plone.app.caching,
         # so it must be available to Zope.
         import plone.app.caching
-        xmlconfig.file(
-            'configure.zcml',
-            plone.app.caching,
-            context=configurationContext,
+        self.loadZCML(
+            name='configure.zcml',
+            package=plone.app.caching,
         )
 
 


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:28:02+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/33c3ffc68b1f2fe977c13ecc6e0d3c50e09f52f6

QA: fixed E713 and E265.

- E713 test for membership should be 'not in'
- E265 block comment should start with '# '

Files changed:
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/tests.py
M plone/app/upgrade/v42/betas.py

diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index 06e1b270..804f9947 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -555,7 +555,7 @@ def addRecursiveGroupsPlugin(context):
                     'Found an existing Recursive Groups plugin, %s, '
                     'in acl_users, deactivating.', id)
 
-    if not 'recursive_groups' in acl:
+    if 'recursive_groups' not in acl:
         addRecursiveGroupsPlugin(
             acl, 'recursive_groups', 'Recursive Groups Plugin')
 
diff --git a/plone/app/upgrade/v40/tests.py b/plone/app/upgrade/v40/tests.py
index 2992578e..717fc1f0 100644
--- a/plone/app/upgrade/v40/tests.py
+++ b/plone/app/upgrade/v40/tests.py
@@ -258,7 +258,7 @@ def testChangeAuthenticatedResourcesCondition(self):
     def testAddedUseEmailProperty(self):
         tool = getToolByName(self.portal, 'portal_properties')
         sheet = getattr(tool, 'site_properties')
-        #self.assertEqual(sheet.getProperty('use_email_as_login'), False)
+        # self.assertEqual(sheet.getProperty('use_email_as_login'), False)
         self.removeSiteProperty('use_email_as_login')
         loadMigrationProfile(self.portal, self.profile, ('propertiestool', ))
         self.assertEqual(sheet.getProperty('use_email_as_login'), False)
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index cb7cafb4..3349ed80 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -81,7 +81,7 @@ def to42rc1_member_dashboard(context):
     p = 'Portlets: View dashboard'
     portal = getToolByName(context, 'portal_url').getPortalObject()
     roles = Permission(p, (), portal).getRoles(default=[])
-    if not 'Member' in roles:
+    if 'Member' not in roles:
         acquire = isinstance(roles, list) and True or False
         roles = list(roles)
         roles.append('Member')


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:43:58+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/dfb414c3273826289b706ca971b63240f9d9c044

QA: fixed E501 line too long

Files changed:
M plone/app/upgrade/__init__.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v41/alphas.py
M plone/app/upgrade/v43/final.py
M plone/app/upgrade/v43/tests.py

diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index f9f9d26a..37d70ac0 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -114,8 +114,11 @@
 except ImportError:
     alias_module('Products.PloneLanguageTool.interfaces', bbb)
     alias_module('Products.PloneLanguageTool', bbbd)
-    __import__('Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool = __import__(
-        'Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool.LanguageTool
+    __import__(
+        'Products.PloneLanguageTool.LanguageTool',
+    ).PloneLanguageTool.LanguageTool = __import__(
+        'Products.PloneLanguageTool.LanguageTool',
+    ).PloneLanguageTool.LanguageTool.LanguageTool
 
 
 # To solve the __iro__ problem because CMFPlacefulWorkflow interfaces
@@ -131,7 +134,8 @@
 except BaseException:
     from Products.CMFPlacefulWorkflow import interfaces  # noqa F811
     alias_module(
-        'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow', interfaces)
+        'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow',
+        interfaces)
 
 try:
     from Products.PasswordResetTool import PasswordResetTool
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index 804f9947..707fa173 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -10,7 +10,9 @@
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletAssignmentSettings
 from plone.portlets.interfaces import IPortletManager
-from Products.CMFCore.CachingPolicyManager import manage_addCachingPolicyManager
+# We either get E501 line too long,
+# or I001 isort found an import in the wrong position...
+from Products.CMFCore.CachingPolicyManager import manage_addCachingPolicyManager  # noqa E501
 from Products.CMFCore.Expression import Expression
 from Products.CMFCore.interfaces import ICachingPolicyManager
 from Products.CMFCore.utils import getToolByName
@@ -111,20 +113,22 @@ def restoreTheme(context):
 
     if old_default_skin == 'Plone Default':
         v_storage = getUtility(IViewletSettingsStorage)
-        uncustomized_layers = ('custom,tinymce,referencebrowser,LanguageTool,cmfeditions_views,'
-                               'CMFEditions,kupu_plone,kupu,kupu_tests,archetypes,archetypes_kss,'
-                               'mimetypes_icons,plone_kss,ATContentTypes,PasswordReset,'
-                               'plone_ecmascript,plone_wysiwyg,plone_prefs,plone_templates,'
-                               'classic_styles,plone_form_scripts,plone_scripts,plone_forms,'
-                               'plone_images,plone_content,plone_login,plone_deprecated,'
-                               'plone_3rdParty,cmf_legacy')
+        uncustomized_layers = (
+            'custom,tinymce,referencebrowser,LanguageTool,cmfeditions_views,'
+            'CMFEditions,kupu_plone,kupu,kupu_tests,archetypes,archetypes_kss,'
+            'mimetypes_icons,plone_kss,ATContentTypes,PasswordReset,'
+            'plone_ecmascript,plone_wysiwyg,plone_prefs,plone_templates,'
+            'classic_styles,plone_form_scripts,plone_scripts,plone_forms,'
+            'plone_images,plone_content,plone_login,plone_deprecated,'
+            'plone_3rdParty,cmf_legacy')
         if skins.selections.get('Plone Default') == uncustomized_layers:
             # if the old theme's layers hadn't been mucked with, we can just
             # use Plone Classic Theme
             old_default_skin = 'Plone Classic Theme'
         else:
             # otherwise, copy Plone Default to a new theme
-            skins.selections['Old Plone 3 Custom Theme'] = skins.selections.get(
+            skins.selections[
+                'Old Plone 3 Custom Theme'] = skins.selections.get(
                 'Plone Default')
             # copy the viewlet order
             v_storage._order['Old Plone 3 Custom Theme'] = dict(
@@ -268,9 +272,16 @@ def changeAuthenticatedResourcesCondition(context):
     """
     resources = {
         'portal_css': ('member.css', ),
-        'portal_javascripts': ('dropdown.js', 'table_sorter.js',
-                               'calendar_formfield.js', 'calendarpopup.js', 'formUnload.js',
-                               'formsubmithelpers.js', 'unlockOnFormUnload.js')}
+        'portal_javascripts': (
+            'dropdown.js',
+            'table_sorter.js',
+            'calendar_formfield.js',
+            'calendarpopup.js',
+            'formUnload.js',
+            'formsubmithelpers.js',
+            'unlockOnFormUnload.js',
+        ),
+    }
     ANON = ('not: portal/portal_membership/isAnonymousUser',
             'not:portal/portal_membership/isAnonymousUser', )
     for tool_id, resource_ids in resources.items():
@@ -541,7 +552,10 @@ def update(brain):
 
 def addRecursiveGroupsPlugin(context):
     """Add a recursive groups plugin to acl_users"""
-    from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import addRecursiveGroupsPlugin, IRecursiveGroupsPlugin
+    from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import (
+        addRecursiveGroupsPlugin)
+    from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import (
+        IRecursiveGroupsPlugin)
     from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin
     acl = getToolByName(context, 'acl_users')
     plugins = acl.plugins
@@ -570,7 +584,8 @@ def cleanUpClassicThemeResources(context):
     qi = getToolByName(context, 'portal_quickinstaller', None)
     if qi is not None and 'plonetheme.classic' in qi:
         classictheme = qi['plonetheme.classic']
-        classictheme.resources_css = []  # empty the list of installed resources
+        # empty the list of installed resources
+        classictheme.resources_css = []
 
 
 def migrateTypeIcons(context):
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index 56988697..3df9adcb 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -18,7 +18,11 @@ def alpha5_beta1(context):
 
 
 def repositionRecursiveGroupsPlugin(context):
-    """If the recursive groups plugin is active, make sure it's at the bottom of the active plugins list"""
+    """Reposition recursive groups plugin.
+
+    If the recursive groups plugin is active,
+    make sure it's at the bottom of the active plugins list.
+    """
     from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin
     acl = getToolByName(context, 'acl_users')
     plugins = acl.plugins
@@ -37,7 +41,10 @@ def beta1_beta2(context):
 
 
 def updateSafeHTMLConfig(context):
-    """Update the safe_html transform with the new config params, migrating existing config from Kupu."""
+    """Update the safe_html transform with the new config params.
+
+    Migrate existing config from Kupu.
+    """
     transform = getToolByName(context, 'portal_transforms').safe_html
     transform._tr_init(1)  # load new config items
     kupu_tool = getToolByName(context, 'kupu_library_tool', None)
diff --git a/plone/app/upgrade/v41/alphas.py b/plone/app/upgrade/v41/alphas.py
index 32ba28c3..5b67e3b2 100644
--- a/plone/app/upgrade/v41/alphas.py
+++ b/plone/app/upgrade/v41/alphas.py
@@ -41,8 +41,11 @@ def add_siteadmin_role(context):
     uf = getToolByName(context, 'acl_users')
     gtool = getToolByName(context, 'portal_groups')
     if not uf.searchGroups(id='Site Administrators'):
-        gtool.addGroup('Site Administrators', title='Site Administrators', roles=[
-                       'Site Administrator'])
+        gtool.addGroup(
+            'Site Administrators',
+            title='Site Administrators',
+            roles=['Site Administrator'],
+        )
 
     # update rolemap:
     # add Site Administrator role to permissions that have the Manager role,
diff --git a/plone/app/upgrade/v43/final.py b/plone/app/upgrade/v43/final.py
index ad876e77..b8aced8d 100644
--- a/plone/app/upgrade/v43/final.py
+++ b/plone/app/upgrade/v43/final.py
@@ -2,7 +2,7 @@
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import unregisterSteps
 from plone.app.upgrade.v43.alphas import upgradeTinyMCEAgain
-from plone.contentrules.engine.assignments import check_rules_with_dotted_name_moved
+from plone.contentrules.engine.assignments import check_rules_with_dotted_name_moved  # noqa E501
 from plone.contentrules.engine.interfaces import IRuleStorage
 from Products.CMFCore.utils import getToolByName
 from zope.component import getAllUtilitiesRegisteredFor
diff --git a/plone/app/upgrade/v43/tests.py b/plone/app/upgrade/v43/tests.py
index 9f8202ee..e34df873 100644
--- a/plone/app/upgrade/v43/tests.py
+++ b/plone/app/upgrade/v43/tests.py
@@ -45,7 +45,8 @@ def testAddDisplayPublicationDateInBylineProperty(self):
             False)
 
     def testUpgradeToI18NCaseNormalizer(self):
-        from Products.CMFPlone.UnicodeSplitter.splitter import Splitter, CaseNormalizer
+        from Products.CMFPlone.UnicodeSplitter.splitter import Splitter
+        from Products.CMFPlone.UnicodeSplitter.splitter import CaseNormalizer
         ctool = self.portal.portal_catalog
         ctool.plone_lexicon._pipeline[1] == (Splitter(), CaseNormalizer())
         alphas.upgradeToI18NCaseNormalizer(self.portal.portal_setup)
@@ -74,9 +75,12 @@ def testUpgradeTinyMCE(self):
         request = self.app.REQUEST
         plone_view = queryMultiAdapter((self.portal, request), name='plone')
         manager = queryMultiAdapter(
-            (self.portal, request, plone_view), IContentProvider, 'plone.htmlhead')
+            (self.portal, request, plone_view),
+            IContentProvider,
+            'plone.htmlhead')
         viewlets = getAdapters(
-            (manager.context, manager.request, manager.__parent__, manager), IViewlet)
+            (manager.context, manager.request, manager.__parent__, manager),
+            IViewlet)
         self.assertFalse(u'tinymce.configuration' in dict(viewlets))
 
     def testInstallThemingNotPreviouslyInstalled(self):


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-13T00:55:09+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/96c74ae0fe1cf10720258a8116496278394a065d

Added qa.cfg for checking code quality.

http://jenkinsploneorg.readthedocs.io/en/latest/run-qa-on-package.html

Files changed:
A .isort.cfg
A bootstrap.py
A qa.cfg
M .gitignore
M CHANGES.rst
M setup.cfg

diff --git a/.gitignore b/.gitignore
index 86621e44..d6cc22ff 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,3 +2,4 @@
 *.pyc
 *.pyo
 *.mo
+/bin/
diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 00000000..dd9f25db
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,6 @@
+[settings]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
diff --git a/CHANGES.rst b/CHANGES.rst
index 88d43298..85379235 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Improved code quality.  [maurits]
 
 
 2.0.14 (2018-04-09)
diff --git a/bootstrap.py b/bootstrap.py
new file mode 100644
index 00000000..a4599211
--- /dev/null
+++ b/bootstrap.py
@@ -0,0 +1,210 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
+
+options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
+
+######################################################################
+# load/install setuptools
+
+try:
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/qa.cfg b/qa.cfg
new file mode 100644
index 00000000..0e2ce5fb
--- /dev/null
+++ b/qa.cfg
@@ -0,0 +1,79 @@
+# Buildout configuration used by http://jenkins.plone.org/view/Pkgs/ jobs
+# to report about code analysis errors.
+#
+# Each package that has a job on that URL above will automatically get a
+# repot about the code analysis reported by plone.recipe.codeanalysis attached
+# as a comment on github.
+[buildout]
+show-picked-versions = true
+parts =
+    code-analysis
+
+[code-analysis]
+recipe = plone.recipe.codeanalysis
+multiprocessing = True
+directory = plone
+pre-commit-hook = False
+check-manifest = True
+clean-lines = True
+# keep this list in sync with what plone.recipe.codeanalysis defines
+# on its [recommended] extra, see:
+# https://github.com/plone/plone.recipe.codeanalysis/blob/master/setup.py
+flake8-extensions =
+    flake8-blind-except
+    flake8-coding
+    flake8-commas
+    flake8-debugger
+    flake8-deprecated
+    flake8-isort
+    flake8-pep3101
+    flake8-plone-hasattr
+    flake8-print
+    flake8-quotes
+    flake8-string-format
+    flake8-todo
+
+[versions]
+flake8 = 3.3.0
+flake8-blind-except = 0.1.1
+flake8-coding = 1.3.0
+flake8-commas = 0.4.3
+flake8-debugger = 1.4.0
+flake8-deprecated = 1.2
+flake8-isort = 2.2.1
+flake8-pep3101 = 1.1
+flake8-plone-hasattr = 0.2.post0
+flake8-print = 2.0.2
+flake8-quotes = 0.11.0
+flake8-string-format = 0.2.3
+flake8-todo = 0.7
+mccabe = 0.6.1
+plone.recipe.codeanalysis = 2.2
+pycodestyle = 2.3.1
+pyflakes = 1.5.0
+zc.buildout = 2.11.2
+zc.recipe.egg = 2.0.5
+
+# Required by:
+# plone.recipe.codeanalysis==2.2
+check-manifest = 0.34
+
+# Required by:
+# flake8==3.2.1
+configparser = 3.5.0
+
+# Required by:
+# flake8==3.2.1
+enum34 = 1.1.6
+
+# Required by:
+# flake8-isort==2.1.3
+flake8-polyfill = 1.0.1
+
+# Required by:
+# flake8-isort==2.1.3
+testfixtures = 4.13.1
+
+# Required by:
+# flake8-isort==2.2.1
+isort = 4.2.15
diff --git a/setup.cfg b/setup.cfg
index d80c4661..199a05bb 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -4,3 +4,8 @@ create-wheel = yes
 # When Python 2-3 compatible:
 # [bdist_wheel]
 # universal = 1
+
+[check-manifest]
+ignore =
+    *.cfg
+    bootstrap.py


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2018-04-17T22:04:26+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.upgrade/commit/1ee76eacaafcc43245c88470c7e28b37f32024d7

Merge pull request #157 from plone/cleanup

Code quality cleanup

Files changed:
A .isort.cfg
A bootstrap.py
A qa.cfg
M .gitignore
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/upgrade/__init__.py
M plone/app/upgrade/atcontentypes_bbb.py
M plone/app/upgrade/bbb.py
M plone/app/upgrade/bbbd/LanguageTool.py
M plone/app/upgrade/bbbd/__init__.py
M plone/app/upgrade/kupu_bbb.py
M plone/app/upgrade/tests/__init__.py
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/tests/test_utils.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v40/__init__.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v40/tests.py
M plone/app/upgrade/v41/__init__.py
M plone/app/upgrade/v41/alphas.py
M plone/app/upgrade/v41/betas.py
M plone/app/upgrade/v41/final.py
M plone/app/upgrade/v41/tests.py
M plone/app/upgrade/v42/__init__.py
M plone/app/upgrade/v42/alphas.py
M plone/app/upgrade/v42/betas.py
M plone/app/upgrade/v42/final.py
M plone/app/upgrade/v42/tests.py
M plone/app/upgrade/v43/__init__.py
M plone/app/upgrade/v43/alphas.py
M plone/app/upgrade/v43/betas.py
M plone/app/upgrade/v43/final.py
M plone/app/upgrade/v43/tests.py
M plone/app/upgrade/v50/__init__.py
M plone/app/upgrade/v50/alphas.py
M plone/app/upgrade/v50/betas.py
M plone/app/upgrade/v50/final.py
M plone/app/upgrade/v50/profiles/to_501/registry.xml
M plone/app/upgrade/v50/profiles/to_beta1/registry.xml
M plone/app/upgrade/v50/profiles/to_rc1/registry.xml
M plone/app/upgrade/v50/profiles/to_rc1/skins.xml
M plone/app/upgrade/v50/testing.py
M plone/app/upgrade/v50/tests.py
M plone/app/upgrade/v51/alphas.py
M plone/app/upgrade/v51/betas.py
M plone/app/upgrade/v51/profiles/to_rc1/actions.xml
M plone/app/upgrade/v51/tests.py
M plone/app/upgrade/v52/alphas.py
M plone/app/upgrade/v52/tests.py
M setup.cfg
M setup.py

diff --git a/.gitignore b/.gitignore
index 86621e44..d6cc22ff 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,3 +2,4 @@
 *.pyc
 *.pyo
 *.mo
+/bin/
diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 00000000..dd9f25db
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,6 @@
+[settings]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
diff --git a/CHANGES.rst b/CHANGES.rst
index 88d43298..85379235 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Improved code quality.  [maurits]
 
 
 2.0.14 (2018-04-09)
diff --git a/bootstrap.py b/bootstrap.py
new file mode 100644
index 00000000..a4599211
--- /dev/null
+++ b/bootstrap.py
@@ -0,0 +1,210 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
+
+options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
+
+######################################################################
+# load/install setuptools
+
+try:
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad105..85880ef0 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad105..85880ef0 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index ea81e09a..37d70ac0 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -1,11 +1,14 @@
-import pkg_resources
-import sys
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import alias_module
+
 import bbb
 import bbbd
+import pkg_resources
+import sys
+
 
 try:
-    from zope.app.cache.interfaces.ram import IRAMCache
+    from zope.app.cache.interfaces.ram import IRAMCache  # noqa F401
 except ImportError:
     import zope.ramcache.interfaces.ram
     alias_module('zope.app.cache.interfaces.ram', zope.ramcache.interfaces.ram)
@@ -22,27 +25,27 @@
     alias_module('Products.CMFCalendar.interfaces', bbb)
 
 try:
-    from Products.CMFPlone import CalendarTool
+    from Products.CMFPlone import CalendarTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.CalendarTool'] = bbb
 
 try:
-    from Products.CMFPlone import DiscussionTool
+    from Products.CMFPlone import DiscussionTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.DiscussionTool'] = bbb
 
 try:
-    from Products.CMFPlone import InterfaceTool
+    from Products.CMFPlone import InterfaceTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.InterfaceTool'] = bbb
 
 try:
-    from Products.CMFPlone import SyndicationTool
+    from Products.CMFPlone import SyndicationTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.SyndicationTool'] = bbb
 
 try:
-    from Products.CMFPlone import UndoTool
+    from Products.CMFPlone import UndoTool  # noqa F401
 except ImportError:
     sys.modules['Products.CMFPlone.UndoTool'] = bbb
 
@@ -67,7 +70,7 @@
 except ImportError:
     try:
         pkg_resources.get_distribution('Products.ATContentTypes')
-    except:
+    except BaseException:
         from plone.app.upgrade import atcontentypes_bbb
         alias_module('Products.CMFPlone.FactoryTool', atcontentypes_bbb)
     else:
@@ -80,7 +83,7 @@
 except ImportError:
     try:
         pkg_resources.get_distribution('Products.ATContentTypes')
-    except:
+    except BaseException:
         from plone.app.upgrade import atcontentypes_bbb
         alias_module('Products.CMFPlone.MetadataTool', atcontentypes_bbb)
     else:
@@ -93,7 +96,7 @@
 except ImportError:
     try:
         pkg_resources.get_distribution('Products.ATContentTypes')
-    except:
+    except BaseException:
         from plone.app.upgrade import atcontentypes_bbb
         alias_module('Products.CMFDefault.MetadataTool', atcontentypes_bbb)
     else:
@@ -107,27 +110,32 @@
     sys.modules['Products.CMFDefault.SyndicationInfo'] = bbb
 
 try:
-    from Products.PloneLanguageTool import interfaces
+    from Products.PloneLanguageTool import interfaces  # noqa F811
 except ImportError:
     alias_module('Products.PloneLanguageTool.interfaces', bbb)
     alias_module('Products.PloneLanguageTool', bbbd)
-    __import__('Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool = __import__(
-        'Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool.LanguageTool
+    __import__(
+        'Products.PloneLanguageTool.LanguageTool',
+    ).PloneLanguageTool.LanguageTool = __import__(
+        'Products.PloneLanguageTool.LanguageTool',
+    ).PloneLanguageTool.LanguageTool.LanguageTool
 
 
 # To solve the __iro__ problem because CMFPlacefulWorkflow interfaces
 # changed on 1.6.1
 try:
     pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
-    from Products.CMFPlacefulWorkflow.interfaces import portal_placeful_workflow
+    from Products.CMFPlacefulWorkflow.interfaces import (  # noqa F401
+        portal_placeful_workflow)
 except pkg_resources.DistributionNotFound:
     # No package in this environment requires CMFPlacefulWorkflow,
     # so no patching necessary
     pass
-except:
-    from Products.CMFPlacefulWorkflow import interfaces
+except BaseException:
+    from Products.CMFPlacefulWorkflow import interfaces  # noqa F811
     alias_module(
-        'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow', interfaces)
+        'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow',
+        interfaces)
 
 try:
     from Products.PasswordResetTool import PasswordResetTool
diff --git a/plone/app/upgrade/atcontentypes_bbb.py b/plone/app/upgrade/atcontentypes_bbb.py
index 42dea06c..743f8174 100644
--- a/plone/app/upgrade/atcontentypes_bbb.py
+++ b/plone/app/upgrade/atcontentypes_bbb.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import registerToolInterface
 from zope.interface import Interface
@@ -7,15 +8,17 @@
 
 
 class FactoryTool(SimpleItem):
-    ''' Compatibility code for portal_factory
-    '''
+    """ Compatibility code for portal_factory
+    """
 
     def __nonzero__(self):
-        ''' Always evaluate to False
-        '''
+        """ Always evaluate to False
+        """
         return 0
 
 
 class IFactoryTool(Interface):
     pass
+
+
 registerToolInterface('portal_factory', IFactoryTool)
diff --git a/plone/app/upgrade/bbb.py b/plone/app/upgrade/bbb.py
index 9c7a28b6..89c3fc7a 100644
--- a/plone/app/upgrade/bbb.py
+++ b/plone/app/upgrade/bbb.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
 from Products.CMFCore.utils import registerToolInterface
 from zope.interface import Interface
@@ -26,6 +27,8 @@ class ICalendarTool(Interface):
 
 class IActionIconsTool(Interface):
     pass
+
+
 registerToolInterface('portal_actionicons', IActionIconsTool)
 
 
diff --git a/plone/app/upgrade/bbbd/LanguageTool.py b/plone/app/upgrade/bbbd/LanguageTool.py
index fe827636..16bc01bc 100644
--- a/plone/app/upgrade/bbbd/LanguageTool.py
+++ b/plone/app/upgrade/bbbd/LanguageTool.py
@@ -1,6 +1,5 @@
+# -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import registerToolInterface
-from zope.interface import Interface
 from ZPublisher import BeforeTraverse
 
 
diff --git a/plone/app/upgrade/bbbd/__init__.py b/plone/app/upgrade/bbbd/__init__.py
index 56fc51d2..87cd06e7 100644
--- a/plone/app/upgrade/bbbd/__init__.py
+++ b/plone/app/upgrade/bbbd/__init__.py
@@ -1 +1,2 @@
-from .LanguageTool import LanguageTool
+# -*- coding: utf-8 -*-
+from .LanguageTool import LanguageTool  # noqa F401
diff --git a/plone/app/upgrade/kupu_bbb.py b/plone/app/upgrade/kupu_bbb.py
index 6dd9fd52..21c55c57 100644
--- a/plone/app/upgrade/kupu_bbb.py
+++ b/plone/app/upgrade/kupu_bbb.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS import SimpleItem
 
 
diff --git a/plone/app/upgrade/tests/__init__.py b/plone/app/upgrade/tests/__init__.py
index 792d6005..ec51c5a2 100644
--- a/plone/app/upgrade/tests/__init__.py
+++ b/plone/app/upgrade/tests/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 #
diff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py
index a9a58b50..322380fc 100644
--- a/plone/app/upgrade/tests/base.py
+++ b/plone/app/upgrade/tests/base.py
@@ -2,21 +2,21 @@
 from os.path import abspath
 from os.path import dirname
 from os.path import join
-from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import FunctionalTesting
-from plone.app.testing.bbb import PTC_FIXTURE
+from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.bbb import PloneTestCase
+from plone.app.testing.bbb import PTC_FIXTURE
 from Products.CMFCore.interfaces import IActionCategory
 from Products.CMFCore.interfaces import IActionInfo
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.context import TarballImportContext
-from zope.configuration import xmlconfig
 from zope.site.hooks import setSite
 
 import transaction
 import warnings
 
+
 #
 # Base TestCase for upgrades
 #
@@ -30,10 +30,9 @@ def setUpZope(self, app, configurationContext):
         # In 5.0 alpha we install or upgrade plone.app.caching,
         # so it must be available to Zope.
         import plone.app.caching
-        xmlconfig.file(
-            'configure.zcml',
-            plone.app.caching,
-            context=configurationContext
+        self.loadZCML(
+            name='configure.zcml',
+            package=plone.app.caching,
         )
 
 
@@ -51,7 +50,7 @@ def removeActionFromTool(
         self,
         action_id,
         category=None,
-        action_provider='portal_actions'
+        action_provider='portal_actions',
     ):
         # Removes an action from portal_actions
         tool = getToolByName(self.portal, action_provider)
diff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py
index 67714634..fabc4886 100644
--- a/plone/app/upgrade/tests/test_upgrade.py
+++ b/plone/app/upgrade/tests/test_upgrade.py
@@ -1,14 +1,16 @@
-from Products.CMFPlone.factory import _DEFAULT_PROFILE
-from Products.CMFCore.utils import getToolByName
-from plone.app.upgrade.utils import version_match
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.tests.base import MigrationTest
+from plone.app.upgrade.utils import version_match
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.factory import _DEFAULT_PROFILE
+
 import mock
 
 
 class TestUpgrade(MigrationTest):
 
     def afterSetUp(self):
-        self.setup = getToolByName(self.portal, "portal_setup")
+        self.setup = getToolByName(self.portal, 'portal_setup')
 
     def testListUpgradeSteps(self):
         # There should be no upgrade steps from the current version
diff --git a/plone/app/upgrade/tests/test_utils.py b/plone/app/upgrade/tests/test_utils.py
index 55db3446..ac9506d0 100644
--- a/plone/app/upgrade/tests/test_utils.py
+++ b/plone/app/upgrade/tests/test_utils.py
@@ -1,6 +1,7 @@
-from Products.CMFCore.utils import getToolByName
-from plone.app.upgrade.tests.base import MigrationTest
+# -*- coding: utf-8 -*-
 from plone.app.upgrade import utils
+from plone.app.upgrade.tests.base import MigrationTest
+from Products.CMFCore.utils import getToolByName
 
 
 class TestUtils(MigrationTest):
@@ -23,12 +24,16 @@ def layers_in_selection(selection_name):
         # An initial cleanup should do nothing.
         utils.cleanUpSkinsTool(self.portal)
         difference = set(existing) ^ set(skins)
-        self.assertEqual(len(skins.keys()), len(existing),
-                         msg='Skink difference is: {}'.format(list(difference)))
-        difference = set(layers_in_selection(selection)) ^ set(existing_layers_in_selection)
-        self.assertEqual(len(layers_in_selection(selection)),
-                         len(existing_layers_in_selection),
-                         msg='Layer difference is: {}'.format(list(difference)))
+        self.assertEqual(
+            len(skins.keys()),
+            len(existing),
+            msg='Skink difference is: {0}'.format(list(difference)))
+        difference = set(layers_in_selection(selection)) ^ set(
+            existing_layers_in_selection)
+        self.assertEqual(
+            len(layers_in_selection(selection)),
+            len(existing_layers_in_selection),
+            msg='Layer difference is: {0}'.format(list(difference)))
 
         # A second cleanup should also do nothing.  We used to rename
         # plone_styles to classic_styles on the first run, which would get
@@ -50,7 +55,7 @@ def layers_in_selection(selection_name):
         registerDirectory(skin_name, globals(), subdirs=1)
         # Add the DirectoryView object to portal_skins.
         directory_info = DirectoryView(
-            skin_name, reg_key='plone.app.upgrade.tests:%s' % skin_name)
+            skin_name, reg_key='plone.app.upgrade.tests:{0}'.format(skin_name))
         skins._setObject(skin_name, directory_info)
 
         # Add its sub skins to a skin selection.
diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index fe81240d..506776bb 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -1,6 +1,8 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.CMFCore.DirectoryView import _dirreg
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import base_hasattr
 from Products.GenericSetup.interfaces import ISetupTool
 from Products.GenericSetup.registry import _export_step_registry
 from Products.GenericSetup.registry import _import_step_registry
@@ -20,7 +22,7 @@
 
 logger = logging.getLogger('plone.app.upgrade')
 
-plone_version = pkg_resources.get_distribution("Products.CMFPlone").version
+plone_version = pkg_resources.get_distribution('Products.CMFPlone').version
 
 
 def version_match(target):
@@ -50,15 +52,15 @@ def safeEditProperty(obj, key, value, data_type='string'):
 def addLinesToProperty(obj, key, values):
     if obj.hasProperty(key):
         data = getattr(obj, key)
-        if type(data) is TupleType:
+        if isinstance(data, TupleType):
             data = list(data)
-        if type(values) is ListType:
+        if isinstance(values, ListType):
             data.extend(values)
         else:
             data.append(values)
         obj._updateProperty(key, data)
     else:
-        if type(values) is not ListType:
+        if not isinstance(values, ListType):
             values = [values]
         obj._setProperty(key, values, 'lines')
 
@@ -68,9 +70,10 @@ def saveCloneActions(actionprovider):
         return True, actionprovider._cloneActions()
     except AttributeError:
         # Stumbled across ancient dictionary actions
-        if not hasattr(aq_base(actionprovider), '_convertActions'):
-            return False, ("Can't convert actions of %s! Jumping to next "
-                           "action." % actionprovider.getId(), logging.ERROR)
+        if not base_hasattr(actionprovider, '_convertActions'):
+            return False, (
+                "Can't convert actions of {0}! Jumping to next "
+                'action.'.format(actionprovider.getId()), logging.ERROR)
         else:
             actionprovider._convertActions()
             return True, actionprovider._cloneActions()
@@ -168,27 +171,27 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):
     if old_qi:
         if not qi.isProductInstalled(product_name):
             qi.installProduct(product_name, hidden=hidden)
-            logger.info("Installed %s" % product_name)
+            logger.info('Installed %s', product_name)
         elif old_qi:
             info = qi._getOb(product_name)
             installed_version = info.getInstalledVersion()
             product_version = qi.getProductVersion(product_name)
             if installed_version != product_version:
                 qi.reinstallProducts([product_name])
-                logger.info("%s is out of date (installed: %s/ "
-                            "filesystem: %s), reinstalled." % (
-                                product_name, installed_version,
-                                product_version))
+                logger.info(
+                    '%s is out of date (installed: %s/ filesystem: %s), '
+                    'reinstalled.',
+                    product_name, installed_version, product_version)
             else:
-                logger.info('%s already installed.' % product_name)
+                logger.info('%s already installed.', product_name)
     else:
         # New QI browser view.
         if not qi.is_product_installed(product_name):
             qi.install_product(product_name, allow_hidden=True)
-            logger.info("Installed %s" % product_name)
+            logger.info('Installed %s', product_name)
         else:
             qi.upgrade_product(product_name)
-            logger.info("Upgraded %s", product_name)
+            logger.info('Upgraded %s', product_name)
     # Refresh skins
     portal.clearCurrentSkin()
     if getattr(portal, 'REQUEST', None):
@@ -197,7 +200,7 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):
 
 def loadMigrationProfile(context, profile, steps=_marker):
     if not ISetupTool.providedBy(context):
-        context = getToolByName(context, "portal_setup")
+        context = getToolByName(context, 'portal_setup')
     if steps is _marker:
         context.runAllImportStepsFromProfile(profile, purge_old=False)
     else:
@@ -292,7 +295,7 @@ def updateIconsInBrains(context, typesToUpdate=None):
             if not icon_expr:
                 empty_icons.append(name)
 
-    brains = search(portal_type=empty_icons, sort_on="path")
+    brains = search(portal_type=empty_icons, sort_on='path')
     num_objects = len(brains)
     pghandler = ZLogHandler(1000)
     pghandler.init('Updating getIcon metadata', num_objects)
diff --git a/plone/app/upgrade/v40/__init__.py b/plone/app/upgrade/v40/__init__.py
index fafec795..8b8d5f7d 100644
--- a/plone/app/upgrade/v40/__init__.py
+++ b/plone/app/upgrade/v40/__init__.py
@@ -1,2 +1,3 @@
-import alphas
-import betas
+# -*- coding: utf-8 -*-
+import alphas  # noqa F401
+import betas  # noqa F401
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index b2bbc3ba..707fa173 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -1,33 +1,34 @@
-import transaction
-
-from zope.component import queryMultiAdapter
-from zope.component import getUtilitiesFor
-from zope.component import getSiteManager, getUtility
-from zope.ramcache.interfaces.ram import IRAMCache
-from zope.ramcache.ram import RAMCache
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Acquisition import aq_get
-from Products.CMFCore.CachingPolicyManager import manage_addCachingPolicyManager
-from Products.CMFCore.interfaces import ICachingPolicyManager
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.setuphandlers import addCacheHandlers
-from Products.CMFPlone.setuphandlers import addCacheForResourceRegistry
-from Products.MailHost.MailHost import MailHost
-from Products.MailHost.interfaces import IMailHost
-from zExceptions import NotFound
-from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
-
 from plone.app.upgrade.utils import cleanUpSkinsTool as generalCleanUpSkinsTool
-from plone.app.upgrade.utils import logger
 from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import logger
 from plone.app.upgrade.utils import unregisterSteps
+from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
 from plone.portlet.static.static import IStaticPortlet
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletAssignmentSettings
 from plone.portlets.interfaces import IPortletManager
-
+# We either get E501 line too long,
+# or I001 isort found an import in the wrong position...
+from Products.CMFCore.CachingPolicyManager import manage_addCachingPolicyManager  # noqa E501
 from Products.CMFCore.Expression import Expression
+from Products.CMFCore.interfaces import ICachingPolicyManager
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.setuphandlers import addCacheForResourceRegistry
+from Products.CMFPlone.setuphandlers import addCacheHandlers
+from Products.MailHost.interfaces import IMailHost
+from Products.MailHost.MailHost import MailHost
+from zExceptions import NotFound
+from zope.component import getSiteManager
+from zope.component import getUtilitiesFor
+from zope.component import getUtility
+from zope.component import queryMultiAdapter
+from zope.ramcache.interfaces.ram import IRAMCache
+from zope.ramcache.ram import RAMCache
+
+import transaction
 
 
 _KNOWN_ACTION_ICONS = {
@@ -82,7 +83,7 @@ def threeX_alpha1(context):
     if qi is not None:
         if 'plonetheme.classic' in qi:
             stool.runAllImportStepsFromProfile(
-                'profile-plonetheme.classic:default'
+                'profile-plonetheme.classic:default',
             )
     else:
         # Plone 5.1 and higher.
@@ -92,8 +93,8 @@ def threeX_alpha1(context):
         # Plone 5, which is fine, but we will try it anyway.
         if qi.is_product_installed('plonetheme.classic'):
             stool.runAllImportStepsFromProfile(
-                'profile-plonetheme.classic:default'
-                )
+                'profile-plonetheme.classic:default',
+            )
     # Install packages that are needed for Plone 4,
     # but don't break on Plone 5 where they are gone
     for profile in ('archetypes.referencebrowserwidget:default',
@@ -112,20 +113,22 @@ def restoreTheme(context):
 
     if old_default_skin == 'Plone Default':
         v_storage = getUtility(IViewletSettingsStorage)
-        uncustomized_layers = ('custom,tinymce,referencebrowser,LanguageTool,cmfeditions_views,'
-                               'CMFEditions,kupu_plone,kupu,kupu_tests,archetypes,archetypes_kss,'
-                               'mimetypes_icons,plone_kss,ATContentTypes,PasswordReset,'
-                               'plone_ecmascript,plone_wysiwyg,plone_prefs,plone_templates,'
-                               'classic_styles,plone_form_scripts,plone_scripts,plone_forms,'
-                               'plone_images,plone_content,plone_login,plone_deprecated,'
-                               'plone_3rdParty,cmf_legacy')
+        uncustomized_layers = (
+            'custom,tinymce,referencebrowser,LanguageTool,cmfeditions_views,'
+            'CMFEditions,kupu_plone,kupu,kupu_tests,archetypes,archetypes_kss,'
+            'mimetypes_icons,plone_kss,ATContentTypes,PasswordReset,'
+            'plone_ecmascript,plone_wysiwyg,plone_prefs,plone_templates,'
+            'classic_styles,plone_form_scripts,plone_scripts,plone_forms,'
+            'plone_images,plone_content,plone_login,plone_deprecated,'
+            'plone_3rdParty,cmf_legacy')
         if skins.selections.get('Plone Default') == uncustomized_layers:
             # if the old theme's layers hadn't been mucked with, we can just
             # use Plone Classic Theme
             old_default_skin = 'Plone Classic Theme'
         else:
             # otherwise, copy Plone Default to a new theme
-            skins.selections['Old Plone 3 Custom Theme'] = skins.selections.get(
+            skins.selections[
+                'Old Plone 3 Custom Theme'] = skins.selections.get(
                 'Plone Default')
             # copy the viewlet order
             v_storage._order['Old Plone 3 Custom Theme'] = dict(
@@ -219,14 +222,16 @@ def migrateActionIcons(context):
             action = atool[new_cat].get(ident)
             if action is not None:
                 if not action.icon_expr:
-                    action._setPropValue('icon_expr', '%s%s' % (prefix, expr))
+                    action._setPropValue(
+                        'icon_expr', '{0}{1}'.format(prefix, expr))
         elif cat == 'controlpanel':
             # control panel tool
             action_infos = [a for a in cptool.listActions()
                             if a.getId() == ident]
             if len(action_infos):
                 if not action_infos[0].getIconExpression():
-                    action_infos[0].setIconExpression('%s%s' % (prefix, expr))
+                    action_infos[0].setIconExpression(
+                        '{0}{1}'.format(prefix, expr))
 
         # Remove the action icon
         aitool.removeActionIcon(cat, ident)
@@ -267,9 +272,16 @@ def changeAuthenticatedResourcesCondition(context):
     """
     resources = {
         'portal_css': ('member.css', ),
-        'portal_javascripts': ('dropdown.js', 'table_sorter.js',
-                               'calendar_formfield.js', 'calendarpopup.js', 'formUnload.js',
-                               'formsubmithelpers.js', 'unlockOnFormUnload.js')}
+        'portal_javascripts': (
+            'dropdown.js',
+            'table_sorter.js',
+            'calendar_formfield.js',
+            'calendarpopup.js',
+            'formUnload.js',
+            'formsubmithelpers.js',
+            'unlockOnFormUnload.js',
+        ),
+    }
     ANON = ('not: portal/portal_membership/isAnonymousUser',
             'not:portal/portal_membership/isAnonymousUser', )
     for tool_id, resource_ids in resources.items():
@@ -422,7 +434,7 @@ def migrate_portlets_for_object(obj, path):
                 if IStaticPortlet.providedBy(portlet) and \
                         getattr(portlet, 'hide', False):
                     logger.info(
-                        'Found hidden static text portlet %s at %s' %
+                        'Found hidden static text portlet %s at %s',
                         (portlet_id, path))
                     settings = IPortletAssignmentSettings(portlet)
                     settings['visible'] = False
@@ -535,12 +547,15 @@ def update(brain):
         update(brain)
     for brain in search(Type='Large Folder'):   # just to make sure...
         update(brain)
-    logger.info('Updated `portal_type` for former "Large Folder" content')
+    logger.info("Updated `portal_type` for former 'Large Folder' content")
 
 
 def addRecursiveGroupsPlugin(context):
     """Add a recursive groups plugin to acl_users"""
-    from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import addRecursiveGroupsPlugin, IRecursiveGroupsPlugin
+    from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import (
+        addRecursiveGroupsPlugin)
+    from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import (
+        IRecursiveGroupsPlugin)
     from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin
     acl = getToolByName(context, 'acl_users')
     plugins = acl.plugins
@@ -551,11 +566,12 @@ def addRecursiveGroupsPlugin(context):
             if IRecursiveGroupsPlugin.providedBy(p):
                 plugins.deactivatePlugin(IGroupsPlugin, id)
                 logger.warn(
-                    'Found an existing Recursive Groups plugin, %s, in acl_users, deactivating.' % id)
+                    'Found an existing Recursive Groups plugin, %s, '
+                    'in acl_users, deactivating.', id)
 
-    if not 'recursive_groups' in acl:
+    if 'recursive_groups' not in acl:
         addRecursiveGroupsPlugin(
-            acl, 'recursive_groups', "Recursive Groups Plugin")
+            acl, 'recursive_groups', 'Recursive Groups Plugin')
 
 
 def cleanUpClassicThemeResources(context):
@@ -568,7 +584,8 @@ def cleanUpClassicThemeResources(context):
     qi = getToolByName(context, 'portal_quickinstaller', None)
     if qi is not None and 'plonetheme.classic' in qi:
         classictheme = qi['plonetheme.classic']
-        classictheme.resources_css = []  # empty the list of installed resources
+        # empty the list of installed resources
+        classictheme.resources_css = []
 
 
 def migrateTypeIcons(context):
@@ -581,7 +598,8 @@ def migrateTypeIcons(context):
         if 'content_icon' in type.__dict__:
             icon = type.content_icon
             if icon and not getattr(type, 'icon_expr', False):
-                type.icon_expr = "string:${portal_url}/%s" % icon
+                # Replacing %s with .format would give a KeyError portal_url.
+                type.icon_expr = 'string:${portal_url}/%s' % icon  # noqa S001
                 type.icon_expr_object = Expression(type.icon_expr)
                 del type.content_icon
 
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index 75bee1b5..3df9adcb 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -1,11 +1,14 @@
-import transaction
+# -*- coding: utf-8 -*-
+from Acquisition import aq_base
+from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import logger
+from plone.app.upgrade.utils import updateIconsInBrains
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.CatalogTool import BLACKLISTED_INTERFACES
+from Products.CMFPlone.utils import safe_hasattr
 from zope.dottedname.resolve import resolve
 
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import updateIconsInBrains
+import transaction
 
 
 def alpha5_beta1(context):
@@ -15,13 +18,18 @@ def alpha5_beta1(context):
 
 
 def repositionRecursiveGroupsPlugin(context):
-    """If the recursive groups plugin is active, make sure it's at the bottom of the active plugins list"""
+    """Reposition recursive groups plugin.
+
+    If the recursive groups plugin is active,
+    make sure it's at the bottom of the active plugins list.
+    """
     from Products.PluggableAuthService.interfaces.plugins import IGroupsPlugin
     acl = getToolByName(context, 'acl_users')
     plugins = acl.plugins
     existingGroupsPlugins = plugins.listPlugins(IGroupsPlugin)
     if 'recursive_groups' in [a[0] for a in existingGroupsPlugins]:
-        while plugins.getAllPlugins('IGroupsPlugin')['active'].index('recursive_groups') < len(existingGroupsPlugins) - 1:
+        while plugins.getAllPlugins('IGroupsPlugin')['active'].index(
+                'recursive_groups') < len(existingGroupsPlugins) - 1:
             plugins.movePluginsDown(IGroupsPlugin, ['recursive_groups'])
 
 
@@ -33,7 +41,10 @@ def beta1_beta2(context):
 
 
 def updateSafeHTMLConfig(context):
-    """Update the safe_html transform with the new config params, migrating existing config from Kupu."""
+    """Update the safe_html transform with the new config params.
+
+    Migrate existing config from Kupu.
+    """
     transform = getToolByName(context, 'portal_transforms').safe_html
     transform._tr_init(1)  # load new config items
     kupu_tool = getToolByName(context, 'kupu_library_tool', None)
@@ -42,14 +53,15 @@ def updateSafeHTMLConfig(context):
     list_conf = []
     # Kupu sets its attributes on first use, rather than providing class level
     # defaults.
-    if hasattr(kupu_tool.aq_base, 'style_whitelist'):
+    kupu_tool_base = aq_base(kupu_tool)
+    if safe_hasattr(kupu_tool_base, 'style_whitelist'):
         styles = list(kupu_tool.style_whitelist)
         if 'padding-left' not in styles:
             styles.append('padding-left')
         list_conf.append(('style_whitelist', styles))
-    if hasattr(kupu_tool.aq_base, 'class_blacklist'):
+    if safe_hasattr(kupu_tool_base, 'class_blacklist'):
         list_conf.append(('class_blacklist', kupu_tool.class_blacklist))
-    if hasattr(kupu_tool.aq_base, 'html_exclusions'):
+    if safe_hasattr(kupu_tool_base, 'html_exclusions'):
         list_conf.append(
             ('stripped_attributes', kupu_tool.get_stripped_attributes()))
     for k, v in list_conf:
@@ -59,7 +71,7 @@ def updateSafeHTMLConfig(context):
         while tdata:
             tdata.pop()
         tdata.extend(v)
-    if hasattr(kupu_tool.aq_base, 'html_exclusions'):
+    if safe_hasattr(kupu_tool_base, 'html_exclusions'):
         ksc = dict((str(' '.join(k)), str(' '.join(v)))
                    for k, v in kupu_tool.get_stripped_combinations())
         tsc = transform._config['stripped_combinations']
@@ -150,13 +162,13 @@ def convertToBlobs(context):
 
     output = migrateATBlobFiles(context)
     count = len(output.split('\n')) - 1
-    logger.info('Migrated %s files to blobs.' % count)
+    logger.info('Migrated %s files to blobs.', count)
 
     logger.info('Started migration of images to blobs.')
     from plone.app.blob.migrations import migrateATBlobImages
     output = migrateATBlobImages(context)
     count = len(output.split('\n')) - 1
-    logger.info('Migrated %s images to blobs.' % count)
+    logger.info('Migrated %s images to blobs.', count)
     if ori_enable_link_integrity_checks:
         logger.info('Restored original link integrity checking setting')
         sprop.enable_link_integrity_checks = ori_enable_link_integrity_checks
@@ -244,8 +256,9 @@ def fix_cataloged_interface_names(context):
                 new_value = list(sorted((set(value) - delete).union(rename)))
                 if value != new_value:
                     _unindex[docid] = new_value
-                if pos and pos % 10000 == 0:
-                    logger.info('Processed %s items.' % pos)
+                # Note: flake8 erroneously complains about module formatter.
+                if pos and pos % 10000 == 0:  # noqa S001
+                    logger.info('Processed %s items.', pos)
                     transaction.savepoint(optimistic=True)
 
     transaction.savepoint(optimistic=True)
diff --git a/plone/app/upgrade/v40/tests.py b/plone/app/upgrade/v40/tests.py
index 2a5b836f..717fc1f0 100644
--- a/plone/app/upgrade/v40/tests.py
+++ b/plone/app/upgrade/v40/tests.py
@@ -1,41 +1,39 @@
-import time
-
-from zope.component import getMultiAdapter
-from zope.component import getSiteManager
-from zope.component import getUtility
-from zope.component import queryUtility
-from zope.ramcache.interfaces.ram import IRAMCache
-
-from Products.CMFCore.ActionInformation import Action
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.utils import getToolByName
-from Products.MailHost.interfaces import IMailHost
-
+# -*- coding: utf-8 -*-
+from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import version_match
 from plone.app.upgrade.v40.alphas import _KNOWN_ACTION_ICONS
-from plone.app.upgrade.v40.alphas import migrateActionIcons
-from plone.app.upgrade.v40.alphas import migrateTypeIcons
 from plone.app.upgrade.v40.alphas import addOrReplaceRamCache
-from plone.app.upgrade.v40.alphas import changeWorkflowActorVariableExpression
+from plone.app.upgrade.v40.alphas import addRecursiveGroupsPlugin
 from plone.app.upgrade.v40.alphas import changeAuthenticatedResourcesCondition
-from plone.app.upgrade.v40.alphas import setupReferencebrowser
-from plone.app.upgrade.v40.alphas import migrateMailHost
+from plone.app.upgrade.v40.alphas import changeWorkflowActorVariableExpression
+from plone.app.upgrade.v40.alphas import cleanUpClassicThemeResources
+from plone.app.upgrade.v40.alphas import migrateActionIcons
 from plone.app.upgrade.v40.alphas import migrateFolders
+from plone.app.upgrade.v40.alphas import migrateMailHost
+from plone.app.upgrade.v40.alphas import migrateStaticTextPortlets
+from plone.app.upgrade.v40.alphas import migrateTypeIcons
 from plone.app.upgrade.v40.alphas import renameJoinFormFields
+from plone.app.upgrade.v40.alphas import setupReferencebrowser
 from plone.app.upgrade.v40.alphas import updateLargeFolderType
-from plone.app.upgrade.v40.alphas import addRecursiveGroupsPlugin
-from plone.app.upgrade.v40.alphas import cleanUpClassicThemeResources
-from plone.app.upgrade.v40.alphas import migrateStaticTextPortlets
+from plone.app.upgrade.v40.betas import removeLargePloneFolder
 from plone.app.upgrade.v40.betas import repositionRecursiveGroupsPlugin
 from plone.app.upgrade.v40.betas import updateIconMetadata
-from plone.app.upgrade.v40.betas import removeLargePloneFolder
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import version_match
-
 from plone.portlet.static import static
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletAssignmentSettings
 from plone.portlets.interfaces import IPortletManager
+from Products.CMFCore.ActionInformation import Action
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.utils import getToolByName
+from Products.MailHost.interfaces import IMailHost
+from zope.component import getMultiAdapter
+from zope.component import getSiteManager
+from zope.component import getUtility
+from zope.component import queryUtility
+from zope.ramcache.interfaces.ram import IRAMCache
+
+import time
 
 
 class FakeSecureMailHost(object):
@@ -55,7 +53,7 @@ def manage_fixupOwnershipAfterAdd(self):
 
 class TestMigrations_v4_0alpha1(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:3-4alpha1"
+    profile = 'profile-plone.app.upgrade.v40:3-4alpha1'
 
     def afterSetUp(self):
         self.atool = getToolByName(self.portal, 'portal_actions')
@@ -160,37 +158,37 @@ def testContentTypeIconExpressions(self):
         FTIs should now be using icon_expr instead of content_icon.
         (The former caches the expression object.)
         """
-        tt = getToolByName(self.portal, "portal_types")
+        tt = getToolByName(self.portal, 'portal_types')
         tt.Document.icon_expr = None
         loadMigrationProfile(self.portal, self.profile, ('typeinfo', ))
         self.assertEqual(tt.Document.icon_expr,
-                         "string:${portal_url}/document_icon.png")
+                         'string:${portal_url}/document_icon.png')
 
     def testMigrateTypeIcons(self):
         """
         FTIs having content_icon should be upgraded to icon_expr.
         """
-        tt = getToolByName(self.portal, "portal_types")
+        tt = getToolByName(self.portal, 'portal_types')
         del tt.Document.icon_expr
         tt.Document.content_icon = 'document_icon.gif'
         migrateTypeIcons(self.portal)
         self.assertEqual(tt.Document.icon_expr,
-                         "string:${portal_url}/document_icon.gif")
+                         'string:${portal_url}/document_icon.gif')
         self.assertTrue(hasattr(tt.Document, 'icon_expr_object'))
 
         # Don't upgrade if there is already an icon_expr.
-        tt.Document.icon_expr = "string:${portal_url}/document_icon.png"
+        tt.Document.icon_expr = 'string:${portal_url}/document_icon.png'
         tt.Document.content_icon = 'document_icon.gif'
         migrateTypeIcons(self.portal)
         self.assertEqual(tt.Document.icon_expr,
-                         "string:${portal_url}/document_icon.png")
+                         'string:${portal_url}/document_icon.png')
 
     def testPngContentIcons(self):
-        tt = getToolByName(self.portal, "portal_types")
-        tt.Document.icon_expr = "string:${portal_url}/document_icon.gif"
+        tt = getToolByName(self.portal, 'portal_types')
+        tt.Document.icon_expr = 'string:${portal_url}/document_icon.gif'
         loadMigrationProfile(self.portal, self.profile, ('typeinfo', ))
         self.assertEqual(tt.Document.icon_expr,
-                         "string:${portal_url}/document_icon.png")
+                         'string:${portal_url}/document_icon.png')
 
     def testAddRAMCache(self):
         # Test it twice
@@ -260,7 +258,7 @@ def testChangeAuthenticatedResourcesCondition(self):
     def testAddedUseEmailProperty(self):
         tool = getToolByName(self.portal, 'portal_properties')
         sheet = getattr(tool, 'site_properties')
-        #self.assertEqual(sheet.getProperty('use_email_as_login'), False)
+        # self.assertEqual(sheet.getProperty('use_email_as_login'), False)
         self.removeSiteProperty('use_email_as_login')
         loadMigrationProfile(self.portal, self.profile, ('propertiestool', ))
         self.assertEqual(sheet.getProperty('use_email_as_login'), False)
@@ -345,8 +343,8 @@ def testMigrateStaticTextPortlets(self):
         class HiddenAssignment(static.Assignment):
             hide = True
 
-        self.setRoles(["Manager"])
-        self.portal.invokeFactory('Folder', id="statictest")
+        self.setRoles(['Manager'])
+        self.portal.invokeFactory('Folder', id='statictest')
         folder = self.portal['statictest']
 
         manager = getUtility(
@@ -387,7 +385,7 @@ def testMigrateJoinFormFields(self):
 
 class TestMigrations_v4_0alpha3(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:4alpha2-4alpha3"
+    profile = 'profile-plone.app.upgrade.v40:4alpha2-4alpha3'
 
     def testProfile(self):
         # This tests the whole upgrade profile can be loaded
@@ -403,7 +401,7 @@ def testJoinActionURL(self):
 
 class TestMigrations_v4_0alpha5(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:4alpha4-4alpha5"
+    profile = 'profile-plone.app.upgrade.v40:4alpha4-4alpha5'
 
     def testProfile(self):
         # This tests the whole upgrade profile can be loaded
@@ -479,7 +477,7 @@ def testGetEventTypeIndex(self):
 
 class TestMigrations_v4_0beta1(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:4alpha5-4beta1"
+    profile = 'profile-plone.app.upgrade.v40:4alpha5-4beta1'
 
     def testProfile(self):
         # This tests the whole upgrade profile can be loaded
@@ -513,7 +511,7 @@ def testRepositionRecursiveGroupsPlugin(self):
 
 class TestMigrations_v4_0beta2(MigrationTest):
 
-    profile = "profile-plone.app.upgrade.v40:4beta1-4beta2"
+    profile = 'profile-plone.app.upgrade.v40:4beta1-4beta2'
 
     def testProfile(self):
         # This tests the whole upgrade profile can be loaded
@@ -529,7 +527,7 @@ def testCoreContentIconExprCleared(self):
         front = self.portal['front-page']
         catalog.reindexObject(front)
         old_modified = front.modified()
-        # Make sure the getIcon metadata column shows the "original" value
+        # Make sure the getIcon metadata column shows the 'original' value
         brains = catalog(id='front-page')
         self.assertEqual(brains[0].getIcon, 'document_icon.png')
         # Run the migration
diff --git a/plone/app/upgrade/v41/__init__.py b/plone/app/upgrade/v41/__init__.py
index cb55214a..401f1ca0 100644
--- a/plone/app/upgrade/v41/__init__.py
+++ b/plone/app/upgrade/v41/__init__.py
@@ -1,3 +1,4 @@
-import alphas
-import betas
-import final
+# -*- coding: utf-8 -*-
+import alphas  # noqa F401
+import betas  # noqa F401
+import final  # noqa F401
diff --git a/plone/app/upgrade/v41/alphas.py b/plone/app/upgrade/v41/alphas.py
index ea410a57..5b67e3b2 100644
--- a/plone/app/upgrade/v41/alphas.py
+++ b/plone/app/upgrade/v41/alphas.py
@@ -1,12 +1,10 @@
-import logging
-
-import pkg_resources
-import transaction
+# -*- coding: utf-8 -*-
 from BTrees.IIBTree import IIBTree
 from BTrees.IIBTree import IISet
 from BTrees.IIBTree import IITreeSet
-from BTrees.OIBTree import OIBTree
 from BTrees.Length import Length
+from BTrees.OIBTree import OIBTree
+from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.rolemap import RolemapExportConfigurator
 from Products.PluginIndexes.BooleanIndex.BooleanIndex import BooleanIndex
@@ -15,7 +13,10 @@
 from Products.PluginIndexes.KeywordIndex.KeywordIndex import KeywordIndex
 from Products.PluginIndexes.UUIDIndex.UUIDIndex import UUIDIndex
 
-from plone.app.upgrade.utils import loadMigrationProfile
+import logging
+import pkg_resources
+import transaction
+
 
 logger = logging.getLogger('plone.app.upgrade')
 
@@ -40,8 +41,11 @@ def add_siteadmin_role(context):
     uf = getToolByName(context, 'acl_users')
     gtool = getToolByName(context, 'portal_groups')
     if not uf.searchGroups(id='Site Administrators'):
-        gtool.addGroup('Site Administrators', title='Site Administrators', roles=[
-                       'Site Administrator'])
+        gtool.addGroup(
+            'Site Administrators',
+            title='Site Administrators',
+            roles=['Site Administrator'],
+        )
 
     # update rolemap:
     # add Site Administrator role to permissions that have the Manager role,
@@ -156,7 +160,7 @@ def to41alpha2(context):
 def convert_to_booleanindex(catalog, index):
     if isinstance(index, BooleanIndex):
         return
-    logger.info('Converting index `%s` to BooleanIndex.' % index.getId())
+    logger.info('Converting index `%s` to BooleanIndex.', index.getId())
     index.__class__ = BooleanIndex
     index._p_changed = True
     catalog._catalog._p_changed = True
@@ -194,7 +198,7 @@ def convert_to_booleanindex(catalog, index):
 def convert_to_uuidindex(catalog, index):
     if isinstance(index, UUIDIndex):
         return
-    logger.info('Converting index `%s` to UUIDIndex.' % index.getId())
+    logger.info('Converting index `%s` to UUIDIndex.', index.getId())
     index.__class__ = UUIDIndex
     index._p_changed = True
     catalog._catalog._p_changed = True
@@ -217,7 +221,7 @@ def convert_to_uuidindex(catalog, index):
                         if path[:len(shortest)] != shortest:
                             raise ValueError(
                                 'Inconsistent UID index, UID %s is associated '
-                                'with multiple docids: %r' % (k, paths))
+                                'with multiple docids: %r', k, paths)
 
                     # All other docids are sub-paths of another
                     # indicating the UID was just acquired,
@@ -234,12 +238,13 @@ def optimize_dateindex(index):
     if isinstance(old_unindex, IIBTree):
         return
     index._unindex = _unindex = IIBTree()
-    logger.info('Converting to IIBTree for index `%s`.' % index.getId())
+    logger.info('Converting to IIBTree for index `%s`.', index.getId())
     for pos, (k, v) in enumerate(old_unindex.items()):
         _unindex[k] = v
-        if pos and pos % 10000 == 0:
+        # Note: flake8 erroneously complains about module formatter.
+        if pos and pos % 10000 == 0:  # noqa S001
             transaction.savepoint(optimistic=True)
-            logger.info('Processed %s items.' % pos)
+            logger.info('Processed %s items.', pos)
 
     transaction.savepoint(optimistic=True)
     logger.info('Finished conversion.')
@@ -250,15 +255,15 @@ def optimize_unindex(index):
     # allow conflict resolution inside the treeset to happen
     _index = getattr(index, '_index', None)
     if _index is not None:
-        logger.info('Converting to IITreeSet for index `%s`.' % index.getId())
+        logger.info('Converting to IITreeSet for index `%s`.', index.getId())
         i = 0
         for k, v in enumerate(_index.items()):
             if isinstance(v, int):
                 _index[k] = IITreeSet((v, ))
                 i += 1
-                if i % 10000 == 0:
+                if i % 10000 == 0:  # noqa S001
                     transaction.savepoint(optimistic=True)
-                    logger.info('Processed %s items.' % i)
+                    logger.info('Processed %s items.', i)
         transaction.savepoint(optimistic=True)
         logger.info('Finished conversion.')
 
diff --git a/plone/app/upgrade/v41/betas.py b/plone/app/upgrade/v41/betas.py
index 946608a4..eb752953 100644
--- a/plone/app/upgrade/v41/betas.py
+++ b/plone/app/upgrade/v41/betas.py
@@ -1,22 +1,22 @@
-import transaction
+# -*- coding: utf-8 -*-
+from BTrees.IIBTree import IISet
+from BTrees.IIBTree import IITreeSet
+from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import logger
+from plone.app.upgrade.v40.betas import fix_cataloged_interface_names
 from Products.CMFCore.utils import getToolByName
 from Products.PluginIndexes.BooleanIndex.BooleanIndex import BooleanIndex
 from Products.PluginIndexes.DateRangeIndex.DateRangeIndex import DateRangeIndex
-from BTrees.IIBTree import IISet
-from BTrees.IIBTree import IITreeSet
-
 from zope.event import notify
 from zope.lifecycleevent import ObjectCreatedEvent
 
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.v40.betas import fix_cataloged_interface_names
+import transaction
 
 
 def optimize_rangeindex_floor_ceiling(index):
     # respect the new ceiling and floor values
     logger.info('Optimizing range index `%s` to respect floor and ceiling '
-                'dates' % index.getId())
+                'dates', index.getId())
     ceiling_value = index.ceiling_value
     floor_value = index.floor_value
 
@@ -42,8 +42,9 @@ def optimize_rangeindex_floor_ceiling(index):
             # safely iterate over it while modifying it
             _unindex[docid] = (since, until)
             i += 1
-            if i % 10000 == 0:
-                logger.info('Processed %s items.' % i)
+            # Note: flake8 erroneously complains about module formatter.
+            if i % 10000 == 0:  # noqa S001
+                logger.info('Processed %s items.', i)
                 transaction.savepoint(optimistic=True)
 
     transaction.savepoint(optimistic=True)
@@ -52,11 +53,11 @@ def optimize_rangeindex_floor_ceiling(index):
 
 def optimize_rangeindex_int_iiset(index):
     # migrate internal int and IISet to IITreeSet
-    logger.info('Converting to IITreeSet for index `%s`.' % index.getId())
+    logger.info('Converting to IITreeSet for index `%s`.', index.getId())
     for name in ('_since', '_since_only', '_until', '_until_only'):
         tree = getattr(index, name, None)
         if tree is not None:
-            logger.info('Converting tree `%s`.' % name)
+            logger.info('Converting tree `%s`.', name)
             i = 0
             for k, v in tree.items():
                 if isinstance(v, IISet):
@@ -65,9 +66,9 @@ def optimize_rangeindex_int_iiset(index):
                 elif isinstance(v, int):
                     tree[k] = IITreeSet((v, ))
                     i += 1
-                if i and i % 10000 == 0:
+                if i and i % 10000 == 0:  # noqa S001
                     transaction.savepoint(optimistic=True)
-                    logger.info('Processed %s items.' % i)
+                    logger.info('Processed %s items.', i)
 
     transaction.savepoint(optimistic=True)
     logger.info('Finished conversion.')
@@ -77,9 +78,9 @@ def update_boolean_index(index):
     index_length = index._index_length
     if index_length is not None:
         return
-    logger.info('Updating BooleanIndex `%s`.' % index.getId())
+    logger.info('Updating BooleanIndex `%s`.', index.getId())
     index._inline_migration()
-    logger.info('Updated BooleanIndex `%s`.' % index.getId())
+    logger.info('Updated BooleanIndex `%s`.', index.getId())
 
 
 def optimize_indexes(context):
diff --git a/plone/app/upgrade/v41/final.py b/plone/app/upgrade/v41/final.py
index 85475d55..fcd5dff4 100644
--- a/plone/app/upgrade/v41/final.py
+++ b/plone/app/upgrade/v41/final.py
@@ -1,10 +1,12 @@
-import logging
-
-from plone.app.upgrade.utils import loadMigrationProfile
+# -*- coding: utf-8 -*-
+from BTrees.Length import Length
 from plone.app.upgrade.utils import installOrReinstallProduct
+from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
 from Products.ZCTextIndex.OkapiIndex import OkapiIndex
-from BTrees.Length import Length
+
+import logging
+
 
 logger = logging.getLogger('plone.app.upgrade')
 
@@ -25,7 +27,7 @@ def fixOwnerTuple(obj, path):
         old = obj.getOwnerTuple()
         if old and old[0][-1] == 'portal_memberdata':
             new = (['acl_users'], old[1])
-            logger.info('Repairing %s: %r -> %r' % (path, old, new))
+            logger.info('Repairing %s: %r -> %r', path, old, new)
             obj._owner = new
     portal.ZopeFindAndApply(portal, search_sub=True, apply_func=fixOwnerTuple)
 
@@ -34,7 +36,7 @@ def installPloneAppDiscussion(portal):
     # Make sure plone.app.discussion is properly installed.
     installOrReinstallProduct(
         portal,
-        "plone.app.discussion",
+        'plone.app.discussion',
         out=None,
         hidden=True)
 
diff --git a/plone/app/upgrade/v41/tests.py b/plone/app/upgrade/v41/tests.py
index 6792b883..8d27b6c9 100644
--- a/plone/app/upgrade/v41/tests.py
+++ b/plone/app/upgrade/v41/tests.py
@@ -1,7 +1,10 @@
-import unittest
+# -*- coding: utf-8 -*-
 from Products.ZCatalog.ZCatalog import ZCatalog
-from Products.ZCTextIndex.ZCTextIndex import ZCTextIndex, PLexicon
 from Products.ZCTextIndex.OkapiIndex import OkapiIndex
+from Products.ZCTextIndex.ZCTextIndex import PLexicon
+from Products.ZCTextIndex.ZCTextIndex import ZCTextIndex
+
+import unittest
 
 
 class MigrationUnitTests(unittest.TestCase):
@@ -16,4 +19,4 @@ def test_fixOkapiIndexes(self):
 
         from plone.app.upgrade.v41.final import fixOkapiIndexes
         fixOkapiIndexes(catalog)
-        self.assertEqual(0L, catalog.Indexes['test'].index._totaldoclen())
+        self.assertEqual(0, catalog.Indexes['test'].index._totaldoclen())
diff --git a/plone/app/upgrade/v42/__init__.py b/plone/app/upgrade/v42/__init__.py
index cb55214a..401f1ca0 100644
--- a/plone/app/upgrade/v42/__init__.py
+++ b/plone/app/upgrade/v42/__init__.py
@@ -1,3 +1,4 @@
-import alphas
-import betas
-import final
+# -*- coding: utf-8 -*-
+import alphas  # noqa F401
+import betas  # noqa F401
+import final  # noqa F401
diff --git a/plone/app/upgrade/v42/alphas.py b/plone/app/upgrade/v42/alphas.py
index c095f3bc..5067e0d7 100644
--- a/plone/app/upgrade/v42/alphas.py
+++ b/plone/app/upgrade/v42/alphas.py
@@ -1,6 +1,9 @@
-import logging
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 
+import logging
+
+
 logger = logging.getLogger('plone.app.upgrade')
 
 
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index 61efd5ba..3349ed80 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -1,11 +1,12 @@
-import logging
-
+# -*- coding: utf-8 -*-
 from AccessControl.Permission import Permission
-
-from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import installOrReinstallProduct
+from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
 
+import logging
+
+
 logger = logging.getLogger('plone.app.upgrade')
 
 
@@ -16,7 +17,7 @@ def fixOwnerTuple(obj, path):
         old = obj.getOwnerTuple()
         if old and old[0][-1] == 'portal_memberdata':
             new = (['acl_users'], old[1])
-            logger.info('Repairing %s: %r -> %r' % (path, old, new))
+            logger.info('Repairing %s: %r -> %r', path, old, new)
             obj._owner = new
     portal.ZopeFindAndApply(portal, search_sub=True, apply_func=fixOwnerTuple)
 
@@ -25,7 +26,7 @@ def installPloneAppDiscussion(portal):
     # Make sure plone.app.discussion is properly installed.
     installOrReinstallProduct(
         portal,
-        "plone.app.discussion",
+        'plone.app.discussion',
         out=None,
         hidden=True)
 
@@ -59,7 +60,7 @@ def to42rc1(context):
     """4.2b2 -> 4.2rc1
     """
     try:
-        import plone.app.jquerytools
+        import plone.app.jquerytools  # noqa F401
         loadMigrationProfile(context, 'profile-plone.app.jquery:default')
     except ImportError:
         pass
@@ -74,17 +75,17 @@ def to42rc1_discussion(context):
 
 
 def to42rc1_member_dashboard(context):
-    """Add Member role to "Portlets: View dashboard" permission
+    """Add Member role to 'Portlets: View dashboard' permission
     """
 
     p = 'Portlets: View dashboard'
     portal = getToolByName(context, 'portal_url').getPortalObject()
     roles = Permission(p, (), portal).getRoles(default=[])
-    if not "Member" in roles:
+    if 'Member' not in roles:
         acquire = isinstance(roles, list) and True or False
         roles = list(roles)
-        roles.append("Member")
-        portal.manage_permission("Portlets: View dashboard",
+        roles.append('Member')
+        portal.manage_permission('Portlets: View dashboard',
                                  roles,
                                  acquire,
                                  )
diff --git a/plone/app/upgrade/v42/final.py b/plone/app/upgrade/v42/final.py
index f1eea51b..d7648979 100644
--- a/plone/app/upgrade/v42/final.py
+++ b/plone/app/upgrade/v42/final.py
@@ -1,7 +1,8 @@
-import logging
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
-from Products.GenericSetup.upgrade import _upgrade_registry
+
+import logging
 
 
 logger = logging.getLogger('plone.app.upgrade')
diff --git a/plone/app/upgrade/v42/tests.py b/plone/app/upgrade/v42/tests.py
index c5aa5991..6db94fef 100644
--- a/plone/app/upgrade/v42/tests.py
+++ b/plone/app/upgrade/v42/tests.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import loadMigrationProfile
+
 import betas
 
 
diff --git a/plone/app/upgrade/v43/__init__.py b/plone/app/upgrade/v43/__init__.py
index b40f1d89..ae3ecbfd 100644
--- a/plone/app/upgrade/v43/__init__.py
+++ b/plone/app/upgrade/v43/__init__.py
@@ -1 +1,2 @@
-import alphas
+# -*- coding: utf-8 -*-
+import alphas  # noqa F401
diff --git a/plone/app/upgrade/v43/alphas.py b/plone/app/upgrade/v43/alphas.py
index 8588c08a..908c7e75 100644
--- a/plone/app/upgrade/v43/alphas.py
+++ b/plone/app/upgrade/v43/alphas.py
@@ -1,12 +1,15 @@
-import logging
-import re
+# -*- coding: utf-8 -*-
 from Acquisition import aq_get
-from Products.CMFCore.utils import getToolByName
-from Products.ZCatalog.ProgressHandler import ZLogHandler
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.v40.alphas import cleanUpToolRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.ZCatalog.ProgressHandler import ZLogHandler
 from Products.ZCTextIndex.interfaces import IZCTextIndex
 
+import logging
+import re
+
+
 logger = logging.getLogger('plone.app.upgrade')
 num_sort_regex = re.compile('\d+')
 
@@ -29,10 +32,12 @@ def reindex_sortable_title(context):
     for i, (name, rids) in enumerate(sort_title_index._index.iteritems()):
         pghandler.report(i)
         if len(name) > MAX_SORTABLE_TITLE or num_sort_regex.match(name):
-            if hasattr(rids, 'keys'):
-                change.extend(list(rids.keys()))
-            else:
+            try:
+                keys = rids.keys()
+            except AttributeError:
                 change.append(rids)
+            else:
+                change.extend(list(keys))
     pghandler.finish()
     update_metadata = 'sortable_title' in _catalog.schema
     pghandler = ZLogHandler(1000)
@@ -60,7 +65,7 @@ def upgradeToI18NCaseNormalizer(context):
     for index in catalog.Indexes.objectValues():
         if IZCTextIndex.providedBy(index):
             index_id = index.getId()
-            logger.info("Reindex %s index with I18N Case Normalizer",
+            logger.info('Reindex %s index with I18N Case Normalizer',
                         index_id)
             catalog.manage_clearIndex([index_id])
             catalog.reindexIndex(index_id,
@@ -104,7 +109,8 @@ def upgradePloneAppTheming(context):
         return
 
     portal_setup = getToolByName(context, 'portal_setup')
-    return portal_setup.runAllImportStepsFromProfile('profile-plone.app.theming:default')
+    return portal_setup.runAllImportStepsFromProfile(
+        'profile-plone.app.theming:default')
 
 
 def upgradePloneAppJQuery(context):
diff --git a/plone/app/upgrade/v43/betas.py b/plone/app/upgrade/v43/betas.py
index 0b344978..eaebf65f 100644
--- a/plone/app/upgrade/v43/betas.py
+++ b/plone/app/upgrade/v43/betas.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.v43.alphas import upgradeToI18NCaseNormalizer
 
diff --git a/plone/app/upgrade/v43/final.py b/plone/app/upgrade/v43/final.py
index 13b9317f..b8aced8d 100644
--- a/plone/app/upgrade/v43/final.py
+++ b/plone/app/upgrade/v43/final.py
@@ -1,15 +1,15 @@
-import logging
+# -*- coding: utf-8 -*-
+from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import unregisterSteps
+from plone.app.upgrade.v43.alphas import upgradeTinyMCEAgain
+from plone.contentrules.engine.assignments import check_rules_with_dotted_name_moved  # noqa E501
+from plone.contentrules.engine.interfaces import IRuleStorage
 from Products.CMFCore.utils import getToolByName
-
 from zope.component import getAllUtilitiesRegisteredFor
 from zope.component import queryUtility
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.engine.assignments import \
-    check_rules_with_dotted_name_moved
 
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import unregisterSteps
-from plone.app.upgrade.v43.alphas import upgradeTinyMCEAgain
+import logging
+
 
 # We had our own version of this, but it was just a copy.  We keep a
 # reference here to avoid breakage if someone imports it.
@@ -192,7 +192,7 @@ def markProductsInstalledForUninstallableProfiles(context):
         qi.notifyInstalled(
             product_id,
             locked=False,
-            logmsg="Marked as installed by plone.app.upgrade",
+            logmsg='Marked as installed by plone.app.upgrade',
             settings={},
             installedversion=version,
             status='installed',
@@ -281,7 +281,7 @@ def removeFakeKupu(context):
             elif kupu_id in expression:
                 # We are tempted to remove this, but who knows if the
                 # expression is something like this:
-                # "'kupu_library_tool' not in portal"
+                # ''kupu_library_tool' not in portal'
                 logger.warn('%s in %s has %s in expression. You probably '
                             'want to change the expression or remove the '
                             'resource.', resource_id, tool_id, kupu_id)
@@ -326,7 +326,8 @@ def addSortOnProperty(context):
 
     The default value of this field is relevance.
     """
-    site_properties = getToolByName(context, 'portal_properties').site_properties
+    site_properties = getToolByName(
+        context, 'portal_properties').site_properties
     if not site_properties.hasProperty('sort_on'):
         if 'sort_on' in site_properties.__dict__:
             # fix bug if 4.3.1 pending has been tested
diff --git a/plone/app/upgrade/v43/tests.py b/plone/app/upgrade/v43/tests.py
index e075d43e..e34df873 100644
--- a/plone/app/upgrade/v43/tests.py
+++ b/plone/app/upgrade/v43/tests.py
@@ -1,9 +1,4 @@
-from zope.component import getAdapters, queryMultiAdapter
-from zope.component import getSiteManager
-from zope.contentprovider.interfaces import IContentProvider
-from zope.interface import implementer
-from zope.viewlet.interfaces import IViewlet
-
+# -*- coding: utf-8 -*-
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.utils import loadMigrationProfile
 from Products.CMFCore.utils import getToolByName
@@ -11,9 +6,16 @@
 from Products.CMFPlone.utils import getFSVersionTuple
 from Products.GenericSetup import profile_registry
 from Products.GenericSetup.interfaces import EXTENSION
+from zope.component import getAdapters
+from zope.component import getSiteManager
+from zope.component import queryMultiAdapter
+from zope.contentprovider.interfaces import IContentProvider
+from zope.interface import implementer
+from zope.viewlet.interfaces import IViewlet
 
 import alphas
 
+
 try:
     from Products.CMFCore.indexing import processQueue
 except ImportError:
@@ -43,7 +45,8 @@ def testAddDisplayPublicationDateInBylineProperty(self):
             False)
 
     def testUpgradeToI18NCaseNormalizer(self):
-        from Products.CMFPlone.UnicodeSplitter.splitter import Splitter, CaseNormalizer
+        from Products.CMFPlone.UnicodeSplitter.splitter import Splitter
+        from Products.CMFPlone.UnicodeSplitter.splitter import CaseNormalizer
         ctool = self.portal.portal_catalog
         ctool.plone_lexicon._pipeline[1] == (Splitter(), CaseNormalizer())
         alphas.upgradeToI18NCaseNormalizer(self.portal.portal_setup)
@@ -70,11 +73,14 @@ def testUpgradeTinyMCE(self):
                 '++resource++tinymce.kss/tinymce.kss' in kssresourceids)
 
         request = self.app.REQUEST
-        plone_view = queryMultiAdapter((self.portal, request), name="plone")
+        plone_view = queryMultiAdapter((self.portal, request), name='plone')
         manager = queryMultiAdapter(
-            (self.portal, request, plone_view), IContentProvider, 'plone.htmlhead')
+            (self.portal, request, plone_view),
+            IContentProvider,
+            'plone.htmlhead')
         viewlets = getAdapters(
-            (manager.context, manager.request, manager.__parent__, manager), IViewlet)
+            (manager.context, manager.request, manager.__parent__, manager),
+            IViewlet)
         self.assertFalse(u'tinymce.configuration' in dict(viewlets))
 
     def testInstallThemingNotPreviouslyInstalled(self):
@@ -102,14 +108,14 @@ def testInstallThemingPreviouslyInstalled(self):
         try:
             registry.forInterface(IThemeSettings)
         except KeyError:
-            self.fail("plone.app.theming not installed")
+            self.fail('plone.app.theming not installed')
 
     def testReindexNumericalTitle(self):
         from Products.CMFCore.utils import getToolByName
 
         # Create 2 pages, one with a numerical title
         portal = self.portal
-        self.setRoles(["Manager"])
+        self.setRoles(['Manager'])
         catalog = getToolByName(portal, 'portal_catalog')
         portal.invokeFactory(
             id='num-title', type_name='Document',
@@ -139,7 +145,7 @@ def testReindexNumericalTitle(self):
         alphas.reindex_sortable_title(portal.portal_setup)
         self.assertEqual(
             catalog(id=portal['num-title'].id)[0].Title,
-            '9 green bottles, hanging on the wall'
+            '9 green bottles, hanging on the wall',
         )
         self.assertEqual(
             catalog(id=portal['accidentally-fall'].id)[0].Title,
@@ -179,7 +185,7 @@ def afterSetUp(self):
         self.site_properties = pprops.site_properties
         bad_expr = ('python:portal.kupu_library_tool.isKupuEnabled'
                     '(REQUEST=request)')
-        allowed_expr = 'python:"kupu_library_tool" not in portal'
+        allowed_expr = "python:'kupu_library_tool' not in portal"
         # Setup a fake kupu with resources and settings
         self.kupu_id = 'kupu_library_tool'
         portal._setObject(self.kupu_id, PloneKupuLibraryTool(id=self.kupu_id))
diff --git a/plone/app/upgrade/v50/__init__.py b/plone/app/upgrade/v50/__init__.py
index e69de29b..40a96afc 100644
--- a/plone/app/upgrade/v50/__init__.py
+++ b/plone/app/upgrade/v50/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/upgrade/v50/alphas.py b/plone/app/upgrade/v50/alphas.py
index 87c9a20b..9ebc6d72 100644
--- a/plone/app/upgrade/v50/alphas.py
+++ b/plone/app/upgrade/v50/alphas.py
@@ -1,18 +1,9 @@
 # -*- coding: utf-8 -*-
-import logging
-import pkg_resources
-
-from Acquisition import aq_parent, aq_base
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces import IEditingSchema
-from Products.CMFPlone.interfaces import IMaintenanceSchema
-from Products.CMFPlone.interfaces import INavigationSchema
-from Products.CMFPlone.interfaces import ISearchSchema
-from Products.CMFPlone.interfaces import ISiteSchema
-from Products.CMFPlone.utils import safe_unicode
+from Acquisition import aq_base
+from Acquisition import aq_parent
 from plone.app.theming.interfaces import IThemeSettings
-from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import get_property
+from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.v40.alphas import cleanUpToolRegistry
 from plone.app.vocabularies.types import BAD_TYPES
 from plone.keyring.interfaces import IKeyManager
@@ -20,6 +11,13 @@
 from plone.keyring.keyring import Keyring
 from plone.protect.interfaces import IDisableCSRFProtection
 from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import IEditingSchema
+from Products.CMFPlone.interfaces import IMaintenanceSchema
+from Products.CMFPlone.interfaces import INavigationSchema
+from Products.CMFPlone.interfaces import ISearchSchema
+from Products.CMFPlone.interfaces import ISiteSchema
+from Products.CMFPlone.utils import safe_unicode
 from zope.component import getSiteManager
 from zope.component import getUtility
 from zope.component.hooks import getSite
@@ -27,6 +25,10 @@
 from zope.interface import alsoProvides
 from zope.schema.interfaces import ConstraintNotSatisfied
 
+import logging
+import pkg_resources
+
+
 try:
     pkg_resources.get_distribution('plone.app.caching')
 except pkg_resources.DistributionNotFound:
@@ -142,7 +144,7 @@ def lowercase_email_login(context):
     ptool = getToolByName(context, 'portal_properties')
     if ptool.site_properties.getProperty('use_email_as_login'):
         # We want the login name to be lowercase here.  This is new in PAS.
-        logger.info("Email is used as login, setting PAS login_transform to "
+        logger.info('Email is used as login, setting PAS login_transform to '
                     "'lower'.")
         # This can take a while for large sites, as it automatically
         # transforms existing login names to lowercase.  It will fail
@@ -235,7 +237,7 @@ def upgrade_editing_controlpanel_settings(context):
        registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     # get the new registry
     registry = getUtility(IRegistry)
@@ -276,7 +278,7 @@ def upgrade_maintenance_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     # get the new registry
     registry = getUtility(IRegistry)
@@ -296,10 +298,10 @@ def upgrade_navigation_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     navigation_properties = portal_properties.navtree_properties
-    types_tool = getToolByName(context, "portal_types")
+    types_tool = getToolByName(context, 'portal_types')
     # get the new registry
     registry = getUtility(IRegistry)
     settings = registry.forInterface(
@@ -334,9 +336,9 @@ def upgrade_search_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
-    types_tool = getToolByName(context, "portal_types")
+    types_tool = getToolByName(context, 'portal_types')
     # get the new registry
     registry = getUtility(IRegistry)
     settings = registry.forInterface(
@@ -363,7 +365,7 @@ def upgrade_site_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     portal = getSite()
     # get the new registry
diff --git a/plone/app/upgrade/v50/betas.py b/plone/app/upgrade/v50/betas.py
index ce1af4d8..9cd42a25 100644
--- a/plone/app/upgrade/v50/betas.py
+++ b/plone/app/upgrade/v50/betas.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.linkintegrity.upgrades import migrate_linkintegrity_relations
-from plone.app.upgrade.utils import loadMigrationProfile
 from plone.app.upgrade.utils import get_property
+from plone.app.upgrade.utils import loadMigrationProfile
 from plone.registry.interfaces import IRegistry
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.utils import getToolByName
@@ -58,20 +58,24 @@ def upgrade_portal_language(context):
     portal = getUtility(ISiteRoot)
     default_lang = portal.getProperty('default_language', 'en')
 
-    portal_properties = getToolByName(context, "portal_properties", None)
+    portal_properties = getToolByName(context, 'portal_properties', None)
     if portal_properties is not None:
         site_properties = getattr(portal_properties, 'site_properties', None)
         if site_properties is not None:
             if site_properties.hasProperty('default_language'):
                 default_lang = site_properties.getProperty('default_language')
     lang_settings.default_language = default_lang
-    if hasattr(portal, 'portal_languages'):
-        portal_languages = getSite().portal_languages
-        for old, new in LANGUAGE_OPTION_MAPPING.items():
-            if hasattr(portal_languages, old):
-                setattr(lang_settings, new, getattr(portal_languages, old))
-        # Remove the old tool
-        portal.manage_delObjects('portal_languages')
+    try:
+        portal_languages = portal.portal_languages
+    except AttributeError:
+        return
+    for old, new in LANGUAGE_OPTION_MAPPING.items():
+        try:
+            setattr(lang_settings, new, getattr(portal_languages, old))
+        except AttributeError:
+            continue
+    # Remove the old tool
+    portal.manage_delObjects('portal_languages')
 
 
 def upgrade_mail_controlpanel_settings(context):
@@ -105,7 +109,7 @@ def upgrade_markup_controlpanel_settings(context):
        new registry.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     # get the new registry
     registry = getUtility(IRegistry)
@@ -147,7 +151,7 @@ def _get_enable_self_reg():
     # get the old site properties
     portal_url = getToolByName(context, 'portal_url')
     portal = portal_url.getPortalObject()
-    portal_properties = getToolByName(portal, "portal_properties")
+    portal_properties = getToolByName(portal, 'portal_properties')
     site_properties = portal_properties.site_properties
 
     # get the new registry
@@ -168,7 +172,8 @@ def _get_enable_self_reg():
     settings.allow_anon_views_about = site_properties.getProperty(
         'allowAnonymousViewAbout', False)
 
-    # suppress migrating login names while setting use_email_as_login to existing value
+    # suppress migrating login names while setting use_email_as_login to
+    # existing value
     from Products.CMFPlone.controlpanel import events
     migrate_to_email_login = events.migrate_to_email_login
     migrate_from_email_login = events.migrate_from_email_login
@@ -189,7 +194,7 @@ def to50beta2(context):
     portal = getSite()
 
     registry = getUtility(IRegistry)
-    settings = registry.forInterface(IImagingSchema, prefix="plone")
+    settings = registry.forInterface(IImagingSchema, prefix='plone')
 
     try:
         iprops = portal.portal_properties.imaging_properties
@@ -200,6 +205,7 @@ def to50beta2(context):
         # will only be there if from older plone instance
         pass
 
+
 # configlet id -> category
 cp_mapping = {
     # General
@@ -251,9 +257,9 @@ def to50beta3(context):
         x for x in configlets
         if x.id == 'TypesSettings'
     ][0]
-    configlet.title = "Content Settings"
+    configlet.title = 'Content Settings'
     configlet.setActionExpression(
-        "string:${portal_url}/@@content-controlpanel")
+        'string:${portal_url}/@@content-controlpanel')
 
 
 def to50beta4(context):
@@ -274,7 +280,7 @@ def upgrade_usergroups_controlpanel_settings(context):
     # get the old site properties
     portal_url = getToolByName(context, 'portal_url')
     portal = portal_url.getPortalObject()
-    portal_properties = getToolByName(portal, "portal_properties")
+    portal_properties = getToolByName(portal, 'portal_properties')
     site_properties = portal_properties.site_properties
 
     # get the new registry
@@ -289,7 +295,7 @@ def upgrade_usergroups_controlpanel_settings(context):
 
 
 def migrate_displayPublicationDateInByline(context):
-    """ Migrate the "display publication date" setting to the configuration
+    """ Migrate the 'display publication date' setting to the configuration
     registry
     """
 
@@ -301,7 +307,7 @@ def migrate_displayPublicationDateInByline(context):
     # get the old site properties
     portal_url = getToolByName(context, 'portal_url')
     portal = portal_url.getPortalObject()
-    portal_properties = getToolByName(portal, "portal_properties")
+    portal_properties = getToolByName(portal, 'portal_properties')
     site_properties = portal_properties.site_properties
 
     value = site_properties.getProperty('displayPublicationDateInByline',
@@ -423,7 +429,7 @@ def to50rc2(context):
     for p in properties_to_migrate:
         if site_properties.hasProperty(p):
             value = site_properties.getProperty(p)
-            registry['plone.%s' % p] = value
+            registry['plone.{0}'.format(p)] = value
             site_properties._delProperty(p)
 
     if site_properties.hasProperty('allow_external_login_sites'):
@@ -439,7 +445,7 @@ def upgrade_navigation_controlpanel_settings_2(context):
        only missing values not migrated before
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     navigation_properties = portal_properties.navtree_properties
     # get the new registry
     registry = getUtility(IRegistry)
@@ -520,10 +526,10 @@ def to50rc3(context):
                 elif value.lower() == 'false':
                     value = False
             try:
-                registry['plone.%s' % p] = value
+                registry['plone.{0}'.format(p)] = value
                 site_properties._delProperty(p)
             except KeyError:
-                logger.warn('could not upgrade %s property' % p)
+                logger.warn('could not upgrade %s property', p)
 
     if site_properties.hasProperty('checkout_workflow_policy'):
         value = site_properties.getProperty('checkout_workflow_policy')
@@ -555,7 +561,7 @@ def _migrate_list(original_id, new_id=None):
         if site_properties.hasProperty(original_id):
             value = site_properties.getProperty(original_id)
             value = [safe_unicode(a) for a in value]
-            registry['plone.%s' % new_id] = value
+            registry['plone.{0}'.format(new_id)] = value
             site_properties._delProperty(original_id)
 
     _migrate_list('typesUseViewActionInListings',
diff --git a/plone/app/upgrade/v50/final.py b/plone/app/upgrade/v50/final.py
index ab980353..c737c465 100644
--- a/plone/app/upgrade/v50/final.py
+++ b/plone/app/upgrade/v50/final.py
@@ -30,7 +30,7 @@ def _migrate_list(original_id, new_id=None):
         if site_properties.hasProperty(original_id):
             value = site_properties.getProperty(original_id)
             value = [safe_unicode(a) for a in value]
-            registry['plone.%s' % new_id] = value
+            registry['plone.{0}'.format(new_id)] = value
             site_properties._delProperty(original_id)
 
     # Old versions of to50rc3 migrated values from
@@ -91,7 +91,7 @@ def refresh_getIcon_catalog_metadata(context):
             cnt += 1  # we are curious
         # done
         pghandler.finish()
-        logger.info('Reindexed `getIcon` for %s items' % str(cnt))
+        logger.info('Reindexed `getIcon` for %s items', str(cnt))
 
     refresh_getIcon_catalog_metadata(context)
 
@@ -126,11 +126,8 @@ def fix_double_smaxage(context):
     plone.resource.maxage has title and description from shared maxage.
     See https://github.com/plone/Products.CMFPlone/issues/1989
     """
-    from plone.registry.interfaces import IPersistentField
     from plone.registry.record import Record
-    from plone.registry import field
     from plone.registry import FieldRef
-    from zope.component import queryAdapter
     registry = getUtility(IRegistry)
     # If these three registry records are not defined,
     # we do no fix.
@@ -146,4 +143,4 @@ def fix_double_smaxage(context):
     field_ref = FieldRef(def_maxage, registry.records[def_maxage].field)
     old_value = registry[maxage]
     registry.records[maxage] = Record(field_ref, old_value)
-    logger.info('Fixed {} to refer to {}.'.format(maxage, def_maxage))
+    logger.info('Fixed {0} to refer to {1}.'.format(maxage, def_maxage))
diff --git a/plone/app/upgrade/v50/profiles/to_501/registry.xml b/plone/app/upgrade/v50/profiles/to_501/registry.xml
index 0ed25745..3f2c11f0 100644
--- a/plone/app/upgrade/v50/profiles/to_501/registry.xml
+++ b/plone/app/upgrade/v50/profiles/to_501/registry.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <registry>
   <records interface="Products.CMFPlone.interfaces.ISiteSchema"
-           prefix="plone" />	
+           prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.ITinyMCESchema" prefix="plone" />
   <records prefix="plone.resources/mockup-patterns-base"
             interface='Products.CMFPlone.interfaces.IResourceRegistry'>
@@ -68,4 +68,4 @@
     </value>
   </records>
 
-</registry>
\ No newline at end of file
+</registry>
diff --git a/plone/app/upgrade/v50/profiles/to_beta1/registry.xml b/plone/app/upgrade/v50/profiles/to_beta1/registry.xml
index 98a4a0cd..f334dab4 100644
--- a/plone/app/upgrade/v50/profiles/to_beta1/registry.xml
+++ b/plone/app/upgrade/v50/profiles/to_beta1/registry.xml
@@ -136,7 +136,7 @@
 
 
   <!-- add theme mapper related -->
-  
+
     <!-- pattern -->
     <records prefix="plone.resources/mockup-patterns-filemanager"
             interface='Products.CMFPlone.interfaces.IResourceRegistry'>
diff --git a/plone/app/upgrade/v50/profiles/to_rc1/registry.xml b/plone/app/upgrade/v50/profiles/to_rc1/registry.xml
index 9fcfb191..36002e4c 100644
--- a/plone/app/upgrade/v50/profiles/to_rc1/registry.xml
+++ b/plone/app/upgrade/v50/profiles/to_rc1/registry.xml
@@ -4,4 +4,4 @@
            prefix="plone" />
   <records interface="Products.CMFPlone.interfaces.IUserGroupsSettingsSchema"
            prefix="plone" />
-</registry>
\ No newline at end of file
+</registry>
diff --git a/plone/app/upgrade/v50/profiles/to_rc1/skins.xml b/plone/app/upgrade/v50/profiles/to_rc1/skins.xml
index 26d6a83d..7ac7af1e 100644
--- a/plone/app/upgrade/v50/profiles/to_rc1/skins.xml
+++ b/plone/app/upgrade/v50/profiles/to_rc1/skins.xml
@@ -2,6 +2,6 @@
 <object name="portal_skins">
  <object name="plone_forms" remove="True"/>
   <skin-path name="*">
-  	<layer name="plone_forms" remove="True"/>
- </skin-path>
+    <layer name="plone_forms" remove="True"/>
+  </skin-path>
 </object>
diff --git a/plone/app/upgrade/v50/testing.py b/plone/app/upgrade/v50/testing.py
index 165f5a1e..bef21840 100644
--- a/plone/app/upgrade/v50/testing.py
+++ b/plone/app/upgrade/v50/testing.py
@@ -1,13 +1,15 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import PloneSandboxLayer
 from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import PloneSandboxLayer
 from plone.app.upgrade.utils import loadMigrationProfile
-from plone.testing.z2 import FunctionalTesting, login
+from plone.testing.z2 import FunctionalTesting
+from plone.testing.z2 import login
 from zope.component.hooks import setSite
-from zope.configuration import xmlconfig
+
 import logging
 import os
 
+
 logger = logging.getLogger(__file__)
 
 
@@ -19,10 +21,9 @@ def setUpZope(self, app, configurationContext):
         # In 5.0 alpha we install or upgrade plone.app.caching,
         # so it must be available to Zope..
         import plone.app.caching
-        xmlconfig.file(
-            'configure.zcml',
-            plone.app.caching,
-            context=configurationContext
+        self.loadZCML(
+            name='configure.zcml',
+            package=plone.app.caching,
         )
 
     def setUpPloneSite(self, portal):
@@ -34,7 +35,7 @@ def setUpPloneSite(self, portal):
             path = os.path.join(os.path.abspath(
                 os.path.dirname(__file__)), 'data', 'test-full.zexp')
             app._importObjectFromFile(path, verify=0)
-        except:
+        except BaseException:
             logger.exception('Failed to import ZEXP from old site.')
         else:
             # run upgrades
diff --git a/plone/app/upgrade/v50/tests.py b/plone/app/upgrade/v50/tests.py
index f66f456f..afc31f2c 100644
--- a/plone/app/upgrade/v50/tests.py
+++ b/plone/app/upgrade/v50/tests.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import PLONE_INTEGRATION_TESTING
 from plone.app.upgrade.tests.base import MigrationTest
 from plone.app.upgrade.v50.testing import REAL_UPGRADE_FUNCTIONAL
 from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
@@ -14,6 +13,7 @@
 
 import unittest
 
+
 try:
     from Products.CMFPlone.factory import _IMREALLYPLONE5
     _IMREALLYPLONE5  # pyflakes
@@ -49,7 +49,7 @@ def test_upgrade_with_email_login(self):
         registry = getUtility(IRegistry)
         from Products.CMFPlone.interfaces import ISecuritySchema
         security_settings = registry.forInterface(ISecuritySchema,
-                                                  prefix="plone")
+                                                  prefix='plone')
         security_settings.use_email_as_login = True
 
         # Second call.
@@ -71,7 +71,7 @@ def test_footer_portletmanager_added(self):
     def test_footer_viewlets_hidden(self):
 
         storage = getUtility(IViewletSettingsStorage)
-        manager = "plone.portalfooter"
+        manager = 'plone.portalfooter'
         skinname = self.portal.getCurrentSkinName()
 
         hidden_viewlets = storage.getHidden(manager, skinname)
@@ -131,7 +131,6 @@ class VariousTest(MigrationTest):
     def test_fix_double_smaxage(self):
         from plone.registry.interfaces import IRegistry
         from plone.registry.record import Record
-        from plone.registry import field
         from plone.registry import FieldRef
         from plone.app.upgrade.v50.final import fix_double_smaxage
         # Run the upgrade before plone.app.caching is installed,
@@ -144,7 +143,7 @@ def test_fix_double_smaxage(self):
         def_smaxage = 'plone.app.caching.strongCaching.smaxage'
         # Install default caching profile.
         portal_setup.runAllImportStepsFromProfile(
-            'plone.app.caching:default'
+            'plone.app.caching:default',
         )
         self.assertTrue(def_maxage in registry)
         self.assertTrue(def_smaxage in registry)
@@ -152,7 +151,7 @@ def test_fix_double_smaxage(self):
         fix_double_smaxage(portal_setup)
         # Install the with-caching-proxy settings.
         portal_setup.runAllImportStepsFromProfile(
-            'plone.app.caching:with-caching-proxy'
+            'plone.app.caching:with-caching-proxy',
         )
         # Run upgrade.
         fix_double_smaxage(portal_setup)
diff --git a/plone/app/upgrade/v51/alphas.py b/plone/app/upgrade/v51/alphas.py
index d7d81c59..5a9d78c3 100644
--- a/plone/app/upgrade/v51/alphas.py
+++ b/plone/app/upgrade/v51/alphas.py
@@ -19,10 +19,9 @@ def _fix_typo_in_toolbar_less_variable(context):
         return
     if 'plone-toolbar-font-secondary' in registry[plv]:
         logger.warn(
-            'Try to migrate registry value "plone-toolbar-font-secundary" to '
-            '"plone-toolbar-font-secondary", but latter already exists. '
-            'Migration to fix the typo is not executed.'
-        )
+            "Try to migrate registry value 'plone-toolbar-font-secundary' to "
+            "'plone-toolbar-font-secondary', but latter already exists. "
+            'Migration to fix the typo is not executed.')
         return
     registry[plv]['plone-toolbar-font-secondary'] = value
     del registry[plv]['plone-toolbar-font-secundary']
diff --git a/plone/app/upgrade/v51/betas.py b/plone/app/upgrade/v51/betas.py
index b0d45ffb..7bfa6c93 100644
--- a/plone/app/upgrade/v51/betas.py
+++ b/plone/app/upgrade/v51/betas.py
@@ -8,6 +8,7 @@
 from Products.ZCatalog.ProgressHandler import ZLogHandler
 from zExceptions import NotFound
 from zope.component import getUtility
+
 import logging
 
 
@@ -26,7 +27,7 @@ def addSortOnProperty(context):
     The default value of this field is relevance.
     """
     # get the old site properties
-    portal_properties = getToolByName(context, "portal_properties")
+    portal_properties = getToolByName(context, 'portal_properties')
     site_properties = portal_properties.site_properties
     # get the new registry
     registry = getUtility(IRegistry)
@@ -96,7 +97,7 @@ def remove_displayContentsTab_from_action_expressions(context):
     if not actions:
         return []
     script_name = 'displayContentsTab'
-    text = 'object/{}'.format(script_name)
+    text = 'object/{0}'.format(script_name)
     for ac in actions:
         if script_name not in ac.available_expr:
             continue
@@ -180,7 +181,7 @@ def reindex_mime_type(context):
         catalog.data[brain.getRID()] = tuple(record)
         cnt += 1
     pghandler.finish()
-    logger.info('Reindexed `mime_type` for %s items' % str(cnt))
+    logger.info('Reindexed `mime_type` for %s items', str(cnt))
 
 
 def move_safe_html_settings_to_registry(context):
diff --git a/plone/app/upgrade/v51/profiles/to_rc1/actions.xml b/plone/app/upgrade/v51/profiles/to_rc1/actions.xml
index 84096223..dc7d1272 100644
--- a/plone/app/upgrade/v51/profiles/to_rc1/actions.xml
+++ b/plone/app/upgrade/v51/profiles/to_rc1/actions.xml
@@ -1,7 +1,7 @@
 <object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">  
+   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
  <object name="user" meta_type="CMF Action Category">
-  <property name="title" i18n:translate="">User actions</property>  
+  <property name="title" i18n:translate="">User actions</property>
   <object name="dashboard" meta_type="CMF Action" i18n:domain="plone">
    <property name="title" i18n:translate="">Dashboard</property>
    <property name="description" i18n:translate=""></property>
@@ -13,6 +13,6 @@
     <element value="Portlets: Manage own portlets"/>
    </property>
    <property name="visible">True</property>
-  </object> 
- </object> 
-</object> 
+  </object>
+ </object>
+</object>
diff --git a/plone/app/upgrade/v51/tests.py b/plone/app/upgrade/v51/tests.py
index 0007e63f..457f6e02 100644
--- a/plone/app/upgrade/v51/tests.py
+++ b/plone/app/upgrade/v51/tests.py
@@ -1,12 +1,12 @@
 # -*- coding: utf-8 -*-
 from plone.app.testing import PLONE_INTEGRATION_TESTING
-from plone.app.upgrade.v50.testing import REAL_UPGRADE_FUNCTIONAL
-from zope.component import getUtility
 from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import IFilterSchema
+from zope.component import getUtility
 
 import unittest
 
+
 try:
     from Products.CMFPlone.factory import _IMREALLYPLONE5
     _IMREALLYPLONE5  # pyflakes
@@ -30,7 +30,7 @@ def test_migrate_less_variable_typo(self):
 
         # set to a defined state
         plv = 'plone.lessvariables'
-        registry[plv]['plone-toolbar-font-secundary'] = "Foo"
+        registry[plv]['plone-toolbar-font-secundary'] = 'Foo'
         if 'plone-toolbar-font-secondary' in registry[plv]:
             del registry[plv]['plone-toolbar-font-secondary']
 
@@ -40,9 +40,7 @@ def test_migrate_less_variable_typo(self):
             registry[plv]['plone-toolbar-font-secondary'],
             'Foo',
         )
-        self.assertTrue(
-            'plone-toolbar-font-secundary' not in registry[plv]
-        )
+        self.assertNotIn('plone-toolbar-font-secundary', registry[plv])
 
 
 class UpgradePortalTransforms51beta4to51beta5Test(unittest.TestCase):
@@ -54,7 +52,7 @@ def setUp(self):
         self.pt = self.portal.portal_transforms
         registry = getUtility(IRegistry)
         self.settings = registry.forInterface(
-            IFilterSchema, prefix="plone")
+            IFilterSchema, prefix='plone')
 
     def test_migrate_safe_html_settings(self):
         from plone.app.upgrade.v51.betas import \
@@ -74,9 +72,9 @@ def test_suite():
 
     suite = unittest.TestSuite()
     suite.addTest(
-        unittest.makeSuite(UpgradeRegistry503to51alpha1Test)
+        unittest.makeSuite(UpgradeRegistry503to51alpha1Test),
     )
     suite.addTest(
-        unittest.makeSuite(UpgradePortalTransforms51beta4to51beta5Test)
+        unittest.makeSuite(UpgradePortalTransforms51beta4to51beta5Test),
     )
     return suite
diff --git a/plone/app/upgrade/v52/alphas.py b/plone/app/upgrade/v52/alphas.py
index b46e8eea..32a4d4af 100644
--- a/plone/app/upgrade/v52/alphas.py
+++ b/plone/app/upgrade/v52/alphas.py
@@ -1,12 +1,11 @@
 # -*- coding: utf-8 -*-
 from plone.app.upgrade.utils import loadMigrationProfile
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
 
 import logging
 
 
 logger = logging.getLogger('plone.app.upgrade')
 
+
 def to52alpha1(context):
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v52:to52alpha1')
diff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py
index b4b2b2b8..71ef2370 100644
--- a/plone/app/upgrade/v52/tests.py
+++ b/plone/app/upgrade/v52/tests.py
@@ -1,12 +1,7 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import PLONE_INTEGRATION_TESTING
-from plone.app.upgrade.v50.testing import REAL_UPGRADE_FUNCTIONAL
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import IFilterSchema
-
 import unittest
 
+
 try:
     from Products.CMFPlone.factory import _IMREALLYPLONE5
     _IMREALLYPLONE5  # pyflakes
@@ -16,7 +11,6 @@
     PLONE_5 = True
 
 
-
 def test_suite():
     # Skip these tests on Plone 4
     if not PLONE_5:
diff --git a/qa.cfg b/qa.cfg
new file mode 100644
index 00000000..0e2ce5fb
--- /dev/null
+++ b/qa.cfg
@@ -0,0 +1,79 @@
+# Buildout configuration used by http://jenkins.plone.org/view/Pkgs/ jobs
+# to report about code analysis errors.
+#
+# Each package that has a job on that URL above will automatically get a
+# repot about the code analysis reported by plone.recipe.codeanalysis attached
+# as a comment on github.
+[buildout]
+show-picked-versions = true
+parts =
+    code-analysis
+
+[code-analysis]
+recipe = plone.recipe.codeanalysis
+multiprocessing = True
+directory = plone
+pre-commit-hook = False
+check-manifest = True
+clean-lines = True
+# keep this list in sync with what plone.recipe.codeanalysis defines
+# on its [recommended] extra, see:
+# https://github.com/plone/plone.recipe.codeanalysis/blob/master/setup.py
+flake8-extensions =
+    flake8-blind-except
+    flake8-coding
+    flake8-commas
+    flake8-debugger
+    flake8-deprecated
+    flake8-isort
+    flake8-pep3101
+    flake8-plone-hasattr
+    flake8-print
+    flake8-quotes
+    flake8-string-format
+    flake8-todo
+
+[versions]
+flake8 = 3.3.0
+flake8-blind-except = 0.1.1
+flake8-coding = 1.3.0
+flake8-commas = 0.4.3
+flake8-debugger = 1.4.0
+flake8-deprecated = 1.2
+flake8-isort = 2.2.1
+flake8-pep3101 = 1.1
+flake8-plone-hasattr = 0.2.post0
+flake8-print = 2.0.2
+flake8-quotes = 0.11.0
+flake8-string-format = 0.2.3
+flake8-todo = 0.7
+mccabe = 0.6.1
+plone.recipe.codeanalysis = 2.2
+pycodestyle = 2.3.1
+pyflakes = 1.5.0
+zc.buildout = 2.11.2
+zc.recipe.egg = 2.0.5
+
+# Required by:
+# plone.recipe.codeanalysis==2.2
+check-manifest = 0.34
+
+# Required by:
+# flake8==3.2.1
+configparser = 3.5.0
+
+# Required by:
+# flake8==3.2.1
+enum34 = 1.1.6
+
+# Required by:
+# flake8-isort==2.1.3
+flake8-polyfill = 1.0.1
+
+# Required by:
+# flake8-isort==2.1.3
+testfixtures = 4.13.1
+
+# Required by:
+# flake8-isort==2.2.1
+isort = 4.2.15
diff --git a/setup.cfg b/setup.cfg
index d80c4661..199a05bb 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -4,3 +4,8 @@ create-wheel = yes
 # When Python 2-3 compatible:
 # [bdist_wheel]
 # universal = 1
+
+[check-manifest]
+ignore =
+    *.cfg
+    bootstrap.py
diff --git a/setup.py b/setup.py
index c972debc..ce4130d4 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,6 @@
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '2.0.15.dev0'
 


