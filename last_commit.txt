Repository: plone.batching


Branch: refs/heads/master
Date: 2018-06-10T12:28:32+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.batching/commit/715ce344b1ad1fb85f557a958b74722cdff592d4

prevent dict size change during iteration in py3

Files changed:
M plone/batching/browser.py

b"diff --git a/plone/batching/browser.py b/plone/batching/browser.py\nindex b8abf55..333faf2 100644\n--- a/plone/batching/browser.py\n+++ b/plone/batching/browser.py\n@@ -42,7 +42,7 @@ def make_link(self, pagenumber=None, omit_params=['ajax_load']):\n         query_params = {}\n         query_params.update(self.request.form)\n         if self.batchformkeys:\n-            for key in query_params.keys():\n+            for key in list(query_params.keys()):\n                 if key not in self.batchformkeys:\n                     del query_params[key]\n         if omit_params:\n"

Repository: plone.batching


Branch: refs/heads/master
Date: 2018-06-14T00:33:34+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/fae1665f0fb99f6dfa736022287b4392989634a4

Python 3 fixes.

Files changed:
M CHANGES.rst
M plone/batching/batch.py
M plone/batching/batching.rst
M plone/batching/tests.py
M plone/batching/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 736cdb9..7335394 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Python 3 fixes.\n+  [thet]\n \n \n 1.1.3 (2018-06-04)\ndiff --git a/plone/batching/batch.py b/plone/batching/batch.py\nindex ade77cf..d8a04d7 100644\n--- a/plone/batching/batch.py\n+++ b/plone/batching/batch.py\n@@ -78,7 +78,7 @@ def initialize(self, start, end, size):\n     @property\n     def navlist(self):\n         """ Pagenumber list for creating batch links """\n-        start = max(self.pagenumber - (self.pagerange / 2), 1)\n+        start = max(self.pagenumber - round(self.pagerange / 2), 1)\n         end = min(start + self.pagerange - 1, self.lastpage)\n         return range(start, end + 1)\n \n@@ -208,7 +208,8 @@ def nextpage(self):\n     def items_not_on_page(self):\n         """ Items of sequence outside of batch\n         """\n-        return self._sequence[:self.first] + self._sequence[self.end:]\n+        return list(self._sequence[:self.first])\\\n+            + list(self._sequence[self.end:])\n \n     @property\n     def next_item_count(self):\ndiff --git a/plone/batching/batching.rst b/plone/batching/batching.rst\nindex e76932b..dec733d 100644\n--- a/plone/batching/batching.rst\n+++ b/plone/batching/batching.rst\n@@ -136,7 +136,7 @@ This is normally used to display numbers at the bottom of the screen for quick a\n ::\n \n   >>> batch.pagenumber = 1\n-  >>> batch.navlist\n+  >>> list(batch.navlist)\n   [1, 2, 3, 4, 5]\n \n Keep in mind that the navlist centers around the current page when it can.\n@@ -144,7 +144,7 @@ Keep in mind that the navlist centers around the current page when it can.\n ::\n \n   >>> batch.pagenumber = 10\n-  >>> batch.navlist\n+  >>> list(batch.navlist)\n   [8, 9, 10, 11, 12]\n \n You can specify the navlist size to be any size you want.\n@@ -153,7 +153,7 @@ You can specify the navlist size to be any size you want.\n \n   >>> other_batch = Batch.fromPagenumber(items=range(333), pagesize=10, pagenumber=10,\n   ...                     navlistsize=12)\n-  >>> other_batch.navlist\n+  >>> list(other_batch.navlist)\n   [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n \n We have already seen the `lastpage` property.\n@@ -198,7 +198,7 @@ This should only be done in case the second page is not in the navigation list.\n ::\n \n   >>> batch.pagenumber = 4\n-  >>> batch.navlist\n+  >>> list(batch.navlist)\n   [2, 3, 4, 5, 6]\n   >>> batch.second_page_not_in_navlist\n   False\n@@ -220,19 +220,19 @@ To make displaying the links to next and previous pages even easier you can also\n ::\n \n   >>> batch.pagenumber = 1\n-  >>> batch.next_pages\n+  >>> list(batch.next_pages)\n   [2, 3, 4, 5]\n \n   >>> batch.pagenumber = batch.lastpage - 2\n-  >>> batch.next_pages\n+  >>> list(batch.next_pages)\n   [33, 34]\n \n \n   >>> batch.pagenumber = batch.lastpage\n-  >>> batch.previous_pages\n+  >>> list(batch.previous_pages)\n   [32, 33]\n \n   >>> batch.pagenumber = batch.firstpage + 1\n-  >>> batch.previous_pages\n+  >>> list(batch.previous_pages)\n   [1]\n \ndiff --git a/plone/batching/tests.py b/plone/batching/tests.py\nindex ac0a4d7..9de14ef 100644\n--- a/plone/batching/tests.py\n+++ b/plone/batching/tests.py\n@@ -59,10 +59,10 @@ def test_calculate_quantum_leap_gap(self):\n         self.assertEqual(calculate_quantum_leap_gap(20, 2), 5)\n \n     def test_calculate_leapback(self):\n-        self.assertEqual(calculate_leapback(73, 100, 2), [28, 43, 58])\n+        self.assertEqual(list(calculate_leapback(73, 100, 2)), [28, 43, 58])\n \n     def test_calculate_leapforward(self):\n-        self.assertEqual(calculate_leapforward(3, 100, 2), [18, 33, 48])\n+        self.assertEqual(list(calculate_leapforward(3, 100, 2)), [18, 33, 48])\n \n \n class TestBatch(unittest.TestCase):\n@@ -169,11 +169,11 @@ def test_pagenumber_never_over_numpages(self):\n         """computed _pagenumber is never > numpages, this\n            makes previous_pages not fail."""\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9)\n-        self.assertEquals(batch.previous_pages, [1, 2, 3])\n+        self.assertEquals(list(batch.previous_pages), [1, 2, 3])\n         self.assertEquals(batch._pagenumber, 4)\n         # works especially with orphan\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9, orphan=2)\n-        self.assertEquals(batch.previous_pages, [1, 2])\n+        self.assertEquals(list(batch.previous_pages), [1, 2])\n         self.assertEquals(batch._pagenumber, 3)\n \n \n@@ -181,8 +181,8 @@ class TestQuantumBatch(unittest.TestCase):\n \n     def test_quantumbatch(self):\n         qbatch = QuantumBatch(range(200), 3, start=120, quantumleap=1)\n-        self.assertEqual(qbatch.leapback, [18, 28])\n-        self.assertEqual(qbatch.leapforward, [54])\n+        self.assertEqual(list(qbatch.leapback), [18, 28])\n+        self.assertEqual(list(qbatch.leapforward), [54])\n \n \n class DummyTemplate(object):\n@@ -241,8 +241,7 @@ def test_suite():\n         unittest.makeSuite(TestQuantumBatch),\n         doctest.DocFileSuite(\'batching.rst\',\n                              package=\'plone.batching\',\n-                             optionflags=doctest.ELLIPSIS |\n-                             doctest.REPORT_ONLY_FIRST_FAILURE,\n+                             optionflags=doctest.ELLIPSIS,\n                              setUp=setUp, tearDown=tearDown),\n     ])\n     return suite\ndiff --git a/plone/batching/utils.py b/plone/batching/utils.py\nindex 4d6546b..74f3178 100644\n--- a/plone/batching/utils.py\n+++ b/plone/batching/utils.py\n@@ -43,15 +43,15 @@ def calculate_pagerange(pagenumber, numpages, pagerange):\n     # Pagerange is the number of pages linked to in the navigation, odd number\n     pagerange = max(0, pagerange + pagerange % 2 - 1)\n     # Making sure the list will not start with negative values\n-    pagerangestart = max(1, pagenumber - (pagerange - 1) / 2)\n+    pagerangestart = max(1, round(pagenumber - (pagerange - 1) / 2))\n     # Making sure the list does not expand beyond the last page\n-    pagerangeend = min(pagenumber + (pagerange - 1) / 2, numpages) + 1\n+    pagerangeend = min(round(pagenumber + (pagerange - 1) / 2), numpages) + 1\n     return pagerange, pagerangestart, pagerangeend\n \n \n def calculate_quantum_leap_gap(numpages, pagerange):\n     """ Find the QuantumLeap gap. Current width of list is 6 clicks (30/5) """\n-    return int(max(1, round(float(numpages - pagerange) / 30)) * 5)\n+    return round(max(1, round(float(numpages - pagerange) / 30.)) * 5)\n \n \n def calculate_leapback(pagenumber, numpages, pagerange):\n'

Repository: plone.batching


Branch: refs/heads/master
Date: 2018-06-14T13:58:23+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/2346dc6aa30e76e8bb717f0de9c258feba92972a

py2 fixes

Files changed:
M plone/batching/batch.py
M plone/batching/utils.py

b'diff --git a/plone/batching/batch.py b/plone/batching/batch.py\nindex d8a04d7..710642d 100644\n--- a/plone/batching/batch.py\n+++ b/plone/batching/batch.py\n@@ -78,8 +78,8 @@ def initialize(self, start, end, size):\n     @property\n     def navlist(self):\n         """ Pagenumber list for creating batch links """\n-        start = max(self.pagenumber - round(self.pagerange / 2), 1)\n-        end = min(start + self.pagerange - 1, self.lastpage)\n+        start = int(max(self.pagenumber - round(self.pagerange / 2), 1))\n+        end = int(min(start + self.pagerange - 1, self.lastpage))\n         return range(start, end + 1)\n \n     def getPagenumber(self):\ndiff --git a/plone/batching/utils.py b/plone/batching/utils.py\nindex 74f3178..4837645 100644\n--- a/plone/batching/utils.py\n+++ b/plone/batching/utils.py\n@@ -46,12 +46,12 @@ def calculate_pagerange(pagenumber, numpages, pagerange):\n     pagerangestart = max(1, round(pagenumber - (pagerange - 1) / 2))\n     # Making sure the list does not expand beyond the last page\n     pagerangeend = min(round(pagenumber + (pagerange - 1) / 2), numpages) + 1\n-    return pagerange, pagerangestart, pagerangeend\n+    return int(pagerange), int(pagerangestart), int(pagerangeend)\n \n \n def calculate_quantum_leap_gap(numpages, pagerange):\n     """ Find the QuantumLeap gap. Current width of list is 6 clicks (30/5) """\n-    return round(max(1, round(float(numpages - pagerange) / 30.)) * 5)\n+    return int(round(max(1, round(float(numpages - pagerange) / 30.)) * 5))\n \n \n def calculate_leapback(pagenumber, numpages, pagerange):\n'

Repository: plone.batching


Branch: refs/heads/master
Date: 2018-08-17T10:42:31+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.batching/commit/13a19387a835c354e9ff44c4f36c6abeac798c53

update troove classifier

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 4b29d38..c937dc8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -21,6 +21,7 @@\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n     ],\n     keywords=\'Plone\',\n     author=\'Plone Foundation\',\n'

Repository: plone.batching


Branch: refs/heads/master
Date: 2018-08-17T10:42:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.batching/commit/453a6496e7b566ba44a779234ae1452be40301f1

Merge pull request #20 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/batching/batch.py
M plone/batching/batching.rst
M plone/batching/browser.py
M plone/batching/tests.py
M plone/batching/utils.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 736cdb9..7335394 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Python 3 fixes.\n+  [thet]\n \n \n 1.1.3 (2018-06-04)\ndiff --git a/plone/batching/batch.py b/plone/batching/batch.py\nindex ade77cf..710642d 100644\n--- a/plone/batching/batch.py\n+++ b/plone/batching/batch.py\n@@ -78,8 +78,8 @@ def initialize(self, start, end, size):\n     @property\n     def navlist(self):\n         """ Pagenumber list for creating batch links """\n-        start = max(self.pagenumber - (self.pagerange / 2), 1)\n-        end = min(start + self.pagerange - 1, self.lastpage)\n+        start = int(max(self.pagenumber - round(self.pagerange / 2), 1))\n+        end = int(min(start + self.pagerange - 1, self.lastpage))\n         return range(start, end + 1)\n \n     def getPagenumber(self):\n@@ -208,7 +208,8 @@ def nextpage(self):\n     def items_not_on_page(self):\n         """ Items of sequence outside of batch\n         """\n-        return self._sequence[:self.first] + self._sequence[self.end:]\n+        return list(self._sequence[:self.first])\\\n+            + list(self._sequence[self.end:])\n \n     @property\n     def next_item_count(self):\ndiff --git a/plone/batching/batching.rst b/plone/batching/batching.rst\nindex e76932b..dec733d 100644\n--- a/plone/batching/batching.rst\n+++ b/plone/batching/batching.rst\n@@ -136,7 +136,7 @@ This is normally used to display numbers at the bottom of the screen for quick a\n ::\n \n   >>> batch.pagenumber = 1\n-  >>> batch.navlist\n+  >>> list(batch.navlist)\n   [1, 2, 3, 4, 5]\n \n Keep in mind that the navlist centers around the current page when it can.\n@@ -144,7 +144,7 @@ Keep in mind that the navlist centers around the current page when it can.\n ::\n \n   >>> batch.pagenumber = 10\n-  >>> batch.navlist\n+  >>> list(batch.navlist)\n   [8, 9, 10, 11, 12]\n \n You can specify the navlist size to be any size you want.\n@@ -153,7 +153,7 @@ You can specify the navlist size to be any size you want.\n \n   >>> other_batch = Batch.fromPagenumber(items=range(333), pagesize=10, pagenumber=10,\n   ...                     navlistsize=12)\n-  >>> other_batch.navlist\n+  >>> list(other_batch.navlist)\n   [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n \n We have already seen the `lastpage` property.\n@@ -198,7 +198,7 @@ This should only be done in case the second page is not in the navigation list.\n ::\n \n   >>> batch.pagenumber = 4\n-  >>> batch.navlist\n+  >>> list(batch.navlist)\n   [2, 3, 4, 5, 6]\n   >>> batch.second_page_not_in_navlist\n   False\n@@ -220,19 +220,19 @@ To make displaying the links to next and previous pages even easier you can also\n ::\n \n   >>> batch.pagenumber = 1\n-  >>> batch.next_pages\n+  >>> list(batch.next_pages)\n   [2, 3, 4, 5]\n \n   >>> batch.pagenumber = batch.lastpage - 2\n-  >>> batch.next_pages\n+  >>> list(batch.next_pages)\n   [33, 34]\n \n \n   >>> batch.pagenumber = batch.lastpage\n-  >>> batch.previous_pages\n+  >>> list(batch.previous_pages)\n   [32, 33]\n \n   >>> batch.pagenumber = batch.firstpage + 1\n-  >>> batch.previous_pages\n+  >>> list(batch.previous_pages)\n   [1]\n \ndiff --git a/plone/batching/browser.py b/plone/batching/browser.py\nindex b8abf55..333faf2 100644\n--- a/plone/batching/browser.py\n+++ b/plone/batching/browser.py\n@@ -42,7 +42,7 @@ def make_link(self, pagenumber=None, omit_params=[\'ajax_load\']):\n         query_params = {}\n         query_params.update(self.request.form)\n         if self.batchformkeys:\n-            for key in query_params.keys():\n+            for key in list(query_params.keys()):\n                 if key not in self.batchformkeys:\n                     del query_params[key]\n         if omit_params:\ndiff --git a/plone/batching/tests.py b/plone/batching/tests.py\nindex ac0a4d7..9de14ef 100644\n--- a/plone/batching/tests.py\n+++ b/plone/batching/tests.py\n@@ -59,10 +59,10 @@ def test_calculate_quantum_leap_gap(self):\n         self.assertEqual(calculate_quantum_leap_gap(20, 2), 5)\n \n     def test_calculate_leapback(self):\n-        self.assertEqual(calculate_leapback(73, 100, 2), [28, 43, 58])\n+        self.assertEqual(list(calculate_leapback(73, 100, 2)), [28, 43, 58])\n \n     def test_calculate_leapforward(self):\n-        self.assertEqual(calculate_leapforward(3, 100, 2), [18, 33, 48])\n+        self.assertEqual(list(calculate_leapforward(3, 100, 2)), [18, 33, 48])\n \n \n class TestBatch(unittest.TestCase):\n@@ -169,11 +169,11 @@ def test_pagenumber_never_over_numpages(self):\n         """computed _pagenumber is never > numpages, this\n            makes previous_pages not fail."""\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9)\n-        self.assertEquals(batch.previous_pages, [1, 2, 3])\n+        self.assertEquals(list(batch.previous_pages), [1, 2, 3])\n         self.assertEquals(batch._pagenumber, 4)\n         # works especially with orphan\n         batch = BaseBatch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9, orphan=2)\n-        self.assertEquals(batch.previous_pages, [1, 2])\n+        self.assertEquals(list(batch.previous_pages), [1, 2])\n         self.assertEquals(batch._pagenumber, 3)\n \n \n@@ -181,8 +181,8 @@ class TestQuantumBatch(unittest.TestCase):\n \n     def test_quantumbatch(self):\n         qbatch = QuantumBatch(range(200), 3, start=120, quantumleap=1)\n-        self.assertEqual(qbatch.leapback, [18, 28])\n-        self.assertEqual(qbatch.leapforward, [54])\n+        self.assertEqual(list(qbatch.leapback), [18, 28])\n+        self.assertEqual(list(qbatch.leapforward), [54])\n \n \n class DummyTemplate(object):\n@@ -241,8 +241,7 @@ def test_suite():\n         unittest.makeSuite(TestQuantumBatch),\n         doctest.DocFileSuite(\'batching.rst\',\n                              package=\'plone.batching\',\n-                             optionflags=doctest.ELLIPSIS |\n-                             doctest.REPORT_ONLY_FIRST_FAILURE,\n+                             optionflags=doctest.ELLIPSIS,\n                              setUp=setUp, tearDown=tearDown),\n     ])\n     return suite\ndiff --git a/plone/batching/utils.py b/plone/batching/utils.py\nindex 4d6546b..4837645 100644\n--- a/plone/batching/utils.py\n+++ b/plone/batching/utils.py\n@@ -43,15 +43,15 @@ def calculate_pagerange(pagenumber, numpages, pagerange):\n     # Pagerange is the number of pages linked to in the navigation, odd number\n     pagerange = max(0, pagerange + pagerange % 2 - 1)\n     # Making sure the list will not start with negative values\n-    pagerangestart = max(1, pagenumber - (pagerange - 1) / 2)\n+    pagerangestart = max(1, round(pagenumber - (pagerange - 1) / 2))\n     # Making sure the list does not expand beyond the last page\n-    pagerangeend = min(pagenumber + (pagerange - 1) / 2, numpages) + 1\n-    return pagerange, pagerangestart, pagerangeend\n+    pagerangeend = min(round(pagenumber + (pagerange - 1) / 2), numpages) + 1\n+    return int(pagerange), int(pagerangestart), int(pagerangeend)\n \n \n def calculate_quantum_leap_gap(numpages, pagerange):\n     """ Find the QuantumLeap gap. Current width of list is 6 clicks (30/5) """\n-    return int(max(1, round(float(numpages - pagerange) / 30)) * 5)\n+    return int(round(max(1, round(float(numpages - pagerange) / 30.)) * 5))\n \n \n def calculate_leapback(pagenumber, numpages, pagerange):\ndiff --git a/setup.py b/setup.py\nindex 4b29d38..c937dc8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -21,6 +21,7 @@\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n     ],\n     keywords=\'Plone\',\n     author=\'Plone Foundation\',\n'

