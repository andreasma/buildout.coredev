Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2019-11-26T15:07:02+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/10bb87ff3b9491cb5331bb7e5aff481919ac8ce7

Fixed error when upgrading relations.

Fixes https://github.com/plone/plone.app.upgrade/issues/220

Files changed:
A news/220.bugfix
M plone/app/upgrade/v52/betas.py

b'diff --git a/news/220.bugfix b/news/220.bugfix\nnew file mode 100644\nindex 00000000..8d601464\n--- /dev/null\n+++ b/news/220.bugfix\n@@ -0,0 +1,2 @@\n+Fixed error when upgrading relations.\n+[maurits]\ndiff --git a/plone/app/upgrade/v52/betas.py b/plone/app/upgrade/v52/betas.py\nindex c2a56e75..24f5faa9 100644\n--- a/plone/app/upgrade/v52/betas.py\n+++ b/plone/app/upgrade/v52/betas.py\n@@ -6,6 +6,7 @@\n from zc.relation.interfaces import ICatalog\n from zope import component\n from zope.interface import Interface\n+from zope.intid.interfaces import IIntIds\n from zope.intid.interfaces import IntIdMissingError\n \n import logging\n@@ -62,18 +63,37 @@ def remove_interface_indexes_from_relations_catalog():\n         if index_to_remove in catalog._name_TO_mapping:\n             catalog.removeValueIndex(index_to_remove)\n \n-    # Avoid RuntimeError: the bucket being iterated changed size by first\n-    # getting all relations. This might need lots of RAM on large databases\n-    relations = [rel for rel in catalog]\n+    # Avoid "RuntimeError: the bucket being iterated changed size" by first\n+    # getting all tokens. This might need lots of RAM on large databases\n+    tokens = [token for token in catalog._relTokens]\n+    empty = 0\n+    for token in tokens:\n+        relation = catalog.resolveRelationToken(token)\n+        if relation.from_object is not None or relation.to_object is not None:\n+            continue\n+        catalog.unindex_doc(token)\n+        empty += 1\n+    if empty:\n+        logger.warning(\'Removed %s empty relations.\', empty)\n \n-    # get rid of broken relations, where inid no longer exists\n-    # those broken need to be removed for a later zodbupdate\n+    # Get rid of broken relations, where intid no longer exists.\n+    # Those broken need to be removed for a later zodbupdate.\n+    relations = [rel for rel in catalog]\n+    intids = component.getUtility(IIntIds)\n+    added_rel_intids = 0\n     for rel in relations:\n+        try:\n+            intids.getId(rel)\n+        except KeyError:\n+            intids.register(rel)\n+            added_rel_intids += 1\n         catalog.unindex(rel)\n         try:\n             catalog.index(rel)\n         except IntIdMissingError:\n-            logger.warn(\'Broken relation removed.\')\n+            logger.warning(\'Broken relation removed.\')\n+    if added_rel_intids:\n+        logger.info(\'Registered %s extra relations in the intid utility.\', added_rel_intids)\n \n \n class IResourceRegistriesSettings(Interface):\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2019-12-03T13:52:37+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.upgrade/commit/67b84b696f2c2f8f69f03f9831fa6532ec9de76c

Merge pull request #221 from plone/maurits/issue-220-relations-and-intids

Fixed error when upgrading relations.

Files changed:
A news/220.bugfix
M plone/app/upgrade/v52/betas.py

b'diff --git a/news/220.bugfix b/news/220.bugfix\nnew file mode 100644\nindex 00000000..8d601464\n--- /dev/null\n+++ b/news/220.bugfix\n@@ -0,0 +1,2 @@\n+Fixed error when upgrading relations.\n+[maurits]\ndiff --git a/plone/app/upgrade/v52/betas.py b/plone/app/upgrade/v52/betas.py\nindex c2a56e75..24f5faa9 100644\n--- a/plone/app/upgrade/v52/betas.py\n+++ b/plone/app/upgrade/v52/betas.py\n@@ -6,6 +6,7 @@\n from zc.relation.interfaces import ICatalog\n from zope import component\n from zope.interface import Interface\n+from zope.intid.interfaces import IIntIds\n from zope.intid.interfaces import IntIdMissingError\n \n import logging\n@@ -62,18 +63,37 @@ def remove_interface_indexes_from_relations_catalog():\n         if index_to_remove in catalog._name_TO_mapping:\n             catalog.removeValueIndex(index_to_remove)\n \n-    # Avoid RuntimeError: the bucket being iterated changed size by first\n-    # getting all relations. This might need lots of RAM on large databases\n-    relations = [rel for rel in catalog]\n+    # Avoid "RuntimeError: the bucket being iterated changed size" by first\n+    # getting all tokens. This might need lots of RAM on large databases\n+    tokens = [token for token in catalog._relTokens]\n+    empty = 0\n+    for token in tokens:\n+        relation = catalog.resolveRelationToken(token)\n+        if relation.from_object is not None or relation.to_object is not None:\n+            continue\n+        catalog.unindex_doc(token)\n+        empty += 1\n+    if empty:\n+        logger.warning(\'Removed %s empty relations.\', empty)\n \n-    # get rid of broken relations, where inid no longer exists\n-    # those broken need to be removed for a later zodbupdate\n+    # Get rid of broken relations, where intid no longer exists.\n+    # Those broken need to be removed for a later zodbupdate.\n+    relations = [rel for rel in catalog]\n+    intids = component.getUtility(IIntIds)\n+    added_rel_intids = 0\n     for rel in relations:\n+        try:\n+            intids.getId(rel)\n+        except KeyError:\n+            intids.register(rel)\n+            added_rel_intids += 1\n         catalog.unindex(rel)\n         try:\n             catalog.index(rel)\n         except IntIdMissingError:\n-            logger.warn(\'Broken relation removed.\')\n+            logger.warning(\'Broken relation removed.\')\n+    if added_rel_intids:\n+        logger.info(\'Registered %s extra relations in the intid utility.\', added_rel_intids)\n \n \n class IResourceRegistriesSettings(Interface):\n'

