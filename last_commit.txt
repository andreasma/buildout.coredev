Repository: Products.CMFPlone


Branch: refs/heads/5.1.x
Date: 2018-11-30T10:47:17-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/397918cd39ba0be4e2e150df5f5f2220e6ecc828

fix meta bundle ordering

Files changed:
A news/2641.bugfix
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/tests/test_metabundles.py

b'diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 696ed87bf..2a0d20a63 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -11,6 +11,7 @@\n from zope.component import getUtility\n from zope.component import queryUtility\n \n+from collections import OrderedDict\n import logging\n import re\n \n@@ -68,81 +69,101 @@ def get_resource(context, path):\n     return result\n \n \n-def write_js(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    # default resources\n-    if (\n-        meta_bundle == \'default\' and\n-        registry.records.get(\'plone.resources/jquery.js\')\n-    ):\n-        resources.append(\n-            get_resource(\n-                context,\n-                registry.records[\'plone.resources/jquery.js\'].value\n-            )\n-        )\n-        resources.append(\n-            get_resource(\n-                context,\n-                registry.records[\'plone.resources.requirejs\'].value\n-            )\n-        )\n-        resources.append(\n-            get_resource(\n-                context,\n-                registry.records[\'plone.resources.configjs\'].value\n-            )\n-        )\n-\n-    # bundles\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry,\n-        prefix=\'plone.bundles\',\n-        check=False\n-    )\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.jscompilation:\n-            resource = get_resource(context, bundle.jscompilation)\n+class MetaBundleWriter(object):\n+\n+    def __init__(self, context, folder, name):\n+        self.context = context\n+        self.folder = folder\n+        self.name = name\n+        self.js_resources = OrderedDict()\n+        self.css_resources = OrderedDict()\n+        self.registry = getUtility(IRegistry)\n+        self.bundles = self.registry.collectionOfInterface(\n+            IBundleRegistry, prefix=\'plone.bundles\', check=False)\n+\n+    def write_js(self):\n+\n+        # default resources\n+        if self.name == \'default\' and self.registry.records.get(\n+            \'plone.resources/jquery.js\'\n+        ):\n+            self.js_resources[\'_jquery\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources/jquery.js\'].value)\n+            self.js_resources[\'_requirejs\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources.requirejs\'].value)\n+            self.js_resources[\'_configjs\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources.configjs\'].value)\n+\n+        # bundles\n+        for name, bundle in self.bundles.items():\n+            self.load_js_bundle(name, bundle)\n+\n+        self._write_out(self.js_resources, \'.js\')\n+\n+    def load_js_bundle(self, name, bundle, depth=0):\n+        if depth > 10:\n+            # recursion detection\n+            return\n+        if bundle.merge_with != self.name:\n+            return\n+        if bundle.jscompilation:\n+            if bundle.depends and bundle.depends in self.bundles:\n+                self.load_js_bundle(\n+                    bundle.depends, self.bundles[bundle.depends], depth + 1)\n+            if name in self.js_resources:\n+                return\n+            resource = get_resource(self.context, bundle.jscompilation)\n             if not resource:\n-                continue\n-            resources.append(resource)\n-\n-    fi = StringIO()\n-    for script in resources:\n-        fi.write(script + \'\\n\')\n-    folder.writeFile(meta_bundle + \'.js\', fi)\n-\n-\n-def write_css(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry,\n-        prefix=\'plone.bundles\',\n-        check=False\n-    )\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.csscompilation:\n-            css = get_resource(context, bundle.csscompilation)\n+                return\n+            self.js_resources[name] = resource\n+\n+    def _write_out(self, resources, postfix):\n+        fi = StringIO()\n+        for bname, script in resources.items():\n+            fi.write(\'\'\'\n+// Start Bundle: {0}\n+{1}\n+// End Bundle: {2}\n+\'\'\'.format(bname, script, bname))\n+        self.folder.writeFile(self.name + postfix, fi)\n+        resources.clear()\n+\n+    def load_css_bundle(self, name, bundle, depth=0):\n+        if depth > 10:\n+            # recursion detection\n+            return\n+\n+        if bundle.merge_with != self.name:\n+            return\n+\n+        if bundle.csscompilation:\n+            if bundle.depends and bundle.depends in self.bundles:\n+                self.load_css_bundle(\n+                    bundle.depends, self.bundles[bundle.depends], depth + 1)\n+            if name in self.css_resources:\n+                return\n+\n+            css = get_resource(self.context, bundle.csscompilation)\n             if not css:\n-                continue\n+                return\n             (path, sep, filename) = bundle.csscompilation.rpartition(\'/\')\n             # Process relative urls:\n             # we prefix with current resource path any url not starting with\n             # \'/\' or http: or data:\n             css = re.sub(\n-                r"""(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))""",\n+                r\'\'\'(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))\'\'\',\n                 r\'\\1%s/\' % path,\n                 css)\n-            resources.append(css)\n+            self.css_resources[name] = css\n \n-    fi = StringIO()\n-    for script in resources:\n-        fi.write(script + \'\\n\')\n-    folder.writeFile(meta_bundle + \'.css\', fi)\n+    def write_css(self):\n+        for name, bundle in self.bundles.items():\n+            self.load_css_bundle(name, bundle)\n+\n+        self._write_out(self.css_resources, \'.css\')\n \n \n def get_override_directory(context):\n@@ -166,7 +187,11 @@ def combine_bundles(context):\n     production_folder.writeFile(\'timestamp.txt\', fi)\n \n     # generate new combined bundles\n-    write_js(context, production_folder, \'default\')\n-    write_js(context, production_folder, \'logged-in\')\n-    write_css(context, production_folder, \'default\')\n-    write_css(context, production_folder, \'logged-in\')\n+    default_writer = MetaBundleWriter(\n+        context, production_folder, \'default\')\n+    default_writer.write_js()\n+    logged_in_writer = MetaBundleWriter(\n+        context, production_folder, \'logged-in\')\n+    logged_in_writer.write_js()\n+    default_writer.write_css()\n+    logged_in_writer.write_css()\ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 038a4e2b9..a31283d5b 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -9,10 +9,20 @@\n from Products.CMFPlone.resources.browser.combine import (\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n+    MetaBundleWriter\n )\n from Products.GenericSetup.tests import common\n \n \n+class FakeBundleRegistryRecord(object):\n+    def __init__(self, merge_with=None, jscompilation=None,\n+                 depends=None, csscompilation=None):\n+        self.merge_with = merge_with\n+        self.jscompilation = jscompilation\n+        self.depends = depends\n+        self.csscompilation = csscompilation\n+\n+\n class DummyImportContext(common.DummyImportContext):\n     # Copied from plone.app.registry tests.\n     # This expands the context with directories.\n@@ -138,3 +148,45 @@ def get_timestamp():\n         combine(context)\n         ts12 = get_timestamp()\n         self.assertEqual(ts11, ts12)\n+\n+    def test_ordering_with_depends(self):\n+        writer = MetaBundleWriter(\n+            self.portal, self.production_folder, \'logged-in\')\n+        # add in some fake bundles so we can test correct\n+        # ordering\n+        writer.bundles[\'foobar-1\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'plone-logged-in\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.bundles[\'foobar-2\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-1\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.write_js()\n+        data = self.production_folder.readFile(\'logged-in.js\')\n+        self.assertTrue(\n+            data.index(\'Start Bundle: plone\') < data.index(\'Start Bundle: foobar-1\')  # noqa\n+        )\n+        self.assertTrue(\n+            data.index(\'Start Bundle: foobar-1\') < data.index(\'Start Bundle: foobar-2\')  # noqa\n+        )\n+\n+    def test_prevent_circular_depends_error(self):\n+        writer = MetaBundleWriter(\n+            self.portal, self.production_folder, \'logged-in\')\n+        # add in some fake bundles so we can test correct\n+        # ordering\n+        writer.bundles[\'foobar-1\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-2\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.bundles[\'foobar-2\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-1\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.write_js()\n+        writer.write_css()\ndiff --git a/news/2641.bugfix b/news/2641.bugfix\nnew file mode 100644\nindex 000000000..0e9d1afce\n--- /dev/null\n+++ b/news/2641.bugfix\n@@ -0,0 +1,2 @@\n+Fix metabundle resource ordering to pay attention to depends setting\n+[vangheem] \n'

Repository: Products.CMFPlone


Branch: refs/heads/5.1.x
Date: 2018-12-01T01:45:20+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/bef6d0a2cbdef54db9a7313e1ca86ed6c7923ffc

Merge pull request #2641 from plone/meta-bundle-ordering-5.1

Meta bundle ordering [5.1]

Files changed:
A news/2641.bugfix
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/tests/test_metabundles.py

b'diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 696ed87bf..2a0d20a63 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -11,6 +11,7 @@\n from zope.component import getUtility\n from zope.component import queryUtility\n \n+from collections import OrderedDict\n import logging\n import re\n \n@@ -68,81 +69,101 @@ def get_resource(context, path):\n     return result\n \n \n-def write_js(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    # default resources\n-    if (\n-        meta_bundle == \'default\' and\n-        registry.records.get(\'plone.resources/jquery.js\')\n-    ):\n-        resources.append(\n-            get_resource(\n-                context,\n-                registry.records[\'plone.resources/jquery.js\'].value\n-            )\n-        )\n-        resources.append(\n-            get_resource(\n-                context,\n-                registry.records[\'plone.resources.requirejs\'].value\n-            )\n-        )\n-        resources.append(\n-            get_resource(\n-                context,\n-                registry.records[\'plone.resources.configjs\'].value\n-            )\n-        )\n-\n-    # bundles\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry,\n-        prefix=\'plone.bundles\',\n-        check=False\n-    )\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.jscompilation:\n-            resource = get_resource(context, bundle.jscompilation)\n+class MetaBundleWriter(object):\n+\n+    def __init__(self, context, folder, name):\n+        self.context = context\n+        self.folder = folder\n+        self.name = name\n+        self.js_resources = OrderedDict()\n+        self.css_resources = OrderedDict()\n+        self.registry = getUtility(IRegistry)\n+        self.bundles = self.registry.collectionOfInterface(\n+            IBundleRegistry, prefix=\'plone.bundles\', check=False)\n+\n+    def write_js(self):\n+\n+        # default resources\n+        if self.name == \'default\' and self.registry.records.get(\n+            \'plone.resources/jquery.js\'\n+        ):\n+            self.js_resources[\'_jquery\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources/jquery.js\'].value)\n+            self.js_resources[\'_requirejs\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources.requirejs\'].value)\n+            self.js_resources[\'_configjs\'] = get_resource(\n+                self.context,\n+                self.registry.records[\'plone.resources.configjs\'].value)\n+\n+        # bundles\n+        for name, bundle in self.bundles.items():\n+            self.load_js_bundle(name, bundle)\n+\n+        self._write_out(self.js_resources, \'.js\')\n+\n+    def load_js_bundle(self, name, bundle, depth=0):\n+        if depth > 10:\n+            # recursion detection\n+            return\n+        if bundle.merge_with != self.name:\n+            return\n+        if bundle.jscompilation:\n+            if bundle.depends and bundle.depends in self.bundles:\n+                self.load_js_bundle(\n+                    bundle.depends, self.bundles[bundle.depends], depth + 1)\n+            if name in self.js_resources:\n+                return\n+            resource = get_resource(self.context, bundle.jscompilation)\n             if not resource:\n-                continue\n-            resources.append(resource)\n-\n-    fi = StringIO()\n-    for script in resources:\n-        fi.write(script + \'\\n\')\n-    folder.writeFile(meta_bundle + \'.js\', fi)\n-\n-\n-def write_css(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry,\n-        prefix=\'plone.bundles\',\n-        check=False\n-    )\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.csscompilation:\n-            css = get_resource(context, bundle.csscompilation)\n+                return\n+            self.js_resources[name] = resource\n+\n+    def _write_out(self, resources, postfix):\n+        fi = StringIO()\n+        for bname, script in resources.items():\n+            fi.write(\'\'\'\n+// Start Bundle: {0}\n+{1}\n+// End Bundle: {2}\n+\'\'\'.format(bname, script, bname))\n+        self.folder.writeFile(self.name + postfix, fi)\n+        resources.clear()\n+\n+    def load_css_bundle(self, name, bundle, depth=0):\n+        if depth > 10:\n+            # recursion detection\n+            return\n+\n+        if bundle.merge_with != self.name:\n+            return\n+\n+        if bundle.csscompilation:\n+            if bundle.depends and bundle.depends in self.bundles:\n+                self.load_css_bundle(\n+                    bundle.depends, self.bundles[bundle.depends], depth + 1)\n+            if name in self.css_resources:\n+                return\n+\n+            css = get_resource(self.context, bundle.csscompilation)\n             if not css:\n-                continue\n+                return\n             (path, sep, filename) = bundle.csscompilation.rpartition(\'/\')\n             # Process relative urls:\n             # we prefix with current resource path any url not starting with\n             # \'/\' or http: or data:\n             css = re.sub(\n-                r"""(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))""",\n+                r\'\'\'(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))\'\'\',\n                 r\'\\1%s/\' % path,\n                 css)\n-            resources.append(css)\n+            self.css_resources[name] = css\n \n-    fi = StringIO()\n-    for script in resources:\n-        fi.write(script + \'\\n\')\n-    folder.writeFile(meta_bundle + \'.css\', fi)\n+    def write_css(self):\n+        for name, bundle in self.bundles.items():\n+            self.load_css_bundle(name, bundle)\n+\n+        self._write_out(self.css_resources, \'.css\')\n \n \n def get_override_directory(context):\n@@ -166,7 +187,11 @@ def combine_bundles(context):\n     production_folder.writeFile(\'timestamp.txt\', fi)\n \n     # generate new combined bundles\n-    write_js(context, production_folder, \'default\')\n-    write_js(context, production_folder, \'logged-in\')\n-    write_css(context, production_folder, \'default\')\n-    write_css(context, production_folder, \'logged-in\')\n+    default_writer = MetaBundleWriter(\n+        context, production_folder, \'default\')\n+    default_writer.write_js()\n+    logged_in_writer = MetaBundleWriter(\n+        context, production_folder, \'logged-in\')\n+    logged_in_writer.write_js()\n+    default_writer.write_css()\n+    logged_in_writer.write_css()\ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 038a4e2b9..a31283d5b 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -9,10 +9,20 @@\n from Products.CMFPlone.resources.browser.combine import (\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n+    MetaBundleWriter\n )\n from Products.GenericSetup.tests import common\n \n \n+class FakeBundleRegistryRecord(object):\n+    def __init__(self, merge_with=None, jscompilation=None,\n+                 depends=None, csscompilation=None):\n+        self.merge_with = merge_with\n+        self.jscompilation = jscompilation\n+        self.depends = depends\n+        self.csscompilation = csscompilation\n+\n+\n class DummyImportContext(common.DummyImportContext):\n     # Copied from plone.app.registry tests.\n     # This expands the context with directories.\n@@ -138,3 +148,45 @@ def get_timestamp():\n         combine(context)\n         ts12 = get_timestamp()\n         self.assertEqual(ts11, ts12)\n+\n+    def test_ordering_with_depends(self):\n+        writer = MetaBundleWriter(\n+            self.portal, self.production_folder, \'logged-in\')\n+        # add in some fake bundles so we can test correct\n+        # ordering\n+        writer.bundles[\'foobar-1\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'plone-logged-in\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.bundles[\'foobar-2\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-1\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.write_js()\n+        data = self.production_folder.readFile(\'logged-in.js\')\n+        self.assertTrue(\n+            data.index(\'Start Bundle: plone\') < data.index(\'Start Bundle: foobar-1\')  # noqa\n+        )\n+        self.assertTrue(\n+            data.index(\'Start Bundle: foobar-1\') < data.index(\'Start Bundle: foobar-2\')  # noqa\n+        )\n+\n+    def test_prevent_circular_depends_error(self):\n+        writer = MetaBundleWriter(\n+            self.portal, self.production_folder, \'logged-in\')\n+        # add in some fake bundles so we can test correct\n+        # ordering\n+        writer.bundles[\'foobar-1\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-2\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.bundles[\'foobar-2\'] = FakeBundleRegistryRecord(\n+            merge_with=\'logged-in\', depends=\'foobar-1\',\n+            jscompilation=writer.bundles[\'plone\'].jscompilation,\n+            csscompilation=writer.bundles[\'plone\'].csscompilation\n+        )\n+        writer.write_js()\n+        writer.write_css()\ndiff --git a/news/2641.bugfix b/news/2641.bugfix\nnew file mode 100644\nindex 000000000..0e9d1afce\n--- /dev/null\n+++ b/news/2641.bugfix\n@@ -0,0 +1,2 @@\n+Fix metabundle resource ordering to pay attention to depends setting\n+[vangheem] \n'

