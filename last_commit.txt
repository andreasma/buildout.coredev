Repository: Products.CMFPlone


Branch: refs/heads/5.1.x
Date: 2018-08-29T19:58:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/8683c0d377b449b7c52d76cce262f8f4a7c0aae2

Fixed the combine-bundles import step to work with keyword in registry directory.

Issue https://github.com/plone/Products.CMFPlone/issues/2502

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/exportimport/bundles.py
M Products/CMFPlone/tests/test_metabundles.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ff85510b2..231b2da37 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -19,6 +19,10 @@ New features:\n \n Bug fixes:\n \n+- Let the ``combine-bundles`` import step also work when the ``IBundleRegistry`` keyword is not in ``registry.xml``, but in a ``registry`` directory.\n+  `Issue 2520 <https://github.com/plone/Products.CMFPlone/issues/2502>`_.\n+  [maurits]\n+\n - Get rid of obsolete ``X-UA-Compatible`` header.\n   [hvelarde]\n \ndiff --git a/Products/CMFPlone/resources/exportimport/bundles.py b/Products/CMFPlone/resources/exportimport/bundles.py\nindex 54e50f79f..c5c78cd33 100644\n--- a/Products/CMFPlone/resources/exportimport/bundles.py\n+++ b/Products/CMFPlone/resources/exportimport/bundles.py\n@@ -14,22 +14,37 @@ def combine(context):\n         logger.info("Cannot find registry")\n         return\n \n-    body = context.readDataFile(\'registry.xml\')\n-    if body and "IBundleRegistry" in body:\n-        # Calling combine_bundles will have as side effect that the\n-        # Content-Type header of the response is set to application/javascript,\n-        # which we do not want.  So we reset it to the original at the end.\n-        site = context.getSite()\n-        request = getattr(site, \'REQUEST\', getRequest())\n-        if request is not None:\n-            # Easily happens in tests.\n-            orig_header = request.response.getHeader(\'Content-Type\')\n-        combine_bundles(site)\n-        if request is not None:\n-            new_header = request.response.getHeader(\'Content-Type\')\n-            if new_header != orig_header:\n-                if orig_header is None:\n-                    # Setting it to None would result in the string \'None\'.\n-                    # So pick a saner one.\n-                    orig_header = \'text/html\'\n-                request.response.setHeader(\'Content-Type\', orig_header)\n+    # Look for a keyword in registry.xml or the registry directory.\n+    filepaths = [\'registry.xml\']\n+    if context.isDirectory(\'registry\'):\n+        for filename in context.listDirectory(\'registry\'):\n+            filepaths.append(\'registry/\' + filename)\n+    found = False\n+    for filepath in filepaths:\n+        body = context.readDataFile(filepath)\n+        if body is not None and \'IBundleRegistry\' in body:\n+            found = True\n+            break\n+    if not found:\n+        return\n+\n+    # Calling combine_bundles will have as side effect that the\n+    # Content-Type header of the response is set to application/javascript,\n+    # which we do not want.  So we reset it to the original at the end.\n+    site = context.getSite()\n+    request = getattr(site, \'REQUEST\', getRequest())\n+    # In tests the request can easily be None.\n+    if request is not None:\n+        orig_header = request.response.getHeader(\'Content-Type\')\n+    combine_bundles(site)\n+    if request is None:\n+        # we are done\n+        return\n+    new_header = request.response.getHeader(\'Content-Type\')\n+    if new_header == orig_header:\n+        return\n+    if orig_header is None:\n+        # Setting it to None would result in the string \'None\'.\n+        # So pick a saner one.\n+        orig_header = \'text/html\'\n+    request.response.setHeader(\'Content-Type\', orig_header)\ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 3b29e6c63..038a4e2b9 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -10,6 +10,20 @@\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n )\n+from Products.GenericSetup.tests import common\n+\n+\n+class DummyImportContext(common.DummyImportContext):\n+    # Copied from plone.app.registry tests.\n+    # This expands the context with directories.\n+\n+    _directories = {}\n+\n+    def listDirectory(self, path):\n+        return self._directories.get(path, [])\n+\n+    def isDirectory(self, path):\n+        return path in self._directories\n \n \n class ProductsCMFPloneSetupTest(PloneTestCase):\n@@ -51,3 +65,76 @@ def test_overrides(self):\n             \'alert("Overrided legacy!");\',\n             self.production_folder.readFile(\'default.js\')\n         )\n+\n+    def test_import(self):\n+        # If IBundleRegistry is in registry.xml, the combine-bundles import step\n+        # will call combine_bundles.\n+        from Products.CMFPlone.resources.exportimport.bundles import combine\n+        # from Products.CMFPlone.resources.browser.combine import get_override_directory\n+        # from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n+\n+        # Prepare some registry xml files with or without the key IBundleRegistry.\n+        xml_with = \'<registry>with IBundleRegistry</registry>\'\n+        xml_without = \'<registry>without bundle registry</registry>\'\n+        xml_without2 = \'<registry>without bundle registry</registry>\'\n+        context = DummyImportContext(self.portal, purge=False)\n+\n+        def get_timestamp():\n+            # If combine_bundles is run, a timestamp is updated.\n+            return self.production_folder.readFile(\'timestamp.txt\')\n+\n+        ts1 = get_timestamp()\n+        self.assertTrue(ts1)\n+\n+        # call the import step on a file without bundles\n+        context._files = {\'registry.xml\': xml_without}\n+        combine(context)\n+        ts2 = get_timestamp()\n+        self.assertEqual(ts1, ts2)\n+\n+        # call the import step on a file with bundles\n+        context._files = {\'registry.xml\': xml_with}\n+        combine(context)\n+        ts3 = get_timestamp()\n+        self.assertLess(ts2, ts3)\n+\n+        # call the import step on a file without bundles\n+        context._files = {\'registry.xml\': xml_without2}\n+        combine(context)\n+        ts4 = get_timestamp()\n+        self.assertEqual(ts3, ts4)\n+\n+        # Since Plone 5.1 the registry xml can also be a directory.\n+        # Set one file with bundles.\n+        context._files = {\n+            \'registry.xml\': xml_without,\n+            \'registry/foo2.xml\': xml_with,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        context._directories = {\n+            \'registry\': [\n+                \'foo2.xml\',\n+                \'foo3.xml\',\n+            ]\n+        }\n+        combine(context)\n+        ts10 = get_timestamp()\n+        self.assertLess(ts4, ts10)\n+\n+        # The registry.xml file itself may be missing.\n+        context._files = {\n+            \'registry/foo2.xml\': xml_with,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        combine(context)\n+        ts11 = get_timestamp()\n+        self.assertLess(ts10, ts11)\n+\n+        # Now without any bundle info.\n+        context._files = {\n+            \'registry/foo2.xml\': xml_without,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        combine(context)\n+        ts12 = get_timestamp()\n+        self.assertEqual(ts11, ts12)\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.1.x
Date: 2018-09-06T10:08:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/9d900bbc9146195c90bcfc8982058f8f68a3b667

Merge pull request #2503 from plone/issue-2502-51-combine-bundles-registry-directory

Fixed combine-bundles step to work with keyword in registry directory.

Files changed:
M CHANGES.rst
M Products/CMFPlone/resources/exportimport/bundles.py
M Products/CMFPlone/tests/test_metabundles.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ff85510b2..231b2da37 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -19,6 +19,10 @@ New features:\n \n Bug fixes:\n \n+- Let the ``combine-bundles`` import step also work when the ``IBundleRegistry`` keyword is not in ``registry.xml``, but in a ``registry`` directory.\n+  `Issue 2520 <https://github.com/plone/Products.CMFPlone/issues/2502>`_.\n+  [maurits]\n+\n - Get rid of obsolete ``X-UA-Compatible`` header.\n   [hvelarde]\n \ndiff --git a/Products/CMFPlone/resources/exportimport/bundles.py b/Products/CMFPlone/resources/exportimport/bundles.py\nindex 54e50f79f..c5c78cd33 100644\n--- a/Products/CMFPlone/resources/exportimport/bundles.py\n+++ b/Products/CMFPlone/resources/exportimport/bundles.py\n@@ -14,22 +14,37 @@ def combine(context):\n         logger.info("Cannot find registry")\n         return\n \n-    body = context.readDataFile(\'registry.xml\')\n-    if body and "IBundleRegistry" in body:\n-        # Calling combine_bundles will have as side effect that the\n-        # Content-Type header of the response is set to application/javascript,\n-        # which we do not want.  So we reset it to the original at the end.\n-        site = context.getSite()\n-        request = getattr(site, \'REQUEST\', getRequest())\n-        if request is not None:\n-            # Easily happens in tests.\n-            orig_header = request.response.getHeader(\'Content-Type\')\n-        combine_bundles(site)\n-        if request is not None:\n-            new_header = request.response.getHeader(\'Content-Type\')\n-            if new_header != orig_header:\n-                if orig_header is None:\n-                    # Setting it to None would result in the string \'None\'.\n-                    # So pick a saner one.\n-                    orig_header = \'text/html\'\n-                request.response.setHeader(\'Content-Type\', orig_header)\n+    # Look for a keyword in registry.xml or the registry directory.\n+    filepaths = [\'registry.xml\']\n+    if context.isDirectory(\'registry\'):\n+        for filename in context.listDirectory(\'registry\'):\n+            filepaths.append(\'registry/\' + filename)\n+    found = False\n+    for filepath in filepaths:\n+        body = context.readDataFile(filepath)\n+        if body is not None and \'IBundleRegistry\' in body:\n+            found = True\n+            break\n+    if not found:\n+        return\n+\n+    # Calling combine_bundles will have as side effect that the\n+    # Content-Type header of the response is set to application/javascript,\n+    # which we do not want.  So we reset it to the original at the end.\n+    site = context.getSite()\n+    request = getattr(site, \'REQUEST\', getRequest())\n+    # In tests the request can easily be None.\n+    if request is not None:\n+        orig_header = request.response.getHeader(\'Content-Type\')\n+    combine_bundles(site)\n+    if request is None:\n+        # we are done\n+        return\n+    new_header = request.response.getHeader(\'Content-Type\')\n+    if new_header == orig_header:\n+        return\n+    if orig_header is None:\n+        # Setting it to None would result in the string \'None\'.\n+        # So pick a saner one.\n+        orig_header = \'text/html\'\n+    request.response.setHeader(\'Content-Type\', orig_header)\ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 3b29e6c63..038a4e2b9 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -10,6 +10,20 @@\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n )\n+from Products.GenericSetup.tests import common\n+\n+\n+class DummyImportContext(common.DummyImportContext):\n+    # Copied from plone.app.registry tests.\n+    # This expands the context with directories.\n+\n+    _directories = {}\n+\n+    def listDirectory(self, path):\n+        return self._directories.get(path, [])\n+\n+    def isDirectory(self, path):\n+        return path in self._directories\n \n \n class ProductsCMFPloneSetupTest(PloneTestCase):\n@@ -51,3 +65,76 @@ def test_overrides(self):\n             \'alert("Overrided legacy!");\',\n             self.production_folder.readFile(\'default.js\')\n         )\n+\n+    def test_import(self):\n+        # If IBundleRegistry is in registry.xml, the combine-bundles import step\n+        # will call combine_bundles.\n+        from Products.CMFPlone.resources.exportimport.bundles import combine\n+        # from Products.CMFPlone.resources.browser.combine import get_override_directory\n+        # from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n+\n+        # Prepare some registry xml files with or without the key IBundleRegistry.\n+        xml_with = \'<registry>with IBundleRegistry</registry>\'\n+        xml_without = \'<registry>without bundle registry</registry>\'\n+        xml_without2 = \'<registry>without bundle registry</registry>\'\n+        context = DummyImportContext(self.portal, purge=False)\n+\n+        def get_timestamp():\n+            # If combine_bundles is run, a timestamp is updated.\n+            return self.production_folder.readFile(\'timestamp.txt\')\n+\n+        ts1 = get_timestamp()\n+        self.assertTrue(ts1)\n+\n+        # call the import step on a file without bundles\n+        context._files = {\'registry.xml\': xml_without}\n+        combine(context)\n+        ts2 = get_timestamp()\n+        self.assertEqual(ts1, ts2)\n+\n+        # call the import step on a file with bundles\n+        context._files = {\'registry.xml\': xml_with}\n+        combine(context)\n+        ts3 = get_timestamp()\n+        self.assertLess(ts2, ts3)\n+\n+        # call the import step on a file without bundles\n+        context._files = {\'registry.xml\': xml_without2}\n+        combine(context)\n+        ts4 = get_timestamp()\n+        self.assertEqual(ts3, ts4)\n+\n+        # Since Plone 5.1 the registry xml can also be a directory.\n+        # Set one file with bundles.\n+        context._files = {\n+            \'registry.xml\': xml_without,\n+            \'registry/foo2.xml\': xml_with,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        context._directories = {\n+            \'registry\': [\n+                \'foo2.xml\',\n+                \'foo3.xml\',\n+            ]\n+        }\n+        combine(context)\n+        ts10 = get_timestamp()\n+        self.assertLess(ts4, ts10)\n+\n+        # The registry.xml file itself may be missing.\n+        context._files = {\n+            \'registry/foo2.xml\': xml_with,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        combine(context)\n+        ts11 = get_timestamp()\n+        self.assertLess(ts10, ts11)\n+\n+        # Now without any bundle info.\n+        context._files = {\n+            \'registry/foo2.xml\': xml_without,\n+            \'registry/foo3.xml\': xml_without2,\n+        }\n+        combine(context)\n+        ts12 = get_timestamp()\n+        self.assertEqual(ts11, ts12)\n'

