Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-12-14T12:18:28+01:00
Author: Kim Paulissen (spereverde) <kim.paulissen@kuleuven.be>
Commit: https://github.com/plone/plone.app.dexterity/commit/2bc01406e1d4f4fd23de8f43f501209b3f6a5abe

Update docu for creating dexterity behaviors

Adjusted imports etc. so they work for Plone 5.1.2
Note to reviewer: we might want to use a more recent package (not something on svn.plone.org) as an example for dexterity docu. If you could point me to a good example I'd be happy to adjust the docu to this.

Files changed:
M docs/behaviors/creating-and-registering-behaviors.rst

b'diff --git a/docs/behaviors/creating-and-registering-behaviors.rst b/docs/behaviors/creating-and-registering-behaviors.rst\nindex 9ceec91..1bce999 100644\n--- a/docs/behaviors/creating-and-registering-behaviors.rst\n+++ b/docs/behaviors/creating-and-registering-behaviors.rst\n@@ -38,6 +38,7 @@ It looks like this:\n             description="Use the Dublin Core Subject (keywords) field for Google Code like tags."\n             provides=".behaviors.ITags"\n             factory=".behaviors.Tags"\n+            marker=".behaviors.Tags"\n             />\n \n     </configure>\n@@ -51,7 +52,7 @@ In this case, the behavior name is *collective.gtags.behaviors.ITags*, the full\n When the behavior is enabled for a type, it will be possible to adapt instances of that type to *ITags*.\n That adaptation will invoke the factory specified by the *factory* attribute.\n \n-The *behaviors.py* module looks like this:\n+The *behaviors.py* module looks like this, it was slightly adjusted for documentation purposes:\n \n .. code-block:: python\n \n@@ -61,11 +62,11 @@ The *behaviors.py* module looks like this:\n     standard Subject field.\n     """\n \n-    from Products.CMFCore.interfaces import IDublinCore\n-    from collective.gtags import MessageFactory as _\n-    from collective.gtags.field import Tags\n-    from plone.autoform import directives\n+    from plone.dexterity.interfaces import DexterityContent\n+    # if your package was made with mr.bob, add your MessageFactory like this:\n+    from collective.mypackage import _\n     from plone.autoform.interfaces import IFormFieldProvider\n+    from plone.supermodel import directives\n     from plone.supermodel import model\n     from zope.component import adapter\n     from zope.interface import implementer\n@@ -92,7 +93,7 @@ The *behaviors.py* module looks like this:\n \n \n     @implementer(ITags)\n-    @adapter(IDublinCore)\n+    @adapter(IDexterityContent)\n     class Tags(object):\n         """Store tags in the Dublin Core metadata Subject field. This makes\n         tags easy to search for.\n@@ -101,6 +102,7 @@ The *behaviors.py* module looks like this:\n         def __init__(self, context):\n             self.context = context\n \n+        # the properties below are not necessary the first time when you just want to see your added field(s)\n         @property\n         def tags(self):\n             return set(self.context.Subject())\n@@ -115,14 +117,14 @@ Here, we define a single attribute, *tags*, but we could also have added methods\n Naturally, these need to be implemented by the behavior adapter.\n \n Since we want this behavior to provide form fields, we derive the behavior interface from *model.Schema* and set form hints using\n-*plone.autoform.directives*.\n+*plone.supermodel.directives*.\n We also mark the *ITags* interface with *IFormFieldProvider* to signal that it should be processed for form fields by the standard forms.\n See the `Dexterity Developer Manual`_ for more information about setting form hints in schema interfaces.\n \n If your behavior does not provide form fields, you can just derive from *zope.interface.Interface* and omit the *alsoProvides()* line.\n \n Next, we write the class that implements the behavior adapter and acts as the adapter factory.\n-Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDublinCore*).\n+Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDexterityContent*).\n The behavior cannot be enabled on types not supporting this interface.\n In many cases, you will omit the *adapter()* line, provided your behavior is generic enough to work on any context.\n \n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-12-14T12:30:08+01:00
Author: Kim Paulissen (spereverde) <kim.paulissen@kuleuven.be>
Commit: https://github.com/plone/plone.app.dexterity/commit/09c6a89215c43be562853f1e7e3d13e3d4963a04

Create doccreatebehavior.bugfix for towncrier

Files changed:
A news/doccreatebehavior.bugfix

b'diff --git a/news/doccreatebehavior.bugfix b/news/doccreatebehavior.bugfix\nnew file mode 100644\nindex 0000000..6a0f7be\n--- /dev/null\n+++ b/news/doccreatebehavior.bugfix\n@@ -0,0 +1 @@\n+Update docu for creating dexterity behaviors\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2018-12-22T15:22:01+01:00
Author: Kim Paulissen (spereverde) <kim.paulissen@kuleuven.be>
Commit: https://github.com/plone/plone.app.dexterity/commit/d2fb72c54844d2ce3ae9a18e5264e24a4c965ec3

Add suggested changes for pull request

Files changed:
M docs/behaviors/creating-and-registering-behaviors.rst

b'diff --git a/docs/behaviors/creating-and-registering-behaviors.rst b/docs/behaviors/creating-and-registering-behaviors.rst\nindex 1bce999..57575bc 100644\n--- a/docs/behaviors/creating-and-registering-behaviors.rst\n+++ b/docs/behaviors/creating-and-registering-behaviors.rst\n@@ -38,7 +38,7 @@ It looks like this:\n             description="Use the Dublin Core Subject (keywords) field for Google Code like tags."\n             provides=".behaviors.ITags"\n             factory=".behaviors.Tags"\n-            marker=".behaviors.Tags"\n+            marker=".behaviors.ITagsMarker"\n             />\n \n     </configure>\n@@ -52,7 +52,7 @@ In this case, the behavior name is *collective.gtags.behaviors.ITags*, the full\n When the behavior is enabled for a type, it will be possible to adapt instances of that type to *ITags*.\n That adaptation will invoke the factory specified by the *factory* attribute.\n \n-The *behaviors.py* module looks like this, it was slightly adjusted for documentation purposes:\n+The *behaviors.py* module looks like this:\n \n .. code-block:: python\n \n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2019-05-22T00:32:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/f0f8540c2852113d5189a7912daccbc05e39a417

Merge pull request #281 from spereverde/master

Update docu for creating dexterity behaviors

Files changed:
A news/doccreatebehavior.bugfix
M docs/behaviors/creating-and-registering-behaviors.rst

b'diff --git a/docs/behaviors/creating-and-registering-behaviors.rst b/docs/behaviors/creating-and-registering-behaviors.rst\nindex 9ceec91..57575bc 100644\n--- a/docs/behaviors/creating-and-registering-behaviors.rst\n+++ b/docs/behaviors/creating-and-registering-behaviors.rst\n@@ -38,6 +38,7 @@ It looks like this:\n             description="Use the Dublin Core Subject (keywords) field for Google Code like tags."\n             provides=".behaviors.ITags"\n             factory=".behaviors.Tags"\n+            marker=".behaviors.ITagsMarker"\n             />\n \n     </configure>\n@@ -61,11 +62,11 @@ The *behaviors.py* module looks like this:\n     standard Subject field.\n     """\n \n-    from Products.CMFCore.interfaces import IDublinCore\n-    from collective.gtags import MessageFactory as _\n-    from collective.gtags.field import Tags\n-    from plone.autoform import directives\n+    from plone.dexterity.interfaces import DexterityContent\n+    # if your package was made with mr.bob, add your MessageFactory like this:\n+    from collective.mypackage import _\n     from plone.autoform.interfaces import IFormFieldProvider\n+    from plone.supermodel import directives\n     from plone.supermodel import model\n     from zope.component import adapter\n     from zope.interface import implementer\n@@ -92,7 +93,7 @@ The *behaviors.py* module looks like this:\n \n \n     @implementer(ITags)\n-    @adapter(IDublinCore)\n+    @adapter(IDexterityContent)\n     class Tags(object):\n         """Store tags in the Dublin Core metadata Subject field. This makes\n         tags easy to search for.\n@@ -101,6 +102,7 @@ The *behaviors.py* module looks like this:\n         def __init__(self, context):\n             self.context = context\n \n+        # the properties below are not necessary the first time when you just want to see your added field(s)\n         @property\n         def tags(self):\n             return set(self.context.Subject())\n@@ -115,14 +117,14 @@ Here, we define a single attribute, *tags*, but we could also have added methods\n Naturally, these need to be implemented by the behavior adapter.\n \n Since we want this behavior to provide form fields, we derive the behavior interface from *model.Schema* and set form hints using\n-*plone.autoform.directives*.\n+*plone.supermodel.directives*.\n We also mark the *ITags* interface with *IFormFieldProvider* to signal that it should be processed for form fields by the standard forms.\n See the `Dexterity Developer Manual`_ for more information about setting form hints in schema interfaces.\n \n If your behavior does not provide form fields, you can just derive from *zope.interface.Interface* and omit the *alsoProvides()* line.\n \n Next, we write the class that implements the behavior adapter and acts as the adapter factory.\n-Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDublinCore*).\n+Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDexterityContent*).\n The behavior cannot be enabled on types not supporting this interface.\n In many cases, you will omit the *adapter()* line, provided your behavior is generic enough to work on any context.\n \ndiff --git a/news/doccreatebehavior.bugfix b/news/doccreatebehavior.bugfix\nnew file mode 100644\nindex 0000000..6a0f7be\n--- /dev/null\n+++ b/news/doccreatebehavior.bugfix\n@@ -0,0 +1 @@\n+Update docu for creating dexterity behaviors\n'

