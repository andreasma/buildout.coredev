Repository: plone.app.referenceablebehavior


Branch: refs/heads/master
Date: 2019-04-09T10:38:17+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.referenceablebehavior/commit/9e13ce5c18ac38d7260bac3b3e977b48c48b02b5

Revert "Fix references missing from the reference catalog on move/rename"

This reverts commit a45f487e0f94effb3992c18c9f416d5cb2cf7234.

Files changed:
M CHANGES.rst
M plone/app/referenceablebehavior/tests/test_basics.py
M plone/app/referenceablebehavior/uidcatalog.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4856fce..ffa01c0 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,9 +14,7 @@ New features:\n \n Bug fixes:\n \n-- Fix references missing from the reference catalog when an object is\n-  moved/renamed.\n-  [rpatterson]\n+- *add item here*\n \n \n 0.7.7 (2017-02-05)\ndiff --git a/plone/app/referenceablebehavior/tests/test_basics.py b/plone/app/referenceablebehavior/tests/test_basics.py\nindex 9cf83ba..ccf1263 100644\n--- a/plone/app/referenceablebehavior/tests/test_basics.py\n+++ b/plone/app/referenceablebehavior/tests/test_basics.py\n@@ -25,44 +25,35 @@ def test_rename_does_not_change_uuid(self):\n         self.portal.manage_renameObject(id=\'doc1\', new_id=\'new_name\')\n         self.assertEquals(old_doc_uuid, IUUID(self.portal[\'new_name\']))\n \n+    @unittest.skip(\'Needs Refactor. Linkintegrity does not use ref_catalog\')\n     def test_rename_updates_ref_catalog(self):\n         doc1 = self.portal[\'doc1\']\n         doc2 = self.portal[\'doc2\']\n-\n-        doc1_refs = IReferenceable(doc1)\n-        doc2_refs = IReferenceable(doc2)\n-        doc1_refs.addReference(doc2_refs, relationship=\'fooRelationship\')\n-\n         ref_catalog = self.portal.reference_catalog\n+        doc1.text = RichTextValue(\'<a href="doc2">doc2</a>\')\n+        modified(doc1)\n         self.assertEquals(1, len(ref_catalog()))\n-        self.assertEquals([doc2], doc1_refs.getReferences())\n+\n+        self.assertEquals([doc2], IReferenceable(doc1).getReferences())\n         ref_brain = ref_catalog()[0]\n         self.assertTrue(ref_brain.getPath().startswith(\'doc1\'))\n-\n         self.portal.manage_renameObject(id=\'doc1\', new_id=\'new_name\')\n-        doc1 = self.portal[\'new_name\']\n-        doc1_refs = IReferenceable(doc1)\n-\n+        modified(doc1)\n         self.assertEquals(1, len(ref_catalog()))\n         ref_brain = ref_catalog()[0]\n         self.assertTrue(ref_brain.getPath().startswith(\'new_name\'))\n-        self.assertEquals([doc2], doc1_refs.getReferences())\n+        self.assertEquals([doc2], IReferenceable(doc1).getReferences())\n \n+    @unittest.skip(\'Needs Refactor. Linkintegrity does not use ref_catalog\')\n     def test_remove_cleans_ref_catalog(self):\n         doc1 = self.portal[\'doc1\']\n-        doc2 = self.portal[\'doc2\']\n-\n-        doc1_refs = IReferenceable(doc1)\n-        doc2_refs = IReferenceable(doc2)\n-        doc1_refs.addReference(doc2_refs, relationship=\'fooRelationship\')\n-\n+        doc1.text = RichTextValue(\'<a href="doc1">doc1</a>\')\n+        modified(doc1)\n         ref_catalog = self.portal.reference_catalog\n         self.assertEquals(1, len(ref_catalog()))\n-        self.assertEquals([doc1], doc2_refs.getBackReferences())\n \n         self.portal.manage_delObjects([\'doc1\'])\n         self.assertEquals(0, len(ref_catalog()))\n-        self.assertEquals([], doc2_refs.getBackReferences())\n \n     def test_referenceable_api(self):\n         doc1 = self.portal[\'doc1\']\ndiff --git a/plone/app/referenceablebehavior/uidcatalog.py b/plone/app/referenceablebehavior/uidcatalog.py\nindex 2daabe9..2580fac 100644\n--- a/plone/app/referenceablebehavior/uidcatalog.py\n+++ b/plone/app/referenceablebehavior/uidcatalog.py\n@@ -77,17 +77,15 @@ def moved_handler(obj, event):\n         return\n \n     for ref in annotations.objectValues():\n-        new_url = getRelURL(ref_catalog, ref.getPhysicalPath())\n+        url = getRelURL(ref_catalog, ref.getPhysicalPath())\n         if event.oldName and event.newName:\n-            old_url = event.oldName + new_url[len(event.newName):]\n-        uid_catalog_rid = uid_catalog.getrid(old_url)\n-        ref_catalog_rid = ref_catalog.getrid(old_url)\n+            url = event.oldName + url[len(event.newName):]\n+        uid_catalog_rid = uid_catalog.getrid(url)\n+        ref_catalog_rid = ref_catalog.getrid(url)\n         if uid_catalog_rid is not None:\n-            uid_catalog.uncatalog_object(old_url)\n-            uid_catalog.catalog_object(ref, new_url)\n+            uid_catalog.uncatalog_object(url)\n         if ref_catalog_rid is not None:\n-            ref_catalog.uncatalog_object(old_url)\n-            ref_catalog.catalog_object(ref, new_url)\n+            ref_catalog.uncatalog_object(url)\n \n \n def removed_handler(obj, event):\n'

Repository: plone.app.referenceablebehavior


Branch: refs/heads/master
Date: 2019-04-09T10:40:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.referenceablebehavior/commit/53bbe2b5170ed7f018b6e2d60bb47d89fa050b29

Merge pull request #12 from plone/revert-breaking-commit-by-rpatterson

Revert "Fix references missing from the reference catalog on move/renâ€¦

Files changed:
M CHANGES.rst
M plone/app/referenceablebehavior/tests/test_basics.py
M plone/app/referenceablebehavior/uidcatalog.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4856fce..ffa01c0 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,9 +14,7 @@ New features:\n \n Bug fixes:\n \n-- Fix references missing from the reference catalog when an object is\n-  moved/renamed.\n-  [rpatterson]\n+- *add item here*\n \n \n 0.7.7 (2017-02-05)\ndiff --git a/plone/app/referenceablebehavior/tests/test_basics.py b/plone/app/referenceablebehavior/tests/test_basics.py\nindex 9cf83ba..ccf1263 100644\n--- a/plone/app/referenceablebehavior/tests/test_basics.py\n+++ b/plone/app/referenceablebehavior/tests/test_basics.py\n@@ -25,44 +25,35 @@ def test_rename_does_not_change_uuid(self):\n         self.portal.manage_renameObject(id=\'doc1\', new_id=\'new_name\')\n         self.assertEquals(old_doc_uuid, IUUID(self.portal[\'new_name\']))\n \n+    @unittest.skip(\'Needs Refactor. Linkintegrity does not use ref_catalog\')\n     def test_rename_updates_ref_catalog(self):\n         doc1 = self.portal[\'doc1\']\n         doc2 = self.portal[\'doc2\']\n-\n-        doc1_refs = IReferenceable(doc1)\n-        doc2_refs = IReferenceable(doc2)\n-        doc1_refs.addReference(doc2_refs, relationship=\'fooRelationship\')\n-\n         ref_catalog = self.portal.reference_catalog\n+        doc1.text = RichTextValue(\'<a href="doc2">doc2</a>\')\n+        modified(doc1)\n         self.assertEquals(1, len(ref_catalog()))\n-        self.assertEquals([doc2], doc1_refs.getReferences())\n+\n+        self.assertEquals([doc2], IReferenceable(doc1).getReferences())\n         ref_brain = ref_catalog()[0]\n         self.assertTrue(ref_brain.getPath().startswith(\'doc1\'))\n-\n         self.portal.manage_renameObject(id=\'doc1\', new_id=\'new_name\')\n-        doc1 = self.portal[\'new_name\']\n-        doc1_refs = IReferenceable(doc1)\n-\n+        modified(doc1)\n         self.assertEquals(1, len(ref_catalog()))\n         ref_brain = ref_catalog()[0]\n         self.assertTrue(ref_brain.getPath().startswith(\'new_name\'))\n-        self.assertEquals([doc2], doc1_refs.getReferences())\n+        self.assertEquals([doc2], IReferenceable(doc1).getReferences())\n \n+    @unittest.skip(\'Needs Refactor. Linkintegrity does not use ref_catalog\')\n     def test_remove_cleans_ref_catalog(self):\n         doc1 = self.portal[\'doc1\']\n-        doc2 = self.portal[\'doc2\']\n-\n-        doc1_refs = IReferenceable(doc1)\n-        doc2_refs = IReferenceable(doc2)\n-        doc1_refs.addReference(doc2_refs, relationship=\'fooRelationship\')\n-\n+        doc1.text = RichTextValue(\'<a href="doc1">doc1</a>\')\n+        modified(doc1)\n         ref_catalog = self.portal.reference_catalog\n         self.assertEquals(1, len(ref_catalog()))\n-        self.assertEquals([doc1], doc2_refs.getBackReferences())\n \n         self.portal.manage_delObjects([\'doc1\'])\n         self.assertEquals(0, len(ref_catalog()))\n-        self.assertEquals([], doc2_refs.getBackReferences())\n \n     def test_referenceable_api(self):\n         doc1 = self.portal[\'doc1\']\ndiff --git a/plone/app/referenceablebehavior/uidcatalog.py b/plone/app/referenceablebehavior/uidcatalog.py\nindex 2daabe9..2580fac 100644\n--- a/plone/app/referenceablebehavior/uidcatalog.py\n+++ b/plone/app/referenceablebehavior/uidcatalog.py\n@@ -77,17 +77,15 @@ def moved_handler(obj, event):\n         return\n \n     for ref in annotations.objectValues():\n-        new_url = getRelURL(ref_catalog, ref.getPhysicalPath())\n+        url = getRelURL(ref_catalog, ref.getPhysicalPath())\n         if event.oldName and event.newName:\n-            old_url = event.oldName + new_url[len(event.newName):]\n-        uid_catalog_rid = uid_catalog.getrid(old_url)\n-        ref_catalog_rid = ref_catalog.getrid(old_url)\n+            url = event.oldName + url[len(event.newName):]\n+        uid_catalog_rid = uid_catalog.getrid(url)\n+        ref_catalog_rid = ref_catalog.getrid(url)\n         if uid_catalog_rid is not None:\n-            uid_catalog.uncatalog_object(old_url)\n-            uid_catalog.catalog_object(ref, new_url)\n+            uid_catalog.uncatalog_object(url)\n         if ref_catalog_rid is not None:\n-            ref_catalog.uncatalog_object(old_url)\n-            ref_catalog.catalog_object(ref, new_url)\n+            ref_catalog.uncatalog_object(url)\n \n \n def removed_handler(obj, event):\n'

