Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2019-01-02T01:27:59+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/adfd490db2432b048b32a6992e6bb20bde609670

fix: close files on tests

This avoids resource warnings while running the tests.

Files changed:
A news/36.bugfix
M plone/formwidget/namedfile/widget.rst

b"diff --git a/news/36.bugfix b/news/36.bugfix\nnew file mode 100644\nindex 0000000..3c3c087\n--- /dev/null\n+++ b/news/36.bugfix\n@@ -0,0 +1,2 @@\n+Close files, so no resource warnings are shown.\n+[gforcada]\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex 29aba65..6253aa1 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -262,10 +262,13 @@ characters::\n \n   >>> from plone.namedfile import NamedFile, NamedImage\n   >>> from plone.formwidget.namedfile.testing import get_file\n-  >>> image_data = get_file('image.jpg').read()\n+  >>> open_files = []\n+  >>> with get_file('image.jpg') as image_file:\n+  ...     image_data = image_file.read()\n   >>> file_widget.value = NamedFile(data=b'My file data',\n   ...                               filename=u'data_\xe6\xb7\xb1.txt')\n-  >>> aFieldStorage = FieldStorageStub(get_file('image.jpg'), filename='faux.jpg')\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> aFieldStorage = FieldStorageStub(open_files[-1], filename='faux.jpg')\n   >>> myUpload = FileUpload(aFieldStorage)\n   >>> image_widget.request = make_request(form={'widget.name.image': myUpload})\n   >>> file_widget.update()\n@@ -303,7 +306,8 @@ Set the current image, which is shown as thumb on the page, and then\n setup the widget with a new value::\n \n   >>> content.image_field = NamedImage(data=image_data, filename=u'faux.jpg')\n-  >>> aFieldStorage = FieldStorageStub(get_file('image.jpg'), filename='faux2.jpg')\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> aFieldStorage = FieldStorageStub(open_files[-1], filename='faux2.jpg')\n   >>> myUpload = FileUpload(aFieldStorage)\n   >>> image_widget.request = make_request(form={'widget.name.image': myUpload})\n   >>> image_widget.update()\n@@ -343,7 +347,8 @@ stored in the field::\n   >>> file_widget.extract() is content.file_field\n   True\n \n-  >>> aFieldStorage = FieldStorageStub(get_file('image.jpg'), filename='faux2.jpg')\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> aFieldStorage = FieldStorageStub(open_files[-1], filename='faux2.jpg')\n   >>> myUpload = FileUpload(aFieldStorage)\n \n   >>> image_widget.request = make_request(form={'widget.name.image': '', 'widget.name.image.action': 'nochange'})\n@@ -459,7 +464,8 @@ Content type from headers sent by browser should be ignored::\n   >>> file_obj.contentType != 'text/x-dummy'\n   True\n \n-  >>> aFieldStorage = FieldStorageStub(get_file('image.jpg'), filename='random.png', headers={'Content-Type': 'image/x-dummy'})\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> aFieldStorage = FieldStorageStub(open_files[-1], filename='random.png', headers={'Content-Type': 'image/x-dummy'})\n   >>> image_obj = image_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> image_obj.data == image_data\n   True\n@@ -671,9 +677,11 @@ Let's upload data::\n Check that we have a good image that PIL can handle::\n \n   >>> import PIL.Image\n-  >>> PIL.Image.open(get_file('image.jpg'))\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> PIL.Image.open(open_files[-1])\n   <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x200 at ...>\n-  >>> field_storage = FieldStorageStub(get_file('image.jpg'), filename='image.jpg')\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> field_storage = FieldStorageStub(open_files[-1], filename='image.jpg')\n   >>> upload = FileUpload(field_storage)\n \n   >>> image_widget.request = make_request(form={'widget.name.image': upload})\n@@ -1010,3 +1018,7 @@ If we change the name of the widget the download URL will reflect that::\n   >>> file_widget.name = 'my_widget'\n   >>> file_widget.download_url\n   'http://127.0.0.1/some/path/++widget++my_widget/@@download/data.txt'\n+\n+Close all open file handlers:\n+\n+  >>> ignore = [x.close() for x in open_files]\n"

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2019-01-07T11:05:08+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/54b6d4ab6d1d7ccad32f472422c967eb551bf1db

Merge pull request #37 from plone/warnings

fix: close files on tests

Files changed:
A news/36.bugfix
M plone/formwidget/namedfile/widget.rst

b"diff --git a/news/36.bugfix b/news/36.bugfix\nnew file mode 100644\nindex 0000000..3c3c087\n--- /dev/null\n+++ b/news/36.bugfix\n@@ -0,0 +1,2 @@\n+Close files, so no resource warnings are shown.\n+[gforcada]\ndiff --git a/plone/formwidget/namedfile/widget.rst b/plone/formwidget/namedfile/widget.rst\nindex 29aba65..6253aa1 100644\n--- a/plone/formwidget/namedfile/widget.rst\n+++ b/plone/formwidget/namedfile/widget.rst\n@@ -262,10 +262,13 @@ characters::\n \n   >>> from plone.namedfile import NamedFile, NamedImage\n   >>> from plone.formwidget.namedfile.testing import get_file\n-  >>> image_data = get_file('image.jpg').read()\n+  >>> open_files = []\n+  >>> with get_file('image.jpg') as image_file:\n+  ...     image_data = image_file.read()\n   >>> file_widget.value = NamedFile(data=b'My file data',\n   ...                               filename=u'data_\xe6\xb7\xb1.txt')\n-  >>> aFieldStorage = FieldStorageStub(get_file('image.jpg'), filename='faux.jpg')\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> aFieldStorage = FieldStorageStub(open_files[-1], filename='faux.jpg')\n   >>> myUpload = FileUpload(aFieldStorage)\n   >>> image_widget.request = make_request(form={'widget.name.image': myUpload})\n   >>> file_widget.update()\n@@ -303,7 +306,8 @@ Set the current image, which is shown as thumb on the page, and then\n setup the widget with a new value::\n \n   >>> content.image_field = NamedImage(data=image_data, filename=u'faux.jpg')\n-  >>> aFieldStorage = FieldStorageStub(get_file('image.jpg'), filename='faux2.jpg')\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> aFieldStorage = FieldStorageStub(open_files[-1], filename='faux2.jpg')\n   >>> myUpload = FileUpload(aFieldStorage)\n   >>> image_widget.request = make_request(form={'widget.name.image': myUpload})\n   >>> image_widget.update()\n@@ -343,7 +347,8 @@ stored in the field::\n   >>> file_widget.extract() is content.file_field\n   True\n \n-  >>> aFieldStorage = FieldStorageStub(get_file('image.jpg'), filename='faux2.jpg')\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> aFieldStorage = FieldStorageStub(open_files[-1], filename='faux2.jpg')\n   >>> myUpload = FileUpload(aFieldStorage)\n \n   >>> image_widget.request = make_request(form={'widget.name.image': '', 'widget.name.image.action': 'nochange'})\n@@ -459,7 +464,8 @@ Content type from headers sent by browser should be ignored::\n   >>> file_obj.contentType != 'text/x-dummy'\n   True\n \n-  >>> aFieldStorage = FieldStorageStub(get_file('image.jpg'), filename='random.png', headers={'Content-Type': 'image/x-dummy'})\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> aFieldStorage = FieldStorageStub(open_files[-1], filename='random.png', headers={'Content-Type': 'image/x-dummy'})\n   >>> image_obj = image_converter.toFieldValue(FileUpload(aFieldStorage))\n   >>> image_obj.data == image_data\n   True\n@@ -671,9 +677,11 @@ Let's upload data::\n Check that we have a good image that PIL can handle::\n \n   >>> import PIL.Image\n-  >>> PIL.Image.open(get_file('image.jpg'))\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> PIL.Image.open(open_files[-1])\n   <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x200 at ...>\n-  >>> field_storage = FieldStorageStub(get_file('image.jpg'), filename='image.jpg')\n+  >>> open_files.append(get_file('image.jpg'))\n+  >>> field_storage = FieldStorageStub(open_files[-1], filename='image.jpg')\n   >>> upload = FileUpload(field_storage)\n \n   >>> image_widget.request = make_request(form={'widget.name.image': upload})\n@@ -1010,3 +1018,7 @@ If we change the name of the widget the download URL will reflect that::\n   >>> file_widget.name = 'my_widget'\n   >>> file_widget.download_url\n   'http://127.0.0.1/some/path/++widget++my_widget/@@download/data.txt'\n+\n+Close all open file handlers:\n+\n+  >>> ignore = [x.close() for x in open_files]\n"

