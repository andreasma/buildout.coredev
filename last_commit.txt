Repository: plone.keyring


Branch: refs/heads/master
Date: 2019-02-08T17:29:36+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/f00dfe0a9bb238b19cfa056b974bc0294c66236f

Avoid deprecation warnings

Files changed:
M plone/keyring/tests/testKeymanager.py
M plone/keyring/tests/testKeyring.py

b'diff --git a/plone/keyring/tests/testKeymanager.py b/plone/keyring/tests/testKeymanager.py\nindex dae0389..a22442a 100644\n--- a/plone/keyring/tests/testKeymanager.py\n+++ b/plone/keyring/tests/testKeymanager.py\n@@ -30,12 +30,12 @@ def testInterface(self):\n     def testSystemKeyringCreated(self):\n         mgr=KeyManager()\n         self.assertEqual(set(mgr), {u"_anon", u"_forms", u"_system"})\n-        self.failUnless(mgr[u"_system"].current is not None)\n+        self.assertTrue(mgr[u"_system"].current is not None)\n \n \n     def testContainerIsPersistent(self):\n         mgr=KeyManager()\n-        self.failUnless(isinstance(mgr.__dict__["_SampleContainer__data"],\n+        self.assertTrue(isinstance(mgr.__dict__["_SampleContainer__data"],\n                                    PersistentMapping))\n \n \n@@ -109,11 +109,11 @@ def testRotateUnknownRing(self):\n \n     def testSecret(self):\n         self.mgr[u"_system"][0]=marker\n-        self.failUnless(self.mgr.secret() is marker)\n+        self.assertTrue(self.mgr.secret() is marker)\n \n     def testSecretGivenRing(self):\n         self.mgr[u"one"][0]=marker\n-        self.failUnless(self.mgr.secret(u"one") is marker)\n+        self.assertTrue(self.mgr.secret(u"one") is marker)\n \n     def testSecretUnknownRing(self):\n         self.assertRaises(KeyError, self.mgr.secret, u"missing")\ndiff --git a/plone/keyring/tests/testKeyring.py b/plone/keyring/tests/testKeyring.py\nindex a3a6bce..f975aed 100644\n--- a/plone/keyring/tests/testKeyring.py\n+++ b/plone/keyring/tests/testKeyring.py\n@@ -26,7 +26,7 @@ def testIterate(self):\n         ring=Keyring()\n         ring.data=[0, 1, 2, 3, 4]\n         iterator=ring.__iter__()\n-        self.failUnless(isinstance(iterator, types.GeneratorType))\n+        self.assertTrue(isinstance(iterator, types.GeneratorType))\n         self.assertEqual(list(iterator), [0, 1, 2, 3, 4])\n \n     def testClear(self):\n@@ -38,22 +38,22 @@ def testClear(self):\n     def testRotate(self):\n         ring=Keyring()\n         ring.rotate()\n-        self.failIf(ring.current is None)\n+        self.assertFalse(ring.current is None)\n         self.assertEqual(ring.data[1:], [ None, None, None, None])\n \n     def testRotateTwice(self):\n         ring=Keyring()\n         ring.rotate()\n         ring.rotate()\n-        self.failUnless(ring.data[0] is not None)\n-        self.failUnless(ring.data[1] is not None)\n+        self.assertTrue(ring.data[0] is not None)\n+        self.assertTrue(ring.data[1] is not None)\n         self.assertEqual(ring.data[2:], [ None, None, None])\n \n     def testCurrent(self):\n         ring=Keyring()\n         marker=[]\n         ring.data=[marker, 1, 2, 3]\n-        self.failUnless(ring.current is marker)\n+        self.assertTrue(ring.current is marker)\n \n \n def test_suite():\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2019-02-08T17:30:31+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.keyring/commit/84d31652836577f084bf07893067aedbc73d6341

Add news entry

Files changed:
A news/5.bugfix

b'diff --git a/news/5.bugfix b/news/5.bugfix\nnew file mode 100644\nindex 0000000..5008c8d\n--- /dev/null\n+++ b/news/5.bugfix\n@@ -0,0 +1,2 @@\n+Avoid deprecation warnings.\n+[gforcada]\n'

Repository: plone.keyring


Branch: refs/heads/master
Date: 2019-02-10T16:53:35+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.keyring/commit/54264647d0910e278adea4aed56f4c77c64735e4

Merge pull request #5 from plone/deprecation-warnings

Avoid deprecation warnings

Files changed:
A news/5.bugfix
M plone/keyring/tests/testKeymanager.py
M plone/keyring/tests/testKeyring.py

b'diff --git a/news/5.bugfix b/news/5.bugfix\nnew file mode 100644\nindex 0000000..5008c8d\n--- /dev/null\n+++ b/news/5.bugfix\n@@ -0,0 +1,2 @@\n+Avoid deprecation warnings.\n+[gforcada]\ndiff --git a/plone/keyring/tests/testKeymanager.py b/plone/keyring/tests/testKeymanager.py\nindex dae0389..a22442a 100644\n--- a/plone/keyring/tests/testKeymanager.py\n+++ b/plone/keyring/tests/testKeymanager.py\n@@ -30,12 +30,12 @@ def testInterface(self):\n     def testSystemKeyringCreated(self):\n         mgr=KeyManager()\n         self.assertEqual(set(mgr), {u"_anon", u"_forms", u"_system"})\n-        self.failUnless(mgr[u"_system"].current is not None)\n+        self.assertTrue(mgr[u"_system"].current is not None)\n \n \n     def testContainerIsPersistent(self):\n         mgr=KeyManager()\n-        self.failUnless(isinstance(mgr.__dict__["_SampleContainer__data"],\n+        self.assertTrue(isinstance(mgr.__dict__["_SampleContainer__data"],\n                                    PersistentMapping))\n \n \n@@ -109,11 +109,11 @@ def testRotateUnknownRing(self):\n \n     def testSecret(self):\n         self.mgr[u"_system"][0]=marker\n-        self.failUnless(self.mgr.secret() is marker)\n+        self.assertTrue(self.mgr.secret() is marker)\n \n     def testSecretGivenRing(self):\n         self.mgr[u"one"][0]=marker\n-        self.failUnless(self.mgr.secret(u"one") is marker)\n+        self.assertTrue(self.mgr.secret(u"one") is marker)\n \n     def testSecretUnknownRing(self):\n         self.assertRaises(KeyError, self.mgr.secret, u"missing")\ndiff --git a/plone/keyring/tests/testKeyring.py b/plone/keyring/tests/testKeyring.py\nindex a3a6bce..f975aed 100644\n--- a/plone/keyring/tests/testKeyring.py\n+++ b/plone/keyring/tests/testKeyring.py\n@@ -26,7 +26,7 @@ def testIterate(self):\n         ring=Keyring()\n         ring.data=[0, 1, 2, 3, 4]\n         iterator=ring.__iter__()\n-        self.failUnless(isinstance(iterator, types.GeneratorType))\n+        self.assertTrue(isinstance(iterator, types.GeneratorType))\n         self.assertEqual(list(iterator), [0, 1, 2, 3, 4])\n \n     def testClear(self):\n@@ -38,22 +38,22 @@ def testClear(self):\n     def testRotate(self):\n         ring=Keyring()\n         ring.rotate()\n-        self.failIf(ring.current is None)\n+        self.assertFalse(ring.current is None)\n         self.assertEqual(ring.data[1:], [ None, None, None, None])\n \n     def testRotateTwice(self):\n         ring=Keyring()\n         ring.rotate()\n         ring.rotate()\n-        self.failUnless(ring.data[0] is not None)\n-        self.failUnless(ring.data[1] is not None)\n+        self.assertTrue(ring.data[0] is not None)\n+        self.assertTrue(ring.data[1] is not None)\n         self.assertEqual(ring.data[2:], [ None, None, None])\n \n     def testCurrent(self):\n         ring=Keyring()\n         marker=[]\n         ring.data=[marker, 1, 2, 3]\n-        self.failUnless(ring.current is marker)\n+        self.assertTrue(ring.current is marker)\n \n \n def test_suite():\n'

