Repository: plone.versioncheck


Branch: refs/heads/master
Date: 2019-03-08T13:42:00+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.versioncheck/commit/e255b2bd738076eead7417e0266e0a34e570d1fa

use pure black as code style

Files changed:
M CHANGES.rst
M setup.py
M src/plone/versioncheck/formatter.py
M src/plone/versioncheck/parser.py
M src/plone/versioncheck/pypi.py
M src/plone/versioncheck/script.py
M src/plone/versioncheck/tracking.py
M src/plone/versioncheck/utils.py
M tests/test_analyser.py
M tests/test_formatter.py
M tests/test_parser.py
M tests/test_script.py
M tests/test_version_compare.py
M tox.ini

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 6b4f011..af95c5b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,6 +4,9 @@ Changelog\n 1.6.11 (unreleased)\n -------------------\n \n+- Use pure black as code style.\n+  [jensens]\n+\n - Test on Python 3.7\n   [jensens]\n \ndiff --git a/setup.py b/setup.py\nindex 6a1831a..cd813ff 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,82 +3,65 @@\n from setuptools import setup\n \n \n-version = \'1.6.11.dev0\'\n+version = "1.6.11.dev0"\n \n-long_description = \'{0}\\n\\n{1}\'.format(\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read()\n+long_description = "{0}\\n\\n{1}".format(\n+    open("README.rst").read(), open("CHANGES.rst").read()\n )\n \n setup(\n-    name=\'plone.versioncheck\',\n+    name="plone.versioncheck",\n     version=version,\n-    description=\'Checks pinned versions with overrides in a cascaded buildout\',\n+    description="Checks pinned versions with overrides in a cascaded buildout",\n     long_description=long_description,\n     # Get more strings from\n     # https://pypi.python.org/pypi?:action=list_classifiers\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Framework :: Buildout :: Extension\',\n-        \'Framework :: Buildout :: Recipe\',\n-        \'Framework :: Buildout\',\n-        \'Intended Audience :: Developers\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python :: 2\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3\',\n-        \'Programming Language :: Python :: 3.3\',\n-        \'Programming Language :: Python :: 3.4\',\n-        \'Programming Language :: Python :: 3.5\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python\',\n-        \'Topic :: Software Development :: Build Tools\',\n-        \'Topic :: Software Development :: Quality Assurance\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Framework :: Buildout :: Extension",\n+        "Framework :: Buildout :: Recipe",\n+        "Framework :: Buildout",\n+        "Intended Audience :: Developers",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python :: 2",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3",\n+        "Programming Language :: Python :: 3.3",\n+        "Programming Language :: Python :: 3.4",\n+        "Programming Language :: Python :: 3.5",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python",\n+        "Topic :: Software Development :: Build Tools",\n+        "Topic :: Software Development :: Quality Assurance",\n     ],\n-    keywords=\'plone buildout version \',\n-    author=\'Jens W. Klein\',\n-    author_email=\'jens@bluedynamics.com\',\n-    url=\'https://github.com/plone/plone.versioncheck\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\', ),\n-    namespace_packages=[\'plone\', ],\n-    package_dir={\'\': \'src\'},\n+    keywords="plone buildout version ",\n+    author="Jens W. Klein",\n+    author_email="jens@bluedynamics.com",\n+    url="https://github.com/plone/plone.versioncheck",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    namespace_packages=["plone"],\n+    package_dir={"": "src"},\n     include_package_data=True,\n     zip_safe=True,\n     install_requires=[\n-        \'CacheControl[filecache]\',\n-        \'colorama\',\n-        \'jinja2\',\n-        \'requests\',\n-        \'setuptools>=12\',\n-        \'zc.buildout\',\n-    ],\n-    setup_requires=[\n-        \'setuptools>=12\'\n+        "CacheControl[filecache]",\n+        "colorama",\n+        "jinja2",\n+        "requests",\n+        "setuptools>=12",\n+        "zc.buildout",\n     ],\n+    setup_requires=["setuptools>=12"],\n     extras_require={\n-        \'docs\': [\n-            \'Sphinx\',\n-        ],\n-        \'release\': [\n-            \'zest.releaser\',\n-        ],\n-        \'test\': [\n-            \'pytest\',\n-            \'responses\',\n-        ],\n-        \'develop\': [\n-            \'pdbpp\',\n-            \'isort\',\n-        ],\n+        "docs": ["Sphinx"],\n+        "release": ["zest.releaser"],\n+        "test": ["pytest", "responses"],\n+        "develop": ["pdbpp", "isort"],\n     },\n     entry_points={\n-        \'console_scripts\': [\n-            \'versioncheck = plone.versioncheck.script:run\',\n-        ],\n-        \'zc.buildout.extension\': [\n-            \'default = plone.versioncheck.tracking:install\',\n-        ]\n+        "console_scripts": ["versioncheck = plone.versioncheck.script:run"],\n+        "zc.buildout.extension": ["default = plone.versioncheck.tracking:install"],\n     },\n )\ndiff --git a/src/plone/versioncheck/formatter.py b/src/plone/versioncheck/formatter.py\nindex 25f2aa0..72c22f5 100644\n--- a/src/plone/versioncheck/formatter.py\n+++ b/src/plone/versioncheck/formatter.py\n@@ -18,6 +18,8 @@\n \n jenv = Environment(loader=PackageLoader("plone.versioncheck", "tpl"))\n \n+FLOOR_DATE = datetime.date(1970, 1, 1)\n+\n \n def build_version(\n     name, pkg, pypi, tracked, key, idx, flavor="versions", orphaned=False\n@@ -32,11 +34,7 @@ def build_version(\n             return record\n         else:\n             record["version"] = pkg[key]["v"] or "(unset)"\n-        if pkg[key].get(\n-            "release_date", datetime.date(1970, 1, 1)\n-        ) != datetime.date(\n-            1970, 1, 1\n-        ):  # NOQA: E501\n+        if pkg[key].get("release_date", FLOOR_DATE) != FLOOR_DATE:  # NOQA: E501\n             record["release_date"] = pkg[key].get("release_date")\n         if idx == 0:\n             if orphaned:\n@@ -62,8 +60,8 @@ def build_version(\n \n \n def builder(\n-    pkgsinfo, newer_only=False, newer_orphaned_only=False, limit=None\n-):  # noqa: C901, E501\n+    pkgsinfo, newer_only=False, newer_orphaned_only=False, limit=None, exclude_cfgs=[]\n+):\n     """build\n     - OrderedDict with pkgname as keys\n     - each entry an record:\n@@ -118,9 +116,7 @@ def builder(\n                     location,\n                     idx,\n                     flavor="versions",\n-                    orphaned=tracked\n-                    and current_tracked is None\n-                    and not devegg,\n+                    orphaned=tracked and current_tracked is None and not devegg,\n                 )\n             )\n         if not devegg and current_tracked is not None and not len(versions):\n@@ -181,7 +177,8 @@ def builder(\n             and len(record["versions"]) == 1\n         ):\n             continue\n-\n+        for version in record["versions"]:\n+            pass\n         result[name] = record\n     return result\n \n@@ -270,19 +267,13 @@ def browser(\n     )\n     template = jenv.get_template("browser.jinja")\n     print(\n-        template.render(\n-            data=data, req_by=show_requiredby, rel_date=show_release_dates\n-        ),\n+        template.render(data=data, req_by=show_requiredby, rel_date=show_release_dates),\n         file=file,\n     )\n \n \n def machine(\n-    pkgsinfo,\n-    newer_only=False,\n-    newer_orphaned_only=False,\n-    limit=None,\n-    file=sys.stdout,\n+    pkgsinfo, newer_only=False, newer_orphaned_only=False, limit=None, file=sys.stdout\n ):\n     sys.stderr.write("\\nReport for machines\\n\\n")\n     data = builder(\ndiff --git a/src/plone/versioncheck/parser.py b/src/plone/versioncheck/parser.py\nindex d7001f4..0c5f1a4 100644\n--- a/src/plone/versioncheck/parser.py\n+++ b/src/plone/versioncheck/parser.py\n@@ -82,9 +82,7 @@ def _extract_versions_section(  # NOQA: C901\n         raise ValueError("{0} does not exist!".format(filename))\n \n     # first read own versions section\n-    current_version_section_name = buildout["buildout"].get(\n-        "versions", "versions"\n-    )\n+    current_version_section_name = buildout["buildout"].get("versions", "versions")\n     if version_section_name is None:\n         # initial name\n         version_section_name = current_version_section_name\n@@ -95,8 +93,7 @@ def _extract_versions_section(  # NOQA: C901\n             \'\\nGlobal versions section name: "{gname}"\'\n             \'\\nVersions pinned under that new Section namespace "{nname}"\'\n             " will be ignored.".format(\n-                gname=version_section_name,\n-                nname=buildout["buildout"].get("versions"),\n+                gname=version_section_name, nname=buildout["buildout"].get("versions")\n             )\n         )\n \n@@ -106,9 +103,7 @@ def _extract_versions_section(  # NOQA: C901\n         key_name = filename\n \n     if config.has_section(version_section_name):\n-        version_sections[key_name] = OrderedDict(\n-            config.items(version_section_name)\n-        )\n+        version_sections[key_name] = OrderedDict(config.items(version_section_name))\n         sys.stderr.write(\n             "\\n  {0:d} entries in versions section.".format(\n                 len(version_sections[key_name])\ndiff --git a/src/plone/versioncheck/pypi.py b/src/plone/versioncheck/pypi.py\nindex 95c4d49..0602a35 100644\n--- a/src/plone/versioncheck/pypi.py\n+++ b/src/plone/versioncheck/pypi.py\n@@ -14,9 +14,7 @@\n \n Release = namedtuple("Release", ["version", "release_date"])\n \n-FLOOR_RELEASE = Release(\n-    version=u"0.0.0.0", release_date=datetime.date(1970, 1, 1)\n-)\n+FLOOR_RELEASE = Release(version=u"0.0.0.0", release_date=datetime.date(1970, 1, 1))\n \n \n def mmbp_tuple(version):\n@@ -94,15 +92,11 @@ def check(name, version, session):  # noqa: C901\n             if rel_v.is_prerelease and rel_v > parse_version(\n                 result["majorpre"].version\n             ):\n-                result["majorpre"] = Release(\n-                    version=release, release_date=rel_date\n-                )\n+                result["majorpre"] = Release(version=release, release_date=rel_date)\n             elif not rel_v.is_prerelease and rel_v > parse_version(\n                 result["major"].version\n             ):\n-                result["major"] = Release(\n-                    version=release, release_date=rel_date\n-                )\n+                result["major"] = Release(version=release, release_date=rel_date)\n             continue\n         if (  # Only compare same version line\n             rel_vtuple[0] == vtuple[0] and rel_vtuple[1] > vtuple[1]\n@@ -110,15 +104,11 @@ def check(name, version, session):  # noqa: C901\n             if rel_v.is_prerelease and rel_v > parse_version(\n                 result["minorpre"].version\n             ):\n-                result["minorpre"] = Release(\n-                    version=release, release_date=rel_date\n-                )\n+                result["minorpre"] = Release(version=release, release_date=rel_date)\n             elif not rel_v.is_prerelease and rel_v > parse_version(\n                 result["minor"].version\n             ):\n-                result["minor"] = Release(\n-                    version=release, release_date=rel_date\n-                )\n+                result["minor"] = Release(version=release, release_date=rel_date)\n             continue\n         if (  # Only compare same version line\n             rel_vtuple[0] == vtuple[0]\n@@ -128,15 +118,11 @@ def check(name, version, session):  # noqa: C901\n             if rel_v.is_prerelease and rel_v > parse_version(\n                 result["bugfixpre"].version\n             ):\n-                result["bugfixpre"] = Release(\n-                    version=release, release_date=rel_date\n-                )\n+                result["bugfixpre"] = Release(version=release, release_date=rel_date)\n             elif not rel_v.is_prerelease and rel_v > parse_version(\n                 result["bugfix"].version\n             ):\n-                result["bugfix"] = Release(\n-                    version=release, release_date=rel_date\n-                )\n+                result["bugfix"] = Release(version=release, release_date=rel_date)\n             continue\n \n     # reset non existing versions\n@@ -173,9 +159,7 @@ def check(name, version, session):  # noqa: C901\n def check_all(pkgsinfo, limit=None, nocache=False):\n     session = requests_session(nocache=nocache)\n     pkgs = pkgsinfo["pkgs"]\n-    sys.stderr.write(\n-        "Check PyPI for updates of {0:d} packages.".format(len(pkgs))\n-    )\n+    sys.stderr.write("Check PyPI for updates of {0:d} packages.".format(len(pkgs)))\n     if limit:\n         sys.stderr.write(" Check limited to {0:d} packages.".format(limit))\n     pkgsinfo["pypi"] = {}\n@@ -194,9 +178,7 @@ def check_all(pkgsinfo, limit=None, nocache=False):\n         if limit and idx == limit:\n             break\n     for error in errors:\n-        sys.stderr.write(\n-            "\\nError in {0} version {1} reason: {2}".format(*error)\n-        )\n+        sys.stderr.write("\\nError in {0} version {1} reason: {2}".format(*error))\n \n     sys.stderr.write("\\nPyPI check finished\\n")\n \n@@ -234,9 +216,7 @@ def update_pkg_info(pkg_name, pkg_data, session):\n def update_pkgs_info(pkgsinfo, limit=None, nocache=False):\n     session = requests_session(nocache=nocache)\n     pkgs = pkgsinfo["pkgs"]\n-    sys.stderr.write(\n-        "Check PyPI for data of {0:d} packages.".format(len(pkgs))\n-    )\n+    sys.stderr.write("Check PyPI for data of {0:d} packages.".format(len(pkgs)))\n     if limit:\n         sys.stderr.write(" Check limited to {0:d} packages.".format(limit))\n     errors = []\n@@ -297,9 +277,7 @@ def update_tracking_version_info(pkg_name, pkg_data, session):\n def update_tracking_info(pkgsinfo, nocache=False):\n     session = requests_session(nocache=nocache)\n     pkgs = pkgsinfo["tracking"]["versions"]\n-    sys.stderr.write(\n-        "Check PyPI for data of {0:d} packages.".format(len(pkgs))\n-    )\n+    sys.stderr.write("Check PyPI for data of {0:d} packages.".format(len(pkgs)))\n     errors = []\n \n     idx = 0\n@@ -307,9 +285,7 @@ def update_tracking_info(pkgsinfo, nocache=False):\n         if not idx % 20:\n             sys.stderr.write("\\n{0:4d} ".format(idx))\n \n-        state, result = update_tracking_version_info(\n-            pkg_name, pkg_data, session\n-        )\n+        state, result = update_tracking_version_info(pkg_name, pkg_data, session)\n         if not state:\n             sys.stderr.write("E")\n             errors.append((pkg_name, str(result)))\ndiff --git a/src/plone/versioncheck/script.py b/src/plone/versioncheck/script.py\nindex c99da1e..0b15bfa 100644\n--- a/src/plone/versioncheck/script.py\n+++ b/src/plone/versioncheck/script.py\n@@ -59,16 +59,14 @@\n parser.add_argument(\n     "-r",\n     "--required-by",\n-    help="show information about requirements (only if tracking file is "\n-    "available)",\n+    help="show information about requirements (only if tracking file is " "available)",\n     default=False,\n     action="store_true",\n )\n parser.add_argument(\n     "-d",\n     "--show-release-dates",\n-    help="show information about release dates "\n-    "(only for package lookup from PyPI)",\n+    help="show information about release dates " "(only for package lookup from PyPI)",\n     default=False,\n     action="store_true",\n     dest="show_release_dates",\n@@ -79,6 +77,12 @@\n     help="ignore tracking file (if present)",\n     action="store_true",\n )\n+parser.add_argument(\n+    "-e",\n+    "--exclude-cfg",\n+    help="exclude in listing if cfg-filename globs the given expression",\n+    action="append",\n+)\n parser.add_argument(\n     "-m",\n     "--machine",\n@@ -99,9 +103,7 @@\n     type=argparse.FileType("w"),\n     default=sys.stdout,\n )\n-parser.add_argument(\n-    "--no-colors", help="do not show colors", action="store_true"\n-)\n+parser.add_argument("--no-colors", help="do not show colors", action="store_true")\n parser.add_argument(\n     "--debug-limit",\n     type=int,\n@@ -131,6 +133,7 @@ def run():\n             newer_only=args.newer,\n             newer_orphaned_only=args.newer_orphaned,\n             limit=args.debug_limit,\n+            exclude_cfgs=args.exclude_cfg,\n             file=args.output,\n         )\n     elif args.browser:\n@@ -139,6 +142,7 @@ def run():\n             newer_only=args.newer,\n             newer_orphaned_only=args.newer_orphaned,\n             limit=args.debug_limit,\n+            exclude_cfgs=args.exclude_cfg,\n             show_requiredby=args.required_by,\n             show_release_dates=args.show_release_dates,\n             file=args.output,\n@@ -150,5 +154,6 @@ def run():\n             newer_only=args.newer,\n             newer_orphaned_only=args.newer_orphaned,\n             limit=args.debug_limit,\n+            exclude_cfgs=args.exclude_cfg,\n             show_requiredby=args.required_by,\n         )\ndiff --git a/src/plone/versioncheck/tracking.py b/src/plone/versioncheck/tracking.py\nindex b4ea46f..b35b9e7 100644\n--- a/src/plone/versioncheck/tracking.py\n+++ b/src/plone/versioncheck/tracking.py\n@@ -67,13 +67,9 @@ def logging_shutdown():\n \n \n def install(buildout):\n-    filepath = os.path.join(\n-        buildout["buildout"]["directory"], TRACKINGFILENAME\n-    )\n+    filepath = os.path.join(buildout["buildout"]["directory"], TRACKINGFILENAME)\n     easy_install.Installer.__tracked_versions = {}\n-    easy_install.Installer._get_dist = track_get_dist(\n-        easy_install.Installer._get_dist\n-    )\n+    easy_install.Installer._get_dist = track_get_dist(easy_install.Installer._get_dist)\n     logging.shutdown = write_tracked(logging.shutdown, filepath)\n \n \ndiff --git a/src/plone/versioncheck/utils.py b/src/plone/versioncheck/utils.py\nindex d9e684a..4baea92 100644\n--- a/src/plone/versioncheck/utils.py\n+++ b/src/plone/versioncheck/utils.py\n@@ -166,9 +166,7 @@ def ioctl_GWINSZ(fd):\n             import fcntl\n             import termios\n \n-            cr = struct.unpack(\n-                "hh", fcntl.ioctl(fd, termios.TIOCGWINSZ, "1234")\n-            )\n+            cr = struct.unpack("hh", fcntl.ioctl(fd, termios.TIOCGWINSZ, "1234"))\n             return cr\n         except Exception:\n             pass\ndiff --git a/tests/test_analyser.py b/tests/test_analyser.py\nindex e9a1ba8..511d2e9 100644\n--- a/tests/test_analyser.py\n+++ b/tests/test_analyser.py\n@@ -12,69 +12,130 @@ def test_is_cfg_newer():\n     pkginfo = {}\n     assert is_cfg_newer(pkginfo) is None\n \n-    pkginfo = OrderedDict([(\'foo.cfg\', {\'a\': \'\',\n-                                        \'release_date\': datetime.date(1970, 1, 1),  # NOQA: E501\n-                                        \'v\': \'1.0.0\'}),\n-                           (\'baz.cfg\', {\'a\': \'\',\n-                                        \'release_date\': datetime.date(1970, 1, 1),  # NOQA: E501\n-                                        \'v\': \'1.0.5\'})\n-                           ]),\n+    pkginfo = (\n+        OrderedDict(\n+            [\n+                (\n+                    "foo.cfg",\n+                    {\n+                        "a": "",\n+                        "release_date": datetime.date(1970, 1, 1),  # NOQA: E501\n+                        "v": "1.0.0",\n+                    },\n+                ),\n+                (\n+                    "baz.cfg",\n+                    {\n+                        "a": "",\n+                        "release_date": datetime.date(1970, 1, 1),  # NOQA: E501\n+                        "v": "1.0.5",\n+                    },\n+                ),\n+            ]\n+        ),\n+    )\n     # assert is_cfg_newer(pkginfo) == True\n \n \n def test_is_pypi_newer():\n-    pypiinfo = OrderedDict([(\'major\', None),\n-                            (\'minor\', None),\n-                            (\'bugfix\', None),\n-                            (\'majorpre\', None),\n-                            (\'minorpre\', None),\n-                            (\'bugfixpre\', None)])\n+    pypiinfo = OrderedDict(\n+        [\n+            ("major", None),\n+            ("minor", None),\n+            ("bugfix", None),\n+            ("majorpre", None),\n+            ("minorpre", None),\n+            ("bugfixpre", None),\n+        ]\n+    )\n     assert is_pypi_newer(pypiinfo) is False\n \n-    pypiinfo = OrderedDict([(\'major\', Release(version=u\'1.0.0\', release_date=datetime.date(1970, 1, 1))),  # NOQA: E501\n-                            (\'minor\', None),\n-                            (\'bugfix\', None),\n-                            (\'majorpre\', None),\n-                            (\'minorpre\', None),\n-                            (\'bugfixpre\', None)])\n-    assert is_pypi_newer(pypiinfo) == \'pypifinal\'\n+    pypiinfo = OrderedDict(\n+        [\n+            (\n+                "major",\n+                Release(version=u"1.0.0", release_date=datetime.date(1970, 1, 1)),\n+            ),  # NOQA: E501\n+            ("minor", None),\n+            ("bugfix", None),\n+            ("majorpre", None),\n+            ("minorpre", None),\n+            ("bugfixpre", None),\n+        ]\n+    )\n+    assert is_pypi_newer(pypiinfo) == "pypifinal"\n \n-    pypiinfo = OrderedDict([(\'major\', None),\n-                            (\'minor\', Release(version=u\'1.1.0\', release_date=datetime.date(1970, 1, 1))),  # NOQA: E501\n-                            (\'bugfix\', None),\n-                            (\'majorpre\', None),\n-                            (\'minorpre\', None),\n-                            (\'bugfixpre\', None)])\n-    assert is_pypi_newer(pypiinfo) == \'pypifinal\'\n+    pypiinfo = OrderedDict(\n+        [\n+            ("major", None),\n+            (\n+                "minor",\n+                Release(version=u"1.1.0", release_date=datetime.date(1970, 1, 1)),\n+            ),  # NOQA: E501\n+            ("bugfix", None),\n+            ("majorpre", None),\n+            ("minorpre", None),\n+            ("bugfixpre", None),\n+        ]\n+    )\n+    assert is_pypi_newer(pypiinfo) == "pypifinal"\n \n-    pypiinfo = OrderedDict([(\'major\', None),\n-                            (\'minor\', None),\n-                            (\'bugfix\', Release(version=u\'1.1.1\', release_date=datetime.date(1970, 1, 1))),  # NOQA: E501\n-                            (\'majorpre\', None),\n-                            (\'minorpre\', None),\n-                            (\'bugfixpre\', None)])\n-    assert is_pypi_newer(pypiinfo) == \'pypifinal\'\n+    pypiinfo = OrderedDict(\n+        [\n+            ("major", None),\n+            ("minor", None),\n+            (\n+                "bugfix",\n+                Release(version=u"1.1.1", release_date=datetime.date(1970, 1, 1)),\n+            ),  # NOQA: E501\n+            ("majorpre", None),\n+            ("minorpre", None),\n+            ("bugfixpre", None),\n+        ]\n+    )\n+    assert is_pypi_newer(pypiinfo) == "pypifinal"\n \n-    pypiinfo = OrderedDict([(\'major\', None),\n-                            (\'minor\', None),\n-                            (\'bugfix\', None),\n-                            (\'majorpre\', Release(version=u\'2.0.0.a1\', release_date=datetime.date(1970, 1, 1))),  # NOQA: E501\n-                            (\'minorpre\', None),\n-                            (\'bugfixpre\', None)])\n-    assert is_pypi_newer(pypiinfo) == \'pypiprerelease\'\n+    pypiinfo = OrderedDict(\n+        [\n+            ("major", None),\n+            ("minor", None),\n+            ("bugfix", None),\n+            (\n+                "majorpre",\n+                Release(version=u"2.0.0.a1", release_date=datetime.date(1970, 1, 1)),\n+            ),  # NOQA: E501\n+            ("minorpre", None),\n+            ("bugfixpre", None),\n+        ]\n+    )\n+    assert is_pypi_newer(pypiinfo) == "pypiprerelease"\n \n-    pypiinfo = OrderedDict([(\'major\', None),\n-                            (\'minor\', None),\n-                            (\'bugfix\', None),\n-                            (\'majorpre\', None),\n-                            (\'minorpre\', Release(version=u\'1.2.0.a1\', release_date=datetime.date(1970, 1, 1))),  # NOQA: E501\n-                            (\'bugfixpre\', None)])\n-    assert is_pypi_newer(pypiinfo) == \'pypiprerelease\'\n+    pypiinfo = OrderedDict(\n+        [\n+            ("major", None),\n+            ("minor", None),\n+            ("bugfix", None),\n+            ("majorpre", None),\n+            (\n+                "minorpre",\n+                Release(version=u"1.2.0.a1", release_date=datetime.date(1970, 1, 1)),\n+            ),  # NOQA: E501\n+            ("bugfixpre", None),\n+        ]\n+    )\n+    assert is_pypi_newer(pypiinfo) == "pypiprerelease"\n \n-    pypiinfo = OrderedDict([(\'major\', None),\n-                            (\'minor\', None),\n-                            (\'bugfix\', None),\n-                            (\'majorpre\', None),\n-                            (\'minorpre\', None),\n-                            (\'bugfixpre\', Release(version=u\'1.1.2.a1\', release_date=datetime.date(1970, 1, 1)))])  # NOQA: E501\n-    assert is_pypi_newer(pypiinfo) == \'pypiprerelease\'\n+    pypiinfo = OrderedDict(\n+        [\n+            ("major", None),\n+            ("minor", None),\n+            ("bugfix", None),\n+            ("majorpre", None),\n+            ("minorpre", None),\n+            (\n+                "bugfixpre",\n+                Release(version=u"1.1.2.a1", release_date=datetime.date(1970, 1, 1)),\n+            ),\n+        ]\n+    )  # NOQA: E501\n+    assert is_pypi_newer(pypiinfo) == "pypiprerelease"\ndiff --git a/tests/test_formatter.py b/tests/test_formatter.py\nindex 5f54c9c..1adbe36 100644\n--- a/tests/test_formatter.py\n+++ b/tests/test_formatter.py\n@@ -5,23 +5,29 @@\n from plone.versioncheck.formatter import machine\n \n \n-pkgsinfo = {\'pkgs\': {\n-    \'collective.quickupload\': OrderedDict([\n-        (\'foo.cfg\', {\'v\': \'1.5.8\', \'a\': \'\'}),\n-        (\'baz.cfg\', {\'v\': \'1.5.2\', \'a\': \'\'})\n-    ]),\n-    \'ipython\': OrderedDict([(\'buildout.cfg\', {\'v\': \'5.3.0\', \'a\': \'\'})]),\n-    \'lazy\': OrderedDict([(\'buildout.cfg\', {\'v\': \'1.0\', \'a\': \'\'})]),\n-    \'products.cmfcore\': OrderedDict([\n-        (\'buildout.cfg\', {\'v\': \'2.1.1\', \'a\': \'\\nJust a Test Case\\nwith multiple lines\'}),  # NOQA: E501\n-        (\'bar.cfg\', {\'v\': \'2.2.0\', \'a\': \'\'}),\n-        (\'foo.cfg\', {\'v\': \'3.0.1\', \'a\': \'\'}),\n-        (\'baz.cfg\', {\'v\': \'2.2.10\', \'a\': \'\'})\n-    ]),\n-}}\n-\n-\n-json_output = \'\'\'{\n+pkgsinfo = {\n+    "pkgs": {\n+        "collective.quickupload": OrderedDict(\n+            [("foo.cfg", {"v": "1.5.8", "a": ""}), ("baz.cfg", {"v": "1.5.2", "a": ""})]\n+        ),\n+        "ipython": OrderedDict([("buildout.cfg", {"v": "5.3.0", "a": ""})]),\n+        "lazy": OrderedDict([("buildout.cfg", {"v": "1.0", "a": ""})]),\n+        "products.cmfcore": OrderedDict(\n+            [\n+                (\n+                    "buildout.cfg",\n+                    {"v": "2.1.1", "a": "\\nJust a Test Case\\nwith multiple lines"},\n+                ),  # NOQA: E501\n+                ("bar.cfg", {"v": "2.2.0", "a": ""}),\n+                ("foo.cfg", {"v": "3.0.1", "a": ""}),\n+                ("baz.cfg", {"v": "2.2.10", "a": ""}),\n+            ]\n+        ),\n+    }\n+}\n+\n+\n+json_output = """{\n "collective.quickupload": {\n     "versions": [\n         {\n@@ -91,7 +97,7 @@\n     "state": "In"\n }\n }\n-\'\'\'\n+"""\n \n \n def test_json_formatter(capsys):\n@@ -99,12 +105,12 @@ def test_json_formatter(capsys):\n     out, err = capsys.readouterr()\n     # Seems that stdout is not correctly captured\n     assert result is None\n-    assert out == \'\'\n-    assert err == \'\\nReport for machines\\n\\n\'\n+    assert out == ""\n+    assert err == "\\nReport for machines\\n\\n"\n     # assert out == json_output\n \n \n-browser_output = \'\'\'<html>\n+browser_output = """<html>\n <head>\n   <meta charset="utf-8">\n   <title>plone.versioncheck</title>\n@@ -292,7 +298,7 @@ def test_json_formatter(capsys):\n   </tbody>\n </table>\n </body>\n-</html>\'\'\'  # NOQA: E501\n+</html>"""  # NOQA: E501\n \n \n def test_browser_formatter(capsys):\n@@ -300,6 +306,6 @@ def test_browser_formatter(capsys):\n     out, err = capsys.readouterr()\n     # Seems that stdout is not correctly captured\n     assert result is None\n-    assert out == \'\'\n-    assert err == \'\\nReport for browsers\\n\\n\'\n+    assert out == ""\n+    assert err == "\\nReport for browsers\\n\\n"\n     # assert out == browser_output  # Why is this not working\ndiff --git a/tests/test_parser.py b/tests/test_parser.py\nindex 58a8c84..4c3df0c 100644\n--- a/tests/test_parser.py\n+++ b/tests/test_parser.py\n@@ -6,45 +6,54 @@\n \n \n def test_nostdout(capsys):\n-    print(\'Test stdout\')\n+    print("Test stdout")\n     out, err = capsys.readouterr()\n-    assert out == \'Test stdout\\n\'\n+    assert out == "Test stdout\\n"\n     with nostdout():\n-        print(\'This should never be in stdout \')\n+        print("This should never be in stdout ")\n \n     out, err = capsys.readouterr()\n-    assert out == \'\'\n+    assert out == ""\n \n-    print(\'This should be printed again.\')\n+    print("This should be printed again.")\n     out, err = capsys.readouterr()\n-    assert out == \'This should be printed again.\\n\'\n+    assert out == "This should be printed again.\\n"\n \n \n def test_parse(capsys):\n-    input = \'buildout.cfg\'\n+    input = "buildout.cfg"\n \n     result = parse(input, False)\n     out, err = capsys.readouterr()\n     assert err[:23] == "Parsing buildout files:"\n-    assert """buildout.cfg\n+    assert (\n+        """buildout.cfg\n   3 entries in versions section.\n   1 entries in annotations section.\n-""" in err\n+"""\n+        in err\n+    )\n \n     assert result == {\n-        \'collective.quickupload\': OrderedDict([\n-            (\'foo.cfg\', {\'v\': \'1.5.8\', \'a\': \'\'}),\n-            (\'baz.cfg\', {\'v\': \'1.5.2\', \'a\': \'\'})\n-        ]),\n-        \'ipython\': OrderedDict([(\'buildout.cfg\', {\'v\': \'5.3.0\', \'a\': \'\'})]),\n-        \'lazy\': OrderedDict([\n-            (\'buildout.cfg\', {\'v\': \'1.0\', \'a\': \'\'}),\n-            (\'buildout.d/spam.cfg\', {\'v\': \'>= 1.1\', \'a\': \'\'})\n-        ]),\n-        \'products.cmfcore\': OrderedDict([\n-            (\'buildout.cfg\', {\'v\': \'2.1.1\', \'a\': \'\\nJust a Test Case\\nwith multiple lines\'}),  # NOQA: E501\n-            (\'bar.cfg\', {\'v\': \'2.2.0\', \'a\': \'\'}),\n-            (\'foo.cfg\', {\'v\': \'3.0.1\', \'a\': \'\'}),\n-            (\'baz.cfg\', {\'v\': \'2.2.10\', \'a\': \'\'})\n-        ]),\n+        "collective.quickupload": OrderedDict(\n+            [("foo.cfg", {"v": "1.5.8", "a": ""}), ("baz.cfg", {"v": "1.5.2", "a": ""})]\n+        ),\n+        "ipython": OrderedDict([("buildout.cfg", {"v": "5.3.0", "a": ""})]),\n+        "lazy": OrderedDict(\n+            [\n+                ("buildout.cfg", {"v": "1.0", "a": ""}),\n+                ("buildout.d/spam.cfg", {"v": ">= 1.1", "a": ""}),\n+            ]\n+        ),\n+        "products.cmfcore": OrderedDict(\n+            [\n+                (\n+                    "buildout.cfg",\n+                    {"v": "2.1.1", "a": "\\nJust a Test Case\\nwith multiple lines"},\n+                ),  # NOQA: E501\n+                ("bar.cfg", {"v": "2.2.0", "a": ""}),\n+                ("foo.cfg", {"v": "3.0.1", "a": ""}),\n+                ("baz.cfg", {"v": "2.2.10", "a": ""}),\n+            ]\n+        ),\n     }\ndiff --git a/tests/test_script.py b/tests/test_script.py\nindex be361ea..7875112 100644\n--- a/tests/test_script.py\n+++ b/tests/test_script.py\n@@ -6,7 +6,7 @@\n import sys\n \n \n-help_output = \'\'\'\n+help_output = """\n usage: py.test [-h] [-p] [-n] [-N] [-r] [-d] [-i] [-m] [--no-cache] [-b]\n                [-o [OUTPUT]] [--no-colors] [--debug-limit DEBUG_LIMIT]\n                [buildout]\n@@ -51,19 +51,19 @@\n   [a] Annotation (gray)\n \n Color of package name helps to indicate overall state of a package.\n-\'\'\'  # NOQA: E501\n+"""  # NOQA: E501\n \n \n def test_script_help(capsys):\n     with pytest.raises(SystemExit):\n-        sys.argv = [\'versioncheck\', \'--help\']\n+        sys.argv = ["versioncheck", "--help"]\n         result = run()\n         out, err = capsys.readouterr()\n         assert result is None\n         assert out == help_output\n \n \n-json_output = \'\'\'{\n+json_output = """{\n "collective.quickupload": {\n     "versions": [\n         {\n@@ -133,11 +133,11 @@ def test_script_help(capsys):\n     "state": "In"\n }\n }\n-\'\'\'\n+"""\n \n \n def test_script_machine(capsys):\n-    sys.argv = [\'versioncheck\', \'-m\']\n+    sys.argv = ["versioncheck", "-m"]\n     result = run()\n     out, err = capsys.readouterr()\n     assert result is None\n@@ -145,7 +145,7 @@ def test_script_machine(capsys):\n \n \n def test_script_browser(capsys):\n-    sys.argv = [\'versioncheck\', \'-b\']\n+    sys.argv = ["versioncheck", "-b"]\n     result = run()\n     out, err = capsys.readouterr()\n     assert result is None\n@@ -153,7 +153,7 @@ def test_script_browser(capsys):\n \n \n def test_script_pypi(capsys):\n-    sys.argv = [\'versioncheck\', \'-p\']\n+    sys.argv = ["versioncheck", "-p"]\n     result = run()\n     out, err = capsys.readouterr()\n     assert result is None\n@@ -161,7 +161,7 @@ def test_script_pypi(capsys):\n \n \n def test_script_ignore_tracking(capsys):\n-    sys.argv = [\'versioncheck\', \'-i\']\n+    sys.argv = ["versioncheck", "-i"]\n     result = run()\n     out, err = capsys.readouterr()\n     assert result is None\n@@ -169,7 +169,7 @@ def test_script_ignore_tracking(capsys):\n \n \n def test_script_ignore_tracking_pypi(capsys):\n-    sys.argv = [\'versioncheck\', \'-p\', \'-i\']\n+    sys.argv = ["versioncheck", "-p", "-i"]\n     result = run()\n     out, err = capsys.readouterr()\n     assert result is None\ndiff --git a/tests/test_version_compare.py b/tests/test_version_compare.py\nindex b42e7cd..30a047e 100644\n--- a/tests/test_version_compare.py\n+++ b/tests/test_version_compare.py\n@@ -12,16 +12,16 @@\n \n \n def test_mmbp_tuple():\n-    assert mmbp_tuple(parse_version(u\'0.0.0.0\')) == [0, 0, 0, 0]\n-    assert mmbp_tuple(parse_version(u\'1.0\')) == [1, 0, 0, 0]\n-    assert mmbp_tuple(parse_version(u\'1.1.0\')) == [1, 1, 0, 0]\n-    assert mmbp_tuple(parse_version(u\'0.1\')) == [0, 1, 0, 0]\n-    assert mmbp_tuple(parse_version(u\'0.10.1\')) == [0, 10, 1, 0]\n-    assert mmbp_tuple(parse_version(u\'1.1.1.1\')) == [1, 1, 1, 1]\n-    assert mmbp_tuple(parse_version(u\'1.1.0.a1\')) == [1, 1, 0, 0]\n+    assert mmbp_tuple(parse_version(u"0.0.0.0")) == [0, 0, 0, 0]\n+    assert mmbp_tuple(parse_version(u"1.0")) == [1, 0, 0, 0]\n+    assert mmbp_tuple(parse_version(u"1.1.0")) == [1, 1, 0, 0]\n+    assert mmbp_tuple(parse_version(u"0.1")) == [0, 1, 0, 0]\n+    assert mmbp_tuple(parse_version(u"0.10.1")) == [0, 10, 1, 0]\n+    assert mmbp_tuple(parse_version(u"1.1.1.1")) == [1, 1, 1, 1]\n+    assert mmbp_tuple(parse_version(u"1.1.0.a1")) == [1, 1, 0, 0]\n \n \n-demo_json = \'\'\'{\n+demo_json = """{\n     "info": {},\n     "releases": {\n         "1.0": {},\n@@ -45,32 +45,38 @@ def test_mmbp_tuple():\n         "3.0.a1": {}\n     }\n }\n-\'\'\'\n+"""\n \n \n-assumed_demo_result = OrderedDict([\n-    (\'major\', Release(version=u\'2.0.0\',\n-                      release_date=datetime.date(1970, 1, 1))),\n-    (\'minor\', Release(version=u\'1.1.1\',\n-                      release_date=datetime.date(1970, 1, 1))),\n-    (\'bugfix\', Release(version=u\'1.0.12\',\n-                       release_date=datetime.date(1970, 1, 1))),\n-    (\'majorpre\', Release(version=u\'3.0.a1\',\n-                         release_date=datetime.date(1970, 1, 1))),\n-    (\'minorpre\', Release(version=u\'1.2.0.b1\',\n-                         release_date=datetime.date(1970, 1, 1))),\n-    (\'bugfixpre\', Release(version=u\'1.0.13.dev0\',\n-                          release_date=datetime.date(1970, 1, 1))),\n-])\n+assumed_demo_result = OrderedDict(\n+    [\n+        ("major", Release(version=u"2.0.0", release_date=datetime.date(1970, 1, 1))),\n+        ("minor", Release(version=u"1.1.1", release_date=datetime.date(1970, 1, 1))),\n+        ("bugfix", Release(version=u"1.0.12", release_date=datetime.date(1970, 1, 1))),\n+        (\n+            "majorpre",\n+            Release(version=u"3.0.a1", release_date=datetime.date(1970, 1, 1)),\n+        ),\n+        (\n+            "minorpre",\n+            Release(version=u"1.2.0.b1", release_date=datetime.date(1970, 1, 1)),\n+        ),\n+        (\n+            "bugfixpre",\n+            Release(version=u"1.0.13.dev0", release_date=datetime.date(1970, 1, 1)),\n+        ),\n+    ]\n+)\n \n \n @responses.activate\n def test_check():\n     session = requests_session(nocache=False)\n-    name = u\'demo\'\n+    name = u"demo"\n     responses.add(\n-        responses.GET, \'{0}/{1}/json\'.format(PYPI_URL, name),\n-        content_type=\'application/json\',\n+        responses.GET,\n+        "{0}/{1}/json".format(PYPI_URL, name),\n+        content_type="application/json",\n         body=demo_json,\n     )\n-    assert check(name, u\'1.0\', session) == (1, assumed_demo_result)\n+    assert check(name, u"1.0", session) == (1, assumed_demo_result)\ndiff --git a/tox.ini b/tox.ini\nindex 22528fc..7993885 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -68,61 +68,20 @@ commands =\n \n [lint]\n skip_install = true\n+basepython = python3.6\n \n deps =\n     isort\n-    flake8\n-    # helper to generate HTML reports:\n-    flake8-html\n-    # Useful flake8 plugins that are Python and Plone specific:\n-    flake8-coding\n-    flake8-debugger\n-    flake8-deprecated\n-    flake8-pytest\n-    flake8-todo\n-    flake8-isort\n-    mccabe\n-    # Potential flake8 plugins that should be used:  # TBD\n-    #flake8-blind-except\n-    #flake8-commas\n-    #flake8-docstrings\n-    #flake8-mypy\n-    #flake8-pep3101\n-    #flake8-plone-hasattr\n-    #flake8-string-format\n-    #flake8_strict\n-    #flake8-quotes\n+    black\n \n commands =\n-    mkdir -p {toxinidir}/_build/reports/flake8\n     isort --check-only --recursive {toxinidir}/src {toxinidir}/tests setup.py\n     - flake8 --format=html --htmldir={toxinidir}/_build/reports/flake8 --doctests src tests setup.py\n-    flake8 src tests setup.py --doctests\n+    black --check src tests setup.py\n \n whitelist_externals =\n     mkdir\n \n-[testenv:lint-py27]\n-basepython = python2.7\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:lint-py36]\n-basepython = python3.6\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n-[testenv:lint-py37]\n-basepython = python3.7\n-skip_install = true\n-deps = {[lint]deps}\n-commands = {[lint]commands}\n-whitelist_externals = {[lint]whitelist_externals}\n-\n [testenv:docs]\n deps =\n     Sphinx\n'

