Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2019-02-20T22:34:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.PortalTransforms/commit/5773646c916cde786e66c744d995e4084507b97d

When form tag is added to the valid tags, do not remove it anyway.

By default the cleaner would always remove form tags and kill button, input, select, and textarea tags
Fixes https://github.com/plone/Products.CMFPlone/issues/2693

Files changed:
A news/2693.bugfix
M Products/PortalTransforms/tests/test_transforms.py
M Products/PortalTransforms/transforms/safe_html.py

b'diff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py\nindex 5239609..054c004 100644\n--- a/Products/PortalTransforms/tests/test_transforms.py\n+++ b/Products/PortalTransforms/tests/test_transforms.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf8  -*-\n from __future__ import print_function\n+from copy import deepcopy\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IFilterSchema\n from Products.PortalTransforms.data import datastream\n@@ -323,6 +324,91 @@ def test_script_with_all_entities_and_unicode(self):\n             self.assertEqual(unescape(got), escaped)\n \n \n+class SafeHtmlTransformsWithFormTest(TransformTestCase):\n+\n+    def setUp(self):\n+        super(SafeHtmlTransformsWithFormTest, self).setUp()\n+        self.request = self.layer[\'request\']\n+        registry = getUtility(IRegistry)\n+        self.settings = registry.forInterface(\n+            IFilterSchema, prefix="plone")\n+        self.orig_valid_tags = deepcopy(self.settings.valid_tags)\n+\n+    def tearDown(self):\n+        self.settings.valid_tags = self.orig_valid_tags\n+\n+    def test_form_tag_removed(self):\n+        orig = "<form><label>Hello</label></form>"\n+        expected = "Hello"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+    def test_form_tag_kept(self):\n+        # Allow form tag\n+        self.settings.valid_tags.append(\'form\')\n+        orig = "<form><label>Hello</label></form>"\n+        expected = "<form>Hello</form>"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+    def test_form_with_input_removed(self):\n+        orig = (\n+            \'<form>\'\n+            \'<label>Hello</label> \'\n+            \'<button name="but">Click here</button> \'\n+            \'<input type="text" value="hi"/> \'\n+            \'<select name="sel"><option value="1">One</option></select> \'\n+            \'<textarea name="text">Stuff</textarea>\'\n+            \'</form>\')\n+        # Originally, up to and including version 3.1.5, \'Hello    \' was kept.\n+        # Now, with cleaner.forms = False, more text is kept:\n+        expected = "Hello Click here  One Stuff"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+    def test_form_with_input_kept(self):\n+        # Allow various form related tags\n+        self.settings.valid_tags.extend(\n+            \'form button input select textarea option label\'.split()\n+        )\n+        orig = (\n+            \'<form>\'\n+            \'<label>Hello</label> \'\n+            \'<button name="but">Click here</button> \'\n+            \'<input type="text" value="hi"/> \'\n+            \'<select name="sel"><option value="1">One</option></select> \'\n+            \'<textarea name="text">Stuff</textarea>\'\n+            \'</form>\')\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, orig)\n+\n+    def test_label_tag_removed(self):\n+        orig = "<form><label>Hello</label></form>"\n+        expected = "Hello"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+    def test_label_tag_kept(self):\n+        # Allow label tag\n+        self.settings.valid_tags.append(\'label\')\n+        orig = "<form><label>Hello</label></form>"\n+        expected = "<label>Hello</label>"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+\n class WordTransformsTest(TransformTestCase):\n \n     def setUp(self):\n@@ -484,6 +570,7 @@ class TransformTestSubclass(TransformTest):\n     tests.append(PILTransformsTest)\n     tests.append(SafeHtmlTransformsTest)\n     tests.append(SafeHtmlTransformsWithScriptTest)\n+    tests.append(SafeHtmlTransformsWithFormTest)\n     tests.append(WordTransformsTest)\n     tests.append(ParsersTestCase)\n     return tests\ndiff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py\nindex 807ee74..a1adc12 100644\n--- a/Products/PortalTransforms/transforms/safe_html.py\n+++ b/Products/PortalTransforms/transforms/safe_html.py\n@@ -2444,6 +2444,7 @@ def strip_outer(s):\n                           meta=False,\n                           javascript=remove_script,\n                           scripts=remove_script,\n+                          forms=False,\n                           style=False)\n         try:\n             cleaner(tree)\ndiff --git a/news/2693.bugfix b/news/2693.bugfix\nnew file mode 100644\nindex 0000000..d6ab31e\n--- /dev/null\n+++ b/news/2693.bugfix\n@@ -0,0 +1,4 @@\n+When form tag is added to the valid tags, do not remove it anyway.\n+By default the cleaner would always remove form tags and kill button, input, select, and textarea tags\n+Fixes `issue 2693 <https://github.com/plone/Products.CMFPlone/issues/2693>`_.\n+[maurits]\n'

Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2019-02-21T09:23:57+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.PortalTransforms/commit/8ef5fc4e919c564afc57314cda8d857631b1ba4e

test_transforms.py: fixed invalid settings bleeding over into other tests.

Append unicodes instead of strings to valid_tags and nasty_tags.  That is what the settings expect.
Prevent future errors by saving the original settings in setUp and restoring them in tearDown.

Sample error:
Error in test test_form_tag_kept (Products.PortalTransforms.tests.test_transforms.SafeHtmlTransformsWithFormTest)
Traceback (most recent call last):
  File "/usr/local/Cellar/python@2/2.7.15/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/case.py", line 358, in run
    self.tearDown()
  File "/Users/maurits/community/plone-coredev/5.1/src/Products.PortalTransforms/Products/PortalTransforms/tests/test_transforms.py", line 338, in tearDown
    self.settings.valid_tags = self.orig_valid_tags
  File "/Users/maurits/shared-eggs/cp27m/plone.registry-1.1.5-py2.7.egg/plone/registry/recordsproxy.py", line 60, in __setattr__
    self.__registry__[full_name] = value
  File "/Users/maurits/shared-eggs/cp27m/plone.registry-1.1.5-py2.7.egg/plone/registry/registry.py", line 51, in __setitem__
    self.records[name].value = value
  File "/Users/maurits/shared-eggs/cp27m/plone.registry-1.1.5-py2.7.egg/plone/registry/record.py", line 82, in _set_value
    field.validate(value)
  File "/Users/maurits/shared-eggs/cp27m/zope.schema-4.5.0-py2.7.egg/zope/schema/_bootstrapfields.py", line 183, in validate
    self._validate(value)
  File "/Users/maurits/shared-eggs/cp27m/zope.schema-4.5.0-py2.7.egg/zope/schema/_field.py", line 527, in _validate
    raise WrongContainedType(errors, self.__name__)
WrongContainedType: ([WrongType('h1', &lt;type 'unicode'&gt;, '')], 'value')

Files changed:
M Products/PortalTransforms/tests/test_transforms.py

b'diff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py\nindex 054c004..f89895e 100644\n--- a/Products/PortalTransforms/tests/test_transforms.py\n+++ b/Products/PortalTransforms/tests/test_transforms.py\n@@ -183,13 +183,15 @@ def setUp(self):\n         registry = getUtility(IRegistry)\n         self.settings = registry.forInterface(\n             IFilterSchema, prefix="plone")\n-        self.settings.valid_tags.append(\'style\')\n-        self.settings.valid_tags.remove(\'h1\')\n-        self.settings.nasty_tags.append(\'h1\')\n+        self.orig_valid_tags = deepcopy(self.settings.valid_tags)\n+        self.orig_nasty_tags = deepcopy(self.settings.nasty_tags)\n+        self.settings.valid_tags.append(u\'style\')\n+        self.settings.valid_tags.remove(u\'h1\')\n+        self.settings.nasty_tags.append(u\'h1\')\n \n     def tearDown(self):\n-        self.settings.valid_tags.remove(\'style\')\n-        self.settings.valid_tags.append(\'h1\')\n+        self.settings.valid_tags = self.orig_valid_tags\n+        self.settings.nasty_tags = self.orig_nasty_tags\n \n     def test_kill_nasty_tags_which_are_not_valid(self):\n         self.assertTrue(\'script\' in self.settings.nasty_tags)\n@@ -251,12 +253,14 @@ def setUp(self):\n         registry = getUtility(IRegistry)\n         self.settings = registry.forInterface(\n             IFilterSchema, prefix="plone")\n-        self.settings.valid_tags.append(\'script\')\n-        self.settings.nasty_tags.remove(\'script\')\n+        self.orig_valid_tags = deepcopy(self.settings.valid_tags)\n+        self.orig_nasty_tags = deepcopy(self.settings.nasty_tags)\n+        self.settings.valid_tags.append(u\'script\')\n+        self.settings.nasty_tags.remove(u\'script\')\n \n     def tearDown(self):\n-        self.settings.nasty_tags.append(\'script\')\n-        self.settings.valid_tags.remove(\'script\')\n+        self.settings.valid_tags = self.orig_valid_tags\n+        self.settings.nasty_tags = self.orig_nasty_tags\n \n     def test_entities_outside_script(self):\n         orig = "<code>a > 0 && b < 1</code>"\n@@ -335,6 +339,11 @@ def setUp(self):\n         self.orig_valid_tags = deepcopy(self.settings.valid_tags)\n \n     def tearDown(self):\n+        # If this gives a WrongContainedType because some of the tags are\n+        # strings instead of the expected unicode,\n+        # then some other test is adding strings and not cleaning up.\n+        # Note that with valid_tags.append no validation is done,\n+        # but only when realling setting valid_tags.\n         self.settings.valid_tags = self.orig_valid_tags\n \n     def test_form_tag_removed(self):\n@@ -347,7 +356,7 @@ def test_form_tag_removed(self):\n \n     def test_form_tag_kept(self):\n         # Allow form tag\n-        self.settings.valid_tags.append(\'form\')\n+        self.settings.valid_tags.append(u\'form\')\n         orig = "<form><label>Hello</label></form>"\n         expected = "<form>Hello</form>"\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n@@ -400,7 +409,7 @@ def test_label_tag_removed(self):\n \n     def test_label_tag_kept(self):\n         # Allow label tag\n-        self.settings.valid_tags.append(\'label\')\n+        self.settings.valid_tags.append(u\'label\')\n         orig = "<form><label>Hello</label></form>"\n         expected = "<label>Hello</label>"\n         data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n'

Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2019-03-01T01:28:00+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/37a2b6ebadbcb7ac520d15a1651223dbbe04786d

Merge pull request #39 from plone/maurits-issue-2693-safe-html-forms

When form tag is added to the valid tags, do not remove it anyway.

Files changed:
A news/2693.bugfix
M Products/PortalTransforms/tests/test_transforms.py
M Products/PortalTransforms/transforms/safe_html.py

b'diff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py\nindex 5239609..f89895e 100644\n--- a/Products/PortalTransforms/tests/test_transforms.py\n+++ b/Products/PortalTransforms/tests/test_transforms.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf8  -*-\n from __future__ import print_function\n+from copy import deepcopy\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IFilterSchema\n from Products.PortalTransforms.data import datastream\n@@ -182,13 +183,15 @@ def setUp(self):\n         registry = getUtility(IRegistry)\n         self.settings = registry.forInterface(\n             IFilterSchema, prefix="plone")\n-        self.settings.valid_tags.append(\'style\')\n-        self.settings.valid_tags.remove(\'h1\')\n-        self.settings.nasty_tags.append(\'h1\')\n+        self.orig_valid_tags = deepcopy(self.settings.valid_tags)\n+        self.orig_nasty_tags = deepcopy(self.settings.nasty_tags)\n+        self.settings.valid_tags.append(u\'style\')\n+        self.settings.valid_tags.remove(u\'h1\')\n+        self.settings.nasty_tags.append(u\'h1\')\n \n     def tearDown(self):\n-        self.settings.valid_tags.remove(\'style\')\n-        self.settings.valid_tags.append(\'h1\')\n+        self.settings.valid_tags = self.orig_valid_tags\n+        self.settings.nasty_tags = self.orig_nasty_tags\n \n     def test_kill_nasty_tags_which_are_not_valid(self):\n         self.assertTrue(\'script\' in self.settings.nasty_tags)\n@@ -250,12 +253,14 @@ def setUp(self):\n         registry = getUtility(IRegistry)\n         self.settings = registry.forInterface(\n             IFilterSchema, prefix="plone")\n-        self.settings.valid_tags.append(\'script\')\n-        self.settings.nasty_tags.remove(\'script\')\n+        self.orig_valid_tags = deepcopy(self.settings.valid_tags)\n+        self.orig_nasty_tags = deepcopy(self.settings.nasty_tags)\n+        self.settings.valid_tags.append(u\'script\')\n+        self.settings.nasty_tags.remove(u\'script\')\n \n     def tearDown(self):\n-        self.settings.nasty_tags.append(\'script\')\n-        self.settings.valid_tags.remove(\'script\')\n+        self.settings.valid_tags = self.orig_valid_tags\n+        self.settings.nasty_tags = self.orig_nasty_tags\n \n     def test_entities_outside_script(self):\n         orig = "<code>a > 0 && b < 1</code>"\n@@ -323,6 +328,96 @@ def test_script_with_all_entities_and_unicode(self):\n             self.assertEqual(unescape(got), escaped)\n \n \n+class SafeHtmlTransformsWithFormTest(TransformTestCase):\n+\n+    def setUp(self):\n+        super(SafeHtmlTransformsWithFormTest, self).setUp()\n+        self.request = self.layer[\'request\']\n+        registry = getUtility(IRegistry)\n+        self.settings = registry.forInterface(\n+            IFilterSchema, prefix="plone")\n+        self.orig_valid_tags = deepcopy(self.settings.valid_tags)\n+\n+    def tearDown(self):\n+        # If this gives a WrongContainedType because some of the tags are\n+        # strings instead of the expected unicode,\n+        # then some other test is adding strings and not cleaning up.\n+        # Note that with valid_tags.append no validation is done,\n+        # but only when realling setting valid_tags.\n+        self.settings.valid_tags = self.orig_valid_tags\n+\n+    def test_form_tag_removed(self):\n+        orig = "<form><label>Hello</label></form>"\n+        expected = "Hello"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+    def test_form_tag_kept(self):\n+        # Allow form tag\n+        self.settings.valid_tags.append(u\'form\')\n+        orig = "<form><label>Hello</label></form>"\n+        expected = "<form>Hello</form>"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+    def test_form_with_input_removed(self):\n+        orig = (\n+            \'<form>\'\n+            \'<label>Hello</label> \'\n+            \'<button name="but">Click here</button> \'\n+            \'<input type="text" value="hi"/> \'\n+            \'<select name="sel"><option value="1">One</option></select> \'\n+            \'<textarea name="text">Stuff</textarea>\'\n+            \'</form>\')\n+        # Originally, up to and including version 3.1.5, \'Hello    \' was kept.\n+        # Now, with cleaner.forms = False, more text is kept:\n+        expected = "Hello Click here  One Stuff"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+    def test_form_with_input_kept(self):\n+        # Allow various form related tags\n+        self.settings.valid_tags.extend(\n+            \'form button input select textarea option label\'.split()\n+        )\n+        orig = (\n+            \'<form>\'\n+            \'<label>Hello</label> \'\n+            \'<button name="but">Click here</button> \'\n+            \'<input type="text" value="hi"/> \'\n+            \'<select name="sel"><option value="1">One</option></select> \'\n+            \'<textarea name="text">Stuff</textarea>\'\n+            \'</form>\')\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, orig)\n+\n+    def test_label_tag_removed(self):\n+        orig = "<form><label>Hello</label></form>"\n+        expected = "Hello"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+    def test_label_tag_kept(self):\n+        # Allow label tag\n+        self.settings.valid_tags.append(u\'label\')\n+        orig = "<form><label>Hello</label></form>"\n+        expected = "<label>Hello</label>"\n+        data = self.transforms.convertTo(target_mimetype=\'text/x-html-safe\', orig=orig)\n+        got = data.getData()\n+        self.assertIsInstance(got, self.allowed_types)\n+        self.assertEqual(got, expected)\n+\n+\n class WordTransformsTest(TransformTestCase):\n \n     def setUp(self):\n@@ -484,6 +579,7 @@ class TransformTestSubclass(TransformTest):\n     tests.append(PILTransformsTest)\n     tests.append(SafeHtmlTransformsTest)\n     tests.append(SafeHtmlTransformsWithScriptTest)\n+    tests.append(SafeHtmlTransformsWithFormTest)\n     tests.append(WordTransformsTest)\n     tests.append(ParsersTestCase)\n     return tests\ndiff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py\nindex 807ee74..a1adc12 100644\n--- a/Products/PortalTransforms/transforms/safe_html.py\n+++ b/Products/PortalTransforms/transforms/safe_html.py\n@@ -2444,6 +2444,7 @@ def strip_outer(s):\n                           meta=False,\n                           javascript=remove_script,\n                           scripts=remove_script,\n+                          forms=False,\n                           style=False)\n         try:\n             cleaner(tree)\ndiff --git a/news/2693.bugfix b/news/2693.bugfix\nnew file mode 100644\nindex 0000000..d6ab31e\n--- /dev/null\n+++ b/news/2693.bugfix\n@@ -0,0 +1,4 @@\n+When form tag is added to the valid tags, do not remove it anyway.\n+By default the cleaner would always remove form tags and kill button, input, select, and textarea tags\n+Fixes `issue 2693 <https://github.com/plone/Products.CMFPlone/issues/2693>`_.\n+[maurits]\n'

