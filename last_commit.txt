Repository: plone.z3cform


Branch: refs/heads/0.9.x
Date: 2019-09-12T16:59:32+02:00
Author: Harald Friessnegger (frisi) <friessnegger@lovelysystems.com>
Commit: https://github.com/plone/plone.z3cform/commit/7e6561a33d4b0a8ff489bea4d2f8222c72080aef

fix edit/delete for batched crud forms (#7)

w/o passing the batch-page to the form-handler, it can not know which
subforms have been rendered and is always using the first batch -
resulting in no items of the other batches being editable or delete able

Files changed:
M CHANGES.rst
M buildout.cfg
M src/plone/z3cform/crud/README.txt
M src/plone/z3cform/crud/crud-table.pt
M src/plone/z3cform/crud/crud.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1fe1ec2..1079e17 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -6,6 +6,8 @@ Changelog\n \n Bug fixes:\n \n+- Fix edit/delete in paginated crud-forms [fRiSi]\n+\n - Removal of tuple parameter unpacking in method definition (Fixes #14)\n   [ale-rt]\n \ndiff --git a/buildout.cfg b/buildout.cfg\nindex 8a81b6d..8f1a40c 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -4,10 +4,14 @@ parts = test\n develop = .\n versions = versions\n \n+# https://github.com/buildout/buildout/issues/312\n+newest = false\n+\n+\n [versions]\n plone.z3cform =\n setuptools = 38.4.0\n-zc.buildout = 2.11.0\n+zc.buildout = 2.12.0\n \n [test]\n recipe = zc.recipe.testrunner\ndiff --git a/src/plone/z3cform/crud/README.txt b/src/plone/z3cform/crud/README.txt\nindex c14a845..40dbd12 100644\n--- a/src/plone/z3cform/crud/README.txt\n+++ b/src/plone/z3cform/crud/README.txt\n@@ -15,6 +15,7 @@ Setup\n   >>> from plone.z3cform.tests import setup_defaults\n   >>> setup_defaults()\n \n+\n A simple form\n -------------\n \n@@ -58,8 +59,13 @@ Our simple form looks like this:\n This is all that we need to render a combined edit add form containing\n all our items:\n \n+  >>> class FakeContext(object):\n+  ...     def absolute_url(self):\n+  ...         return \'http://nohost/context\'\n+  >>> fake_context = FakeContext()\n+\n   >>> from plone.z3cform.tests import TestRequest\n-  >>> print(MyForm(None, TestRequest())()) \\\n+  >>> print(MyForm(fake_context, TestRequest())()) \\\n   ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n   <div class="crud-form">...Martha...Peter...</div>\n \n@@ -81,7 +87,7 @@ form fires for us:\n   >>> request.form[\'crud-edit.Peter.widgets.name\'] = u\'Franz\'\n   >>> request.form[\'crud-edit.Peter.widgets.age\'] = u\'16\'\n   >>> request.form[\'crud-edit.form.buttons.edit\'] = u\'Apply changes\'\n-  >>> html = MyForm(None, request)()\n+  >>> html = MyForm(fake_context, request)()\n   >>> "Successfully updated" in html\n   True\n \n@@ -97,7 +103,7 @@ Two modified events should have been fired:\n \n If we don\'t make any changes, we\'ll get a message that says so:\n \n-  >>> html = MyForm(None, request)()\n+  >>> html = MyForm(fake_context, request)()\n   >>> "No changes made" in html\n   True\n   >>> log\n@@ -122,7 +128,7 @@ Let\'s rename Martha to Maria.  This will give her another key in our\n storage:\n \n   >>> request.form[\'crud-edit.Martha.widgets.name\'] = u\'Maria\'\n-  >>> html = MyRenamingForm(None, request)()\n+  >>> html = MyRenamingForm(fake_context, request)()\n   >>> "Successfully updated" in html\n   True\n   >>> log.pop().object == storage[\'Maria\']\n@@ -139,7 +145,7 @@ clicked the \'Apply changes\' button:\n   >>> request.form[\'crud-edit.Maria.widgets.name\'] = u\'Maria\'\n   >>> request.form[\'crud-edit.Maria.widgets.age\'] = u\'55\'\n   >>> request.form[\'crud-edit.Maria.widgets.select\'] = [u\'selected\']\n-  >>> html = MyRenamingForm(None, request)()\n+  >>> html = MyRenamingForm(fake_context, request)()\n   >>> "No changes" in html\n   True\n   >>> log\n@@ -148,7 +154,7 @@ clicked the \'Apply changes\' button:\n And what if we do have changes *and* click the checkbox?\n \n   >>> request.form[\'crud-edit.Maria.widgets.age\'] = u\'50\'\n-  >>> html = MyRenamingForm(None, request)()\n+  >>> html = MyRenamingForm(fake_context, request)()\n   >>> "Successfully updated" in html\n   True\n   >>> log.pop().object == storage[\'Maria\']\n@@ -159,7 +165,7 @@ And what if we do have changes *and* click the checkbox?\n If we omit the name, we\'ll get an error:\n \n   >>> request.form[\'crud-edit.Maria.widgets.name\'] = u\'\'\n-  >>> html = MyRenamingForm(None, request)()\n+  >>> html = MyRenamingForm(fake_context, request)()\n   >>> "There were some errors" in html\n   True\n   >>> "Required input is missing" in html\n@@ -180,7 +186,7 @@ clicking the "Delete" button:\n   >>> request = TestRequest()\n   >>> request.form[\'crud-edit.Peter.widgets.select\'] = [\'selected\']\n   >>> request.form[\'crud-edit.form.buttons.delete\'] = u\'Delete\'\n-  >>> html = MyForm(None, request)()\n+  >>> html = MyForm(fake_context, request)()\n   >>> "Successfully deleted items" in html\n   True\n   >>> \'Franz\' in html\n@@ -199,7 +205,7 @@ Add an item with our form\n   >>> request.form[\'crud-add.form.widgets.name\'] = u\'Daniel\'\n   >>> request.form[\'crud-add.form.widgets.age\'] = u\'28\'\n   >>> request.form[\'crud-add.form.buttons.add\'] = u\'Add\'\n-  >>> html = MyForm(None, request)()\n+  >>> html = MyForm(fake_context, request)()\n   >>> "Item added successfully" in html\n   True\n \n@@ -219,7 +225,7 @@ What if we try to add "Daniel" twice?  Our current implementation of\n the add form will simply overwrite the data:\n \n   >>> save_daniel = storage[\'Daniel\']\n-  >>> html = MyForm(None, request)()\n+  >>> html = MyForm(fake_context, request)()\n   >>> "Item added successfully" in html\n   True\n   >>> save_daniel is storage[\'Daniel\']\n@@ -239,7 +245,7 @@ Let\'s implement a class that prevents this:\n   ...                 u"There\'s already an item with the name \'%s\'" % name)\n \n   >>> save_daniel = storage[\'Daniel\']\n-  >>> html = MyCarefulForm(None, request)()\n+  >>> html = MyCarefulForm(fake_context, request)()\n   >>> "Item added successfully" in html\n   False\n   >>> "There\'s already an item with the name \'Daniel\'" in html\n@@ -262,7 +268,7 @@ wanted the name of our persons to be viewable only in the table:\n   ...     view_schema = field.Fields(IPerson).select(\'name\')\n   ...     add_schema = IPerson\n \n-  >>> print(MyAdvancedForm(None, TestRequest())()) \\\n+  >>> print(MyAdvancedForm(fake_context, TestRequest())()) \\\n   ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n   <div class="crud-form">...Daniel...Maria...</div>\n \n@@ -272,7 +278,7 @@ We can still edit the age of our Persons:\n   >>> request.form[\'crud-edit.Maria.widgets.age\'] = u\'40\'\n   >>> request.form[\'crud-edit.Daniel.widgets.age\'] = u\'35\'\n   >>> request.form[\'crud-edit.form.buttons.edit\'] = u\'Apply Changes\'\n-  >>> html = MyAdvancedForm(None, request)()\n+  >>> html = MyAdvancedForm(fake_context, request)()\n   >>> "Successfully updated" in html\n   True\n \n@@ -287,7 +293,7 @@ We can still add a Person using both name and age:\n   >>> request.form[\'crud-add.form.widgets.name\'] = u\'Thomas\'\n   >>> request.form[\'crud-add.form.widgets.age\'] = u\'28\'\n   >>> request.form[\'crud-add.form.buttons.add\'] = u\'Add\'\n-  >>> html = MyAdvancedForm(None, request)()\n+  >>> html = MyAdvancedForm(fake_context, request)()\n   >>> "Item added successfully" in html\n   True\n   >>> len(storage)\n@@ -302,7 +308,7 @@ Our form can also contain links to our items:\n   ...         if field == \'name\':\n   ...             return \'http://en.wikipedia.org/wiki/%s\' % item.name\n \n-  >>> print(MyAdvancedLinkingForm(None, TestRequest())()) \\\n+  >>> print(MyAdvancedLinkingForm(fake_context, TestRequest())()) \\\n   ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n   <div class="crud-form">...\n   ...<a href="http://en.wikipedia.org/wiki/Daniel"...\n@@ -318,7 +324,7 @@ What if we wanted the name to be both used for linking to the item\n   ...     view_schema = field.Fields(IPerson).select(\'name\')\n   ...     add_schema = IPerson\n \n-  >>> print(MyAdvancedLinkingForm(None, TestRequest())()) \\\n+  >>> print(MyAdvancedLinkingForm(fake_context, TestRequest())()) \\\n   ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n   <div class="crud-form">...\n   ...<a href="http://en.wikipedia.org/wiki/Thomas"...Thomas...</a>...\n@@ -334,7 +340,7 @@ Wikipedia link immediately:\n   >>> request.form[\'crud-edit.Thomas.widgets.name\'] = u\'Dracula\'\n   >>> request.form[\'crud-edit.form.buttons.edit\'] = u\'Apply Changes\'\n \n-  >>> print(MyAdvancedLinkingForm(None, request)()) \\\n+  >>> print(MyAdvancedLinkingForm(fake_context, request)()) \\\n   ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n   <div class="crud-form">...\n   ...<a href="http://en.wikipedia.org/wiki/Dracula"...Dracula...</a>...\n@@ -352,13 +358,13 @@ disappear:\n \n   >>> class OnlyEditForm(MyForm):\n   ...     addform_factory = crud.NullForm\n-  >>> html = OnlyEditForm(None, TestRequest())()\n+  >>> html = OnlyEditForm(fake_context, TestRequest())()\n   >>> \'Edit\' in html, \'Add\' in html\n   (True, False)\n \n   >>> class OnlyAddForm(MyForm):\n   ...     editform_factory = crud.NullForm\n-  >>> html = OnlyAddForm(None, TestRequest())()\n+  >>> html = OnlyAddForm(fake_context, TestRequest())()\n   >>> \'Edit\' in html, \'Add\' in html\n   (False, True)\n \n@@ -397,7 +403,7 @@ than the \'edit\' and \'delete\' ones:\n   ...         return sorted(storage.items(), key=lambda x: x[1].name)\n \n   >>> request = TestRequest()\n-  >>> html = MyCustomForm(None, TestRequest())()\n+  >>> html = MyCustomForm(fake_context, TestRequest())()\n   >>> "Delete" in html, "Apply changes" in html, "Capitalize" in html\n   (False, False, True)\n   >>> pprint(storage)\n@@ -407,7 +413,7 @@ than the \'edit\' and \'delete\' ones:\n \n   >>> request.form[\'crud-edit.Thomas.widgets.select\'] = [\'selected\']\n   >>> request.form[\'crud-edit.form.buttons.capitalize\'] = u\'Capitalize\'\n-  >>> html = MyCustomForm(None, request)()\n+  >>> html = MyCustomForm(fake_context, request)()\n   >>> "Capitalized items" in html\n   True\n   >>> pprint(storage)\n@@ -419,7 +425,7 @@ We *cannot* use any of the other buttons:\n \n   >>> del request.form[\'crud-edit.form.buttons.capitalize\']\n   >>> request.form[\'crud-edit.form.buttons.delete\'] = u\'Delete\'\n-  >>> html = MyCustomForm(None, request)()\n+  >>> html = MyCustomForm(fake_context, request)()\n   >>> "Successfully deleted items" in html\n   False\n   >>> \'Thomas\' in storage\n@@ -450,7 +456,7 @@ page template and customize the look of the fields.\n   ...     editform_factory = MyCustomEditForm\n \n   >>> request = TestRequest()\n-  >>> html = MyCustomFormWithCustomSubForm(None, TestRequest())()\n+  >>> html = MyCustomFormWithCustomSubForm(fake_context, TestRequest())()\n \n Still uses same form as before\n   >>> "Delete" in html, "Apply changes" in html, "Capitalize" in html\n@@ -470,7 +476,7 @@ as many items displayed per page.\n   >>> class MyBatchingForm(MyForm):\n   ...     batch_size = 2\n   >>> request = TestRequest()\n-  >>> html = MyBatchingForm(None, request)()\n+  >>> html = MyBatchingForm(fake_context, request)()\n   >>> "Daniel" in html, "Maria" in html\n   (True, True)\n   >>> "THOMAS" in html\n@@ -483,19 +489,31 @@ Make sure, the batch link to the next page is available\n \n Show next page and check content\n \n+  >>> request = TestRequest(QUERY_STRING=\'crud-edit.form.page=1\')\n   >>> request.form[\'crud-edit.form.page\'] = \'1\'\n-  >>> html = MyBatchingForm(None, request)()\n+  >>> html = MyBatchingForm(fake_context, request)()\n   >>> "Daniel" in html, "Maria" in html\n   (False, False)\n   >>> "THOMAS" in html\n   True\n \n+The form action also includes the batch page information so\n+the correct set of subforms can be processed::\n+\n+  >>> print(html) \\\n+  ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n+  <BLANKLINE>\n+  ...\n+  <form action="http://nohost/context?crud-edit.form.page=1"\n+            method="post">\n+  ...\n+\n Let\'s change Thomas\' age on the second page:\n \n   >>> request.form[\'crud-edit.Thomas.widgets.name\'] = u\'Thomas\'\n   >>> request.form[\'crud-edit.Thomas.widgets.age\'] = \'911\'\n   >>> request.form[\'crud-edit.form.buttons.edit\'] = u\'Apply changes\'\n-  >>> html = MyBatchingForm(None, request)()\n+  >>> html = MyBatchingForm(fake_context, request)()\n   >>> "Successfully updated" in html\n   True\n   >>> "911" in html\ndiff --git a/src/plone/z3cform/crud/crud-table.pt b/src/plone/z3cform/crud/crud-table.pt\nindex 52a7f3a..2f14155 100644\n--- a/src/plone/z3cform/crud/crud-table.pt\n+++ b/src/plone/z3cform/crud/crud-table.pt\n@@ -12,7 +12,7 @@\n        tal:condition="view/status" tal:content="view/status">\n   </div>\n \n-  <form action="." method="post" tal:attributes="action request/getURL">\n+  <form action="." method="post" tal:attributes="action view/getURL">\n \n     <tal:batch tal:replace="structure view/render_batch_navigation" />\n \ndiff --git a/src/plone/z3cform/crud/crud.py b/src/plone/z3cform/crud/crud.py\nindex 2464ae1..5e062ad 100644\n--- a/src/plone/z3cform/crud/crud.py\n+++ b/src/plone/z3cform/crud/crud.py\n@@ -303,6 +303,27 @@ def selected_items(self):\n                 tuples.append((subform.content_id, subform.content))\n         return tuples\n \n+    def getURL(self):\n+        """Return url of the current page including parameters.\n+\n+        Equivalent to plone_context_state/current_page_url, not using plone\n+        to not need plone stack in testing-setup\n+        """\n+        current_base_url = self.request.get(\n+            \'ACTUAL_URL\',\n+            self.request.get(\n+                \'VIRTUAL_URL\',\n+                self.request.get(\n+                    \'URL\',\n+                    self.context.context.absolute_url()\n+                )\n+            )\n+        )\n+        query = self.request.get(\'QUERY_STRING\', None)\n+        if query:\n+            return current_base_url + \'?\' + query\n+        return current_base_url\n+\n \n class AddForm(form.Form):\n     template = viewpagetemplatefile.ViewPageTemplateFile(\'crud-add.pt\')\n'

