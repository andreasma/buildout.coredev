Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-16T17:11:20-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/af325729f920235a5f28330648f65538061d020f

Remove compatibility code for Plone 4.x

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 992f827..e9c7e2a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -6,6 +6,9 @@ Changelog\n \n Breaking changes:\n \n+- Remove compatibility code for Plone 4.x.\n+  [hvelarde]\n+\n - Skip Support for Plone 4.x.\n   [jensens]\n \ndiff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py\nindex 2ad7f0e..1e18b77 100644\n--- a/src/plone/app/robotframework/i18n.py\n+++ b/src/plone/app/robotframework/i18n.py\n@@ -2,8 +2,8 @@\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces import ILanguageSchema\n from zope.component import getUtility\n-from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.i18n import translate\n \n@@ -17,21 +17,13 @@ def set_default_language(self, language=None):\n         disableCSRFProtection()\n         if language is None:\n             language = os.environ.get(\'LANGUAGE\') or \'en\'\n-        try:\n-            from Products.CMFPlone.interfaces import ILanguageSchema\n-        except ImportError:\n-            portal = getSite()\n-            return portal.portal_properties.site_properties.setProperty(\n-                \'default_language\',\n-                language,\n-            )\n-        else:\n-            registry = getUtility(IRegistry)\n-            settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n-            settings.default_language = language\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings.default_language = language\n \n     def translate(self, msgid, *args, **kwargs):\n         """Return localized string for given msgid"""\n+        # FIXME: we are alrady using robotframework = 3.0\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n         for arg in [x for x in args if \'=\' in x]:\ndiff --git a/src/plone/app/robotframework/users.py b/src/plone/app/robotframework/users.py\nindex 3687211..804e306 100644\n--- a/src/plone/app/robotframework/users.py\n+++ b/src/plone/app/robotframework/users.py\n@@ -1,23 +1,19 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces import ISecuritySchema\n from zope.component import getUtility\n from zope.component.hooks import getSite\n \n-HAS_SECURITY_SETTINGS = True\n-try:\n-    from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:\n-    HAS_SECURITY_SETTINGS = False\n-\n \n class Users(RemoteLibrary):\n \n     def create_user(self, *args, **kwargs):\n         """Create user with given details and return its id"""\n         disableCSRFProtection()\n+        # FIXME: we are alrady using robotframework = 3.0\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n         for arg in [x for x in args if \'=\' in x]:\n@@ -29,27 +25,17 @@ def create_user(self, *args, **kwargs):\n \n         roles = []\n         properties = kwargs\n-        for arg in [x for x in args[1:] if not \'=\' in x]:\n+        for arg in [x for x in args[1:] if \'=\' not in x]:\n             roles.append(arg)\n-        if not \'email\' in properties:\n+\n+        if \'email\' not in properties:\n             properties[\'email\'] = \'%s@example.com\' % username\n \n         portal = getSite()\n         registration = getToolByName(portal, \'portal_registration\')\n-\n-        if HAS_SECURITY_SETTINGS:  # Plone 5\n-            registry = getUtility(IRegistry)\n-            settings = registry.forInterface(\n-                ISecuritySchema,\n-                prefix=\'plone\',\n-            )\n-            use_email_as_username = getattr(\n-                settings, \'use_email_as_login\', None)\n-        else:  # Plone < 5\n-            portal_properties = getToolByName(portal, \'portal_properties\')\n-            use_email_as_username = \\\n-                portal_properties.site_properties.use_email_as_login\n-\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISecuritySchema, prefix=\'plone\')\n+        use_email_as_username = getattr(settings, \'use_email_as_login\', None)\n         user_id = use_email_as_username and properties[\'email\'] or username\n         password = properties.pop(\'password\', username)\n \n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-16T23:43:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/2e6f158dfd7cca7251931fe0d7bcb7d1edeb73cd

Merge pull request #84 from plone/hvelarde/cleanup

Remove compatibility code for Plone 4.x

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 992f827..e9c7e2a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -6,6 +6,9 @@ Changelog\n \n Breaking changes:\n \n+- Remove compatibility code for Plone 4.x.\n+  [hvelarde]\n+\n - Skip Support for Plone 4.x.\n   [jensens]\n \ndiff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py\nindex 2ad7f0e..1e18b77 100644\n--- a/src/plone/app/robotframework/i18n.py\n+++ b/src/plone/app/robotframework/i18n.py\n@@ -2,8 +2,8 @@\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces import ILanguageSchema\n from zope.component import getUtility\n-from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.i18n import translate\n \n@@ -17,21 +17,13 @@ def set_default_language(self, language=None):\n         disableCSRFProtection()\n         if language is None:\n             language = os.environ.get(\'LANGUAGE\') or \'en\'\n-        try:\n-            from Products.CMFPlone.interfaces import ILanguageSchema\n-        except ImportError:\n-            portal = getSite()\n-            return portal.portal_properties.site_properties.setProperty(\n-                \'default_language\',\n-                language,\n-            )\n-        else:\n-            registry = getUtility(IRegistry)\n-            settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n-            settings.default_language = language\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        settings.default_language = language\n \n     def translate(self, msgid, *args, **kwargs):\n         """Return localized string for given msgid"""\n+        # FIXME: we are alrady using robotframework = 3.0\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n         for arg in [x for x in args if \'=\' in x]:\ndiff --git a/src/plone/app/robotframework/users.py b/src/plone/app/robotframework/users.py\nindex 3687211..804e306 100644\n--- a/src/plone/app/robotframework/users.py\n+++ b/src/plone/app/robotframework/users.py\n@@ -1,23 +1,19 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.interfaces import ISecuritySchema\n from zope.component import getUtility\n from zope.component.hooks import getSite\n \n-HAS_SECURITY_SETTINGS = True\n-try:\n-    from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:\n-    HAS_SECURITY_SETTINGS = False\n-\n \n class Users(RemoteLibrary):\n \n     def create_user(self, *args, **kwargs):\n         """Create user with given details and return its id"""\n         disableCSRFProtection()\n+        # FIXME: we are alrady using robotframework = 3.0\n         # XXX: Because kwargs are only supported with robotframework >= 2.8.3,\n         # we must parse them here to support robotframework < 2.8.3.\n         for arg in [x for x in args if \'=\' in x]:\n@@ -29,27 +25,17 @@ def create_user(self, *args, **kwargs):\n \n         roles = []\n         properties = kwargs\n-        for arg in [x for x in args[1:] if not \'=\' in x]:\n+        for arg in [x for x in args[1:] if \'=\' not in x]:\n             roles.append(arg)\n-        if not \'email\' in properties:\n+\n+        if \'email\' not in properties:\n             properties[\'email\'] = \'%s@example.com\' % username\n \n         portal = getSite()\n         registration = getToolByName(portal, \'portal_registration\')\n-\n-        if HAS_SECURITY_SETTINGS:  # Plone 5\n-            registry = getUtility(IRegistry)\n-            settings = registry.forInterface(\n-                ISecuritySchema,\n-                prefix=\'plone\',\n-            )\n-            use_email_as_username = getattr(\n-                settings, \'use_email_as_login\', None)\n-        else:  # Plone < 5\n-            portal_properties = getToolByName(portal, \'portal_properties\')\n-            use_email_as_username = \\\n-                portal_properties.site_properties.use_email_as_login\n-\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISecuritySchema, prefix=\'plone\')\n+        use_email_as_username = getattr(settings, \'use_email_as_login\', None)\n         user_id = use_email_as_username and properties[\'email\'] or username\n         password = properties.pop(\'password\', username)\n \n'

