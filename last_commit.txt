Repository: plone.app.widgets


Branch: refs/heads/master
Date: 2018-10-17T12:07:07+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.widgets/commit/2ecd4a00e734990894b318c8401bbcae4920b121

py3 fixes

Files changed:
M plone/app/widgets/base.py

b"diff --git a/plone/app/widgets/base.py b/plone/app/widgets/base.py\nindex d8c5d9e..f8d7b2a 100644\n--- a/plone/app/widgets/base.py\n+++ b/plone/app/widgets/base.py\n@@ -27,11 +27,11 @@ def _get(self):\n     def _set(self, value):\n         if value is None:\n             return\n-        if type(value) in (list, tuple):\n+        if isinstance(value, (list, tuple)):\n             value = ' '.join(value)\n-        if type(value) in (dict, set):\n+        if isinstance(value, (dict, set)):\n             value = json.dumps(value)\n-        if type(value) is str:\n+        if isinstance(value, six.binary_type):\n             value = value.decode('utf8')\n         self.el.attrib[name] = value\n \n"

Repository: plone.app.widgets


Branch: refs/heads/master
Date: 2018-10-17T12:07:07+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.widgets/commit/dc799c5730a59cb8ccc1d0dd649068101ff76bc1

Remove vestiges of archetypes-specific support

Files changed:
M README.rst
M develop.cfg
M setup.py

b'diff --git a/README.rst b/README.rst\nindex 33d967d..3d452ee 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -85,33 +85,6 @@ All client side code (javascript/css/images) is done and tested as part of\n For any feature / bug / comment please create an issue in the `issue tracker`_.\n \n \n-Installation\n-============\n-\n-For now only tested with latest Plone 4.3::\n-\n-    [buildout]\n-    extends =\n-        http://dist.plone.org/release/4.3-latest/versions.cfg\n-        https://raw.github.com/plone/plone.app.widgets/master/versions.cfg\n-    versions = versions\n-    parts = instance\n-\n-    [instance]\n-    recipe = plone.recipe.zope2instance\n-    user = admin:admin\n-    http-address = 8080\n-    eggs =\n-        Pillow\n-        Plone\n-        plone.app.widgets[archetypes,dexterity]\n-    zcml =\n-        plone.app.widgets\n-\n-Make sure you install the "Plone Widgets" profile when creating your Plone site\n-or include ``plone.app.widgets:default`` profile in your ``metadata.xml``..\n-\n-\n .. _`Mockup`: http://plone.github.io/mockup\n .. _`issue tracker`: https://github.com/plone/mockup/issues?labels=widgets\n .. _`PLIP here`: https://dev.plone.org/ticket/13476\ndiff --git a/develop.cfg b/develop.cfg\nindex 5f32c3a..573e9e9 100644\n--- a/develop.cfg\n+++ b/develop.cfg\n@@ -42,10 +42,9 @@ interpreter = instance-python\n eggs =\n     Pillow\n     Plone\n-    plone.app.widgets[archetypes,dexterity]\n+    plone.app.widgets[dexterity]\n \n [test]\n recipe = zc.recipe.testrunner\n-eggs = plone.app.widgets[test,archetypes,dexterity]\n+eggs = plone.app.widgets[test,dexterity]\n defaults = [\'--auto-color\', \'--auto-progress\']\n-\ndiff --git a/setup.py b/setup.py\nindex 0dba6cc..7f15863 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -18,7 +18,7 @@\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n     ],\n-    keywords=\'plone widgets z3cform archetypes\',\n+    keywords=\'plone widgets z3cform\',\n     author=\'Nathan Van Gheem\',\n     author_email=\'vangheem@gmail.com\',\n     url=\'https://github.com/plone/plone.app.widgets\',\n@@ -42,15 +42,9 @@\n     extras_require={\n         \'test\': [\n             \'plone.app.robotframework[debug]\',\n-            \'plone.app.widgets[archetypes, dexterity]\',\n             \'plone.app.testing>=4.2.4\',  # we need ROBOT_TEST_LEVEL\n             \'mock\',\n         ],\n-        \'archetypes\': [\n-            \'DateTime\',\n-            \'Products.Archetypes\',\n-            \'archetypes.schemaextender\',\n-        ],\n         \'dexterity\': [\n             \'pytz\',\n             \'plone.app.dexterity\',\n'

Repository: plone.app.widgets


Branch: refs/heads/master
Date: 2018-10-17T12:07:07+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.widgets/commit/a06421fa018661fffe52442981bde8b1f2505aaf

Serialize widgets as unicode

Files changed:
M plone/app/widgets/base.py
M plone/app/widgets/tests/test_base.py

b'diff --git a/plone/app/widgets/base.py b/plone/app/widgets/base.py\nindex f8d7b2a..6b894b5 100644\n--- a/plone/app/widgets/base.py\n+++ b/plone/app/widgets/base.py\n@@ -110,7 +110,7 @@ def render(self):\n         """\n \n         self.update()\n-        return etree.tostring(self.el)\n+        return etree.tostring(self.el, encoding=six.text_type)\n \n \n class InputWidget(BaseWidget):\ndiff --git a/plone/app/widgets/tests/test_base.py b/plone/app/widgets/tests/test_base.py\nindex 6c02c37..7ffd2c2 100644\n--- a/plone/app/widgets/tests/test_base.py\n+++ b/plone/app/widgets/tests/test_base.py\n@@ -44,8 +44,8 @@ def test_setting_patterns_options(self):\n         self.assertEqual(\n             widget.render(),\n             \'<input class="pat-example1" data-pat-example1="{\'\n-            \'&quot;option2&quot;: &quot;value2&quot;, \'\n-            \'&quot;option1&quot;: &quot;value1&quot;}"/>\')\n+            \'&quot;option1&quot;: &quot;value1&quot;, \'\n+            \'&quot;option2&quot;: &quot;value2&quot;}"/>\')\n \n \n class InputWidgetTests(unittest.TestCase):\n@@ -242,7 +242,7 @@ def test_setting_patterns_options(self):\n \n         widget = TextareaWidget(\n             \'example1\',\n-            name=\'expample2\',\n+            name=\'example2\',\n             pattern_options={\n                 \'option1\': \'value1\',\n                 \'option2\': \'value2\',\n@@ -250,10 +250,10 @@ def test_setting_patterns_options(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="expample2" \'\n+            \'<textarea class="pat-example1" name="example2" \'\n             \'data-pat-example1="{\'\n-            \'&quot;option2&quot;: &quot;value2&quot;, \'\n-            \'&quot;option1&quot;: &quot;value1&quot;}">\'\n+            \'&quot;option1&quot;: &quot;value1&quot;, \'\n+            \'&quot;option2&quot;: &quot;value2&quot;}">\'\n             \'</textarea>\')\n \n     def test_set_value(self):\n'

Repository: plone.app.widgets


Branch: refs/heads/master
Date: 2018-10-17T12:08:19+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.widgets/commit/b71183b66bf99463ab8244a54d9f5115c8d09aa9

fix tests

Files changed:
M plone/app/widgets/tests/test_base.py

b'diff --git a/plone/app/widgets/tests/test_base.py b/plone/app/widgets/tests/test_base.py\nindex 7ffd2c2..b3594bc 100644\n--- a/plone/app/widgets/tests/test_base.py\n+++ b/plone/app/widgets/tests/test_base.py\n@@ -16,7 +16,7 @@ def test_defaults(self):\n         widget = BaseWidget(\'input\', \'example1\')\n         self.assertEqual(\n             widget.render(),\n-            \'<input class="pat-example1"/>\')\n+            u\'<input class="pat-example1"/>\')\n \n         self.assertEqual(widget.klass, \'pat-example1\')\n \n@@ -26,7 +26,7 @@ def test_different_element_tag(self):\n         widget = BaseWidget(\'select\', \'example1\')\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1"/>\')\n+            u\'<select class="pat-example1"/>\')\n \n         self.assertEqual(widget.klass, \'pat-example1\')\n \n@@ -41,11 +41,11 @@ def test_setting_patterns_options(self):\n                 \'option2\': \'value2\',\n             })\n \n-        self.assertEqual(\n-            widget.render(),\n-            \'<input class="pat-example1" data-pat-example1="{\'\n-            \'&quot;option1&quot;: &quot;value1&quot;, \'\n-            \'&quot;option2&quot;: &quot;value2&quot;}"/>\')\n+        html = widget.render()\n+        # the order of options is non-deterministic\n+        result1 = u\'<input class="pat-example1" data-pat-example1="{&quot;option1&quot;: &quot;value1&quot;, &quot;option2&quot;: &quot;value2&quot;}"/>\'  # noqa: E501\n+        result2 = u\'<input class="pat-example1" data-pat-example1="{&quot;option2&quot;: &quot;value2&quot;, &quot;option1&quot;: &quot;value1&quot;}"/>\'  # noqa: E501\n+        self.assertIn(html, [result1, result2])\n \n \n class InputWidgetTests(unittest.TestCase):\n@@ -75,7 +75,7 @@ def test_set_type_and_value(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<input class="pat-example1" type="email" \'\n+            u\'<input class="pat-example1" type="email" \'\n             \'name="example2" value="example3"/>\')\n \n         self.assertEqual(widget.type, \'email\')\n@@ -85,7 +85,7 @@ def test_set_type_and_value(self):\n         widget.value = \'example4\'\n         self.assertEqual(\n             widget.render(),\n-            \'<input class="pat-example1" type="text" \'\n+            u\'<input class="pat-example1" type="text" \'\n             \'name="example2" value="example4"/>\')\n \n         self.assertEqual(widget.type, \'text\')\n@@ -95,7 +95,7 @@ def test_set_type_and_value(self):\n         del widget.value\n         self.assertEqual(\n             widget.render(),\n-            \'<input class="pat-example1" name="example2"/>\')\n+            u\'<input class="pat-example1" name="example2"/>\')\n \n         self.assertEqual(widget.type, None)\n         self.assertEqual(widget.value, None)\n@@ -111,7 +111,7 @@ def test_defaults(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" name="example2"></select>\')\n+            u\'<select class="pat-example1" name="example2"></select>\')\n         self.assertEqual(list(widget.items), [])\n         self.assertEqual(widget.value, [])\n \n@@ -132,7 +132,7 @@ def test_set_items_and_value(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" name="example2">\'\n+            u\'<select class="pat-example1" name="example2">\'\n             \'<option value="token1">value1</option>\'\n             \'<option value="token2" selected="selected">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -144,7 +144,7 @@ def test_set_items_and_value(self):\n         widget.value = \'token1\'\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" name="example2">\'\n+            u\'<select class="pat-example1" name="example2">\'\n             \'<option value="token1" selected="selected">value1</option>\'\n             \'<option value="token2">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -156,7 +156,7 @@ def test_set_items_and_value(self):\n         del widget.value\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" name="example2">\'\n+            u\'<select class="pat-example1" name="example2">\'\n             \'<option value="token1">value1</option>\'\n             \'<option value="token2">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -185,7 +185,7 @@ def test_multiple(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" multiple="multiple" name="example2">\'\n+            u\'<select class="pat-example1" multiple="multiple" name="example2">\'\n             \'<option value="token1">value1</option>\'\n             \'<option value="token2" selected="selected">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -197,7 +197,7 @@ def test_multiple(self):\n         widget.value = [\'token1\', \'token2\']\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" multiple="multiple" name="example2">\'\n+            u\'<select class="pat-example1" multiple="multiple" name="example2">\'\n             \'<option value="token1" selected="selected">value1</option>\'\n             \'<option value="token2" selected="selected">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -209,7 +209,7 @@ def test_multiple(self):\n         del widget.value\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" multiple="multiple" name="example2">\'\n+            u\'<select class="pat-example1" multiple="multiple" name="example2">\'\n             \'<option value="token1">value1</option>\'\n             \'<option value="token2">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -218,7 +218,7 @@ def test_multiple(self):\n         del widget.items\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" multiple="multiple" \'\n+            u\'<select class="pat-example1" multiple="multiple" \'\n             \'name="example2"></select>\')\n \n \n@@ -231,7 +231,7 @@ def test_defaults(self):\n         widget = TextareaWidget(\'example1\', name="example2")\n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="example2"></textarea>\')\n+            u\'<textarea class="pat-example1" name="example2"></textarea>\')\n \n         self.assertEqual(widget.name, \'example2\')\n         self.assertEqual(widget.klass, \'pat-example1\')\n@@ -248,13 +248,11 @@ def test_setting_patterns_options(self):\n                 \'option2\': \'value2\',\n             })\n \n-        self.assertEqual(\n-            widget.render(),\n-            \'<textarea class="pat-example1" name="example2" \'\n-            \'data-pat-example1="{\'\n-            \'&quot;option1&quot;: &quot;value1&quot;, \'\n-            \'&quot;option2&quot;: &quot;value2&quot;}">\'\n-            \'</textarea>\')\n+        html = widget.render()\n+        # the order of options is non-deterministic\n+        result1 = u\'<textarea class="pat-example1" name="example2" data-pat-example1="{&quot;option1&quot;: &quot;value1&quot;, &quot;option2&quot;: &quot;value2&quot;}"></textarea>\'  # noqa: E501\n+        result2 = u\'<textarea class="pat-example1" name="example2" data-pat-example1="{&quot;option2&quot;: &quot;value2&quot;, &quot;option1&quot;: &quot;value1&quot;}"></textarea>\'  # noqa: E501\n+        self.assertIn(html, [result1, result2])\n \n     def test_set_value(self):\n         from plone.app.widgets.base import TextareaWidget\n@@ -262,7 +260,7 @@ def test_set_value(self):\n         widget = TextareaWidget(\'example1\', name="example2", value=\'example3\')\n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="example2">\'\n+            u\'<textarea class="pat-example1" name="example2">\'\n             \'example3\'\n             \'</textarea>\')\n \n@@ -271,14 +269,14 @@ def test_set_value(self):\n         widget.value = \'example4\'\n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="example2">\'\n+            u\'<textarea class="pat-example1" name="example2">\'\n             \'example4\'\n             \'</textarea>\')\n \n         del widget.value\n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="example2"></textarea>\')\n+            u\'<textarea class="pat-example1" name="example2"></textarea>\')\n \n     def test_can_not_change_element_tag(self):\n         from plone.app.widgets.base import TextareaWidget\n'

Repository: plone.app.widgets


Branch: refs/heads/master
Date: 2018-10-17T12:09:12+02:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.widgets/commit/5034c5470a0c72e3b4f16de7784875b75affa943

Update CHANGES

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e87f6d0..83c0c31 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Port to python 3.\n+  [davisagli] [pbauer] [gforcada]\n \n Bug fixes:\n \ndiff --git a/setup.py b/setup.py\nindex 7f15863..f0ed313 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -17,6 +17,8 @@\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n     keywords=\'plone widgets z3cform\',\n     author=\'Nathan Van Gheem\',\n'

Repository: plone.app.widgets


Branch: refs/heads/master
Date: 2018-10-17T12:09:55+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.widgets/commit/8e8110d9e90d043975814aaade54091c0f35e9d4

Merge pull request #186 from plone/python3

Python3

Files changed:
M CHANGES.rst
M README.rst
M develop.cfg
M plone/app/widgets/base.py
M plone/app/widgets/tests/test_base.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e87f6d0..83c0c31 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Port to python 3.\n+  [davisagli] [pbauer] [gforcada]\n \n Bug fixes:\n \ndiff --git a/README.rst b/README.rst\nindex 33d967d..3d452ee 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -85,33 +85,6 @@ All client side code (javascript/css/images) is done and tested as part of\n For any feature / bug / comment please create an issue in the `issue tracker`_.\n \n \n-Installation\n-============\n-\n-For now only tested with latest Plone 4.3::\n-\n-    [buildout]\n-    extends =\n-        http://dist.plone.org/release/4.3-latest/versions.cfg\n-        https://raw.github.com/plone/plone.app.widgets/master/versions.cfg\n-    versions = versions\n-    parts = instance\n-\n-    [instance]\n-    recipe = plone.recipe.zope2instance\n-    user = admin:admin\n-    http-address = 8080\n-    eggs =\n-        Pillow\n-        Plone\n-        plone.app.widgets[archetypes,dexterity]\n-    zcml =\n-        plone.app.widgets\n-\n-Make sure you install the "Plone Widgets" profile when creating your Plone site\n-or include ``plone.app.widgets:default`` profile in your ``metadata.xml``..\n-\n-\n .. _`Mockup`: http://plone.github.io/mockup\n .. _`issue tracker`: https://github.com/plone/mockup/issues?labels=widgets\n .. _`PLIP here`: https://dev.plone.org/ticket/13476\ndiff --git a/develop.cfg b/develop.cfg\nindex 5f32c3a..573e9e9 100644\n--- a/develop.cfg\n+++ b/develop.cfg\n@@ -42,10 +42,9 @@ interpreter = instance-python\n eggs =\n     Pillow\n     Plone\n-    plone.app.widgets[archetypes,dexterity]\n+    plone.app.widgets[dexterity]\n \n [test]\n recipe = zc.recipe.testrunner\n-eggs = plone.app.widgets[test,archetypes,dexterity]\n+eggs = plone.app.widgets[test,dexterity]\n defaults = [\'--auto-color\', \'--auto-progress\']\n-\ndiff --git a/plone/app/widgets/base.py b/plone/app/widgets/base.py\nindex d8c5d9e..6b894b5 100644\n--- a/plone/app/widgets/base.py\n+++ b/plone/app/widgets/base.py\n@@ -27,11 +27,11 @@ def _get(self):\n     def _set(self, value):\n         if value is None:\n             return\n-        if type(value) in (list, tuple):\n+        if isinstance(value, (list, tuple)):\n             value = \' \'.join(value)\n-        if type(value) in (dict, set):\n+        if isinstance(value, (dict, set)):\n             value = json.dumps(value)\n-        if type(value) is str:\n+        if isinstance(value, six.binary_type):\n             value = value.decode(\'utf8\')\n         self.el.attrib[name] = value\n \n@@ -110,7 +110,7 @@ def render(self):\n         """\n \n         self.update()\n-        return etree.tostring(self.el)\n+        return etree.tostring(self.el, encoding=six.text_type)\n \n \n class InputWidget(BaseWidget):\ndiff --git a/plone/app/widgets/tests/test_base.py b/plone/app/widgets/tests/test_base.py\nindex 6c02c37..b3594bc 100644\n--- a/plone/app/widgets/tests/test_base.py\n+++ b/plone/app/widgets/tests/test_base.py\n@@ -16,7 +16,7 @@ def test_defaults(self):\n         widget = BaseWidget(\'input\', \'example1\')\n         self.assertEqual(\n             widget.render(),\n-            \'<input class="pat-example1"/>\')\n+            u\'<input class="pat-example1"/>\')\n \n         self.assertEqual(widget.klass, \'pat-example1\')\n \n@@ -26,7 +26,7 @@ def test_different_element_tag(self):\n         widget = BaseWidget(\'select\', \'example1\')\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1"/>\')\n+            u\'<select class="pat-example1"/>\')\n \n         self.assertEqual(widget.klass, \'pat-example1\')\n \n@@ -41,11 +41,11 @@ def test_setting_patterns_options(self):\n                 \'option2\': \'value2\',\n             })\n \n-        self.assertEqual(\n-            widget.render(),\n-            \'<input class="pat-example1" data-pat-example1="{\'\n-            \'&quot;option2&quot;: &quot;value2&quot;, \'\n-            \'&quot;option1&quot;: &quot;value1&quot;}"/>\')\n+        html = widget.render()\n+        # the order of options is non-deterministic\n+        result1 = u\'<input class="pat-example1" data-pat-example1="{&quot;option1&quot;: &quot;value1&quot;, &quot;option2&quot;: &quot;value2&quot;}"/>\'  # noqa: E501\n+        result2 = u\'<input class="pat-example1" data-pat-example1="{&quot;option2&quot;: &quot;value2&quot;, &quot;option1&quot;: &quot;value1&quot;}"/>\'  # noqa: E501\n+        self.assertIn(html, [result1, result2])\n \n \n class InputWidgetTests(unittest.TestCase):\n@@ -75,7 +75,7 @@ def test_set_type_and_value(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<input class="pat-example1" type="email" \'\n+            u\'<input class="pat-example1" type="email" \'\n             \'name="example2" value="example3"/>\')\n \n         self.assertEqual(widget.type, \'email\')\n@@ -85,7 +85,7 @@ def test_set_type_and_value(self):\n         widget.value = \'example4\'\n         self.assertEqual(\n             widget.render(),\n-            \'<input class="pat-example1" type="text" \'\n+            u\'<input class="pat-example1" type="text" \'\n             \'name="example2" value="example4"/>\')\n \n         self.assertEqual(widget.type, \'text\')\n@@ -95,7 +95,7 @@ def test_set_type_and_value(self):\n         del widget.value\n         self.assertEqual(\n             widget.render(),\n-            \'<input class="pat-example1" name="example2"/>\')\n+            u\'<input class="pat-example1" name="example2"/>\')\n \n         self.assertEqual(widget.type, None)\n         self.assertEqual(widget.value, None)\n@@ -111,7 +111,7 @@ def test_defaults(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" name="example2"></select>\')\n+            u\'<select class="pat-example1" name="example2"></select>\')\n         self.assertEqual(list(widget.items), [])\n         self.assertEqual(widget.value, [])\n \n@@ -132,7 +132,7 @@ def test_set_items_and_value(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" name="example2">\'\n+            u\'<select class="pat-example1" name="example2">\'\n             \'<option value="token1">value1</option>\'\n             \'<option value="token2" selected="selected">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -144,7 +144,7 @@ def test_set_items_and_value(self):\n         widget.value = \'token1\'\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" name="example2">\'\n+            u\'<select class="pat-example1" name="example2">\'\n             \'<option value="token1" selected="selected">value1</option>\'\n             \'<option value="token2">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -156,7 +156,7 @@ def test_set_items_and_value(self):\n         del widget.value\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" name="example2">\'\n+            u\'<select class="pat-example1" name="example2">\'\n             \'<option value="token1">value1</option>\'\n             \'<option value="token2">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -185,7 +185,7 @@ def test_multiple(self):\n \n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" multiple="multiple" name="example2">\'\n+            u\'<select class="pat-example1" multiple="multiple" name="example2">\'\n             \'<option value="token1">value1</option>\'\n             \'<option value="token2" selected="selected">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -197,7 +197,7 @@ def test_multiple(self):\n         widget.value = [\'token1\', \'token2\']\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" multiple="multiple" name="example2">\'\n+            u\'<select class="pat-example1" multiple="multiple" name="example2">\'\n             \'<option value="token1" selected="selected">value1</option>\'\n             \'<option value="token2" selected="selected">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -209,7 +209,7 @@ def test_multiple(self):\n         del widget.value\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" multiple="multiple" name="example2">\'\n+            u\'<select class="pat-example1" multiple="multiple" name="example2">\'\n             \'<option value="token1">value1</option>\'\n             \'<option value="token2">value2</option>\'\n             \'<option value="token3">value3</option>\'\n@@ -218,7 +218,7 @@ def test_multiple(self):\n         del widget.items\n         self.assertEqual(\n             widget.render(),\n-            \'<select class="pat-example1" multiple="multiple" \'\n+            u\'<select class="pat-example1" multiple="multiple" \'\n             \'name="example2"></select>\')\n \n \n@@ -231,7 +231,7 @@ def test_defaults(self):\n         widget = TextareaWidget(\'example1\', name="example2")\n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="example2"></textarea>\')\n+            u\'<textarea class="pat-example1" name="example2"></textarea>\')\n \n         self.assertEqual(widget.name, \'example2\')\n         self.assertEqual(widget.klass, \'pat-example1\')\n@@ -242,19 +242,17 @@ def test_setting_patterns_options(self):\n \n         widget = TextareaWidget(\n             \'example1\',\n-            name=\'expample2\',\n+            name=\'example2\',\n             pattern_options={\n                 \'option1\': \'value1\',\n                 \'option2\': \'value2\',\n             })\n \n-        self.assertEqual(\n-            widget.render(),\n-            \'<textarea class="pat-example1" name="expample2" \'\n-            \'data-pat-example1="{\'\n-            \'&quot;option2&quot;: &quot;value2&quot;, \'\n-            \'&quot;option1&quot;: &quot;value1&quot;}">\'\n-            \'</textarea>\')\n+        html = widget.render()\n+        # the order of options is non-deterministic\n+        result1 = u\'<textarea class="pat-example1" name="example2" data-pat-example1="{&quot;option1&quot;: &quot;value1&quot;, &quot;option2&quot;: &quot;value2&quot;}"></textarea>\'  # noqa: E501\n+        result2 = u\'<textarea class="pat-example1" name="example2" data-pat-example1="{&quot;option2&quot;: &quot;value2&quot;, &quot;option1&quot;: &quot;value1&quot;}"></textarea>\'  # noqa: E501\n+        self.assertIn(html, [result1, result2])\n \n     def test_set_value(self):\n         from plone.app.widgets.base import TextareaWidget\n@@ -262,7 +260,7 @@ def test_set_value(self):\n         widget = TextareaWidget(\'example1\', name="example2", value=\'example3\')\n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="example2">\'\n+            u\'<textarea class="pat-example1" name="example2">\'\n             \'example3\'\n             \'</textarea>\')\n \n@@ -271,14 +269,14 @@ def test_set_value(self):\n         widget.value = \'example4\'\n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="example2">\'\n+            u\'<textarea class="pat-example1" name="example2">\'\n             \'example4\'\n             \'</textarea>\')\n \n         del widget.value\n         self.assertEqual(\n             widget.render(),\n-            \'<textarea class="pat-example1" name="example2"></textarea>\')\n+            u\'<textarea class="pat-example1" name="example2"></textarea>\')\n \n     def test_can_not_change_element_tag(self):\n         from plone.app.widgets.base import TextareaWidget\ndiff --git a/setup.py b/setup.py\nindex 0dba6cc..f0ed313 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -17,8 +17,10 @@\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n     ],\n-    keywords=\'plone widgets z3cform archetypes\',\n+    keywords=\'plone widgets z3cform\',\n     author=\'Nathan Van Gheem\',\n     author_email=\'vangheem@gmail.com\',\n     url=\'https://github.com/plone/plone.app.widgets\',\n@@ -42,15 +44,9 @@\n     extras_require={\n         \'test\': [\n             \'plone.app.robotframework[debug]\',\n-            \'plone.app.widgets[archetypes, dexterity]\',\n             \'plone.app.testing>=4.2.4\',  # we need ROBOT_TEST_LEVEL\n             \'mock\',\n         ],\n-        \'archetypes\': [\n-            \'DateTime\',\n-            \'Products.Archetypes\',\n-            \'archetypes.schemaextender\',\n-        ],\n         \'dexterity\': [\n             \'pytz\',\n             \'plone.app.dexterity\',\n'

