Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/f4d1378f6ef9380be07aeaf8df272baa1594158f

fix startup without ZServer

Files changed:
M plone/dexterity/browser/traversal.py
M plone/dexterity/filerepresentation.py

b'diff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex c7b93a0..b8b52e5 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -2,10 +2,10 @@\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from Acquisition.interfaces import IAcquirer\n+from plone.dexterity import bbb\n from plone.dexterity.filerepresentation import FolderDataResource\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContent\n-from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n@@ -14,6 +14,11 @@\n except ImportError:\n     from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n+if bbb.HAS_ZSERVER:\n+    from webdav.NullResource import NullResource\n+else:\n+    NullResource = bbb.NullResource\n+\n \n @adapter(IDexterityContent, IBrowserRequest)\n class DexterityPublishTraverse(DefaultPublishTraverse):\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 85daf0c..827479d 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -4,6 +4,7 @@\n from email.generator import Generator\n from email.message import Message\n from email.parser import FeedParser\n+from plone.dexterity import bbb\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n from plone.dexterity.interfaces import IDexterityContent\n@@ -13,7 +14,6 @@\n from plone.rfc822 import initializeObjectFromSchemata\n from plone.rfc822.interfaces import IPrimaryField\n from Products.CMFCore.utils import getToolByName\n-from webdav.Resource import Resource\n from zExceptions import MethodNotAllowed\n from zExceptions import Unauthorized\n from zope.component import adapter\n@@ -35,6 +35,11 @@\n from AccessControl import ClassSecurityInfo\n from Products.CMFCore import permissions\n \n+if bbb.HAS_ZSERVER:\n+    from webdav.Resource import Resource\n+else:\n+    Resource = bbb.Resource\n+\n \n class DAVResourceMixin(object):\n     """Mixin class for WebDAV resource support.\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/f356576ef274ddf766018a36e78208e58f526311

add forgotten file

Files changed:
A plone/dexterity/bbb.py

b"diff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nnew file mode 100644\nindex 0000000..3d025fa\n--- /dev/null\n+++ b/plone/dexterity/bbb.py\n@@ -0,0 +1,22 @@\n+# -*- coding: utf-8 -*-\n+import pkg_resources\n+\n+HAS_ZSERVER = True\n+try:\n+    dist = pkg_resources.get_distribution('ZServer')\n+except pkg_resources.DistributionNotFound:\n+    HAS_ZSERVER = False\n+\n+NullResource = None\n+\n+\n+class Resource(object):\n+    def dav__init(self, request, response):\n+        pass\n+\n+    def dav__validate(self, object, methodname, REQUEST):\n+        pass\n+\n+    def dav__simpleifhandler(self, request, response, method='PUT',\n+                             col=0, url=None, refresh=0):\n+        pass\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/4f81fcafa750f25bd3a604be0969107783045018

add weird fixes for creating i18n-Messages in py3

Files changed:
M plone/dexterity/content.py
M plone/dexterity/fti.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex efcf014..02b424e 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -445,7 +445,9 @@ def listCreators(self):\n         # List Dublin Core Creator elements - resource authors.\n         if self.creators is None:\n             return ()\n-        return tuple(safe_utf8(c) for c in self.creators)\n+        if six.PY2:\n+            return tuple(safe_utf8(c) for c in self.creators)\n+        return self.creators\n \n     @security.protected(permissions.View)\n     def Creator(self):\n@@ -458,7 +460,9 @@ def Subject(self):\n         # Dublin Core Subject element - resource keywords.\n         if self.subject is None:\n             return ()\n-        return tuple(safe_utf8(s) for s in self.subject)\n+        if six.PY2:\n+            return tuple(safe_utf8(s) for s in self.subject)\n+        return tuple(self.subject)\n \n     @security.protected(permissions.View)\n     def Publisher(self):\n@@ -468,7 +472,9 @@ def Publisher(self):\n     @security.protected(permissions.View)\n     def listContributors(self):\n         # Dublin Core Contributor elements - resource collaborators.\n-        return tuple(safe_utf8(c) for c in self.contributors)\n+        if six.PY2:\n+            return tuple(safe_utf8(c) for c in self.contributors)\n+        return tuple(self.contributors)\n \n     @security.protected(permissions.View)\n     def Contributors(self):\n@@ -539,7 +545,9 @@ def Language(self):\n     @security.protected(permissions.View)\n     def Rights(self):\n         # Dublin Core Rights element - resource copyright.\n-        return safe_utf8(self.rights)\n+        if six.PY2:\n+            return safe_utf8(self.rights)\n+        return self.rights\n \n     # ICatalogableDublinCore\n \ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 265a84d..615ff7f 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -22,9 +22,11 @@\n from zope.lifecycleevent import modified\n from zope.security.interfaces import IPermission\n from zope.site.hooks import getSiteManager\n+\n import logging\n import os.path\n import plone.dexterity.schema\n+import six\n \n \n @implementer(IDexterityFTIModificationDescription)\n@@ -192,25 +194,28 @@ def __init__(self, *args, **kwargs):\n \n     def Title(self):\n         if self.title and self.i18n_domain:\n-            try:\n-                return Message(self.title.decode('utf8'), self.i18n_domain)\n-            except UnicodeDecodeError:\n-                return Message(self.title.decode('latin-1'), self.i18n_domain)\n+            if six.PY2:\n+                try:\n+                    return Message(self.title.decode('utf8'), self.i18n_domain)\n+                except UnicodeDecodeError:\n+                    return Message(\n+                        self.title.decode('latin-1'), self.i18n_domain)\n+            else:\n+                return Message(self.title, self.i18n_domain)\n         else:\n             return self.title or self.getId()\n \n     def Description(self):\n         if self.description and self.i18n_domain:\n-            try:\n-                return Message(\n-                    self.description.decode('utf8'),\n-                    self.i18n_domain\n-                )\n-            except UnicodeDecodeError:\n-                return Message(\n-                    self.description.decode('latin-1'),\n-                    self.i18n_domain\n-                )\n+            if six.PY2:\n+                try:\n+                    return Message(\n+                        self.description.decode('utf8'), self.i18n_domain)\n+                except UnicodeDecodeError:\n+                    return Message(\n+                        self.description.decode('latin-1'), self.i18n_domain)\n+            else:\n+                return Message(self.description, self.i18n_domain)\n         else:\n             return self.description\n \n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/e862333eb5dbf8a6503b27ea7c85c8f968f97c95

prevent RuntimeError: dictionary changed size during iteration

Files changed:
M plone/dexterity/utils.py

b"diff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 3505c4a..0a402fa 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -2,6 +2,7 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n+from copy import copy\n from DateTime import DateTime\n from plone.app.uuid.utils import uuidToObject\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -128,7 +129,8 @@ def createContent(portal_type, **kw):\n     # existing type, but wants a unique portal_type!\n     content.portal_type = fti.getId()\n     schemas = iterSchemataForType(portal_type)\n-    fields = dict(kw)  # create a copy\n+    fields = kw\n+    fields_copy = copy(kw)\n \n     for schema in schemas:\n         # schema.names() doesn't return attributes from superclasses in derived\n@@ -136,7 +138,7 @@ def createContent(portal_type, **kw):\n         # keywords arguments and set it, if the behavior has the questioned\n         # attribute.\n         behavior = schema(content)\n-        for name, value in fields.items():\n+        for name, value in fields_copy.items():\n             try:\n                 # hasattr swallows exceptions.\n                 getattr(behavior, name)\n@@ -144,7 +146,10 @@ def createContent(portal_type, **kw):\n                 # fieldname not available\n                 continue\n             setattr(behavior, name, value)\n-            del fields[name]\n+            try:\n+                del fields[name]\n+            except KeyError:\n+                pass\n \n     for (key, value) in fields.items():\n         setattr(content, key, value)\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/60eae603dca45a943f3fb4907f37e9d4e12a66f7

fix safe_unicode

Files changed:
M plone/dexterity/utils.py

b"diff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 0a402fa..ef8e41b 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -211,7 +211,7 @@ def safe_utf8(st):\n \n \n def safe_unicode(st):\n-    if isinstance(st, str):\n+    if isinstance(st, six.binary_type):\n         st = st.decode('utf8')\n     return st\n \n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/c04bcc46ae9048a91725e0d1822a56fcd57906bb

Other Python 3 compatibility fixes

Files changed:
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 1099780..09b97b3 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.interfaces import ISiteRoot\n from plone.alterego import dynamic\n from plone.alterego.interfaces import IDynamicObjectFactory\n from plone.behavior.interfaces import IBehavior\n@@ -11,6 +10,7 @@\n from plone.supermodel.parser import ISchemaPolicy\n from plone.supermodel.utils import syncSchema\n from plone.synchronize import synchronized\n+from Products.CMFCore.interfaces import ISiteRoot\n from threading import RLock\n from zope.component import adapter\n from zope.component import getAllUtilitiesRegisteredFor\n@@ -23,8 +23,10 @@\n \n import functools\n import logging\n+import six\n import types\n \n+\n log = logging.getLogger(__name__)\n \n # Dynamic modules\n@@ -130,6 +132,8 @@ def behavior_registrations(self, fti):\n             return tuple()\n         registrations = []\n         for behavior_name in fti.behaviors:\n+            if not isinstance(behavior_name, six.strin_types):\n+                behavior_name = behavior_name.decode()\n             registration = queryUtility(IBehavior, name=behavior_name)\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/19f3bb0c7d7dbc31763cf48173910f376dcc6ba4

changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d20d9c8..bb19f31 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,11 +11,13 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- ZServer is now optional\n+  [pbauer]\n \n Bug fixes:\n \n-- *add item here*\n+- Other Python 3 compatibility fixes\n+  [ale-rt, pbauer]\n \n \n 2.6.0 (2018-04-03)\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/9a2ce47637b965b6f2fa76f1b4ff34222ea053ab

Fix typo

Files changed:
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 09b97b3..9ac9746 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -132,7 +132,7 @@ def behavior_registrations(self, fti):\n             return tuple()\n         registrations = []\n         for behavior_name in fti.behaviors:\n-            if not isinstance(behavior_name, six.strin_types):\n+            if not isinstance(behavior_name, six.string_types):\n                 behavior_name = behavior_name.decode()\n             registration = queryUtility(IBehavior, name=behavior_name)\n             if registration is None:\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/1e0699034b04170b4dca3e5cc11a3a45cb9c00e2

use ulines in py3

Files changed:
M plone/dexterity/fti.py
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 615ff7f..8b059ce 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -44,6 +44,10 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n \n     meta_type = "Dexterity FTI"\n \n+    behaviors_type = \'ulines\'\n+    if six.PY2:\n+        behaviors_type = \'lines\'\n+\n     _properties = base.DynamicViewTypeInformation._properties + (\n         {\n             \'id\': \'add_permission\',\n@@ -64,7 +68,7 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n         },\n         {\n             \'id\': \'behaviors\',\n-            \'type\': \'lines\',\n+            \'type\': behaviors_type,\n             \'mode\': \'w\',\n             \'label\': \'Behaviors\',\n             \'description\': \'Names of enabled behaviors type\'\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 9ac9746..90cf48a 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -132,8 +132,6 @@ def behavior_registrations(self, fti):\n             return tuple()\n         registrations = []\n         for behavior_name in fti.behaviors:\n-            if not isinstance(behavior_name, six.string_types):\n-                behavior_name = behavior_name.decode()\n             registration = queryUtility(IBehavior, name=behavior_name)\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/2ba401e9f5317600e811818a3cbb21b4286057a9

obj.Title() and obj.Description() should be text in py3

Files changed:
M plone/dexterity/content.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 02b424e..1863266 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -413,7 +413,7 @@ def setModificationDate(self, modification_date=None):\n     @security.protected(permissions.View)\n     def Title(self):\n         # this is a CMF accessor, so should return utf8-encoded\n-        if isinstance(self.title, six.text_type):\n+        if six.PY2 and isinstance(self.title, six.text_type):\n             return self.title.encode('utf-8')\n         return self.title or ''\n \n@@ -428,7 +428,7 @@ def Description(self):\n         value = value.replace('\\r\\n', ' ').replace('\\r', ' ').replace('\\n', ' ')  # noqa\n \n         # this is a CMF accessor, so should return utf8-encoded\n-        if isinstance(value, six.text_type):\n+        if six.PY2 and isinstance(value, six.text_type):\n             value = value.encode('utf-8')\n \n         return value\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/84ddae901c7fd6dd527df9edde1ddd77ac003467

fix import in py3

Files changed:
M plone/dexterity/tests/test_webdav.py

b'diff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 1a9af7b..04c4950 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from .case import Dummy\n from .case import MockTestCase\n-from email.Message import Message\n+from email.message import Message\n from mock import Mock\n from OFS.Folder import Folder\n from OFS.SimpleItem import SimpleItem\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/c3ffde5cf3f7ae466223900f1415539bc7ea136c

skip test_webdav without ZServer

Files changed:
M plone/dexterity/tests/case.py
M plone/dexterity/tests/test_webdav.py

b'diff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex 2fd0b5a..c82dd02 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,12 +1,20 @@\n # -*- coding: utf-8 -*-\n from mock import Mock\n import gc\n+import pkg_resources\n import six\n import unittest\n import zope.component\n import zope.component.testing\n \n \n+HAS_ZSERVER = True\n+try:\n+    dist = pkg_resources.get_distribution(\'ZServer\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_ZSERVER = False\n+\n+\n class MockTestCase(unittest.TestCase):\n     """Base class for tests using mocks.\n     """\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 04c4950..c4ba5cb 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,1344 +1,1354 @@\n # -*- coding: utf-8 -*-\n-from .case import Dummy\n+from .case import HAS_ZSERVER\n from .case import MockTestCase\n-from email.message import Message\n-from mock import Mock\n-from OFS.Folder import Folder\n-from OFS.SimpleItem import SimpleItem\n-from plone.autoform.interfaces import IFormFieldProvider\n-from plone.behavior.interfaces import IBehaviorAssignable\n-from plone.dexterity.browser.traversal import DexterityPublishTraverse\n-from plone.dexterity.content import Container\n-from plone.dexterity.content import Item\n-from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n-from plone.dexterity.filerepresentation import DefaultFileFactory\n-from plone.dexterity.filerepresentation import DefaultReadFile\n-from plone.dexterity.filerepresentation import DefaultWriteFile\n-from plone.dexterity.filerepresentation import FolderDataResource\n-from plone.dexterity.fti import DexterityFTI\n-from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n-from plone.dexterity.interfaces import IDexterityFTI\n-from plone.dexterity.schema import SCHEMA_CACHE\n-from plone.rfc822.interfaces import IPrimaryField\n-from six import StringIO\n-from webdav.NullResource import NullResource\n-from zExceptions import Forbidden\n-from zExceptions import MethodNotAllowed\n-from zExceptions import Unauthorized\n-from zope import schema\n-from zope.component.interfaces import IFactory\n-from zope.filerepresentation.interfaces import IDirectoryFactory\n-from zope.filerepresentation.interfaces import IFileFactory\n-from zope.filerepresentation.interfaces import IRawReadFile\n-from zope.filerepresentation.interfaces import IRawWriteFile\n-from zope.interface import alsoProvides\n-from zope.interface import implementer\n-from zope.interface import Interface\n-from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n-from zope.publisher.browser import TestRequest\n-from zope.size.interfaces import ISized\n-from ZPublisher.HTTPResponse import HTTPResponse\n-from ZPublisher.Iterators import IStreamIterator\n-\n-import re\n-\n-\n-class ITestBehavior(Interface):\n-    foo = schema.Int()\n-    bar = schema.Bytes()\n-alsoProvides(ITestBehavior, IFormFieldProvider)\n \n+if HAS_ZSERVER:\n \n-class DAVTestRequest(TestRequest):\n-\n-    get_header = TestRequest.getHeader\n-\n-    def _createResponse(self):\n-        return HTTPResponse()\n-\n-\n-class ItemDummy(Dummy):\n-    """ Dummy objects with title getter and setter """\n-\n-    title = \'\'\n-\n-    def Title(self):\n-        return self.title\n-\n-    def setTitle(self, title):\n-        self.title = title\n-\n-    def getId(self):\n-        return self.__dict__.get(\'id\', \'\')\n-\n-\n-class TestWebZope2DAVAPI(MockTestCase):\n-\n-    def test_get_size_no_adapter(self):\n-        item = Item(\'test\')\n-\n-        self.assertEqual(0, item.get_size())\n-\n-    def test_get_size_wrong_adapter(self):\n-        class SizedAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n-\n-            def sizeForSorting(self):\n-                return \'lines\', 10\n-\n-            def sizeForDisplay(self):\n-                \'10 lines\'\n-        self.mock_adapter(SizedAdapter, ISized, (Item,))\n-        item = Item(\'test\')\n-\n-        self.assertEqual(0, item.get_size())\n-\n-    def test_get_size_right_adapter(self):\n-        class SizedAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n+    from .case import Dummy\n+    from email.message import Message\n+    from mock import Mock\n+    from OFS.Folder import Folder\n+    from OFS.SimpleItem import SimpleItem\n+    from plone.autoform.interfaces import IFormFieldProvider\n+    from plone.behavior.interfaces import IBehaviorAssignable\n+    from plone.dexterity.browser.traversal import DexterityPublishTraverse\n+    from plone.dexterity.content import Container\n+    from plone.dexterity.content import Item\n+    from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n+    from plone.dexterity.filerepresentation import DefaultFileFactory\n+    from plone.dexterity.filerepresentation import DefaultReadFile\n+    from plone.dexterity.filerepresentation import DefaultWriteFile\n+    from plone.dexterity.filerepresentation import FolderDataResource\n+    from plone.dexterity.fti import DexterityFTI\n+    from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n+    from plone.dexterity.interfaces import IDexterityFTI\n+    from plone.dexterity.schema import SCHEMA_CACHE\n+    from plone.rfc822.interfaces import IPrimaryField\n+    from six import StringIO\n+    from webdav.NullResource import NullResource\n+    from zExceptions import Forbidden\n+    from zExceptions import MethodNotAllowed\n+    from zExceptions import Unauthorized\n+    from zope import schema\n+    from zope.component.interfaces import IFactory\n+    from zope.filerepresentation.interfaces import IDirectoryFactory\n+    from zope.filerepresentation.interfaces import IFileFactory\n+    from zope.filerepresentation.interfaces import IRawReadFile\n+    from zope.filerepresentation.interfaces import IRawWriteFile\n+    from zope.interface import alsoProvides\n+    from zope.interface import implementer\n+    from zope.interface import Interface\n+    from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n+    from zope.publisher.browser import TestRequest\n+    from zope.size.interfaces import ISized\n+    from ZPublisher.HTTPResponse import HTTPResponse\n+    from ZPublisher.Iterators import IStreamIterator\n \n-            def sizeForSorting(self):\n-                return \'bytes\', 10\n+    import re\n \n-            def sizeForDisplay(self):\n-                \'10 bytes\'\n-        self.mock_adapter(SizedAdapter, ISized, (Item,))\n-        item = Item(\'test\')\n \n-        self.assertEqual(10, item.get_size())\n+    class ITestBehavior(Interface):\n+        foo = schema.Int()\n+        bar = schema.Bytes()\n+    alsoProvides(ITestBehavior, IFormFieldProvider)\n \n-    def test_content_type_no_adapter(self):\n-        item = Item(\'test\')\n \n-        self.assertEqual(None, item.content_type())\n-        self.assertEqual(None, item.Format())\n+    class DAVTestRequest(TestRequest):\n \n-    def test_content_type_simple_adapter(self):\n-        class ReadFileAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n-            mimeType = \'text/foo\'\n-            # others omitted\n-        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n-        item = Item(\'test\')\n+        get_header = TestRequest.getHeader\n \n-        self.assertEqual(\'text/foo\', item.content_type())\n-        self.assertEqual(\'text/foo\', item.Format())\n+        def _createResponse(self):\n+            return HTTPResponse()\n \n-    def test_get_no_adapter(self):\n-        item = Item(\'test\')\n \n-        self.assertEqual(\'\', item.manage_DAVget())\n+    class ItemDummy(Dummy):\n+        """ Dummy objects with title getter and setter """\n+\n+        title = \'\'\n+\n+        def Title(self):\n+            return self.title\n+\n+        def setTitle(self, title):\n+            self.title = title\n+\n+        def getId(self):\n+            return self.__dict__.get(\'id\', \'\')\n \n-    def test_get_simple_adapter(self):\n-        class ReadFileAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n-            mimeType = \'text/foo\'\n-            encoding = \'latin1\'\n \n-            def size(self):\n-                return 10\n+    class TestWebZope2DAVAPI(MockTestCase):\n \n-            def read(self, size=None):\n-                return \'1234567890\'\n-        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+        def test_get_size_no_adapter(self):\n+            item = Item(\'test\')\n \n-        request = DAVTestRequest()\n+            self.assertEqual(0, item.get_size())\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+        def test_get_size_wrong_adapter(self):\n+            class SizedAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-        self.assertEqual(\'1234567890\', item.manage_DAVget())\n-        self.assertEqual(\n-            \'text/foo; charset="latin1"\',\n-            request.response.getHeader(\'Content-Type\')\n-        )\n-        self.assertEqual(\'10\', request.response.getHeader(\'Content-Length\'))\n+                def sizeForSorting(self):\n+                    return \'lines\', 10\n \n-    def test_get_minimal_adapter(self):\n-        class ReadFileAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n-            mimeType = None\n-            encoding = None\n+                def sizeForDisplay(self):\n+                    \'10 lines\'\n+            self.mock_adapter(SizedAdapter, ISized, (Item,))\n+            item = Item(\'test\')\n \n-            def size(self):\n-                return None\n+            self.assertEqual(0, item.get_size())\n \n-            def read(self, size=None):\n-                return \'1234567890\'\n-        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+        def test_get_size_right_adapter(self):\n+            class SizedAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-        request = DAVTestRequest()\n+                def sizeForSorting(self):\n+                    return \'bytes\', 10\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+                def sizeForDisplay(self):\n+                    \'10 bytes\'\n+            self.mock_adapter(SizedAdapter, ISized, (Item,))\n+            item = Item(\'test\')\n \n-        self.assertEqual(\'1234567890\', item.manage_DAVget())\n-        self.assertEqual(None, request.response.getHeader(\'Content-Type\'))\n-        self.assertEqual(None, request.response.getHeader(\'Content-Length\'))\n+            self.assertEqual(10, item.get_size())\n \n-    def test_get_streaming(self):\n-        @implementer(IStreamIterator)\n-        class ReadFileAdapter(object):\n+        def test_content_type_no_adapter(self):\n+            item = Item(\'test\')\n \n-            def __init__(self, context):\n-                self.context = context\n-            mimeType = None\n-            encoding = None\n+            self.assertEqual(None, item.content_type())\n+            self.assertEqual(None, item.Format())\n \n-            def size(self):\n-                return 10\n+        def test_content_type_simple_adapter(self):\n+            class ReadFileAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                mimeType = \'text/foo\'\n+                # others omitted\n+            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+            item = Item(\'test\')\n \n-            def read(self, size=None):\n-                return \'1234567890\'\n+            self.assertEqual(\'text/foo\', item.content_type())\n+            self.assertEqual(\'text/foo\', item.Format())\n \n-        adapterInstance = ReadFileAdapter(None)\n+        def test_get_no_adapter(self):\n+            item = Item(\'test\')\n \n-        def factory(context):\n-            return adapterInstance\n-        self.mock_adapter(factory, IRawReadFile, (Item,))\n+            self.assertEqual(\'\', item.manage_DAVget())\n \n-        request = DAVTestRequest()\n+        def test_get_simple_adapter(self):\n+            class ReadFileAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                mimeType = \'text/foo\'\n+                encoding = \'latin1\'\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+                def size(self):\n+                    return 10\n \n-        self.assertEqual(adapterInstance, item.manage_DAVget())\n+                def read(self, size=None):\n+                    return \'1234567890\'\n+            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-    def test_put_no_adapter(self):\n-        request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'\')})\n+            request = DAVTestRequest()\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        self.assertRaises(MethodNotAllowed, item.PUT)\n+            self.assertEqual(\'1234567890\', item.manage_DAVget())\n+            self.assertEqual(\n+                \'text/foo; charset="latin1"\',\n+                request.response.getHeader(\'Content-Type\')\n+            )\n+            self.assertEqual(\'10\', request.response.getHeader(\'Content-Length\'))\n \n-    def test_put_no_body(self):\n-        request = DAVTestRequest()\n+        def test_get_minimal_adapter(self):\n+            class ReadFileAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                mimeType = None\n+                encoding = None\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+                def size(self):\n+                    return None\n \n-        self.assertRaises(MethodNotAllowed, item.PUT)\n+                def read(self, size=None):\n+                    return \'1234567890\'\n+            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-    def test_put_no_content_type_header(self):\n-        class WriteFile(object):\n-            def __init__(self, context):\n-                self.context = context\n-                self._written = \'\'\n-                self._closed = False\n-            mimeType = None\n-            encoding = None\n+            request = DAVTestRequest()\n \n-            def write(self, data):\n-                self._written += data\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-            def close(self):\n-                self._closed = True\n+            self.assertEqual(\'1234567890\', item.manage_DAVget())\n+            self.assertEqual(None, request.response.getHeader(\'Content-Type\'))\n+            self.assertEqual(None, request.response.getHeader(\'Content-Length\'))\n \n-        adapterInstance = WriteFile(None)\n+        def test_get_streaming(self):\n+            @implementer(IStreamIterator)\n+            class ReadFileAdapter(object):\n \n-        def factory(context):\n-            return adapterInstance\n+                def __init__(self, context):\n+                    self.context = context\n+                mimeType = None\n+                encoding = None\n \n-        self.mock_adapter(factory, IRawWriteFile, (Item,))\n+                def size(self):\n+                    return 10\n \n-        request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'data\')})\n+                def read(self, size=None):\n+                    return \'1234567890\'\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+            adapterInstance = ReadFileAdapter(None)\n \n-        item.PUT()\n-        self.assertEqual(None, adapterInstance.mimeType)\n-        self.assertEqual(None, adapterInstance.encoding)\n-        self.assertEqual(\'data\', adapterInstance._written)\n-        self.assertEqual(True, adapterInstance._closed)\n+            def factory(context):\n+                return adapterInstance\n+            self.mock_adapter(factory, IRawReadFile, (Item,))\n \n-    def test_put_with_content_type_header_no_charset(self):\n-        class WriteFile(object):\n-            def __init__(self, context):\n-                self.context = context\n-                self._written = \'\'\n-                self._closed = False\n-            mimeType = None\n-            encoding = None\n+            request = DAVTestRequest()\n \n-            def write(self, data):\n-                self._written += data\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-            def close(self):\n-                self._closed = True\n+            self.assertEqual(adapterInstance, item.manage_DAVget())\n \n-        adapterInstance = WriteFile(None)\n+        def test_put_no_adapter(self):\n+            request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'\')})\n \n-        def factory(context):\n-            return adapterInstance\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        events = []\n+            self.assertRaises(MethodNotAllowed, item.PUT)\n \n-        def handler(event):\n-            events.append(event)\n+        def test_put_no_body(self):\n+            request = DAVTestRequest()\n \n-        self.mock_adapter(factory, IRawWriteFile, (Item,))\n-        self.mock_handler(handler, (IObjectModifiedEvent,))\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        request = DAVTestRequest(\n-            environ={\n-                \'BODYFILE\': StringIO(\'data\'),\n-                \'HTTP_CONTENT_TYPE\': \'text/foo\'\n-            }\n-        )\n+            self.assertRaises(MethodNotAllowed, item.PUT)\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+        def test_put_no_content_type_header(self):\n+            class WriteFile(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                    self._written = \'\'\n+                    self._closed = False\n+                mimeType = None\n+                encoding = None\n \n-        item.PUT()\n-        self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n-        self.assertEqual(None, adapterInstance.encoding)\n-        self.assertEqual(\'data\', adapterInstance._written)\n-        self.assertEqual(True, adapterInstance._closed)\n-        self.assertEqual(1, len(events))\n+                def write(self, data):\n+                    self._written += data\n \n-    def test_put_with_content_type_header_and_charset(self):\n-        class WriteFile(object):\n-            def __init__(self, context):\n-                self.context = context\n-                self._written = \'\'\n-                self._closed = False\n-            mimeType = None\n-            encoding = None\n+                def close(self):\n+                    self._closed = True\n \n-            def write(self, data):\n-                self._written += data\n+            adapterInstance = WriteFile(None)\n \n-            def close(self):\n-                self._closed = True\n+            def factory(context):\n+                return adapterInstance\n \n-        adapterInstance = WriteFile(None)\n+            self.mock_adapter(factory, IRawWriteFile, (Item,))\n \n-        def factory(context):\n-            return adapterInstance\n+            request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'data\')})\n \n-        events = []\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        def handler(event):\n-            events.append(event)\n+            item.PUT()\n+            self.assertEqual(None, adapterInstance.mimeType)\n+            self.assertEqual(None, adapterInstance.encoding)\n+            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual(True, adapterInstance._closed)\n \n-        self.mock_adapter(factory, IRawWriteFile, (Item,))\n-        self.mock_handler(handler, (IObjectModifiedEvent,))\n+        def test_put_with_content_type_header_no_charset(self):\n+            class WriteFile(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                    self._written = \'\'\n+                    self._closed = False\n+                mimeType = None\n+                encoding = None\n \n-        request = DAVTestRequest(\n-            environ={\n-                \'BODYFILE\': StringIO(\'data\'),\n-                \'HTTP_CONTENT_TYPE\': \'text/foo; charset="latin1"\'\n-            }\n-        )\n+                def write(self, data):\n+                    self._written += data\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+                def close(self):\n+                    self._closed = True\n \n-        item.PUT()\n-        self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n-        self.assertEqual(\'latin1\', adapterInstance.encoding)\n-        self.assertEqual(\'data\', adapterInstance._written)\n-        self.assertEqual(True, adapterInstance._closed)\n-        self.assertEqual(1, len(events))\n+            adapterInstance = WriteFile(None)\n \n-    def test_mkcol_no_adapter(self):\n-        container = Container(\'container\')\n-        self.assertRaises(MethodNotAllowed, container.MKCOL_handler, \'test\')\n+            def factory(context):\n+                return adapterInstance\n \n-    def test_mkcol_simple_adapter(self):\n-        created = []\n+            events = []\n \n-        class DirectoryFactory(object):\n-            def __init__(self, context):\n-                self.context = context\n+            def handler(event):\n+                events.append(event)\n \n-            def __call__(self, id):\n-                created.append(id)\n-        self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n+            self.mock_adapter(factory, IRawWriteFile, (Item,))\n+            self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-        container = Container(\'container\')\n-        container.MKCOL_handler(\'test\')\n-        self.assertEqual([\'test\'], created)\n+            request = DAVTestRequest(\n+                environ={\n+                    \'BODYFILE\': StringIO(\'data\'),\n+                    \'HTTP_CONTENT_TYPE\': \'text/foo\'\n+                }\n+            )\n \n-    def test_put_factory_no_adapter(self):\n-        container = Container(\'container\')\n-        self.assertEqual(\n-            None,\n-            container.PUT_factory(\'test\', \'text/foo\', \'body\')\n-        )\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-    def test_put_factory_simple_adapter(self):\n-        instance = object()\n+            item.PUT()\n+            self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n+            self.assertEqual(None, adapterInstance.encoding)\n+            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual(True, adapterInstance._closed)\n+            self.assertEqual(1, len(events))\n \n-        class FileFactory(object):\n-            def __init__(self, context):\n-                self.context = context\n+        def test_put_with_content_type_header_and_charset(self):\n+            class WriteFile(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                    self._written = \'\'\n+                    self._closed = False\n+                mimeType = None\n+                encoding = None\n \n-            def __call__(self, name, contentType, body):\n-                return instance\n-        self.mock_adapter(FileFactory, IFileFactory, (Container,))\n-        container = Container(\'container\')\n-        self.assertEqual(\n-            instance,\n-            container.PUT_factory(\'test\', \'text/foo\', \'body\')\n-        )\n+                def write(self, data):\n+                    self._written += data\n \n-    def test_list_without_items(self):\n+                def close(self):\n+                    self._closed = True\n \n-        class DummyContainer(Container):\n+            adapterInstance = WriteFile(None)\n \n-            def listFolderContents(self, filter=None):\n-                return []\n+            def factory(context):\n+                return adapterInstance\n \n-        container = DummyContainer(\'container\')\n+            events = []\n \n-        objects = container.listDAVObjects()\n-        self.assertEqual(1, len(objects))\n-        self.assertTrue(isinstance(objects[0], FolderDataResource))\n-        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-        self.assertEqual(container, objects[0].__parent__)\n+            def handler(event):\n+                events.append(event)\n \n-    def test_list_with_items(self):\n+            self.mock_adapter(factory, IRawWriteFile, (Item,))\n+            self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-        class DummyContainer(Container):\n+            request = DAVTestRequest(\n+                environ={\n+                    \'BODYFILE\': StringIO(\'data\'),\n+                    \'HTTP_CONTENT_TYPE\': \'text/foo; charset="latin1"\'\n+                }\n+            )\n \n-            def listFolderContents(self, filter=None):\n-                return [Item(\'foo\')]\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        container = DummyContainer(\'container\')\n+            item.PUT()\n+            self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n+            self.assertEqual(\'latin1\', adapterInstance.encoding)\n+            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual(True, adapterInstance._closed)\n+            self.assertEqual(1, len(events))\n \n-        objects = container.listDAVObjects()\n-        self.assertEqual(2, len(objects))\n-        self.assertTrue(isinstance(objects[0], FolderDataResource))\n-        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-        self.assertEqual(container, objects[0].__parent__)\n-        self.assertEqual(\'foo\', objects[1].getId())\n+        def test_mkcol_no_adapter(self):\n+            container = Container(\'container\')\n+            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, \'test\')\n \n+        def test_mkcol_simple_adapter(self):\n+            created = []\n \n-class TestFolderDataResource(MockTestCase):\n+            class DirectoryFactory(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-    def test_getId(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container)\n+                def __call__(self, id):\n+                    created.append(id)\n+            self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n \n-        self.assertEqual(\'fdata\', r.getId())\n-        self.assertEqual(container, r.__parent__)\n+            container = Container(\'container\')\n+            container.MKCOL_handler(\'test\')\n+            self.assertEqual([\'test\'], created)\n \n-    def test_HEAD(self):\n+        def test_put_factory_no_adapter(self):\n+            container = Container(\'container\')\n+            self.assertEqual(\n+                None,\n+                container.PUT_factory(\'test\', \'text/foo\', \'body\')\n+            )\n \n-        class TestContainer(Container):\n+        def test_put_factory_simple_adapter(self):\n+            instance = object()\n \n-            def get_size(self):\n-                return 10\n+            class FileFactory(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-            def content_type(self):\n-                return \'text/foo\'\n+                def __call__(self, name, contentType, body):\n+                    return instance\n+            self.mock_adapter(FileFactory, IFileFactory, (Container,))\n+            container = Container(\'container\')\n+            self.assertEqual(\n+                instance,\n+                container.PUT_factory(\'test\', \'text/foo\', \'body\')\n+            )\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+        def test_list_without_items(self):\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n-\n-        self.assertEqual(response, r.HEAD(request, request.response))\n-        self.assertEqual(200, response.getStatus())\n-        self.assertEqual(\n-            \'close\',\n-            response.getHeader(\'Connection\', literal=True)\n-        )\n-        self.assertTrue(\n-            response.getHeader(\'Content-Type\').startswith(\'text/foo\'))\n-        self.assertEqual(\'10\', response.getHeader(\'Content-Length\'))\n-\n-    def test_OPTIONS(self):\n-        class TestContainer(Container):\n-\n-            def get_size(self):\n-                return 10\n-\n-            def content_type(self):\n-                return \'text/foo\'\n-\n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n-\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n-\n-        self.assertEqual(response, r.OPTIONS(request, request.response))\n-        self.assertEqual(\n-            \'close\',\n-            response.getHeader(\'Connection\', literal=True)\n-        )\n-        self.assertEqual(\n-            \'GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, \'\n-            \'PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK\',\n-            response.getHeader(\'Allow\')\n-        )\n-\n-    def test_TRACE(self):\n-        class TestContainer(Container):\n-\n-            def get_size(self):\n-                return 10\n-\n-            def content_type(self):\n-                return \'text/foo\'\n-\n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n-\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-\n-        self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n-\n-    def test_PROPFIND(self):\n-        class TestContainer(Container):\n-\n-            def get_size(self):\n-                return 10\n-\n-            def content_type(self):\n-                return \'text/foo\'\n-\n-        container = TestContainer(\'container\')\n-        container.manage_changeProperties(title="Container")\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n-\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n-\n-        self.assertEqual(response, r.PROPFIND(request, response))\n-\n-        self.assertEqual(\n-            \'close\',\n-            response.getHeader(\'connection\', literal=True)\n-        )\n-        self.assertEqual(\n-            \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n-        )\n-        self.assertEqual(207, response.getStatus())\n-\n-        body = """\\\n-<?xml version="1.0" encoding="utf-8"?>\n-<d:multistatus xmlns:d="DAV:">\n-<d:response>\n-<d:href>/site/container</d:href>\n-<d:propstat xmlns:n="http://www.zope.org/propsets/default">\n-  <d:prop>\n-  <n:title>Container</n:title>\n-  </d:prop>\n-  <d:status>HTTP/1.1 200 OK</d:status>\n-</d:propstat>\n-<d:propstat xmlns:n="DAV:">\n-  <d:prop>\n-  <n:creationdate>1970-01-01T12:00:00Z</n:creationdate>\n-  <n:displayname>Container</n:displayname>\n-  <n:resourcetype></n:resourcetype>\n-  <n:getcontenttype>text/foo</n:getcontenttype>\n-  <n:getcontentlength>10</n:getcontentlength>\n-  <n:source></n:source>\n-  <n:supportedlock>\n-  <n:lockentry>\n-  <d:lockscope><d:exclusive/></d:lockscope>\n-  <d:locktype><d:write/></d:locktype>\n-  </n:lockentry>\n-  </n:supportedlock>\n-  <n:lockdiscovery>\n-\n-</n:lockdiscovery>\n-  <n:getlastmodified>...</n:getlastmodified>\n-  </d:prop>\n-  <d:status>HTTP/1.1 200 OK</d:status>\n-</d:propstat>\n-</d:response>\n-</d:multistatus>\n-"""\n-\n-        result = response.getBody()\n-        result = re.sub(\n-            r\'<n:getlastmodified>.+</n:getlastmodified>\',\n-            \'<n:getlastmodified>...</n:getlastmodified>\',\n-            result\n-        )\n-\n-        self.assertEqual(result.strip(), body.strip())\n-\n-    def test_PROPPATCH(self):\n-        class TestContainer(Container):\n-\n-            def get_size(self):\n-                return 10\n-\n-            def content_type(self):\n-                return \'text/foo\'\n-\n-        container = TestContainer(\'container\')\n-        container.manage_changeProperties(title="Container")\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n-\n-        requestBody = """\\\n-<?xml version="1.0" encoding="utf-8" ?>\n-<D:propertyupdate xmlns:D="DAV:"\n-                  xmlns:n="http://www.zope.org/propsets/default">\n-    <D:set>\n-        <D:prop>\n-            <n:title>New title</n:title>\n-          </D:prop>\n-     </D:set>\n-</D:propertyupdate>\n-"""\n-\n-        request = DAVTestRequest(\n-            environ={\n-                \'URL\': \'http://example.org/site/container\',\n-                \'BODY\': requestBody\n-            }\n-        )\n-        response = request.response\n-\n-        self.assertEqual(response, r.PROPPATCH(request, response))\n-\n-        self.assertEqual(\'New title\', container.getProperty(\'title\'))\n-\n-        self.assertEqual(\n-            \'close\', response.getHeader(\'connection\', literal=True)\n-        )\n-        self.assertEqual(\n-            \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n-        )\n-        self.assertEqual(207, response.getStatus())\n-\n-        body = """\\\n-<?xml version="1.0" encoding="utf-8"?>\n-<d:multistatus xmlns:d="DAV:">\n-<d:response>\n-<d:href>http%3A//example.org/site/container</d:href>\n-<d:propstat xmlns:n="http://www.zope.org/propsets/default">\n-  <d:prop>\n-  <n:title/>\n-  </d:prop>\n-  <d:status>HTTP/1.1 200 OK</d:status>\n-</d:propstat>\n-<d:responsedescription>\n-The operation succeded.\n-</d:responsedescription>\n-</d:response>\n-</d:multistatus>\n-"""\n-\n-        result = response.getBody()\n-        self.assertEqual(body.strip(), result.strip())\n-\n-    def test_LOCK(self):\n-        # Too much WebDAV magic - just test that it delegates correctly\n-        class TestContainer(Container):\n-\n-            def LOCK(self, request, response):\n-                self._locked = (request, response,)\n-                return response\n-\n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n-\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n-\n-        self.assertEqual(response, r.LOCK(request, response))\n-        self.assertEqual((request, response), container._locked)\n-\n-    def test_UNLOCK(self):\n-        # Too much WebDAV magic - just test that it delegates correctly\n-        class TestContainer(Container):\n-\n-            def UNLOCK(self, request, response):\n-                self._unlocked = (request, response,)\n-                return response\n-\n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            class DummyContainer(Container):\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+                def listFolderContents(self, filter=None):\n+                    return []\n \n-        self.assertEqual(response, r.UNLOCK(request, response))\n-        self.assertEqual((request, response), container._unlocked)\n+            container = DummyContainer(\'container\')\n \n-    def test_PUT(self):\n-        class TestContainer(Container):\n+            objects = container.listDAVObjects()\n+            self.assertEqual(1, len(objects))\n+            self.assertTrue(isinstance(objects[0], FolderDataResource))\n+            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+            self.assertEqual(container, objects[0].__parent__)\n \n-            def PUT(self, request, response):\n-                self._put = (request, response,)\n-                return response\n+        def test_list_with_items(self):\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            class DummyContainer(Container):\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+                def listFolderContents(self, filter=None):\n+                    return [Item(\'foo\')]\n \n-        self.assertEqual(response, r.PUT(request, response))\n-        self.assertEqual((request, response), container._put)\n+            container = DummyContainer(\'container\')\n \n-    def test_MKCOL(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            objects = container.listDAVObjects()\n+            self.assertEqual(2, len(objects))\n+            self.assertTrue(isinstance(objects[0], FolderDataResource))\n+            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+            self.assertEqual(container, objects[0].__parent__)\n+            self.assertEqual(\'foo\', objects[1].getId())\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n \n-        self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n+    class TestFolderDataResource(MockTestCase):\n \n-    def test_DELETE(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+        def test_getId(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+            self.assertEqual(\'fdata\', r.getId())\n+            self.assertEqual(container, r.__parent__)\n \n-        self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n+        def test_HEAD(self):\n \n-    def test_COPY(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            class TestContainer(Container):\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+                def get_size(self):\n+                    return 10\n \n-        self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n+                def content_type(self):\n+                    return \'text/foo\'\n \n-    def test_MOVE(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n+\n+            self.assertEqual(response, r.HEAD(request, request.response))\n+            self.assertEqual(200, response.getStatus())\n+            self.assertEqual(\n+                \'close\',\n+                response.getHeader(\'Connection\', literal=True)\n+            )\n+            self.assertTrue(\n+                response.getHeader(\'Content-Type\').startswith(\'text/foo\'))\n+            self.assertEqual(\'10\', response.getHeader(\'Content-Length\'))\n+\n+        def test_OPTIONS(self):\n+            class TestContainer(Container):\n+\n+                def get_size(self):\n+                    return 10\n+\n+                def content_type(self):\n+                    return \'text/foo\'\n+\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n+\n+            self.assertEqual(response, r.OPTIONS(request, request.response))\n+            self.assertEqual(\n+                \'close\',\n+                response.getHeader(\'Connection\', literal=True)\n+            )\n+            self.assertEqual(\n+                \'GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, \'\n+                \'PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK\',\n+                response.getHeader(\'Allow\')\n+            )\n+\n+        def test_TRACE(self):\n+            class TestContainer(Container):\n+\n+                def get_size(self):\n+                    return 10\n+\n+                def content_type(self):\n+                    return \'text/foo\'\n+\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+\n+            self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n+\n+        def test_PROPFIND(self):\n+            class TestContainer(Container):\n+\n+                def get_size(self):\n+                    return 10\n+\n+                def content_type(self):\n+                    return \'text/foo\'\n+\n+            container = TestContainer(\'container\')\n+            container.manage_changeProperties(title="Container")\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n+\n+            self.assertEqual(response, r.PROPFIND(request, response))\n+\n+            self.assertEqual(\n+                \'close\',\n+                response.getHeader(\'connection\', literal=True)\n+            )\n+            self.assertEqual(\n+                \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n+            )\n+            self.assertEqual(207, response.getStatus())\n+\n+            body = """\\\n+    <?xml version="1.0" encoding="utf-8"?>\n+    <d:multistatus xmlns:d="DAV:">\n+    <d:response>\n+    <d:href>/site/container</d:href>\n+    <d:propstat xmlns:n="http://www.zope.org/propsets/default">\n+      <d:prop>\n+      <n:title>Container</n:title>\n+      </d:prop>\n+      <d:status>HTTP/1.1 200 OK</d:status>\n+    </d:propstat>\n+    <d:propstat xmlns:n="DAV:">\n+      <d:prop>\n+      <n:creationdate>1970-01-01T12:00:00Z</n:creationdate>\n+      <n:displayname>Container</n:displayname>\n+      <n:resourcetype></n:resourcetype>\n+      <n:getcontenttype>text/foo</n:getcontenttype>\n+      <n:getcontentlength>10</n:getcontentlength>\n+      <n:source></n:source>\n+      <n:supportedlock>\n+      <n:lockentry>\n+      <d:lockscope><d:exclusive/></d:lockscope>\n+      <d:locktype><d:write/></d:locktype>\n+      </n:lockentry>\n+      </n:supportedlock>\n+      <n:lockdiscovery>\n+\n+    </n:lockdiscovery>\n+      <n:getlastmodified>...</n:getlastmodified>\n+      </d:prop>\n+      <d:status>HTTP/1.1 200 OK</d:status>\n+    </d:propstat>\n+    </d:response>\n+    </d:multistatus>\n+    """\n+\n+            result = response.getBody()\n+            result = re.sub(\n+                r\'<n:getlastmodified>.+</n:getlastmodified>\',\n+                \'<n:getlastmodified>...</n:getlastmodified>\',\n+                result\n+            )\n+\n+            self.assertEqual(result.strip(), body.strip())\n+\n+        def test_PROPPATCH(self):\n+            class TestContainer(Container):\n+\n+                def get_size(self):\n+                    return 10\n+\n+                def content_type(self):\n+                    return \'text/foo\'\n+\n+            container = TestContainer(\'container\')\n+            container.manage_changeProperties(title="Container")\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            requestBody = """\\\n+    <?xml version="1.0" encoding="utf-8" ?>\n+    <D:propertyupdate xmlns:D="DAV:"\n+                      xmlns:n="http://www.zope.org/propsets/default">\n+        <D:set>\n+            <D:prop>\n+                <n:title>New title</n:title>\n+              </D:prop>\n+         </D:set>\n+    </D:propertyupdate>\n+    """\n+\n+            request = DAVTestRequest(\n+                environ={\n+                    \'URL\': \'http://example.org/site/container\',\n+                    \'BODY\': requestBody\n+                }\n+            )\n+            response = request.response\n+\n+            self.assertEqual(response, r.PROPPATCH(request, response))\n+\n+            self.assertEqual(\'New title\', container.getProperty(\'title\'))\n+\n+            self.assertEqual(\n+                \'close\', response.getHeader(\'connection\', literal=True)\n+            )\n+            self.assertEqual(\n+                \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n+            )\n+            self.assertEqual(207, response.getStatus())\n+\n+            body = """\\\n+    <?xml version="1.0" encoding="utf-8"?>\n+    <d:multistatus xmlns:d="DAV:">\n+    <d:response>\n+    <d:href>http%3A//example.org/site/container</d:href>\n+    <d:propstat xmlns:n="http://www.zope.org/propsets/default">\n+      <d:prop>\n+      <n:title/>\n+      </d:prop>\n+      <d:status>HTTP/1.1 200 OK</d:status>\n+    </d:propstat>\n+    <d:responsedescription>\n+    The operation succeded.\n+    </d:responsedescription>\n+    </d:response>\n+    </d:multistatus>\n+    """\n+\n+            result = response.getBody()\n+            self.assertEqual(body.strip(), result.strip())\n+\n+        def test_LOCK(self):\n+            # Too much WebDAV magic - just test that it delegates correctly\n+            class TestContainer(Container):\n+\n+                def LOCK(self, request, response):\n+                    self._locked = (request, response,)\n+                    return response\n+\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n+\n+            self.assertEqual(response, r.LOCK(request, response))\n+            self.assertEqual((request, response), container._locked)\n+\n+        def test_UNLOCK(self):\n+            # Too much WebDAV magic - just test that it delegates correctly\n+            class TestContainer(Container):\n+\n+                def UNLOCK(self, request, response):\n+                    self._unlocked = (request, response,)\n+                    return response\n+\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-    def test_manage_DAVget(self):\n-        class TestContainer(Container):\n+            self.assertEqual(response, r.UNLOCK(request, response))\n+            self.assertEqual((request, response), container._unlocked)\n \n-            def manage_DAVget(self):\n-                return \'data\'\n+        def test_PUT(self):\n+            class TestContainer(Container):\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+                def PUT(self, request, response):\n+                    self._put = (request, response,)\n+                    return response\n \n-        self.assertEqual(\'data\', r.manage_DAVget())\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-    def test_manage_FTPget(self):\n-        class TestContainer(Container):\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-            def manage_FTPget(self):\n-                return \'data\'\n+            self.assertEqual(response, r.PUT(request, response))\n+            self.assertEqual((request, response), container._put)\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+        def test_MKCOL(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        self.assertEqual(\'data\', r.manage_FTPget())\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-    def test_listDAVObjects(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n \n-        self.assertEqual([], r.listDAVObjects())\n+        def test_DELETE(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-class TestFileRepresentation(MockTestCase):\n+            self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n \n-    def create_dummy(self, **kw):\n-        return ItemDummy(**kw)\n+        def test_COPY(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-    def test_directory_factory(self):\n-        class TestContainer(Container):\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-            def manage_addFolder(self, name):\n-                self._added = name\n+            self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n \n-        container = TestContainer(\'container\')\n-        factory = DefaultDirectoryFactory(container)\n+        def test_MOVE(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        factory(\'foo\')\n-        self.assertEqual(\'foo\', container._added)\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-    def test_file_factory_finder_cruft(self):\n-        container = Container(\'container\')\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertRaises(\n-            Unauthorized,\n-            factory,\n-            \'.DS_Store\',\n-            \'application/octet-stream\',\n-            \'xxx\'\n-        )\n-        self.assertRaises(\n-            Unauthorized,\n-            factory,\n-            \'._test\',\n-            \'application/octet-stream\',\n-            \'xxx\'\n-        )\n-\n-    def test_file_factory_no_ctr(self):\n-        container = Container(\'container\')\n-\n-        from Products.CMFCore.utils import getToolByName\n-        self.patch_global(getToolByName, return_value=None)\n-\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n-\n-    def test_file_factory_no_fti(self):\n-        container = Container(\'container\')\n-\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=None)\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n-\n-    def test_file_factory_not_allowed(self):\n-        container = Container(\'container\')\n-        container.portal_type = \'containertype\'\n-\n-        child_fti_mock = Mock()\n-        child_fti_mock.product = None\n-        container_fti_mock = Mock()\n-        container_fti_mock.allowType = Mock(return_value=False)\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(\n-            side_effect=[child_fti_mock, container_fti_mock])\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertRaises(\n-            Unauthorized,\n-            factory,\n-            \'test.html\',\n-            \'text/html\',\n-            \'<html />\'\n-        )\n-\n-    def test_file_factory_construction_not_allowed(self):\n-        container = Container(\'container\')\n-        container.portal_type = \'containertype\'\n-\n-        child_fti_mock = Mock()\n-        child_fti_mock.product = None\n-        child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n-        container_fti_mock = Mock()\n-        container_fti_mock.allowType = Mock(return_value=True)\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(\n-            side_effect=[child_fti_mock, container_fti_mock])\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertRaises(\n-            Unauthorized,\n-            factory,\n-            \'test.html\',\n-            \'text/html\',\n-            \'<html />\'\n-        )\n-\n-    def test_file_factory_factory_method(self):\n-        result_dummy = self.create_dummy()\n-        container_mock = Mock()\n-        container_mock.invokeFactory = Mock(return_value=\'test-1.html\')\n-        container_mock._getOb = Mock(return_value=result_dummy)\n-        container_mock._delObject = Mock()\n-        child_fti_mock = Mock()\n-        child_fti_mock.product = \'FooProduct\'\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        factory = DefaultFileFactory(container_mock)\n-\n-        self.assertEqual(\n-            result_dummy,\n-            factory(\'test.html\', \'text/html\', \'<html />\')\n-        )\n-\n-    def test_file_factory_factory_utility(self):\n-        result_dummy = self.create_dummy(id=\'test.html\')\n-        container_mock = Mock()\n-        child_fti_mock = Mock()\n-        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        child_fti_mock.product = None\n-        child_fti_mock.factory = \'childtype-factory\'\n-        container_fti_mock = Mock()\n-        container_fti_mock.allowType = Mock(return_value=True)\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(\n-            side_effect=[child_fti_mock, container_fti_mock])\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        def factory(*args, **kwargs):\n-            return result_dummy\n-        self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n-\n-        factory = DefaultFileFactory(container_mock)\n-\n-        self.assertEqual(\n-            result_dummy,\n-            factory(\'test.html\', \'text/html\', \'<html />\')\n-        )\n-        self.assertEqual(result_dummy.Title(), \'test.html\')\n-\n-    def test_file_factory_content_type_factory_utility(self):\n-        container_mock = Mock()\n-        child_fti_mock = Mock()\n-        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        child_fti_mock.getId = Mock(return_value=\'childtype\')\n-        child_fti_mock.product = None\n-        child_fti_mock.factory = \'childtype-factory\'\n-        container_fti_mock = Mock()\n-        container_fti_mock.allowType = Mock(return_value=True)\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(\n-            side_effect=[child_fti_mock, container_fti_mock])\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        def factory(*args, **kwargs):\n-            return Item(*args, **kwargs)\n-        self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n-\n-        factory = DefaultFileFactory(container_mock)\n-\n-        item = factory(\'test.html\', \'text/html\', \'<html />\')\n-\n-        self.assertEqual(\'test.html\', item.id)\n-\n-    def test_readfile_mimetype_no_message_no_fields(self):\n-\n-        class ITest(Interface):\n-            pass\n+            self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n+\n+        def test_manage_DAVget(self):\n+            class TestContainer(Container):\n+\n+                def manage_DAVget(self):\n+                    return \'data\'\n+\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            self.assertEqual(\'data\', r.manage_DAVget())\n+\n+        def test_manage_FTPget(self):\n+            class TestContainer(Container):\n+\n+                def manage_FTPget(self):\n+                    return \'data\'\n+\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = []\n+            self.assertEqual(\'data\', r.manage_FTPget())\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        def test_listDAVObjects(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            self.assertEqual([], r.listDAVObjects())\n \n-        readfile = DefaultReadFile(item)\n \n-        self.assertEqual(\'text/plain\', readfile.mimeType)\n+    class TestFileRepresentation(MockTestCase):\n \n-    def test_readfile_mimetype_no_message_no_primary_field(self):\n+        def create_dummy(self, **kw):\n+            return ItemDummy(**kw)\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n+        def test_directory_factory(self):\n+            class TestContainer(Container):\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = []\n+                def manage_addFolder(self, name):\n+                    self._added = name\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            container = TestContainer(\'container\')\n+            factory = DefaultDirectoryFactory(container)\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            factory(\'foo\')\n+            self.assertEqual(\'foo\', container._added)\n \n-        readfile = DefaultReadFile(item)\n+        def test_file_factory_finder_cruft(self):\n+            container = Container(\'container\')\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertRaises(\n+                Unauthorized,\n+                factory,\n+                \'.DS_Store\',\n+                \'application/octet-stream\',\n+                \'xxx\'\n+            )\n+            self.assertRaises(\n+                Unauthorized,\n+                factory,\n+                \'._test\',\n+                \'application/octet-stream\',\n+                \'xxx\'\n+            )\n+\n+        def test_file_factory_no_ctr(self):\n+            container = Container(\'container\')\n+\n+            from Products.CMFCore.utils import getToolByName\n+            self.patch_global(getToolByName, return_value=None)\n+\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n+\n+        def test_file_factory_no_fti(self):\n+            container = Container(\'container\')\n+\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=None)\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n+\n+        def test_file_factory_not_allowed(self):\n+            container = Container(\'container\')\n+            container.portal_type = \'containertype\'\n+\n+            child_fti_mock = Mock()\n+            child_fti_mock.product = None\n+            container_fti_mock = Mock()\n+            container_fti_mock.allowType = Mock(return_value=False)\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(\n+                side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertRaises(\n+                Unauthorized,\n+                factory,\n+                \'test.html\',\n+                \'text/html\',\n+                \'<html />\'\n+            )\n+\n+        def test_file_factory_construction_not_allowed(self):\n+            container = Container(\'container\')\n+            container.portal_type = \'containertype\'\n+\n+            child_fti_mock = Mock()\n+            child_fti_mock.product = None\n+            child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n+            container_fti_mock = Mock()\n+            container_fti_mock.allowType = Mock(return_value=True)\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(\n+                side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertRaises(\n+                Unauthorized,\n+                factory,\n+                \'test.html\',\n+                \'text/html\',\n+                \'<html />\'\n+            )\n+\n+        def test_file_factory_factory_method(self):\n+            result_dummy = self.create_dummy()\n+            container_mock = Mock()\n+            container_mock.invokeFactory = Mock(return_value=\'test-1.html\')\n+            container_mock._getOb = Mock(return_value=result_dummy)\n+            container_mock._delObject = Mock()\n+            child_fti_mock = Mock()\n+            child_fti_mock.product = \'FooProduct\'\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            factory = DefaultFileFactory(container_mock)\n+\n+            self.assertEqual(\n+                result_dummy,\n+                factory(\'test.html\', \'text/html\', \'<html />\')\n+            )\n+\n+        def test_file_factory_factory_utility(self):\n+            result_dummy = self.create_dummy(id=\'test.html\')\n+            container_mock = Mock()\n+            child_fti_mock = Mock()\n+            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+            child_fti_mock.product = None\n+            child_fti_mock.factory = \'childtype-factory\'\n+            container_fti_mock = Mock()\n+            container_fti_mock.allowType = Mock(return_value=True)\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(\n+                side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            def factory(*args, **kwargs):\n+                return result_dummy\n+            self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n+\n+            factory = DefaultFileFactory(container_mock)\n+\n+            self.assertEqual(\n+                result_dummy,\n+                factory(\'test.html\', \'text/html\', \'<html />\')\n+            )\n+            self.assertEqual(result_dummy.Title(), \'test.html\')\n+\n+        def test_file_factory_content_type_factory_utility(self):\n+            container_mock = Mock()\n+            child_fti_mock = Mock()\n+            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+            child_fti_mock.getId = Mock(return_value=\'childtype\')\n+            child_fti_mock.product = None\n+            child_fti_mock.factory = \'childtype-factory\'\n+            container_fti_mock = Mock()\n+            container_fti_mock.allowType = Mock(return_value=True)\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(\n+                side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            def factory(*args, **kwargs):\n+                return Item(*args, **kwargs)\n+            self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n+\n+            factory = DefaultFileFactory(container_mock)\n+\n+            item = factory(\'test.html\', \'text/html\', \'<html />\')\n+\n+            self.assertEqual(\'test.html\', item.id)\n+\n+        def test_readfile_mimetype_no_message_no_fields(self):\n+\n+            class ITest(Interface):\n+                pass\n+\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = []\n+\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n+\n+            readfile = DefaultReadFile(item)\n+\n+            self.assertEqual(\'text/plain\', readfile.mimeType)\n+\n+        def test_readfile_mimetype_no_message_no_primary_field(self):\n \n-        self.assertEqual(\'text/plain\', readfile.mimeType)\n+            class ITest(Interface):\n+                title = schema.TextLine()\n \n-    def test_readfile_mimetype_no_message_single_primary_field(self):\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = []\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n-            body = schema.Text()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = []\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            readfile = DefaultReadFile(item)\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            self.assertEqual(\'text/plain\', readfile.mimeType)\n \n-        readfile = DefaultReadFile(item)\n+        def test_readfile_mimetype_no_message_single_primary_field(self):\n \n-        self.assertEqual(\'text/plain\', readfile.mimeType)\n+            class ITest(Interface):\n+                title = schema.TextLine()\n+                body = schema.Text()\n+            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-    def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = []\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n-            body = schema.Text()\n-            stuff = schema.Bytes()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n-        alsoProvides(ITest[\'stuff\'], IPrimaryField)\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            readfile = DefaultReadFile(item)\n \n-        readfile = DefaultReadFile(item)\n+            self.assertEqual(\'text/plain\', readfile.mimeType)\n \n-        self.assertEqual(\'message/rfc822\', readfile.mimeType)\n+        def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n \n-    def test_readfile_mimetype_additional_schemata(self):\n-        # This is mostly a test that utils.iterSchemata takes\n-        # IBehaviorAssignable into account.\n+            class ITest(Interface):\n+                title = schema.TextLine()\n+                body = schema.Text()\n+                stuff = schema.Bytes()\n+            alsoProvides(ITest[\'body\'], IPrimaryField)\n+            alsoProvides(ITest[\'stuff\'], IPrimaryField)\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-        class ITestAdditional(Interface):\n-            # Additional behavior on an item\n-            body = schema.Text()\n-            stuff = schema.Bytes()\n-        alsoProvides(ITestAdditional[\'body\'], IPrimaryField)\n-        alsoProvides(ITestAdditional[\'stuff\'], IPrimaryField)\n-        alsoProvides(ITestAdditional, IFormFieldProvider)\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        class MockBehavior(object):\n-            def __init__(self, iface):\n-                self.interface = iface\n+            readfile = DefaultReadFile(item)\n \n-        class MockBehaviorAssignable(object):\n-            def __init__(self, context):\n-                self.context = context\n+            self.assertEqual(\'message/rfc822\', readfile.mimeType)\n \n-            def enumerateBehaviors(self):\n-                yield MockBehavior(ITestAdditional)\n+        def test_readfile_mimetype_additional_schemata(self):\n+            # This is mostly a test that utils.iterSchemata takes\n+            # IBehaviorAssignable into account.\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n+            class ITest(Interface):\n+                title = schema.TextLine()\n \n-        self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable,\n-                          (Item, ))\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            class ITestAdditional(Interface):\n+                # Additional behavior on an item\n+                body = schema.Text()\n+                stuff = schema.Bytes()\n+            alsoProvides(ITestAdditional[\'body\'], IPrimaryField)\n+            alsoProvides(ITestAdditional[\'stuff\'], IPrimaryField)\n+            alsoProvides(ITestAdditional, IFormFieldProvider)\n \n-        readfile = DefaultReadFile(item)\n+            class MockBehavior(object):\n+                def __init__(self, iface):\n+                    self.interface = iface\n \n-        self.assertEqual(\'message/rfc822\', readfile.mimeType)\n+            class MockBehaviorAssignable(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-    def test_readfile_operations(self):\n+                def enumerateBehaviors(self):\n+                    yield MockBehavior(ITestAdditional)\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n-            body = schema.Text()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = [ITestBehavior.__identifier__]\n+            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable,\n+                              (Item, ))\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            readfile = DefaultReadFile(item)\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            self.assertEqual(\'message/rfc822\', readfile.mimeType)\n \n-        readfile = DefaultReadFile(item)\n+        def test_readfile_operations(self):\n \n-        message = Message()\n-        message[\'title\'] = \'Test title\'\n-        message[\'foo\'] = \'10\'\n-        message[\'bar\'] = \'xyz\'\n-        message.set_payload(\'<p>body</p>\')\n+            class ITest(Interface):\n+                title = schema.TextLine()\n+                body = schema.Text()\n+            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-        from plone.rfc822 import constructMessageFromSchemata\n-        self.patch_global(constructMessageFromSchemata, return_value=message)\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-        body = """\\\n-title: Test title\n-foo: 10\n-bar: xyz\n-Portal-Type: testtype\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-<p>body</p>"""\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        # iter\n-        # next\n+            readfile = DefaultReadFile(item)\n \n-        self.assertEqual(body, readfile.read())\n-        self.assertEqual(69, readfile.size())\n-        self.assertEqual(\'utf-8\', readfile.encoding)\n-        self.assertEqual(None, readfile.name)\n-        self.assertEqual(\'text/plain\', readfile.mimeType)\n+            message = Message()\n+            message[\'title\'] = \'Test title\'\n+            message[\'foo\'] = \'10\'\n+            message[\'bar\'] = \'xyz\'\n+            message.set_payload(\'<p>body</p>\')\n \n-        readfile.seek(2)\n-        self.assertEqual(2, readfile.tell())\n-        self.assertEqual(\'tl\', readfile.read(2))\n-        self.assertEqual(4, readfile.tell())\n+            from plone.rfc822 import constructMessageFromSchemata\n+            self.patch_global(constructMessageFromSchemata, return_value=message)\n \n-        readfile.seek(0, 2)\n-        self.assertEqual(69, readfile.tell())\n+            body = """\\\n+    title: Test title\n+    foo: 10\n+    bar: xyz\n+    Portal-Type: testtype\n \n-        readfile.seek(0)\n-        self.assertEqual(\'foo: 10\\n\', readfile.readlines()[1])\n+    <p>body</p>"""\n \n-        readfile.seek(0)\n-        self.assertEqual(\'foo: 10\\n\', readfile.readlines(100)[1])\n+            # iter\n+            # next\n \n-        readfile.seek(0)\n-        self.assertEqual(\'title: Test title\\n\', readfile.readline())\n+            self.assertEqual(body, readfile.read())\n+            self.assertEqual(69, readfile.size())\n+            self.assertEqual(\'utf-8\', readfile.encoding)\n+            self.assertEqual(None, readfile.name)\n+            self.assertEqual(\'text/plain\', readfile.mimeType)\n \n-        readfile.seek(0)\n-        self.assertEqual(\'title: Test title\\n\', readfile.readline(100))\n+            readfile.seek(2)\n+            self.assertEqual(2, readfile.tell())\n+            self.assertEqual(\'tl\', readfile.read(2))\n+            self.assertEqual(4, readfile.tell())\n \n-        readfile.seek(0)\n-        self.assertEqual(\'foo: 10\\n\', list(iter(readfile))[1])\n+            readfile.seek(0, 2)\n+            self.assertEqual(69, readfile.tell())\n \n-        self.assertEqual(False, readfile.closed)\n-        readfile.close()\n+            readfile.seek(0)\n+            self.assertEqual(\'foo: 10\\n\', readfile.readlines()[1])\n \n-    def test_writefile_file_operations(self):\n+            readfile.seek(0)\n+            self.assertEqual(\'foo: 10\\n\', readfile.readlines(100)[1])\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n-            body = schema.Text()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n+            readfile.seek(0)\n+            self.assertEqual(\'title: Test title\\n\', readfile.readline())\n \n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = [ITestBehavior.__identifier__]\n+            readfile.seek(0)\n+            self.assertEqual(\'title: Test title\\n\', readfile.readline(100))\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            readfile.seek(0)\n+            self.assertEqual(\'foo: 10\\n\', list(iter(readfile))[1])\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n-        item.title = u"Test title"\n-        item.foo = 10\n-        item.bar = \'xyz\'\n-        item.body = u"<p>body</p>"\n+            self.assertEqual(False, readfile.closed)\n+            readfile.close()\n \n-        writefile = DefaultWriteFile(item)\n+        def test_writefile_file_operations(self):\n \n-        body = """\\\n-title: Test title\n-foo: 10\n-bar: xyz\n-Portal-Type: testtype\n+            class ITest(Interface):\n+                title = schema.TextLine()\n+                body = schema.Text()\n+            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-<p>body</p>"""\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-        from plone.rfc822 import initializeObjectFromSchemata\n-        self.patch_global(initializeObjectFromSchemata)\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        writefile.mimeType = \'text/plain\'\n-        self.assertEqual(\'text/plain\', writefile.mimeType)\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n+            item.title = u"Test title"\n+            item.foo = 10\n+            item.bar = \'xyz\'\n+            item.body = u"<p>body</p>"\n \n-        writefile.encoding = \'latin1\'\n-        self.assertEqual(\'latin1\', writefile.encoding)\n+            writefile = DefaultWriteFile(item)\n \n-        writefile.filename = \'test.html\'\n-        self.assertEqual(\'test.html\', writefile.filename)\n+            body = """\\\n+    title: Test title\n+    foo: 10\n+    bar: xyz\n+    Portal-Type: testtype\n \n-        self.assertEqual(False, writefile.closed)\n-        self.assertEqual(0, writefile.tell())\n+    <p>body</p>"""\n \n-        writefile.writelines([\'one\\n\', \'two\'])\n-        self.assertEqual(7, writefile.tell())\n+            from plone.rfc822 import initializeObjectFromSchemata\n+            self.patch_global(initializeObjectFromSchemata)\n \n-        self.assertRaises(NotImplementedError, writefile.truncate)\n+            writefile.mimeType = \'text/plain\'\n+            self.assertEqual(\'text/plain\', writefile.mimeType)\n \n-        writefile.truncate(0)\n-        self.assertEqual(0, writefile.tell())\n+            writefile.encoding = \'latin1\'\n+            self.assertEqual(\'latin1\', writefile.encoding)\n \n-        self.assertRaises(NotImplementedError, writefile.seek, 10)\n+            writefile.filename = \'test.html\'\n+            self.assertEqual(\'test.html\', writefile.filename)\n \n-        writefile.write(body[:10])\n-        writefile.write(body[10:])\n-        writefile.close()\n+            self.assertEqual(False, writefile.closed)\n+            self.assertEqual(0, writefile.tell())\n \n-        self.assertEqual(True, writefile.closed)\n-        self.assertEqual(69, writefile.tell())\n+            writefile.writelines([\'one\\n\', \'two\'])\n+            self.assertEqual(7, writefile.tell())\n \n+            self.assertRaises(NotImplementedError, writefile.truncate)\n \n-class TestDAVTraversal(MockTestCase):\n+            writefile.truncate(0)\n+            self.assertEqual(0, writefile.tell())\n \n-    def test_no_acquire_dav(self):\n-        container = Container(\'container\')\n+            self.assertRaises(NotImplementedError, writefile.seek, 10)\n \n-        outer = Folder(\'outer\')\n-        outer._setOb(\'item\', SimpleItem(\'item\'))\n-        outer._setOb(\'container\', container)\n+            writefile.write(body[:10])\n+            writefile.write(body[10:])\n+            writefile.close()\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PUT\'}\n-        )\n-        request.maybe_webdav_client = True\n+            self.assertEqual(True, writefile.closed)\n+            self.assertEqual(69, writefile.tell())\n \n-        traversal = DexterityPublishTraverse(\n-            container.__of__(outer),\n-            request\n-        )\n \n-        r = traversal.publishTraverse(request, \'item\')\n+    class TestDAVTraversal(MockTestCase):\n \n-        self.assertTrue(isinstance(r, NullResource))\n-        self.assertEqual(container, r.aq_parent)\n+        def test_no_acquire_dav(self):\n+            container = Container(\'container\')\n \n-    def test_acquire_without_dav(self):\n-        container = Container(\'container\')\n+            outer = Folder(\'outer\')\n+            outer._setOb(\'item\', SimpleItem(\'item\'))\n+            outer._setOb(\'container\', container)\n \n-        outer = Folder(\'outer\')\n-        outer._setObject(\'item\', SimpleItem(\'item\'))\n-        outer._setOb(\'container\', container)\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PUT\'}\n+            )\n+            request.maybe_webdav_client = True\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n-        )\n-        request.maybe_webdav_client = False\n+            traversal = DexterityPublishTraverse(\n+                container.__of__(outer),\n+                request\n+            )\n \n-        traversal = DexterityPublishTraverse(container.__of__(outer), request)\n+            r = traversal.publishTraverse(request, \'item\')\n \n-        r = traversal.publishTraverse(request, \'item\')\n+            self.assertTrue(isinstance(r, NullResource))\n+            self.assertEqual(container, r.aq_parent)\n \n-        self.assertEqual(r.aq_base, outer[\'item\'].aq_base)\n-        self.assertEqual(container, r.aq_parent)\n+        def test_acquire_without_dav(self):\n+            container = Container(\'container\')\n \n-    def test_folder_data_traversal_dav(self):\n-        container = Container(\'test\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\'}\n-        )\n-        request.maybe_webdav_client = True\n+            outer = Folder(\'outer\')\n+            outer._setObject(\'item\', SimpleItem(\'item\'))\n+            outer._setOb(\'container\', container)\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n+            )\n+            request.maybe_webdav_client = False\n \n-        r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n+            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-        self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n-        self.assertEqual(container, r.__parent__)\n-        self.assertEqual(container, r.aq_parent)\n+            r = traversal.publishTraverse(request, \'item\')\n \n-    def test_folder_data_traversal_without_dav(self):\n-        container = Container(\'test\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\'}\n-        )\n-        request.maybe_webdav_client = False\n+            self.assertEqual(r.aq_base, outer[\'item\'].aq_base)\n+            self.assertEqual(container, r.aq_parent)\n \n-        traversal = DexterityPublishTraverse(container, request)\n+        def test_folder_data_traversal_dav(self):\n+            container = Container(\'test\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\'}\n+            )\n+            request.maybe_webdav_client = True\n \n-        self.assertRaises(\n-            Forbidden,\n-            traversal.publishTraverse,\n-            request,\n-            DAV_FOLDER_DATA_ID\n-        )\n+            traversal = DexterityPublishTraverse(container, request)\n \n-    def test_browser_default_dav(self):\n-        class TestContainer(Container):\n+            r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n \n-            def __browser_default__(self, request):\n-                return self, (\'foo\',)\n+            self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n+            self.assertEqual(container, r.__parent__)\n+            self.assertEqual(container, r.aq_parent)\n \n-        container = TestContainer(\'container\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n-        )\n-        request.maybe_webdav_client = True\n+        def test_folder_data_traversal_without_dav(self):\n+            container = Container(\'test\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\'}\n+            )\n+            request.maybe_webdav_client = False\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            traversal = DexterityPublishTraverse(container, request)\n \n-        self.assertEqual((container, (),), traversal.browserDefault(request))\n+            self.assertRaises(\n+                Forbidden,\n+                traversal.publishTraverse,\n+                request,\n+                DAV_FOLDER_DATA_ID\n+            )\n \n-    def test_browser_default_dav_get(self):\n-        class TestContainer(Container):\n+        def test_browser_default_dav(self):\n+            class TestContainer(Container):\n \n-            def __browser_default__(self, request):\n-                return self, (\'foo\',)\n+                def __browser_default__(self, request):\n+                    return self, (\'foo\',)\n \n-        container = TestContainer(\'container\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n-        )\n-        request.maybe_webdav_client = True\n+            container = TestContainer(\'container\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n+            )\n+            request.maybe_webdav_client = True\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            traversal = DexterityPublishTraverse(container, request)\n \n-        self.assertEqual(\n-            (container, (\'foo\',),),\n-            traversal.browserDefault(request)\n-        )\n+            self.assertEqual((container, (),), traversal.browserDefault(request))\n \n-    def test_browser_default_without_dav(self):\n-        class TestContainer(Container):\n+        def test_browser_default_dav_get(self):\n+            class TestContainer(Container):\n \n-            def __browser_default__(self, request):\n-                return self, (\'foo\',)\n+                def __browser_default__(self, request):\n+                    return self, (\'foo\',)\n \n-        container = TestContainer(\'container\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n-        )\n-        request.maybe_webdav_client = False\n+            container = TestContainer(\'container\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n+            )\n+            request.maybe_webdav_client = True\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            traversal = DexterityPublishTraverse(container, request)\n \n-        self.assertEqual(\n-            (container, (\'foo\',),),\n-            traversal.browserDefault(request)\n-        )\n+            self.assertEqual(\n+                (container, (\'foo\',),),\n+                traversal.browserDefault(request)\n+            )\n+\n+        def test_browser_default_without_dav(self):\n+            class TestContainer(Container):\n+\n+                def __browser_default__(self, request):\n+                    return self, (\'foo\',)\n+\n+            container = TestContainer(\'container\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n+            )\n+            request.maybe_webdav_client = False\n+\n+            traversal = DexterityPublishTraverse(container, request)\n+\n+            self.assertEqual(\n+                (container, (\'foo\',),),\n+                traversal.browserDefault(request)\n+            )\n+\n+else:\n+    class TestDummy(MockTestCase):\n+\n+        def test_dummy(self):\n+            pass\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/855eb35c8b3cba59369c9f23694595562c24c8fc

fix tests and allow text as id

Files changed:
M plone/dexterity/content.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_fti.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 1863266..8d75dbf 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -363,11 +363,13 @@ def __getattr__(self, name):\n     # that can\'t be encoded to ASCII will throw a UnicodeEncodeError\n \n     def _get__name__(self):\n-        return six.text_type(self.id)\n+        if six.PY2:\n+            return safe_unicode(self.id)\n+        return self.id\n \n     def _set__name__(self, value):\n-        if isinstance(value, six.text_type):\n-            value = str(value)  # may throw, but that\'s OK - id must be ASCII\n+        if six.PY2 and isinstance(value, six.text_type):\n+            value = value.encode(\'utf8\')  # may throw, but id must be ASCII\n         self.id = value\n \n     __name__ = property(_get__name__, _set__name__)\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex a53459a..084a2da 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -575,13 +575,16 @@ def test_name_and_id_in_sync(self):\n     def test_name_unicode_id_str(self):\n \n         i = Item()\n-\n-        try:\n-            i.__name__ = \'\\xc3\\xb8\'.decode(\'utf-8\')\n-        except UnicodeEncodeError:\n-            pass\n+        if six.PY2:\n+            try:\n+                i.__name__ = b\'\\xc3\\xb8\'.decode(\'utf-8\')\n+            except UnicodeEncodeError:\n+                pass\n+            else:\n+                self.fail()\n         else:\n-            self.fail()\n+            i.__name__ = b\'\\xc3\\xb8\'.decode(\'utf-8\')\n+\n \n         i.__name__ = u"o"\n \ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 3694229..fff78ec 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -350,10 +350,10 @@ def test_meta_type_change_class(self):\n         self.assertEqual(TestClass2.meta_type, fti.Metatype())\n \n     def test_title_i18n(self):\n-        fti = DexterityFTI(u\'testtype\', title=\'t\\xc3\\xa9st\')\n+        fti = DexterityFTI(u\'testtype\', title=b\'t\\xc3\\xa9st\')\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(\'t\\xc3\\xa9st\', fti.Title())\n+        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(), fti.Title())\n \n         # with an i18n domain, we get a Message\n         fti.i18n_domain = \'test\'\n@@ -362,10 +362,10 @@ def test_title_i18n(self):\n         self.assertEqual(\'test\', msgid.domain)\n \n     def test_description_i18n(self):\n-        fti = DexterityFTI(u\'testtype\', description=\'t\\xc3\\xa9st\')\n+        fti = DexterityFTI(u\'testtype\', description=b\'t\\xc3\\xa9st\')\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(\'t\\xc3\\xa9st\', fti.Description())\n+        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(), fti.Description())\n \n         # with an i18n domain, we get a Message\n         fti.i18n_domain = \'test\'\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/eb486f11a74d52b14de72f227caf3e54d8428b4a

fix deprecation warning

Files changed:
M plone/dexterity/fti.py

b'diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 8b059ce..9a9f405 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -15,13 +15,13 @@\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\n+from zope.component.hooks import getSiteManager\n from zope.component.interfaces import IFactory\n from zope.event import notify\n from zope.i18nmessageid import Message\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n from zope.security.interfaces import IPermission\n-from zope.site.hooks import getSiteManager\n \n import logging\n import os.path\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/d6dc3960d2f0474655a7aa735ab32fe88a032daa

add permission to be tested for, otherwise it fails

Files changed:
M CHANGES.rst
M plone/dexterity/tests/test_content.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex bb19f31..9f2c1a3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,7 +17,7 @@ New features:\n Bug fixes:\n \n - Other Python 3 compatibility fixes\n-  [ale-rt, pbauer]\n+  [ale-rt, pbauer, jensens]\n \n \n 2.6.0 (2018-04-03)\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 084a2da..14ccddd 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -992,16 +992,24 @@ def test_container_manage_delObjects(self):\n         # OFS does not check the delete permission for each object being\n         # deleted. We want to.\n         item = Item(id='test')\n-        container = Container(id='container')\n+        container = Container(id='testcontainer')\n         container['test'] = item\n+        # self.layer['portal']['testcontainer'] = container\n         from zExceptions import Unauthorized\n         self.assertRaises(Unauthorized, container.manage_delObjects, ['test'])\n \n         # Now permit it and try again.\n         from Products.CMFCore.permissions import DeleteObjects\n+        # in order to use manage_permissions the permission has to be defined\n+        # somewhere in the mro\n+        # since webdav is no longer part here, where it was defined in ZServer.\n+        # lets add it explicit here.\n+        perms_before = item.__class__.__ac_permissions__\n+        item.__class__.__ac_permissions__ = ((DeleteObjects, ()),)\n         item.manage_permission(DeleteObjects, ('Anonymous',))\n         container.manage_delObjects(['test'])\n         self.assertFalse('test' in container)\n+        item.__class__.__ac_permissions__ = perms_before\n \n     def test_iconstraintypes_adapter(self):\n \n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/fffc66c38e93f3923d3b0c7aa0bea4528428b4e8

fix tests in py2

Files changed:
M plone/dexterity/content.py
M plone/dexterity/fti.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_webdav.py
M setup.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 8d75dbf..7f08793 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -369,7 +369,7 @@ def _get__name__(self):\n \n     def _set__name__(self, value):\n         if six.PY2 and isinstance(value, six.text_type):\n-            value = value.encode(\'utf8\')  # may throw, but id must be ASCII\n+            value = str(value)  # may throw, but id must be ASCII in py2\n         self.id = value\n \n     __name__ = property(_get__name__, _set__name__)\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 9a9f405..9f86b0c 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -207,6 +207,10 @@ def Title(self):\n             else:\n                 return Message(self.title, self.i18n_domain)\n         else:\n+            if six.PY2:\n+                if self.title:\n+                    return self.title.decode(\'utf8\')\n+                return self.getId()\n             return self.title or self.getId()\n \n     def Description(self):\n@@ -221,6 +225,8 @@ def Description(self):\n             else:\n                 return Message(self.description, self.i18n_domain)\n         else:\n+            if six.PY2:\n+                return self.description.decode(\'utf8\')\n             return self.description\n \n     def Metatype(self):\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex fff78ec..1994c39 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -353,7 +353,7 @@ def test_title_i18n(self):\n         fti = DexterityFTI(u\'testtype\', title=b\'t\\xc3\\xa9st\')\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(), fti.Title())\n+        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(\'utf8\'), fti.Title())\n \n         # with an i18n domain, we get a Message\n         fti.i18n_domain = \'test\'\n@@ -365,7 +365,7 @@ def test_description_i18n(self):\n         fti = DexterityFTI(u\'testtype\', description=b\'t\\xc3\\xa9st\')\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(), fti.Description())\n+        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(\'utf8\'), fti.Description())\n \n         # with an i18n domain, we get a Message\n         fti.i18n_domain = \'test\'\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex c4ba5cb..38cec1a 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -539,40 +539,40 @@ def content_type(self):\n             self.assertEqual(207, response.getStatus())\n \n             body = """\\\n-    <?xml version="1.0" encoding="utf-8"?>\n-    <d:multistatus xmlns:d="DAV:">\n-    <d:response>\n-    <d:href>/site/container</d:href>\n-    <d:propstat xmlns:n="http://www.zope.org/propsets/default">\n-      <d:prop>\n-      <n:title>Container</n:title>\n-      </d:prop>\n-      <d:status>HTTP/1.1 200 OK</d:status>\n-    </d:propstat>\n-    <d:propstat xmlns:n="DAV:">\n-      <d:prop>\n-      <n:creationdate>1970-01-01T12:00:00Z</n:creationdate>\n-      <n:displayname>Container</n:displayname>\n-      <n:resourcetype></n:resourcetype>\n-      <n:getcontenttype>text/foo</n:getcontenttype>\n-      <n:getcontentlength>10</n:getcontentlength>\n-      <n:source></n:source>\n-      <n:supportedlock>\n-      <n:lockentry>\n-      <d:lockscope><d:exclusive/></d:lockscope>\n-      <d:locktype><d:write/></d:locktype>\n-      </n:lockentry>\n-      </n:supportedlock>\n-      <n:lockdiscovery>\n-\n-    </n:lockdiscovery>\n-      <n:getlastmodified>...</n:getlastmodified>\n-      </d:prop>\n-      <d:status>HTTP/1.1 200 OK</d:status>\n-    </d:propstat>\n-    </d:response>\n-    </d:multistatus>\n-    """\n+<?xml version="1.0" encoding="utf-8"?>\n+<d:multistatus xmlns:d="DAV:">\n+<d:response>\n+<d:href>/site/container</d:href>\n+<d:propstat xmlns:n="http://www.zope.org/propsets/default">\n+  <d:prop>\n+  <n:title>Container</n:title>\n+  </d:prop>\n+  <d:status>HTTP/1.1 200 OK</d:status>\n+</d:propstat>\n+<d:propstat xmlns:n="DAV:">\n+  <d:prop>\n+  <n:creationdate>1970-01-01T12:00:00Z</n:creationdate>\n+  <n:displayname>Container</n:displayname>\n+  <n:resourcetype></n:resourcetype>\n+  <n:getcontenttype>text/foo</n:getcontenttype>\n+  <n:getcontentlength>10</n:getcontentlength>\n+  <n:source></n:source>\n+  <n:supportedlock>\n+  <n:lockentry>\n+  <d:lockscope><d:exclusive/></d:lockscope>\n+  <d:locktype><d:write/></d:locktype>\n+  </n:lockentry>\n+  </n:supportedlock>\n+  <n:lockdiscovery>\n+\n+</n:lockdiscovery>\n+  <n:getlastmodified>...</n:getlastmodified>\n+  </d:prop>\n+  <d:status>HTTP/1.1 200 OK</d:status>\n+</d:propstat>\n+</d:response>\n+</d:multistatus>\n+"""\n \n             result = response.getBody()\n             result = re.sub(\n@@ -597,16 +597,16 @@ def content_type(self):\n             r = FolderDataResource(\'fdata\', container).__of__(container)\n \n             requestBody = """\\\n-    <?xml version="1.0" encoding="utf-8" ?>\n-    <D:propertyupdate xmlns:D="DAV:"\n-                      xmlns:n="http://www.zope.org/propsets/default">\n-        <D:set>\n-            <D:prop>\n-                <n:title>New title</n:title>\n-              </D:prop>\n-         </D:set>\n-    </D:propertyupdate>\n-    """\n+<?xml version="1.0" encoding="utf-8" ?>\n+<D:propertyupdate xmlns:D="DAV:"\n+                  xmlns:n="http://www.zope.org/propsets/default">\n+    <D:set>\n+        <D:prop>\n+            <n:title>New title</n:title>\n+          </D:prop>\n+     </D:set>\n+</D:propertyupdate>\n+"""\n \n             request = DAVTestRequest(\n                 environ={\n@@ -629,22 +629,22 @@ def content_type(self):\n             self.assertEqual(207, response.getStatus())\n \n             body = """\\\n-    <?xml version="1.0" encoding="utf-8"?>\n-    <d:multistatus xmlns:d="DAV:">\n-    <d:response>\n-    <d:href>http%3A//example.org/site/container</d:href>\n-    <d:propstat xmlns:n="http://www.zope.org/propsets/default">\n-      <d:prop>\n-      <n:title/>\n-      </d:prop>\n-      <d:status>HTTP/1.1 200 OK</d:status>\n-    </d:propstat>\n-    <d:responsedescription>\n-    The operation succeded.\n-    </d:responsedescription>\n-    </d:response>\n-    </d:multistatus>\n-    """\n+<?xml version="1.0" encoding="utf-8"?>\n+<d:multistatus xmlns:d="DAV:">\n+<d:response>\n+<d:href>http%3A//example.org/site/container</d:href>\n+<d:propstat xmlns:n="http://www.zope.org/propsets/default">\n+  <d:prop>\n+  <n:title/>\n+  </d:prop>\n+  <d:status>HTTP/1.1 200 OK</d:status>\n+</d:propstat>\n+<d:responsedescription>\n+The operation succeded.\n+</d:responsedescription>\n+</d:response>\n+</d:multistatus>\n+"""\n \n             result = response.getBody()\n             self.assertEqual(body.strip(), result.strip())\n@@ -1114,12 +1114,12 @@ class ITest(Interface):\n             self.patch_global(constructMessageFromSchemata, return_value=message)\n \n             body = """\\\n-    title: Test title\n-    foo: 10\n-    bar: xyz\n-    Portal-Type: testtype\n+title: Test title\n+foo: 10\n+bar: xyz\n+Portal-Type: testtype\n \n-    <p>body</p>"""\n+<p>body</p>"""\n \n             # iter\n             # next\n@@ -1179,12 +1179,12 @@ class ITest(Interface):\n             writefile = DefaultWriteFile(item)\n \n             body = """\\\n-    title: Test title\n-    foo: 10\n-    bar: xyz\n-    Portal-Type: testtype\n+title: Test title\n+foo: 10\n+bar: xyz\n+Portal-Type: testtype\n \n-    <p>body</p>"""\n+<p>body</p>"""\n \n             from plone.rfc822 import initializeObjectFromSchemata\n             self.patch_global(initializeObjectFromSchemata)\ndiff --git a/setup.py b/setup.py\nindex 34b0789..ba64ae5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,6 +25,8 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n     keywords=\'plone dexterity contenttypes\',\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/7d2e5d646f4637ab2ef6ac34c326b91486cc4cff

fix list of types in py2

Files changed:
M plone/dexterity/fti.py

b"diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 9f86b0c..3456201 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -225,7 +225,7 @@ def Description(self):\n             else:\n                 return Message(self.description, self.i18n_domain)\n         else:\n-            if six.PY2:\n+            if six.PY2 and self.description:\n                 return self.description.decode('utf8')\n             return self.description\n \n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-09-20T10:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.dexterity/commit/8f0928833152096e6949e4032211920de65a66d4

do not try to set the same values for each behavior

Files changed:
M plone/dexterity/utils.py

b"diff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex ef8e41b..466ad6f 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -2,7 +2,6 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n-from copy import copy\n from DateTime import DateTime\n from plone.app.uuid.utils import uuidToObject\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -128,17 +127,19 @@ def createContent(portal_type, **kw):\n     # to re-define a type through the web that uses the factory from an\n     # existing type, but wants a unique portal_type!\n     content.portal_type = fti.getId()\n-    schemas = iterSchemataForType(portal_type)\n-    fields = kw\n-    fields_copy = copy(kw)\n+    fields = dict(kw)\n+    done = []\n \n-    for schema in schemas:\n+    for schema in iterSchemataForType(portal_type):\n         # schema.names() doesn't return attributes from superclasses in derived\n         # schemas. therefore we have to iterate over all items from the passed\n         # keywords arguments and set it, if the behavior has the questioned\n         # attribute.\n         behavior = schema(content)\n-        for name, value in fields_copy.items():\n+        for name, value in fields.items():\n+            if name in done:\n+                # already set\n+                continue\n             try:\n                 # hasattr swallows exceptions.\n                 getattr(behavior, name)\n@@ -146,12 +147,11 @@ def createContent(portal_type, **kw):\n                 # fieldname not available\n                 continue\n             setattr(behavior, name, value)\n-            try:\n-                del fields[name]\n-            except KeyError:\n-                pass\n+            done.append(name)\n \n     for (key, value) in fields.items():\n+        if key in done:\n+            continue\n         setattr(content, key, value)\n \n     notify(ObjectCreatedEvent(content))\n"

