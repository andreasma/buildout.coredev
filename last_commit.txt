Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-06-10T11:33:23+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/2991e7431a81ff0c0bdb35984765e2c2d80d1ae6

migrate test to PLONE_APP_CONTENTTYPES_FIXTURE

Files changed:
A Products/MimetypesRegistry/testing.py
M Products/MimetypesRegistry/mime_types/mtr_mimetypes.py
M Products/MimetypesRegistry/tests/test_encoding.py
M Products/MimetypesRegistry/tests/test_magic.py
M Products/MimetypesRegistry/tests/test_mimetypes.py

b"diff --git a/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py b/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\nindex f27d1fc..8f46829 100644\n--- a/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\n@@ -80,7 +80,7 @@ class text_xml(MimeTypeItem):\n     binary = 0\n \n     def classify(self, data):\n-        m = re.search('^\\s*<\\\\?xml.*\\\\?>', data)\n+        m = re.search(b'^\\\\s*<\\\\?xml.*\\\\?>', data)\n         if m:\n             return 1  # True\n         return None  # False\ndiff --git a/Products/MimetypesRegistry/testing.py b/Products/MimetypesRegistry/testing.py\nnew file mode 100644\nindex 0000000..7fe785e\n--- /dev/null\n+++ b/Products/MimetypesRegistry/testing.py\n@@ -0,0 +1,30 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n+from plone.app.testing import applyProfile\n+from plone.app.testing import IntegrationTesting\n+from plone.app.testing import PloneSandboxLayer\n+\n+import Products.MimetypesRegistry\n+\n+\n+class ProductsMimetypesregistryLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=Products.MimetypesRegistry)\n+\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, 'Products.MimetypesRegistry:MimetypesRegistry')\n+\n+\n+PRODUCTS_MIMETYPESREGISTRY_FIXTURE = ProductsMimetypesregistryLayer()\n+\n+\n+PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PRODUCTS_MIMETYPESREGISTRY_FIXTURE,),\n+    name='ProductsMimetypesregistryLayer:IntegrationTesting',\n+)\ndiff --git a/Products/MimetypesRegistry/tests/test_encoding.py b/Products/MimetypesRegistry/tests/test_encoding.py\nindex 9d05c60..9813957 100644\n--- a/Products/MimetypesRegistry/tests/test_encoding.py\n+++ b/Products/MimetypesRegistry/tests/test_encoding.py\n@@ -1,9 +1,14 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase as ATSiteTestCase\n from Products.MimetypesRegistry.encoding import guess_encoding\n+from Products.MimetypesRegistry.testing import PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n \n+import unittest\n+\n+\n+class TestGuessEncoding(unittest.TestCase):\n+\n+    layer = PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n \n-class TestGuessEncoding(ATSiteTestCase):\n \n     def testUTF8(self):\n         e = guess_encoding('\\xef\\xbb\\xbf any UTF-8 data')\ndiff --git a/Products/MimetypesRegistry/tests/test_magic.py b/Products/MimetypesRegistry/tests/test_magic.py\nindex cc50517..347d4b0 100644\n--- a/Products/MimetypesRegistry/tests/test_magic.py\n+++ b/Products/MimetypesRegistry/tests/test_magic.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n-from .utils import input_file_path\n-from plone.app.testing.bbb import PloneTestCase as ATSiteTestCase\n+from Products.MimetypesRegistry.tests.utils import input_file_path\n from Products.CMFCore.utils import getToolByName\n from Products.MimetypesRegistry.mime_types.magic import guessMime\n+from Products.MimetypesRegistry.testing import PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n+\n+import unittest\n \n \n samplefiles = [\n@@ -13,15 +15,17 @@\n ]\n \n \n-class TestGuessMagic(ATSiteTestCase):\n+class TestGuessMagic(unittest.TestCase):\n+\n+    layer = PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n-        ATSiteTestCase.afterSetUp(self)\n+    def setUp(self):\n+        self.portal = self.layer['portal']\n         self.registry = getToolByName(self.portal, 'mimetypes_registry')\n \n     def test_guessMime(self):\n         for filename, expected in samplefiles:\n-            file = open(input_file_path(filename))\n+            file = open(input_file_path(filename), 'rb')\n             data = file.read()\n             file.close()\n \ndiff --git a/Products/MimetypesRegistry/tests/test_mimetypes.py b/Products/MimetypesRegistry/tests/test_mimetypes.py\nindex f5172bd..73df20e 100644\n--- a/Products/MimetypesRegistry/tests/test_mimetypes.py\n+++ b/Products/MimetypesRegistry/tests/test_mimetypes.py\n@@ -1,16 +1,21 @@\n # -*- coding: utf-8 -*-\n-from .utils import input_file_path\n-from plone.app.testing.bbb import PloneTestCase as ATSiteTestCase\n+from Products.MimetypesRegistry.tests.utils import input_file_path\n+# from plone.app.testing.bbb import PloneTestCase as ATSiteTestCase\n from Products.CMFCore.utils import getToolByName\n from Products.MimetypesRegistry.mime_types import application_octet_stream\n from Products.MimetypesRegistry.mime_types import text_plain\n from Products.MimetypesRegistry.mime_types import text_xml\n+from Products.MimetypesRegistry.testing import PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n \n+import unittest\n \n-class TestMimeTypesclass(ATSiteTestCase):\n \n-    def afterSetUp(self):\n-        ATSiteTestCase.afterSetUp(self)\n+class TestMimeTypesclass(unittest.TestCase):\n+\n+    layer = PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer['portal']\n         self.registry = getToolByName(self.portal, 'mimetypes_registry')\n \n     def testClassify(self):\n"

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-06-12T13:49:42+02:00
Author: Robert Niederreiter (rnixx) <office@squarewave.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/7f6ab1c803a6365d04509c57f150c46c72c88301

tests run with py3 now

Files changed:
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/mime_types/magic.py
M Products/MimetypesRegistry/mime_types/mtr_mimetypes.py
M Products/MimetypesRegistry/tests/test_magic.py

b'Content containing PDF or PS header bytes cannot be rendered from this domain for security reasons.'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-06-12T14:21:35+02:00
Author: Robert Niederreiter (rnixx) <office@squarewave.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/b9c4f167daa4438bb0d9e1da5dee0a52e8126409

Changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 57569fa..14bbe95 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,17 +4,10 @@ Changelog\n 2.1.5 (unreleased)\n ------------------\n \n-Breaking changes:\n-\n-- *add item here*\n-\n New features:\n \n-- *add item here*\n-\n-Bug fixes:\n-\n-- *add item here*\n+- Python 3 compatibility.\n+  [rnix]\n \n \n 2.1.4 (2018-06-04)\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-06-13T10:42:27+02:00
Author: Robert Niederreiter (rnixx) <office@squarewave.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/9e132a554e8168ff5a62b0478c5793c8c07e6c99

Remove commented import

Files changed:
M Products/MimetypesRegistry/tests/test_mimetypes.py

b'diff --git a/Products/MimetypesRegistry/tests/test_mimetypes.py b/Products/MimetypesRegistry/tests/test_mimetypes.py\nindex 73df20e..87be910 100644\n--- a/Products/MimetypesRegistry/tests/test_mimetypes.py\n+++ b/Products/MimetypesRegistry/tests/test_mimetypes.py\n@@ -1,11 +1,10 @@\n # -*- coding: utf-8 -*-\n-from Products.MimetypesRegistry.tests.utils import input_file_path\n-# from plone.app.testing.bbb import PloneTestCase as ATSiteTestCase\n from Products.CMFCore.utils import getToolByName\n from Products.MimetypesRegistry.mime_types import application_octet_stream\n from Products.MimetypesRegistry.mime_types import text_plain\n from Products.MimetypesRegistry.mime_types import text_xml\n from Products.MimetypesRegistry.testing import PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n+from Products.MimetypesRegistry.tests.utils import input_file_path\n \n import unittest\n \n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-06-13T10:44:32+02:00
Author: Robert Niederreiter (rnixx) <office@squarewave.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/477bafde36a372eef68a629fc5219df051af32f5

Minor code shortening

Files changed:
M Products/MimetypesRegistry/mime_types/mtr_mimetypes.py

b"diff --git a/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py b/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\nindex ee84e10..00507f1 100644\n--- a/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\n@@ -82,9 +82,7 @@ class text_xml(MimeTypeItem):\n     def classify(self, data):\n         pat = b'^\\\\s*<\\\\?xml.*\\\\?>' if isinstance(data, bytes) else '^\\\\s*<\\\\?xml.*\\\\?>'\n         m = re.search(pat, data)\n-        if m:\n-            return 1  # True\n-        return None  # False\n+        return 1 if re.search(pat, data) else None\n \n \n class application_octet_stream(MimeTypeItem):\n"

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-06-26T22:20:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/edd6f049f32aae2fe5469cfdeb91b8ca4d18d7af

reduce warnings

Files changed:
M Products/MimetypesRegistry/MimeTypesRegistry.py

b"diff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex 1cf9620..5035412 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -126,7 +126,7 @@ def register_mimetype(self, mt, mimetype):\n         group = self._mimetypes.setdefault(major, PersistentMapping())\n         if minor in group:\n             if group.get(minor) != mimetype:\n-                logger.warn(\n+                logger.warning(\n                     'Redefining mime type {0} ({1})'.format(\n                         mt,\n                         mimetype.__class__\n@@ -144,7 +144,7 @@ def register_extension(self, extension, mimetype):\n         mimetype = aq_base(mimetype)\n         if extension in self.extensions:\n             if self.extensions.get(extension) != mimetype:\n-                logger.warn(\n+                logger.warning(\n                     'Redefining extension {0} from {1} to {2}'.format(\n                         extension,\n                         self.extensions[extension],\n@@ -170,7 +170,7 @@ def register_glob(self, glob, mimetype):\n         if existing is not None:\n             regex, mt = existing\n             if mt != mimetype:\n-                logger.warn(\n+                logger.warning(\n                     'Redefining glob {0} from {1} to {2}'.format(\n                         glob,\n                         mt,\n"

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-06-27T00:07:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/4a3e1222141ce40d9445e3c406cd605c041f36d7

InitializeClass was moved to AccessControl.class_init

Files changed:
M Products/MimetypesRegistry/MimeTypeItem.py
M Products/MimetypesRegistry/MimeTypesRegistry.py

b'diff --git a/Products/MimetypesRegistry/MimeTypeItem.py b/Products/MimetypesRegistry/MimeTypeItem.py\nindex 7fef4c2..f45a64b 100644\n--- a/Products/MimetypesRegistry/MimeTypeItem.py\n+++ b/Products/MimetypesRegistry/MimeTypeItem.py\n@@ -2,7 +2,7 @@\n \n from AccessControl import ClassSecurityInfo\n from Acquisition import Explicit\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import Item\n from Persistence import Persistent\n from Products.CMFCore.permissions import ManagePortal\ndiff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex 5035412..b958951 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from BTrees.OOBTree import OOBTree\n from OFS.Folder import Folder\n from Persistence import PersistentMapping\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-08-03T08:07:53+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/66d36c6a8e211ad69aad3d1614396cf67dfa11d9

fix regression for py2 and remove test deprecation warnings

Files changed:
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/tests/test_encoding.py
M Products/MimetypesRegistry/tests/test_magic.py
M Products/MimetypesRegistry/tests/test_mimetypes.py

b'diff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex b958951..a0bf7cb 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -344,7 +344,9 @@ def classify(self, data, mimetype=None, filename=None):\n                 failed = \'text/x-unknown-content-type\'\n                 filename = filename or \'\'\n                 data = data or \'\'\n-                ct, enc = guess_content_type(filename, data.encode(), None)\n+                if six.PY3:\n+                    data = data.encode()\n+                ct, enc = guess_content_type(filename, data, None)\n                 if ct == failed:\n                     ct = \'text/plain\'\n                 mtlist = self.lookup(ct)\ndiff --git a/Products/MimetypesRegistry/tests/test_encoding.py b/Products/MimetypesRegistry/tests/test_encoding.py\nindex 9813957..01b9b22 100644\n--- a/Products/MimetypesRegistry/tests/test_encoding.py\n+++ b/Products/MimetypesRegistry/tests/test_encoding.py\n@@ -12,49 +12,49 @@ class TestGuessEncoding(unittest.TestCase):\n \n     def testUTF8(self):\n         e = guess_encoding(\'\\xef\\xbb\\xbf any UTF-8 data\')\n-        self.failUnlessEqual(e, \'UTF-8\')\n+        self.assertEqual(e, \'UTF-8\')\n         e = guess_encoding(\' any UTF-8 data \\xef\\xbb\\xbf\')\n-        self.failUnlessEqual(e, None)\n+        self.assertEqual(e, None)\n \n     def testEmacs(self):\n         e = guess_encoding(\'# -*- coding: UTF-8  -*-\')\n-        self.failUnlessEqual(e, \'UTF-8\')\n+        self.assertEqual(e, \'UTF-8\')\n         e = guess_encoding(\'\'\'\n         ### -*- coding: ISO-8859-1  -*-\n         \'\'\')\n-        self.failUnlessEqual(e, \'ISO-8859-1\')\n+        self.assertEqual(e, \'ISO-8859-1\')\n         e = guess_encoding(\'\'\'\n \n         ### -*- coding: ISO-8859-1  -*-\n         \'\'\')\n-        self.failUnlessEqual(e, None)\n+        self.assertEqual(e, None)\n \n     def testVim(self):\n         e = guess_encoding(\'# vim:fileencoding=UTF-8\')\n-        self.failUnlessEqual(e, \'UTF-8\')\n+        self.assertEqual(e, \'UTF-8\')\n         e = guess_encoding(\'\'\'\n         ### vim:fileencoding=ISO-8859-1\n         \'\'\')\n-        self.failUnlessEqual(e, \'ISO-8859-1\')\n+        self.assertEqual(e, \'ISO-8859-1\')\n         e = guess_encoding(\'\'\'\n \n         ### vim:fileencoding= ISO-8859-1\n         \'\'\')\n-        self.failUnlessEqual(e, None)\n+        self.assertEqual(e, None)\n \n     def testXML(self):\n         e = guess_encoding(\'<?xml?>\')\n-        self.failUnlessEqual(e, \'UTF-8\')\n+        self.assertEqual(e, \'UTF-8\')\n         e = guess_encoding(\'\'\'<?xml version="1.0" encoding="ISO-8859-1" ?>\n         \'\'\')\n-        self.failUnlessEqual(e, \'ISO-8859-1\')\n+        self.assertEqual(e, \'ISO-8859-1\')\n         e = guess_encoding(\'\'\'<?xml version="1.0" encoding="ISO-8859-1"?>\n         \'\'\')\n-        self.failUnlessEqual(e, \'ISO-8859-1\')\n+        self.assertEqual(e, \'ISO-8859-1\')\n         e = guess_encoding(\'\'\'<?xml version="1.0" encoding="ISO-8859-1"?><truc encoding="UTF-8">\n         </truc>\n         \'\'\')\n-        self.failUnlessEqual(e, \'ISO-8859-1\')\n+        self.assertEqual(e, \'ISO-8859-1\')\n \n     def testHTML(self):\n         e = guess_encoding(\'\'\'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">\n@@ -74,7 +74,7 @@ def testHTML(self):\n charset=utf-8\n </body>\n </html> \'\'\')\n-        self.failUnlessEqual(e, \'iso-8859-1\')\n+        self.assertEqual(e, \'iso-8859-1\')\n \n     def test_broken_percent(self):\n         e = guess_encoding(\n@@ -90,4 +90,4 @@ def test_broken_percent(self):\n """\n         )\n         # unable to detect a valid encoding\n-        self.failUnlessEqual(e, None)\n+        self.assertEqual(e, None)\ndiff --git a/Products/MimetypesRegistry/tests/test_magic.py b/Products/MimetypesRegistry/tests/test_magic.py\nindex 1201bb8..c87ffce 100644\n--- a/Products/MimetypesRegistry/tests/test_magic.py\n+++ b/Products/MimetypesRegistry/tests/test_magic.py\n@@ -32,16 +32,16 @@ def test_guessMime(self):\n \n             # use method direct\n             got = guessMime(data)\n-            self.failUnlessEqual(got, expected)\n+            self.assertEqual(got, expected)\n \n             # use mtr-tool\n             got_from_tool = self.registry.classify(data)\n             self.assertTrue(isinstance(got_from_tool, MimeTypeItem))\n-            self.failUnlessEqual(str(got_from_tool), expected)\n+            self.assertEqual(str(got_from_tool), expected)\n \n             # now cut it to the first 8k if greater\n             if len(data) > 8192:\n                 data = data[:8192]\n                 got_cutted = self.registry.classify(data)\n                 self.assertTrue(isinstance(got_from_tool, MimeTypeItem))\n-                self.failUnlessEqual(str(got_cutted), expected)\n+                self.assertEqual(str(got_cutted), expected)\ndiff --git a/Products/MimetypesRegistry/tests/test_mimetypes.py b/Products/MimetypesRegistry/tests/test_mimetypes.py\nindex 87be910..a5d1544 100644\n--- a/Products/MimetypesRegistry/tests/test_mimetypes.py\n+++ b/Products/MimetypesRegistry/tests/test_mimetypes.py\n@@ -20,75 +20,75 @@ def setUp(self):\n     def testClassify(self):\n         reg = self.registry\n         c = reg._classifiers()\n-        self.failUnless(c[0].name().startswith("Extensible Markup Language"),\n+        self.assertTrue(c[0].name().startswith("Extensible Markup Language"),\n                         c[0].name())\n \n         # Real XML\n         data = "<?xml version=\'1.0\'?><foo>bar</foo>"\n         mt = reg.classify(data)\n-        self.failUnless(isinstance(mt, text_xml), str(mt))\n+        self.assertTrue(isinstance(mt, text_xml), str(mt))\n \n         # with leading whitespace (http://dev.plone.org/archetypes/ticket/622)\n         # still valid xml\n         data = " <?xml version=\'1.0\'?><foo>bar</foo>"\n         mt = reg.classify(data)\n-        self.failUnless(isinstance(mt, text_xml), str(mt))\n+        self.assertTrue(isinstance(mt, text_xml), str(mt))\n \n         # also #622: this is not xml\n         data = \'xml > plain text\'\n         mt = reg.classify(data)\n-        self.failUnless(str(mt) != \'text/xml\')\n+        self.assertTrue(str(mt) != \'text/xml\')\n \n         # Passed in MT\n         mt = reg.classify(data, mimetype="text/plain")\n-        self.failUnless(isinstance(mt, text_plain), str(mt))\n+        self.assertTrue(isinstance(mt, text_plain), str(mt))\n \n         # Passed in filename\n         mt = reg.classify(data, filename="test.xml")\n-        self.failUnless(isinstance(mt, text_xml), str(mt))\n+        self.assertTrue(isinstance(mt, text_xml), str(mt))\n         mt = reg.classify(data, filename="test.jpg")\n-        self.failUnlessEqual(str(mt), \'image/jpeg\')\n+        self.assertEqual(str(mt), \'image/jpeg\')\n \n         # Passed in uppercase filename\n         mt = reg.classify(data, filename="test.JPG")\n-        self.failUnlessEqual(str(mt), \'image/jpeg\')\n+        self.assertEqual(str(mt), \'image/jpeg\')\n \n         # use xml classifier\n         mt = reg.classify(\'<?xml ?>\')\n-        self.failUnless(isinstance(mt, text_xml), str(mt))\n+        self.assertTrue(isinstance(mt, text_xml), str(mt))\n \n         # test no data return default\n         mt = reg.classify(\'\')\n-        self.failUnless(isinstance(mt, text_plain), str(mt))\n+        self.assertTrue(isinstance(mt, text_plain), str(mt))\n         reg.defaultMimetype = \'text/xml\'\n         mt = reg.classify(\'\')\n-        self.failUnless(isinstance(mt, text_xml), str(mt))\n+        self.assertTrue(isinstance(mt, text_xml), str(mt))\n \n         # test unclassifiable data and no stream flag (filename)\n         mt = reg.classify(\'xxx\')\n-        self.failUnless(isinstance(mt, text_plain), str(mt))\n+        self.assertTrue(isinstance(mt, text_plain), str(mt))\n \n         # test unclassifiable data and file flag\n         mt = reg.classify(\'baz\', filename=\'xxx\')\n-        self.failUnless(isinstance(mt, application_octet_stream), str(mt))\n+        self.assertTrue(isinstance(mt, application_octet_stream), str(mt))\n \n     def testExtension(self):\n         reg = self.registry\n         data = "<foo>bar</foo>"\n         mt = reg.lookupExtension(filename="test.xml")\n-        self.failUnless(isinstance(mt, text_xml), str(mt))\n+        self.assertTrue(isinstance(mt, text_xml), str(mt))\n \n         mt = reg.classify(data, filename="test.foo")\n-        self.failUnless(isinstance(mt, application_octet_stream), str(mt))\n+        self.assertTrue(isinstance(mt, application_octet_stream), str(mt))\n \n         mt = reg.classify(data, filename="test.tgz")\n-        self.failUnlessEqual(str(mt), \'application/x-tar\')\n+        self.assertEqual(str(mt), \'application/x-tar\')\n \n         mt = reg.classify(data, filename="test.tar.gz")\n-        self.failUnlessEqual(str(mt), \'application/x-tar\')\n+        self.assertEqual(str(mt), \'application/x-tar\')\n \n         mt = reg.classify(data, filename="test.pdf.gz")\n-        self.failUnlessEqual(str(mt), \'application/pdf\')\n+        self.assertEqual(str(mt), \'application/pdf\')\n \n     def testFDOGlobs(self):\n         # The mime types here might only match if they match a glob on\n@@ -97,40 +97,40 @@ def testFDOGlobs(self):\n         reg = self.registry\n \n         mt = reg.classify(data, filename="test.ogg")\n-        self.failUnlessEqual(str(mt), \'audio/ogg\')\n+        self.assertEqual(str(mt), \'audio/ogg\')\n \n         mt = reg.classify(data, filename="test.docx")\n-        self.failUnlessEqual(str(mt), \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\')  # noqa\n+        self.assertEqual(str(mt), \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\')  # noqa\n \n         mt = reg.classify(data, filename="test.anim1")\n-        self.failUnlessEqual(str(mt), \'video/x-anim\')\n+        self.assertEqual(str(mt), \'video/x-anim\')\n \n         mt = reg.classify(data, filename="test.ini~")\n-        self.failUnlessEqual(str(mt), \'application/x-trash\')\n+        self.assertEqual(str(mt), \'application/x-trash\')\n \n         mt = reg.classify(data, filename="test.ini%")\n-        self.failUnlessEqual(str(mt), \'application/x-trash\')\n+        self.assertEqual(str(mt), \'application/x-trash\')\n \n         mt = reg.classify(data, filename="test.ini.bak")\n-        self.failUnlessEqual(str(mt), \'application/x-trash\')\n+        self.assertEqual(str(mt), \'application/x-trash\')\n \n         # TODO: wrongly recognized as text/plain...\n         # mt = reg.classify(data, filename="test.f90")\n-        # self.failUnlessEqual(str(mt), \'text/x-fortran\')\n+        # self.assertEqual(str(mt), \'text/x-fortran\')\n \n         mt = reg.classify(data, filename="test.f95")\n-        self.failUnlessEqual(str(mt), \'text/x-fortran\')\n+        self.assertEqual(str(mt), \'text/x-fortran\')\n \n         mt = reg.classify(data, filename="makefile")\n-        self.failUnlessEqual(str(mt), \'text/x-makefile\')\n+        self.assertEqual(str(mt), \'text/x-makefile\')\n \n         # Updated freedesktop.org.xml changed "Makefile" glob to "Makefile."\n         # See: https://bugs.freedesktop.org/show_bug.cgi?id=88625\n         # mt = reg.classify(data, filename="Makefile")\n-        # self.failUnlessEqual(str(mt), \'text/x-makefile\')\n+        # self.assertEqual(str(mt), \'text/x-makefile\')\n \n         mt = reg.classify(data, filename="AUTHORS")\n-        self.failUnlessEqual(str(mt), \'text/x-authors\')\n+        self.assertEqual(str(mt), \'text/x-authors\')\n \n         mt = reg.classify(data, filename="INSTALL")\n         self.assertTrue(\n@@ -141,7 +141,7 @@ def testFDOGlobs(self):\n     def testLookup(self):\n         reg = self.registry\n         mt = reg.lookup(\'text/plain\')\n-        self.failUnless(isinstance(mt[0], text_plain), str(mt[0]))\n+        self.assertTrue(isinstance(mt[0], text_plain), str(mt[0]))\n \n         # Test lookup of aliases in SMI database (see smi_mimetypes)\n         mt1 = reg.lookup(\'application/vnd.wordperfect\')\n@@ -149,27 +149,27 @@ def testLookup(self):\n         self.assertEqual(mt1, mt2)\n \n         mt = reg.lookup(\'text/notexistent\')\n-        self.failUnlessEqual(mt, ())\n+        self.assertEqual(mt, ())\n \n     def testAdaptMt(self):\n         data, filename, mt = self.registry(\'bar\', mimetype=\'text/xml\')\n         # this test that data has been adaped and file seeked to 0\n-        self.failUnlessEqual(data, \'bar\')\n-        self.failUnlessEqual(filename, None)\n-        self.failUnless(isinstance(mt, text_xml), str(mt))\n+        self.assertEqual(data, \'bar\')\n+        self.assertEqual(filename, None)\n+        self.assertTrue(isinstance(mt, text_xml), str(mt))\n \n     def testAdaptFile(self):\n         file = open(input_file_path("rest1.rst"))\n         data, filename, mt = self.registry(file)\n         # this test that data has been adaped and file seeked to 0\n-        self.failUnlessEqual(data, file.read())\n+        self.assertEqual(data, file.read())\n         file.close()\n-        self.failUnlessEqual(filename, "rest1.rst")\n+        self.assertEqual(filename, "rest1.rst")\n         self.assertEqual(str(mt), \'text/x-rst\')\n \n     def testAdaptData(self):\n         data, filename, mt = self.registry(\'<?xml ?>\')\n         # this test that data has been adaped and file seeked to 0\n-        self.failUnlessEqual(data, \'<?xml ?>\')\n-        self.failUnlessEqual(filename, None)\n-        self.failUnless(isinstance(mt, text_xml), str(mt))\n+        self.assertEqual(data, \'<?xml ?>\')\n+        self.assertEqual(filename, None)\n+        self.assertTrue(isinstance(mt, text_xml), str(mt))\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2018-08-14T21:18:30+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/5bb7cd885c5d4dd6fa102954c4f34ac6ded92b15

Merge pull request #15 from plone/python3

Python 3 Compatibility

Files changed:
A Products/MimetypesRegistry/testing.py
M CHANGES.rst
M Products/MimetypesRegistry/MimeTypeItem.py
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/mime_types/magic.py
M Products/MimetypesRegistry/mime_types/mtr_mimetypes.py
M Products/MimetypesRegistry/tests/test_encoding.py
M Products/MimetypesRegistry/tests/test_magic.py
M Products/MimetypesRegistry/tests/test_mimetypes.py

b'Content containing PDF or PS header bytes cannot be rendered from this domain for security reasons.'

