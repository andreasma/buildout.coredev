Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-06T13:43:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/1eadcfd0b4e9771d5907ed7f508fc275efc43609

use latest Plone 5.1

Files changed:
A requirements.txt
M .gitignore
M .travis.yml
M CHANGES.rst
M buildout.cfg
M setup.cfg
M setup.py
M travis.cfg
M versions.cfg
D bootstrap.py
D versions-staging.cfg

b'diff --git a/.gitignore b/.gitignore\nindex b546a05..855b1ca 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -13,7 +13,13 @@ bin\n buildout-cache\n develop-eggs\n dist\n+docs/make.bat\n+docs/Makefile\n etc\n+include\n+lib\n+local\n parts\n+pip-selfcheck.json\n var\n \ndiff --git a/.travis.yml b/.travis.yml\nindex 4ab876f..080876e 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -6,48 +6,53 @@ addons:\n     username: $SAUCE_USERNAME\n     access_key: $SAUCE_ACCESS_KEY\n cache:\n+  pip: true\n   directories:\n-  - eggs\n-install:\n-- python bootstrap.py -c travis.cfg\n-- bin/buildout -N -t 3 -c travis.cfg ${VERSIONS}\n-script: bin/test\n-after_script:\n-- cd docs && ./libdoc.sh && cd ..\n-- bin/sphinx-build docs/source docs/html\n-- bundle install\n-- bundle exec travis-artifacts upload --path parts/test\n-- bundle exec travis-artifacts upload --path docs/html\n-- bundle exec travis-artifacts upload --target-path latest --path docs/html\n-- bundle exec travis-artifacts upload --target-path latest --path parts/test\n-- \'echo "Sphinx: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/"\'\n-- \'echo "Robot: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/robot_report.html"\'\n-\n+    - eggs\n+    - downloads\n env:\n   global:\n-  - secure: YLol0TyHB+XAUbCzzjfc5JJ5AFqEi/GVhGphtAAcSv8+JY6MhTVVTjyCPeoK 2nT7tDhQRnYKOAMBmTuP/TUdzFqBf5LvjrFxvcjBawJMRW85kuYEuXsS8XEx C+lc1bbXSUPGA0x03tvSHIYbCowvVPZNUupxgRQdW2QLa5HcSuQ=\n-  - secure: YhG9gTzNMbQWiHLO6RU2J9btjB8L4X/QpKgu4c48XHYEf0Mwgxi5kKhZTTqp KY6/buwYhcBFWh0PQVC1b35lHHxI+bD4/d3v8xea7v670COdP0zMrgjXlSLn bfV7g3/doSmAUtbEyUQdfzmWS8kyst0div6XzpWtR3cl6lP6Tfo=\n-  - secure: AOFoFixluD1YzjtKuNLClALcpH6YpJyxZYfx8QVs0SQ3aDJRc53lVw2e0YKpghGSuuHm75cAKbmZVJVYT/qgYFdZfah6+amKFRgTVDsGEnGIGcL8+z43n+y3b1NZotwPXXZz4hboFLL4FknuEymGmKl4ZJdpQFcf+36iylg2KFQ=\n-  - secure: eK2r6iQU0M8tq2qC+SpoqJJmtyBa8Okdr5DjlrAa4efuA7fiIzsfvSfcTcb9zQ0T+7cbOoGiEFQVFcat0uSY49fAZcxTjJakjYC1plwBfQl/StQGHZIlx+oy2GZTthi6UWAVYeC6NmLTqBtoGxVvCMp6+LtNhzd2Fc4MUHrafqQ=\n-  - ARTIFACTS_S3_BUCKET=plone.app.robotframework\n-  - ROBOT_BUILD_NUMBER=travis-$TRAVIS_BUILD_NUMBER\n-  - ROBOT_REMOTE_URL=http://$SAUCE_USERNAME:$SAUCE_ACCESS_KEY@ondemand.saucelabs.com:80/wd/hub\n+    - secure: YLol0TyHB+XAUbCzzjfc5JJ5AFqEi/GVhGphtAAcSv8+JY6MhTVVTjyCPeoK 2nT7tDhQRnYKOAMBmTuP/TUdzFqBf5LvjrFxvcjBawJMRW85kuYEuXsS8XEx C+lc1bbXSUPGA0x03tvSHIYbCowvVPZNUupxgRQdW2QLa5HcSuQ=\n+    - secure: YhG9gTzNMbQWiHLO6RU2J9btjB8L4X/QpKgu4c48XHYEf0Mwgxi5kKhZTTqp KY6/buwYhcBFWh0PQVC1b35lHHxI+bD4/d3v8xea7v670COdP0zMrgjXlSLn bfV7g3/doSmAUtbEyUQdfzmWS8kyst0div6XzpWtR3cl6lP6Tfo=\n+    - secure: AOFoFixluD1YzjtKuNLClALcpH6YpJyxZYfx8QVs0SQ3aDJRc53lVw2e0YKpghGSuuHm75cAKbmZVJVYT/qgYFdZfah6+amKFRgTVDsGEnGIGcL8+z43n+y3b1NZotwPXXZz4hboFLL4FknuEymGmKl4ZJdpQFcf+36iylg2KFQ=\n+    - secure: eK2r6iQU0M8tq2qC+SpoqJJmtyBa8Okdr5DjlrAa4efuA7fiIzsfvSfcTcb9zQ0T+7cbOoGiEFQVFcat0uSY49fAZcxTjJakjYC1plwBfQl/StQGHZIlx+oy2GZTthi6UWAVYeC6NmLTqBtoGxVvCMp6+LtNhzd2Fc4MUHrafqQ=\n+    - ARTIFACTS_S3_BUCKET=plone.app.robotframework\n+    - ROBOT_BUILD_NUMBER=travis-$TRAVIS_BUILD_NUMBER\n+    - ROBOT_REMOTE_URL=http://$SAUCE_USERNAME:$SAUCE_ACCESS_KEY@ondemand.saucelabs.com:80/wd/hub\n   matrix:\n-  - ROBOT_BROWSER=firefox ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n-  - ROBOT_BROWSER=chrome ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n-  - ROBOT_BROWSER=ie ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+    - ROBOT_BROWSER=firefox ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+    - ROBOT_BROWSER=chrome ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+    - ROBOT_BROWSER=ie ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n matrix:\n   allow_failures:\n-  - env: ROBOT_BROWSER=ie ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+    - env: ROBOT_BROWSER=ie ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+install:\n+  - virtualenv -p `which python` .\n+  - bin/pip install -r requirements.txt\n+  - bin/buildout -N buildout:download-cache=downloads code-analysis:return-status-codes=True annotate\n+  - bin/buildout -N -t 3 -c travis.cfg buildout:download-cache=downloads code-analysis:return-status-codes=True\n+  - bin/buildout -N -t 3 -c travis.cfg\n+script:\n+  - bin/test\n+after_script:\n+  - cd docs && ./libdoc.sh && cd ..\n+  - bin/sphinx-build docs/source docs/html\n+  - bundle install\n+  - bundle exec travis-artifacts upload --path parts/test\n+  - bundle exec travis-artifacts upload --path docs/html\n+  - bundle exec travis-artifacts upload --target-path latest --path docs/html\n+  - bundle exec travis-artifacts upload --target-path latest --path parts/test\n+  - \'echo "Sphinx: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/"\'\n+  - \'echo "Robot: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/robot_report.html"\'\n \n notifications:\n   irc:\n     channels:\n-    - irc.freenode.org#plone-testing\n+      - irc.freenode.org#plone-testing\n     template:\n-    - "%{repository}#%{build_number} (%{branch} | %{commit} | %{author}): %{message}"\n-#   - "Change: %{compare_url}"\n-#   - "Details: %{build_url}"\n-    - "Robot: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/%{build_number}/%{build_number}.1/robot_report.html"\n-    - "Sphinx: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/%{build_number}/%{build_number}.1/"\n-    - "Latest: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/latest/"\n+      - "%{repository}#%{build_number} (%{branch} | %{commit} | %{author}): %{message}"\n+#      - "Change: %{compare_url}"\n+#      - "Details: %{build_url}"\n+      - "Robot: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/%{build_number}/%{build_number}.1/robot_report.html"\n+      - "Sphinx: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/%{build_number}/%{build_number}.1/"\n+      - "Latest: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/latest/"\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 9e025c0..01b895d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix Travis CI setup.\n+  [jensens]\n \n \n 1.2.1 (2018-06-22)\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\nindex c4dd707..3026c2e 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,6 +1,6 @@\n [buildout]\n extends =\n-    https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-4.3.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.1.x.cfg\n     versions.cfg\n parts +=\n     docs\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..bba2416\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,2 @@\n+setuptools==33.1.1\n+zc.buildout==2.12.1\ndiff --git a/setup.cfg b/setup.cfg\nindex af0d9e3..3d06ecd 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -12,3 +12,12 @@ ignore =\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 79\n+not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex c3f04eb..0df88d1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -67,7 +67,7 @@ def indent(line):\n         \'argparse\',\n         \'decorator\',   # required by r.selenium2library on Python 2.6.x\n         \'simplejson\',  # required for SauceLabs-keywords on Python 2.6.x\n-        ])\n+    ])\n \n test_requires = [\n     \'plone.app.dexterity\',\ndiff --git a/travis.cfg b/travis.cfg\nindex 93a4f9f..57c1900 100644\n--- a/travis.cfg\n+++ b/travis.cfg\n@@ -1,10 +1,13 @@\n [buildout]\n-extends = buildout.cfg\n-parts = docs libdoc test\n+extends =\n+    buildout.cfg\n+\n+parts =\n+    docs\n+    libdoc\n+    test\n \n [test]\n eggs =\n-    Pillow\n-    Products.CMFPlacefulWorkflow\n     plone.app.robotframework [test,speak]\n defaults = [\'--auto-color\', \'--auto-progress\', \'-s\', \'plone.app.robotframework\']\ndiff --git a/versions-staging.cfg b/versions-staging.cfg\ndeleted file mode 100644\nindex 74417bc..0000000\n--- a/versions-staging.cfg\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# Good known versions for plone.app.robotframework and friends\n-[versions]\n-Pygments = 2.0.2\n-plone.app.robotframework = 1.1\n-robotframework = 3.0\n-robotframework-selenium2library = 1.7.4\n-robotframework-selenium2screenshots = 0.7.0\n-robotsuite = 1.7.0\n-selenium = 2.53.6\n-sphinxcontrib-robotframework = 0.7.0\ndiff --git a/versions.cfg b/versions.cfg\nindex 74417bc..15e60f0 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -1,10 +1,14 @@\n-# Good known versions for plone.app.robotframework and friends\n [versions]\n-Pygments = 2.0.2\n-plone.app.robotframework = 1.1\n-robotframework = 3.0\n-robotframework-selenium2library = 1.7.4\n-robotframework-selenium2screenshots = 0.7.0\n-robotsuite = 1.7.0\n-selenium = 2.53.6\n-sphinxcontrib-robotframework = 0.7.0\n+# Good known versions for plone.app.robotframework and friends\n+\n+# THOSE ARE PART OF PLONE COREDEV BUILDOUT\n+# NEWER VERSIONS CAN BE TESTED HERE FOR BRANCHES BUT NEED AN UPDATE OF\n+# BUILDOUT COREDEV DIRECTLY AFTER MERGE\n+\n+# Pygments = 2.0.2\n+# robotframework = 3.0\n+# robotframework-selenium2library = 1.7.4\n+# robotframework-selenium2screenshots = 0.7.0\n+# robotsuite = 1.7.0\n+# selenium = 2.53.6\n+# sphinxcontrib-robotframework = 0.7.0\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-06T13:43:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/7a128f2ee4ba88454a55de76458527eecbcadff9

make it work with mergd plone.login

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/keywords.robot

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 01b895d..643f0f5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,9 @@ New features:\n \n Bug fixes:\n \n+- Make robotframework work with merged ``plone.login``.\n+  [jensens]\n+\n - Fix Travis CI setup.\n   [jensens]\n \ndiff --git a/src/plone/app/robotframework/keywords.robot b/src/plone/app/robotframework/keywords.robot\nindex 675c713..520898a 100644\n--- a/src/plone/app/robotframework/keywords.robot\n+++ b/src/plone/app/robotframework/keywords.robot\n@@ -67,10 +67,10 @@ Log in\n     Go to  ${PLONE_URL}/login_form\n     Page should contain element  __ac_name\n     Page should contain element  __ac_password\n-    Page should contain element  xpath: //input[contains(text(), "Log in")]\n+    Page should contain element  css=input[value="Log in"]\n     Input text for sure  __ac_name  ${userid}\n     Input text for sure  __ac_password  ${password}\n-    Click Button  xpath: //input[contains(text(), "Log in")]\n+    Click Element  css=input[value="Log in"]\n \n Log in as test user\n \n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-06T14:05:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/6c7994ebe3b07fd1b7449bdbeefb0b1772688780

Fix RemoteLibrary i18n to work proper with registry based settings

Files changed:
M CHANGES.rst
M src/plone/app/robotframework/i18n.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 643f0f5..c205031 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,6 +14,9 @@ New features:\n \n Bug fixes:\n \n+- Fix RemoteLibrary ``i18n`` to work proper with registry based settings.\n+  [jensens]\n+\n - Make robotframework work with merged ``plone.login``.\n   [jensens]\n \ndiff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py\nindex 01a00fc..2ad7f0e 100644\n--- a/src/plone/app/robotframework/i18n.py\n+++ b/src/plone/app/robotframework/i18n.py\n@@ -1,25 +1,34 @@\n # -*- coding: utf-8 -*-\n-import os\n-\n-from Products.CMFCore.utils import getToolByName\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.i18n import translate\n \n+import os\n+\n \n class I18N(RemoteLibrary):\n \n     def set_default_language(self, language=None):\n         """Change portal default language"""\n         disableCSRFProtection()\n-        portal = getSite()\n-        portal_languages = getToolByName(portal, \'portal_languages\')\n         if language is None:\n             language = os.environ.get(\'LANGUAGE\') or \'en\'\n-        setattr(portal, \'language\', language)\n-        portal_languages.setDefaultLanguage(language)\n+        try:\n+            from Products.CMFPlone.interfaces import ILanguageSchema\n+        except ImportError:\n+            portal = getSite()\n+            return portal.portal_properties.site_properties.setProperty(\n+                \'default_language\',\n+                language,\n+            )\n+        else:\n+            registry = getUtility(IRegistry)\n+            settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+            settings.default_language = language\n \n     def translate(self, msgid, *args, **kwargs):\n         """Return localized string for given msgid"""\n@@ -31,13 +40,15 @@ def translate(self, msgid, *args, **kwargs):\n \n         mapping = {}\n         for key, value in kwargs.items():\n-            if not key in (\'target_language\', \'domain\', \'default\'):\n+            if key not in (\'target_language\', \'domain\', \'default\'):\n                 mapping[key] = value\n         if kwargs.get(\'target_language\'):\n             return translate(\n-                msgid, target_langauge=kwargs.get(\'target_language\'),\n+                msgid,\n+                target_langauge=kwargs.get(\'target_language\'),\n                 domain=kwargs.get(\'domain\') or \'plone\',\n-                default=kwargs.get(\'default\') or msgid, mapping=mapping)\n+                default=kwargs.get(\'default\') or msgid, mapping=mapping\n+            )\n         else:\n             # XXX: Should self.REQUEST be replaced with\n             # zope.globalrequest.getRequest()?\n@@ -45,4 +56,5 @@ def translate(self, msgid, *args, **kwargs):\n             return translate(\n                 msgid, context=request,\n                 domain=kwargs.get(\'domain\') or \'plone\',\n-                default=kwargs.get(\'default\') or msgid, mapping=mapping)\n\\ No newline at end of file\n+                default=kwargs.get(\'default\') or msgid, mapping=mapping\n+            )\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-06T15:05:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/a7beaed3081d544e44dd94dc357e18cc707c0399

fix to work with plone 5. its time.

Files changed:
M CHANGES.rst
M CONTRIBUTORS.rst
M setup.py
M src/plone/app/robotframework/keywords.robot
M src/plone/app/robotframework/testing.py
M src/plone/app/robotframework/tests/test_autologin_library.robot
M src/plone/app/robotframework/tests/test_content.py
M src/plone/app/robotframework/tests/test_robot.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c205031..dd437b3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,19 +1,22 @@\n Changelog\n =========\n \n-1.2.2 (unreleased)\n+1.3.0 (unreleased)\n ------------------\n \n Breaking changes:\n \n-- *add item here*\n+- Skip Support for Plone 4.x.\n+  [jensens]\n \n New features:\n \n-- *add item here*\n \n Bug fixes:\n \n+- Support for Plone 5.x toolbar, i18n, ...\n+  [jensens]\n+\n - Fix RemoteLibrary ``i18n`` to work proper with registry based settings.\n   [jensens]\n \ndiff --git a/CONTRIBUTORS.rst b/CONTRIBUTORS.rst\nindex 71b2897..57ac9e1 100644\n--- a/CONTRIBUTORS.rst\n+++ b/CONTRIBUTORS.rst\n@@ -12,6 +12,7 @@\n - Godefroid Chapelle\n - Hector Velarde\n - Jean-Michel Francois\n+- Jens Klein\n - Johan Beyers\n - Johannes Raggam\n - Jonas Baumann\ndiff --git a/setup.py b/setup.py\nindex 0df88d1..b0f78eb 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n \n import sys\n \n-version = \'1.2.2.dev0\'\n+version = \'1.3.0.dev0\'\n \n \n def indented(filename):\ndiff --git a/src/plone/app/robotframework/keywords.robot b/src/plone/app/robotframework/keywords.robot\nindex 520898a..e08eb83 100644\n--- a/src/plone/app/robotframework/keywords.robot\n+++ b/src/plone/app/robotframework/keywords.robot\n@@ -128,16 +128,13 @@ Should be above\n Open Menu\n     [Arguments]  ${elementId}\n \n-    Element Should Be Visible  css=dl#${elementId} span\n-    Element Should Not Be Visible  css=dl#${elementId} dd.actionMenuContent\n-    Click link  css=dl#${elementId} dt.actionMenuHeader a\n-    Wait until keyword succeeds  1  5  Element Should Be Visible  css=dl#${elementId} dd.actionMenuContent\n+    Element Should Be Visible  css=#${elementId} span\n+    Element Should Not Be Visible  css=#${elementId} .plone-toolbar-submenu-header\n+    Click link  css=#${elementId} a\n+    Wait Until Element Is Visible  css=#${elementId} .plone-toolbar-submenu-header\n \n Open User Menu\n-    Element Should Be Visible  css=dl#portal-personaltools a\n-    Element Should Not Be Visible  css=dl#portal-personaltools dd.actionMenuContent\n-    Click link  css=dl#portal-personaltools dt.actionMenuHeader a\n-    Wait until keyword succeeds  1  5  Element Should Be Visible  css=dl#portal-personaltools dd.actionMenuContent\n+    Open Menu  portal-personal-tools\n \n Open Add New Menu\n     Open Menu  plone-contentmenu-factories\n@@ -160,7 +157,6 @@ Click Action by id\n     [arguments]  ${name}\n \n     Open Action Menu\n-    Element Should be visible  css=dl#plone-contentmenu-actions dd.actionMenuContent  #plone-contentmenu-actions-${name}\n     Click Link  id=plone-contentmenu-actions-${name}\n \n Click Cut Action\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex b1a267c..25ee8d2 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -41,33 +41,48 @@\n     HAS_SPEAKJS = True\n \n \n-\n-\n class SimplePublicationLayer(Layer):\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUp(self):\n         with ploneSite() as portal:\n+            applyProfile(portal, \'plone.app.contenttypes:default\')\n             portal.portal_workflow.setDefaultChain(\n-                \'simple_publication_workflow\')\n+                \'simple_publication_workflow\'\n+            )\n \n     def tearDown(self):\n         with ploneSite() as portal:\n             portal.portal_workflow.setDefaultChain(\'\')\n \n+\n SIMPLE_PUBLICATION_FIXTURE = SimplePublicationLayer()\n \n \n+class SimplePublicationWithTypesLayer(Layer):\n+\n+    defaultBases = (SIMPLE_PUBLICATION_FIXTURE,)\n+\n+    def setUp(self):\n+        with ploneSite() as portal:\n+            applyProfile(portal, \'plone.app.contenttypes:default\')\n+\n+\n+SIMPLE_PUBLICATION_WITH_TYPES_FIXTURE = SimplePublicationLayer()\n+\n+\n class MockMailHostLayer(Layer):\n     """Layer for setting up a MockMailHost to store all sent messages as\n     strings into a list at portal.MailHost.messages\n     """\n+\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUp(self):\n         # Note: CMFPlone can be imported safely only when a certain\n         # zope.testing-set environment variable is in place.\n         from Products.CMFPlone.tests import utils\n+\n         with ploneSite() as portal:\n             portal.email_from_address = \'noreply@example.com\'\n             portal.email_from_name = \'Plone Site\'\n@@ -85,8 +100,10 @@ def tearDown(self):\n                 portal.MailHost = portal._original_MailHost\n                 sm = getSiteManager(context=portal)\n                 sm.unregisterUtility(provided=IMailHost)\n-                sm.registerUtility(aq_base(portal._original_MailHost),\n-                                   provided=IMailHost)\n+                sm.registerUtility(\n+                    aq_base(portal._original_MailHost), provided=IMailHost\n+                )\n+\n \n MOCK_MAILHOST_FIXTURE = MockMailHostLayer()\n \n@@ -94,15 +111,22 @@ def tearDown(self):\n AUTOLOGIN_LIBRARY_FIXTURE = RemoteLibraryLayer(\n     bases=(PLONE_FIXTURE,),\n     libraries=(AutoLogin,),\n-    name="AutoLoginRemoteLibrary:RobotRemote"\n+    name="AutoLoginRemoteLibrary:RobotRemote",\n )\n \n REMOTE_LIBRARY_BUNDLE_FIXTURE = RemoteLibraryLayer(\n     bases=(PLONE_FIXTURE,),\n-    libraries=(AutoLogin, QuickInstaller, GenericSetup,\n-               Content, Users, I18N, MockMailHost,\n-               Zope2ServerRemote),\n-    name="RemoteLibraryBundle:RobotRemote"\n+    libraries=(\n+        AutoLogin,\n+        QuickInstaller,\n+        GenericSetup,\n+        Content,\n+        Users,\n+        I18N,\n+        MockMailHost,\n+        Zope2ServerRemote,\n+    ),\n+    name="RemoteLibraryBundle:RobotRemote",\n )\n \n #\n@@ -120,36 +144,58 @@ def tearDown(self):\n \n RobotRemote = type(\n     \'RobotRemote\',\n-    (AutoLogin, QuickInstaller, GenericSetup,\n-     Content, Users, I18N, MockMailHost,\n-     Zope2ServerRemote),\n-    {\'__doc__\': \'Robot Framework remote library\',\n-                \'id\': \'RobotRemote\'})()\n+    (\n+        AutoLogin,\n+        QuickInstaller,\n+        GenericSetup,\n+        Content,\n+        Users,\n+        I18N,\n+        MockMailHost,\n+        Zope2ServerRemote,\n+    ),\n+    {\'__doc__\': \'Robot Framework remote library\', \'id\': \'RobotRemote\'},\n+)()\n \n REMOTE_LIBRARY_ROBOT_TESTING = FunctionalTesting(\n-    bases=(SIMPLE_PUBLICATION_FIXTURE,\n-           REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="RemoteLibrary:Robot"\n+    bases=(\n+        SIMPLE_PUBLICATION_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name="RemoteLibrary:Robot",\n )\n \n AUTOLOGIN_ROBOT_TESTING = FunctionalTesting(\n     bases=(AUTOLOGIN_LIBRARY_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="AutoLogin:Robot"\n+    name="AutoLogin:Robot",\n )\n \n SIMPLE_PUBLICATION_ROBOT_TESTING = FunctionalTesting(\n-    bases=(SIMPLE_PUBLICATION_FIXTURE,\n-           REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="SimplePublication:Robot"\n+    bases=(\n+        SIMPLE_PUBLICATION_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name="SimplePublication:Robot",\n+)\n+\n+SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING = FunctionalTesting(\n+    bases=(\n+        SIMPLE_PUBLICATION_WITH_TYPES_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name="SimplePublicationWithTypes:Robot",\n )\n \n \n class PloneRobotFixture(PloneSandboxLayer):\n-    defaultBases = (SIMPLE_PUBLICATION_FIXTURE,\n-                    MOCK_MAILHOST_FIXTURE,\n-                    REMOTE_LIBRARY_BUNDLE_FIXTURE)\n+    defaultBases = (\n+        SIMPLE_PUBLICATION_FIXTURE,\n+        MOCK_MAILHOST_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+    )\n \n     def _get_robot_variable(self, name):\n         """Return robot list variable either from robot instance or\n@@ -170,35 +216,37 @@ def setUpZope(self, app, configurationContext):\n         for locales in self._get_robot_variable(\'REGISTER_TRANSLATIONS\'):\n             if locales and os.path.isdir(locales):\n                 from zope.i18n.zcml import registerTranslations\n+\n                 registerTranslations(configurationContext, locales)\n                 self[\'state\'].append(locales)\n \n         for name in self._get_robot_variable(\'META_PACKAGES\'):\n-            if not name in sys.modules:\n+            if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n-            xmlconfig.file(\'meta.zcml\', package,\n-                           context=configurationContext)\n+            xmlconfig.file(\'meta.zcml\', package, context=configurationContext)\n             self[\'state\'].append(name)\n \n         for name in self._get_robot_variable(\'CONFIGURE_PACKAGES\'):\n-            if not name in sys.modules:\n+            if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n-            xmlconfig.file(\'configure.zcml\', package,\n-                           context=configurationContext)\n+            xmlconfig.file(\n+                \'configure.zcml\', package, context=configurationContext\n+            )\n             self[\'state\'].append(name)\n \n         for name in self._get_robot_variable(\'OVERRIDE_PACKAGES\'):\n-            if not name in sys.modules:\n+            if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n             xmlconfig.includeOverrides(\n-                configurationContext, \'overrides.zcml\', package=package)\n+                configurationContext, \'overrides.zcml\', package=package\n+            )\n             self[\'state\'].append(name)\n \n         for name in self._get_robot_variable(\'INSTALL_PRODUCTS\'):\n-            if not name in sys.modules:\n+            if name not in sys.modules:\n                 __import__(name)\n             z2.installProduct(app, name)\n             self[\'state\'].append(name)\n@@ -215,38 +263,42 @@ def setUp(self):\n         class Value:\n             __repr__ = lambda x: str(bool(x))\n             __nonzero__ = lambda x: self.get(\'state\', []) != (\n-                self._get_robot_variable(\'REGISTER_TRANSLATIONS\') +\n-                self._get_robot_variable(\'META_PACKAGES\') +\n-                self._get_robot_variable(\'CONFIGURE_PACKAGES\') +\n-                self._get_robot_variable(\'OVERRIDE_PACKAGES\') +\n-                self._get_robot_variable(\'INSTALL_PRODUCTS\') +\n-                self._get_robot_variable(\'APPLY_PROFILES\')\n+                self._get_robot_variable(\'REGISTER_TRANSLATIONS\')\n+                + self._get_robot_variable(\'META_PACKAGES\')\n+                + self._get_robot_variable(\'CONFIGURE_PACKAGES\')\n+                + self._get_robot_variable(\'OVERRIDE_PACKAGES\')\n+                + self._get_robot_variable(\'INSTALL_PRODUCTS\')\n+                + self._get_robot_variable(\'APPLY_PROFILES\')\n             )\n+\n         self[\'dirty\'] = Value()\n \n \n PLONE_ROBOT_FIXTURE = PloneRobotFixture()\n \n PLONE_ROBOT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_ROBOT_FIXTURE,),\n-    name="PloneRobot:Integration"\n+    bases=(PLONE_ROBOT_FIXTURE,), name="PloneRobot:Integration"\n )\n \n PLONE_ROBOT_TESTING = FunctionalTesting(\n-    bases=(PLONE_ROBOT_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="Plone:Robot"\n+    bases=(PLONE_ROBOT_FIXTURE, z2.ZSERVER_FIXTURE), name="Plone:Robot"\n )\n \n \n if HAS_SPEAKJS:\n+\n     class SpeakJSLayer(Layer):\n \n         defaultBases = (PLONE_FIXTURE,)\n \n         def setUp(self):\n             import collective.js.speakjs\n-            xmlconfig.file(\'configure.zcml\', collective.js.speakjs,\n-                           context=self[\'configurationContext\'])\n+\n+            xmlconfig.file(\n+                \'configure.zcml\',\n+                collective.js.speakjs,\n+                context=self[\'configurationContext\'],\n+            )\n \n             with ploneSite() as portal:\n                 applyProfile(portal, \'collective.js.speakjs:default\')\n@@ -254,10 +306,12 @@ def setUp(self):\n     SPEAKJS_FIXTURE = SpeakJSLayer()\n \n     SPEAKJS_ROBOT_TESTING = FunctionalTesting(\n-        bases=(SPEAKJS_FIXTURE,\n-               MOCK_MAILHOST_FIXTURE,\n-               SIMPLE_PUBLICATION_FIXTURE,\n-               REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-               z2.ZSERVER_FIXTURE),\n-        name="SpeakJS:Robot"\n+        bases=(\n+            SPEAKJS_FIXTURE,\n+            MOCK_MAILHOST_FIXTURE,\n+            SIMPLE_PUBLICATION_FIXTURE,\n+            REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+            z2.ZSERVER_FIXTURE,\n+        ),\n+        name="SpeakJS:Robot",\n     )\ndiff --git a/src/plone/app/robotframework/tests/test_autologin_library.robot b/src/plone/app/robotframework/tests/test_autologin_library.robot\nindex 5efc38f..c31f39a 100644\n--- a/src/plone/app/robotframework/tests/test_autologin_library.robot\n+++ b/src/plone/app/robotframework/tests/test_autologin_library.robot\n@@ -50,7 +50,7 @@ I\'m logged in as a \'${ROLE}\'\n     Go to  ${PLONE_URL}\n \n I open the personal menu\n-    Click link  css=#user-name\n+    Click link  css=#portal-personaltools > a\n \n I see the Site Setup -link\n     Element should be visible  css=#personaltools-plone_setup\ndiff --git a/src/plone/app/robotframework/tests/test_content.py b/src/plone/app/robotframework/tests/test_content.py\nindex abe5f54..21a78ac 100644\n--- a/src/plone/app/robotframework/tests/test_content.py\n+++ b/src/plone/app/robotframework/tests/test_content.py\n@@ -1,8 +1,7 @@\n-from Products.CMFCore.utils import getToolByName\n+from plone.app.robotframework.testing import PLONE_ROBOT_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.robotframework.testing import \\\n-    PLONE_ROBOT_INTEGRATION_TESTING\n+from Products.CMFCore.utils import getToolByName\n \n import unittest\n \ndiff --git a/src/plone/app/robotframework/tests/test_robot.py b/src/plone/app/robotframework/tests/test_robot.py\nindex 05d3487..54fca8c 100644\n--- a/src/plone/app/robotframework/tests/test_robot.py\n+++ b/src/plone/app/robotframework/tests/test_robot.py\n@@ -1,7 +1,13 @@\n # -*- coding: utf-8 -*-\n-import unittest\n+from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n+# from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\n+from plone.app.robotframework.testing import SIMPLE_PUBLICATION_ROBOT_TESTING\n+from plone.app.robotframework.testing import SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING  # noqa: E501\n+from plone.testing import layered\n \n import pkg_resources\n+import robotsuite\n+import unittest\n \n try:\n     pkg_resources.get_distribution(\'collective.js.speakjs\')\n@@ -10,45 +16,49 @@\n else:\n     HAS_SPEAKJS = True\n \n-import robotsuite\n-from plone.app.robotframework.testing import (\n-    REMOTE_LIBRARY_ROBOT_TESTING,\n-    SIMPLE_PUBLICATION_ROBOT_TESTING,\n-    PLONE_ROBOT_TESTING\n-)\n-from plone.testing import layered\n-\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(robotsuite.RobotTestSuite(\n-                "test_autologin_library.robot"),\n-                layer=SIMPLE_PUBLICATION_ROBOT_TESTING),\n-        layered(robotsuite.RobotTestSuite(\n-                "test_content_library.robot"),\n-                layer=SIMPLE_PUBLICATION_ROBOT_TESTING),\n-#       layered(robotsuite.RobotTestSuite(\n-#               "test_quickinstaller_library.robot"),\n-#               layer=REMOTE_LIBRARY_ROBOT_TESTING),\n-        layered(robotsuite.RobotTestSuite(\n-                "test_i18n_library.robot"),\n-                layer=PLONE_ROBOT_TESTING),\n-        layered(robotsuite.RobotTestSuite(\n-                "test_users_library.robot"),\n-                layer=PLONE_ROBOT_TESTING),\n-        layered(robotsuite.RobotTestSuite(\n-                "docs"),\n-                layer=PLONE_ROBOT_TESTING),\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                robotsuite.RobotTestSuite("test_autologin_library.robot"),\n+                layer=SIMPLE_PUBLICATION_ROBOT_TESTING,\n+            ),\n+            layered(\n+                robotsuite.RobotTestSuite("test_content_library.robot"),\n+                layer=SIMPLE_PUBLICATION_ROBOT_TESTING,\n+            ),\n+            # layered(\n+            #     robotsuite.RobotTestSuite("test_quickinstaller_library.robot"),\n+            #     layer=REMOTE_LIBRARY_ROBOT_TESTING,\n+            # ),\n+            layered(\n+                robotsuite.RobotTestSuite("test_i18n_library.robot"),\n+                layer=PLONE_ROBOT_TESTING,\n+            ),\n+            layered(\n+                robotsuite.RobotTestSuite("test_users_library.robot"),\n+                layer=PLONE_ROBOT_TESTING,\n+            ),\n+            layered(\n+                robotsuite.RobotTestSuite("docs"), layer=PLONE_ROBOT_TESTING\n+            ),\n+        ]\n+    )\n \n     if HAS_SPEAKJS:\n         from plone.app.robotframework.testing import SPEAKJS_ROBOT_TESTING\n \n-        suite.addTests([\n-            layered(robotsuite.RobotTestSuite(\n-                    "test_speakjs_library.robot",\n-                    noncritical=[\'non-critical\']),\n-                    layer=SPEAKJS_ROBOT_TESTING),\n-        ])\n+        suite.addTests(\n+            [\n+                layered(\n+                    robotsuite.RobotTestSuite(\n+                        "test_speakjs_library.robot",\n+                        noncritical=[\'non-critical\'],\n+                    ),\n+                    layer=SPEAKJS_ROBOT_TESTING,\n+                )\n+            ]\n+        )\n     return suite\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-06T15:33:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/c6b5fefc9cb951d3a97361cf647ae4a762818f46

fiz autologin tests and related keywords

Files changed:
M src/plone/app/robotframework/keywords.robot
M src/plone/app/robotframework/tests/test_autologin_library.robot

b'diff --git a/src/plone/app/robotframework/keywords.robot b/src/plone/app/robotframework/keywords.robot\nindex e08eb83..d2ca5e4 100644\n--- a/src/plone/app/robotframework/keywords.robot\n+++ b/src/plone/app/robotframework/keywords.robot\n@@ -242,20 +242,17 @@ Add news item\n \n Displayed content title should be\n     [arguments]  ${title}\n-    Page should contain element  xpath=//*[contains(., "${title}")][@id=\'parent-fieldname-title\']\n+    Page should contain element  xpath=//header/h1[contains(., "${title}")]\n \n Add content\n+    # DEXTERITY content only\n     [arguments]  ${content_type}  ${title}\n     Open add new menu\n-\n-    ${status} =  Run Keyword And Return Status  Click Link\n-    ...  css=#plone-contentmenu-factories a.contenttype-${content_type}\n-    Run keyword if  ${status} != True  Click Link  ${content_type}\n-\n-    Page Should Contain Element  css=#archetypes-fieldname-title input\n-    Input Text  title  ${title}\n-    Click button  name=form.button.save\n-    Page Should Contain  Changes saved.\n+    Click Link  ${content_type}\n+    Wait until page contains element  css=#form-widgets-IDublinCore-title\n+    Input Text  form.widgets.IDublinCore.title  ${title}\n+    Click button  name=form.buttons.save\n+    Wait until page contains  Item created\n     Page should contain  ${title}\n     Displayed content title should be  ${title}\n     ${location} =  Get Location\ndiff --git a/src/plone/app/robotframework/tests/test_autologin_library.robot b/src/plone/app/robotframework/tests/test_autologin_library.robot\nindex c31f39a..dd4852a 100644\n--- a/src/plone/app/robotframework/tests/test_autologin_library.robot\n+++ b/src/plone/app/robotframework/tests/test_autologin_library.robot\n@@ -65,7 +65,6 @@ I can add a new folder\n     Add folder  New folder\n     Go to  ${PLONE_URL}/new-folder\n     Page should contain  New folder\n-    Element should contain  css=.documentAuthor  Contributor\n \n I\'ve created a test folder\n     Enable autologin as  Contributor\n@@ -74,7 +73,6 @@ I\'ve created a test folder\n     Add folder  Test folder\n     Go to  ${PLONE_URL}/test-folder\n     Page should contain  Test folder\n-    Element should contain  css=.documentAuthor  Authenticated\n \n I\'m logged in as an \'Authenticated\'\n     Enable autologin as  Authenticated\n@@ -89,7 +87,6 @@ I can add a sub-folder\n     Add folder  Sub folder\n     Go to  ${PLONE_URL}/test-folder/sub-folder\n     Page should contain  Sub folder\n-    Element should contain  css=.documentAuthor  Authenticated\n \n Someone else has created a test folder\n     Enable autologin as  Contributor\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-06T15:44:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/021cd5e7c785845c17afccadccbe018c0b5cc388

fix example

Files changed:
M src/plone/app/robotframework/keywords.robot
M src/plone/app/robotframework/tests/docs/test_keywords.robot

b'diff --git a/src/plone/app/robotframework/keywords.robot b/src/plone/app/robotframework/keywords.robot\nindex d2ca5e4..98e2805 100644\n--- a/src/plone/app/robotframework/keywords.robot\n+++ b/src/plone/app/robotframework/keywords.robot\n@@ -134,7 +134,7 @@ Open Menu\n     Wait Until Element Is Visible  css=#${elementId} .plone-toolbar-submenu-header\n \n Open User Menu\n-    Open Menu  portal-personal-tools\n+    Open Menu  portal-personaltools\n \n Open Add New Menu\n     Open Menu  plone-contentmenu-factories\ndiff --git a/src/plone/app/robotframework/tests/docs/test_keywords.robot b/src/plone/app/robotframework/tests/docs/test_keywords.robot\nindex 2746f91..b67bc70 100644\n--- a/src/plone/app/robotframework/tests/docs/test_keywords.robot\n+++ b/src/plone/app/robotframework/tests/docs/test_keywords.robot\n@@ -27,7 +27,9 @@ I\'m logged in as a \'${ROLE}\'\n     Go to  ${PLONE_URL}\n \n I open the personal menu\n-    Click link  css=#user-name\n+    # Note: There is a key word "Open User Menu" as well.\n+    Click link  css=#portal-personaltools a\n+    Wait Until Element Is Visible  css=#portal-personaltools .plone-toolbar-submenu-header\n \n I see the Site Setup -link\n     Element should be visible  css=#personaltools-plone_setup\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-07T09:13:09+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/c5d3c246cf5f077932e440baea74cd55388cac38

refine docs about saucelabs

Files changed:
M docs/source/saucelabs.rst

b"diff --git a/docs/source/saucelabs.rst b/docs/source/saucelabs.rst\nindex e84a9cf..f3cd26c 100644\n--- a/docs/source/saucelabs.rst\n+++ b/docs/source/saucelabs.rst\n@@ -18,31 +18,28 @@ Integrate with Sauce Labs\n \n    .. code-block:: bash\n \n-      $ travis encrypt SAUCE_USERNAME=... -r gh-user/myproduct --add\n-      $ travis encrypt SAUCE_ACCESS_KEY=... -r hg-user/myproduct --add\n+      $ travis encrypt SAUCE_USERNAME=... -r github-user-or-organization/myproduct --add\n+      $ travis encrypt SAUCE_ACCESS_KEY=... -r github-user-or-organization/myproduct --add\n \n 5. Update ``.travis.yml`` to set up the Sauce Labs connection before tests:\n \n    .. code-block:: yaml\n \n-      language: python\n-      python: '2.7'\n+      [...]\n       addons:\n         sauce_connect:\n         - username: $SAUCE_USERNAME\n         - access_key: $SAUCE_ACCESS_KEY\n-      install:\n-      - mkdir -p buildout-cache/downloads\n-      - python bootstrap.py -c travis.cfg\n-      - bin/buildout -N -t 3 -c travis.cfg\n-      script: bin/test\n+      [...]\n       env:\n+        [...]\n         global:\n         - secure: ...\n         - secure: ...\n         - ROBOT_BUILD_NUMBER=travis-$TRAVIS_BUILD_NUMBER\n         - ROBOT_REMOTE_URL=http://$SAUCE_USERNAME:$SAUCE_ACCESS_KEY@ondemand.saucelabs.com:80/wd/hub\n         - ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+      [...]\n \n .. note:: If you already have an ``env`` section, for instance to define\n    different versions of Plone like this:\n@@ -50,10 +47,9 @@ Integrate with Sauce Labs\n    .. code-block:: yaml\n \n       env:\n-      - PLONE_VERSION=4.0\n-      - PLONE_VERSION=4.1\n-      - PLONE_VERSION=4.2\n-      - PLONE_VERSION=4.3\n+      - PLONE_VERSION=5.0\n+      - PLONE_VERSION=5.1\n+      - PLONE_VERSION=5.2\n \n    you will need to declare those variables in a ``matrix`` section, like this:\n \n@@ -61,10 +57,9 @@ Integrate with Sauce Labs\n \n       env:\n         matrix:\n-        - PLONE_VERSION=4.0\n-        - PLONE_VERSION=4.1\n-        - PLONE_VERSION=4.2\n-        - PLONE_VERSION=4.3\n+        - PLONE_VERSION=5.0\n+        - PLONE_VERSION=5.1\n+        - PLONE_VERSION=5.2\n         global:\n         - secure: ...\n         - secure: ...\n"

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-07T09:18:10+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.robotframework/commit/9610b3ac3a99efcbfc261b20e4461a818478b759

one time is enough

Files changed:
M .travis.yml

b'diff --git a/.travis.yml b/.travis.yml\nindex 080876e..7557833 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -31,7 +31,6 @@ install:\n   - bin/pip install -r requirements.txt\n   - bin/buildout -N buildout:download-cache=downloads code-analysis:return-status-codes=True annotate\n   - bin/buildout -N -t 3 -c travis.cfg buildout:download-cache=downloads code-analysis:return-status-codes=True\n-  - bin/buildout -N -t 3 -c travis.cfg\n script:\n   - bin/test\n after_script:\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2018-08-08T13:07:42+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.robotframework/commit/f9e4f207c23c78a93afd74a415bb2aec433cbeac

Merge pull request #83 from plone/fix-travis

Make Robottests work on Plone 5 - srly

Files changed:
A requirements.txt
M .gitignore
M .travis.yml
M CHANGES.rst
M CONTRIBUTORS.rst
M buildout.cfg
M docs/source/saucelabs.rst
M setup.cfg
M setup.py
M src/plone/app/robotframework/i18n.py
M src/plone/app/robotframework/keywords.robot
M src/plone/app/robotframework/testing.py
M src/plone/app/robotframework/tests/docs/test_keywords.robot
M src/plone/app/robotframework/tests/test_autologin_library.robot
M src/plone/app/robotframework/tests/test_content.py
M src/plone/app/robotframework/tests/test_robot.py
M travis.cfg
M versions.cfg
D bootstrap.py
D versions-staging.cfg

b'diff --git a/.gitignore b/.gitignore\nindex b546a05..855b1ca 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -13,7 +13,13 @@ bin\n buildout-cache\n develop-eggs\n dist\n+docs/make.bat\n+docs/Makefile\n etc\n+include\n+lib\n+local\n parts\n+pip-selfcheck.json\n var\n \ndiff --git a/.travis.yml b/.travis.yml\nindex 4ab876f..7557833 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -6,48 +6,52 @@ addons:\n     username: $SAUCE_USERNAME\n     access_key: $SAUCE_ACCESS_KEY\n cache:\n+  pip: true\n   directories:\n-  - eggs\n-install:\n-- python bootstrap.py -c travis.cfg\n-- bin/buildout -N -t 3 -c travis.cfg ${VERSIONS}\n-script: bin/test\n-after_script:\n-- cd docs && ./libdoc.sh && cd ..\n-- bin/sphinx-build docs/source docs/html\n-- bundle install\n-- bundle exec travis-artifacts upload --path parts/test\n-- bundle exec travis-artifacts upload --path docs/html\n-- bundle exec travis-artifacts upload --target-path latest --path docs/html\n-- bundle exec travis-artifacts upload --target-path latest --path parts/test\n-- \'echo "Sphinx: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/"\'\n-- \'echo "Robot: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/robot_report.html"\'\n-\n+    - eggs\n+    - downloads\n env:\n   global:\n-  - secure: YLol0TyHB+XAUbCzzjfc5JJ5AFqEi/GVhGphtAAcSv8+JY6MhTVVTjyCPeoK 2nT7tDhQRnYKOAMBmTuP/TUdzFqBf5LvjrFxvcjBawJMRW85kuYEuXsS8XEx C+lc1bbXSUPGA0x03tvSHIYbCowvVPZNUupxgRQdW2QLa5HcSuQ=\n-  - secure: YhG9gTzNMbQWiHLO6RU2J9btjB8L4X/QpKgu4c48XHYEf0Mwgxi5kKhZTTqp KY6/buwYhcBFWh0PQVC1b35lHHxI+bD4/d3v8xea7v670COdP0zMrgjXlSLn bfV7g3/doSmAUtbEyUQdfzmWS8kyst0div6XzpWtR3cl6lP6Tfo=\n-  - secure: AOFoFixluD1YzjtKuNLClALcpH6YpJyxZYfx8QVs0SQ3aDJRc53lVw2e0YKpghGSuuHm75cAKbmZVJVYT/qgYFdZfah6+amKFRgTVDsGEnGIGcL8+z43n+y3b1NZotwPXXZz4hboFLL4FknuEymGmKl4ZJdpQFcf+36iylg2KFQ=\n-  - secure: eK2r6iQU0M8tq2qC+SpoqJJmtyBa8Okdr5DjlrAa4efuA7fiIzsfvSfcTcb9zQ0T+7cbOoGiEFQVFcat0uSY49fAZcxTjJakjYC1plwBfQl/StQGHZIlx+oy2GZTthi6UWAVYeC6NmLTqBtoGxVvCMp6+LtNhzd2Fc4MUHrafqQ=\n-  - ARTIFACTS_S3_BUCKET=plone.app.robotframework\n-  - ROBOT_BUILD_NUMBER=travis-$TRAVIS_BUILD_NUMBER\n-  - ROBOT_REMOTE_URL=http://$SAUCE_USERNAME:$SAUCE_ACCESS_KEY@ondemand.saucelabs.com:80/wd/hub\n+    - secure: YLol0TyHB+XAUbCzzjfc5JJ5AFqEi/GVhGphtAAcSv8+JY6MhTVVTjyCPeoK 2nT7tDhQRnYKOAMBmTuP/TUdzFqBf5LvjrFxvcjBawJMRW85kuYEuXsS8XEx C+lc1bbXSUPGA0x03tvSHIYbCowvVPZNUupxgRQdW2QLa5HcSuQ=\n+    - secure: YhG9gTzNMbQWiHLO6RU2J9btjB8L4X/QpKgu4c48XHYEf0Mwgxi5kKhZTTqp KY6/buwYhcBFWh0PQVC1b35lHHxI+bD4/d3v8xea7v670COdP0zMrgjXlSLn bfV7g3/doSmAUtbEyUQdfzmWS8kyst0div6XzpWtR3cl6lP6Tfo=\n+    - secure: AOFoFixluD1YzjtKuNLClALcpH6YpJyxZYfx8QVs0SQ3aDJRc53lVw2e0YKpghGSuuHm75cAKbmZVJVYT/qgYFdZfah6+amKFRgTVDsGEnGIGcL8+z43n+y3b1NZotwPXXZz4hboFLL4FknuEymGmKl4ZJdpQFcf+36iylg2KFQ=\n+    - secure: eK2r6iQU0M8tq2qC+SpoqJJmtyBa8Okdr5DjlrAa4efuA7fiIzsfvSfcTcb9zQ0T+7cbOoGiEFQVFcat0uSY49fAZcxTjJakjYC1plwBfQl/StQGHZIlx+oy2GZTthi6UWAVYeC6NmLTqBtoGxVvCMp6+LtNhzd2Fc4MUHrafqQ=\n+    - ARTIFACTS_S3_BUCKET=plone.app.robotframework\n+    - ROBOT_BUILD_NUMBER=travis-$TRAVIS_BUILD_NUMBER\n+    - ROBOT_REMOTE_URL=http://$SAUCE_USERNAME:$SAUCE_ACCESS_KEY@ondemand.saucelabs.com:80/wd/hub\n   matrix:\n-  - ROBOT_BROWSER=firefox ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n-  - ROBOT_BROWSER=chrome ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n-  - ROBOT_BROWSER=ie ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+    - ROBOT_BROWSER=firefox ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+    - ROBOT_BROWSER=chrome ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+    - ROBOT_BROWSER=ie ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n matrix:\n   allow_failures:\n-  - env: ROBOT_BROWSER=ie ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+    - env: ROBOT_BROWSER=ie ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+install:\n+  - virtualenv -p `which python` .\n+  - bin/pip install -r requirements.txt\n+  - bin/buildout -N buildout:download-cache=downloads code-analysis:return-status-codes=True annotate\n+  - bin/buildout -N -t 3 -c travis.cfg buildout:download-cache=downloads code-analysis:return-status-codes=True\n+script:\n+  - bin/test\n+after_script:\n+  - cd docs && ./libdoc.sh && cd ..\n+  - bin/sphinx-build docs/source docs/html\n+  - bundle install\n+  - bundle exec travis-artifacts upload --path parts/test\n+  - bundle exec travis-artifacts upload --path docs/html\n+  - bundle exec travis-artifacts upload --target-path latest --path docs/html\n+  - bundle exec travis-artifacts upload --target-path latest --path parts/test\n+  - \'echo "Sphinx: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/"\'\n+  - \'echo "Robot: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/robot_report.html"\'\n \n notifications:\n   irc:\n     channels:\n-    - irc.freenode.org#plone-testing\n+      - irc.freenode.org#plone-testing\n     template:\n-    - "%{repository}#%{build_number} (%{branch} | %{commit} | %{author}): %{message}"\n-#   - "Change: %{compare_url}"\n-#   - "Details: %{build_url}"\n-    - "Robot: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/%{build_number}/%{build_number}.1/robot_report.html"\n-    - "Sphinx: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/%{build_number}/%{build_number}.1/"\n-    - "Latest: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/latest/"\n+      - "%{repository}#%{build_number} (%{branch} | %{commit} | %{author}): %{message}"\n+#      - "Change: %{compare_url}"\n+#      - "Details: %{build_url}"\n+      - "Robot: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/%{build_number}/%{build_number}.1/robot_report.html"\n+      - "Sphinx: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/artifacts/%{build_number}/%{build_number}.1/"\n+      - "Latest: http://plone.app.robotframework.s3-website-us-east-1.amazonaws.com/latest/"\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 9e025c0..dd437b3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,20 +1,30 @@\n Changelog\n =========\n \n-1.2.2 (unreleased)\n+1.3.0 (unreleased)\n ------------------\n \n Breaking changes:\n \n-- *add item here*\n+- Skip Support for Plone 4.x.\n+  [jensens]\n \n New features:\n \n-- *add item here*\n \n Bug fixes:\n \n-- *add item here*\n+- Support for Plone 5.x toolbar, i18n, ...\n+  [jensens]\n+\n+- Fix RemoteLibrary ``i18n`` to work proper with registry based settings.\n+  [jensens]\n+\n+- Make robotframework work with merged ``plone.login``.\n+  [jensens]\n+\n+- Fix Travis CI setup.\n+  [jensens]\n \n \n 1.2.1 (2018-06-22)\ndiff --git a/CONTRIBUTORS.rst b/CONTRIBUTORS.rst\nindex 71b2897..57ac9e1 100644\n--- a/CONTRIBUTORS.rst\n+++ b/CONTRIBUTORS.rst\n@@ -12,6 +12,7 @@\n - Godefroid Chapelle\n - Hector Velarde\n - Jean-Michel Francois\n+- Jens Klein\n - Johan Beyers\n - Johannes Raggam\n - Jonas Baumann\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex ed57894..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep \n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions \n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'. \n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\nindex c4dd707..3026c2e 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,6 +1,6 @@\n [buildout]\n extends =\n-    https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-4.3.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.1.x.cfg\n     versions.cfg\n parts +=\n     docs\ndiff --git a/docs/source/saucelabs.rst b/docs/source/saucelabs.rst\nindex e84a9cf..f3cd26c 100644\n--- a/docs/source/saucelabs.rst\n+++ b/docs/source/saucelabs.rst\n@@ -18,31 +18,28 @@ Integrate with Sauce Labs\n \n    .. code-block:: bash\n \n-      $ travis encrypt SAUCE_USERNAME=... -r gh-user/myproduct --add\n-      $ travis encrypt SAUCE_ACCESS_KEY=... -r hg-user/myproduct --add\n+      $ travis encrypt SAUCE_USERNAME=... -r github-user-or-organization/myproduct --add\n+      $ travis encrypt SAUCE_ACCESS_KEY=... -r github-user-or-organization/myproduct --add\n \n 5. Update ``.travis.yml`` to set up the Sauce Labs connection before tests:\n \n    .. code-block:: yaml\n \n-      language: python\n-      python: \'2.7\'\n+      [...]\n       addons:\n         sauce_connect:\n         - username: $SAUCE_USERNAME\n         - access_key: $SAUCE_ACCESS_KEY\n-      install:\n-      - mkdir -p buildout-cache/downloads\n-      - python bootstrap.py -c travis.cfg\n-      - bin/buildout -N -t 3 -c travis.cfg\n-      script: bin/test\n+      [...]\n       env:\n+        [...]\n         global:\n         - secure: ...\n         - secure: ...\n         - ROBOT_BUILD_NUMBER=travis-$TRAVIS_BUILD_NUMBER\n         - ROBOT_REMOTE_URL=http://$SAUCE_USERNAME:$SAUCE_ACCESS_KEY@ondemand.saucelabs.com:80/wd/hub\n         - ROBOT_DESIRED_CAPABILITIES=tunnel-identifier:$TRAVIS_JOB_NUMBER\n+      [...]\n \n .. note:: If you already have an ``env`` section, for instance to define\n    different versions of Plone like this:\n@@ -50,10 +47,9 @@ Integrate with Sauce Labs\n    .. code-block:: yaml\n \n       env:\n-      - PLONE_VERSION=4.0\n-      - PLONE_VERSION=4.1\n-      - PLONE_VERSION=4.2\n-      - PLONE_VERSION=4.3\n+      - PLONE_VERSION=5.0\n+      - PLONE_VERSION=5.1\n+      - PLONE_VERSION=5.2\n \n    you will need to declare those variables in a ``matrix`` section, like this:\n \n@@ -61,10 +57,9 @@ Integrate with Sauce Labs\n \n       env:\n         matrix:\n-        - PLONE_VERSION=4.0\n-        - PLONE_VERSION=4.1\n-        - PLONE_VERSION=4.2\n-        - PLONE_VERSION=4.3\n+        - PLONE_VERSION=5.0\n+        - PLONE_VERSION=5.1\n+        - PLONE_VERSION=5.2\n         global:\n         - secure: ...\n         - secure: ...\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..bba2416\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,2 @@\n+setuptools==33.1.1\n+zc.buildout==2.12.1\ndiff --git a/setup.cfg b/setup.cfg\nindex af0d9e3..3d06ecd 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -12,3 +12,12 @@ ignore =\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 79\n+not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex c3f04eb..b0f78eb 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n \n import sys\n \n-version = \'1.2.2.dev0\'\n+version = \'1.3.0.dev0\'\n \n \n def indented(filename):\n@@ -67,7 +67,7 @@ def indent(line):\n         \'argparse\',\n         \'decorator\',   # required by r.selenium2library on Python 2.6.x\n         \'simplejson\',  # required for SauceLabs-keywords on Python 2.6.x\n-        ])\n+    ])\n \n test_requires = [\n     \'plone.app.dexterity\',\ndiff --git a/src/plone/app/robotframework/i18n.py b/src/plone/app/robotframework/i18n.py\nindex 01a00fc..2ad7f0e 100644\n--- a/src/plone/app/robotframework/i18n.py\n+++ b/src/plone/app/robotframework/i18n.py\n@@ -1,25 +1,34 @@\n # -*- coding: utf-8 -*-\n-import os\n-\n-from Products.CMFCore.utils import getToolByName\n from plone.app.robotframework.remote import RemoteLibrary\n from plone.app.robotframework.utils import disableCSRFProtection\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.i18n import translate\n \n+import os\n+\n \n class I18N(RemoteLibrary):\n \n     def set_default_language(self, language=None):\n         """Change portal default language"""\n         disableCSRFProtection()\n-        portal = getSite()\n-        portal_languages = getToolByName(portal, \'portal_languages\')\n         if language is None:\n             language = os.environ.get(\'LANGUAGE\') or \'en\'\n-        setattr(portal, \'language\', language)\n-        portal_languages.setDefaultLanguage(language)\n+        try:\n+            from Products.CMFPlone.interfaces import ILanguageSchema\n+        except ImportError:\n+            portal = getSite()\n+            return portal.portal_properties.site_properties.setProperty(\n+                \'default_language\',\n+                language,\n+            )\n+        else:\n+            registry = getUtility(IRegistry)\n+            settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+            settings.default_language = language\n \n     def translate(self, msgid, *args, **kwargs):\n         """Return localized string for given msgid"""\n@@ -31,13 +40,15 @@ def translate(self, msgid, *args, **kwargs):\n \n         mapping = {}\n         for key, value in kwargs.items():\n-            if not key in (\'target_language\', \'domain\', \'default\'):\n+            if key not in (\'target_language\', \'domain\', \'default\'):\n                 mapping[key] = value\n         if kwargs.get(\'target_language\'):\n             return translate(\n-                msgid, target_langauge=kwargs.get(\'target_language\'),\n+                msgid,\n+                target_langauge=kwargs.get(\'target_language\'),\n                 domain=kwargs.get(\'domain\') or \'plone\',\n-                default=kwargs.get(\'default\') or msgid, mapping=mapping)\n+                default=kwargs.get(\'default\') or msgid, mapping=mapping\n+            )\n         else:\n             # XXX: Should self.REQUEST be replaced with\n             # zope.globalrequest.getRequest()?\n@@ -45,4 +56,5 @@ def translate(self, msgid, *args, **kwargs):\n             return translate(\n                 msgid, context=request,\n                 domain=kwargs.get(\'domain\') or \'plone\',\n-                default=kwargs.get(\'default\') or msgid, mapping=mapping)\n\\ No newline at end of file\n+                default=kwargs.get(\'default\') or msgid, mapping=mapping\n+            )\ndiff --git a/src/plone/app/robotframework/keywords.robot b/src/plone/app/robotframework/keywords.robot\nindex 675c713..98e2805 100644\n--- a/src/plone/app/robotframework/keywords.robot\n+++ b/src/plone/app/robotframework/keywords.robot\n@@ -67,10 +67,10 @@ Log in\n     Go to  ${PLONE_URL}/login_form\n     Page should contain element  __ac_name\n     Page should contain element  __ac_password\n-    Page should contain element  xpath: //input[contains(text(), "Log in")]\n+    Page should contain element  css=input[value="Log in"]\n     Input text for sure  __ac_name  ${userid}\n     Input text for sure  __ac_password  ${password}\n-    Click Button  xpath: //input[contains(text(), "Log in")]\n+    Click Element  css=input[value="Log in"]\n \n Log in as test user\n \n@@ -128,16 +128,13 @@ Should be above\n Open Menu\n     [Arguments]  ${elementId}\n \n-    Element Should Be Visible  css=dl#${elementId} span\n-    Element Should Not Be Visible  css=dl#${elementId} dd.actionMenuContent\n-    Click link  css=dl#${elementId} dt.actionMenuHeader a\n-    Wait until keyword succeeds  1  5  Element Should Be Visible  css=dl#${elementId} dd.actionMenuContent\n+    Element Should Be Visible  css=#${elementId} span\n+    Element Should Not Be Visible  css=#${elementId} .plone-toolbar-submenu-header\n+    Click link  css=#${elementId} a\n+    Wait Until Element Is Visible  css=#${elementId} .plone-toolbar-submenu-header\n \n Open User Menu\n-    Element Should Be Visible  css=dl#portal-personaltools a\n-    Element Should Not Be Visible  css=dl#portal-personaltools dd.actionMenuContent\n-    Click link  css=dl#portal-personaltools dt.actionMenuHeader a\n-    Wait until keyword succeeds  1  5  Element Should Be Visible  css=dl#portal-personaltools dd.actionMenuContent\n+    Open Menu  portal-personaltools\n \n Open Add New Menu\n     Open Menu  plone-contentmenu-factories\n@@ -160,7 +157,6 @@ Click Action by id\n     [arguments]  ${name}\n \n     Open Action Menu\n-    Element Should be visible  css=dl#plone-contentmenu-actions dd.actionMenuContent  #plone-contentmenu-actions-${name}\n     Click Link  id=plone-contentmenu-actions-${name}\n \n Click Cut Action\n@@ -246,20 +242,17 @@ Add news item\n \n Displayed content title should be\n     [arguments]  ${title}\n-    Page should contain element  xpath=//*[contains(., "${title}")][@id=\'parent-fieldname-title\']\n+    Page should contain element  xpath=//header/h1[contains(., "${title}")]\n \n Add content\n+    # DEXTERITY content only\n     [arguments]  ${content_type}  ${title}\n     Open add new menu\n-\n-    ${status} =  Run Keyword And Return Status  Click Link\n-    ...  css=#plone-contentmenu-factories a.contenttype-${content_type}\n-    Run keyword if  ${status} != True  Click Link  ${content_type}\n-\n-    Page Should Contain Element  css=#archetypes-fieldname-title input\n-    Input Text  title  ${title}\n-    Click button  name=form.button.save\n-    Page Should Contain  Changes saved.\n+    Click Link  ${content_type}\n+    Wait until page contains element  css=#form-widgets-IDublinCore-title\n+    Input Text  form.widgets.IDublinCore.title  ${title}\n+    Click button  name=form.buttons.save\n+    Wait until page contains  Item created\n     Page should contain  ${title}\n     Displayed content title should be  ${title}\n     ${location} =  Get Location\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex b1a267c..25ee8d2 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -41,33 +41,48 @@\n     HAS_SPEAKJS = True\n \n \n-\n-\n class SimplePublicationLayer(Layer):\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUp(self):\n         with ploneSite() as portal:\n+            applyProfile(portal, \'plone.app.contenttypes:default\')\n             portal.portal_workflow.setDefaultChain(\n-                \'simple_publication_workflow\')\n+                \'simple_publication_workflow\'\n+            )\n \n     def tearDown(self):\n         with ploneSite() as portal:\n             portal.portal_workflow.setDefaultChain(\'\')\n \n+\n SIMPLE_PUBLICATION_FIXTURE = SimplePublicationLayer()\n \n \n+class SimplePublicationWithTypesLayer(Layer):\n+\n+    defaultBases = (SIMPLE_PUBLICATION_FIXTURE,)\n+\n+    def setUp(self):\n+        with ploneSite() as portal:\n+            applyProfile(portal, \'plone.app.contenttypes:default\')\n+\n+\n+SIMPLE_PUBLICATION_WITH_TYPES_FIXTURE = SimplePublicationLayer()\n+\n+\n class MockMailHostLayer(Layer):\n     """Layer for setting up a MockMailHost to store all sent messages as\n     strings into a list at portal.MailHost.messages\n     """\n+\n     defaultBases = (PLONE_FIXTURE,)\n \n     def setUp(self):\n         # Note: CMFPlone can be imported safely only when a certain\n         # zope.testing-set environment variable is in place.\n         from Products.CMFPlone.tests import utils\n+\n         with ploneSite() as portal:\n             portal.email_from_address = \'noreply@example.com\'\n             portal.email_from_name = \'Plone Site\'\n@@ -85,8 +100,10 @@ def tearDown(self):\n                 portal.MailHost = portal._original_MailHost\n                 sm = getSiteManager(context=portal)\n                 sm.unregisterUtility(provided=IMailHost)\n-                sm.registerUtility(aq_base(portal._original_MailHost),\n-                                   provided=IMailHost)\n+                sm.registerUtility(\n+                    aq_base(portal._original_MailHost), provided=IMailHost\n+                )\n+\n \n MOCK_MAILHOST_FIXTURE = MockMailHostLayer()\n \n@@ -94,15 +111,22 @@ def tearDown(self):\n AUTOLOGIN_LIBRARY_FIXTURE = RemoteLibraryLayer(\n     bases=(PLONE_FIXTURE,),\n     libraries=(AutoLogin,),\n-    name="AutoLoginRemoteLibrary:RobotRemote"\n+    name="AutoLoginRemoteLibrary:RobotRemote",\n )\n \n REMOTE_LIBRARY_BUNDLE_FIXTURE = RemoteLibraryLayer(\n     bases=(PLONE_FIXTURE,),\n-    libraries=(AutoLogin, QuickInstaller, GenericSetup,\n-               Content, Users, I18N, MockMailHost,\n-               Zope2ServerRemote),\n-    name="RemoteLibraryBundle:RobotRemote"\n+    libraries=(\n+        AutoLogin,\n+        QuickInstaller,\n+        GenericSetup,\n+        Content,\n+        Users,\n+        I18N,\n+        MockMailHost,\n+        Zope2ServerRemote,\n+    ),\n+    name="RemoteLibraryBundle:RobotRemote",\n )\n \n #\n@@ -120,36 +144,58 @@ def tearDown(self):\n \n RobotRemote = type(\n     \'RobotRemote\',\n-    (AutoLogin, QuickInstaller, GenericSetup,\n-     Content, Users, I18N, MockMailHost,\n-     Zope2ServerRemote),\n-    {\'__doc__\': \'Robot Framework remote library\',\n-                \'id\': \'RobotRemote\'})()\n+    (\n+        AutoLogin,\n+        QuickInstaller,\n+        GenericSetup,\n+        Content,\n+        Users,\n+        I18N,\n+        MockMailHost,\n+        Zope2ServerRemote,\n+    ),\n+    {\'__doc__\': \'Robot Framework remote library\', \'id\': \'RobotRemote\'},\n+)()\n \n REMOTE_LIBRARY_ROBOT_TESTING = FunctionalTesting(\n-    bases=(SIMPLE_PUBLICATION_FIXTURE,\n-           REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="RemoteLibrary:Robot"\n+    bases=(\n+        SIMPLE_PUBLICATION_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name="RemoteLibrary:Robot",\n )\n \n AUTOLOGIN_ROBOT_TESTING = FunctionalTesting(\n     bases=(AUTOLOGIN_LIBRARY_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="AutoLogin:Robot"\n+    name="AutoLogin:Robot",\n )\n \n SIMPLE_PUBLICATION_ROBOT_TESTING = FunctionalTesting(\n-    bases=(SIMPLE_PUBLICATION_FIXTURE,\n-           REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="SimplePublication:Robot"\n+    bases=(\n+        SIMPLE_PUBLICATION_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name="SimplePublication:Robot",\n+)\n+\n+SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING = FunctionalTesting(\n+    bases=(\n+        SIMPLE_PUBLICATION_WITH_TYPES_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name="SimplePublicationWithTypes:Robot",\n )\n \n \n class PloneRobotFixture(PloneSandboxLayer):\n-    defaultBases = (SIMPLE_PUBLICATION_FIXTURE,\n-                    MOCK_MAILHOST_FIXTURE,\n-                    REMOTE_LIBRARY_BUNDLE_FIXTURE)\n+    defaultBases = (\n+        SIMPLE_PUBLICATION_FIXTURE,\n+        MOCK_MAILHOST_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+    )\n \n     def _get_robot_variable(self, name):\n         """Return robot list variable either from robot instance or\n@@ -170,35 +216,37 @@ def setUpZope(self, app, configurationContext):\n         for locales in self._get_robot_variable(\'REGISTER_TRANSLATIONS\'):\n             if locales and os.path.isdir(locales):\n                 from zope.i18n.zcml import registerTranslations\n+\n                 registerTranslations(configurationContext, locales)\n                 self[\'state\'].append(locales)\n \n         for name in self._get_robot_variable(\'META_PACKAGES\'):\n-            if not name in sys.modules:\n+            if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n-            xmlconfig.file(\'meta.zcml\', package,\n-                           context=configurationContext)\n+            xmlconfig.file(\'meta.zcml\', package, context=configurationContext)\n             self[\'state\'].append(name)\n \n         for name in self._get_robot_variable(\'CONFIGURE_PACKAGES\'):\n-            if not name in sys.modules:\n+            if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n-            xmlconfig.file(\'configure.zcml\', package,\n-                           context=configurationContext)\n+            xmlconfig.file(\n+                \'configure.zcml\', package, context=configurationContext\n+            )\n             self[\'state\'].append(name)\n \n         for name in self._get_robot_variable(\'OVERRIDE_PACKAGES\'):\n-            if not name in sys.modules:\n+            if name not in sys.modules:\n                 __import__(name)\n             package = sys.modules[name]\n             xmlconfig.includeOverrides(\n-                configurationContext, \'overrides.zcml\', package=package)\n+                configurationContext, \'overrides.zcml\', package=package\n+            )\n             self[\'state\'].append(name)\n \n         for name in self._get_robot_variable(\'INSTALL_PRODUCTS\'):\n-            if not name in sys.modules:\n+            if name not in sys.modules:\n                 __import__(name)\n             z2.installProduct(app, name)\n             self[\'state\'].append(name)\n@@ -215,38 +263,42 @@ def setUp(self):\n         class Value:\n             __repr__ = lambda x: str(bool(x))\n             __nonzero__ = lambda x: self.get(\'state\', []) != (\n-                self._get_robot_variable(\'REGISTER_TRANSLATIONS\') +\n-                self._get_robot_variable(\'META_PACKAGES\') +\n-                self._get_robot_variable(\'CONFIGURE_PACKAGES\') +\n-                self._get_robot_variable(\'OVERRIDE_PACKAGES\') +\n-                self._get_robot_variable(\'INSTALL_PRODUCTS\') +\n-                self._get_robot_variable(\'APPLY_PROFILES\')\n+                self._get_robot_variable(\'REGISTER_TRANSLATIONS\')\n+                + self._get_robot_variable(\'META_PACKAGES\')\n+                + self._get_robot_variable(\'CONFIGURE_PACKAGES\')\n+                + self._get_robot_variable(\'OVERRIDE_PACKAGES\')\n+                + self._get_robot_variable(\'INSTALL_PRODUCTS\')\n+                + self._get_robot_variable(\'APPLY_PROFILES\')\n             )\n+\n         self[\'dirty\'] = Value()\n \n \n PLONE_ROBOT_FIXTURE = PloneRobotFixture()\n \n PLONE_ROBOT_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_ROBOT_FIXTURE,),\n-    name="PloneRobot:Integration"\n+    bases=(PLONE_ROBOT_FIXTURE,), name="PloneRobot:Integration"\n )\n \n PLONE_ROBOT_TESTING = FunctionalTesting(\n-    bases=(PLONE_ROBOT_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="Plone:Robot"\n+    bases=(PLONE_ROBOT_FIXTURE, z2.ZSERVER_FIXTURE), name="Plone:Robot"\n )\n \n \n if HAS_SPEAKJS:\n+\n     class SpeakJSLayer(Layer):\n \n         defaultBases = (PLONE_FIXTURE,)\n \n         def setUp(self):\n             import collective.js.speakjs\n-            xmlconfig.file(\'configure.zcml\', collective.js.speakjs,\n-                           context=self[\'configurationContext\'])\n+\n+            xmlconfig.file(\n+                \'configure.zcml\',\n+                collective.js.speakjs,\n+                context=self[\'configurationContext\'],\n+            )\n \n             with ploneSite() as portal:\n                 applyProfile(portal, \'collective.js.speakjs:default\')\n@@ -254,10 +306,12 @@ def setUp(self):\n     SPEAKJS_FIXTURE = SpeakJSLayer()\n \n     SPEAKJS_ROBOT_TESTING = FunctionalTesting(\n-        bases=(SPEAKJS_FIXTURE,\n-               MOCK_MAILHOST_FIXTURE,\n-               SIMPLE_PUBLICATION_FIXTURE,\n-               REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-               z2.ZSERVER_FIXTURE),\n-        name="SpeakJS:Robot"\n+        bases=(\n+            SPEAKJS_FIXTURE,\n+            MOCK_MAILHOST_FIXTURE,\n+            SIMPLE_PUBLICATION_FIXTURE,\n+            REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+            z2.ZSERVER_FIXTURE,\n+        ),\n+        name="SpeakJS:Robot",\n     )\ndiff --git a/src/plone/app/robotframework/tests/docs/test_keywords.robot b/src/plone/app/robotframework/tests/docs/test_keywords.robot\nindex 2746f91..b67bc70 100644\n--- a/src/plone/app/robotframework/tests/docs/test_keywords.robot\n+++ b/src/plone/app/robotframework/tests/docs/test_keywords.robot\n@@ -27,7 +27,9 @@ I\'m logged in as a \'${ROLE}\'\n     Go to  ${PLONE_URL}\n \n I open the personal menu\n-    Click link  css=#user-name\n+    # Note: There is a key word "Open User Menu" as well.\n+    Click link  css=#portal-personaltools a\n+    Wait Until Element Is Visible  css=#portal-personaltools .plone-toolbar-submenu-header\n \n I see the Site Setup -link\n     Element should be visible  css=#personaltools-plone_setup\ndiff --git a/src/plone/app/robotframework/tests/test_autologin_library.robot b/src/plone/app/robotframework/tests/test_autologin_library.robot\nindex 5efc38f..dd4852a 100644\n--- a/src/plone/app/robotframework/tests/test_autologin_library.robot\n+++ b/src/plone/app/robotframework/tests/test_autologin_library.robot\n@@ -50,7 +50,7 @@ I\'m logged in as a \'${ROLE}\'\n     Go to  ${PLONE_URL}\n \n I open the personal menu\n-    Click link  css=#user-name\n+    Click link  css=#portal-personaltools > a\n \n I see the Site Setup -link\n     Element should be visible  css=#personaltools-plone_setup\n@@ -65,7 +65,6 @@ I can add a new folder\n     Add folder  New folder\n     Go to  ${PLONE_URL}/new-folder\n     Page should contain  New folder\n-    Element should contain  css=.documentAuthor  Contributor\n \n I\'ve created a test folder\n     Enable autologin as  Contributor\n@@ -74,7 +73,6 @@ I\'ve created a test folder\n     Add folder  Test folder\n     Go to  ${PLONE_URL}/test-folder\n     Page should contain  Test folder\n-    Element should contain  css=.documentAuthor  Authenticated\n \n I\'m logged in as an \'Authenticated\'\n     Enable autologin as  Authenticated\n@@ -89,7 +87,6 @@ I can add a sub-folder\n     Add folder  Sub folder\n     Go to  ${PLONE_URL}/test-folder/sub-folder\n     Page should contain  Sub folder\n-    Element should contain  css=.documentAuthor  Authenticated\n \n Someone else has created a test folder\n     Enable autologin as  Contributor\ndiff --git a/src/plone/app/robotframework/tests/test_content.py b/src/plone/app/robotframework/tests/test_content.py\nindex abe5f54..21a78ac 100644\n--- a/src/plone/app/robotframework/tests/test_content.py\n+++ b/src/plone/app/robotframework/tests/test_content.py\n@@ -1,8 +1,7 @@\n-from Products.CMFCore.utils import getToolByName\n+from plone.app.robotframework.testing import PLONE_ROBOT_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.robotframework.testing import \\\n-    PLONE_ROBOT_INTEGRATION_TESTING\n+from Products.CMFCore.utils import getToolByName\n \n import unittest\n \ndiff --git a/src/plone/app/robotframework/tests/test_robot.py b/src/plone/app/robotframework/tests/test_robot.py\nindex 05d3487..54fca8c 100644\n--- a/src/plone/app/robotframework/tests/test_robot.py\n+++ b/src/plone/app/robotframework/tests/test_robot.py\n@@ -1,7 +1,13 @@\n # -*- coding: utf-8 -*-\n-import unittest\n+from plone.app.robotframework.testing import PLONE_ROBOT_TESTING\n+# from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\n+from plone.app.robotframework.testing import SIMPLE_PUBLICATION_ROBOT_TESTING\n+from plone.app.robotframework.testing import SIMPLE_PUBLICATION_WITH_TYPES_ROBOT_TESTING  # noqa: E501\n+from plone.testing import layered\n \n import pkg_resources\n+import robotsuite\n+import unittest\n \n try:\n     pkg_resources.get_distribution(\'collective.js.speakjs\')\n@@ -10,45 +16,49 @@\n else:\n     HAS_SPEAKJS = True\n \n-import robotsuite\n-from plone.app.robotframework.testing import (\n-    REMOTE_LIBRARY_ROBOT_TESTING,\n-    SIMPLE_PUBLICATION_ROBOT_TESTING,\n-    PLONE_ROBOT_TESTING\n-)\n-from plone.testing import layered\n-\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(robotsuite.RobotTestSuite(\n-                "test_autologin_library.robot"),\n-                layer=SIMPLE_PUBLICATION_ROBOT_TESTING),\n-        layered(robotsuite.RobotTestSuite(\n-                "test_content_library.robot"),\n-                layer=SIMPLE_PUBLICATION_ROBOT_TESTING),\n-#       layered(robotsuite.RobotTestSuite(\n-#               "test_quickinstaller_library.robot"),\n-#               layer=REMOTE_LIBRARY_ROBOT_TESTING),\n-        layered(robotsuite.RobotTestSuite(\n-                "test_i18n_library.robot"),\n-                layer=PLONE_ROBOT_TESTING),\n-        layered(robotsuite.RobotTestSuite(\n-                "test_users_library.robot"),\n-                layer=PLONE_ROBOT_TESTING),\n-        layered(robotsuite.RobotTestSuite(\n-                "docs"),\n-                layer=PLONE_ROBOT_TESTING),\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                robotsuite.RobotTestSuite("test_autologin_library.robot"),\n+                layer=SIMPLE_PUBLICATION_ROBOT_TESTING,\n+            ),\n+            layered(\n+                robotsuite.RobotTestSuite("test_content_library.robot"),\n+                layer=SIMPLE_PUBLICATION_ROBOT_TESTING,\n+            ),\n+            # layered(\n+            #     robotsuite.RobotTestSuite("test_quickinstaller_library.robot"),\n+            #     layer=REMOTE_LIBRARY_ROBOT_TESTING,\n+            # ),\n+            layered(\n+                robotsuite.RobotTestSuite("test_i18n_library.robot"),\n+                layer=PLONE_ROBOT_TESTING,\n+            ),\n+            layered(\n+                robotsuite.RobotTestSuite("test_users_library.robot"),\n+                layer=PLONE_ROBOT_TESTING,\n+            ),\n+            layered(\n+                robotsuite.RobotTestSuite("docs"), layer=PLONE_ROBOT_TESTING\n+            ),\n+        ]\n+    )\n \n     if HAS_SPEAKJS:\n         from plone.app.robotframework.testing import SPEAKJS_ROBOT_TESTING\n \n-        suite.addTests([\n-            layered(robotsuite.RobotTestSuite(\n-                    "test_speakjs_library.robot",\n-                    noncritical=[\'non-critical\']),\n-                    layer=SPEAKJS_ROBOT_TESTING),\n-        ])\n+        suite.addTests(\n+            [\n+                layered(\n+                    robotsuite.RobotTestSuite(\n+                        "test_speakjs_library.robot",\n+                        noncritical=[\'non-critical\'],\n+                    ),\n+                    layer=SPEAKJS_ROBOT_TESTING,\n+                )\n+            ]\n+        )\n     return suite\ndiff --git a/travis.cfg b/travis.cfg\nindex 93a4f9f..57c1900 100644\n--- a/travis.cfg\n+++ b/travis.cfg\n@@ -1,10 +1,13 @@\n [buildout]\n-extends = buildout.cfg\n-parts = docs libdoc test\n+extends =\n+    buildout.cfg\n+\n+parts =\n+    docs\n+    libdoc\n+    test\n \n [test]\n eggs =\n-    Pillow\n-    Products.CMFPlacefulWorkflow\n     plone.app.robotframework [test,speak]\n defaults = [\'--auto-color\', \'--auto-progress\', \'-s\', \'plone.app.robotframework\']\ndiff --git a/versions-staging.cfg b/versions-staging.cfg\ndeleted file mode 100644\nindex 74417bc..0000000\n--- a/versions-staging.cfg\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# Good known versions for plone.app.robotframework and friends\n-[versions]\n-Pygments = 2.0.2\n-plone.app.robotframework = 1.1\n-robotframework = 3.0\n-robotframework-selenium2library = 1.7.4\n-robotframework-selenium2screenshots = 0.7.0\n-robotsuite = 1.7.0\n-selenium = 2.53.6\n-sphinxcontrib-robotframework = 0.7.0\ndiff --git a/versions.cfg b/versions.cfg\nindex 74417bc..15e60f0 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -1,10 +1,14 @@\n-# Good known versions for plone.app.robotframework and friends\n [versions]\n-Pygments = 2.0.2\n-plone.app.robotframework = 1.1\n-robotframework = 3.0\n-robotframework-selenium2library = 1.7.4\n-robotframework-selenium2screenshots = 0.7.0\n-robotsuite = 1.7.0\n-selenium = 2.53.6\n-sphinxcontrib-robotframework = 0.7.0\n+# Good known versions for plone.app.robotframework and friends\n+\n+# THOSE ARE PART OF PLONE COREDEV BUILDOUT\n+# NEWER VERSIONS CAN BE TESTED HERE FOR BRANCHES BUT NEED AN UPDATE OF\n+# BUILDOUT COREDEV DIRECTLY AFTER MERGE\n+\n+# Pygments = 2.0.2\n+# robotframework = 3.0\n+# robotframework-selenium2library = 1.7.4\n+# robotframework-selenium2screenshots = 0.7.0\n+# robotsuite = 1.7.0\n+# selenium = 2.53.6\n+# sphinxcontrib-robotframework = 0.7.0\n'

