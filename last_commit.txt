Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2018-05-15T16:10:01+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/b07e9c3b1b701d4ee69fe5343518851b2576be62

Do not include too new upgrades when upgrading Plone Site.

Otherwise the Plone Site ends up at a newer version that the filesystem code supports,
giving an error when upgrading, and resulting in possibly missed upgrades later.

Fixes https://github.com/plone/Products.CMFPlone/issues/2377.

Files changed:
M Products/CMFPlone/MigrationTool.py
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/tests/testMigrationTool.py
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/MigrationTool.py b/Products/CMFPlone/MigrationTool.py
index 9abde1be5..a493f00d9 100644
--- a/Products/CMFPlone/MigrationTool.py
+++ b/Products/CMFPlone/MigrationTool.py
@@ -226,6 +226,32 @@ def needRecatalog(self):
         # Does this thing now need recataloging?
         return self._needRecatalog
 
+    security.declareProtected(ManagePortal, 'listUpgrades')
+
+    def listUpgrades(self):
+        # List available upgrade steps for our default profile.
+        # Do not include upgrade steps for too new versions:
+        # using a newer plone.app.upgrade version should not give problems.
+        setup = getToolByName(self, 'portal_setup')
+        fs_version = self.getFileSystemVersion()
+        steps = setup.listUpgrades(_DEFAULT_PROFILE)
+        upgrades = []
+        for upgrade_step in steps:
+            if isinstance(upgrade_step, list):
+                # This is a nested list of upgrade steps,
+                # which must have the same destination.
+                # So take the first one.
+                if not upgrade_step:
+                    # Empty list, not sure if this can happen in practice.
+                    continue
+                dest = upgrade_step[0].get('sdest')
+            else:
+                dest = upgrade_step.get('sdest')
+            if dest > fs_version and dest != 'all':
+                break
+            upgrades.append(upgrade_step)
+        return upgrades
+
     security.declareProtected(ManagePortal, 'upgrade')
     def upgrade(self, REQUEST=None, dry_run=None, swallow_errors=True):
         # Perform the upgrade.
@@ -233,7 +259,7 @@ def upgrade(self, REQUEST=None, dry_run=None, swallow_errors=True):
 
         # This sets the profile version if it wasn't set yet
         version = self.getInstanceVersion()
-        upgrades = setup.listUpgrades(_DEFAULT_PROFILE)
+        upgrades = self.listUpgrades()
         steps = []
         for u in upgrades:
             if isinstance(u, list):
diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index 224403020..e16c78dec 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -230,8 +230,8 @@ def __call__(self):
 class Upgrade(BrowserView):
 
     def upgrades(self):
-        ps = getattr(self.context, 'portal_setup')
-        return ps.listUpgrades(_DEFAULT_PROFILE)
+        pm = getattr(self.context, 'portal_migration')
+        return pm.listUpgrades()
 
     def versions(self):
         pm = getattr(self.context, 'portal_migration')
diff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py
index e77dca71a..8dff92ef1 100644
--- a/Products/CMFPlone/tests/testMigrationTool.py
+++ b/Products/CMFPlone/tests/testMigrationTool.py
@@ -27,16 +27,21 @@ def testMigrationNeedsRecatalog(self):
         self.assertFalse(self.migration.needRecatalog(),
                     'Migration needs recataloging')
 
-    def testListUpgradeSteps(self):
+    def testListSetupUpgradeSteps(self):
         # There should be no upgrade steps from the current version
         upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)
-        self.assertTrue(len(upgrades) == 0)
+        self.assertEqual(len(upgrades), 0)
+
+    def testListOwnUpgradeSteps(self):
+        # There should be no upgrade steps from the current version
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
 
     def testDoUpgrades(self):
         self.setRoles(['Manager'])
 
         self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, '2.5')
-        upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)
+        upgrades = self.migration.listUpgrades()
         self.assertTrue(len(upgrades) > 0)
 
         request = self.portal.REQUEST
@@ -59,8 +64,8 @@ def testDoUpgrades(self):
         self.assertEqual(last, current)
 
         # There are no more upgrade steps available
-        upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)
-        self.assertTrue(len(upgrades) == 0)
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
 
     def testUpgrade(self):
         self.setRoles(['Manager'])
@@ -74,8 +79,69 @@ def testUpgrade(self):
         self.assertEqual(last, current)
 
         # There are no more upgrade steps available
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
+
+
+class TestMigrationWithExtraUpgrades(PloneTestCase.PloneTestCase):
+    """Test a migration with a too new upgrade available.
+
+    There should be no upgrade steps newer than the current version.
+    If our FS profile version is 5, and there is an upgrade to 6,
+    we do not want to see it.  This just means we have a newer
+    plone.app.upgrade, which is fine.
+    """
+
+    def afterSetUp(self):
+        from Products.GenericSetup.upgrade import _registerUpgradeStep
+        from Products.GenericSetup.upgrade import UpgradeStep
+
+        self.migration = getToolByName(self.portal, "portal_migration")
+        self.setup = getToolByName(self.portal, "portal_setup")
+
+        def failing_upgrade(context):
+            raise AssertionError('Too new upgrade should not be run!')
+
+        # Register a too new upgrade.
+        fs_version = self.migration.getFileSystemVersion()
+        new_version = unicode(int(fs_version) + 1)
+        new_step = UpgradeStep(
+            'Too new upgrade', _DEFAULT_PROFILE,
+            fs_version, new_version,
+            '', failing_upgrade, None, '1')
+        self.step_id = new_step.id
+        _registerUpgradeStep(new_step)
+
+    def beforeTearDown(self):
+        # Remove the extra step from the upgrade registry,
+        # otherwise this bleeds over into other tests.
+        from Products.GenericSetup.upgrade import _upgrade_registry
+        profile_steps = _upgrade_registry.getUpgradeStepsForProfile(
+            _DEFAULT_PROFILE)
+        profile_steps.pop(self.step_id, None)
+
+    def testListUpgradeStepsNotTooNew(self):
+        # portal_setup happily reports the newer upgrade
         upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)
-        self.assertTrue(len(upgrades) == 0)
+        self.assertTrue(len(upgrades) > 0)
+        # Our migration tool no longer shows it.
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
+
+    def testUpgrade(self):
+        self.setRoles(['Manager'])
+        self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, '2.5')
+        self.migration.upgrade()
+
+        # And we have reached our current profile version
+        current = self.setup.getVersionForProfile(_DEFAULT_PROFILE)
+        current = tuple(current.split('.'))
+        last = self.setup.getLastVersionForProfile(_DEFAULT_PROFILE)
+        self.assertEqual(last, current)
+
+        # There are no more upgrade steps available
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
 
 
 class TestAddonList(PloneTestCase.PloneTestCase):
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 495b01e6a..e35604d66 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -19,6 +19,12 @@ New features:
 
 Bug fixes:
 
+- Do not include too new upgrades when upgrading Plone Site.
+  Otherwise the Plone Site ends up at a newer version that the filesystem code supports,
+  giving an error when upgrading, and resulting in possibly missed upgrades later.
+  Fixes `issue 2377 <https://github.com/plone/Products.CMFPlone/issues/2377>`_.
+  [maurits]
+
 - Unflakied a unit test.
   [Rotonen]
 


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2018-05-15T16:49:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/bb40dfb44a411987c8b08c1f8b005048d0daf431

Merge pull request #2418 from plone/not-too-new-upgrades-43

Do not include too new upgrades when upgrading Plone Site. [4.3]

Files changed:
M Products/CMFPlone/MigrationTool.py
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/tests/testMigrationTool.py
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/MigrationTool.py b/Products/CMFPlone/MigrationTool.py
index 9abde1be5..a493f00d9 100644
--- a/Products/CMFPlone/MigrationTool.py
+++ b/Products/CMFPlone/MigrationTool.py
@@ -226,6 +226,32 @@ def needRecatalog(self):
         # Does this thing now need recataloging?
         return self._needRecatalog
 
+    security.declareProtected(ManagePortal, 'listUpgrades')
+
+    def listUpgrades(self):
+        # List available upgrade steps for our default profile.
+        # Do not include upgrade steps for too new versions:
+        # using a newer plone.app.upgrade version should not give problems.
+        setup = getToolByName(self, 'portal_setup')
+        fs_version = self.getFileSystemVersion()
+        steps = setup.listUpgrades(_DEFAULT_PROFILE)
+        upgrades = []
+        for upgrade_step in steps:
+            if isinstance(upgrade_step, list):
+                # This is a nested list of upgrade steps,
+                # which must have the same destination.
+                # So take the first one.
+                if not upgrade_step:
+                    # Empty list, not sure if this can happen in practice.
+                    continue
+                dest = upgrade_step[0].get('sdest')
+            else:
+                dest = upgrade_step.get('sdest')
+            if dest > fs_version and dest != 'all':
+                break
+            upgrades.append(upgrade_step)
+        return upgrades
+
     security.declareProtected(ManagePortal, 'upgrade')
     def upgrade(self, REQUEST=None, dry_run=None, swallow_errors=True):
         # Perform the upgrade.
@@ -233,7 +259,7 @@ def upgrade(self, REQUEST=None, dry_run=None, swallow_errors=True):
 
         # This sets the profile version if it wasn't set yet
         version = self.getInstanceVersion()
-        upgrades = setup.listUpgrades(_DEFAULT_PROFILE)
+        upgrades = self.listUpgrades()
         steps = []
         for u in upgrades:
             if isinstance(u, list):
diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index 224403020..e16c78dec 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -230,8 +230,8 @@ def __call__(self):
 class Upgrade(BrowserView):
 
     def upgrades(self):
-        ps = getattr(self.context, 'portal_setup')
-        return ps.listUpgrades(_DEFAULT_PROFILE)
+        pm = getattr(self.context, 'portal_migration')
+        return pm.listUpgrades()
 
     def versions(self):
         pm = getattr(self.context, 'portal_migration')
diff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py
index e77dca71a..8dff92ef1 100644
--- a/Products/CMFPlone/tests/testMigrationTool.py
+++ b/Products/CMFPlone/tests/testMigrationTool.py
@@ -27,16 +27,21 @@ def testMigrationNeedsRecatalog(self):
         self.assertFalse(self.migration.needRecatalog(),
                     'Migration needs recataloging')
 
-    def testListUpgradeSteps(self):
+    def testListSetupUpgradeSteps(self):
         # There should be no upgrade steps from the current version
         upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)
-        self.assertTrue(len(upgrades) == 0)
+        self.assertEqual(len(upgrades), 0)
+
+    def testListOwnUpgradeSteps(self):
+        # There should be no upgrade steps from the current version
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
 
     def testDoUpgrades(self):
         self.setRoles(['Manager'])
 
         self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, '2.5')
-        upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)
+        upgrades = self.migration.listUpgrades()
         self.assertTrue(len(upgrades) > 0)
 
         request = self.portal.REQUEST
@@ -59,8 +64,8 @@ def testDoUpgrades(self):
         self.assertEqual(last, current)
 
         # There are no more upgrade steps available
-        upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)
-        self.assertTrue(len(upgrades) == 0)
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
 
     def testUpgrade(self):
         self.setRoles(['Manager'])
@@ -74,8 +79,69 @@ def testUpgrade(self):
         self.assertEqual(last, current)
 
         # There are no more upgrade steps available
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
+
+
+class TestMigrationWithExtraUpgrades(PloneTestCase.PloneTestCase):
+    """Test a migration with a too new upgrade available.
+
+    There should be no upgrade steps newer than the current version.
+    If our FS profile version is 5, and there is an upgrade to 6,
+    we do not want to see it.  This just means we have a newer
+    plone.app.upgrade, which is fine.
+    """
+
+    def afterSetUp(self):
+        from Products.GenericSetup.upgrade import _registerUpgradeStep
+        from Products.GenericSetup.upgrade import UpgradeStep
+
+        self.migration = getToolByName(self.portal, "portal_migration")
+        self.setup = getToolByName(self.portal, "portal_setup")
+
+        def failing_upgrade(context):
+            raise AssertionError('Too new upgrade should not be run!')
+
+        # Register a too new upgrade.
+        fs_version = self.migration.getFileSystemVersion()
+        new_version = unicode(int(fs_version) + 1)
+        new_step = UpgradeStep(
+            'Too new upgrade', _DEFAULT_PROFILE,
+            fs_version, new_version,
+            '', failing_upgrade, None, '1')
+        self.step_id = new_step.id
+        _registerUpgradeStep(new_step)
+
+    def beforeTearDown(self):
+        # Remove the extra step from the upgrade registry,
+        # otherwise this bleeds over into other tests.
+        from Products.GenericSetup.upgrade import _upgrade_registry
+        profile_steps = _upgrade_registry.getUpgradeStepsForProfile(
+            _DEFAULT_PROFILE)
+        profile_steps.pop(self.step_id, None)
+
+    def testListUpgradeStepsNotTooNew(self):
+        # portal_setup happily reports the newer upgrade
         upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)
-        self.assertTrue(len(upgrades) == 0)
+        self.assertTrue(len(upgrades) > 0)
+        # Our migration tool no longer shows it.
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
+
+    def testUpgrade(self):
+        self.setRoles(['Manager'])
+        self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, '2.5')
+        self.migration.upgrade()
+
+        # And we have reached our current profile version
+        current = self.setup.getVersionForProfile(_DEFAULT_PROFILE)
+        current = tuple(current.split('.'))
+        last = self.setup.getLastVersionForProfile(_DEFAULT_PROFILE)
+        self.assertEqual(last, current)
+
+        # There are no more upgrade steps available
+        upgrades = self.migration.listUpgrades()
+        self.assertEqual(len(upgrades), 0)
 
 
 class TestAddonList(PloneTestCase.PloneTestCase):
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 495b01e6a..e35604d66 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -19,6 +19,12 @@ New features:
 
 Bug fixes:
 
+- Do not include too new upgrades when upgrading Plone Site.
+  Otherwise the Plone Site ends up at a newer version that the filesystem code supports,
+  giving an error when upgrading, and resulting in possibly missed upgrades later.
+  Fixes `issue 2377 <https://github.com/plone/Products.CMFPlone/issues/2377>`_.
+  [maurits]
+
 - Unflakied a unit test.
   [Rotonen]
 


