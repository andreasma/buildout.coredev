Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2018-11-29T15:01:09-08:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/plone.app.z3cform/commit/9be338a1916f85327934431a6fbe0193cab35ae6

Add support for rendering &lt;optgroup&gt; elements from ITreeVocabulary

Files changed:
M CHANGES.rst
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b5ed55a..7d773cd 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,9 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Add support for rendering <optgroup> elements from\n+  zope.schema.interfaces.ITreeVocabulary hierarchical terms.\n+  [rpatterson]\n \n Bug fixes:\n \ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex ee9cbd5..7aa8335 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -38,6 +38,7 @@\n from zope.schema import Set\n from zope.schema import TextLine\n from zope.schema import Tuple\n+from zope.schema import vocabulary\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n@@ -758,6 +759,44 @@ def test_data_converter_handles_empty_value(self):\n             field.missing_value,\n         )\n \n+    def test_widget_optgroup(self):\n+        """\n+        If the widget vocabulary is a mapping <optgroup>\'s are rendered.\n+        """\n+        from z3c.form import term\n+        from plone.app.z3cform.widget import SelectWidget\n+        widget = SelectWidget(self.request)\n+        widget.field = Choice(vocabulary=vocabulary.TreeVocabulary.fromDict({\n+            (\'foo_group\', \'Foo Group\'): {\n+                (\'bar_group\', \'Bar Group\'): {},\n+                (\'qux_group\', \'Qux Group\'): {},\n+            },\n+            (\'corge_group\', \'Corge Group\'): {\n+                (\'grault_group\', \'Grault Group\'): {},\n+                (\'garply_group\', \'Garply Group\'): {},\n+            },\n+        }))\n+        # Usse term.CollectionTermsVocabulary to simulate a named vocabulary\n+        # factory lookup\n+        widget.terms = term.CollectionTermsVocabulary(\n+            context=None, request=self.request, form=None, field=None,\n+            widget=widget, vocabulary=widget.field.vocabulary)\n+        widget.updateTerms()\n+        html = widget.render()\n+        self.assertNotIn(\n+            \'<option value="foo_group">\', html,\n+            \'Top level vocab item rendered as <option...>\')\n+        self.assertIn(\n+            \'<optgroup label="Foo Group">\', html,\n+            \'Rendered select widget missing an <optgroup...>\')\n+\n+        base_args = widget._base_args()\n+        pattern_widget = widget._base(**base_args)\n+        items = pattern_widget.items\n+        self.assertIsInstance(\n+            items, dict,\n+            \'Wrong widget items type\')\n+\n \n class AjaxSelectWidgetTests(unittest.TestCase):\n \ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex d28134c..0840285 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -42,6 +42,7 @@\n from z3c.form.browser.select import SelectWidget as z3cform_SelectWidget\n from z3c.form.browser.text import TextWidget as z3cform_TextWidget\n from z3c.form.browser.widget import HTMLInputWidget\n+from z3c.form import interfaces as form_ifaces\n from z3c.form.interfaces import IEditForm\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.interfaces import IForm\n@@ -57,6 +58,7 @@\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import implementer_only\n+from zope.schema import interfaces as schema_ifaces\n from zope.schema.interfaces import IBool\n from zope.schema.interfaces import IChoice\n from zope.schema.interfaces import ICollection\n@@ -65,6 +67,7 @@\n from zope.schema.vocabulary import SimpleVocabulary\n \n import json\n+import collections\n import six\n \n \n@@ -257,6 +260,27 @@ class SelectWidget(BaseWidget, z3cform_SelectWidget):\n     orderable = False\n     required = True\n \n+    @property\n+    def items(self):\n+        """\n+        Optionally handle ITreeVocabulary vocabs as dicts.\n+        """\n+        terms = self.terms\n+        if form_ifaces.ITerms.providedBy(terms):\n+            terms = terms.terms\n+\n+        if schema_ifaces.ITreeVocabulary.providedBy(terms):\n+            groups = collections.OrderedDict()\n+            for group_term, option_terms in terms.items():\n+                group_widget = type(self)(self.request)\n+                group_widget.terms = option_terms\n+                group_label = (\n+                    group_term.title or group_term.value or group_term.token)\n+                groups[group_label] = super(SelectWidget, group_widget).items\n+            return groups\n+        else:\n+            return super(SelectWidget, self).items\n+\n     def _base_args(self):\n         """Method which will calculate _base class arguments.\n \n@@ -301,14 +325,25 @@ def _base_args(self):\n             # support both here to avoid breaking on some z3c.form versions.\n             # See https://github.com/zopefoundation/z3c.form/issues/44\n             base_items = base_items()\n-        items = []\n-        for item in base_items:\n+\n+        def makeItem(item):\n+            """\n+            Gather the information needed by the widget for the given term.\n+            """\n             if not isinstance(item[\'content\'], six.string_types):\n                 item[\'content\'] = translate(\n                     item[\'content\'],\n                     context=self.request,\n                     default=item[\'value\'])\n-            items.append((item[\'value\'], item[\'content\']))\n+            return (item[\'value\'], item[\'content\'])\n+\n+        if isinstance(base_items, dict):\n+            items = collections.OrderedDict(\n+                (group_label, [\n+                    makeItem(base_item) for base_item in group_options])\n+                for group_label, group_options in base_items.items())\n+        else:\n+            items = [makeItem(item) for item in base_items]\n         args[\'items\'] = items\n \n         return args\n'

