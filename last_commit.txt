Repository: plone.releaser


Branch: refs/heads/master
Date: 2019-10-26T13:43:54+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/34ae7badc751e0ed8638e7ec9d22bb0ab4bdff78

Fixed adding some package versions twice when releasing.

When releasing a package with a version pin in `[versions:python27]`
this pin would correctly get updated, but an extra pin added at the bottom.

Fixes https://github.com/plone/plone.releaser/issues/24

Files changed:
A news/24.bugfix
M plone/releaser/buildout.py

b'diff --git a/news/24.bugfix b/news/24.bugfix\nnew file mode 100644\nindex 0000000..0ffb344\n--- /dev/null\n+++ b/news/24.bugfix\n@@ -0,0 +1,2 @@\n+Fixed adding some package versions twice when releasing.\n+[maurits]\ndiff --git a/plone/releaser/buildout.py b/plone/releaser/buildout.py\nindex 4bc5189..df0c385 100644\n--- a/plone/releaser/buildout.py\n+++ b/plone/releaser/buildout.py\n@@ -60,20 +60,29 @@ def versions(self):\n \n         We use strict=False to avoid a DuplicateOptionError.\n         This happens in coredev 4.3 because we pin \'babel\' and \'Babel\'.\n+\n+        We need to combine all versions sections, like these:\n+        [\'versions\', \'versions:python27\']\n+\n         """\n         config = ConfigParser(interpolation=ExtendedInterpolation(), strict=False)\n         with open(self.file_location) as f:\n             config.read_file(f)\n-        return config["versions"]\n+        versions = {}\n+        for section in config.sections():\n+            if "versions" in section.split(":"):\n+                for package, version in config[section].items():\n+                    # Note: the package names are lower case.\n+                    versions[package] = version\n+        return versions\n \n     def __contains__(self, package_name):\n-        return package_name.lower() in list(self.versions.keys())\n+        return package_name.lower() in self.versions\n \n     def __getitem__(self, package_name):\n-        if self.__contains__(package_name):\n-            return self.versions.get(package_name)\n-        else:\n-            raise KeyError\n+        if package_name in self:\n+            return self.versions.get(package_name.lower())\n+        raise KeyError\n \n     def __setitem__(self, package_name, new_version):\n         path = os.path.join(os.getcwd(), self.file_location)\n'

Repository: plone.releaser


Branch: refs/heads/master
Date: 2019-10-30T14:45:45+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.releaser/commit/fd804bb7f8182083416cd37d4f2271e943e9bba1

Merge pull request #29 from plone/maurits/issue-24-double-python27-versions

Fixed adding some package versions twice when releasing.

Files changed:
A news/24.bugfix
M plone/releaser/buildout.py

b'diff --git a/news/24.bugfix b/news/24.bugfix\nnew file mode 100644\nindex 0000000..0ffb344\n--- /dev/null\n+++ b/news/24.bugfix\n@@ -0,0 +1,2 @@\n+Fixed adding some package versions twice when releasing.\n+[maurits]\ndiff --git a/plone/releaser/buildout.py b/plone/releaser/buildout.py\nindex 4bc5189..df0c385 100644\n--- a/plone/releaser/buildout.py\n+++ b/plone/releaser/buildout.py\n@@ -60,20 +60,29 @@ def versions(self):\n \n         We use strict=False to avoid a DuplicateOptionError.\n         This happens in coredev 4.3 because we pin \'babel\' and \'Babel\'.\n+\n+        We need to combine all versions sections, like these:\n+        [\'versions\', \'versions:python27\']\n+\n         """\n         config = ConfigParser(interpolation=ExtendedInterpolation(), strict=False)\n         with open(self.file_location) as f:\n             config.read_file(f)\n-        return config["versions"]\n+        versions = {}\n+        for section in config.sections():\n+            if "versions" in section.split(":"):\n+                for package, version in config[section].items():\n+                    # Note: the package names are lower case.\n+                    versions[package] = version\n+        return versions\n \n     def __contains__(self, package_name):\n-        return package_name.lower() in list(self.versions.keys())\n+        return package_name.lower() in self.versions\n \n     def __getitem__(self, package_name):\n-        if self.__contains__(package_name):\n-            return self.versions.get(package_name)\n-        else:\n-            raise KeyError\n+        if package_name in self:\n+            return self.versions.get(package_name.lower())\n+        raise KeyError\n \n     def __setitem__(self, package_name, new_version):\n         path = os.path.join(os.getcwd(), self.file_location)\n'

