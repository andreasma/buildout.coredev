Repository: plone.scale


Branch: refs/heads/master
Date: 2018-10-05T17:53:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.scale/commit/e604dddbe89b5a735174896d45b08271abe51afc

fix deprecation and other warning in test

Files changed:
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py

b'diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 68b9fea..58177f7 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -1,22 +1,28 @@\n # -*- coding: utf-8 -*-\n-try:\n-    from cStringIO import StringIO\n-except ImportError:\n-    from io import BytesIO as StringIO\n-\n from plone.scale.scale import scaleImage\n from plone.scale.tests import TEST_DATA_LOCATION\n from unittest import TestCase\n \n import os.path\n-import PIL.Image, PIL.ImageDraw\n+import PIL.Image\n+import PIL.ImageDraw\n+\n+try:\n+    from cStringIO import StringIO\n+except ImportError:\n+    from io import BytesIO as StringIO\n \n \n-PNG = open(os.path.join(TEST_DATA_LOCATION, "logo.png"), \'rb\').read()\n-GIF = open(os.path.join(TEST_DATA_LOCATION, "logo.gif"), \'rb\').read()\n-TIFF = open(os.path.join(TEST_DATA_LOCATION, "logo.tiff"), \'rb\').read()\n-CMYK = open(os.path.join(TEST_DATA_LOCATION, "cmyk.jpg"), \'rb\').read()\n-PROFILE = open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), \'rb\').read()\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.png"), \'rb\') as fio:\n+    PNG = fio.read()\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.gif"), \'rb\') as fio:\n+    GIF = fio.read()\n+with open(os.path.join(TEST_DATA_LOCATION, "logo.tiff"), \'rb\') as fio:\n+    TIFF = fio.read()\n+with open(os.path.join(TEST_DATA_LOCATION, "cmyk.jpg"), \'rb\') as fio:\n+    CMYK = fio.read()\n+with open(os.path.join(TEST_DATA_LOCATION, "profile.jpg"), \'rb\') as fio:\n+    PROFILE = fio.read()\n \n \n class ScalingTests(TestCase):\n@@ -104,7 +110,9 @@ def testAutomaticPalette(self):\n         self.assertEqual(png.format, \'PNG\')\n         self.assertIsNone(png.getcolors(maxcolors=256))\n         # scale it to a size where we get less than 256 colors\n-        (imagedata, format, size) = scaleImage(dst.getvalue(), 24, None, "down")\n+        (imagedata, format, size) = scaleImage(\n+            dst.getvalue(), 24, None, "down"\n+        )\n         image = PIL.Image.open(StringIO(imagedata))\n         # we should now have an image in palette mode\n         self.assertEqual(image.mode, \'P\')\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex d81429a..fda5de7 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -53,13 +53,13 @@ def factory(self, **kw):\n     def testInterface(self):\n         from plone.scale.storage import IImageScaleStorage\n         storage = self.storage\n-        self.failUnless(IImageScaleStorage.providedBy(storage))\n+        self.assertTrue(IImageScaleStorage.providedBy(storage))\n \n     def testScaleForNonExistingScaleWithCreationBBB(self):\n         storage = self.storage\n         scale = storage.scale(factory=self.factory, foo=23, bar=42)\n-        self.failUnless(\'uid\' in scale)\n-        self.failUnless(\'key\' in scale)\n+        self.assertIn(\'uid\', scale)\n+        self.assertIn(\'key\', scale)\n         self.assertEqual(scale[\'data\'], \'some data\')\n         self.assertEqual(scale[\'width\'], 42)\n         self.assertEqual(scale[\'height\'], 23)\n@@ -69,8 +69,8 @@ def testScaleForNonExistingScaleWithCreation(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale = storage.scale(foo=23, bar=42)\n-        self.failUnless(\'uid\' in scale)\n-        self.failUnless(\'key\' in scale)\n+        self.assertIn(\'uid\', scale)\n+        self.assertIn(\'key\', scale)\n         self.assertEqual(scale[\'data\'], \'some data\')\n         self.assertEqual(scale[\'width\'], 42)\n \n@@ -99,20 +99,20 @@ def testScaleForExistingScale(self):\n         storage = self.storage\n         scale1 = storage.scale(foo=23, bar=42)\n         scale2 = storage.scale(bar=42, foo=23)\n-        self.failUnless(scale1 is scale2)\n+        self.assertIs(scale1, scale2)\n \n     def testScaleForSimilarScalesBBB(self):\n         storage = self.storage\n         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)\n         scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz=\'!\')\n-        self.failIf(scale1 is scale2)\n+        self.assertIsNot(scale1, scale2)\n \n     def testScaleForSimilarScales(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale1 = storage.scale(foo=23, bar=42)\n         scale2 = storage.scale(bar=42, foo=23, hurz=\'!\')\n-        self.failIf(scale1 is scale2)\n+        self.assertIsNot(scale1, scale2)\n \n     def testGetItemBBB(self):\n         storage = self.storage\n@@ -132,8 +132,8 @@ def testGetItem(self):\n         scale = storage.scale(foo=23, bar=42)\n         uid = scale[\'uid\']\n         scale = storage[uid]\n-        self.failUnless(\'uid\' in scale)\n-        self.failUnless(\'key\' in scale)\n+        self.assertIn(\'uid\', scale)\n+        self.assertIn(\'key\', scale)\n         self.assertEqual(scale[\'data\'], \'some data\')\n         self.assertEqual(scale[\'width\'], 42)\n         self.assertEqual(scale[\'height\'], 23)\n@@ -223,8 +223,8 @@ def testCleanUpOldItems(self):\n         storage.modified = lambda: next_modified\n         scale_new = storage.scale(foo=23, bar=42)\n         self.assertEqual(len(storage), 1)\n-        self.assertEqual(scale_new[\'uid\'] in storage, True)\n-        self.assertEqual(scale_old[\'uid\'] in storage, False)\n+        self.assertIn(scale_new[\'uid\'], storage)\n+        self.assertNotIn(scale_old[\'uid\'], storage)\n \n         # When modification time is older than a day, too old scales\n         # get purged.\n@@ -232,9 +232,9 @@ def testCleanUpOldItems(self):\n         storage.modified = lambda: next_modified\n         scale_newer = storage.scale(foo=23, bar=42)\n \n-        self.assertEqual(scale_newer[\'uid\'] in storage, True)\n-        self.assertEqual(scale_new[\'uid\'] in storage, False)\n-        self.assertEqual(scale_old[\'uid\'] in storage, False)\n+        self.assertIn(scale_newer[\'uid\'], storage)\n+        self.assertNotIn(scale_new[\'uid\'], storage)\n+        self.assertNotIn(scale_old[\'uid\'], storage)\n         del storage[scale_newer[\'uid\']]\n         self.assertEqual(len(storage), 0)\n \n'

