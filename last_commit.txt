Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2018-04-06T20:49:12+10:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFEditions/commit/275ee74d60a6fd12977eb60dde6e8586243a3ed2

move CMFControllerForms to BrowserViews

Files changed:
A Products/CMFEditions/browser/templates/version_file_view.pt
A Products/CMFEditions/browser/templates/version_image_view.pt
A Products/CMFEditions/browser/templates/version_metadata_view.pt
A Products/CMFEditions/browser/views.py
M CHANGES.rst
M Products/CMFEditions/VersionPolicies.py
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/profiles/default/repositorytool.xml
M Products/CMFEditions/subscriber.py
M Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
M Products/CMFEditions/tests/webdav_history.txt
M Products/CMFEditions/utilities.py
D Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy
D Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy.metadata
D Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy
D Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy.metadata
D Products/CMFEditions/skins/cmfeditions_views/file_download_version.py
D Products/CMFEditions/skins/cmfeditions_views/version_file_view.pt
D Products/CMFEditions/skins/cmfeditions_views/version_image_tag.py
D Products/CMFEditions/skins/cmfeditions_views/version_image_view.pt
D Products/CMFEditions/skins/cmfeditions_views/version_metadata_view.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index 6f11609..22a1af0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -59,6 +59,9 @@ Bug fixes:
 - Make tests run in Zope 4 (includes some cleanup).
   [pbauer]
 
+- Get rid of CMFFormController scripts
+  [tomgross]
+
 
 3.0 (2016-12-05)
 ----------------
diff --git a/Products/CMFEditions/VersionPolicies.py b/Products/CMFEditions/VersionPolicies.py
index 6bb5853..b998043 100644
--- a/Products/CMFEditions/VersionPolicies.py
+++ b/Products/CMFEditions/VersionPolicies.py
@@ -20,8 +20,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
 """Default Version Policy implementations.
-
-$Id$
 """
 
 from AccessControl import ClassSecurityInfo
@@ -45,12 +43,6 @@ def __init__(self, obj_id, title, **kw):
     def Title(self):
         return self.title
 
-
-class ATVersionOnEditPolicy(VersionPolicy):
-    """A policy that implements version creation on edit for AT types,
-       requires a custom edit_macros.pt and a controller script called
-       update_version_on_edit.  This policy automatically adds and removes
-       the controller script from the AT edit controller chain on install."""
     FC_ACTION_LIST = ({'template': 'atct_edit',
                        'status': 'success',
                        'action': 'traverse_to',
@@ -77,31 +69,17 @@ class ATVersionOnEditPolicy(VersionPolicy):
                        'button':None},)
 
     def setupPolicyHook(self, portal, **kw):
-        add_form_controller_overrides(portal, self.FC_ACTION_LIST)
+        pass
 
     def removePolicyHook(self, portal, **kw):
         remove_form_controller_overrides(portal, self.FC_ACTION_LIST)
 
 
-# Helper methods
-def add_form_controller_overrides(portal, actions):
-    fc = getToolByName(portal, 'portal_form_controller', None)
-    if fc is not None:
-        for action in actions:
-            fc.addFormAction(action['template'],
-                        action['status'],
-                        action['context'],
-                        action['button'],
-                        action['action'],
-                        action['expression'])
-
-
 def remove_form_controller_overrides(portal, actions):
     fc = getToolByName(portal, 'portal_form_controller', None)
     # Fake a request because form controller needs one to delete actions
     fake_req = DummyRequest()
-    i = 0
-    for fc_act in fc.listFormActions(1):
+    for i, fc_act in enumerate(fc.listFormActions(1)):
         for action in actions:
             if (action['template'] == fc_act.getObjectId() and
                     action['status'] == fc_act.getStatus() and
@@ -114,11 +92,10 @@ def remove_form_controller_overrides(portal, actions):
                 fake_req.form['old_context_type_%s'%i]=action['context'] or ''
                 fake_req.form['old_button_%s'%i]=action['button'] or ''
                 fake_req.form['old_status_%s'%i]=action['status'] or ''
-        i = i+1
     # Use the private method because the public one does a redirect
     fc._delFormActions(fc.actions,fake_req)
 
+
 # Fake request class to satisfy formcontroller removal policy
 class DummyRequest(dict):
-    def __init__(self):
-        self.form = {}
+    form = {}
diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml
index 6177865..b804731 100644
--- a/Products/CMFEditions/browser/configure.zcml
+++ b/Products/CMFEditions/browser/configure.zcml
@@ -35,5 +35,40 @@
         permission="zope2.View"
         />
 
+    <browser:page
+        for="*"
+        name="update_version_on_edit"
+        class=".views.UpdateVersionOnEditView"
+        permission="zope2.View"
+        />
+
+    <browser:page
+        for="*"
+        name="update_version_before_edit"
+        class=".views.UpdateVersionBeforeEditView"
+        permission="zope2.View"
+        />
+
+    <browser:page
+        for="*"
+        name="version_file_view"
+        template="templates/version_file_view.pt"
+        permission="zope2.View"
+        />
+
+    <browser:page
+        for="*"
+        name="version_image_view"
+        template="templates/version_image_view.pt"
+        permission="zope2.View"
+        />
+
+    <browser:page
+        for="*"
+        name="version_metadata_view"
+        template="templates/version_metadata_view.pt"
+        permission="zope2.View"
+        />
+
 </configure>
 
diff --git a/Products/CMFEditions/skins/cmfeditions_views/version_file_view.pt b/Products/CMFEditions/browser/templates/version_file_view.pt
similarity index 100%
rename from Products/CMFEditions/skins/cmfeditions_views/version_file_view.pt
rename to Products/CMFEditions/browser/templates/version_file_view.pt
diff --git a/Products/CMFEditions/skins/cmfeditions_views/version_image_view.pt b/Products/CMFEditions/browser/templates/version_image_view.pt
similarity index 100%
rename from Products/CMFEditions/skins/cmfeditions_views/version_image_view.pt
rename to Products/CMFEditions/browser/templates/version_image_view.pt
diff --git a/Products/CMFEditions/skins/cmfeditions_views/version_metadata_view.pt b/Products/CMFEditions/browser/templates/version_metadata_view.pt
similarity index 100%
rename from Products/CMFEditions/skins/cmfeditions_views/version_metadata_view.pt
rename to Products/CMFEditions/browser/templates/version_metadata_view.pt
diff --git a/Products/CMFEditions/browser/views.py b/Products/CMFEditions/browser/views.py
new file mode 100644
index 0000000..8db1666
--- /dev/null
+++ b/Products/CMFEditions/browser/views.py
@@ -0,0 +1,88 @@
+from Acquisition import aq_inner
+from Products.Five import BrowserView
+from Products.CMFCore.utils import getToolByName
+from Products.CMFEditions import CMFEditionsMessageFactory as _
+from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError
+from Products.CMFEditions.utilities import isObjectChanged
+from Products.CMFEditions.utilities import isObjectVersioned
+from Products.CMFEditions.utilities import maybeSaveVersion
+from Products.statusmessages.interfaces import IStatusMessage
+
+class UpdateVersionOnEditView(BrowserView):
+
+    def success(self):
+        return self.context.restrictedTraverse('content_edit')
+
+    def __call__(self):
+        context = aq_inner(self.context)
+        pf = getToolByName(context, 'portal_factory')
+
+        if pf.isTemporary(context):
+            # don't do anything if we're in the factory
+            return self.success()
+
+        comment = _("Initial revision")
+
+        if isObjectVersioned(context):
+            return self.success()
+
+        try:
+            maybeSaveVersion(context, comment=comment, force=False)
+        except FileTooLargeToVersionError:
+            pass # the on edit save will emit a warning
+
+        return self.success()
+
+
+class UpdateVersionBeforeEditView(BrowserView):
+
+    def success(self):
+        self.request.response.redirect('view')
+
+    def __call__(self):
+        context = aq_inner(self.context)
+        comment = self.request.get('cmfeditions_version_comment', '')
+        force = self.request.get('cmfeditions_save_new_version', None) is not None
+
+        if not (isObjectChanged(context) or force):
+            return self.success()
+
+        try:
+            maybeSaveVersion(context, comment=comment, force=force)
+        except FileTooLargeToVersionError:
+            IStatusMessage(self.request).addStatusMessage(
+                _('Versioning for this file has been disabled because it is too large'),
+                type='warn'
+                )
+        return self.success()
+
+
+class FileDownloadVersionView(BrowserView):
+
+    def __call__(self):
+        context = aq_inner(self.context)
+        version_id = int(self.request.get('version_id', 1))
+        RESPONSE = self.request.RESPONSE
+
+        portal_repository = getToolByName(context, 'portal_repository')
+        obj = portal_repository.retrieve(context, version_id).object
+        RESPONSE.setHeader('Content-Type', obj.getContentType())
+        RESPONSE.setHeader('Content-Length', obj.get_size())
+        RESPONSE.setHeader('Content-Disposition',
+                           'attachment;filename="%s"'%(obj.getFilename()))
+        return obj.data
+
+
+class VersionImageTagView(BrowserView):
+
+    def __call__(self):
+        version_id = int(self.request.get('version_id', 1))
+        here_url = self.request.get('here_url', '')
+        context = aq_inner(self.context)
+        portal_repository = getToolByName(context, 'portal_repository')
+        obj = portal_repository.retrieve(context, version_id).object
+        working_copy_tag = obj.tag()
+        altPos = working_copy_tag.find("alt=")
+        tag = '<img src="%s/file_download_version?version_id=%s" %s' % \
+              (here_url, version_id, working_copy_tag[altPos:])
+        return tag
diff --git a/Products/CMFEditions/profiles/default/repositorytool.xml b/Products/CMFEditions/profiles/default/repositorytool.xml
index d80ae8c..be45c76 100644
--- a/Products/CMFEditions/profiles/default/repositorytool.xml
+++ b/Products/CMFEditions/profiles/default/repositorytool.xml
@@ -1,34 +1,25 @@
 <?xml version="1.0"?>
 <repositorytool>
  <policies purge="true">
-  <policy name="at_edit_autoversion"
-     title="Create version on edit (AT objects only)"
-     class="Products.CMFEditions.VersionPolicies.ATVersionOnEditPolicy"/>
   <policy name="version_on_revert" title="Create version on version revert"/>
  </policies>
  <policymap purge="true">
   <type name="ATDocument">
-   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="ATNewsItem">
-   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="Document">
-   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="Event">
-   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="Link">
-   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="News Item">
-   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
  </policymap>
diff --git a/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy b/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy
deleted file mode 100644
index b0d6858..0000000
--- a/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy
+++ /dev/null
@@ -1,32 +0,0 @@
-## Script (Python) "update_version_on_edit"
-##title=Edit Content
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-##
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFEditions import CMFEditionsMessageFactory as _
-from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError
-from Products.CMFEditions.utilities import isObjectVersioned, maybeSaveVersion
-
-pf = getToolByName(context, 'portal_factory')
-
-if pf.isTemporary(context):
-    # don't do anything if we're in the factory
-    return state.set(status='success')
-
-comment = _("Initial revision")
-
-if isObjectVersioned(context):
-    return state.set(status='success')
-
-try:
-    maybeSaveVersion(context, comment=comment, force=False)
-except FileTooLargeToVersionError:
-    pass # the on edit save will emit a warning
-
-return state.set(status='success')
diff --git a/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy.metadata b/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy.metadata
deleted file mode 100644
index fb21cf4..0000000
--- a/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy.metadata
+++ /dev/null
@@ -1,9 +0,0 @@
-[default]
-title = Update Version before Edit
-
-[validators]
-validators =
-
-[actions]
-action.success = traverse_to:string:content_edit
-
diff --git a/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy b/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy
deleted file mode 100644
index ecee18b..0000000
--- a/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy
+++ /dev/null
@@ -1,32 +0,0 @@
-## Script (Python) "update_version_on_edit"
-##title=Edit Content
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-##
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFEditions import CMFEditionsMessageFactory as _
-from Products.CMFEditions.utilities import isObjectChanged, maybeSaveVersion
-from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError
-
-putils = getToolByName(context, 'plone_utils')
-REQUEST = context.REQUEST
-comment = REQUEST.get('cmfeditions_version_comment', '')
-force = REQUEST.get('cmfeditions_save_new_version', None) is not None
-
-if not (isObjectChanged(context) or force):
-    return state.set(status='success')
-
-try:
-    maybeSaveVersion(context, comment=comment, force=force)
-except FileTooLargeToVersionError:
-    putils.addPortalMessage(
-        _("Versioning for this file has been disabled because it is too large"),
-        type="warn"
-        )
-
-return state.set(status='success')
diff --git a/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy.metadata b/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy.metadata
deleted file mode 100644
index effd1e0..0000000
--- a/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy.metadata
+++ /dev/null
@@ -1,8 +0,0 @@
-[default]
-title = Update Version on Edit
-
-[validators]
-validators =
-
-[actions]
-action.success = redirect_to_action:string:view
\ No newline at end of file
diff --git a/Products/CMFEditions/skins/cmfeditions_views/file_download_version.py b/Products/CMFEditions/skins/cmfeditions_views/file_download_version.py
deleted file mode 100644
index fc92ecb..0000000
--- a/Products/CMFEditions/skins/cmfeditions_views/file_download_version.py
+++ /dev/null
@@ -1,19 +0,0 @@
-## Script (Python) "file_download_version"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=version_id=1
-##title=File download version
-##
-request = container.REQUEST
-RESPONSE =  request.RESPONSE
-
-obj = context.portal_repository.retrieve(context, version_id).object
-RESPONSE.setHeader('Content-Type', obj.getContentType())
-RESPONSE.setHeader('Content-Length', obj.get_size())
-RESPONSE.setHeader('Content-Disposition',
-                   'attachment;filename="%s"'%(obj.getFilename()))
-
-return obj.data
diff --git a/Products/CMFEditions/skins/cmfeditions_views/version_image_tag.py b/Products/CMFEditions/skins/cmfeditions_views/version_image_tag.py
deleted file mode 100644
index 28e5d63..0000000
--- a/Products/CMFEditions/skins/cmfeditions_views/version_image_tag.py
+++ /dev/null
@@ -1,18 +0,0 @@
-## Script (Python) "version_image_tag"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=here_url, version_id=None
-##title=Image tag for specific version
-##
-obj = context.portal_repository.retrieve(context, version_id).object
-working_copy_tag = obj.tag()
-
-# XXX Does someone know a less ugly way to do this?
-altPos = working_copy_tag.find("alt=")
-tag = '<img src="%s/file_download_version?version_id=%s" %s' % \
-      (here_url, version_id, working_copy_tag[altPos:])
-
-return tag
diff --git a/Products/CMFEditions/subscriber.py b/Products/CMFEditions/subscriber.py
index 2d5d750..8005e7c 100644
--- a/Products/CMFEditions/subscriber.py
+++ b/Products/CMFEditions/subscriber.py
@@ -20,8 +20,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
 """Event Subscribers
-
-$Id: ArchivistTool.py,v 1.15 2005/06/24 11:34:08 gregweb Exp $
 """
 from zope.i18nmessageid import MessageFactory
 from Acquisition import aq_get
@@ -37,37 +35,42 @@
 
 PMF = MessageFactory('plone')
 
+
 def webdavObjectEventHandler(obj, event, comment):
     obj = event.object
 
-    changed = isObjectChanged(obj)
-
-    if not changed:
+    if not isObjectChanged(obj):
         return
 
     try:
         maybeSaveVersion(obj, comment=comment, force=False)
     except FileTooLargeToVersionError:
-        pass # There's no way to emit a warning here. Or is there?
+        pass  # There's no way to emit a warning here. Or is there?
+
 
 def webdavObjectInitialized(obj, event):
     return webdavObjectEventHandler(obj, event, comment=_('Initial revision (WebDAV)'))
 
+
 def webdavObjectEdited(obj, event):
     return webdavObjectEventHandler(obj, event, comment=_('Edited (WebDAV)'))
 
+
 def _getVersionComment(object):
     request = aq_get(object, 'REQUEST', None)
     return request and request.get('cmfeditions_version_comment', '')
 
+
 def objectInitialized(obj, event):
     comment = _getVersionComment(event.object) or _('Initial revision')
     return webdavObjectEventHandler(obj, event, comment=comment)
 
+
 def objectEdited(obj, event):
     comment = _getVersionComment(event.object) or PMF('Edited')
     return webdavObjectEventHandler(obj, event, comment=comment)
 
+
 def object_removed(obj, event):
     """ an object is being deleted -
     also delete it's history
diff --git a/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py b/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
index 32ffdde..2919c39 100644
--- a/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
+++ b/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
@@ -36,7 +36,6 @@
 from Products.CMFEditions.interfaces.IRepository import IContentTypeVersionPolicySupport
 from Products.CMFEditions.interfaces.IRepository import IVersionData
 from Products.CMFEditions.VersionPolicies import VersionPolicy
-from Products.CMFEditions.VersionPolicies import ATVersionOnEditPolicy
 
 from DummyTools import DummyArchivist
 from DummyTools import notifyModified
@@ -657,13 +656,6 @@ def test13_at_auto_version_hooks(self):
                                                  'success', None, None))
         self.assertFalse(self.isFCActionInPlace('atct_edit',
                                                      'success', None, None))
-        # Add policy and check if hook is added
-        portal_repository.addPolicy('at_edit_autoversion', 'Auto policy',
-                                     ATVersionOnEditPolicy)
-        self.failUnless(self.isFCActionInPlace('validate_integrity',
-                                                     'success', None, None))
-        self.failUnless(self.isFCActionInPlace('atct_edit',
-                                                     'success', None, None))
 
     def test14_has_policy(self):
         portal_repository = self.portal.portal_repository
diff --git a/Products/CMFEditions/tests/webdav_history.txt b/Products/CMFEditions/tests/webdav_history.txt
index 3195894..c0e55e8 100644
--- a/Products/CMFEditions/tests/webdav_history.txt
+++ b/Products/CMFEditions/tests/webdav_history.txt
@@ -4,10 +4,6 @@ WebDAV and Versioning
 This doctest makes sure that WebDAV changes to Archetypes-based
 objects trigger versioning correctly:
 
-  >>> from pprint import pprint
-  >>> from StringIO import StringIO
-  >>> from Products.Archetypes.tests.utils import makeContent
-  >>> from Products.Archetypes.interfaces import IBaseObject
   >>> from plone.app.testing import TEST_USER_ID
   >>> from plone.app.testing import TEST_USER_NAME
   >>> from plone.app.testing import TEST_USER_PASSWORD
@@ -20,6 +16,7 @@ new object via the Plone UI:
   >>> portal = layer['portal']
   >>> setRoles(portal, TEST_USER_ID, ['Manager'])
   >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
+  >>> folder_path = '/'.join(folder.getPhysicalPath())
 
   >>> 'some-document' in folder.objectIds()
   False
@@ -33,7 +30,7 @@ new object via the Plone UI:
   ... Content-Type: text/plain; charset="utf-8"
   ...
   ... Some Content
-  ... """ % ('/'.join(folder.getPhysicalPath()), TEST_USER_NAME, TEST_USER_PASSWORD))
+  ... """ % (folder_path, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
@@ -59,7 +56,7 @@ another version of the object to be saved:
   ... Content-Type: text/plain; charset="utf-8"
   ...
   ... Some Other Content
-  ... """ % ('/'.join(folder.getPhysicalPath()), TEST_USER_NAME, TEST_USER_PASSWORD))
+  ... """ % (folder_path, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 204 No Content
   ...
 
@@ -75,7 +72,7 @@ not configured for folders:
   >>> print http(r"""
   ... MKCOL /%s/some-folder HTTP/1.1
   ... Authorization: Basic %s:%s
-  ... """ % ('/'.join(folder.getPhysicalPath()), TEST_USER_NAME, TEST_USER_PASSWORD))
+  ... """ % (folder_path, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
diff --git a/Products/CMFEditions/utilities.py b/Products/CMFEditions/utilities.py
index cf48b1d..7ac3b42 100644
--- a/Products/CMFEditions/utilities.py
+++ b/Products/CMFEditions/utilities.py
@@ -20,8 +20,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
 """Utilities
-
-$Id: utilities.py,v 1.1 2005/01/06 14:25:44 gregweb Exp $
 """
 
 import random
@@ -114,6 +112,7 @@ def isObjectChanged(obj):
             changed = True
     return changed
 
+
 def maybeSaveVersion(obj, policy='at_edit_autoversion', comment='', force=False):
     pr = getToolByName(obj, 'portal_repository', None)
     if pr is not None:
@@ -122,6 +121,7 @@ def maybeSaveVersion(obj, policy='at_edit_autoversion', comment='', force=False)
         if isVersionable and (force or pr.supportsPolicy(obj, policy)):
             pr.save(obj=obj, comment=comment)
 
+
 def wrap(obj, parent):
     """Copy the context and containment from one object to another.
 


Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2018-04-07T18:57:05+10:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFEditions/commit/5273991d8091278f744874f0a8bdc9e45e1e133b

Restore necessary parts of at_edit policy and remove deprecated stuff

Files changed:
M Products/CMFEditions/ArchivistTool.py
M Products/CMFEditions/KeepLastNVersionsTool.py
M Products/CMFEditions/Modifiers.py
M Products/CMFEditions/Permissions.py
M Products/CMFEditions/ReferenceFactoriesTool.py
M Products/CMFEditions/StorageMigrationSupport.py
M Products/CMFEditions/VersionPolicies.py
M Products/CMFEditions/interfaces/IArchivist.py
M Products/CMFEditions/interfaces/IModifier.py
M Products/CMFEditions/interfaces/IPurgePolicy.py
M Products/CMFEditions/interfaces/IReferenceFactories.py
M Products/CMFEditions/interfaces/IRepository.py
M Products/CMFEditions/interfaces/IStorage.py
M Products/CMFEditions/interfaces/IVersionPolicy.py
M Products/CMFEditions/profiles/default/repositorytool.xml
M Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
M Products/CMFEditions/tests/test_IntegrationTests.py

diff --git a/Products/CMFEditions/ArchivistTool.py b/Products/CMFEditions/ArchivistTool.py
index 1771152..dc2d632 100644
--- a/Products/CMFEditions/ArchivistTool.py
+++ b/Products/CMFEditions/ArchivistTool.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Archivist implementation
 
-$Id: ArchivistTool.py,v 1.15 2005/06/24 11:34:08 gregweb Exp $
 """
 
 from AccessControl import ClassSecurityInfo
diff --git a/Products/CMFEditions/KeepLastNVersionsTool.py b/Products/CMFEditions/KeepLastNVersionsTool.py
index 15c4ff9..e7fce2e 100644
--- a/Products/CMFEditions/KeepLastNVersionsTool.py
+++ b/Products/CMFEditions/KeepLastNVersionsTool.py
@@ -21,9 +21,7 @@
 #########################################################################
 """Storage Purge Policy Tool Keeping Only the Last n Versions
 
-$Id$
 """
-__version__ = "$Revision$"
 
 from zope.interface import implementer
 
diff --git a/Products/CMFEditions/Modifiers.py b/Products/CMFEditions/Modifiers.py
index 040ce8f..e00cb0b 100644
--- a/Products/CMFEditions/Modifiers.py
+++ b/Products/CMFEditions/Modifiers.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Modifier wrappers
 
-$Id: Modifiers.py,v 1.3 2005/06/09 13:07:28 duncanb Exp $
 """
 
 from App.class_init import InitializeClass
diff --git a/Products/CMFEditions/Permissions.py b/Products/CMFEditions/Permissions.py
index 65fb787..ac347cf 100644
--- a/Products/CMFEditions/Permissions.py
+++ b/Products/CMFEditions/Permissions.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Permissions
 
-$Id: Permissions.py,v 1.1 2005/02/13 11:52:58 gregweb Exp $
 """
 
 from Products.CMFCore.permissions import setDefaultRoles
diff --git a/Products/CMFEditions/ReferenceFactoriesTool.py b/Products/CMFEditions/ReferenceFactoriesTool.py
index ca1a8f1..2021584 100644
--- a/Products/CMFEditions/ReferenceFactoriesTool.py
+++ b/Products/CMFEditions/ReferenceFactoriesTool.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Manages Factories for diffrenet kinds of references.
 
-$Id: $
 """
 
 from App.class_init import InitializeClass
diff --git a/Products/CMFEditions/StorageMigrationSupport.py b/Products/CMFEditions/StorageMigrationSupport.py
index 7d0a006..684f5e2 100644
--- a/Products/CMFEditions/StorageMigrationSupport.py
+++ b/Products/CMFEditions/StorageMigrationSupport.py
@@ -23,7 +23,6 @@
 
 Creating a test hierarchy for migration tests.
 
-$Id$
 """
 import logging
 import os.path
diff --git a/Products/CMFEditions/VersionPolicies.py b/Products/CMFEditions/VersionPolicies.py
index b998043..5748d81 100644
--- a/Products/CMFEditions/VersionPolicies.py
+++ b/Products/CMFEditions/VersionPolicies.py
@@ -20,6 +20,7 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
 """Default Version Policy implementations.
+
 """
 
 from AccessControl import ClassSecurityInfo
@@ -43,6 +44,12 @@ def __init__(self, obj_id, title, **kw):
     def Title(self):
         return self.title
 
+
+class ATVersionOnEditPolicy(VersionPolicy):
+    """A policy that implements version creation on edit for AT types,
+       requires a custom edit_macros.pt and a controller script called
+       update_version_on_edit.  This policy automatically adds and removes
+       the controller script from the AT edit controller chain on install."""
     FC_ACTION_LIST = ({'template': 'atct_edit',
                        'status': 'success',
                        'action': 'traverse_to',
@@ -95,7 +102,6 @@ def remove_form_controller_overrides(portal, actions):
     # Use the private method because the public one does a redirect
     fc._delFormActions(fc.actions,fake_req)
 
-
 # Fake request class to satisfy formcontroller removal policy
 class DummyRequest(dict):
     form = {}
diff --git a/Products/CMFEditions/interfaces/IArchivist.py b/Products/CMFEditions/interfaces/IArchivist.py
index b7c4c43..f669050 100644
--- a/Products/CMFEditions/interfaces/IArchivist.py
+++ b/Products/CMFEditions/interfaces/IArchivist.py
@@ -21,8 +21,6 @@
 #########################################################################
 """Intercepts/modifies saving/retrieving of versions to/from the repository.
 
-
-$Id: IArchivist.py,v 1.3 2005/02/23 00:29:02 gregweb Exp $
 """
 
 from zope.interface import Interface, Attribute
diff --git a/Products/CMFEditions/interfaces/IModifier.py b/Products/CMFEditions/interfaces/IModifier.py
index d9e820d..7cf2d67 100644
--- a/Products/CMFEditions/interfaces/IModifier.py
+++ b/Products/CMFEditions/interfaces/IModifier.py
@@ -24,7 +24,6 @@
 #########################################################################
 """Intercepts/modifies saving/retrieving of versions to/from the repository.
 
-$Id: IModifier.py,v 1.7 2005/06/24 11:42:01 gregweb Exp $
 """
 
 from zope.interface import Interface
diff --git a/Products/CMFEditions/interfaces/IPurgePolicy.py b/Products/CMFEditions/interfaces/IPurgePolicy.py
index 42198a7..b4637fb 100644
--- a/Products/CMFEditions/interfaces/IPurgePolicy.py
+++ b/Products/CMFEditions/interfaces/IPurgePolicy.py
@@ -24,7 +24,6 @@
 At save time control is handed over to the purge policy which has full
 control over all versions from a resources history.
 
-$Id$
 """
 
 from zope.interface import Interface
diff --git a/Products/CMFEditions/interfaces/IReferenceFactories.py b/Products/CMFEditions/interfaces/IReferenceFactories.py
index c5470dc..4e62e19 100644
--- a/Products/CMFEditions/interfaces/IReferenceFactories.py
+++ b/Products/CMFEditions/interfaces/IReferenceFactories.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Manages Reference Factories.
 
-$Id: $
 """
 
 from zope.interface import Interface
diff --git a/Products/CMFEditions/interfaces/IRepository.py b/Products/CMFEditions/interfaces/IRepository.py
index 6207168..a70e75d 100644
--- a/Products/CMFEditions/interfaces/IRepository.py
+++ b/Products/CMFEditions/interfaces/IRepository.py
@@ -38,8 +38,6 @@
 former version
   A specific version in the past.
 
-
-$Id: IRepository.py,v 1.8 2005/04/01 17:41:56 disommav Exp $
 """
 
 from zope.interface import Interface, Attribute
diff --git a/Products/CMFEditions/interfaces/IStorage.py b/Products/CMFEditions/interfaces/IStorage.py
index fae57a7..f85fb39 100644
--- a/Products/CMFEditions/interfaces/IStorage.py
+++ b/Products/CMFEditions/interfaces/IStorage.py
@@ -26,7 +26,6 @@
 storage. The other interface definitions are defintions for types
 returned by storage methods.
 
-$Id$
 """
 
 from zope.interface import Interface, Attribute
diff --git a/Products/CMFEditions/interfaces/IVersionPolicy.py b/Products/CMFEditions/interfaces/IVersionPolicy.py
index 14f8359..7d9e654 100644
--- a/Products/CMFEditions/interfaces/IVersionPolicy.py
+++ b/Products/CMFEditions/interfaces/IVersionPolicy.py
@@ -20,7 +20,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
 """Version Policies
-$Id$
 """
 from zope.interface import Interface
 
diff --git a/Products/CMFEditions/profiles/default/repositorytool.xml b/Products/CMFEditions/profiles/default/repositorytool.xml
index be45c76..d80ae8c 100644
--- a/Products/CMFEditions/profiles/default/repositorytool.xml
+++ b/Products/CMFEditions/profiles/default/repositorytool.xml
@@ -1,25 +1,34 @@
 <?xml version="1.0"?>
 <repositorytool>
  <policies purge="true">
+  <policy name="at_edit_autoversion"
+     title="Create version on edit (AT objects only)"
+     class="Products.CMFEditions.VersionPolicies.ATVersionOnEditPolicy"/>
   <policy name="version_on_revert" title="Create version on version revert"/>
  </policies>
  <policymap purge="true">
   <type name="ATDocument">
+   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="ATNewsItem">
+   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="Document">
+   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="Event">
+   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="Link">
+   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
   <type name="News Item">
+   <policy name="at_edit_autoversion"/>
    <policy name="version_on_revert"/>
   </type>
  </policymap>
diff --git a/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py b/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
index 2919c39..828f378 100644
--- a/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
+++ b/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
@@ -123,7 +123,7 @@ def test02_retrieve(self):
         portal_repository.save(doc, comment='save no 2')
 
         vdata = portal_repository.retrieve(doc, selector=0)
-        self.failUnless(verifyObject(IVersionData, vdata))
+        self.assertTrue(verifyObject(IVersionData, vdata))
         self.assertEqual(vdata.object.text, 'text v1')
         vdata = portal_repository.retrieve(doc, selector=1)
         self.assertEqual(vdata.object.text, 'text v2')
@@ -204,7 +204,7 @@ def test06_retrieveWithNoMoreExistentObject(self):
             doc,
             selector=0)
         #vdata = portal_repository.retrieve(doc, selector=0)
-        #self.failUnless(verifyObject(IVersionData, vdata))
+        #self.assertTrue(verifyObject(IVersionData, vdata))
         #self.assertEqual(vdata.object.text, 'text v1')
         self.assertRaises(
               AttributeError,
@@ -236,7 +236,7 @@ def test07_restoreDeletedObject(self):
             selector=0,
             container=self.portal)
         #portal_repository.restore(history_id, selector=0, container=self.portal)
-        #self.failUnless('doc' in self.portal.objectIds())
+        #self.assertTrue('doc' in self.portal.objectIds())
         #restored = self.portal.doc
         #self.assertEqual(restored.text, 'text v1')
 
@@ -264,7 +264,7 @@ def test07_restoreDeletedObjectWithNewId(self):
             new_id='doc2')
         #portal_repository.restore(history_id, selector=0,
         #                                 container=self.portal, new_id='doc2')
-        #self.failUnless('doc2' in self.portal.objectIds())
+        #self.assertTrue('doc2' in self.portal.objectIds())
         #restored = self.portal.doc2
         #self.assertEqual(restored.text, 'text v1')
 
@@ -298,8 +298,8 @@ def test09_getHistoryMetadata(self):
         # The history is acquisition wrapped
         self.assertEqual(history.aq_parent, doc)
         # check if timestamp and principal available
-        self.failUnless(history.retrieve(1)['metadata']['sys_metadata']['timestamp'])
-        self.failUnless(history.retrieve(0)['metadata']['sys_metadata']['principal'])
+        self.assertTrue(history.retrieve(1)['metadata']['sys_metadata']['timestamp'])
+        self.assertTrue(history.retrieve(0)['metadata']['sys_metadata']['principal'])
         # check if correct data and metadata retrieved
         self.assertEqual(history.retrieve(0)['metadata']['sys_metadata']['comment'], 'save number 1')
         self.assertEqual(history.retrieve(1)['metadata']['sys_metadata']['comment'], 'save number 2')
@@ -422,7 +422,7 @@ def test_idModification(self):
         portal_repository.save(doc, comment='save no 2')
         portal_repository.revert(doc, 0)
         self.assertEqual(doc.getId(), 'newdoc')
-        self.failUnless('newdoc' in self.portal.objectIds())
+        self.assertTrue('newdoc' in self.portal.objectIds())
 
 class TestPolicyVersioning(TestCopyModifyMergeRepositoryToolBase):
 
@@ -450,7 +450,7 @@ def test01_remove_policy_from_type(self):
         # test that policies can be removed
         portal_repository = self.portal.portal_repository
         # Set it twice to ensure that duplicates aren't created
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                         'at_edit_autoversion'))
         portal_repository.removePolicyFromContentType('Document',
                                                         'at_edit_autoversion')
@@ -460,7 +460,7 @@ def test01_remove_policy_from_type(self):
     def test02_set_policy_on_type(self):
         # test that policies can be set and retrieved
         portal_repository = self.portal.portal_repository
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                         'at_edit_autoversion'))
         portal_repository.removePolicyFromContentType('Document',
                                                         'at_edit_autoversion')
@@ -468,7 +468,7 @@ def test02_set_policy_on_type(self):
                                                         'at_edit_autoversion'))
         portal_repository.addPolicyForContentType('Document',
                                                         'at_edit_autoversion')
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                         'at_edit_autoversion'))
 
     def test03_set_policy_types_map(self):
@@ -482,7 +482,7 @@ def test03_set_policy_types_map(self):
         # update the mapping
         portal_repository.manage_setTypePolicies({'Document':
                                                      ['at_edit_autoversion']})
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                        'at_edit_autoversion'))
 
         # assign two policies and then unassign them.
@@ -508,7 +508,7 @@ def test04_add_policy(self):
                                             'Create version when published')
         policies = portal_repository.listPolicies()
         self.assertEqual(len(policies), self.np+1)
-        self.failUnless('version_on_publish' in [p.getId() for p in policies])
+        self.assertTrue('version_on_publish' in [p.getId() for p in policies])
 
     def test04_add_policy_updates(self):
         # test calling addPolicy with an existing Id updates the title
@@ -518,7 +518,7 @@ def test04_add_policy_updates(self):
                                             'Fake policy title')
         policies = portal_repository.listPolicies()
         self.assertEqual(len(policies), self.np)
-        self.failUnless('Fake policy title' in [p.Title() for p in policies])
+        self.assertTrue('Fake policy title' in [p.Title() for p in policies])
 
     def test05_remove_policy(self):
         # test removing a policy removes the policy from all content types
@@ -541,7 +541,7 @@ def test07_set_policy_defs(self):
                                             'Fake policy title'),))
         policies = portal_repository.listPolicies()
         self.assertEqual(len(policies), 1)
-        self.failUnless('Fake policy title' in [p.Title() for p in policies])
+        self.assertTrue('Fake policy title' in [p.Title() for p in policies])
 
     def test08_mutators_fail_on_invalid_input(self):
         portal_repository = self.portal.portal_repository
@@ -588,7 +588,7 @@ def test09_policy_hooks(self):
         self.assertEqual(len(portal_repository.listPolicies()), self.np+1)
         portal_repository.addPolicyForContentType('Document',
                                                    'my_bogus_policy', out=out)
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                         'my_bogus_policy'))
         self.assertEqual(out, ['added','enabled Document'])
         portal_repository.removePolicyFromContentType('Document',
@@ -645,22 +645,17 @@ def test12_set_policy_types_map_calls_all_hooks(self):
 
     def test13_at_auto_version_hooks(self):
         portal_repository = self.portal.portal_repository
-        # Check if the form controller hook is in place:
-        self.failUnless(self.isFCActionInPlace('validate_integrity',
-                                                     'success', None, None))
-        self.failUnless(self.isFCActionInPlace('atct_edit',
-                                                     'success', None, None))
         # Remove policy and check if hook is removed
         portal_repository.removePolicy('at_edit_autoversion')
-        self.assertFalse(self.isFCActionInPlace('validate_integrity',
-                                                 'success', None, None))
-        self.assertFalse(self.isFCActionInPlace('atct_edit',
-                                                     'success', None, None))
+        self.assertFalse(self.isFCActionInPlace(
+            'validate_integrity', 'success', None, None))
+        self.assertFalse(self.isFCActionInPlace(
+            'atct_edit', 'success', None, None))
 
     def test14_has_policy(self):
         portal_repository = self.portal.portal_repository
         # We already have two policies by default
-        self.failUnless(portal_repository.hasPolicy(self.portal.doc))
+        self.assertTrue(portal_repository.hasPolicy(self.portal.doc))
         portal_repository.removePolicyFromContentType('Document',
                                                         'at_edit_autoversion')
         portal_repository.removePolicyFromContentType('Document',
diff --git a/Products/CMFEditions/tests/test_IntegrationTests.py b/Products/CMFEditions/tests/test_IntegrationTests.py
index e5dd3fb..9e42abe 100644
--- a/Products/CMFEditions/tests/test_IntegrationTests.py
+++ b/Products/CMFEditions/tests/test_IntegrationTests.py
@@ -144,9 +144,9 @@ def test05_getHistory(self):
         self.assertEqual(h1.version_id, 1)
         # self.assertEqual(h1.action, h1.ACTION_CHECKIN)
         # self.assertEqual(h1.message, 'v2\nsecond line')
-        # self.failUnless(h1.user_id)
+        # self.assertTrue(h1.user_id)
         # self.assertEqual(h1.path, '/'.join(doc.getPhysicalPath()))
-        # self.failUnless(h1.timestamp)
+        # self.assertTrue(h1.timestamp)
 
     def test06_retrieveSpecificVersion(self):
         portal_repo = self.portal.portal_repository
@@ -332,7 +332,7 @@ def test11_versionAFolderishObjectThatTreatsChildrensAsInsideRefs(self):
         # check if revertion worked correctly
         fol = self.portal.fol
         doc1 = fol.doc1
-        self.failUnless('doc2' in fol.objectIds())
+        self.assertTrue('doc2' in fol.objectIds())
         self.assertFalse('doc3' in fol.objectIds())
         doc2 = fol.doc2
         self.assertEqual(fol.Title(), "v2 of fol")
@@ -363,31 +363,31 @@ def test12_retrieveAndRevertRetainWorkingCopiesPermissions(self):
 
         # just check the original is unchanged
         settings = doc.permission_settings(perm)[0]
-        self.failUnless(settings['acquire'])
+        self.assertTrue(settings['acquire'])
         role_enabled = [r for r in settings['roles']
                         if r['name'] == member_role][0]
-        self.failUnless(role_enabled['checked'])
+        self.assertTrue(role_enabled['checked'])
 
         # ----- retrieve
         # check if retrieved object carries the working copy's permissions
         retrieved_data = portal_repo.retrieve(
             doc, 0, preserve=['_Access_contents_information_Permission'])
         settings = retrieved_data.object.permission_settings(perm)[0]
-        self.failUnless(settings['acquire'])
+        self.assertTrue(settings['acquire'])
         role_enabled = [
             r for r in settings['roles']
             if r['name'] == member_role
         ][0]
-        self.failUnless(role_enabled['checked'])
+        self.assertTrue(role_enabled['checked'])
 
         # check that the working copy's permissions are unchanged
         settings = doc.permission_settings(perm)[0]
-        self.failUnless(settings['acquire'])
+        self.assertTrue(settings['acquire'])
         role_enabled = [
             r for r in settings['roles']
             if r['name'] == member_role
         ][0]
-        self.failUnless(role_enabled['checked'])
+        self.assertTrue(role_enabled['checked'])
 
         # check if the preserved data is returned correctly
         preserved = retrieved_data.preserved_data['_Access_contents_information_Permission']  # noqa
@@ -397,10 +397,10 @@ def test12_retrieveAndRevertRetainWorkingCopiesPermissions(self):
         # check that the working copies permissions are unchanged after revert
         portal_repo.revert(doc, 0)
         settings = doc.permission_settings(perm)[0]
-        self.failUnless(settings['acquire'])
+        self.assertTrue(settings['acquire'])
         role_enabled = [r for r in settings['roles']
                         if r['name'] == member_role][0]
-        self.failUnless(role_enabled['checked'])
+        self.assertTrue(role_enabled['checked'])
 
     def test13_revertUpdatesCatalog(self):
         portal_repo = self.portal.portal_repository
@@ -421,7 +421,7 @@ def test13_revertUpdatesCatalog(self):
         retrieved_data = portal_repo.retrieve(
             doc, 0, preserve=['_Access_contents_information_Permission'])
         retrieved_doc = retrieved_data.object
-        self.failUnless('Plain text' in retrieved_doc.getText())
+        self.assertTrue('Plain text' in retrieved_doc.getText())
         # Test that basic retrieval did not alter the catalog
         results = cat(SearchableText='Plain Text')
         self.assertEqual(len(results), 0)
@@ -997,20 +997,20 @@ def test23_versioningPreservesFolderAnnotations(self):
         repo_fol2 = portal_repo.retrieve(fol, 1).object
 
         # Test values on the repository copies and the working copy
-        self.failUnlessEqual(repo_fol1.__annotations__['something'], True)
-        self.failUnlessEqual(repo_fol2.__annotations__['something'], False)
-        self.failUnlessEqual(fol.__annotations__['something'], None)
-        self.failUnlessEqual(repo_fol2.__annotations__.get('another_thing',
+        self.assertEqual(repo_fol1.__annotations__['something'], True)
+        self.assertEqual(repo_fol2.__annotations__['something'], False)
+        self.assertEqual(fol.__annotations__['something'], None)
+        self.assertEqual(repo_fol2.__annotations__.get('another_thing',
                                                            None), None)
 
         # Test that revert brings in the original annotation
         portal_repo.revert(fol)
-        self.failUnlessEqual(fol.__annotations__['something'], False)
-        self.failUnlessEqual(fol.__annotations__.get('another_thing', None),
+        self.assertEqual(fol.__annotations__['something'], False)
+        self.assertEqual(fol.__annotations__.get('another_thing', None),
                              None)
 
         portal_repo.revert(fol, 0)
-        self.failUnlessEqual(fol.__annotations__['something'], True)
+        self.assertEqual(fol.__annotations__['something'], True)
 
     def test24_versioningPreservesFolderOrder(self):
         portal_repo = self.portal.portal_repository
@@ -1025,18 +1025,18 @@ def test24_versioningPreservesFolderOrder(self):
         fol.setTitle('v2 of fol')
         fol.moveObjectsToTop(['doc2'])
 
-        self.failUnlessEqual(fol.objectIds()[0], 'doc2')
+        self.assertEqual(fol.objectIds()[0], 'doc2')
 
         working_ids = fol.objectIds()
 
         # Test that a retrieve provides the order and content from
         # the working copy on the repo copy
         repo_fol1 = portal_repo.retrieve(fol, 0).object
-        self.failUnlessEqual(repo_fol1.objectIds(), working_ids)
+        self.assertEqual(repo_fol1.objectIds(), working_ids)
 
         # Test that a revert preserves the order from the working copy
         portal_repo.revert(fol)
-        self.failUnlessEqual(fol.objectIds(), working_ids)
+        self.assertEqual(fol.objectIds(), working_ids)
 
         # See how we interact with delete
         fol.invokeFactory('Document', 'doc3')
@@ -1050,18 +1050,18 @@ def test24_versioningPreservesFolderOrder(self):
 
         # Test that we kept the ids from working copy, kept the new child
         # restored the deleted child
-        self.failUnlessEqual(fol.objectIds(), working_ids)
-        self.failUnlessEqual(fol.objectIds()[0], 'doc3')
-        self.failUnlessEqual(getattr(fol, 'doc2', None), None)
-        self.failUnlessEqual(fol['doc3'], doc3)
+        self.assertEqual(fol.objectIds(), working_ids)
+        self.assertEqual(fol.objectIds()[0], 'doc3')
+        self.assertEqual(getattr(fol, 'doc2', None), None)
+        self.assertEqual(fol['doc3'], doc3)
 
         # Test the BTreeFolder internals
-        self.failUnlessEqual(fol._tree.get('doc2', None), None)
-        self.failUnlessEqual(fol._tree['doc3'], doc3)
-        self.failUnlessEqual(fol._count(), 2)
-        self.failUnlessEqual(fol._mt_index[doc2.meta_type].get('doc2', None),
+        self.assertEqual(fol._tree.get('doc2', None), None)
+        self.assertEqual(fol._tree['doc3'], doc3)
+        self.assertEqual(fol._count(), 2)
+        self.assertEqual(fol._mt_index[doc2.meta_type].get('doc2', None),
                              None)
-        self.failUnlessEqual(fol._mt_index[doc3.meta_type]['doc3'], 1)
+        self.assertEqual(fol._mt_index[doc3.meta_type]['doc3'], 1)
 
     def test25_versioningRestoresInsideRefsFolderOrder(self):
         # Enable OMInsideChildrensModifier
@@ -1085,19 +1085,19 @@ def test25_versioningRestoresInsideRefsFolderOrder(self):
         fol.setTitle('v2 of fol')
         fol.moveObjectsToTop(['doc2'])
 
-        self.failUnlessEqual(fol.objectIds()[0], 'doc2')
+        self.assertEqual(fol.objectIds()[0], 'doc2')
 
         # Test that a retrieve uses the order from the repo copy
         repo_fol1 = portal_repo.retrieve(fol, 0).object
-        self.failUnlessEqual(fol.objectIds()[0], 'doc2')
+        self.assertEqual(fol.objectIds()[0], 'doc2')
         self.assertNotEqual(fol.objectIds(), orig_order)
-        self.failUnlessEqual(repo_fol1.objectIds()[0], 'doc1')
+        self.assertEqual(repo_fol1.objectIds()[0], 'doc1')
 
         # Test that a revert restores the order and objects from the
         # repo copy
         portal_repo.revert(fol)
-        self.failUnlessEqual(fol.objectIds()[0], 'doc1')
-        self.failUnlessEqual(fol.objectIds(), orig_order)
+        self.assertEqual(fol.objectIds()[0], 'doc1')
+        self.assertEqual(fol.objectIds(), orig_order)
 
         # See how we interact with some adds deletes and reorders
         fol.invokeFactory('Document', 'doc5')
@@ -1116,32 +1116,32 @@ def test25_versioningRestoresInsideRefsFolderOrder(self):
         # Test that a retrieve uses the repository order and items,
         # but does not affect the working copy
         repo_fol1 = portal_repo.retrieve(fol, 0).object
-        self.failUnlessEqual(repo_fol1.objectIds(), orig_order)
+        self.assertEqual(repo_fol1.objectIds(), orig_order)
         self.assertNotEqual(getattr(repo_fol1, 'doc2', None), None)
-        self.failUnlessEqual(getattr(repo_fol1, 'doc5', None), None)
+        self.assertEqual(getattr(repo_fol1, 'doc5', None), None)
 
         self.assertNotEqual(fol.objectIds(), orig_order)
-        self.failUnlessEqual(fol.objectIds()[0], 'doc4')
-        self.failUnlessEqual(fol.objectIds()[1], 'doc3')
-        self.failUnlessEqual(fol['doc3'], doc3)
-        self.failUnlessEqual(fol['doc4'], doc4)
-        self.failUnlessEqual(getattr(fol, 'doc2', None), None)
+        self.assertEqual(fol.objectIds()[0], 'doc4')
+        self.assertEqual(fol.objectIds()[1], 'doc3')
+        self.assertEqual(fol['doc3'], doc3)
+        self.assertEqual(fol['doc4'], doc4)
+        self.assertEqual(getattr(fol, 'doc2', None), None)
         self.assertNotEqual(getattr(fol, 'doc5', None), None)
 
         # Test that a revert restores the missing child from the repo
         # copy, removed the newly created child and restored the order
         portal_repo.revert(fol)
 
-        self.failUnlessEqual(list(fol.objectIds()), orig_order)
-        self.failUnlessEqual(getattr(fol, 'doc5', None), None)
+        self.assertEqual(list(fol.objectIds()), orig_order)
+        self.assertEqual(getattr(fol, 'doc5', None), None)
 
         # Test the BTreeFolder internals
-        self.failUnlessEqual(fol._tree.get('doc5', None), None)
-        self.failUnlessEqual(fol._count(), 4)
-        self.failUnlessEqual(fol._mt_index[doc3.meta_type].get('doc5', None),
+        self.assertEqual(fol._tree.get('doc5', None), None)
+        self.assertEqual(fol._count(), 4)
+        self.assertEqual(fol._mt_index[doc3.meta_type].get('doc5', None),
                              None)
-        self.failUnlessEqual(fol._tree['doc3'], fol['doc3'].aq_base)
-        self.failUnlessEqual(fol._mt_index[doc3.meta_type]['doc3'], 1)
+        self.assertEqual(fol._tree['doc3'], fol['doc3'].aq_base)
+        self.assertEqual(fol._mt_index[doc3.meta_type]['doc3'], 1)
 
     def test26_RegistryBasesNotVersionedOrRestored(self):
         portal_repo = self.portal.portal_repository


Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2018-04-08T04:03:24+10:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/Products.CMFEditions/commit/3a84145d4ddaaf8f187f78a33ff9ad84527fc840

removed cmfeditions_view registration

Files changed:
M Products/CMFEditions/profiles/default/skins.xml

diff --git a/Products/CMFEditions/profiles/default/skins.xml b/Products/CMFEditions/profiles/default/skins.xml
index f0467f9..eb38a80 100644
--- a/Products/CMFEditions/profiles/default/skins.xml
+++ b/Products/CMFEditions/profiles/default/skins.xml
@@ -2,10 +2,7 @@
 <object name="portal_skins">
  <object name="CMFEditions" meta_type="Filesystem Directory View"
     directory="Products.CMFEditions:skins/CMFEditions"/>
- <object name="cmfeditions_views" meta_type="Filesystem Directory View"
-    directory="Products.CMFEditions:skins/cmfeditions_views"/>
  <skin-path name="*">
-  <layer name="cmfeditions_views" insert-after="custom"/>
-  <layer name="CMFEditions" insert-after="cmfeditions_views"/>
+  <layer name="CMFEditions" insert-after="custom"/>
  </skin-path>
 </object>


Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2018-04-09T07:06:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFEditions/commit/c3ca7efdba5e03dd2f4a09ee2997ec8d6ac6c7fa

Merge pull request #42 from plone/tomgross-nocmfform

Move CMFControllerForms to BrowserViews

Files changed:
A Products/CMFEditions/browser/templates/version_file_view.pt
A Products/CMFEditions/browser/templates/version_image_view.pt
A Products/CMFEditions/browser/templates/version_metadata_view.pt
A Products/CMFEditions/browser/views.py
M CHANGES.rst
M Products/CMFEditions/ArchivistTool.py
M Products/CMFEditions/KeepLastNVersionsTool.py
M Products/CMFEditions/Modifiers.py
M Products/CMFEditions/Permissions.py
M Products/CMFEditions/ReferenceFactoriesTool.py
M Products/CMFEditions/StorageMigrationSupport.py
M Products/CMFEditions/VersionPolicies.py
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/interfaces/IArchivist.py
M Products/CMFEditions/interfaces/IModifier.py
M Products/CMFEditions/interfaces/IPurgePolicy.py
M Products/CMFEditions/interfaces/IReferenceFactories.py
M Products/CMFEditions/interfaces/IRepository.py
M Products/CMFEditions/interfaces/IStorage.py
M Products/CMFEditions/interfaces/IVersionPolicy.py
M Products/CMFEditions/profiles/default/skins.xml
M Products/CMFEditions/subscriber.py
M Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
M Products/CMFEditions/tests/test_IntegrationTests.py
M Products/CMFEditions/tests/webdav_history.txt
M Products/CMFEditions/utilities.py
D Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy
D Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy.metadata
D Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy
D Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy.metadata
D Products/CMFEditions/skins/cmfeditions_views/file_download_version.py
D Products/CMFEditions/skins/cmfeditions_views/version_file_view.pt
D Products/CMFEditions/skins/cmfeditions_views/version_image_tag.py
D Products/CMFEditions/skins/cmfeditions_views/version_image_view.pt
D Products/CMFEditions/skins/cmfeditions_views/version_metadata_view.pt

diff --git a/CHANGES.rst b/CHANGES.rst
index 6f11609..22a1af0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -59,6 +59,9 @@ Bug fixes:
 - Make tests run in Zope 4 (includes some cleanup).
   [pbauer]
 
+- Get rid of CMFFormController scripts
+  [tomgross]
+
 
 3.0 (2016-12-05)
 ----------------
diff --git a/Products/CMFEditions/ArchivistTool.py b/Products/CMFEditions/ArchivistTool.py
index 1771152..dc2d632 100644
--- a/Products/CMFEditions/ArchivistTool.py
+++ b/Products/CMFEditions/ArchivistTool.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Archivist implementation
 
-$Id: ArchivistTool.py,v 1.15 2005/06/24 11:34:08 gregweb Exp $
 """
 
 from AccessControl import ClassSecurityInfo
diff --git a/Products/CMFEditions/KeepLastNVersionsTool.py b/Products/CMFEditions/KeepLastNVersionsTool.py
index 15c4ff9..e7fce2e 100644
--- a/Products/CMFEditions/KeepLastNVersionsTool.py
+++ b/Products/CMFEditions/KeepLastNVersionsTool.py
@@ -21,9 +21,7 @@
 #########################################################################
 """Storage Purge Policy Tool Keeping Only the Last n Versions
 
-$Id$
 """
-__version__ = "$Revision$"
 
 from zope.interface import implementer
 
diff --git a/Products/CMFEditions/Modifiers.py b/Products/CMFEditions/Modifiers.py
index 040ce8f..e00cb0b 100644
--- a/Products/CMFEditions/Modifiers.py
+++ b/Products/CMFEditions/Modifiers.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Modifier wrappers
 
-$Id: Modifiers.py,v 1.3 2005/06/09 13:07:28 duncanb Exp $
 """
 
 from App.class_init import InitializeClass
diff --git a/Products/CMFEditions/Permissions.py b/Products/CMFEditions/Permissions.py
index 65fb787..ac347cf 100644
--- a/Products/CMFEditions/Permissions.py
+++ b/Products/CMFEditions/Permissions.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Permissions
 
-$Id: Permissions.py,v 1.1 2005/02/13 11:52:58 gregweb Exp $
 """
 
 from Products.CMFCore.permissions import setDefaultRoles
diff --git a/Products/CMFEditions/ReferenceFactoriesTool.py b/Products/CMFEditions/ReferenceFactoriesTool.py
index ca1a8f1..2021584 100644
--- a/Products/CMFEditions/ReferenceFactoriesTool.py
+++ b/Products/CMFEditions/ReferenceFactoriesTool.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Manages Factories for diffrenet kinds of references.
 
-$Id: $
 """
 
 from App.class_init import InitializeClass
diff --git a/Products/CMFEditions/StorageMigrationSupport.py b/Products/CMFEditions/StorageMigrationSupport.py
index 7d0a006..684f5e2 100644
--- a/Products/CMFEditions/StorageMigrationSupport.py
+++ b/Products/CMFEditions/StorageMigrationSupport.py
@@ -23,7 +23,6 @@
 
 Creating a test hierarchy for migration tests.
 
-$Id$
 """
 import logging
 import os.path
diff --git a/Products/CMFEditions/VersionPolicies.py b/Products/CMFEditions/VersionPolicies.py
index 6bb5853..5748d81 100644
--- a/Products/CMFEditions/VersionPolicies.py
+++ b/Products/CMFEditions/VersionPolicies.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Default Version Policy implementations.
 
-$Id$
 """
 
 from AccessControl import ClassSecurityInfo
@@ -77,31 +76,17 @@ class ATVersionOnEditPolicy(VersionPolicy):
                        'button':None},)
 
     def setupPolicyHook(self, portal, **kw):
-        add_form_controller_overrides(portal, self.FC_ACTION_LIST)
+        pass
 
     def removePolicyHook(self, portal, **kw):
         remove_form_controller_overrides(portal, self.FC_ACTION_LIST)
 
 
-# Helper methods
-def add_form_controller_overrides(portal, actions):
-    fc = getToolByName(portal, 'portal_form_controller', None)
-    if fc is not None:
-        for action in actions:
-            fc.addFormAction(action['template'],
-                        action['status'],
-                        action['context'],
-                        action['button'],
-                        action['action'],
-                        action['expression'])
-
-
 def remove_form_controller_overrides(portal, actions):
     fc = getToolByName(portal, 'portal_form_controller', None)
     # Fake a request because form controller needs one to delete actions
     fake_req = DummyRequest()
-    i = 0
-    for fc_act in fc.listFormActions(1):
+    for i, fc_act in enumerate(fc.listFormActions(1)):
         for action in actions:
             if (action['template'] == fc_act.getObjectId() and
                     action['status'] == fc_act.getStatus() and
@@ -114,11 +99,9 @@ def remove_form_controller_overrides(portal, actions):
                 fake_req.form['old_context_type_%s'%i]=action['context'] or ''
                 fake_req.form['old_button_%s'%i]=action['button'] or ''
                 fake_req.form['old_status_%s'%i]=action['status'] or ''
-        i = i+1
     # Use the private method because the public one does a redirect
     fc._delFormActions(fc.actions,fake_req)
 
 # Fake request class to satisfy formcontroller removal policy
 class DummyRequest(dict):
-    def __init__(self):
-        self.form = {}
+    form = {}
diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml
index 6177865..b804731 100644
--- a/Products/CMFEditions/browser/configure.zcml
+++ b/Products/CMFEditions/browser/configure.zcml
@@ -35,5 +35,40 @@
         permission="zope2.View"
         />
 
+    <browser:page
+        for="*"
+        name="update_version_on_edit"
+        class=".views.UpdateVersionOnEditView"
+        permission="zope2.View"
+        />
+
+    <browser:page
+        for="*"
+        name="update_version_before_edit"
+        class=".views.UpdateVersionBeforeEditView"
+        permission="zope2.View"
+        />
+
+    <browser:page
+        for="*"
+        name="version_file_view"
+        template="templates/version_file_view.pt"
+        permission="zope2.View"
+        />
+
+    <browser:page
+        for="*"
+        name="version_image_view"
+        template="templates/version_image_view.pt"
+        permission="zope2.View"
+        />
+
+    <browser:page
+        for="*"
+        name="version_metadata_view"
+        template="templates/version_metadata_view.pt"
+        permission="zope2.View"
+        />
+
 </configure>
 
diff --git a/Products/CMFEditions/skins/cmfeditions_views/version_file_view.pt b/Products/CMFEditions/browser/templates/version_file_view.pt
similarity index 100%
rename from Products/CMFEditions/skins/cmfeditions_views/version_file_view.pt
rename to Products/CMFEditions/browser/templates/version_file_view.pt
diff --git a/Products/CMFEditions/skins/cmfeditions_views/version_image_view.pt b/Products/CMFEditions/browser/templates/version_image_view.pt
similarity index 100%
rename from Products/CMFEditions/skins/cmfeditions_views/version_image_view.pt
rename to Products/CMFEditions/browser/templates/version_image_view.pt
diff --git a/Products/CMFEditions/skins/cmfeditions_views/version_metadata_view.pt b/Products/CMFEditions/browser/templates/version_metadata_view.pt
similarity index 100%
rename from Products/CMFEditions/skins/cmfeditions_views/version_metadata_view.pt
rename to Products/CMFEditions/browser/templates/version_metadata_view.pt
diff --git a/Products/CMFEditions/browser/views.py b/Products/CMFEditions/browser/views.py
new file mode 100644
index 0000000..8db1666
--- /dev/null
+++ b/Products/CMFEditions/browser/views.py
@@ -0,0 +1,88 @@
+from Acquisition import aq_inner
+from Products.Five import BrowserView
+from Products.CMFCore.utils import getToolByName
+from Products.CMFEditions import CMFEditionsMessageFactory as _
+from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError
+from Products.CMFEditions.utilities import isObjectChanged
+from Products.CMFEditions.utilities import isObjectVersioned
+from Products.CMFEditions.utilities import maybeSaveVersion
+from Products.statusmessages.interfaces import IStatusMessage
+
+class UpdateVersionOnEditView(BrowserView):
+
+    def success(self):
+        return self.context.restrictedTraverse('content_edit')
+
+    def __call__(self):
+        context = aq_inner(self.context)
+        pf = getToolByName(context, 'portal_factory')
+
+        if pf.isTemporary(context):
+            # don't do anything if we're in the factory
+            return self.success()
+
+        comment = _("Initial revision")
+
+        if isObjectVersioned(context):
+            return self.success()
+
+        try:
+            maybeSaveVersion(context, comment=comment, force=False)
+        except FileTooLargeToVersionError:
+            pass # the on edit save will emit a warning
+
+        return self.success()
+
+
+class UpdateVersionBeforeEditView(BrowserView):
+
+    def success(self):
+        self.request.response.redirect('view')
+
+    def __call__(self):
+        context = aq_inner(self.context)
+        comment = self.request.get('cmfeditions_version_comment', '')
+        force = self.request.get('cmfeditions_save_new_version', None) is not None
+
+        if not (isObjectChanged(context) or force):
+            return self.success()
+
+        try:
+            maybeSaveVersion(context, comment=comment, force=force)
+        except FileTooLargeToVersionError:
+            IStatusMessage(self.request).addStatusMessage(
+                _('Versioning for this file has been disabled because it is too large'),
+                type='warn'
+                )
+        return self.success()
+
+
+class FileDownloadVersionView(BrowserView):
+
+    def __call__(self):
+        context = aq_inner(self.context)
+        version_id = int(self.request.get('version_id', 1))
+        RESPONSE = self.request.RESPONSE
+
+        portal_repository = getToolByName(context, 'portal_repository')
+        obj = portal_repository.retrieve(context, version_id).object
+        RESPONSE.setHeader('Content-Type', obj.getContentType())
+        RESPONSE.setHeader('Content-Length', obj.get_size())
+        RESPONSE.setHeader('Content-Disposition',
+                           'attachment;filename="%s"'%(obj.getFilename()))
+        return obj.data
+
+
+class VersionImageTagView(BrowserView):
+
+    def __call__(self):
+        version_id = int(self.request.get('version_id', 1))
+        here_url = self.request.get('here_url', '')
+        context = aq_inner(self.context)
+        portal_repository = getToolByName(context, 'portal_repository')
+        obj = portal_repository.retrieve(context, version_id).object
+        working_copy_tag = obj.tag()
+        altPos = working_copy_tag.find("alt=")
+        tag = '<img src="%s/file_download_version?version_id=%s" %s' % \
+              (here_url, version_id, working_copy_tag[altPos:])
+        return tag
diff --git a/Products/CMFEditions/interfaces/IArchivist.py b/Products/CMFEditions/interfaces/IArchivist.py
index b7c4c43..f669050 100644
--- a/Products/CMFEditions/interfaces/IArchivist.py
+++ b/Products/CMFEditions/interfaces/IArchivist.py
@@ -21,8 +21,6 @@
 #########################################################################
 """Intercepts/modifies saving/retrieving of versions to/from the repository.
 
-
-$Id: IArchivist.py,v 1.3 2005/02/23 00:29:02 gregweb Exp $
 """
 
 from zope.interface import Interface, Attribute
diff --git a/Products/CMFEditions/interfaces/IModifier.py b/Products/CMFEditions/interfaces/IModifier.py
index d9e820d..7cf2d67 100644
--- a/Products/CMFEditions/interfaces/IModifier.py
+++ b/Products/CMFEditions/interfaces/IModifier.py
@@ -24,7 +24,6 @@
 #########################################################################
 """Intercepts/modifies saving/retrieving of versions to/from the repository.
 
-$Id: IModifier.py,v 1.7 2005/06/24 11:42:01 gregweb Exp $
 """
 
 from zope.interface import Interface
diff --git a/Products/CMFEditions/interfaces/IPurgePolicy.py b/Products/CMFEditions/interfaces/IPurgePolicy.py
index 42198a7..b4637fb 100644
--- a/Products/CMFEditions/interfaces/IPurgePolicy.py
+++ b/Products/CMFEditions/interfaces/IPurgePolicy.py
@@ -24,7 +24,6 @@
 At save time control is handed over to the purge policy which has full
 control over all versions from a resources history.
 
-$Id$
 """
 
 from zope.interface import Interface
diff --git a/Products/CMFEditions/interfaces/IReferenceFactories.py b/Products/CMFEditions/interfaces/IReferenceFactories.py
index c5470dc..4e62e19 100644
--- a/Products/CMFEditions/interfaces/IReferenceFactories.py
+++ b/Products/CMFEditions/interfaces/IReferenceFactories.py
@@ -21,7 +21,6 @@
 #########################################################################
 """Manages Reference Factories.
 
-$Id: $
 """
 
 from zope.interface import Interface
diff --git a/Products/CMFEditions/interfaces/IRepository.py b/Products/CMFEditions/interfaces/IRepository.py
index 6207168..a70e75d 100644
--- a/Products/CMFEditions/interfaces/IRepository.py
+++ b/Products/CMFEditions/interfaces/IRepository.py
@@ -38,8 +38,6 @@
 former version
   A specific version in the past.
 
-
-$Id: IRepository.py,v 1.8 2005/04/01 17:41:56 disommav Exp $
 """
 
 from zope.interface import Interface, Attribute
diff --git a/Products/CMFEditions/interfaces/IStorage.py b/Products/CMFEditions/interfaces/IStorage.py
index fae57a7..f85fb39 100644
--- a/Products/CMFEditions/interfaces/IStorage.py
+++ b/Products/CMFEditions/interfaces/IStorage.py
@@ -26,7 +26,6 @@
 storage. The other interface definitions are defintions for types
 returned by storage methods.
 
-$Id$
 """
 
 from zope.interface import Interface, Attribute
diff --git a/Products/CMFEditions/interfaces/IVersionPolicy.py b/Products/CMFEditions/interfaces/IVersionPolicy.py
index 14f8359..7d9e654 100644
--- a/Products/CMFEditions/interfaces/IVersionPolicy.py
+++ b/Products/CMFEditions/interfaces/IVersionPolicy.py
@@ -20,7 +20,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
 """Version Policies
-$Id$
 """
 from zope.interface import Interface
 
diff --git a/Products/CMFEditions/profiles/default/skins.xml b/Products/CMFEditions/profiles/default/skins.xml
index f0467f9..eb38a80 100644
--- a/Products/CMFEditions/profiles/default/skins.xml
+++ b/Products/CMFEditions/profiles/default/skins.xml
@@ -2,10 +2,7 @@
 <object name="portal_skins">
  <object name="CMFEditions" meta_type="Filesystem Directory View"
     directory="Products.CMFEditions:skins/CMFEditions"/>
- <object name="cmfeditions_views" meta_type="Filesystem Directory View"
-    directory="Products.CMFEditions:skins/cmfeditions_views"/>
  <skin-path name="*">
-  <layer name="cmfeditions_views" insert-after="custom"/>
-  <layer name="CMFEditions" insert-after="cmfeditions_views"/>
+  <layer name="CMFEditions" insert-after="custom"/>
  </skin-path>
 </object>
diff --git a/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy b/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy
deleted file mode 100644
index b0d6858..0000000
--- a/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy
+++ /dev/null
@@ -1,32 +0,0 @@
-## Script (Python) "update_version_on_edit"
-##title=Edit Content
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-##
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFEditions import CMFEditionsMessageFactory as _
-from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError
-from Products.CMFEditions.utilities import isObjectVersioned, maybeSaveVersion
-
-pf = getToolByName(context, 'portal_factory')
-
-if pf.isTemporary(context):
-    # don't do anything if we're in the factory
-    return state.set(status='success')
-
-comment = _("Initial revision")
-
-if isObjectVersioned(context):
-    return state.set(status='success')
-
-try:
-    maybeSaveVersion(context, comment=comment, force=False)
-except FileTooLargeToVersionError:
-    pass # the on edit save will emit a warning
-
-return state.set(status='success')
diff --git a/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy.metadata b/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy.metadata
deleted file mode 100644
index fb21cf4..0000000
--- a/Products/CMFEditions/skins/CMFEditions/update_version_before_edit.cpy.metadata
+++ /dev/null
@@ -1,9 +0,0 @@
-[default]
-title = Update Version before Edit
-
-[validators]
-validators =
-
-[actions]
-action.success = traverse_to:string:content_edit
-
diff --git a/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy b/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy
deleted file mode 100644
index ecee18b..0000000
--- a/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy
+++ /dev/null
@@ -1,32 +0,0 @@
-## Script (Python) "update_version_on_edit"
-##title=Edit Content
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-##
-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFEditions import CMFEditionsMessageFactory as _
-from Products.CMFEditions.utilities import isObjectChanged, maybeSaveVersion
-from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError
-
-putils = getToolByName(context, 'plone_utils')
-REQUEST = context.REQUEST
-comment = REQUEST.get('cmfeditions_version_comment', '')
-force = REQUEST.get('cmfeditions_save_new_version', None) is not None
-
-if not (isObjectChanged(context) or force):
-    return state.set(status='success')
-
-try:
-    maybeSaveVersion(context, comment=comment, force=force)
-except FileTooLargeToVersionError:
-    putils.addPortalMessage(
-        _("Versioning for this file has been disabled because it is too large"),
-        type="warn"
-        )
-
-return state.set(status='success')
diff --git a/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy.metadata b/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy.metadata
deleted file mode 100644
index effd1e0..0000000
--- a/Products/CMFEditions/skins/CMFEditions/update_version_on_edit.cpy.metadata
+++ /dev/null
@@ -1,8 +0,0 @@
-[default]
-title = Update Version on Edit
-
-[validators]
-validators =
-
-[actions]
-action.success = redirect_to_action:string:view
\ No newline at end of file
diff --git a/Products/CMFEditions/skins/cmfeditions_views/file_download_version.py b/Products/CMFEditions/skins/cmfeditions_views/file_download_version.py
deleted file mode 100644
index fc92ecb..0000000
--- a/Products/CMFEditions/skins/cmfeditions_views/file_download_version.py
+++ /dev/null
@@ -1,19 +0,0 @@
-## Script (Python) "file_download_version"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=version_id=1
-##title=File download version
-##
-request = container.REQUEST
-RESPONSE =  request.RESPONSE
-
-obj = context.portal_repository.retrieve(context, version_id).object
-RESPONSE.setHeader('Content-Type', obj.getContentType())
-RESPONSE.setHeader('Content-Length', obj.get_size())
-RESPONSE.setHeader('Content-Disposition',
-                   'attachment;filename="%s"'%(obj.getFilename()))
-
-return obj.data
diff --git a/Products/CMFEditions/skins/cmfeditions_views/version_image_tag.py b/Products/CMFEditions/skins/cmfeditions_views/version_image_tag.py
deleted file mode 100644
index 28e5d63..0000000
--- a/Products/CMFEditions/skins/cmfeditions_views/version_image_tag.py
+++ /dev/null
@@ -1,18 +0,0 @@
-## Script (Python) "version_image_tag"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=here_url, version_id=None
-##title=Image tag for specific version
-##
-obj = context.portal_repository.retrieve(context, version_id).object
-working_copy_tag = obj.tag()
-
-# XXX Does someone know a less ugly way to do this?
-altPos = working_copy_tag.find("alt=")
-tag = '<img src="%s/file_download_version?version_id=%s" %s' % \
-      (here_url, version_id, working_copy_tag[altPos:])
-
-return tag
diff --git a/Products/CMFEditions/subscriber.py b/Products/CMFEditions/subscriber.py
index 2d5d750..8005e7c 100644
--- a/Products/CMFEditions/subscriber.py
+++ b/Products/CMFEditions/subscriber.py
@@ -20,8 +20,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
 """Event Subscribers
-
-$Id: ArchivistTool.py,v 1.15 2005/06/24 11:34:08 gregweb Exp $
 """
 from zope.i18nmessageid import MessageFactory
 from Acquisition import aq_get
@@ -37,37 +35,42 @@
 
 PMF = MessageFactory('plone')
 
+
 def webdavObjectEventHandler(obj, event, comment):
     obj = event.object
 
-    changed = isObjectChanged(obj)
-
-    if not changed:
+    if not isObjectChanged(obj):
         return
 
     try:
         maybeSaveVersion(obj, comment=comment, force=False)
     except FileTooLargeToVersionError:
-        pass # There's no way to emit a warning here. Or is there?
+        pass  # There's no way to emit a warning here. Or is there?
+
 
 def webdavObjectInitialized(obj, event):
     return webdavObjectEventHandler(obj, event, comment=_('Initial revision (WebDAV)'))
 
+
 def webdavObjectEdited(obj, event):
     return webdavObjectEventHandler(obj, event, comment=_('Edited (WebDAV)'))
 
+
 def _getVersionComment(object):
     request = aq_get(object, 'REQUEST', None)
     return request and request.get('cmfeditions_version_comment', '')
 
+
 def objectInitialized(obj, event):
     comment = _getVersionComment(event.object) or _('Initial revision')
     return webdavObjectEventHandler(obj, event, comment=comment)
 
+
 def objectEdited(obj, event):
     comment = _getVersionComment(event.object) or PMF('Edited')
     return webdavObjectEventHandler(obj, event, comment=comment)
 
+
 def object_removed(obj, event):
     """ an object is being deleted -
     also delete it's history
diff --git a/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py b/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
index 32ffdde..828f378 100644
--- a/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
+++ b/Products/CMFEditions/tests/test_CopyModifyMergeRepositoryTool.py
@@ -36,7 +36,6 @@
 from Products.CMFEditions.interfaces.IRepository import IContentTypeVersionPolicySupport
 from Products.CMFEditions.interfaces.IRepository import IVersionData
 from Products.CMFEditions.VersionPolicies import VersionPolicy
-from Products.CMFEditions.VersionPolicies import ATVersionOnEditPolicy
 
 from DummyTools import DummyArchivist
 from DummyTools import notifyModified
@@ -124,7 +123,7 @@ def test02_retrieve(self):
         portal_repository.save(doc, comment='save no 2')
 
         vdata = portal_repository.retrieve(doc, selector=0)
-        self.failUnless(verifyObject(IVersionData, vdata))
+        self.assertTrue(verifyObject(IVersionData, vdata))
         self.assertEqual(vdata.object.text, 'text v1')
         vdata = portal_repository.retrieve(doc, selector=1)
         self.assertEqual(vdata.object.text, 'text v2')
@@ -205,7 +204,7 @@ def test06_retrieveWithNoMoreExistentObject(self):
             doc,
             selector=0)
         #vdata = portal_repository.retrieve(doc, selector=0)
-        #self.failUnless(verifyObject(IVersionData, vdata))
+        #self.assertTrue(verifyObject(IVersionData, vdata))
         #self.assertEqual(vdata.object.text, 'text v1')
         self.assertRaises(
               AttributeError,
@@ -237,7 +236,7 @@ def test07_restoreDeletedObject(self):
             selector=0,
             container=self.portal)
         #portal_repository.restore(history_id, selector=0, container=self.portal)
-        #self.failUnless('doc' in self.portal.objectIds())
+        #self.assertTrue('doc' in self.portal.objectIds())
         #restored = self.portal.doc
         #self.assertEqual(restored.text, 'text v1')
 
@@ -265,7 +264,7 @@ def test07_restoreDeletedObjectWithNewId(self):
             new_id='doc2')
         #portal_repository.restore(history_id, selector=0,
         #                                 container=self.portal, new_id='doc2')
-        #self.failUnless('doc2' in self.portal.objectIds())
+        #self.assertTrue('doc2' in self.portal.objectIds())
         #restored = self.portal.doc2
         #self.assertEqual(restored.text, 'text v1')
 
@@ -299,8 +298,8 @@ def test09_getHistoryMetadata(self):
         # The history is acquisition wrapped
         self.assertEqual(history.aq_parent, doc)
         # check if timestamp and principal available
-        self.failUnless(history.retrieve(1)['metadata']['sys_metadata']['timestamp'])
-        self.failUnless(history.retrieve(0)['metadata']['sys_metadata']['principal'])
+        self.assertTrue(history.retrieve(1)['metadata']['sys_metadata']['timestamp'])
+        self.assertTrue(history.retrieve(0)['metadata']['sys_metadata']['principal'])
         # check if correct data and metadata retrieved
         self.assertEqual(history.retrieve(0)['metadata']['sys_metadata']['comment'], 'save number 1')
         self.assertEqual(history.retrieve(1)['metadata']['sys_metadata']['comment'], 'save number 2')
@@ -423,7 +422,7 @@ def test_idModification(self):
         portal_repository.save(doc, comment='save no 2')
         portal_repository.revert(doc, 0)
         self.assertEqual(doc.getId(), 'newdoc')
-        self.failUnless('newdoc' in self.portal.objectIds())
+        self.assertTrue('newdoc' in self.portal.objectIds())
 
 class TestPolicyVersioning(TestCopyModifyMergeRepositoryToolBase):
 
@@ -451,7 +450,7 @@ def test01_remove_policy_from_type(self):
         # test that policies can be removed
         portal_repository = self.portal.portal_repository
         # Set it twice to ensure that duplicates aren't created
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                         'at_edit_autoversion'))
         portal_repository.removePolicyFromContentType('Document',
                                                         'at_edit_autoversion')
@@ -461,7 +460,7 @@ def test01_remove_policy_from_type(self):
     def test02_set_policy_on_type(self):
         # test that policies can be set and retrieved
         portal_repository = self.portal.portal_repository
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                         'at_edit_autoversion'))
         portal_repository.removePolicyFromContentType('Document',
                                                         'at_edit_autoversion')
@@ -469,7 +468,7 @@ def test02_set_policy_on_type(self):
                                                         'at_edit_autoversion'))
         portal_repository.addPolicyForContentType('Document',
                                                         'at_edit_autoversion')
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                         'at_edit_autoversion'))
 
     def test03_set_policy_types_map(self):
@@ -483,7 +482,7 @@ def test03_set_policy_types_map(self):
         # update the mapping
         portal_repository.manage_setTypePolicies({'Document':
                                                      ['at_edit_autoversion']})
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                        'at_edit_autoversion'))
 
         # assign two policies and then unassign them.
@@ -509,7 +508,7 @@ def test04_add_policy(self):
                                             'Create version when published')
         policies = portal_repository.listPolicies()
         self.assertEqual(len(policies), self.np+1)
-        self.failUnless('version_on_publish' in [p.getId() for p in policies])
+        self.assertTrue('version_on_publish' in [p.getId() for p in policies])
 
     def test04_add_policy_updates(self):
         # test calling addPolicy with an existing Id updates the title
@@ -519,7 +518,7 @@ def test04_add_policy_updates(self):
                                             'Fake policy title')
         policies = portal_repository.listPolicies()
         self.assertEqual(len(policies), self.np)
-        self.failUnless('Fake policy title' in [p.Title() for p in policies])
+        self.assertTrue('Fake policy title' in [p.Title() for p in policies])
 
     def test05_remove_policy(self):
         # test removing a policy removes the policy from all content types
@@ -542,7 +541,7 @@ def test07_set_policy_defs(self):
                                             'Fake policy title'),))
         policies = portal_repository.listPolicies()
         self.assertEqual(len(policies), 1)
-        self.failUnless('Fake policy title' in [p.Title() for p in policies])
+        self.assertTrue('Fake policy title' in [p.Title() for p in policies])
 
     def test08_mutators_fail_on_invalid_input(self):
         portal_repository = self.portal.portal_repository
@@ -589,7 +588,7 @@ def test09_policy_hooks(self):
         self.assertEqual(len(portal_repository.listPolicies()), self.np+1)
         portal_repository.addPolicyForContentType('Document',
                                                    'my_bogus_policy', out=out)
-        self.failUnless(portal_repository.supportsPolicy(self.portal.doc,
+        self.assertTrue(portal_repository.supportsPolicy(self.portal.doc,
                                                         'my_bogus_policy'))
         self.assertEqual(out, ['added','enabled Document'])
         portal_repository.removePolicyFromContentType('Document',
@@ -646,29 +645,17 @@ def test12_set_policy_types_map_calls_all_hooks(self):
 
     def test13_at_auto_version_hooks(self):
         portal_repository = self.portal.portal_repository
-        # Check if the form controller hook is in place:
-        self.failUnless(self.isFCActionInPlace('validate_integrity',
-                                                     'success', None, None))
-        self.failUnless(self.isFCActionInPlace('atct_edit',
-                                                     'success', None, None))
         # Remove policy and check if hook is removed
         portal_repository.removePolicy('at_edit_autoversion')
-        self.assertFalse(self.isFCActionInPlace('validate_integrity',
-                                                 'success', None, None))
-        self.assertFalse(self.isFCActionInPlace('atct_edit',
-                                                     'success', None, None))
-        # Add policy and check if hook is added
-        portal_repository.addPolicy('at_edit_autoversion', 'Auto policy',
-                                     ATVersionOnEditPolicy)
-        self.failUnless(self.isFCActionInPlace('validate_integrity',
-                                                     'success', None, None))
-        self.failUnless(self.isFCActionInPlace('atct_edit',
-                                                     'success', None, None))
+        self.assertFalse(self.isFCActionInPlace(
+            'validate_integrity', 'success', None, None))
+        self.assertFalse(self.isFCActionInPlace(
+            'atct_edit', 'success', None, None))
 
     def test14_has_policy(self):
         portal_repository = self.portal.portal_repository
         # We already have two policies by default
-        self.failUnless(portal_repository.hasPolicy(self.portal.doc))
+        self.assertTrue(portal_repository.hasPolicy(self.portal.doc))
         portal_repository.removePolicyFromContentType('Document',
                                                         'at_edit_autoversion')
         portal_repository.removePolicyFromContentType('Document',
diff --git a/Products/CMFEditions/tests/test_IntegrationTests.py b/Products/CMFEditions/tests/test_IntegrationTests.py
index e5dd3fb..9e42abe 100644
--- a/Products/CMFEditions/tests/test_IntegrationTests.py
+++ b/Products/CMFEditions/tests/test_IntegrationTests.py
@@ -144,9 +144,9 @@ def test05_getHistory(self):
         self.assertEqual(h1.version_id, 1)
         # self.assertEqual(h1.action, h1.ACTION_CHECKIN)
         # self.assertEqual(h1.message, 'v2\nsecond line')
-        # self.failUnless(h1.user_id)
+        # self.assertTrue(h1.user_id)
         # self.assertEqual(h1.path, '/'.join(doc.getPhysicalPath()))
-        # self.failUnless(h1.timestamp)
+        # self.assertTrue(h1.timestamp)
 
     def test06_retrieveSpecificVersion(self):
         portal_repo = self.portal.portal_repository
@@ -332,7 +332,7 @@ def test11_versionAFolderishObjectThatTreatsChildrensAsInsideRefs(self):
         # check if revertion worked correctly
         fol = self.portal.fol
         doc1 = fol.doc1
-        self.failUnless('doc2' in fol.objectIds())
+        self.assertTrue('doc2' in fol.objectIds())
         self.assertFalse('doc3' in fol.objectIds())
         doc2 = fol.doc2
         self.assertEqual(fol.Title(), "v2 of fol")
@@ -363,31 +363,31 @@ def test12_retrieveAndRevertRetainWorkingCopiesPermissions(self):
 
         # just check the original is unchanged
         settings = doc.permission_settings(perm)[0]
-        self.failUnless(settings['acquire'])
+        self.assertTrue(settings['acquire'])
         role_enabled = [r for r in settings['roles']
                         if r['name'] == member_role][0]
-        self.failUnless(role_enabled['checked'])
+        self.assertTrue(role_enabled['checked'])
 
         # ----- retrieve
         # check if retrieved object carries the working copy's permissions
         retrieved_data = portal_repo.retrieve(
             doc, 0, preserve=['_Access_contents_information_Permission'])
         settings = retrieved_data.object.permission_settings(perm)[0]
-        self.failUnless(settings['acquire'])
+        self.assertTrue(settings['acquire'])
         role_enabled = [
             r for r in settings['roles']
             if r['name'] == member_role
         ][0]
-        self.failUnless(role_enabled['checked'])
+        self.assertTrue(role_enabled['checked'])
 
         # check that the working copy's permissions are unchanged
         settings = doc.permission_settings(perm)[0]
-        self.failUnless(settings['acquire'])
+        self.assertTrue(settings['acquire'])
         role_enabled = [
             r for r in settings['roles']
             if r['name'] == member_role
         ][0]
-        self.failUnless(role_enabled['checked'])
+        self.assertTrue(role_enabled['checked'])
 
         # check if the preserved data is returned correctly
         preserved = retrieved_data.preserved_data['_Access_contents_information_Permission']  # noqa
@@ -397,10 +397,10 @@ def test12_retrieveAndRevertRetainWorkingCopiesPermissions(self):
         # check that the working copies permissions are unchanged after revert
         portal_repo.revert(doc, 0)
         settings = doc.permission_settings(perm)[0]
-        self.failUnless(settings['acquire'])
+        self.assertTrue(settings['acquire'])
         role_enabled = [r for r in settings['roles']
                         if r['name'] == member_role][0]
-        self.failUnless(role_enabled['checked'])
+        self.assertTrue(role_enabled['checked'])
 
     def test13_revertUpdatesCatalog(self):
         portal_repo = self.portal.portal_repository
@@ -421,7 +421,7 @@ def test13_revertUpdatesCatalog(self):
         retrieved_data = portal_repo.retrieve(
             doc, 0, preserve=['_Access_contents_information_Permission'])
         retrieved_doc = retrieved_data.object
-        self.failUnless('Plain text' in retrieved_doc.getText())
+        self.assertTrue('Plain text' in retrieved_doc.getText())
         # Test that basic retrieval did not alter the catalog
         results = cat(SearchableText='Plain Text')
         self.assertEqual(len(results), 0)
@@ -997,20 +997,20 @@ def test23_versioningPreservesFolderAnnotations(self):
         repo_fol2 = portal_repo.retrieve(fol, 1).object
 
         # Test values on the repository copies and the working copy
-        self.failUnlessEqual(repo_fol1.__annotations__['something'], True)
-        self.failUnlessEqual(repo_fol2.__annotations__['something'], False)
-        self.failUnlessEqual(fol.__annotations__['something'], None)
-        self.failUnlessEqual(repo_fol2.__annotations__.get('another_thing',
+        self.assertEqual(repo_fol1.__annotations__['something'], True)
+        self.assertEqual(repo_fol2.__annotations__['something'], False)
+        self.assertEqual(fol.__annotations__['something'], None)
+        self.assertEqual(repo_fol2.__annotations__.get('another_thing',
                                                            None), None)
 
         # Test that revert brings in the original annotation
         portal_repo.revert(fol)
-        self.failUnlessEqual(fol.__annotations__['something'], False)
-        self.failUnlessEqual(fol.__annotations__.get('another_thing', None),
+        self.assertEqual(fol.__annotations__['something'], False)
+        self.assertEqual(fol.__annotations__.get('another_thing', None),
                              None)
 
         portal_repo.revert(fol, 0)
-        self.failUnlessEqual(fol.__annotations__['something'], True)
+        self.assertEqual(fol.__annotations__['something'], True)
 
     def test24_versioningPreservesFolderOrder(self):
         portal_repo = self.portal.portal_repository
@@ -1025,18 +1025,18 @@ def test24_versioningPreservesFolderOrder(self):
         fol.setTitle('v2 of fol')
         fol.moveObjectsToTop(['doc2'])
 
-        self.failUnlessEqual(fol.objectIds()[0], 'doc2')
+        self.assertEqual(fol.objectIds()[0], 'doc2')
 
         working_ids = fol.objectIds()
 
         # Test that a retrieve provides the order and content from
         # the working copy on the repo copy
         repo_fol1 = portal_repo.retrieve(fol, 0).object
-        self.failUnlessEqual(repo_fol1.objectIds(), working_ids)
+        self.assertEqual(repo_fol1.objectIds(), working_ids)
 
         # Test that a revert preserves the order from the working copy
         portal_repo.revert(fol)
-        self.failUnlessEqual(fol.objectIds(), working_ids)
+        self.assertEqual(fol.objectIds(), working_ids)
 
         # See how we interact with delete
         fol.invokeFactory('Document', 'doc3')
@@ -1050,18 +1050,18 @@ def test24_versioningPreservesFolderOrder(self):
 
         # Test that we kept the ids from working copy, kept the new child
         # restored the deleted child
-        self.failUnlessEqual(fol.objectIds(), working_ids)
-        self.failUnlessEqual(fol.objectIds()[0], 'doc3')
-        self.failUnlessEqual(getattr(fol, 'doc2', None), None)
-        self.failUnlessEqual(fol['doc3'], doc3)
+        self.assertEqual(fol.objectIds(), working_ids)
+        self.assertEqual(fol.objectIds()[0], 'doc3')
+        self.assertEqual(getattr(fol, 'doc2', None), None)
+        self.assertEqual(fol['doc3'], doc3)
 
         # Test the BTreeFolder internals
-        self.failUnlessEqual(fol._tree.get('doc2', None), None)
-        self.failUnlessEqual(fol._tree['doc3'], doc3)
-        self.failUnlessEqual(fol._count(), 2)
-        self.failUnlessEqual(fol._mt_index[doc2.meta_type].get('doc2', None),
+        self.assertEqual(fol._tree.get('doc2', None), None)
+        self.assertEqual(fol._tree['doc3'], doc3)
+        self.assertEqual(fol._count(), 2)
+        self.assertEqual(fol._mt_index[doc2.meta_type].get('doc2', None),
                              None)
-        self.failUnlessEqual(fol._mt_index[doc3.meta_type]['doc3'], 1)
+        self.assertEqual(fol._mt_index[doc3.meta_type]['doc3'], 1)
 
     def test25_versioningRestoresInsideRefsFolderOrder(self):
         # Enable OMInsideChildrensModifier
@@ -1085,19 +1085,19 @@ def test25_versioningRestoresInsideRefsFolderOrder(self):
         fol.setTitle('v2 of fol')
         fol.moveObjectsToTop(['doc2'])
 
-        self.failUnlessEqual(fol.objectIds()[0], 'doc2')
+        self.assertEqual(fol.objectIds()[0], 'doc2')
 
         # Test that a retrieve uses the order from the repo copy
         repo_fol1 = portal_repo.retrieve(fol, 0).object
-        self.failUnlessEqual(fol.objectIds()[0], 'doc2')
+        self.assertEqual(fol.objectIds()[0], 'doc2')
         self.assertNotEqual(fol.objectIds(), orig_order)
-        self.failUnlessEqual(repo_fol1.objectIds()[0], 'doc1')
+        self.assertEqual(repo_fol1.objectIds()[0], 'doc1')
 
         # Test that a revert restores the order and objects from the
         # repo copy
         portal_repo.revert(fol)
-        self.failUnlessEqual(fol.objectIds()[0], 'doc1')
-        self.failUnlessEqual(fol.objectIds(), orig_order)
+        self.assertEqual(fol.objectIds()[0], 'doc1')
+        self.assertEqual(fol.objectIds(), orig_order)
 
         # See how we interact with some adds deletes and reorders
         fol.invokeFactory('Document', 'doc5')
@@ -1116,32 +1116,32 @@ def test25_versioningRestoresInsideRefsFolderOrder(self):
         # Test that a retrieve uses the repository order and items,
         # but does not affect the working copy
         repo_fol1 = portal_repo.retrieve(fol, 0).object
-        self.failUnlessEqual(repo_fol1.objectIds(), orig_order)
+        self.assertEqual(repo_fol1.objectIds(), orig_order)
         self.assertNotEqual(getattr(repo_fol1, 'doc2', None), None)
-        self.failUnlessEqual(getattr(repo_fol1, 'doc5', None), None)
+        self.assertEqual(getattr(repo_fol1, 'doc5', None), None)
 
         self.assertNotEqual(fol.objectIds(), orig_order)
-        self.failUnlessEqual(fol.objectIds()[0], 'doc4')
-        self.failUnlessEqual(fol.objectIds()[1], 'doc3')
-        self.failUnlessEqual(fol['doc3'], doc3)
-        self.failUnlessEqual(fol['doc4'], doc4)
-        self.failUnlessEqual(getattr(fol, 'doc2', None), None)
+        self.assertEqual(fol.objectIds()[0], 'doc4')
+        self.assertEqual(fol.objectIds()[1], 'doc3')
+        self.assertEqual(fol['doc3'], doc3)
+        self.assertEqual(fol['doc4'], doc4)
+        self.assertEqual(getattr(fol, 'doc2', None), None)
         self.assertNotEqual(getattr(fol, 'doc5', None), None)
 
         # Test that a revert restores the missing child from the repo
         # copy, removed the newly created child and restored the order
         portal_repo.revert(fol)
 
-        self.failUnlessEqual(list(fol.objectIds()), orig_order)
-        self.failUnlessEqual(getattr(fol, 'doc5', None), None)
+        self.assertEqual(list(fol.objectIds()), orig_order)
+        self.assertEqual(getattr(fol, 'doc5', None), None)
 
         # Test the BTreeFolder internals
-        self.failUnlessEqual(fol._tree.get('doc5', None), None)
-        self.failUnlessEqual(fol._count(), 4)
-        self.failUnlessEqual(fol._mt_index[doc3.meta_type].get('doc5', None),
+        self.assertEqual(fol._tree.get('doc5', None), None)
+        self.assertEqual(fol._count(), 4)
+        self.assertEqual(fol._mt_index[doc3.meta_type].get('doc5', None),
                              None)
-        self.failUnlessEqual(fol._tree['doc3'], fol['doc3'].aq_base)
-        self.failUnlessEqual(fol._mt_index[doc3.meta_type]['doc3'], 1)
+        self.assertEqual(fol._tree['doc3'], fol['doc3'].aq_base)
+        self.assertEqual(fol._mt_index[doc3.meta_type]['doc3'], 1)
 
     def test26_RegistryBasesNotVersionedOrRestored(self):
         portal_repo = self.portal.portal_repository
diff --git a/Products/CMFEditions/tests/webdav_history.txt b/Products/CMFEditions/tests/webdav_history.txt
index 3195894..c0e55e8 100644
--- a/Products/CMFEditions/tests/webdav_history.txt
+++ b/Products/CMFEditions/tests/webdav_history.txt
@@ -4,10 +4,6 @@ WebDAV and Versioning
 This doctest makes sure that WebDAV changes to Archetypes-based
 objects trigger versioning correctly:
 
-  >>> from pprint import pprint
-  >>> from StringIO import StringIO
-  >>> from Products.Archetypes.tests.utils import makeContent
-  >>> from Products.Archetypes.interfaces import IBaseObject
   >>> from plone.app.testing import TEST_USER_ID
   >>> from plone.app.testing import TEST_USER_NAME
   >>> from plone.app.testing import TEST_USER_PASSWORD
@@ -20,6 +16,7 @@ new object via the Plone UI:
   >>> portal = layer['portal']
   >>> setRoles(portal, TEST_USER_ID, ['Manager'])
   >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)
+  >>> folder_path = '/'.join(folder.getPhysicalPath())
 
   >>> 'some-document' in folder.objectIds()
   False
@@ -33,7 +30,7 @@ new object via the Plone UI:
   ... Content-Type: text/plain; charset="utf-8"
   ...
   ... Some Content
-  ... """ % ('/'.join(folder.getPhysicalPath()), TEST_USER_NAME, TEST_USER_PASSWORD))
+  ... """ % (folder_path, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
@@ -59,7 +56,7 @@ another version of the object to be saved:
   ... Content-Type: text/plain; charset="utf-8"
   ...
   ... Some Other Content
-  ... """ % ('/'.join(folder.getPhysicalPath()), TEST_USER_NAME, TEST_USER_PASSWORD))
+  ... """ % (folder_path, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 204 No Content
   ...
 
@@ -75,7 +72,7 @@ not configured for folders:
   >>> print http(r"""
   ... MKCOL /%s/some-folder HTTP/1.1
   ... Authorization: Basic %s:%s
-  ... """ % ('/'.join(folder.getPhysicalPath()), TEST_USER_NAME, TEST_USER_PASSWORD))
+  ... """ % (folder_path, TEST_USER_NAME, TEST_USER_PASSWORD))
   HTTP/1.1 201 Created
   ...
 
diff --git a/Products/CMFEditions/utilities.py b/Products/CMFEditions/utilities.py
index cf48b1d..7ac3b42 100644
--- a/Products/CMFEditions/utilities.py
+++ b/Products/CMFEditions/utilities.py
@@ -20,8 +20,6 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #########################################################################
 """Utilities
-
-$Id: utilities.py,v 1.1 2005/01/06 14:25:44 gregweb Exp $
 """
 
 import random
@@ -114,6 +112,7 @@ def isObjectChanged(obj):
             changed = True
     return changed
 
+
 def maybeSaveVersion(obj, policy='at_edit_autoversion', comment='', force=False):
     pr = getToolByName(obj, 'portal_repository', None)
     if pr is not None:
@@ -122,6 +121,7 @@ def maybeSaveVersion(obj, policy='at_edit_autoversion', comment='', force=False)
         if isVersionable and (force or pr.supportsPolicy(obj, policy)):
             pr.save(obj=obj, comment=comment)
 
+
 def wrap(obj, parent):
     """Copy the context and containment from one object to another.
 


