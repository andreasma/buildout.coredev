Repository: plone.app.event


Branch: refs/heads/1.1.x
Date: 2017-03-20T10:28:26-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/ecddf50647122adb923d758e6285163b2fff3739

Update bootstrap.py

Files changed:
M bootstrap.py

diff --git a/bootstrap.py b/bootstrap.py
index 6b7e45cc..a4599211 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -25,7 +25,10 @@
 
 from optparse import OptionParser
 
-tmpeggs = tempfile.mkdtemp()
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
 
 usage = '''\
 [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
@@ -35,13 +38,14 @@
 Simply run this script in a directory containing a buildout.cfg, using the
 Python that you want bin/buildout to use.
 
-Note that by using --find-links to point to local resources, you can keep 
+Note that by using --find-links to point to local resources, you can keep
 this script from going over the network.
 '''
 
 parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", help="use a specific zc.buildout version")
-
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
 parser.add_option("-t", "--accept-buildout-test-releases",
                   dest='accept_buildout_test_releases',
                   action="store_true", default=False,
@@ -59,36 +63,57 @@
 parser.add_option("--allow-site-packages",
                   action="store_true", default=False,
                   help=("Let bootstrap.py use existing site packages"))
-
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
 
 options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
 
 ######################################################################
 # load/install setuptools
 
 try:
-    if options.allow_site_packages:
-        import setuptools
-        import pkg_resources
     from urllib.request import urlopen
 except ImportError:
     from urllib2 import urlopen
 
 ez = {}
-exec(urlopen('https://bitbucket.org/pypa/setuptools/downloads/ez_setup.py'
-            ).read(), ez)
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
 if not options.allow_site_packages:
     # ez_setup imports site, which adds site packages
-    # this will remove them from the path to ensure that incompatible versions 
+    # this will remove them from the path to ensure that incompatible versions
     # of setuptools are not in the path
     import site
-    # inside a virtualenv, there is no 'getsitepackages'. 
+    # inside a virtualenv, there is no 'getsitepackages'.
     # We can't remove these reliably
     if hasattr(site, 'getsitepackages'):
         for sitepackage_path in site.getsitepackages():
-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
 
 setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
 ez['use_setuptools'](**setup_args)
 import setuptools
 import pkg_resources
@@ -104,7 +129,12 @@
 
 ws = pkg_resources.working_set
 
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
 cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
        'from setuptools.command.easy_install import main; main()',
        '-mZqNxd', tmpeggs]
 
@@ -117,21 +147,23 @@
 if find_links:
     cmd.extend(['-f', find_links])
 
-setuptools_path = ws.find(
-    pkg_resources.Requirement.parse('setuptools')).location
-
 requirement = 'zc.buildout'
-version = options.version
+version = options.buildout_version
 if version is None and not options.accept_buildout_test_releases:
     # Figure out the most recent final version of zc.buildout.
     import setuptools.package_index
     _final_parts = '*final-', '*final'
 
     def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
     index = setuptools.package_index.PackageIndex(
         search_path=[setuptools_path])
     if find_links:
@@ -156,10 +188,9 @@ def _final_version(parsed_version):
 cmd.append(requirement)
 
 import subprocess
-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
+if subprocess.call(cmd) != 0:
     raise Exception(
-        "Failed to execute command:\n%s",
-        repr(cmd)[1:-1])
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
 
 ######################################################################
 # Import and run buildout


Repository: plone.app.event


Branch: refs/heads/1.1.x
Date: 2017-03-20T10:29:52-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/0b188acaefdda90161f8c965476a76bd5be76db3

Clean up buildout development configuration

Files changed:
M buildout.cfg

diff --git a/buildout.cfg b/buildout.cfg
index 7cddfe50..f65b0982 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,26 +1,9 @@
 [buildout]
 extends =
-    http://dist.plone.org/release/4.3-latest/versions.cfg
-    versions.cfg
-    sources.cfg
-parts = instance
+    https://raw.github.com/collective/buildout.plonetest/master/test-4.3.x.cfg
 
-versions = versions
-sources-dir = ${buildout:directory}/devsrc
+package-name = plone.app.event
+package-extras = [test]
 
-develop = .
-
-[sources]
-# Looks like, `develop = .` doesn't work well with mr.developer. So we checkout
-# plone.app.event to the buildout directory path.
-plone.app.event = git git@github.com:plone/plone.app.event.git branch=1.1.x full-path=${buildout:directory}
-
-[instance]
-recipe = plone.recipe.zope2instance
-user = admin:admin
-environment-vars = zope_i18n_compile_mo_files true
-eggs =
-    Plone
-    Pillow
-    plone.app.event [archetypes, dexterity]
-    plone.app.contenttypes
+[versions]
+icalendar = 3.11.3


Repository: plone.app.event


Branch: refs/heads/1.1.x
Date: 2017-03-20T10:53:12-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/93dac6be8c75ba207df643282d2fcced85a8d77c

Add suport for test coverage

Files changed:
A .coveragerc
M .gitignore
M buildout.cfg

diff --git a/.coveragerc b/.coveragerc
new file mode 100644
index 00000000..c73c5b53
--- /dev/null
+++ b/.coveragerc
@@ -0,0 +1,2 @@
+[report]
+include = plone/app/event/*
diff --git a/.gitignore b/.gitignore
index e0ea3696..6ba42769 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,8 +3,8 @@
 *.py?
 *.sw?
 *.wpr
-.*
-!.gitignore
+.installed.cfg
+.mr.developer.cfg
 bin/
 coverage/
 dev/
diff --git a/buildout.cfg b/buildout.cfg
index f65b0982..8786cb87 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,9 +1,13 @@
 [buildout]
 extends =
     https://raw.github.com/collective/buildout.plonetest/master/test-4.3.x.cfg
+    https://raw.github.com/collective/buildout.plonetest/master/qa.cfg
 
 package-name = plone.app.event
 package-extras = [test]
 
+parts +=
+    createcoverage
+
 [versions]
 icalendar = 3.11.3


Repository: plone.app.event


Branch: refs/heads/1.1.x
Date: 2017-03-20T11:05:15-03:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/6e376d1a0377e1fd01eb59e3025394e55a5a9e13

Add .travis.yml

Files changed:
A .travis.yml

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 00000000..87a65c60
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,24 @@
+language: python
+python: 2.7
+sudo: false
+cache:
+  directories:
+  - eggs
+env:
+- PLONE_VERSION=4.3 EXTRAS=buildout:package-extras=[test,archetypes]
+- PLONE_VERSION=4.3 EXTRAS=buildout:package-extras=[test,dexterity]
+matrix:
+  fast_finish: true
+install:
+- sed -ie "s#test-4.3.x.cfg#test-$PLONE_VERSION.x.cfg#" buildout.cfg
+- python bootstrap.py
+- bin/buildout $EXTRAS annotate
+- bin/buildout $EXTRAS
+script:
+- bin/test
+after_success:
+- bin/createcoverage
+- pip install coveralls
+- coveralls
+notifications:
+  irc: irc.freenode.org#plone-testing


Repository: plone.app.event


Branch: refs/heads/1.1.x
Date: 2018-03-08T01:22:11+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.event/commit/3c8db6e26caf8da7890d40e9a11d7ab943ed513f

Merge pull request #257 from plone/hvelarde-travis

Add CI configuration

Files changed:
A .coveragerc
A .travis.yml
M .gitignore
M bootstrap.py
M buildout.cfg

diff --git a/.coveragerc b/.coveragerc
new file mode 100644
index 00000000..c73c5b53
--- /dev/null
+++ b/.coveragerc
@@ -0,0 +1,2 @@
+[report]
+include = plone/app/event/*
diff --git a/.gitignore b/.gitignore
index e0ea3696..6ba42769 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,8 +3,8 @@
 *.py?
 *.sw?
 *.wpr
-.*
-!.gitignore
+.installed.cfg
+.mr.developer.cfg
 bin/
 coverage/
 dev/
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 00000000..87a65c60
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,24 @@
+language: python
+python: 2.7
+sudo: false
+cache:
+  directories:
+  - eggs
+env:
+- PLONE_VERSION=4.3 EXTRAS=buildout:package-extras=[test,archetypes]
+- PLONE_VERSION=4.3 EXTRAS=buildout:package-extras=[test,dexterity]
+matrix:
+  fast_finish: true
+install:
+- sed -ie "s#test-4.3.x.cfg#test-$PLONE_VERSION.x.cfg#" buildout.cfg
+- python bootstrap.py
+- bin/buildout $EXTRAS annotate
+- bin/buildout $EXTRAS
+script:
+- bin/test
+after_success:
+- bin/createcoverage
+- pip install coveralls
+- coveralls
+notifications:
+  irc: irc.freenode.org#plone-testing
diff --git a/bootstrap.py b/bootstrap.py
index 6b7e45cc..a4599211 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -25,7 +25,10 @@
 
 from optparse import OptionParser
 
-tmpeggs = tempfile.mkdtemp()
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
 
 usage = '''\
 [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
@@ -35,13 +38,14 @@
 Simply run this script in a directory containing a buildout.cfg, using the
 Python that you want bin/buildout to use.
 
-Note that by using --find-links to point to local resources, you can keep 
+Note that by using --find-links to point to local resources, you can keep
 this script from going over the network.
 '''
 
 parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", help="use a specific zc.buildout version")
-
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
 parser.add_option("-t", "--accept-buildout-test-releases",
                   dest='accept_buildout_test_releases',
                   action="store_true", default=False,
@@ -59,36 +63,57 @@
 parser.add_option("--allow-site-packages",
                   action="store_true", default=False,
                   help=("Let bootstrap.py use existing site packages"))
-
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
 
 options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
 
 ######################################################################
 # load/install setuptools
 
 try:
-    if options.allow_site_packages:
-        import setuptools
-        import pkg_resources
     from urllib.request import urlopen
 except ImportError:
     from urllib2 import urlopen
 
 ez = {}
-exec(urlopen('https://bitbucket.org/pypa/setuptools/downloads/ez_setup.py'
-            ).read(), ez)
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
 if not options.allow_site_packages:
     # ez_setup imports site, which adds site packages
-    # this will remove them from the path to ensure that incompatible versions 
+    # this will remove them from the path to ensure that incompatible versions
     # of setuptools are not in the path
     import site
-    # inside a virtualenv, there is no 'getsitepackages'. 
+    # inside a virtualenv, there is no 'getsitepackages'.
     # We can't remove these reliably
     if hasattr(site, 'getsitepackages'):
         for sitepackage_path in site.getsitepackages():
-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
 
 setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
 ez['use_setuptools'](**setup_args)
 import setuptools
 import pkg_resources
@@ -104,7 +129,12 @@
 
 ws = pkg_resources.working_set
 
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
 cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
        'from setuptools.command.easy_install import main; main()',
        '-mZqNxd', tmpeggs]
 
@@ -117,21 +147,23 @@
 if find_links:
     cmd.extend(['-f', find_links])
 
-setuptools_path = ws.find(
-    pkg_resources.Requirement.parse('setuptools')).location
-
 requirement = 'zc.buildout'
-version = options.version
+version = options.buildout_version
 if version is None and not options.accept_buildout_test_releases:
     # Figure out the most recent final version of zc.buildout.
     import setuptools.package_index
     _final_parts = '*final-', '*final'
 
     def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
     index = setuptools.package_index.PackageIndex(
         search_path=[setuptools_path])
     if find_links:
@@ -156,10 +188,9 @@ def _final_version(parsed_version):
 cmd.append(requirement)
 
 import subprocess
-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
+if subprocess.call(cmd) != 0:
     raise Exception(
-        "Failed to execute command:\n%s",
-        repr(cmd)[1:-1])
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
 
 ######################################################################
 # Import and run buildout
diff --git a/buildout.cfg b/buildout.cfg
index 7cddfe50..8786cb87 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,26 +1,13 @@
 [buildout]
 extends =
-    http://dist.plone.org/release/4.3-latest/versions.cfg
-    versions.cfg
-    sources.cfg
-parts = instance
+    https://raw.github.com/collective/buildout.plonetest/master/test-4.3.x.cfg
+    https://raw.github.com/collective/buildout.plonetest/master/qa.cfg
 
-versions = versions
-sources-dir = ${buildout:directory}/devsrc
+package-name = plone.app.event
+package-extras = [test]
 
-develop = .
+parts +=
+    createcoverage
 
-[sources]
-# Looks like, `develop = .` doesn't work well with mr.developer. So we checkout
-# plone.app.event to the buildout directory path.
-plone.app.event = git git@github.com:plone/plone.app.event.git branch=1.1.x full-path=${buildout:directory}
-
-[instance]
-recipe = plone.recipe.zope2instance
-user = admin:admin
-environment-vars = zope_i18n_compile_mo_files true
-eggs =
-    Plone
-    Pillow
-    plone.app.event [archetypes, dexterity]
-    plone.app.contenttypes
+[versions]
+icalendar = 3.11.3


